
BlueBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800a038  0800a038  0001a038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a9ac  0800a9ac  0001a9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a9b8  0800a9b8  0001a9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000560  20010000  0800a9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  00020560  2**0
                  CONTENTS
  8 .sram2        00000000  2004c000  2004c000  00020560  2**0
                  CONTENTS
  9 .bss          00003f4c  20010560  20010560  00020560  2**2
                  ALLOC
 10 ._user_heap_stack 00001100  200144ac  200144ac  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020560  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011795  00000000  00000000  00020590  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032c8  00000000  00000000  00031d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a8  00000000  00000000  00034ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  00036698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009c76  00000000  00000000  00037af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000660b  00000000  00000000  0004176e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00047d79  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006670  00000000  00000000  00047df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20010560 	.word	0x20010560
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a020 	.word	0x0800a020

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20010564 	.word	0x20010564
 800020c:	0800a020 	.word	0x0800a020

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f00:	4905      	ldr	r1, [pc, #20]	; (8000f18 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <NVIC_SystemReset+0x20>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <NVIC_SystemReset+0x24>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	60cb      	str	r3, [r1, #12]
 8000f10:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f14:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 8000f16:	e7fd      	b.n	8000f14 <NVIC_SystemReset+0x1c>
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	05fa0004 	.word	0x05fa0004

08000f20 <OS_SHL_RegisterCommands>:
 * -----------------------------------------------------------------------------
 */


void OS_SHL_RegisterCommands( void )
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	FreeRTOS_CLIRegisterCommand( &xReset );
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <OS_SHL_RegisterCommands+0x1c>)
 8000f26:	f004 fdc9 	bl	8005abc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xTaskList );
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <OS_SHL_RegisterCommands+0x20>)
 8000f2c:	f004 fdc6 	bl	8005abc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xLeds );
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <OS_SHL_RegisterCommands+0x24>)
 8000f32:	f004 fdc3 	bl	8005abc <FreeRTOS_CLIRegisterCommand>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800a67c 	.word	0x0800a67c
 8000f40:	0800a68c 	.word	0x0800a68c
 8000f44:	0800a69c 	.word	0x0800a69c

08000f48 <OS_SHL_ResetCmd>:
 * Commands functions
 * -----------------------------------------------------------------------------
 */

static BaseType_t OS_SHL_ResetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	snprintf( pcWriteBuffer, xWriteBufferLen, "Resetting..."SHELL_EOL);
 8000f54:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <OS_SHL_ResetCmd+0x24>)
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f006 f931 	bl	80071c0 <snprintf>
	NVIC_SystemReset(); /* Auto-kill */
 8000f5e:	f7ff ffcb 	bl	8000ef8 <NVIC_SystemReset>
	return pdFALSE;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800a174 	.word	0x0800a174

08000f70 <OS_SHL_TaskListCmd>:

static BaseType_t OS_SHL_TaskListCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	const char *const pcHeader =
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <OS_SHL_TaskListCmd+0x80>)
 8000f7e:	613b      	str	r3, [r7, #16]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d103      	bne.n	8000f8e <OS_SHL_TaskListCmd+0x1e>
 8000f86:	491b      	ldr	r1, [pc, #108]	; (8000ff4 <OS_SHL_TaskListCmd+0x84>)
 8000f88:	207b      	movs	r0, #123	; 0x7b
 8000f8a:	f000 f925 	bl	80011d8 <vAssertCalled>

	/* Generate a table of task stats. */
	strcpy( pcWriteBuffer, "Task" );
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <OS_SHL_TaskListCmd+0x88>)
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6018      	str	r0, [r3, #0]
 8000f96:	7912      	ldrb	r2, [r2, #4]
 8000f98:	711a      	strb	r2, [r3, #4]
	pcWriteBuffer += strlen( pcWriteBuffer );
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f7ff f938 	bl	8000210 <strlen>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

	/* Minus three for the null terminator and half the number of characters in
	"Task" so the column lines up with the centre of the heading. */
	configASSERT( configMAX_TASK_NAME_LEN > 3 );
	for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 8000fa8:	2304      	movs	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e00b      	b.n	8000fc6 <OS_SHL_TaskListCmd+0x56>
	{
		/* Add a space to align columns after the task's name. */
		*pcWriteBuffer = ' ';
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	701a      	strb	r2, [r3, #0]
		pcWriteBuffer++;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]

		/* Ensure always terminated. */
		*pcWriteBuffer = 0x00;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	pcWriteBuffer += strlen( pcWriteBuffer );

	/* Minus three for the null terminator and half the number of characters in
	"Task" so the column lines up with the centre of the heading. */
	configASSERT( configMAX_TASK_NAME_LEN > 3 );
	for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b0c      	cmp	r3, #12
 8000fca:	ddf0      	ble.n	8000fae <OS_SHL_TaskListCmd+0x3e>
		pcWriteBuffer++;

		/* Ensure always terminated. */
		*pcWriteBuffer = 0x00;
	}
	strcpy( pcWriteBuffer, pcHeader );
 8000fcc:	6939      	ldr	r1, [r7, #16]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f006 f96a 	bl	80072a8 <strcpy>
	vTaskList( pcWriteBuffer + strlen( pcHeader ) );
 8000fd4:	6938      	ldr	r0, [r7, #16]
 8000fd6:	f7ff f91b 	bl	8000210 <strlen>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 f98d 	bl	8005300 <vTaskList>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	0800a184 	.word	0x0800a184
 8000ff4:	0800a1dc 	.word	0x0800a1dc
 8000ff8:	0800a208 	.word	0x0800a208

08000ffc <OS_SHL_LedCmd>:


static BaseType_t OS_SHL_LedCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	char* pcParameter2;
	BaseType_t xParameter1StringLength;
	BaseType_t xParameter2StringLength;

	/* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	461a      	mov	r2, r3
 800100e:	2101      	movs	r1, #1
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f004 fe1b 	bl	8005c4c <FreeRTOS_CLIGetParameter>
 8001016:	61f8      	str	r0, [r7, #28]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	461a      	mov	r2, r3
 800101e:	2102      	movs	r1, #2
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f004 fe13 	bl	8005c4c <FreeRTOS_CLIGetParameter>
 8001026:	61b8      	str	r0, [r7, #24]

    /* Terminate both strings */
	pcParameter1[ xParameter1StringLength ] = 0x00;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	461a      	mov	r2, r3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
	pcParameter2[ xParameter2StringLength ] = 0x00;
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	461a      	mov	r2, r3
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	4413      	add	r3, r2
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]

    /* Decode <mode> argument */
    if(!strcasecmp(pcParameter1, "STATIC")) {
 8001040:	494a      	ldr	r1, [pc, #296]	; (800116c <OS_SHL_LedCmd+0x170>)
 8001042:	69f8      	ldr	r0, [r7, #28]
 8001044:	f006 f912 	bl	800726c <strcasecmp>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <OS_SHL_LedCmd+0x5a>
    	LedSetMode(HW_LED_STATIC);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f98e 	bl	8001370 <LedSetMode>
 8001054:	e01d      	b.n	8001092 <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_SLOW")) {
 8001056:	4946      	ldr	r1, [pc, #280]	; (8001170 <OS_SHL_LedCmd+0x174>)
 8001058:	69f8      	ldr	r0, [r7, #28]
 800105a:	f006 f907 	bl	800726c <strcasecmp>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <OS_SHL_LedCmd+0x70>
    	LedSetMode(HW_LED_BLINK_SLOW);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f983 	bl	8001370 <LedSetMode>
 800106a:	e012      	b.n	8001092 <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_FAST")) {
 800106c:	4941      	ldr	r1, [pc, #260]	; (8001174 <OS_SHL_LedCmd+0x178>)
 800106e:	69f8      	ldr	r0, [r7, #28]
 8001070:	f006 f8fc 	bl	800726c <strcasecmp>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <OS_SHL_LedCmd+0x86>
    	LedSetMode(HW_LED_BLINK_FAST);
 800107a:	2002      	movs	r0, #2
 800107c:	f000 f978 	bl	8001370 <LedSetMode>
 8001080:	e007      	b.n	8001092 <OS_SHL_LedCmd+0x96>
    } else {
    	snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not set LED mode to %s"SHELL_EOL, pcParameter1);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	4a3c      	ldr	r2, [pc, #240]	; (8001178 <OS_SHL_LedCmd+0x17c>)
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f006 f899 	bl	80071c0 <snprintf>
    	return pdFALSE;
 800108e:	2300      	movs	r3, #0
 8001090:	e068      	b.n	8001164 <OS_SHL_LedCmd+0x168>
    }

    /* Decode <color> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 8001092:	493a      	ldr	r1, [pc, #232]	; (800117c <OS_SHL_LedCmd+0x180>)
 8001094:	69b8      	ldr	r0, [r7, #24]
 8001096:	f006 f8e9 	bl	800726c <strcasecmp>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <OS_SHL_LedCmd+0xac>
        	LedSetColor(HW_LED_OFF);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f947 	bl	8001334 <LedSetColor>
 80010a6:	e054      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "WHITE")) {
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <OS_SHL_LedCmd+0x184>)
 80010aa:	69b8      	ldr	r0, [r7, #24]
 80010ac:	f006 f8de 	bl	800726c <strcasecmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <OS_SHL_LedCmd+0xc2>
    	LedSetColor(HW_LED_WHITE);
 80010b6:	2008      	movs	r0, #8
 80010b8:	f000 f93c 	bl	8001334 <LedSetColor>
 80010bc:	e049      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "RED")) {
 80010be:	4931      	ldr	r1, [pc, #196]	; (8001184 <OS_SHL_LedCmd+0x188>)
 80010c0:	69b8      	ldr	r0, [r7, #24]
 80010c2:	f006 f8d3 	bl	800726c <strcasecmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <OS_SHL_LedCmd+0xd8>
    	LedSetColor(HW_LED_RED);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f931 	bl	8001334 <LedSetColor>
 80010d2:	e03e      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "GREEN")) {
 80010d4:	492c      	ldr	r1, [pc, #176]	; (8001188 <OS_SHL_LedCmd+0x18c>)
 80010d6:	69b8      	ldr	r0, [r7, #24]
 80010d8:	f006 f8c8 	bl	800726c <strcasecmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d103      	bne.n	80010ea <OS_SHL_LedCmd+0xee>
    	LedSetColor(HW_LED_GREEN);
 80010e2:	2002      	movs	r0, #2
 80010e4:	f000 f926 	bl	8001334 <LedSetColor>
 80010e8:	e033      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "BLUE")) {
 80010ea:	4928      	ldr	r1, [pc, #160]	; (800118c <OS_SHL_LedCmd+0x190>)
 80010ec:	69b8      	ldr	r0, [r7, #24]
 80010ee:	f006 f8bd 	bl	800726c <strcasecmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <OS_SHL_LedCmd+0x104>
    	LedSetColor(HW_LED_BLUE);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f91b 	bl	8001334 <LedSetColor>
 80010fe:	e028      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "CYAN")) {
 8001100:	4923      	ldr	r1, [pc, #140]	; (8001190 <OS_SHL_LedCmd+0x194>)
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f006 f8b2 	bl	800726c <strcasecmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d103      	bne.n	8001116 <OS_SHL_LedCmd+0x11a>
    	LedSetColor(HW_LED_CYAN);
 800110e:	2004      	movs	r0, #4
 8001110:	f000 f910 	bl	8001334 <LedSetColor>
 8001114:	e01d      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "MAGENTA")) {
 8001116:	491f      	ldr	r1, [pc, #124]	; (8001194 <OS_SHL_LedCmd+0x198>)
 8001118:	69b8      	ldr	r0, [r7, #24]
 800111a:	f006 f8a7 	bl	800726c <strcasecmp>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <OS_SHL_LedCmd+0x130>
    	LedSetColor(HW_LED_MAGENTA);
 8001124:	2007      	movs	r0, #7
 8001126:	f000 f905 	bl	8001334 <LedSetColor>
 800112a:	e012      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "YELLOW")) {
 800112c:	491a      	ldr	r1, [pc, #104]	; (8001198 <OS_SHL_LedCmd+0x19c>)
 800112e:	69b8      	ldr	r0, [r7, #24]
 8001130:	f006 f89c 	bl	800726c <strcasecmp>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <OS_SHL_LedCmd+0x146>
		LedSetColor(HW_LED_YELLOW);
 800113a:	2005      	movs	r0, #5
 800113c:	f000 f8fa 	bl	8001334 <LedSetColor>
 8001140:	e007      	b.n	8001152 <OS_SHL_LedCmd+0x156>
    } else {
		snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not set LED color to %s"SHELL_EOL, pcParameter2);
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <OS_SHL_LedCmd+0x1a0>)
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f006 f839 	bl	80071c0 <snprintf>
		return pdFALSE;
 800114e:	2300      	movs	r3, #0
 8001150:	e008      	b.n	8001164 <OS_SHL_LedCmd+0x168>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, "Defined LED to %s %s"SHELL_EOL, pcParameter1, pcParameter2);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <OS_SHL_LedCmd+0x1a4>)
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f006 f82f 	bl	80071c0 <snprintf>
    return pdFALSE;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800a210 	.word	0x0800a210
 8001170:	0800a218 	.word	0x0800a218
 8001174:	0800a224 	.word	0x0800a224
 8001178:	0800a230 	.word	0x0800a230
 800117c:	0800a258 	.word	0x0800a258
 8001180:	0800a25c 	.word	0x0800a25c
 8001184:	0800a264 	.word	0x0800a264
 8001188:	0800a268 	.word	0x0800a268
 800118c:	0800a270 	.word	0x0800a270
 8001190:	0800a278 	.word	0x0800a278
 8001194:	0800a280 	.word	0x0800a280
 8001198:	0800a288 	.word	0x0800a288
 800119c:	0800a290 	.word	0x0800a290
 80011a0:	0800a2b8 	.word	0x0800a2b8

080011a4 <vApplicationMallocFailedHook>:
 */

#include "blueboard.h"

void vApplicationMallocFailedHook( void )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 80011a8:	4902      	ldr	r1, [pc, #8]	; (80011b4 <vApplicationMallocFailedHook+0x10>)
 80011aa:	2022      	movs	r0, #34	; 0x22
 80011ac:	f000 f814 	bl	80011d8 <vAssertCalled>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800a2d0 	.word	0x0800a2d0

080011b8 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    function is called if a stack overflow is detected. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 80011c2:	4904      	ldr	r1, [pc, #16]	; (80011d4 <vApplicationStackOverflowHook+0x1c>)
 80011c4:	2030      	movs	r0, #48	; 0x30
 80011c6:	f000 f807 	bl	80011d8 <vAssertCalled>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800a2d0 	.word	0x0800a2d0

080011d8 <vAssertCalled>:
    ( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]

    ( void ) pcFile;
    ( void ) ulLine;

    taskENTER_CRITICAL();
 80011e6:	f001 ffbf 	bl	8003168 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while( ul == 0 )
 80011ea:	e000      	b.n	80011ee <vAssertCalled+0x16>
 80011ec:	bf00      	nop
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0fb      	beq.n	80011ec <vAssertCalled+0x14>
        {
            __NOP();
        }
    }
    taskEXIT_CRITICAL();
 80011f4:	f001 ffe4 	bl	80031c0 <vPortExitCritical>
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_sbrk>:
    }
    return len;
}

caddr_t _sbrk(int incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_sbrk+0x50>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x16>
        heap_end = &end;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <_sbrk+0x50>)
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <_sbrk+0x54>)
 8001214:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <_sbrk+0x50>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <_sbrk+0x50>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	466a      	mov	r2, sp
 8001226:	4293      	cmp	r3, r2
 8001228:	d907      	bls.n	800123a <_sbrk+0x3a>
    {
//      write(1, "Heap and stack collision\n", 25);
//      abort();
        errno = ENOMEM;
 800122a:	f005 ff89 	bl	8007140 <__errno>
 800122e:	4602      	mov	r2, r0
 8001230:	230c      	movs	r3, #12
 8001232:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	e006      	b.n	8001248 <_sbrk+0x48>
    }

    heap_end += incr;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <_sbrk+0x50>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a03      	ldr	r2, [pc, #12]	; (8001250 <_sbrk+0x50>)
 8001244:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2001057c 	.word	0x2001057c
 8001254:	200144ac 	.word	0x200144ac

08001258 <OS_CreateLedTask>:
/* Local, Private functions */
static void OS_LedTask(void *pvParameters);


void OS_CreateLedTask(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af02      	add	r7, sp, #8
	xLedColorMutex = xSemaphoreCreateMutex();
 800125e:	2001      	movs	r0, #1
 8001260:	f002 fb22 	bl	80038a8 <xQueueCreateMutex>
 8001264:	4602      	mov	r2, r0
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <OS_CreateLedTask+0x38>)
 8001268:	601a      	str	r2, [r3, #0]
	xLedModeMutex = xSemaphoreCreateMutex();
 800126a:	2001      	movs	r0, #1
 800126c:	f002 fb1c 	bl	80038a8 <xQueueCreateMutex>
 8001270:	4602      	mov	r2, r0
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <OS_CreateLedTask+0x3c>)
 8001274:	601a      	str	r2, [r3, #0]
    xTaskCreate(OS_LedTask, "LED", configMINIMAL_STACK_SIZE, NULL, OS_TASK_PRIORITY_LED, NULL );
 8001276:	2300      	movs	r3, #0
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2302      	movs	r3, #2
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2282      	movs	r2, #130	; 0x82
 8001282:	4905      	ldr	r1, [pc, #20]	; (8001298 <OS_CreateLedTask+0x40>)
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <OS_CreateLedTask+0x44>)
 8001286:	f002 ff8d 	bl	80041a4 <xTaskCreate>
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20010580 	.word	0x20010580
 8001294:	20010584 	.word	0x20010584
 8001298:	0800a2f4 	.word	0x0800a2f4
 800129c:	080012a1 	.word	0x080012a1

080012a0 <OS_LedTask>:

static void OS_LedTask( void *pvParameters )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    TickType_t xNextWakeTime;

    uint32_t blinkCounter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
    uint32_t blinkPeriod = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 80012b0:	f003 fa60 	bl	8004774 <xTaskGetTickCount>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
        switch(LedMode)
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <OS_LedTask+0x8c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d002      	beq.n	80012c6 <OS_LedTask+0x26>
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d003      	beq.n	80012cc <OS_LedTask+0x2c>
                blinkPeriod = LED_BLINK_FAST;
                break;

            default:
            case HW_LED_STATIC:
                        break;
 80012c4:	e005      	b.n	80012d2 <OS_LedTask+0x32>
    for( ;; )
    {
        switch(LedMode)
        {
            case HW_LED_BLINK_SLOW:
                blinkPeriod = LED_BLINK_SLOW;
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	613b      	str	r3, [r7, #16]
                break;
 80012ca:	e002      	b.n	80012d2 <OS_LedTask+0x32>

            case HW_LED_BLINK_FAST:
                blinkPeriod = LED_BLINK_FAST;
 80012cc:	230a      	movs	r3, #10
 80012ce:	613b      	str	r3, [r7, #16]
                break;
 80012d0:	bf00      	nop
            case HW_LED_STATIC:
                        break;
        }

        /* Handles blinking counter */
        if(blinkCounter++ > blinkPeriod)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	617a      	str	r2, [r7, #20]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <OS_LedTask+0x42>
            blinkCounter = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]

        if((blinkCounter > blinkPeriod / 2) || LedMode == HW_LED_STATIC) {
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	085a      	lsrs	r2, r3, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d303      	bcc.n	80012f4 <OS_LedTask+0x54>
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <OS_LedTask+0x8c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d114      	bne.n	800131e <OS_LedTask+0x7e>

            /* Duration ON */
            HW_LED_SetColor(LedColor);
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <OS_LedTask+0x90>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 fa9f 	bl	800683c <HW_LED_SetColor>
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_DUTY_TICK);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2101      	movs	r1, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f003 f881 	bl	800440c <vTaskDelayUntil>

            /* Duration OFF */
            HW_LED_SetColor(HW_LED_OFF);
 800130a:	2000      	movs	r0, #0
 800130c:	f005 fa96 	bl	800683c <HW_LED_SetColor>
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK-LED_PWM_DUTY_TICK);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2113      	movs	r1, #19
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f878 	bl	800440c <vTaskDelayUntil>
 800131c:	e005      	b.n	800132a <OS_LedTask+0x8a>

        } else {
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2114      	movs	r1, #20
 8001324:	4618      	mov	r0, r3
 8001326:	f003 f871 	bl	800440c <vTaskDelayUntil>
        }
    }
 800132a:	e7c5      	b.n	80012b8 <OS_LedTask+0x18>
 800132c:	20010589 	.word	0x20010589
 8001330:	20010588 	.word	0x20010588

08001334 <LedSetColor>:
}

void LedSetColor(HW_LED_ColorTypeDef color)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedColorMutex, 10);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <LedSetColor+0x34>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	220a      	movs	r2, #10
 8001346:	2100      	movs	r1, #0
 8001348:	f002 fc5c 	bl	8003c04 <xQueueGenericReceive>
	LedColor = color;
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <LedSetColor+0x38>)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedColorMutex);
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <LedSetColor+0x34>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	f002 fabc 	bl	80038d8 <xQueueGenericSend>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20010580 	.word	0x20010580
 800136c:	20010588 	.word	0x20010588

08001370 <LedSetMode>:

void LedSetMode(HW_LED_ModeTypeDef mode)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedModeMutex, 10);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <LedSetMode+0x34>)
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	220a      	movs	r2, #10
 8001382:	2100      	movs	r1, #0
 8001384:	f002 fc3e 	bl	8003c04 <xQueueGenericReceive>
	LedMode = mode;
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <LedSetMode+0x38>)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedModeMutex);
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <LedSetMode+0x34>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	f002 fa9e 	bl	80038d8 <xQueueGenericSend>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20010584 	.word	0x20010584
 80013a8:	20010589 	.word	0x20010589

080013ac <OS_SHL_Start>:
 * Shell creation
 * -----------------------------------------------------------------------------
 */

void OS_SHL_Start( void )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af02      	add	r7, sp, #8
	/* Create the semaphore used to access the UART Tx. */
	xTxMutex = xSemaphoreCreateMutex();
 80013b2:	2001      	movs	r0, #1
 80013b4:	f002 fa78 	bl	80038a8 <xQueueCreateMutex>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <OS_SHL_Start+0x40>)
 80013bc:	601a      	str	r2, [r3, #0]
	configASSERT( xTxMutex );
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <OS_SHL_Start+0x40>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <OS_SHL_Start+0x22>
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <OS_SHL_Start+0x44>)
 80013c8:	2029      	movs	r0, #41	; 0x29
 80013ca:	f7ff ff05 	bl	80011d8 <vAssertCalled>

	/* Register Shell Commands */
	OS_SHL_RegisterCommands();
 80013ce:	f7ff fda7 	bl	8000f20 <OS_SHL_RegisterCommands>

	/* Create that task that handles the console itself. */
	xTaskCreate( 	OS_SHL_Task,				/* The task that implements the command console. */
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	22fa      	movs	r2, #250	; 0xfa
 80013de:	4905      	ldr	r1, [pc, #20]	; (80013f4 <OS_SHL_Start+0x48>)
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <OS_SHL_Start+0x4c>)
 80013e2:	f002 fedf 	bl	80041a4 <xTaskCreate>
					"SHL",						/* Text name assigned to the task.  This is just to assist debugging.  The kernel does not use this name itself. */
					250,						/* The size of the stack allocated to the task. */
					NULL,						/* The parameter is not used, so NULL is passed. */
					OS_TASK_PRIORITY_SHELL,		/* The priority allocated to the task. */
					NULL );						/* A handle is not required, so just pass NULL. */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2001058c 	.word	0x2001058c
 80013f0:	0800a470 	.word	0x0800a470
 80013f4:	0800a490 	.word	0x0800a490
 80013f8:	080013fd 	.word	0x080013fd

080013fc <OS_SHL_Task>:
 * Shell Task
 * -----------------------------------------------------------------------------
 */

static void OS_SHL_Task( void *pvParameters )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	char cRxedChar;
	uint8_t ucInputIndex = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]
	( void ) pvParameters;

	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console interface
	will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8001408:	f004 fc16 	bl	8005c38 <FreeRTOS_CLIGetOutputBuffer>
 800140c:	6138      	str	r0, [r7, #16]

	/* Send the welcome message. */
	HW_DBG_Puts(pcWelcomeMessage);
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <OS_SHL_Task+0xf4>)
 8001410:	4618      	mov	r0, r3
 8001412:	f004 ff1f 	bl	8006254 <HW_DBG_Puts>
	{
		/* Wait for the next character.  The while loop is used in case
		INCLUDE_vTaskSuspend is not set to 1 - in which case portMAX_DELAY will
		be a genuine block time rather than an infinite block time. */
		//while( xSerialGetChar( xPort, &cRxedChar, portMAX_DELAY ) != pdPASS );
		cRxedChar = (char) HW_DBG_Get();
 8001416:	f004 ff33 	bl	8006280 <HW_DBG_Get>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]

		/* Ensure exclusive access to the UART Tx. */
		if( xSemaphoreTake( xTxMutex, SHELL_MAX_MUTEX_WAIT ) == pdPASS )
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <OS_SHL_Task+0xf8>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001428:	2100      	movs	r1, #0
 800142a:	f002 fbeb 	bl	8003c04 <xQueueGenericReceive>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d1f0      	bne.n	8001416 <OS_SHL_Task+0x1a>
		{
			/* Echo the character back. */
			//xSerialPutChar( xPort, cRxedChar, portMAX_DELAY );
			HW_DBG_Put(cRxedChar);
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fef2 	bl	8006220 <HW_DBG_Put>

			/* Was it the end of the line? */
			if( cRxedChar == '\n' || cRxedChar == '\r' )
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d002      	beq.n	8001448 <OS_SHL_Task+0x4c>
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b0d      	cmp	r3, #13
 8001446:	d126      	bne.n	8001496 <OS_SHL_Task+0x9a>
			{
				/* Just to space the output from the input. */
				HW_DBG_Puts(pcNewLine);
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <OS_SHL_Task+0xfc>)
 800144a:	4618      	mov	r0, r3
 800144c:	f004 ff02 	bl	8006254 <HW_DBG_Puts>

				/* See if the command is empty, indicating that the last command
				is to be executed again. */
				if( ucInputIndex == 0 )
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <OS_SHL_Task+0x62>
				{
					/* Copy the last command back into the input string. */
					strcpy( cInputString, cLastInputString );
 8001456:	4929      	ldr	r1, [pc, #164]	; (80014fc <OS_SHL_Task+0x100>)
 8001458:	4829      	ldr	r0, [pc, #164]	; (8001500 <OS_SHL_Task+0x104>)
 800145a:	f005 ff25 	bl	80072a8 <strcpy>
				pdFALSE	(indicating there is no more output) as it might
				generate more than one string. */
				do
				{
					/* Get the next output string from the command interpreter. */
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	6939      	ldr	r1, [r7, #16]
 8001462:	4827      	ldr	r0, [pc, #156]	; (8001500 <OS_SHL_Task+0x104>)
 8001464:	f004 fb62 	bl	8005b2c <FreeRTOS_CLIProcessCommand>
 8001468:	60b8      	str	r0, [r7, #8]

					/* Write the generated string to the UART. */
					HW_DBG_Puts(pcOutputString);
 800146a:	6938      	ldr	r0, [r7, #16]
 800146c:	f004 fef2 	bl	8006254 <HW_DBG_Puts>

				} while( xReturned != pdFALSE );
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f3      	bne.n	800145e <OS_SHL_Task+0x62>

				/* All the strings generated by the input command have been
				sent.  Clear the input string ready to receive the next command.
				Remember the command that was just processed first in case it is
				to be processed again. */
				strcpy( cLastInputString, cInputString );
 8001476:	4922      	ldr	r1, [pc, #136]	; (8001500 <OS_SHL_Task+0x104>)
 8001478:	4820      	ldr	r0, [pc, #128]	; (80014fc <OS_SHL_Task+0x100>)
 800147a:	f005 ff15 	bl	80072a8 <strcpy>
				ucInputIndex = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
				memset( cInputString, 0x00, SHELL_MAX_INPUT_SIZE );
 8001482:	2232      	movs	r2, #50	; 0x32
 8001484:	2100      	movs	r1, #0
 8001486:	481e      	ldr	r0, [pc, #120]	; (8001500 <OS_SHL_Task+0x104>)
 8001488:	f005 fe91 	bl	80071ae <memset>
				HW_DBG_Puts(pcEndOfOutputMessage);
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <OS_SHL_Task+0x108>)
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fee0 	bl	8006254 <HW_DBG_Puts>
 8001494:	e023      	b.n	80014de <OS_SHL_Task+0xe2>
			}
			else
			{
				if( cRxedChar == '\r' )
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b0d      	cmp	r3, #13
 800149a:	d020      	beq.n	80014de <OS_SHL_Task+0xe2>
				{
					/* Ignore the character. */
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d002      	beq.n	80014a8 <OS_SHL_Task+0xac>
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b7f      	cmp	r3, #127	; 0x7f
 80014a6:	d10a      	bne.n	80014be <OS_SHL_Task+0xc2>
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d017      	beq.n	80014de <OS_SHL_Task+0xe2>
					{
						ucInputIndex--;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	75fb      	strb	r3, [r7, #23]
						cInputString[ ucInputIndex ] = '\0';
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <OS_SHL_Task+0x104>)
 80014b8:	2100      	movs	r1, #0
 80014ba:	54d1      	strb	r1, [r2, r3]
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 80014bc:	e00f      	b.n	80014de <OS_SHL_Task+0xe2>
				else
				{
					/* A character was entered.  Add it to the string entered so
					far.  When a \n is entered the complete	string will be
					passed to the command interpreter. */
					if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b1f      	cmp	r3, #31
 80014c2:	d90c      	bls.n	80014de <OS_SHL_Task+0xe2>
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b7e      	cmp	r3, #126	; 0x7e
 80014c8:	d809      	bhi.n	80014de <OS_SHL_Task+0xe2>
					{
						if( ucInputIndex < SHELL_MAX_INPUT_SIZE )
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	2b31      	cmp	r3, #49	; 0x31
 80014ce:	d806      	bhi.n	80014de <OS_SHL_Task+0xe2>
						{
							cInputString[ ucInputIndex ] = cRxedChar;
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	490b      	ldr	r1, [pc, #44]	; (8001500 <OS_SHL_Task+0x104>)
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	54ca      	strb	r2, [r1, r3]
							ucInputIndex++;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	3301      	adds	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
					}
				}
			}

			/* Must ensure to give the mutex back. */
			xSemaphoreGive( xTxMutex );
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <OS_SHL_Task+0xf8>)
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	f002 f9f6 	bl	80038d8 <xQueueGenericSend>
		}
	}
 80014ec:	e793      	b.n	8001416 <OS_SHL_Task+0x1a>
 80014ee:	bf00      	nop
 80014f0:	0800a2f8 	.word	0x0800a2f8
 80014f4:	2001058c 	.word	0x2001058c
 80014f8:	0800a46c 	.word	0x0800a46c
 80014fc:	200105c4 	.word	0x200105c4
 8001500:	20010590 	.word	0x20010590
 8001504:	0800a464 	.word	0x0800a464

08001508 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001510:	4905      	ldr	r1, [pc, #20]	; (8001528 <NVIC_PriorityGroupConfig+0x20>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <NVIC_PriorityGroupConfig+0x24>)
 8001516:	4313      	orrs	r3, r2
 8001518:	60cb      	str	r3, [r1, #12]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	05fa0000 	.word	0x05fa0000

08001530 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <ADC_Init+0xa4>)
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800155a:	4313      	orrs	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <ADC_Init+0xa8>)
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800157e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001584:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800158c:	4313      	orrs	r3, r2
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	7d1b      	ldrb	r3, [r3, #20]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	051b      	lsls	r3, r3, #20
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	fcfffeff 	.word	0xfcfffeff
 80015d8:	c0fff7fd 	.word	0xc0fff7fd

080015dc <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	751a      	strb	r2, [r3, #20]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <ADC_CommonInit+0x48>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <ADC_CommonInit+0x4c>)
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800163e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001644:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800164a:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <ADC_CommonInit+0x48>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6053      	str	r3, [r2, #4]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40012300 	.word	0x40012300
 8001668:	fffc30e0 	.word	0xfffc30e0

0800166c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f043 0201 	orr.w	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80016b6:	e005      	b.n	80016c4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 0201 	bic.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  }
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <ADC_TempSensorVrefintCmd+0x38>)
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <ADC_TempSensorVrefintCmd+0x38>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016ea:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 80016ec:	e005      	b.n	80016fa <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <ADC_TempSensorVrefintCmd+0x38>)
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <ADC_TempSensorVrefintCmd+0x38>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016f8:	6053      	str	r3, [r2, #4]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40012300 	.word	0x40012300

0800170c <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)FLASH_Latency);
 8001714:	4906      	ldr	r1, [pc, #24]	; (8001730 <FLASH_SetLatency+0x24>)
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <FLASH_SetLatency+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 020f 	bic.w	r2, r3, #15
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40023c00 	.word	0x40023c00

08001734 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e076      	b.n	800183e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001750:	2201      	movs	r2, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d165      	bne.n	8001838 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2103      	movs	r1, #3
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	401a      	ands	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	791b      	ldrb	r3, [r3, #4]
 800178a:	4619      	mov	r1, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d003      	beq.n	80017aa <GPIO_Init+0x76>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d12e      	bne.n	8001808 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2103      	movs	r1, #3
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	795b      	ldrb	r3, [r3, #5]
 80017c8:	4619      	mov	r1, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	799b      	ldrb	r3, [r3, #6]
 80017f6:	4619      	mov	r1, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	b29b      	uxth	r3, r3
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2103      	movs	r1, #3
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	79db      	ldrb	r3, [r3, #7]
 8001828:	4619      	mov	r1, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d985      	bls.n	8001750 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800186c:	e003      	b.n	8001876 <GPIO_WriteBit+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF14_LTDC: Connect LTDC pins to AF14 for STM32F746xx/756xx devices.
  *            @arg GPIO_AF15_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800189c:	787a      	ldrb	r2, [r7, #1]
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	210f      	movs	r1, #15
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	ea02 0103 	and.w	r1, r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f100 0208 	add.w	r2, r0, #8
 80018de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	08db      	lsrs	r3, r3, #3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  if (NewState != DISABLE)
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <PWR_OverDriveCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODEN;
 8001928:	4a09      	ldr	r2, [pc, #36]	; (8001950 <PWR_OverDriveCmd+0x38>)
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <PWR_OverDriveCmd+0x38>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
  }
}
 8001934:	e005      	b.n	8001942 <PWR_OverDriveCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <PWR_OverDriveCmd+0x38>)
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <PWR_OverDriveCmd+0x38>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  if (NewState != DISABLE)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <PWR_OverDriveSWCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODSWEN;
 8001964:	4a09      	ldr	r2, [pc, #36]	; (800198c <PWR_OverDriveSWCmd+0x38>)
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <PWR_OverDriveSWCmd+0x38>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
  }
}
 8001970:	e005      	b.n	800197e <PWR_OverDriveSWCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODSWEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <PWR_OverDriveSWCmd+0x38>)
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <PWR_OverDriveSWCmd+0x38>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800197c:	6013      	str	r3, [r2, #0]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40007000 	.word	0x40007000

08001990 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if( PWR_FLAG & 0x80000000 )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da0f      	bge.n	80019c2 <PWR_GetFlagStatus+0x32>
  {
    PWR_FLAG &= PWR_WUPF_MASK;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	607b      	str	r3, [r7, #4]
    if ((PWR->CSR2 & PWR_FLAG) != (uint32_t)RESET)
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <PWR_GetFlagStatus+0x58>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <PWR_GetFlagStatus+0x2c>
    {
      bitstatus = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e00d      	b.n	80019d8 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e00a      	b.n	80019d8 <PWR_GetFlagStatus+0x48>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_FLAG) != (uint32_t)RESET)
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <PWR_GetFlagStatus+0x58>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <PWR_GetFlagStatus+0x44>
    {
      bitstatus = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e001      	b.n	80019d8 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the flag status */
  return bitstatus;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <RCC_HSEConfig+0x24>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <RCC_HSEConfig+0x24>)
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	7013      	strb	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023802 	.word	0x40023802

08001a14 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001a26:	2031      	movs	r0, #49	; 0x31
 8001a28:	f000 f9f6 	bl	8001e18 <RCC_GetFlagStatus>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a3c:	d002      	beq.n	8001a44 <RCC_WaitForHSEStartUp+0x30>
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001a44:	2031      	movs	r0, #49	; 0x31
 8001a46:	f000 f9e7 	bl	8001e18 <RCC_GetFlagStatus>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001a50:	2301      	movs	r3, #1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	e001      	b.n	8001a5a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b08b      	sub	sp, #44	; 0x2c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8001a72:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <RCC_PLLConfig+0x80>)
 8001a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8001a82:	693b      	ldr	r3, [r7, #16]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	409a      	lsls	r2, r3
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	431a      	orrs	r2, r3
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	1e59      	subs	r1, r3, #1
 8001a96:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a9a:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8001aae:	431a      	orrs	r2, r3
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001ab8:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8001ac2:	69bb      	ldr	r3, [r7, #24]
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8001ad4:	6043      	str	r3, [r0, #4]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
}
 8001ad6:	bf00      	nop
 8001ad8:	372c      	adds	r7, #44	; 0x2c
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if( NewState != DISABLE )
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <RCC_PLLCmd+0x1e>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <RCC_PLLCmd+0x38>)
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <RCC_PLLCmd+0x38>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
  }
}
 8001b04:	e005      	b.n	8001b12 <RCC_PLLCmd+0x2a>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b06:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <RCC_PLLCmd+0x38>)
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <RCC_PLLCmd+0x38>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <RCC_SYSCLKConfig+0x34>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f023 0303 	bic.w	r3, r3, #3
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <RCC_SYSCLKConfig+0x34>)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6093      	str	r3, [r2, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40023800 	.word	0x40023800

08001b5c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <RCC_HCLKConfig+0x34>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <RCC_HCLKConfig+0x34>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40023800 	.word	0x40023800

08001b94 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <RCC_PCLK1Config+0x34>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <RCC_PCLK1Config+0x34>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6093      	str	r3, [r2, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40023800 	.word	0x40023800

08001bcc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <RCC_PCLK2Config+0x38>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <RCC_PCLK2Config+0x38>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6093      	str	r3, [r2, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	2302      	movs	r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c28:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d007      	beq.n	8001c48 <RCC_GetClocksFreq+0x40>
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d009      	beq.n	8001c50 <RCC_GetClocksFreq+0x48>
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d13f      	bne.n	8001cc0 <RCC_GetClocksFreq+0xb8>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <RCC_GetClocksFreq+0x144>)
 8001c44:	601a      	str	r2, [r3, #0]
    break;
 8001c46:	e03f      	b.n	8001cc8 <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a41      	ldr	r2, [pc, #260]	; (8001d50 <RCC_GetClocksFreq+0x148>)
 8001c4c:	601a      	str	r2, [r3, #0]
    break;
 8001c4e:	e03b      	b.n	8001cc8 <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_PLL:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c50:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	0d9b      	lsrs	r3, r3, #22
 8001c5a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c64:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c6c:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <RCC_GetClocksFreq+0x148>)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c74:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	fb03 f302 	mul.w	r3, r3, r2
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e00c      	b.n	8001ca2 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <RCC_GetClocksFreq+0x144>)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c98:	400b      	ands	r3, r1
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	fb03 f302 	mul.w	r3, r3, r2
 8001ca0:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	3301      	adds	r3, #1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	601a      	str	r2, [r3, #0]
    break;
 8001cbe:	e003      	b.n	8001cc8 <RCC_GetClocksFreq+0xc0>
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <RCC_GetClocksFreq+0x144>)
 8001cc4:	601a      	str	r2, [r3, #0]
    break;
 8001cc6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <RCC_GetClocksFreq+0x14c>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	40da      	lsrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001cf6:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <RCC_GetClocksFreq+0x14c>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <RCC_GetClocksFreq+0x140>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d1c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	0b5b      	lsrs	r3, r3, #13
 8001d22:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <RCC_GetClocksFreq+0x14c>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	40da      	lsrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60da      	str	r2, [r3, #12]
}
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	0800a6ac 	.word	0x0800a6ac

08001d58 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001d6a:	490a      	ldr	r1, [pc, #40]	; (8001d94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001d76:	e006      	b.n	8001d86 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001d78:	4906      	ldr	r1, [pc, #24]	; (8001d94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001db6:	e006      	b.n	8001dc6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001db8:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001df6:	e006      	b.n	8001e06 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001df8:	4906      	ldr	r1, [pc, #24]	; (8001e14 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4013      	ands	r3, r2
 8001e04:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d103      	bne.n	8001e44 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <RCC_GetFlagStatus+0x70>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e009      	b.n	8001e58 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d103      	bne.n	8001e52 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <RCC_GetFlagStatus+0x70>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e002      	b.n	8001e58 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <RCC_GetFlagStatus+0x70>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	74fb      	strb	r3, [r7, #19]
 8001e74:	e001      	b.n	8001e7a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40023800 	.word	0x40023800

08001e8c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ea6:	609a      	str	r2, [r3, #8]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	621a      	str	r2, [r3, #32]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8001f02:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8001f0e:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint32_t)~SPI_CR2_DS;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f2e:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint32_t)(SPI_InitStruct->SPI_DataSize);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint32_t)~((uint32_t)SPI_I2SCFGR_I2SMOD);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	61da      	str	r2, [r3, #28]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <SPI_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
  }
}
 8001f9e:	e005      	b.n	8001fac <SPI_Cmd+0x2c>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	601a      	str	r2, [r3, #0]
  }
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <SPI_SSOutputCmd+0x20>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f043 0204 	orr.w	r2, r3, #4
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
  }
}
 8001fd6:	e005      	b.n	8001fe4 <SPI_SSOutputCmd+0x2c>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 0204 	bic.w	r2, r3, #4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	605a      	str	r2, [r3, #4]
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <TIM_TimeBaseInit+0xb8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <TIM_TimeBaseInit+0x44>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a27      	ldr	r2, [pc, #156]	; (80020ac <TIM_TimeBaseInit+0xbc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00f      	beq.n	8002034 <TIM_TimeBaseInit+0x44>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d00b      	beq.n	8002034 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <TIM_TimeBaseInit+0xc0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <TIM_TimeBaseInit+0x44>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <TIM_TimeBaseInit+0xc4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <TIM_TimeBaseInit+0xc8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d108      	bne.n	8002046 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint32_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <TIM_TimeBaseInit+0xcc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00c      	beq.n	8002068 <TIM_TimeBaseInit+0x78>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <TIM_TimeBaseInit+0xd0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d008      	beq.n	8002068 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint32_t)(~TIM_CR1_CKD);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <TIM_TimeBaseInit+0xb8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_TimeBaseInit+0x9e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a08      	ldr	r2, [pc, #32]	; (80020ac <TIM_TimeBaseInit+0xbc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d103      	bne.n	8002096 <TIM_TimeBaseInit+0xa6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	615a      	str	r2, [r3, #20]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010400 	.word	0x40010400
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40001000 	.word	0x40001000
 80020c0:	40001400 	.word	0x40001400

080020c4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <TIM_Cmd+0x20>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
  }
}
 80020fe:	e005      	b.n	800210c <TIM_Cmd+0x2c>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 0201 	bic.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
  }
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f023 0201 	bic.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <TIM_OC1Init+0xe8>)
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 0302 	bic.w	r3, r3, #2
 800216c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <TIM_OC1Init+0xec>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_OC1Init+0x7a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <TIM_OC1Init+0xf0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d123      	bne.n	80021da <TIM_OC1Init+0xc2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f023 0308 	bic.w	r3, r3, #8
 8002198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	621a      	str	r2, [r3, #32]
}
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	fffeff8f 	.word	0xfffeff8f
 8002204:	40010000 	.word	0x40010000
 8002208:	40010400 	.word	0x40010400

0800220c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f023 0210 	bic.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <TIM_OC2Init+0xf8>)
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0320 	bic.w	r3, r3, #32
 8002262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a22      	ldr	r2, [pc, #136]	; (8002308 <TIM_OC2Init+0xfc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_OC2Init+0x80>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a21      	ldr	r2, [pc, #132]	; (800230c <TIM_OC2Init+0x100>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d127      	bne.n	80022dc <TIM_OC2Init+0xd0>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a6:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	621a      	str	r2, [r3, #32]
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	feff8fff 	.word	0xfeff8fff
 8002308:	40010000 	.word	0x40010000
 800230c:	40010400 	.word	0x40010400

08002310 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <TIM_OC3Init+0xf4>)
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0303 	bic.w	r3, r3, #3
 8002352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <TIM_OC3Init+0xf8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_OC3Init+0x7e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a20      	ldr	r2, [pc, #128]	; (800240c <TIM_OC3Init+0xfc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d127      	bne.n	80023de <TIM_OC3Init+0xce>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a8:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	621a      	str	r2, [r3, #32]
}
 80023f8:	bf00      	nop
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	fffeff8f 	.word	0xfffeff8f
 8002408:	40010000 	.word	0x40010000
 800240c:	40010400 	.word	0x40010400

08002410 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <TIM_OC4Init+0xbc>)
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002452:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002466:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	031b      	lsls	r3, r3, #12
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	031b      	lsls	r3, r3, #12
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <TIM_OC4Init+0xc0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_OC4Init+0x80>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <TIM_OC4Init+0xc4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <TIM_OC4Init+0x94>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	feff8fff 	.word	0xfeff8fff
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010400 	.word	0x40010400

080024d8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0308 	bic.w	r3, r3, #8
 8002536:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	619a      	str	r2, [r3, #24]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800256e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint32_t)(TIM_OCPreload << 8);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	619a      	str	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0308 	bic.w	r3, r3, #8
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	61da      	str	r2, [r3, #28]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025de:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint32_t)(TIM_OCPreload << 8);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	61da      	str	r2, [r3, #28]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
  }  
}
 800261a:	e005      	b.n	8002628 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
  }  
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint32_t TIM_EncoderMode,
                                uint32_t TIM_IC1Polarity, uint32_t TIM_IC2Polarity)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  uint32_t tmpccmr1 = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  uint32_t tmpccer = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61fb      	str	r3, [r7, #28]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	61bb      	str	r3, [r7, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	617b      	str	r3, [r7, #20]

  /* Set the encoder Mode */
  tmpsmcr &= (uint32_t)~TIM_SMCR_SMS;
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <TIM_EncoderInterfaceConfig+0x84>)
 8002664:	4013      	ands	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]
  tmpsmcr |= TIM_EncoderMode;
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4313      	orrs	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_CC2S);
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <TIM_EncoderInterfaceConfig+0x88>)
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f240 1301 	movw	r3, #257	; 0x101
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint32_t)~TIM_CCER_CC1P) & ((uint32_t)~TIM_CCER_CC2P);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002688:	617b      	str	r3, [r7, #20]
  tmpccer |= (uint32_t)(TIM_IC1Polarity | (uint32_t)(TIM_IC2Polarity << (uint32_t)4));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	011a      	lsls	r2, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	fffefff8 	.word	0xfffefff8
 80026bc:	fffffcfc 	.word	0xfffffcfc

080026c0 <USART_GetClockSource>:
  *                USART_CLOCKSOURCE_SYSCLK:    USARTx use SYSCLK clock source 
  *                USART_CLOCKSOURCE_LSE:       USARTx use LSE clock source
  *                USART_CLOCKSOURCE_UNDEFINED: Undefined clock source
  */
USART_ClockSourceTypeDef USART_GetClockSource(USART_TypeDef* USARTx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 80026c8:	2310      	movs	r3, #16
 80026ca:	73fb      	strb	r3, [r7, #15]
    
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4ac3      	ldr	r2, [pc, #780]	; (80029dc <USART_GetClockSource+0x31c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d145      	bne.n	8002760 <USART_GetClockSource+0xa0>
  {
    if( IS_USART1_CLKSOURCE_PCLK2() )
 80026d4:	4bc2      	ldr	r3, [pc, #776]	; (80029e0 <USART_GetClockSource+0x320>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <USART_GetClockSource+0x36>
 80026e2:	4bbf      	ldr	r3, [pc, #764]	; (80029e0 <USART_GetClockSource+0x320>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <USART_GetClockSource+0x36>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e244      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_SYSCLK() )
 80026f6:	4bba      	ldr	r3, [pc, #744]	; (80029e0 <USART_GetClockSource+0x320>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <USART_GetClockSource+0x58>
 8002704:	4bb6      	ldr	r3, [pc, #728]	; (80029e0 <USART_GetClockSource+0x320>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <USART_GetClockSource+0x58>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8002712:	2304      	movs	r3, #4
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e233      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_HSI() )
 8002718:	4bb1      	ldr	r3, [pc, #708]	; (80029e0 <USART_GetClockSource+0x320>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <USART_GetClockSource+0x7a>
 8002726:	4bae      	ldr	r3, [pc, #696]	; (80029e0 <USART_GetClockSource+0x320>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <USART_GetClockSource+0x7a>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8002734:	2302      	movs	r3, #2
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e222      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_LSE() )
 800273a:	4ba9      	ldr	r3, [pc, #676]	; (80029e0 <USART_GetClockSource+0x320>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 821b 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
 800274a:	4ba5      	ldr	r3, [pc, #660]	; (80029e0 <USART_GetClockSource+0x320>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8213 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 800275a:	2308      	movs	r3, #8
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e20f      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4aa0      	ldr	r2, [pc, #640]	; (80029e4 <USART_GetClockSource+0x324>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d145      	bne.n	80027f4 <USART_GetClockSource+0x134>
  {
    if( IS_USART2_CLKSOURCE_PCLK1() )
 8002768:	4b9d      	ldr	r3, [pc, #628]	; (80029e0 <USART_GetClockSource+0x320>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <USART_GetClockSource+0xca>
 8002776:	4b9a      	ldr	r3, [pc, #616]	; (80029e0 <USART_GetClockSource+0x320>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <USART_GetClockSource+0xca>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e1fa      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_SYSCLK() )
 800278a:	4b95      	ldr	r3, [pc, #596]	; (80029e0 <USART_GetClockSource+0x320>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <USART_GetClockSource+0xec>
 8002798:	4b91      	ldr	r3, [pc, #580]	; (80029e0 <USART_GetClockSource+0x320>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <USART_GetClockSource+0xec>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80027a6:	2304      	movs	r3, #4
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e1e9      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_HSI() )
 80027ac:	4b8c      	ldr	r3, [pc, #560]	; (80029e0 <USART_GetClockSource+0x320>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <USART_GetClockSource+0x10e>
 80027ba:	4b89      	ldr	r3, [pc, #548]	; (80029e0 <USART_GetClockSource+0x320>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <USART_GetClockSource+0x10e>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 80027c8:	2302      	movs	r3, #2
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e1d8      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_LSE() )
 80027ce:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <USART_GetClockSource+0x320>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 81d1 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
 80027de:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <USART_GetClockSource+0x320>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 81c9 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80027ee:	2308      	movs	r3, #8
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e1c5      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a7c      	ldr	r2, [pc, #496]	; (80029e8 <USART_GetClockSource+0x328>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d145      	bne.n	8002888 <USART_GetClockSource+0x1c8>
  {
    if( IS_USART3_CLKSOURCE_PCLK1() )
 80027fc:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <USART_GetClockSource+0x320>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <USART_GetClockSource+0x15e>
 800280a:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <USART_GetClockSource+0x320>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <USART_GetClockSource+0x15e>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e1b0      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_SYSCLK() )
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <USART_GetClockSource+0x320>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <USART_GetClockSource+0x180>
 800282c:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <USART_GetClockSource+0x320>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <USART_GetClockSource+0x180>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 800283a:	2304      	movs	r3, #4
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e19f      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_HSI() )
 8002840:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <USART_GetClockSource+0x320>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <USART_GetClockSource+0x1a2>
 800284e:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <USART_GetClockSource+0x320>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <USART_GetClockSource+0x1a2>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 800285c:	2302      	movs	r3, #2
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e18e      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_LSE() )
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <USART_GetClockSource+0x320>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8187 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
 8002872:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <USART_GetClockSource+0x320>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 817f 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8002882:	2308      	movs	r3, #8
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e17b      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART4)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a58      	ldr	r2, [pc, #352]	; (80029ec <USART_GetClockSource+0x32c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d145      	bne.n	800291c <USART_GetClockSource+0x25c>
  {
    if( IS_UART4_CLKSOURCE_PCLK1() )
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <USART_GetClockSource+0x320>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <USART_GetClockSource+0x1f2>
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <USART_GetClockSource+0x320>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <USART_GetClockSource+0x1f2>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
 80028b0:	e166      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_SYSCLK() )
 80028b2:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <USART_GetClockSource+0x320>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <USART_GetClockSource+0x214>
 80028c0:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <USART_GetClockSource+0x320>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <USART_GetClockSource+0x214>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80028ce:	2304      	movs	r3, #4
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	e155      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_HSI() )
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <USART_GetClockSource+0x320>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <USART_GetClockSource+0x236>
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <USART_GetClockSource+0x320>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <USART_GetClockSource+0x236>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 80028f0:	2302      	movs	r3, #2
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e144      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_LSE() )
 80028f6:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <USART_GetClockSource+0x320>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 813d 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <USART_GetClockSource+0x320>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8135 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8002916:	2308      	movs	r3, #8
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e131      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART5)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <USART_GetClockSource+0x330>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d145      	bne.n	80029b0 <USART_GetClockSource+0x2f0>
  {
    if( IS_UART5_CLKSOURCE_PCLK1() )
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <USART_GetClockSource+0x320>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <USART_GetClockSource+0x286>
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <USART_GetClockSource+0x320>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <USART_GetClockSource+0x286>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e11c      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_SYSCLK() )
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <USART_GetClockSource+0x320>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <USART_GetClockSource+0x2a8>
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <USART_GetClockSource+0x320>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <USART_GetClockSource+0x2a8>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8002962:	2304      	movs	r3, #4
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e10b      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_HSI() )
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <USART_GetClockSource+0x320>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <USART_GetClockSource+0x2ca>
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <USART_GetClockSource+0x320>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <USART_GetClockSource+0x2ca>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8002984:	2302      	movs	r3, #2
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e0fa      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_LSE() )
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <USART_GetClockSource+0x320>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80f3 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <USART_GetClockSource+0x320>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80eb 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80029aa:	2308      	movs	r3, #8
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e0e7      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART6)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <USART_GetClockSource+0x334>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d154      	bne.n	8002a62 <USART_GetClockSource+0x3a2>
  {
    if( IS_USART6_CLKSOURCE_PCLK2() )
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <USART_GetClockSource+0x320>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <USART_GetClockSource+0x338>
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <USART_GetClockSource+0x320>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d111      	bne.n	80029f8 <USART_GetClockSource+0x338>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e0d2      	b.n	8002b80 <USART_GetClockSource+0x4c0>
 80029da:	bf00      	nop
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40004400 	.word	0x40004400
 80029e8:	40004800 	.word	0x40004800
 80029ec:	40004c00 	.word	0x40004c00
 80029f0:	40005000 	.word	0x40005000
 80029f4:	40011400 	.word	0x40011400
    }
    else if( IS_USART6_CLKSOURCE_SYSCLK() )
 80029f8:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <USART_GetClockSource+0x4d0>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <USART_GetClockSource+0x35a>
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <USART_GetClockSource+0x35a>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8002a14:	2304      	movs	r3, #4
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e0b2      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_HSI() )
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <USART_GetClockSource+0x37c>
 8002a28:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <USART_GetClockSource+0x37c>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8002a36:	2302      	movs	r3, #2
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e0a1      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_LSE() )
 8002a3c:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 809a 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
 8002a4c:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8092 	beq.w	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e08e      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART7)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <USART_GetClockSource+0x4d4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d143      	bne.n	8002af2 <USART_GetClockSource+0x432>
  {
    if( IS_UART7_CLKSOURCE_PCLK1() )
 8002a6a:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <USART_GetClockSource+0x3cc>
 8002a78:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <USART_GetClockSource+0x3cc>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e079      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_SYSCLK() )
 8002a8c:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <USART_GetClockSource+0x3ee>
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <USART_GetClockSource+0x3ee>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e068      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_HSI() )
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <USART_GetClockSource+0x410>
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <USART_GetClockSource+0x410>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8002aca:	2302      	movs	r3, #2
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e057      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_LSE() )
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d050      	beq.n	8002b80 <USART_GetClockSource+0x4c0>
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d049      	beq.n	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8002aec:	2308      	movs	r3, #8
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e046      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a28      	ldr	r2, [pc, #160]	; (8002b98 <USART_GetClockSource+0x4d8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d142      	bne.n	8002b80 <USART_GetClockSource+0x4c0>
  {
    if( IS_UART8_CLKSOURCE_PCLK1() )
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <USART_GetClockSource+0x45c>
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <USART_GetClockSource+0x45c>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e031      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_SYSCLK() )
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <USART_GetClockSource+0x47e>
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <USART_GetClockSource+0x47e>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e020      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_HSI() )
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <USART_GetClockSource+0x4a0>
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <USART_GetClockSource+0x4a0>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e00f      	b.n	8002b80 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_LSE() )
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <USART_GetClockSource+0x4c0>
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <USART_GetClockSource+0x4d0>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return clocksource;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40007800 	.word	0x40007800
 8002b98:	40007c00 	.word	0x40007c00

08002b9c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	76fb      	strb	r3, [r7, #27]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bce:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <USART_Init+0x16c>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61fb      	str	r3, [r7, #28]
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ffeb 	bl	8001c08 <RCC_GetClocksFreq>
  clocksource = USART_GetClockSource(USARTx);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff fd44 	bl	80026c0 <USART_GetClockSource>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	76fb      	strb	r3, [r7, #27]
  
  if( clocksource == USART_CLOCKSOURCE_PCLK1 )
 8002c3c:	7efb      	ldrb	r3, [r7, #27]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <USART_Init+0xac>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	e014      	b.n	8002c72 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_PCLK2 )
 8002c48:	7efb      	ldrb	r3, [r7, #27]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	e00e      	b.n	8002c72 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_SYSCLK )
 8002c54:	7efb      	ldrb	r3, [r7, #27]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d102      	bne.n	8002c60 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.SYSCLK_Frequency;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	e008      	b.n	8002c72 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_HSI )
 8002c60:	7efb      	ldrb	r3, [r7, #27]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d102      	bne.n	8002c6c <USART_Init+0xd0>
  {
    apbclock = HSI_VALUE;
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <USART_Init+0x170>)
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	e002      	b.n	8002c72 <USART_Init+0xd6>
  }
  else
  {
    apbclock = LSE_VALUE;
 8002c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c70:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d011      	beq.n	8002ca2 <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c98:	fb02 f201 	mul.w	r2, r2, r1
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e00e      	b.n	8002cc0 <USART_Init+0x124>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cb8:	fb02 f201 	mul.w	r2, r2, r1
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	085a      	lsrs	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d802      	bhi.n	8002cd2 <USART_Init+0x136>
  {
    divider++;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	3301      	adds	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <USART_Init+0x15a>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002cee:	4013      	ands	r3, r2
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60da      	str	r2, [r3, #12]
}
 8002cfe:	bf00      	nop
 8002d00:	3728      	adds	r7, #40	; 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	efffe9f3 	.word	0xefffe9f3
 8002d0c:	00f42400 	.word	0x00f42400

08002d10 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8002d3a:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4313      	orrs	r3, r2
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop

08002d5c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8002da6:	e005      	b.n	8002db4 <USART_Cmd+0x2c>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 0201 	bic.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
  }
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)USART_TDR_TDR);
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)USART_RDR_RDR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	b29b      	uxth	r3, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	e001      	b.n	8002e28 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop

08002e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 0208 	add.w	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0208 	add.w	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop

08002e94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d103      	bne.n	8002efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e00c      	b.n	8002f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3308      	adds	r3, #8
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e002      	b.n	8002f0a <vListInsert+0x2e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d9f6      	bls.n	8002f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d103      	bne.n	8002f84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3b04      	subs	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3b04      	subs	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <pxPortInitialiseStack+0x64>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3b14      	subs	r3, #20
 8002fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b04      	subs	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f06f 0202 	mvn.w	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3b20      	subs	r3, #32
 8002ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	0800300d 	.word	0x0800300d

0800300c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <prvTaskExitError+0x34>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d004      	beq.n	8003026 <prvTaskExitError+0x1a>
 800301c:	4909      	ldr	r1, [pc, #36]	; (8003044 <prvTaskExitError+0x38>)
 800301e:	f240 1005 	movw	r0, #261	; 0x105
 8003022:	f7fe f8d9 	bl	80011d8 <vAssertCalled>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003026:	f04f 0340 	mov.w	r3, #64	; 0x40
 800302a:	b672      	cpsid	i
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	b662      	cpsie	i
 800303a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800303c:	e7fe      	b.n	800303c <prvTaskExitError+0x30>
 800303e:	bf00      	nop
 8003040:	20010000 	.word	0x20010000
 8003044:	0800a494 	.word	0x0800a494
	...

08003050 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <pxCurrentTCBConst2>)
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	6808      	ldr	r0, [r1, #0]
 8003056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	f380 8809 	msr	PSP, r0
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8811 	msr	BASEPRI, r0
 800306a:	4770      	bx	lr
 800306c:	f3af 8000 	nop.w

08003070 <pxCurrentTCBConst2>:
 8003070:	20014214 	.word	0x20014214
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003078:	4806      	ldr	r0, [pc, #24]	; (8003094 <prvPortStartFirstTask+0x1c>)
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	6800      	ldr	r0, [r0, #0]
 800307e:	f380 8808 	msr	MSP, r0
 8003082:	b662      	cpsie	i
 8003084:	b661      	cpsie	f
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	df00      	svc	0
 8003090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003092:	bf00      	nop
 8003094:	e000ed08 	.word	0xe000ed08

08003098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <xPortStartScheduler+0xb8>)
 80030a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	22ff      	movs	r2, #255	; 0xff
 80030ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <xPortStartScheduler+0xbc>)
 80030c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <xPortStartScheduler+0xc0>)
 80030c8:	2207      	movs	r2, #7
 80030ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030cc:	e009      	b.n	80030e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <xPortStartScheduler+0xc0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <xPortStartScheduler+0xc0>)
 80030d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dbf0      	blt.n	80030ce <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <xPortStartScheduler+0xc0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <xPortStartScheduler+0xc0>)
 80030f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <xPortStartScheduler+0xc0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030fe:	4a16      	ldr	r2, [pc, #88]	; (8003158 <xPortStartScheduler+0xc0>)
 8003100:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800310a:	4a14      	ldr	r2, [pc, #80]	; (800315c <xPortStartScheduler+0xc4>)
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <xPortStartScheduler+0xc4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003114:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003116:	4a11      	ldr	r2, [pc, #68]	; (800315c <xPortStartScheduler+0xc4>)
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <xPortStartScheduler+0xc4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003120:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003122:	f000 f8cb 	bl	80032bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <xPortStartScheduler+0xc8>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800312c:	f000 f8e2 	bl	80032f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003130:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <xPortStartScheduler+0xcc>)
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <xPortStartScheduler+0xcc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800313a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800313c:	f7ff ff9c 	bl	8003078 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003140:	f7ff ff64 	bl	800300c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e400 	.word	0xe000e400
 8003154:	200105f6 	.word	0x200105f6
 8003158:	200105f8 	.word	0x200105f8
 800315c:	e000ed20 	.word	0xe000ed20
 8003160:	20010000 	.word	0x20010000
 8003164:	e000ef34 	.word	0xe000ef34

08003168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003172:	b672      	cpsid	i
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	b662      	cpsie	i
 8003182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <vPortEnterCritical+0x4c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <vPortEnterCritical+0x4c>)
 800318c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <vPortEnterCritical+0x4c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d109      	bne.n	80031aa <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <vPortEnterCritical+0x50>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <vPortEnterCritical+0x42>
 80031a0:	4906      	ldr	r1, [pc, #24]	; (80031bc <vPortEnterCritical+0x54>)
 80031a2:	f240 1097 	movw	r0, #407	; 0x197
 80031a6:	f7fe f817 	bl	80011d8 <vAssertCalled>
	}
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20010000 	.word	0x20010000
 80031b8:	e000ed04 	.word	0xe000ed04
 80031bc:	0800a494 	.word	0x0800a494

080031c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <vPortExitCritical+0x3c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <vPortExitCritical+0x18>
 80031ce:	490c      	ldr	r1, [pc, #48]	; (8003200 <vPortExitCritical+0x40>)
 80031d0:	f44f 70cf 	mov.w	r0, #414	; 0x19e
 80031d4:	f7fe f800 	bl	80011d8 <vAssertCalled>
	uxCriticalNesting--;
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <vPortExitCritical+0x3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <vPortExitCritical+0x3c>)
 80031e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <vPortExitCritical+0x3c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <vPortExitCritical+0x34>
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20010000 	.word	0x20010000
 8003200:	0800a494 	.word	0x0800a494
	...

08003210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003210:	f3ef 8009 	mrs	r0, PSP
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <pxCurrentTCBConst>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f01e 0f10 	tst.w	lr, #16
 8003220:	bf08      	it	eq
 8003222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322a:	6010      	str	r0, [r2, #0]
 800322c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003230:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003234:	b672      	cpsid	i
 8003236:	f380 8811 	msr	BASEPRI, r0
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	b662      	cpsie	i
 8003244:	f001 fbee 	bl	8004a24 <vTaskSwitchContext>
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f380 8811 	msr	BASEPRI, r0
 8003250:	bc08      	pop	{r3}
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	6808      	ldr	r0, [r1, #0]
 8003256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325a:	f01e 0f10 	tst.w	lr, #16
 800325e:	bf08      	it	eq
 8003260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003264:	f380 8809 	msr	PSP, r0
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <pxCurrentTCBConst>:
 8003270:	20014214 	.word	0x20014214
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop

08003278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800327e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003282:	b672      	cpsid	i
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	b662      	cpsie	i
 8003292:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003294:	f001 fb0c 	bl	80048b0 <xTaskIncrementTick>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <SysTick_Handler+0x40>)
 80032a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032c0:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <vPortSetupTimerInterrupt+0x28>)
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <vPortSetupTimerInterrupt+0x2c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4909      	ldr	r1, [pc, #36]	; (80032ec <vPortSetupTimerInterrupt+0x30>)
 80032c8:	fba1 1303 	umull	r1, r3, r1, r3
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	3b01      	subs	r3, #1
 80032d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <vPortSetupTimerInterrupt+0x34>)
 80032d4:	2207      	movs	r2, #7
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e014 	.word	0xe000e014
 80032e8:	2001001c 	.word	0x2001001c
 80032ec:	10624dd3 	.word	0x10624dd3
 80032f0:	e000e010 	.word	0xe000e010

080032f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80032f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003304 <vPortEnableVFP+0x10>
 80032f8:	6801      	ldr	r1, [r0, #0]
 80032fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032fe:	6001      	str	r1, [r0, #0]
 8003300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003302:	bf00      	nop
 8003304:	e000ed88 	.word	0xe000ed88

08003308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800330e:	f3ef 8305 	mrs	r3, IPSR
 8003312:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d90e      	bls.n	8003338 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800331a:	4a10      	ldr	r2, [pc, #64]	; (800335c <vPortValidateInterruptPriority+0x54>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <vPortValidateInterruptPriority+0x58>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	429a      	cmp	r2, r3
 800332c:	d204      	bcs.n	8003338 <vPortValidateInterruptPriority+0x30>
 800332e:	490d      	ldr	r1, [pc, #52]	; (8003364 <vPortValidateInterruptPriority+0x5c>)
 8003330:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8003334:	f7fd ff50 	bl	80011d8 <vAssertCalled>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <vPortValidateInterruptPriority+0x60>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <vPortValidateInterruptPriority+0x64>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d904      	bls.n	8003352 <vPortValidateInterruptPriority+0x4a>
 8003348:	4906      	ldr	r1, [pc, #24]	; (8003364 <vPortValidateInterruptPriority+0x5c>)
 800334a:	f44f 703b 	mov.w	r0, #748	; 0x2ec
 800334e:	f7fd ff43 	bl	80011d8 <vAssertCalled>
	}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	e000e3f0 	.word	0xe000e3f0
 8003360:	200105f6 	.word	0x200105f6
 8003364:	0800a494 	.word	0x0800a494
 8003368:	e000ed0c 	.word	0xe000ed0c
 800336c:	200105f8 	.word	0x200105f8

08003370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800337c:	f001 f954 	bl	8004628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003380:	4b50      	ldr	r3, [pc, #320]	; (80034c4 <pvPortMalloc+0x154>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003388:	f000 f8f8 	bl	800357c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800338c:	4b4e      	ldr	r3, [pc, #312]	; (80034c8 <pvPortMalloc+0x158>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d17f      	bne.n	8003498 <pvPortMalloc+0x128>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800339e:	2208      	movs	r2, #8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	3308      	adds	r3, #8
 80033b8:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <pvPortMalloc+0x5c>
 80033c4:	4941      	ldr	r1, [pc, #260]	; (80034cc <pvPortMalloc+0x15c>)
 80033c6:	20bb      	movs	r0, #187	; 0xbb
 80033c8:	f7fd ff06 	bl	80011d8 <vAssertCalled>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d062      	beq.n	8003498 <pvPortMalloc+0x128>
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <pvPortMalloc+0x160>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d85d      	bhi.n	8003498 <pvPortMalloc+0x128>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033dc:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <pvPortMalloc+0x164>)
 80033de:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80033e0:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <pvPortMalloc+0x164>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033e6:	e004      	b.n	80033f2 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d203      	bcs.n	8003404 <pvPortMalloc+0x94>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f1      	bne.n	80033e8 <pvPortMalloc+0x78>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <pvPortMalloc+0x154>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	429a      	cmp	r2, r3
 800340c:	d044      	beq.n	8003498 <pvPortMalloc+0x128>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2208      	movs	r2, #8
 8003414:	4413      	add	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1ad2      	subs	r2, r2, r3
 8003428:	2308      	movs	r3, #8
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	429a      	cmp	r2, r3
 800342e:	d918      	bls.n	8003462 <pvPortMalloc+0xf2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <pvPortMalloc+0xda>
 8003442:	4922      	ldr	r1, [pc, #136]	; (80034cc <pvPortMalloc+0x15c>)
 8003444:	20e8      	movs	r0, #232	; 0xe8
 8003446:	f7fd fec7 	bl	80011d8 <vAssertCalled>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800345c:	68b8      	ldr	r0, [r7, #8]
 800345e:	f000 f8ef 	bl	8003640 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <pvPortMalloc+0x160>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <pvPortMalloc+0x160>)
 800346e:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <pvPortMalloc+0x160>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <pvPortMalloc+0x168>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d203      	bcs.n	8003484 <pvPortMalloc+0x114>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <pvPortMalloc+0x160>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <pvPortMalloc+0x168>)
 8003482:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <pvPortMalloc+0x158>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	431a      	orrs	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003498:	f001 f8d4 	bl	8004644 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <pvPortMalloc+0x136>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80034a2:	f7fd fe7f 	bl	80011a4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <pvPortMalloc+0x14a>
 80034b0:	4906      	ldr	r1, [pc, #24]	; (80034cc <pvPortMalloc+0x15c>)
 80034b2:	f44f 7094 	mov.w	r0, #296	; 0x128
 80034b6:	f7fd fe8f 	bl	80011d8 <vAssertCalled>
	return pvReturn;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20014204 	.word	0x20014204
 80034c8:	20014210 	.word	0x20014210
 80034cc:	0800a4c8 	.word	0x0800a4c8
 80034d0:	20014208 	.word	0x20014208
 80034d4:	200141fc 	.word	0x200141fc
 80034d8:	2001420c 	.word	0x2001420c

080034dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03c      	beq.n	8003568 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034ee:	2308      	movs	r3, #8
 80034f0:	425b      	negs	r3, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <vPortFree+0x94>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <vPortFree+0x38>
 800350a:	491a      	ldr	r1, [pc, #104]	; (8003574 <vPortFree+0x98>)
 800350c:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8003510:	f7fd fe62 	bl	80011d8 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <vPortFree+0x4a>
 800351c:	4915      	ldr	r1, [pc, #84]	; (8003574 <vPortFree+0x98>)
 800351e:	f240 103d 	movw	r0, #317	; 0x13d
 8003522:	f7fd fe59 	bl	80011d8 <vAssertCalled>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <vPortFree+0x94>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d019      	beq.n	8003568 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d115      	bne.n	8003568 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortFree+0x94>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800354c:	f001 f86c 	bl	8004628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <vPortFree+0x9c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4413      	add	r3, r2
 800355a:	4a07      	ldr	r2, [pc, #28]	; (8003578 <vPortFree+0x9c>)
 800355c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800355e:	68b8      	ldr	r0, [r7, #8]
 8003560:	f000 f86e 	bl	8003640 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003564:	f001 f86e 	bl	8004644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20014210 	.word	0x20014210
 8003574:	0800a4c8 	.word	0x0800a4c8
 8003578:	20014208 	.word	0x20014208

0800357c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003582:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003586:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003588:	4b27      	ldr	r3, [pc, #156]	; (8003628 <prvHeapInit+0xac>)
 800358a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3307      	adds	r3, #7
 800359a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0307 	bic.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <prvHeapInit+0xac>)
 80035ac:	4413      	add	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <prvHeapInit+0xb0>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <prvHeapInit+0xb0>)
 80035bc:	2200      	movs	r2, #0
 80035be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80035c8:	2208      	movs	r2, #8
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0307 	bic.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a15      	ldr	r2, [pc, #84]	; (8003630 <prvHeapInit+0xb4>)
 80035dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <prvHeapInit+0xb4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <prvHeapInit+0xb4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <prvHeapInit+0xb4>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <prvHeapInit+0xb8>)
 800360a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a09      	ldr	r2, [pc, #36]	; (8003638 <prvHeapInit+0xbc>)
 8003612:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <prvHeapInit+0xc0>)
 8003616:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800361a:	601a      	str	r2, [r3, #0]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	200105fc 	.word	0x200105fc
 800362c:	200141fc 	.word	0x200141fc
 8003630:	20014204 	.word	0x20014204
 8003634:	2001420c 	.word	0x2001420c
 8003638:	20014208 	.word	0x20014208
 800363c:	20014210 	.word	0x20014210

08003640 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <prvInsertBlockIntoFreeList+0xac>)
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e002      	b.n	8003654 <prvInsertBlockIntoFreeList+0x14>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d3f7      	bcc.n	800364e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d108      	bne.n	8003682 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	441a      	add	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d118      	bne.n	80036c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <prvInsertBlockIntoFreeList+0xb0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d00d      	beq.n	80036be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e008      	b.n	80036d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <prvInsertBlockIntoFreeList+0xb0>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e003      	b.n	80036d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d002      	beq.n	80036de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	200141fc 	.word	0x200141fc
 80036f0:	20014204 	.word	0x20014204

080036f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <xQueueGenericReset+0x1e>
 8003708:	492a      	ldr	r1, [pc, #168]	; (80037b4 <xQueueGenericReset+0xc0>)
 800370a:	f240 101b 	movw	r0, #283	; 0x11b
 800370e:	f7fd fd63 	bl	80011d8 <vAssertCalled>

	taskENTER_CRITICAL();
 8003712:	f7ff fd29 	bl	8003168 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	441a      	add	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	3b01      	subs	r3, #1
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	22ff      	movs	r2, #255	; 0xff
 8003756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d114      	bne.n	8003792 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01a      	beq.n	80037a6 <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3310      	adds	r3, #16
 8003774:	4618      	mov	r0, r3
 8003776:	f001 fa19 	bl	8004bac <xTaskRemoveFromEventList>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <xQueueGenericReset+0xc4>)
 8003782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	e009      	b.n	80037a6 <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3310      	adds	r3, #16
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fb4e 	bl	8002e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3324      	adds	r3, #36	; 0x24
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fb49 	bl	8002e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037a6:	f7ff fd0b 	bl	80031c0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	0800a4f4 	.word	0x0800a4f4
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <xQueueGenericCreate+0x1e>
 80037d0:	4914      	ldr	r1, [pc, #80]	; (8003824 <xQueueGenericCreate+0x68>)
 80037d2:	f44f 70c4 	mov.w	r0, #392	; 0x188
 80037d6:	f7fd fcff 	bl	80011d8 <vAssertCalled>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e004      	b.n	80037f0 <xQueueGenericCreate+0x34>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3354      	adds	r3, #84	; 0x54
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fdbb 	bl	8003370 <pvPortMalloc>
 80037fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <xQueueGenericCreate+0x5e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3354      	adds	r3, #84	; 0x54
 8003806:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003808:	79fa      	ldrb	r2, [r7, #7]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f807 	bl	8003828 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800381a:	69bb      	ldr	r3, [r7, #24]
	}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	0800a4f4 	.word	0x0800a4f4

08003828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e002      	b.n	800384a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003856:	2101      	movs	r1, #1
 8003858:	69b8      	ldr	r0, [r7, #24]
 800385a:	f7ff ff4b 	bl	80036f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2200      	movs	r2, #0
 800386a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003894:	2300      	movs	r3, #0
 8003896:	2200      	movs	r2, #0
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f81c 	bl	80038d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80038b2:	2301      	movs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	461a      	mov	r2, r3
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	6978      	ldr	r0, [r7, #20]
 80038c2:	f7ff ff7b 	bl	80037bc <xQueueGenericCreate>
 80038c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ffd3 	bl	8003874 <prvInitialiseMutex>

		return pxNewQueue;
 80038ce:	68fb      	ldr	r3, [r7, #12]
	}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <xQueueGenericSend+0x26>
 80038f4:	4974      	ldr	r1, [pc, #464]	; (8003ac8 <xQueueGenericSend+0x1f0>)
 80038f6:	f240 20d9 	movw	r0, #729	; 0x2d9
 80038fa:	f7fd fc6d 	bl	80011d8 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <xQueueGenericSend+0x34>
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <xQueueGenericSend+0x38>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <xQueueGenericSend+0x3a>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <xQueueGenericSend+0x48>
 8003916:	496c      	ldr	r1, [pc, #432]	; (8003ac8 <xQueueGenericSend+0x1f0>)
 8003918:	f240 20da 	movw	r0, #730	; 0x2da
 800391c:	f7fd fc5c 	bl	80011d8 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d103      	bne.n	800392e <xQueueGenericSend+0x56>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <xQueueGenericSend+0x5a>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <xQueueGenericSend+0x5c>
 8003932:	2300      	movs	r3, #0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <xQueueGenericSend+0x6a>
 8003938:	4963      	ldr	r1, [pc, #396]	; (8003ac8 <xQueueGenericSend+0x1f0>)
 800393a:	f240 20db 	movw	r0, #731	; 0x2db
 800393e:	f7fd fc4b 	bl	80011d8 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003942:	f001 fba7 	bl	8005094 <xTaskGetSchedulerState>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <xQueueGenericSend+0x7a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <xQueueGenericSend+0x7e>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <xQueueGenericSend+0x80>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <xQueueGenericSend+0x8e>
 800395c:	495a      	ldr	r1, [pc, #360]	; (8003ac8 <xQueueGenericSend+0x1f0>)
 800395e:	f240 20de 	movw	r0, #734	; 0x2de
 8003962:	f7fd fc39 	bl	80011d8 <vAssertCalled>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003966:	f7ff fbff 	bl	8003168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <xQueueGenericSend+0xa4>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d13d      	bne.n	80039f8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6a38      	ldr	r0, [r7, #32]
 8003982:	f000 fa45 	bl	8003e10 <prvCopyDataToQueue>
 8003986:	61f8      	str	r0, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00f      	beq.n	80039b0 <xQueueGenericSend+0xd8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003990:	6839      	ldr	r1, [r7, #0]
 8003992:	6a38      	ldr	r0, [r7, #32]
 8003994:	f000 fbb6 	bl	8004104 <prvNotifyQueueSetContainer>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <xQueueGenericSend+0x118>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800399e:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <xQueueGenericSend+0x1f4>)
 80039a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	e01f      	b.n	80039f0 <xQueueGenericSend+0x118>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <xQueueGenericSend+0x102>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	3324      	adds	r3, #36	; 0x24
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 f8f5 	bl	8004bac <xTaskRemoveFromEventList>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <xQueueGenericSend+0x118>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 80039c8:	4b40      	ldr	r3, [pc, #256]	; (8003acc <xQueueGenericSend+0x1f4>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	e00a      	b.n	80039f0 <xQueueGenericSend+0x118>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <xQueueGenericSend+0x118>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <xQueueGenericSend+0x1f4>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f0:	f7ff fbe6 	bl	80031c0 <vPortExitCritical>
				return pdPASS;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e063      	b.n	8003ac0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039fe:	f7ff fbdf 	bl	80031c0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e05c      	b.n	8003ac0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f929 	bl	8004c68 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a1a:	f7ff fbd1 	bl	80031c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a1e:	f000 fe03 	bl	8004628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a22:	f7ff fba1 	bl	8003168 <vPortEnterCritical>
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d103      	bne.n	8003a3c <xQueueGenericSend+0x164>
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d103      	bne.n	8003a52 <xQueueGenericSend+0x17a>
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a52:	f7ff fbb5 	bl	80031c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a56:	1d3a      	adds	r2, r7, #4
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f920 	bl	8004ca4 <xTaskCheckForTimeOut>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d124      	bne.n	8003ab4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a6a:	6a38      	ldr	r0, [r7, #32]
 8003a6c:	f000 fad6 	bl	800401c <prvIsQueueFull>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f84c 	bl	8004b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a84:	6a38      	ldr	r0, [r7, #32]
 8003a86:	f000 fa53 	bl	8003f30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a8a:	f000 fddb 	bl	8004644 <xTaskResumeAll>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f af68 	bne.w	8003966 <xQueueGenericSend+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <xQueueGenericSend+0x1f4>)
 8003a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	e75e      	b.n	8003966 <xQueueGenericSend+0x8e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aa8:	6a38      	ldr	r0, [r7, #32]
 8003aaa:	f000 fa41 	bl	8003f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aae:	f000 fdc9 	bl	8004644 <xTaskResumeAll>
 8003ab2:	e758      	b.n	8003966 <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ab4:	6a38      	ldr	r0, [r7, #32]
 8003ab6:	f000 fa3b 	bl	8003f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aba:	f000 fdc3 	bl	8004644 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003abe:	2300      	movs	r3, #0
		}
	}
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	0800a4f4 	.word	0x0800a4f4
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <xQueueGenericSendFromISR+0x22>
 8003ae8:	4945      	ldr	r1, [pc, #276]	; (8003c00 <xQueueGenericSendFromISR+0x130>)
 8003aea:	f240 309f 	movw	r0, #927	; 0x39f
 8003aee:	f7fd fb73 	bl	80011d8 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <xQueueGenericSendFromISR+0x30>
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <xQueueGenericSendFromISR+0x34>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <xQueueGenericSendFromISR+0x36>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <xQueueGenericSendFromISR+0x44>
 8003b0a:	493d      	ldr	r1, [pc, #244]	; (8003c00 <xQueueGenericSendFromISR+0x130>)
 8003b0c:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 8003b10:	f7fd fb62 	bl	80011d8 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d103      	bne.n	8003b22 <xQueueGenericSendFromISR+0x52>
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <xQueueGenericSendFromISR+0x56>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <xQueueGenericSendFromISR+0x58>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <xQueueGenericSendFromISR+0x66>
 8003b2c:	4934      	ldr	r1, [pc, #208]	; (8003c00 <xQueueGenericSendFromISR+0x130>)
 8003b2e:	f240 30a1 	movw	r0, #929	; 0x3a1
 8003b32:	f7fd fb51 	bl	80011d8 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b36:	f7ff fbe7 	bl	8003308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b3e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b42:	b672      	cpsid	i
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	b662      	cpsie	i
 8003b52:	61ba      	str	r2, [r7, #24]
 8003b54:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b56:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b58:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <xQueueGenericSendFromISR+0x9c>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d13c      	bne.n	8003be6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b72:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7a:	f000 f949 	bl	8003e10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d124      	bne.n	8003bd2 <xQueueGenericSendFromISR+0x102>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <xQueueGenericSendFromISR+0xdc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b94:	f000 fab6 	bl	8004104 <prvNotifyQueueSetContainer>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d020      	beq.n	8003be0 <xQueueGenericSendFromISR+0x110>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01d      	beq.n	8003be0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e019      	b.n	8003be0 <xQueueGenericSendFromISR+0x110>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <xQueueGenericSendFromISR+0x110>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fff7 	bl	8004bac <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <xQueueGenericSendFromISR+0x110>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <xQueueGenericSendFromISR+0x110>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e006      	b.n	8003be0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	b25a      	sxtb	r2, r3
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003be0:	2301      	movs	r3, #1
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8003be4:	e001      	b.n	8003bea <xQueueGenericSendFromISR+0x11a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3730      	adds	r7, #48	; 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	0800a4f4 	.word	0x0800a4f4

08003c04 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <xQueueGenericReceive+0x26>
 8003c20:	4979      	ldr	r1, [pc, #484]	; (8003e08 <xQueueGenericReceive+0x204>)
 8003c22:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8003c26:	f7fd fad7 	bl	80011d8 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d103      	bne.n	8003c38 <xQueueGenericReceive+0x34>
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <xQueueGenericReceive+0x38>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <xQueueGenericReceive+0x3a>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <xQueueGenericReceive+0x48>
 8003c42:	4971      	ldr	r1, [pc, #452]	; (8003e08 <xQueueGenericReceive+0x204>)
 8003c44:	f240 40dd 	movw	r0, #1245	; 0x4dd
 8003c48:	f7fd fac6 	bl	80011d8 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c4c:	f001 fa22 	bl	8005094 <xTaskGetSchedulerState>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <xQueueGenericReceive+0x58>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <xQueueGenericReceive+0x5c>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <xQueueGenericReceive+0x5e>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <xQueueGenericReceive+0x6c>
 8003c66:	4968      	ldr	r1, [pc, #416]	; (8003e08 <xQueueGenericReceive+0x204>)
 8003c68:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 8003c6c:	f7fd fab4 	bl	80011d8 <vAssertCalled>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c70:	f7ff fa7a 	bl	8003168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d046      	beq.n	8003d0e <xQueueGenericReceive+0x10a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	6a38      	ldr	r0, [r7, #32]
 8003c8a:	f000 f92b 	bl	8003ee4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d121      	bne.n	8003cd8 <xQueueGenericReceive+0xd4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1e5a      	subs	r2, r3, #1
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <xQueueGenericReceive+0xaa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003ca4:	f001 fbc2 	bl	800542c <pvTaskIncrementMutexHeldCount>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d027      	beq.n	8003d06 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	3310      	adds	r3, #16
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff76 	bl	8004bac <xTaskRemoveFromEventList>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01f      	beq.n	8003d06 <xQueueGenericReceive+0x102>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003cc6:	4b51      	ldr	r3, [pc, #324]	; (8003e0c <xQueueGenericReceive+0x208>)
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	e016      	b.n	8003d06 <xQueueGenericReceive+0x102>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00f      	beq.n	8003d06 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 ff5e 	bl	8004bac <xTaskRemoveFromEventList>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <xQueueGenericReceive+0x102>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cf6:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <xQueueGenericReceive+0x208>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003d06:	f7ff fa5b 	bl	80031c0 <vPortExitCritical>
				return pdPASS;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e077      	b.n	8003dfe <xQueueGenericReceive+0x1fa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d14:	f7ff fa54 	bl	80031c0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e070      	b.n	8003dfe <xQueueGenericReceive+0x1fa>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <xQueueGenericReceive+0x12c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003d22:	f107 0310 	add.w	r3, r7, #16
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 ff9e 	bl	8004c68 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d30:	f7ff fa46 	bl	80031c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d34:	f000 fc78 	bl	8004628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d38:	f7ff fa16 	bl	8003168 <vPortEnterCritical>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d103      	bne.n	8003d52 <xQueueGenericReceive+0x14e>
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d103      	bne.n	8003d68 <xQueueGenericReceive+0x164>
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d68:	f7ff fa2a 	bl	80031c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d6c:	1d3a      	adds	r2, r7, #4
 8003d6e:	f107 0310 	add.w	r3, r7, #16
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ff95 	bl	8004ca4 <xTaskCheckForTimeOut>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d131      	bne.n	8003de4 <xQueueGenericReceive+0x1e0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f000 f935 	bl	8003ff0 <prvIsQueueEmpty>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d025      	beq.n	8003dd8 <xQueueGenericReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d108      	bne.n	8003da6 <xQueueGenericReceive+0x1a2>
					{
						taskENTER_CRITICAL();
 8003d94:	f7ff f9e8 	bl	8003168 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f997 	bl	80050d0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003da2:	f7ff fa0d 	bl	80031c0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	3324      	adds	r3, #36	; 0x24
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 feb4 	bl	8004b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003db4:	6a38      	ldr	r0, [r7, #32]
 8003db6:	f000 f8bb 	bl	8003f30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dba:	f000 fc43 	bl	8004644 <xTaskResumeAll>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f47f af55 	bne.w	8003c70 <xQueueGenericReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <xQueueGenericReceive+0x208>)
 8003dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	e74b      	b.n	8003c70 <xQueueGenericReceive+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003dd8:	6a38      	ldr	r0, [r7, #32]
 8003dda:	f000 f8a9 	bl	8003f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dde:	f000 fc31 	bl	8004644 <xTaskResumeAll>
 8003de2:	e745      	b.n	8003c70 <xQueueGenericReceive+0x6c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003de4:	6a38      	ldr	r0, [r7, #32]
 8003de6:	f000 f8a3 	bl	8003f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dea:	f000 fc2b 	bl	8004644 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dee:	6a38      	ldr	r0, [r7, #32]
 8003df0:	f000 f8fe 	bl	8003ff0 <prvIsQueueEmpty>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f43f af3a 	beq.w	8003c70 <xQueueGenericReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	0800a4f4 	.word	0x0800a4f4
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10d      	bne.n	8003e4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d14d      	bne.n	8003ed2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f9be 	bl	80051bc <xTaskPriorityDisinherit>
 8003e40:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	e043      	b.n	8003ed2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d119      	bne.n	8003e84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6898      	ldr	r0, [r3, #8]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	f003 f99c 	bl	8007198 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	441a      	add	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d32b      	bcc.n	8003ed2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	e026      	b.n	8003ed2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68d8      	ldr	r0, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	f003 f982 	bl	8007198 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d207      	bcs.n	8003ec0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	425b      	negs	r3, r3
 8003eba:	441a      	add	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d105      	bne.n	8003ed2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003eda:	697b      	ldr	r3, [r7, #20]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d303      	bcc.n	8003f18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68d9      	ldr	r1, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	461a      	mov	r2, r3
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f003 f938 	bl	8007198 <memcpy>
	}
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f38:	f7ff f916 	bl	8003168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f44:	e01f      	b.n	8003f86 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8d7 	bl	8004104 <prvNotifyQueueSetContainer>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d010      	beq.n	8003f7e <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8003f5c:	f000 fef8 	bl	8004d50 <vTaskMissedYield>
 8003f60:	e00d      	b.n	8003f7e <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fe1c 	bl	8004bac <xTaskRemoveFromEventList>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8003f7a:	f000 fee9 	bl	8004d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dcdb      	bgt.n	8003f46 <prvUnlockQueue+0x16>
 8003f8e:	e000      	b.n	8003f92 <prvUnlockQueue+0x62>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8003f90:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	22ff      	movs	r2, #255	; 0xff
 8003f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f9a:	f7ff f911 	bl	80031c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f9e:	f7ff f8e3 	bl	8003168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003faa:	e011      	b.n	8003fd0 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fdf7 	bl	8004bac <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8003fc4:	f000 fec4 	bl	8004d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dce9      	bgt.n	8003fac <prvUnlockQueue+0x7c>
 8003fd8:	e000      	b.n	8003fdc <prvUnlockQueue+0xac>

				--cRxLock;
			}
			else
			{
				break;
 8003fda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fe4:	f7ff f8ec 	bl	80031c0 <vPortExitCritical>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ff8:	f7ff f8b6 	bl	8003168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e001      	b.n	800400e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800400e:	f7ff f8d7 	bl	80031c0 <vPortExitCritical>

	return xReturn;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004024:	f7ff f8a0 	bl	8003168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	429a      	cmp	r2, r3
 8004032:	d102      	bne.n	800403a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f7ff f8bf 	bl	80031c0 <vPortExitCritical>

	return xReturn;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e014      	b.n	8004086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800405c:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <vQueueAddToRegistry+0x4c>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004068:	490b      	ldr	r1, [pc, #44]	; (8004098 <vQueueAddToRegistry+0x4c>)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <vQueueAddToRegistry+0x4c>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800407e:	e005      	b.n	800408c <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b07      	cmp	r3, #7
 800408a:	d9e7      	bls.n	800405c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20014454 	.word	0x20014454

0800409c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040ac:	f7ff f85c 	bl	8003168 <vPortEnterCritical>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d103      	bne.n	80040c6 <vQueueWaitForMessageRestricted+0x2a>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d103      	bne.n	80040dc <vQueueWaitForMessageRestricted+0x40>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040dc:	f7ff f870 	bl	80031c0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3324      	adds	r3, #36	; 0x24
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fd33 	bl	8004b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff ff1a 	bl	8003f30 <prvUnlockQueue>
	}
 80040fc:	bf00      	nop
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <prvNotifyQueueSetContainer+0x24>
 800411e:	4920      	ldr	r1, [pc, #128]	; (80041a0 <prvNotifyQueueSetContainer+0x9c>)
 8004120:	f640 10ce 	movw	r0, #2510	; 0x9ce
 8004124:	f7fd f858 	bl	80011d8 <vAssertCalled>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	429a      	cmp	r2, r3
 8004132:	d304      	bcc.n	800413e <prvNotifyQueueSetContainer+0x3a>
 8004134:	491a      	ldr	r1, [pc, #104]	; (80041a0 <prvNotifyQueueSetContainer+0x9c>)
 8004136:	f640 10cf 	movw	r0, #2511	; 0x9cf
 800413a:	f7fd f84d 	bl	80011d8 <vAssertCalled>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	429a      	cmp	r2, r3
 8004148:	d225      	bcs.n	8004196 <prvNotifyQueueSetContainer+0x92>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004150:	73fb      	strb	r3, [r7, #15]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	4619      	mov	r1, r3
 8004158:	6938      	ldr	r0, [r7, #16]
 800415a:	f7ff fe59 	bl	8003e10 <prvCopyDataToQueue>
 800415e:	6178      	str	r0, [r7, #20]

			if( cTxLock == queueUNLOCKED )
 8004160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d10e      	bne.n	8004188 <prvNotifyQueueSetContainer+0x84>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d011      	beq.n	8004196 <prvNotifyQueueSetContainer+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fd18 	bl	8004bac <xTaskRemoveFromEventList>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <prvNotifyQueueSetContainer+0x92>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e006      	b.n	8004196 <prvNotifyQueueSetContainer+0x92>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	3301      	adds	r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	b25a      	sxtb	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004196:	697b      	ldr	r3, [r7, #20]
	}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	0800a4f4 	.word	0x0800a4f4

080041a4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af04      	add	r7, sp, #16
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f8d9 	bl	8003370 <pvPortMalloc>
 80041be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041c6:	205c      	movs	r0, #92	; 0x5c
 80041c8:	f7ff f8d2 	bl	8003370 <pvPortMalloc>
 80041cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
 80041da:	e005      	b.n	80041e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041dc:	6978      	ldr	r0, [r7, #20]
 80041de:	f7ff f97d 	bl	80034dc <vPortFree>
 80041e2:	e001      	b.n	80041e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d013      	beq.n	8004216 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9303      	str	r3, [sp, #12]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	9302      	str	r3, [sp, #8]
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f80f 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800420a:	69f8      	ldr	r0, [r7, #28]
 800420c:	f000 f890 	bl	8004330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004210:	2301      	movs	r3, #1
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	e002      	b.n	800421c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800421c:	69bb      	ldr	r3, [r7, #24]
	}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop

08004228 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	21a5      	movs	r1, #165	; 0xa5
 8004242:	f002 ffb4 	bl	80071ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004250:	440b      	add	r3, r1
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 0307 	bic.w	r3, r3, #7
 800425e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <prvInitialiseNewTask+0x4c>
 800426a:	4930      	ldr	r1, [pc, #192]	; (800432c <prvInitialiseNewTask+0x104>)
 800426c:	f240 302b 	movw	r0, #811	; 0x32b
 8004270:	f7fc ffb2 	bl	80011d8 <vAssertCalled>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e012      	b.n	80042a0 <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	7819      	ldrb	r1, [r3, #0]
 8004282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	3334      	adds	r3, #52	; 0x34
 800428a:	460a      	mov	r2, r1
 800428c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4413      	add	r3, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <prvInitialiseNewTask+0x80>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	3301      	adds	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d9e9      	bls.n	800427a <prvInitialiseNewTask+0x52>
 80042a6:	e000      	b.n	80042aa <prvInitialiseNewTask+0x82>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 80042a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d901      	bls.n	80042bc <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042b8:	2305      	movs	r3, #5
 80042ba:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	2200      	movs	r2, #0
 80042cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fdd0 	bl	8002e78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	3318      	adds	r3, #24
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe fdcb 	bl	8002e78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f1c3 0206 	rsb	r2, r3, #6
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2200      	movs	r2, #0
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f7fe fe4a 	bl	8002fa4 <pxPortInitialiseStack>
 8004310:	4602      	mov	r2, r0
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <prvInitialiseNewTask+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	0800a50c 	.word	0x0800a50c

08004330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004338:	f7fe ff16 	bl	8003168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <prvAddNewTaskToReadyList+0xc0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <prvAddNewTaskToReadyList+0xc0>)
 8004344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800434e:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <prvAddNewTaskToReadyList+0xc0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d110      	bne.n	800437e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800435c:	f000 fd1c 	bl	8004d98 <prvInitialiseTaskLists>
 8004360:	e00d      	b.n	800437e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	429a      	cmp	r2, r3
 8004376:	d802      	bhi.n	800437e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004378:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800437e:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <prvAddNewTaskToReadyList+0xcc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <prvAddNewTaskToReadyList+0xcc>)
 8004386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <prvAddNewTaskToReadyList+0xcc>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <prvAddNewTaskToReadyList+0xd0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4313      	orrs	r3, r2
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <prvAddNewTaskToReadyList+0xd0>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <prvAddNewTaskToReadyList+0xd4>)
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fe fd6b 	bl	8002e94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043be:	f7fe feff 	bl	80031c0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d207      	bcs.n	80043e8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <prvAddNewTaskToReadyList+0xd8>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20014300 	.word	0x20014300
 80043f4:	20014214 	.word	0x20014214
 80043f8:	2001430c 	.word	0x2001430c
 80043fc:	2001431c 	.word	0x2001431c
 8004400:	20014308 	.word	0x20014308
 8004404:	20014218 	.word	0x20014218
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <vTaskDelayUntil+0x1e>
 8004420:	492d      	ldr	r1, [pc, #180]	; (80044d8 <vTaskDelayUntil+0xcc>)
 8004422:	f240 4079 	movw	r0, #1145	; 0x479
 8004426:	f7fc fed7 	bl	80011d8 <vAssertCalled>
		configASSERT( ( xTimeIncrement > 0U ) );
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <vTaskDelayUntil+0x2e>
 8004430:	4929      	ldr	r1, [pc, #164]	; (80044d8 <vTaskDelayUntil+0xcc>)
 8004432:	f240 407a 	movw	r0, #1146	; 0x47a
 8004436:	f7fc fecf 	bl	80011d8 <vAssertCalled>
		configASSERT( uxSchedulerSuspended == 0 );
 800443a:	4b28      	ldr	r3, [pc, #160]	; (80044dc <vTaskDelayUntil+0xd0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <vTaskDelayUntil+0x40>
 8004442:	4925      	ldr	r1, [pc, #148]	; (80044d8 <vTaskDelayUntil+0xcc>)
 8004444:	f240 407b 	movw	r0, #1147	; 0x47b
 8004448:	f7fc fec6 	bl	80011d8 <vAssertCalled>

		vTaskSuspendAll();
 800444c:	f000 f8ec 	bl	8004628 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <vTaskDelayUntil+0xd4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4413      	add	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	d90b      	bls.n	8004482 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d911      	bls.n	8004498 <vTaskDelayUntil+0x8c>
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d90d      	bls.n	8004498 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e00a      	b.n	8004498 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d803      	bhi.n	8004494 <vTaskDelayUntil+0x88>
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d901      	bls.n	8004498 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 ffd1 	bl	8005454 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80044b2:	f000 f8c7 	bl	8004644 <xTaskResumeAll>
 80044b6:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d107      	bne.n	80044ce <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <vTaskDelayUntil+0xd8>)
 80044c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044ce:	bf00      	nop
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	0800a50c 	.word	0x0800a50c
 80044dc:	20014328 	.word	0x20014328
 80044e0:	20014304 	.word	0x20014304
 80044e4:	e000ed04 	.word	0xe000ed04

080044e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <eTaskGetState+0x1c>
 80044fa:	4920      	ldr	r1, [pc, #128]	; (800457c <eTaskGetState+0x94>)
 80044fc:	f240 40fb 	movw	r0, #1275	; 0x4fb
 8004500:	f7fc fe6a 	bl	80011d8 <vAssertCalled>

		if( pxTCB == pxCurrentTCB )
 8004504:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <eTaskGetState+0x98>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d102      	bne.n	8004514 <eTaskGetState+0x2c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
 8004512:	e02d      	b.n	8004570 <eTaskGetState+0x88>
		}
		else
		{
			taskENTER_CRITICAL();
 8004514:	f7fe fe28 	bl	8003168 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800451e:	f7fe fe4f 	bl	80031c0 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <eTaskGetState+0x9c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	429a      	cmp	r2, r3
 800452a:	d004      	beq.n	8004536 <eTaskGetState+0x4e>
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <eTaskGetState+0xa0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	429a      	cmp	r2, r3
 8004534:	d102      	bne.n	800453c <eTaskGetState+0x54>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004536:	2302      	movs	r3, #2
 8004538:	75fb      	strb	r3, [r7, #23]
 800453a:	e019      	b.n	8004570 <eTaskGetState+0x88>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a13      	ldr	r2, [pc, #76]	; (800458c <eTaskGetState+0xa4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d109      	bne.n	8004558 <eTaskGetState+0x70>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <eTaskGetState+0x6a>
					{
						eReturn = eSuspended;
 800454c:	2303      	movs	r3, #3
 800454e:	75fb      	strb	r3, [r7, #23]
 8004550:	e00e      	b.n	8004570 <eTaskGetState+0x88>
					}
					else
					{
						eReturn = eBlocked;
 8004552:	2302      	movs	r3, #2
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e00b      	b.n	8004570 <eTaskGetState+0x88>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <eTaskGetState+0xa8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d002      	beq.n	8004566 <eTaskGetState+0x7e>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <eTaskGetState+0x84>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004566:	2304      	movs	r3, #4
 8004568:	75fb      	strb	r3, [r7, #23]
 800456a:	e001      	b.n	8004570 <eTaskGetState+0x88>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800456c:	2301      	movs	r3, #1
 800456e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8004570:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	0800a50c 	.word	0x0800a50c
 8004580:	20014214 	.word	0x20014214
 8004584:	200142b8 	.word	0x200142b8
 8004588:	200142bc 	.word	0x200142bc
 800458c:	200142ec 	.word	0x200142ec
 8004590:	200142d4 	.word	0x200142d4

08004594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800459a:	4b1c      	ldr	r3, [pc, #112]	; (800460c <vTaskStartScheduler+0x78>)
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2300      	movs	r3, #0
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2300      	movs	r3, #0
 80045a4:	2282      	movs	r2, #130	; 0x82
 80045a6:	491a      	ldr	r1, [pc, #104]	; (8004610 <vTaskStartScheduler+0x7c>)
 80045a8:	481a      	ldr	r0, [pc, #104]	; (8004614 <vTaskStartScheduler+0x80>)
 80045aa:	f7ff fdfb 	bl	80041a4 <xTaskCreate>
 80045ae:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80045b6:	f000 ffb3 	bl	8005520 <xTimerCreateTimerTask>
 80045ba:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d117      	bne.n	80045f2 <vTaskStartScheduler+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045c2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80045c6:	b672      	cpsid	i
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	b662      	cpsie	i
 80045d6:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <vTaskStartScheduler+0x84>)
 80045da:	f04f 32ff 	mov.w	r2, #4294967295
 80045de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <vTaskStartScheduler+0x88>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <vTaskStartScheduler+0x8c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045ec:	f7fe fd54 	bl	8003098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045f0:	e008      	b.n	8004604 <vTaskStartScheduler+0x70>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d104      	bne.n	8004604 <vTaskStartScheduler+0x70>
 80045fa:	490a      	ldr	r1, [pc, #40]	; (8004624 <vTaskStartScheduler+0x90>)
 80045fc:	f240 7084 	movw	r0, #1924	; 0x784
 8004600:	f7fc fdea 	bl	80011d8 <vAssertCalled>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20014324 	.word	0x20014324
 8004610:	0800a524 	.word	0x0800a524
 8004614:	08004d69 	.word	0x08004d69
 8004618:	20014320 	.word	0x20014320
 800461c:	2001430c 	.word	0x2001430c
 8004620:	20014304 	.word	0x20014304
 8004624:	0800a50c 	.word	0x0800a50c

08004628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <vTaskSuspendAll+0x18>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	4a03      	ldr	r2, [pc, #12]	; (8004640 <vTaskSuspendAll+0x18>)
 8004634:	6013      	str	r3, [r2, #0]
}
 8004636:	bf00      	nop
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20014328 	.word	0x20014328

08004644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004652:	4b3e      	ldr	r3, [pc, #248]	; (800474c <xTaskResumeAll+0x108>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <xTaskResumeAll+0x20>
 800465a:	493d      	ldr	r1, [pc, #244]	; (8004750 <xTaskResumeAll+0x10c>)
 800465c:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8004660:	f7fc fdba 	bl	80011d8 <vAssertCalled>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004664:	f7fe fd80 	bl	8003168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004668:	4b38      	ldr	r3, [pc, #224]	; (800474c <xTaskResumeAll+0x108>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	4a37      	ldr	r2, [pc, #220]	; (800474c <xTaskResumeAll+0x108>)
 8004670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <xTaskResumeAll+0x108>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d161      	bne.n	800473e <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800467a:	4b36      	ldr	r3, [pc, #216]	; (8004754 <xTaskResumeAll+0x110>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d05d      	beq.n	800473e <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004682:	e02e      	b.n	80046e2 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <xTaskResumeAll+0x114>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3318      	adds	r3, #24
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fc5d 	bl	8002f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3304      	adds	r3, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fc58 	bl	8002f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	2201      	movs	r2, #1
 80046a6:	409a      	lsls	r2, r3
 80046a8:	4b2c      	ldr	r3, [pc, #176]	; (800475c <xTaskResumeAll+0x118>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	4a2b      	ldr	r2, [pc, #172]	; (800475c <xTaskResumeAll+0x118>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <xTaskResumeAll+0x11c>)
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7fe fbe3 	bl	8002e94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <xTaskResumeAll+0x120>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <xTaskResumeAll+0x124>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <xTaskResumeAll+0x114>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1cc      	bne.n	8004684 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046f0:	f000 fcaa 	bl	8005048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <xTaskResumeAll+0x128>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004700:	f000 f8d6 	bl	80048b0 <xTaskIncrementTick>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <xTaskResumeAll+0x124>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f1      	bne.n	8004700 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <xTaskResumeAll+0x128>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <xTaskResumeAll+0x124>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <xTaskResumeAll+0x12c>)
 8004730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800473e:	f7fe fd3f 	bl	80031c0 <vPortExitCritical>

	return xAlreadyYielded;
 8004742:	68bb      	ldr	r3, [r7, #8]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20014328 	.word	0x20014328
 8004750:	0800a50c 	.word	0x0800a50c
 8004754:	20014300 	.word	0x20014300
 8004758:	200142c0 	.word	0x200142c0
 800475c:	20014308 	.word	0x20014308
 8004760:	20014218 	.word	0x20014218
 8004764:	20014214 	.word	0x20014214
 8004768:	20014314 	.word	0x20014314
 800476c:	20014310 	.word	0x20014310
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <xTaskGetTickCount+0x1c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004780:	687b      	ldr	r3, [r7, #4]
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20014304 	.word	0x20014304

08004794 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	2306      	movs	r3, #6
 80047a6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80047a8:	f7ff ff3e 	bl	8004628 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <uxTaskGetSystemState+0x104>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d368      	bcc.n	8004888 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1898      	adds	r0, r3, r2
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a31      	ldr	r2, [pc, #196]	; (800489c <uxTaskGetSystemState+0x108>)
 80047d8:	4413      	add	r3, r2
 80047da:	2201      	movs	r2, #1
 80047dc:	4619      	mov	r1, r3
 80047de:	f000 fbb5 	bl	8004f4c <prvListTasksWithinSingleList>
 80047e2:	4602      	mov	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e2      	bne.n	80047b6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1898      	adds	r0, r3, r2
 8004800:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <uxTaskGetSystemState+0x10c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2202      	movs	r2, #2
 8004806:	4619      	mov	r1, r3
 8004808:	f000 fba0 	bl	8004f4c <prvListTasksWithinSingleList>
 800480c:	4602      	mov	r2, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1898      	adds	r0, r3, r2
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <uxTaskGetSystemState+0x110>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2202      	movs	r2, #2
 800482a:	4619      	mov	r1, r3
 800482c:	f000 fb8e 	bl	8004f4c <prvListTasksWithinSingleList>
 8004830:	4602      	mov	r2, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4613      	mov	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	2204      	movs	r2, #4
 800484a:	4917      	ldr	r1, [pc, #92]	; (80048a8 <uxTaskGetSystemState+0x114>)
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fb7d 	bl	8004f4c <prvListTasksWithinSingleList>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	2203      	movs	r2, #3
 800486c:	490f      	ldr	r1, [pc, #60]	; (80048ac <uxTaskGetSystemState+0x118>)
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fb6c 	bl	8004f4c <prvListTasksWithinSingleList>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8004888:	f7ff fedc 	bl	8004644 <xTaskResumeAll>

		return uxTask;
 800488c:	697b      	ldr	r3, [r7, #20]
	}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20014300 	.word	0x20014300
 800489c:	20014218 	.word	0x20014218
 80048a0:	200142b8 	.word	0x200142b8
 80048a4:	200142bc 	.word	0x200142bc
 80048a8:	200142d4 	.word	0x200142d4
 80048ac:	200142ec 	.word	0x200142ec

080048b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ba:	4b4e      	ldr	r3, [pc, #312]	; (80049f4 <xTaskIncrementTick+0x144>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8087 	bne.w	80049d2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80048c4:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <xTaskIncrementTick+0x148>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048cc:	4a4a      	ldr	r2, [pc, #296]	; (80049f8 <xTaskIncrementTick+0x148>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11a      	bne.n	800490e <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 80048d8:	4b48      	ldr	r3, [pc, #288]	; (80049fc <xTaskIncrementTick+0x14c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <xTaskIncrementTick+0x3c>
 80048e2:	4947      	ldr	r1, [pc, #284]	; (8004a00 <xTaskIncrementTick+0x150>)
 80048e4:	f640 10d9 	movw	r0, #2521	; 0x9d9
 80048e8:	f7fc fc76 	bl	80011d8 <vAssertCalled>
 80048ec:	4b43      	ldr	r3, [pc, #268]	; (80049fc <xTaskIncrementTick+0x14c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	4b44      	ldr	r3, [pc, #272]	; (8004a04 <xTaskIncrementTick+0x154>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a41      	ldr	r2, [pc, #260]	; (80049fc <xTaskIncrementTick+0x14c>)
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4a42      	ldr	r2, [pc, #264]	; (8004a04 <xTaskIncrementTick+0x154>)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <xTaskIncrementTick+0x158>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	4a40      	ldr	r2, [pc, #256]	; (8004a08 <xTaskIncrementTick+0x158>)
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	f000 fb9d 	bl	8005048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <xTaskIncrementTick+0x15c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d34d      	bcc.n	80049b4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004918:	4b38      	ldr	r3, [pc, #224]	; (80049fc <xTaskIncrementTick+0x14c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <xTaskIncrementTick+0x76>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <xTaskIncrementTick+0x78>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492c:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <xTaskIncrementTick+0x15c>)
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	601a      	str	r2, [r3, #0]
					break;
 8004934:	e03e      	b.n	80049b4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004936:	4b31      	ldr	r3, [pc, #196]	; (80049fc <xTaskIncrementTick+0x14c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d203      	bcs.n	8004956 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800494e:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <xTaskIncrementTick+0x15c>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6013      	str	r3, [r2, #0]
						break;
 8004954:	e02e      	b.n	80049b4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe faf8 	bl	8002f50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3318      	adds	r3, #24
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe faef 	bl	8002f50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	2201      	movs	r2, #1
 8004978:	409a      	lsls	r2, r3
 800497a:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <xTaskIncrementTick+0x160>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <xTaskIncrementTick+0x160>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <xTaskIncrementTick+0x164>)
 8004992:	441a      	add	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7fe fa7a 	bl	8002e94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <xTaskIncrementTick+0x168>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3b4      	bcc.n	8004918 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80049b2:	e7b1      	b.n	8004918 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <xTaskIncrementTick+0x168>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	4916      	ldr	r1, [pc, #88]	; (8004a14 <xTaskIncrementTick+0x164>)
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d907      	bls.n	80049dc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e004      	b.n	80049dc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <xTaskIncrementTick+0x16c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <xTaskIncrementTick+0x16c>)
 80049da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <xTaskIncrementTick+0x170>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20014328 	.word	0x20014328
 80049f8:	20014304 	.word	0x20014304
 80049fc:	200142b8 	.word	0x200142b8
 8004a00:	0800a50c 	.word	0x0800a50c
 8004a04:	200142bc 	.word	0x200142bc
 8004a08:	20014318 	.word	0x20014318
 8004a0c:	20014320 	.word	0x20014320
 8004a10:	20014308 	.word	0x20014308
 8004a14:	20014218 	.word	0x20014218
 8004a18:	20014214 	.word	0x20014214
 8004a1c:	20014310 	.word	0x20014310
 8004a20:	20014314 	.word	0x20014314

08004a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <vTaskSwitchContext+0xe0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a32:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <vTaskSwitchContext+0xe4>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a38:	e060      	b.n	8004afc <vTaskSwitchContext+0xd8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8004a3a:	4b33      	ldr	r3, [pc, #204]	; (8004b08 <vTaskSwitchContext+0xe4>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <vTaskSwitchContext+0xe8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d111      	bne.n	8004a7c <vTaskSwitchContext+0x58>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d10b      	bne.n	8004a7c <vTaskSwitchContext+0x58>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3308      	adds	r3, #8
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d105      	bne.n	8004a7c <vTaskSwitchContext+0x58>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	330c      	adds	r3, #12
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d008      	beq.n	8004a8e <vTaskSwitchContext+0x6a>
 8004a7c:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <vTaskSwitchContext+0xe8>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <vTaskSwitchContext+0xe8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3334      	adds	r3, #52	; 0x34
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fc fb95 	bl	80011b8 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <vTaskSwitchContext+0xec>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f1c3 031f 	rsb	r3, r3, #31
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	491b      	ldr	r1, [pc, #108]	; (8004b14 <vTaskSwitchContext+0xf0>)
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <vTaskSwitchContext+0x9e>
 8004ab8:	4917      	ldr	r1, [pc, #92]	; (8004b18 <vTaskSwitchContext+0xf4>)
 8004aba:	f640 20f6 	movw	r0, #2806	; 0xaf6
 8004abe:	f7fc fb8b 	bl	80011d8 <vAssertCalled>
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <vTaskSwitchContext+0xf0>)
 8004ace:	4413      	add	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d104      	bne.n	8004af2 <vTaskSwitchContext+0xce>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <vTaskSwitchContext+0xe8>)
 8004afa:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004afc:	bf00      	nop
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20014328 	.word	0x20014328
 8004b08:	20014314 	.word	0x20014314
 8004b0c:	20014214 	.word	0x20014214
 8004b10:	20014308 	.word	0x20014308
 8004b14:	20014218 	.word	0x20014218
 8004b18:	0800a50c 	.word	0x0800a50c

08004b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <vTaskPlaceOnEventList+0x1a>
 8004b2c:	4909      	ldr	r1, [pc, #36]	; (8004b54 <vTaskPlaceOnEventList+0x38>)
 8004b2e:	f640 3006 	movw	r0, #2822	; 0xb06
 8004b32:	f7fc fb51 	bl	80011d8 <vAssertCalled>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <vTaskPlaceOnEventList+0x3c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3318      	adds	r3, #24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fe f9cc 	bl	8002edc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b44:	2101      	movs	r1, #1
 8004b46:	6838      	ldr	r0, [r7, #0]
 8004b48:	f000 fc84 	bl	8005454 <prvAddCurrentTaskToDelayedList>
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	0800a50c 	.word	0x0800a50c
 8004b58:	20014214 	.word	0x20014214

08004b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <vTaskPlaceOnEventListRestricted+0x1c>
 8004b6e:	490d      	ldr	r1, [pc, #52]	; (8004ba4 <vTaskPlaceOnEventListRestricted+0x48>)
 8004b70:	f640 3031 	movw	r0, #2865	; 0xb31
 8004b74:	f7fc fb30 	bl	80011d8 <vAssertCalled>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <vTaskPlaceOnEventListRestricted+0x4c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4619      	mov	r1, r3
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7fe f987 	bl	8002e94 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	68b8      	ldr	r0, [r7, #8]
 8004b96:	f000 fc5d 	bl	8005454 <prvAddCurrentTaskToDelayedList>
	}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	0800a50c 	.word	0x0800a50c
 8004ba8:	20014214 	.word	0x20014214

08004bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d104      	bne.n	8004bcc <xTaskRemoveFromEventList+0x20>
 8004bc2:	4922      	ldr	r1, [pc, #136]	; (8004c4c <xTaskRemoveFromEventList+0xa0>)
 8004bc4:	f640 3061 	movw	r0, #2913	; 0xb61
 8004bc8:	f7fc fb06 	bl	80011d8 <vAssertCalled>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe f9bd 	bl	8002f50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <xTaskRemoveFromEventList+0xa4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d11c      	bne.n	8004c18 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe f9b4 	bl	8002f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	2201      	movs	r2, #1
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <xTaskRemoveFromEventList+0xa8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <xTaskRemoveFromEventList+0xa8>)
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <xTaskRemoveFromEventList+0xac>)
 8004c08:	441a      	add	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fe f93f 	bl	8002e94 <vListInsertEnd>
 8004c16:	e005      	b.n	8004c24 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	480f      	ldr	r0, [pc, #60]	; (8004c5c <xTaskRemoveFromEventList+0xb0>)
 8004c20:	f7fe f938 	bl	8002e94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d905      	bls.n	8004c3e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <xTaskRemoveFromEventList+0xb8>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e001      	b.n	8004c42 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0800a50c 	.word	0x0800a50c
 8004c50:	20014328 	.word	0x20014328
 8004c54:	20014308 	.word	0x20014308
 8004c58:	20014218 	.word	0x20014218
 8004c5c:	200142c0 	.word	0x200142c0
 8004c60:	20014214 	.word	0x20014214
 8004c64:	20014314 	.word	0x20014314

08004c68 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <vTaskSetTimeOutState+0x18>
 8004c76:	4908      	ldr	r1, [pc, #32]	; (8004c98 <vTaskSetTimeOutState+0x30>)
 8004c78:	f640 30c1 	movw	r0, #3009	; 0xbc1
 8004c7c:	f7fc faac 	bl	80011d8 <vAssertCalled>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <vTaskSetTimeOutState+0x34>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <vTaskSetTimeOutState+0x38>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	0800a50c 	.word	0x0800a50c
 8004c9c:	20014318 	.word	0x20014318
 8004ca0:	20014304 	.word	0x20014304

08004ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <xTaskCheckForTimeOut+0x1a>
 8004cb4:	4923      	ldr	r1, [pc, #140]	; (8004d44 <xTaskCheckForTimeOut+0xa0>)
 8004cb6:	f640 30cb 	movw	r0, #3019	; 0xbcb
 8004cba:	f7fc fa8d 	bl	80011d8 <vAssertCalled>
	configASSERT( pxTicksToWait );
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <xTaskCheckForTimeOut+0x2a>
 8004cc4:	491f      	ldr	r1, [pc, #124]	; (8004d44 <xTaskCheckForTimeOut+0xa0>)
 8004cc6:	f640 30cc 	movw	r0, #3020	; 0xbcc
 8004cca:	f7fc fa85 	bl	80011d8 <vAssertCalled>

	taskENTER_CRITICAL();
 8004cce:	f7fe fa4b 	bl	8003168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <xTaskCheckForTimeOut+0xa4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d102      	bne.n	8004ce8 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e026      	b.n	8004d36 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <xTaskCheckForTimeOut+0xa8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d007      	beq.n	8004d04 <xTaskCheckForTimeOut+0x60>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d802      	bhi.n	8004d04 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e018      	b.n	8004d36 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d20e      	bcs.n	8004d32 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1acb      	subs	r3, r1, r3
 8004d20:	441a      	add	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff9e 	bl	8004c68 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e001      	b.n	8004d36 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d36:	f7fe fa43 	bl	80031c0 <vPortExitCritical>

	return xReturn;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	0800a50c 	.word	0x0800a50c
 8004d48:	20014304 	.word	0x20014304
 8004d4c:	20014318 	.word	0x20014318

08004d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <vTaskMissedYield+0x14>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	20014314 	.word	0x20014314

08004d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d70:	f000 f852 	bl	8004e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <prvIdleTask+0x28>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d9f9      	bls.n	8004d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <prvIdleTask+0x2c>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004d8c:	e7f0      	b.n	8004d70 <prvIdleTask+0x8>
 8004d8e:	bf00      	nop
 8004d90:	20014218 	.word	0x20014218
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	e00c      	b.n	8004dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <prvInitialiseTaskLists+0x60>)
 8004db0:	4413      	add	r3, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe f840 	bl	8002e38 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d9ef      	bls.n	8004da4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dc4:	480d      	ldr	r0, [pc, #52]	; (8004dfc <prvInitialiseTaskLists+0x64>)
 8004dc6:	f7fe f837 	bl	8002e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dca:	480d      	ldr	r0, [pc, #52]	; (8004e00 <prvInitialiseTaskLists+0x68>)
 8004dcc:	f7fe f834 	bl	8002e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dd0:	480c      	ldr	r0, [pc, #48]	; (8004e04 <prvInitialiseTaskLists+0x6c>)
 8004dd2:	f7fe f831 	bl	8002e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dd6:	480c      	ldr	r0, [pc, #48]	; (8004e08 <prvInitialiseTaskLists+0x70>)
 8004dd8:	f7fe f82e 	bl	8002e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ddc:	480b      	ldr	r0, [pc, #44]	; (8004e0c <prvInitialiseTaskLists+0x74>)
 8004dde:	f7fe f82b 	bl	8002e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <prvInitialiseTaskLists+0x78>)
 8004de4:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <prvInitialiseTaskLists+0x64>)
 8004de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <prvInitialiseTaskLists+0x7c>)
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <prvInitialiseTaskLists+0x68>)
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20014218 	.word	0x20014218
 8004dfc:	20014290 	.word	0x20014290
 8004e00:	200142a4 	.word	0x200142a4
 8004e04:	200142c0 	.word	0x200142c0
 8004e08:	200142d4 	.word	0x200142d4
 8004e0c:	200142ec 	.word	0x200142ec
 8004e10:	200142b8 	.word	0x200142b8
 8004e14:	200142bc 	.word	0x200142bc

08004e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e1e:	e028      	b.n	8004e72 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004e20:	f7ff fc02 	bl	8004628 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <prvCheckTasksWaitingTermination+0x6c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004e34:	f7ff fc06 	bl	8004644 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d119      	bne.n	8004e72 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004e3e:	f7fe f993 	bl	8003168 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <prvCheckTasksWaitingTermination+0x6c>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe f87e 	bl	8002f50 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <prvCheckTasksWaitingTermination+0x70>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <prvCheckTasksWaitingTermination+0x70>)
 8004e5c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <prvCheckTasksWaitingTermination+0x74>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <prvCheckTasksWaitingTermination+0x74>)
 8004e66:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004e68:	f7fe f9aa 	bl	80031c0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004e6c:	6838      	ldr	r0, [r7, #0]
 8004e6e:	f000 f8db 	bl	8005028 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvCheckTasksWaitingTermination+0x74>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1d2      	bne.n	8004e20 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200142d4 	.word	0x200142d4
 8004e88:	20014300 	.word	0x20014300
 8004e8c:	200142e8 	.word	0x200142e8

08004e90 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <vTaskGetInfo+0x1a>
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <vTaskGetInfo+0xb8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	e000      	b.n	8004eac <vTaskGetInfo+0x1c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	609a      	str	r2, [r3, #8]
		#if ( INCLUDE_vTaskSuspend == 1 )
		{
			/* If the task is in the suspended list then there is a chance it is
			actually just blocked indefinitely - so really it should be reported as
			being in the Blocked state. */
			if( pxTaskStatus->eCurrentState == eSuspended )
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	7b1b      	ldrb	r3, [r3, #12]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d10a      	bne.n	8004ef4 <vTaskGetInfo+0x64>
			{
				vTaskSuspendAll();
 8004ede:	f7ff fba3 	bl	8004628 <vTaskSuspendAll>
				{
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <vTaskGetInfo+0x60>
					{
						pxTaskStatus->eCurrentState = eBlocked;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2202      	movs	r2, #2
 8004eee:	731a      	strb	r2, [r3, #12]
					}
				}
				xTaskResumeAll();
 8004ef0:	f7ff fba8 	bl	8004644 <xTaskResumeAll>
		}
		#endif /* INCLUDE_vTaskSuspend */

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2200      	movs	r2, #0
 8004f00:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the value
		of eState passed into this function is eInvalid - otherwise the state is
		just set to whatever is passed in. */
		if( eState != eInvalid )
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	2b05      	cmp	r3, #5
 8004f06:	d003      	beq.n	8004f10 <vTaskGetInfo+0x80>
		{
			pxTaskStatus->eCurrentState = eState;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	731a      	strb	r2, [r3, #12]
 8004f0e:	e006      	b.n	8004f1e <vTaskGetInfo+0x8e>
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff fae9 	bl	80044e8 <eTaskGetState>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <vTaskGetInfo+0xa8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f861 	bl	8004ff0 <prvTaskCheckFreeStackSpace>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004f36:	e002      	b.n	8004f3e <vTaskGetInfo+0xae>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	841a      	strh	r2, [r3, #32]
		}
	}
 8004f3e:	bf00      	nop
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20014214 	.word	0x20014214

08004f4c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d03f      	beq.n	8004fe6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d104      	bne.n	8004f8a <prvListTasksWithinSingleList+0x3e>
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d104      	bne.n	8004fb6 <prvListTasksWithinSingleList+0x6a>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1899      	adds	r1, r3, r2
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	6978      	ldr	r0, [r7, #20]
 8004fd4:	f7ff ff5c 	bl	8004e90 <vTaskGetInfo>
				uxTask++;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	3301      	adds	r3, #1
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d1d5      	bne.n	8004f92 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3728      	adds	r7, #40	; 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004ffc:	e005      	b.n	800500a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3301      	adds	r3, #1
 8005002:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3301      	adds	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2ba5      	cmp	r3, #165	; 0xa5
 8005010:	d0f5      	beq.n	8004ffe <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	b29b      	uxth	r3, r3
	}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fa51 	bl	80034dc <vPortFree>
			vPortFree( pxTCB );
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fe fa4e 	bl	80034dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <prvResetNextTaskUnblockTime+0x44>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <prvResetNextTaskUnblockTime+0x14>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <prvResetNextTaskUnblockTime+0x16>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <prvResetNextTaskUnblockTime+0x48>)
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800506a:	e008      	b.n	800507e <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <prvResetNextTaskUnblockTime+0x44>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a05      	ldr	r2, [pc, #20]	; (8005090 <prvResetNextTaskUnblockTime+0x48>)
 800507c:	6013      	str	r3, [r2, #0]
	}
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	200142b8 	.word	0x200142b8
 8005090:	20014320 	.word	0x20014320

08005094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <xTaskGetSchedulerState+0x34>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050a2:	2301      	movs	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	e008      	b.n	80050ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <xTaskGetSchedulerState+0x38>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050b0:	2302      	movs	r3, #2
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	e001      	b.n	80050ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050ba:	687b      	ldr	r3, [r7, #4]
	}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	2001430c 	.word	0x2001430c
 80050cc:	20014328 	.word	0x20014328

080050d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d062      	beq.n	80051a8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	4b32      	ldr	r3, [pc, #200]	; (80051b0 <vTaskPriorityInherit+0xe0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d25b      	bcs.n	80051a8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db06      	blt.n	8005106 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <vTaskPriorityInherit+0xe0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	f1c3 0206 	rsb	r2, r3, #6
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6959      	ldr	r1, [r3, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <vTaskPriorityInherit+0xe4>)
 8005118:	4413      	add	r3, r2
 800511a:	4299      	cmp	r1, r3
 800511c:	d101      	bne.n	8005122 <vTaskPriorityInherit+0x52>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <vTaskPriorityInherit+0x54>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d03a      	beq.n	800519e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3304      	adds	r3, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f7fd ff0f 	bl	8002f50 <uxListRemove>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d115      	bne.n	8005164 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	491d      	ldr	r1, [pc, #116]	; (80051b4 <vTaskPriorityInherit+0xe4>)
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <vTaskPriorityInherit+0x94>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	2201      	movs	r2, #1
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43da      	mvns	r2, r3
 800515a:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <vTaskPriorityInherit+0xe8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4013      	ands	r3, r2
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <vTaskPriorityInherit+0xe8>)
 8005162:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <vTaskPriorityInherit+0xe0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	2201      	movs	r2, #1
 8005174:	409a      	lsls	r2, r3
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <vTaskPriorityInherit+0xe8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <vTaskPriorityInherit+0xe8>)
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <vTaskPriorityInherit+0xe4>)
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7fd fe7c 	bl	8002e94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800519c:	e004      	b.n	80051a8 <vTaskPriorityInherit+0xd8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <vTaskPriorityInherit+0xe0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20014214 	.word	0x20014214
 80051b4:	20014218 	.word	0x20014218
 80051b8:	20014308 	.word	0x20014308

080051bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d062      	beq.n	8005298 <xTaskPriorityDisinherit+0xdc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051d2:	4b34      	ldr	r3, [pc, #208]	; (80052a4 <xTaskPriorityDisinherit+0xe8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d004      	beq.n	80051e6 <xTaskPriorityDisinherit+0x2a>
 80051dc:	4932      	ldr	r1, [pc, #200]	; (80052a8 <xTaskPriorityDisinherit+0xec>)
 80051de:	f640 60c7 	movw	r0, #3783	; 0xec7
 80051e2:	f7fb fff9 	bl	80011d8 <vAssertCalled>

			configASSERT( pxTCB->uxMutexesHeld );
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <xTaskPriorityDisinherit+0x3c>
 80051ee:	492e      	ldr	r1, [pc, #184]	; (80052a8 <xTaskPriorityDisinherit+0xec>)
 80051f0:	f640 60c9 	movw	r0, #3785	; 0xec9
 80051f4:	f7fb fff0 	bl	80011d8 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	429a      	cmp	r2, r3
 800520c:	d044      	beq.n	8005298 <xTaskPriorityDisinherit+0xdc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005212:	2b00      	cmp	r3, #0
 8005214:	d140      	bne.n	8005298 <xTaskPriorityDisinherit+0xdc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	3304      	adds	r3, #4
 800521a:	4618      	mov	r0, r3
 800521c:	f7fd fe98 	bl	8002f50 <uxListRemove>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d115      	bne.n	8005252 <xTaskPriorityDisinherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	4920      	ldr	r1, [pc, #128]	; (80052ac <xTaskPriorityDisinherit+0xf0>)
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTaskPriorityDisinherit+0x96>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	2201      	movs	r2, #1
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <xTaskPriorityDisinherit+0xf4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4013      	ands	r3, r2
 800524e:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <xTaskPriorityDisinherit+0xf4>)
 8005250:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	f1c3 0206 	rsb	r2, r3, #6
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	2201      	movs	r2, #1
 800526c:	409a      	lsls	r2, r3
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <xTaskPriorityDisinherit+0xf4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	4a0e      	ldr	r2, [pc, #56]	; (80052b0 <xTaskPriorityDisinherit+0xf4>)
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4a09      	ldr	r2, [pc, #36]	; (80052ac <xTaskPriorityDisinherit+0xf0>)
 8005286:	441a      	add	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7fd fe00 	bl	8002e94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005298:	68fb      	ldr	r3, [r7, #12]
	}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20014214 	.word	0x20014214
 80052a8:	0800a50c 	.word	0x0800a50c
 80052ac:	20014218 	.word	0x20014218
 80052b0:	20014308 	.word	0x20014308

080052b4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 fff1 	bl	80072a8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fa ffa2 	bl	8000210 <strlen>
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	e007      	b.n	80052e0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	2220      	movs	r2, #32
 80052d8:	701a      	strb	r2, [r3, #0]
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b0e      	cmp	r3, #14
 80052e4:	d9f4      	bls.n	80052d0 <prvWriteNameToBuffer+0x1c>
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
	}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop

08005300 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800530e:	4b45      	ldr	r3, [pc, #276]	; (8005424 <vTaskList+0x124>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8005314:	4b43      	ldr	r3, [pc, #268]	; (8005424 <vTaskList+0x124>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe f825 	bl	8003370 <pvPortMalloc>
 8005326:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d075      	beq.n	800541a <vTaskList+0x11a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	4619      	mov	r1, r3
 8005334:	6938      	ldr	r0, [r7, #16]
 8005336:	f7ff fa2d 	bl	8004794 <uxTaskGetSystemState>
 800533a:	4603      	mov	r3, r0
 800533c:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	e063      	b.n	800540c <vTaskList+0x10c>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	461a      	mov	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	7b1b      	ldrb	r3, [r3, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	2b03      	cmp	r3, #3
 800535a:	d817      	bhi.n	800538c <vTaskList+0x8c>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <vTaskList+0x64>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005375 	.word	0x08005375
 8005368:	0800537b 	.word	0x0800537b
 800536c:	08005381 	.word	0x08005381
 8005370:	08005387 	.word	0x08005387
				{
					case eReady:		cStatus = tskREADY_CHAR;
 8005374:	2352      	movs	r3, #82	; 0x52
 8005376:	75fb      	strb	r3, [r7, #23]
										break;
 8005378:	e00b      	b.n	8005392 <vTaskList+0x92>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800537a:	2342      	movs	r3, #66	; 0x42
 800537c:	75fb      	strb	r3, [r7, #23]
										break;
 800537e:	e008      	b.n	8005392 <vTaskList+0x92>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8005380:	2353      	movs	r3, #83	; 0x53
 8005382:	75fb      	strb	r3, [r7, #23]
										break;
 8005384:	e005      	b.n	8005392 <vTaskList+0x92>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8005386:	2344      	movs	r3, #68	; 0x44
 8005388:	75fb      	strb	r3, [r7, #23]
										break;
 800538a:	e002      	b.n	8005392 <vTaskList+0x92>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]
										break;
 8005390:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4613      	mov	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	461a      	mov	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff ff84 	bl	80052b4 <prvWriteNameToBuffer>
 80053ac:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80053ae:	7df9      	ldrb	r1, [r7, #23]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	6918      	ldr	r0, [r3, #16]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	461a      	mov	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4413      	add	r3, r2
 80053d2:	8c1b      	ldrh	r3, [r3, #32]
 80053d4:	461c      	mov	r4, r3
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	461a      	mov	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	9400      	str	r4, [sp, #0]
 80053ec:	4603      	mov	r3, r0
 80053ee:	460a      	mov	r2, r1
 80053f0:	490d      	ldr	r1, [pc, #52]	; (8005428 <vTaskList+0x128>)
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 ff16 	bl	8007224 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fa ff09 	bl	8000210 <strlen>
 80053fe:	4602      	mov	r2, r0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	607b      	str	r3, [r7, #4]
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3301      	adds	r3, #1
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	429a      	cmp	r2, r3
 8005412:	d397      	bcc.n	8005344 <vTaskList+0x44>
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005414:	6938      	ldr	r0, [r7, #16]
 8005416:	f7fe f861 	bl	80034dc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd90      	pop	{r4, r7, pc}
 8005422:	bf00      	nop
 8005424:	20014300 	.word	0x20014300
 8005428:	0800a52c 	.word	0x0800a52c

0800542c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <pvTaskIncrementMutexHeldCount+0x24>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <pvTaskIncrementMutexHeldCount+0x24>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800543e:	3201      	adds	r2, #1
 8005440:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005442:	4b03      	ldr	r3, [pc, #12]	; (8005450 <pvTaskIncrementMutexHeldCount+0x24>)
 8005444:	681b      	ldr	r3, [r3, #0]
	}
 8005446:	4618      	mov	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20014214 	.word	0x20014214

08005454 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005464:	4b28      	ldr	r3, [pc, #160]	; (8005508 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3304      	adds	r3, #4
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd fd70 	bl	8002f50 <uxListRemove>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2201      	movs	r2, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43da      	mvns	r2, r3
 8005484:	4b21      	ldr	r3, [pc, #132]	; (800550c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4013      	ands	r3, r2
 800548a:	4a20      	ldr	r2, [pc, #128]	; (800550c <prvAddCurrentTaskToDelayedList+0xb8>)
 800548c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d10a      	bne.n	80054ac <prvAddCurrentTaskToDelayedList+0x58>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <prvAddCurrentTaskToDelayedList+0xb4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	481a      	ldr	r0, [pc, #104]	; (8005510 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054a6:	f7fd fcf5 	bl	8002e94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054aa:	e026      	b.n	80054fa <prvAddCurrentTaskToDelayedList+0xa6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054b4:	4b14      	ldr	r3, [pc, #80]	; (8005508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d209      	bcs.n	80054d8 <prvAddCurrentTaskToDelayedList+0x84>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f7fd fd03 	bl	8002edc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054d6:	e010      	b.n	80054fa <prvAddCurrentTaskToDelayedList+0xa6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f7fd fcf9 	bl	8002edc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <prvAddCurrentTaskToDelayedList+0xc8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d202      	bcs.n	80054fa <prvAddCurrentTaskToDelayedList+0xa6>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80054f4:	4a09      	ldr	r2, [pc, #36]	; (800551c <prvAddCurrentTaskToDelayedList+0xc8>)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20014304 	.word	0x20014304
 8005508:	20014214 	.word	0x20014214
 800550c:	20014308 	.word	0x20014308
 8005510:	200142ec 	.word	0x200142ec
 8005514:	200142bc 	.word	0x200142bc
 8005518:	200142b8 	.word	0x200142b8
 800551c:	20014320 	.word	0x20014320

08005520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800552a:	f000 fa91 	bl	8005a50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800552e:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <xTimerCreateTimerTask+0x48>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <xTimerCreateTimerTask+0x4c>)
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	2305      	movs	r3, #5
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005544:	490a      	ldr	r1, [pc, #40]	; (8005570 <xTimerCreateTimerTask+0x50>)
 8005546:	480b      	ldr	r0, [pc, #44]	; (8005574 <xTimerCreateTimerTask+0x54>)
 8005548:	f7fe fe2c 	bl	80041a4 <xTaskCreate>
 800554c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <xTimerCreateTimerTask+0x3e>
 8005554:	4908      	ldr	r1, [pc, #32]	; (8005578 <xTimerCreateTimerTask+0x58>)
 8005556:	f240 1033 	movw	r0, #307	; 0x133
 800555a:	f7fb fe3d 	bl	80011d8 <vAssertCalled>
	return xReturn;
 800555e:	687b      	ldr	r3, [r7, #4]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	2001435c 	.word	0x2001435c
 800556c:	20014360 	.word	0x20014360
 8005570:	0800a53c 	.word	0x0800a53c
 8005574:	08005689 	.word	0x08005689
 8005578:	0800a544 	.word	0x0800a544

0800557c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <xTimerGenericCommand+0x22>
 8005594:	491c      	ldr	r1, [pc, #112]	; (8005608 <xTimerGenericCommand+0x8c>)
 8005596:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 800559a:	f7fb fe1d 	bl	80011d8 <vAssertCalled>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <xTimerGenericCommand+0x90>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02a      	beq.n	80055fc <xTimerGenericCommand+0x80>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	dc18      	bgt.n	80055ea <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055b8:	f7ff fd6c 	bl	8005094 <xTaskGetSchedulerState>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d109      	bne.n	80055d6 <xTimerGenericCommand+0x5a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <xTimerGenericCommand+0x90>)
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	f107 0114 	add.w	r1, r7, #20
 80055ca:	2300      	movs	r3, #0
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	f7fe f983 	bl	80038d8 <xQueueGenericSend>
 80055d2:	6278      	str	r0, [r7, #36]	; 0x24
 80055d4:	e012      	b.n	80055fc <xTimerGenericCommand+0x80>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <xTimerGenericCommand+0x90>)
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f107 0114 	add.w	r1, r7, #20
 80055de:	2300      	movs	r3, #0
 80055e0:	2200      	movs	r2, #0
 80055e2:	f7fe f979 	bl	80038d8 <xQueueGenericSend>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24
 80055e8:	e008      	b.n	80055fc <xTimerGenericCommand+0x80>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <xTimerGenericCommand+0x90>)
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	f107 0114 	add.w	r1, r7, #20
 80055f2:	2300      	movs	r3, #0
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	f7fe fa6b 	bl	8003ad0 <xQueueGenericSendFromISR>
 80055fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	0800a544 	.word	0x0800a544
 800560c:	2001435c 	.word	0x2001435c

08005610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af02      	add	r7, sp, #8
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <prvProcessExpiredTimer+0x70>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7fd fc91 	bl	8002f50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d11c      	bne.n	8005670 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	18d1      	adds	r1, r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f8c4 	bl	80057d0 <prvInsertTimerInActiveList>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d010      	beq.n	8005670 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800564e:	2300      	movs	r3, #0
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	2100      	movs	r1, #0
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff ff8f 	bl	800557c <xTimerGenericCommand>
 800565e:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <prvProcessExpiredTimer+0x60>
 8005666:	4907      	ldr	r1, [pc, #28]	; (8005684 <prvProcessExpiredTimer+0x74>)
 8005668:	f44f 7002 	mov.w	r0, #520	; 0x208
 800566c:	f7fb fdb4 	bl	80011d8 <vAssertCalled>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	4798      	blx	r3
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20014354 	.word	0x20014354
 8005684:	0800a544 	.word	0x0800a544

08005688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f857 	bl	8005748 <prvGetNextExpireTime>
 800569a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f803 	bl	80056ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056a6:	f000 f8d5 	bl	8005854 <prvProcessReceivedCommands>
	}
 80056aa:	e7f1      	b.n	8005690 <prvTimerTask+0x8>

080056ac <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056b6:	f7fe ffb7 	bl	8004628 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f866 	bl	8005790 <prvSampleTimeNow>
 80056c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d130      	bne.n	800572e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d806      	bhi.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056da:	f7fe ffb3 	bl	8004644 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff95 	bl	8005610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056e6:	e024      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <prvProcessTimerOrBlockTask+0x90>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvProcessTimerOrBlockTask+0x94>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	f7fe fcc5 	bl	800409c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8005712:	f7fe ff97 	bl	8004644 <xTaskResumeAll>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <prvProcessTimerOrBlockTask+0x98>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800572c:	e001      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800572e:	f7fe ff89 	bl	8004644 <xTaskResumeAll>
		}
	}
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20014358 	.word	0x20014358
 8005740:	2001435c 	.word	0x2001435c
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <prvGetNextExpireTime+0x44>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <prvGetNextExpireTime+0x44>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e001      	b.n	800577e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20014354 	.word	0x20014354

08005790 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005798:	f7fe ffec 	bl	8004774 <xTaskGetTickCount>
 800579c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <prvSampleTimeNow+0x3c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d205      	bcs.n	80057b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057a8:	f000 f8f4 	bl	8005994 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e002      	b.n	80057ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057ba:	4a04      	ldr	r2, [pc, #16]	; (80057cc <prvSampleTimeNow+0x3c>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20014364 	.word	0x20014364

080057d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d812      	bhi.n	800581c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e01b      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <prvInsertTimerInActiveList+0x7c>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fd fb61 	bl	8002edc <vListInsert>
 800581a:	e012      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d206      	bcs.n	8005832 <prvInsertTimerInActiveList+0x62>
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e007      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <prvInsertTimerInActiveList+0x80>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3304      	adds	r3, #4
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7fd fb4d 	bl	8002edc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20014358 	.word	0x20014358
 8005850:	20014354 	.word	0x20014354

08005854 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	; 0x30
 8005858:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800585a:	e087      	b.n	800596c <prvProcessReceivedCommands+0x118>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	da13      	bge.n	800588a <prvProcessReceivedCommands+0x36>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005862:	f107 0308 	add.w	r3, r7, #8
 8005866:	3304      	adds	r3, #4
 8005868:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <prvProcessReceivedCommands+0x26>
 8005870:	4946      	ldr	r1, [pc, #280]	; (800598c <prvProcessReceivedCommands+0x138>)
 8005872:	f240 20e7 	movw	r0, #743	; 0x2e7
 8005876:	f7fb fcaf 	bl	80011d8 <vAssertCalled>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	6850      	ldr	r0, [r2, #4]
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	6892      	ldr	r2, [r2, #8]
 8005886:	4611      	mov	r1, r2
 8005888:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	db6d      	blt.n	800596c <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	3304      	adds	r3, #4
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fd fb55 	bl	8002f50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058a6:	1d3b      	adds	r3, r7, #4
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff ff71 	bl	8005790 <prvSampleTimeNow>
 80058ae:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b09      	cmp	r3, #9
 80058b4:	d859      	bhi.n	800596a <prvProcessReceivedCommands+0x116>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <prvProcessReceivedCommands+0x68>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058e5 	.word	0x080058e5
 80058c8:	0800596d 	.word	0x0800596d
 80058cc:	08005937 	.word	0x08005937
 80058d0:	08005963 	.word	0x08005963
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	080058e5 	.word	0x080058e5
 80058dc:	0800596d 	.word	0x0800596d
 80058e0:	08005937 	.word	0x08005937
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	18d1      	adds	r1, r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	6a38      	ldr	r0, [r7, #32]
 80058f2:	f7ff ff6d 	bl	80057d0 <prvInsertTimerInActiveList>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d037      	beq.n	800596c <prvProcessReceivedCommands+0x118>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	6a38      	ldr	r0, [r7, #32]
 8005902:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d12f      	bne.n	800596c <prvProcessReceivedCommands+0x118>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	441a      	add	r2, r3
 8005914:	2300      	movs	r3, #0
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	2100      	movs	r1, #0
 800591c:	6a38      	ldr	r0, [r7, #32]
 800591e:	f7ff fe2d 	bl	800557c <xTimerGenericCommand>
 8005922:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d120      	bne.n	800596c <prvProcessReceivedCommands+0x118>
 800592a:	4918      	ldr	r1, [pc, #96]	; (800598c <prvProcessReceivedCommands+0x138>)
 800592c:	f240 3021 	movw	r0, #801	; 0x321
 8005930:	f7fb fc52 	bl	80011d8 <vAssertCalled>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8005934:	e01a      	b.n	800596c <prvProcessReceivedCommands+0x118>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <prvProcessReceivedCommands+0xfa>
 8005944:	4911      	ldr	r1, [pc, #68]	; (800598c <prvProcessReceivedCommands+0x138>)
 8005946:	f44f 704e 	mov.w	r0, #824	; 0x338
 800594a:	f7fb fc45 	bl	80011d8 <vAssertCalled>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	18d1      	adds	r1, r2, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	6a38      	ldr	r0, [r7, #32]
 800595c:	f7ff ff38 	bl	80057d0 <prvInsertTimerInActiveList>
					break;
 8005960:	e004      	b.n	800596c <prvProcessReceivedCommands+0x118>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005962:	6a38      	ldr	r0, [r7, #32]
 8005964:	f7fd fdba 	bl	80034dc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005968:	e000      	b.n	800596c <prvProcessReceivedCommands+0x118>

				default	:
					/* Don't expect to get here. */
					break;
 800596a:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800596c:	4b08      	ldr	r3, [pc, #32]	; (8005990 <prvProcessReceivedCommands+0x13c>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	f107 0108 	add.w	r1, r7, #8
 8005974:	2300      	movs	r3, #0
 8005976:	2200      	movs	r2, #0
 8005978:	f7fe f944 	bl	8003c04 <xQueueGenericReceive>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	f47f af6c 	bne.w	800585c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8005984:	bf00      	nop
 8005986:	3728      	adds	r7, #40	; 0x28
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	0800a544 	.word	0x0800a544
 8005990:	2001435c 	.word	0x2001435c

08005994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800599a:	e03f      	b.n	8005a1c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800599c:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <prvSwitchTimerLists+0xb0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059a6:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <prvSwitchTimerLists+0xb0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fd facb 	bl	8002f50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	6938      	ldr	r0, [r7, #16]
 80059c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d128      	bne.n	8005a1c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d90e      	bls.n	80059fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059e8:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <prvSwitchTimerLists+0xb0>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fd fa72 	bl	8002edc <vListInsert>
 80059f8:	e010      	b.n	8005a1c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059fa:	2300      	movs	r3, #0
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	2100      	movs	r1, #0
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7ff fdb9 	bl	800557c <xTimerGenericCommand>
 8005a0a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <prvSwitchTimerLists+0x88>
 8005a12:	490d      	ldr	r1, [pc, #52]	; (8005a48 <prvSwitchTimerLists+0xb4>)
 8005a14:	f240 3092 	movw	r0, #914	; 0x392
 8005a18:	f7fb fbde 	bl	80011d8 <vAssertCalled>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <prvSwitchTimerLists+0xb0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1ba      	bne.n	800599c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <prvSwitchTimerLists+0xb0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a2c:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <prvSwitchTimerLists+0xb0>)
 8005a32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6013      	str	r3, [r2, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20014354 	.word	0x20014354
 8005a48:	0800a544 	.word	0x0800a544
 8005a4c:	20014358 	.word	0x20014358

08005a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a54:	f7fd fb88 	bl	8003168 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a58:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <prvCheckForValidListAndQueue+0x54>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11d      	bne.n	8005a9c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a60:	4811      	ldr	r0, [pc, #68]	; (8005aa8 <prvCheckForValidListAndQueue+0x58>)
 8005a62:	f7fd f9e9 	bl	8002e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a66:	4811      	ldr	r0, [pc, #68]	; (8005aac <prvCheckForValidListAndQueue+0x5c>)
 8005a68:	f7fd f9e6 	bl	8002e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a6e:	4a0e      	ldr	r2, [pc, #56]	; (8005aa8 <prvCheckForValidListAndQueue+0x58>)
 8005a70:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <prvCheckForValidListAndQueue+0x64>)
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <prvCheckForValidListAndQueue+0x5c>)
 8005a76:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2110      	movs	r1, #16
 8005a7c:	2005      	movs	r0, #5
 8005a7e:	f7fd fe9d 	bl	80037bc <xQueueGenericCreate>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <prvCheckForValidListAndQueue+0x54>)
 8005a86:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <prvCheckForValidListAndQueue+0x54>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <prvCheckForValidListAndQueue+0x54>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4908      	ldr	r1, [pc, #32]	; (8005ab8 <prvCheckForValidListAndQueue+0x68>)
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fad8 	bl	800404c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a9c:	f7fd fb90 	bl	80031c0 <vPortExitCritical>
}
 8005aa0:	bf00      	nop
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	2001435c 	.word	0x2001435c
 8005aa8:	2001432c 	.word	0x2001432c
 8005aac:	20014340 	.word	0x20014340
 8005ab0:	20014354 	.word	0x20014354
 8005ab4:	20014358 	.word	0x20014358
 8005ab8:	0800a560 	.word	0x0800a560

08005abc <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <FreeRTOS_CLIRegisterCommand+0x1a>
 8005ace:	4915      	ldr	r1, [pc, #84]	; (8005b24 <FreeRTOS_CLIRegisterCommand+0x68>)
 8005ad0:	2080      	movs	r0, #128	; 0x80
 8005ad2:	f7fb fb81 	bl	80011d8 <vAssertCalled>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8005ad6:	2008      	movs	r0, #8
 8005ad8:	f7fd fc4a 	bl	8003370 <pvPortMalloc>
 8005adc:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <FreeRTOS_CLIRegisterCommand+0x30>
 8005ae4:	490f      	ldr	r1, [pc, #60]	; (8005b24 <FreeRTOS_CLIRegisterCommand+0x68>)
 8005ae6:	2084      	movs	r0, #132	; 0x84
 8005ae8:	f7fb fb76 	bl	80011d8 <vAssertCalled>

	if( pxNewListItem != NULL )
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <FreeRTOS_CLIRegisterCommand+0x5c>
	{
		taskENTER_CRITICAL();
 8005af2:	f7fd fb39 	bl	8003168 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <FreeRTOS_CLIRegisterCommand+0x6c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8005b0a:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <FreeRTOS_CLIRegisterCommand+0x6c>)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8005b10:	f7fd fb56 	bl	80031c0 <vPortExitCritical>

		xReturn = pdPASS;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005b18:	68fb      	ldr	r3, [r7, #12]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	0800a59c 	.word	0x0800a59c
 8005b28:	2001000c 	.word	0x2001000c

08005b2c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d141      	bne.n	8005bc8 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8005b44:	4b38      	ldr	r3, [pc, #224]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b46:	4a39      	ldr	r2, [pc, #228]	; (8005c2c <FreeRTOS_CLIProcessCommand+0x100>)
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e037      	b.n	8005bbc <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8005b4c:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8005b56:	69b8      	ldr	r0, [r7, #24]
 8005b58:	f7fa fb5a 	bl	8000210 <strlen>
 8005b5c:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d005      	beq.n	8005b76 <FreeRTOS_CLIProcessCommand+0x4a>
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11d      	bne.n	8005bb2 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f001 fb9c 	bl	80072b8 <strncmp>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d115      	bne.n	8005bb2 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8005b86:	4b28      	ldr	r3, [pc, #160]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	db18      	blt.n	8005bc6 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f8e1 	bl	8005d5c <prvGetNumberOfParameters>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d00c      	beq.n	8005bc6 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8005bb0:	e009      	b.n	8005bc6 <FreeRTOS_CLIProcessCommand+0x9a>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1c3      	bne.n	8005b4c <FreeRTOS_CLIProcessCommand+0x20>
 8005bc4:	e000      	b.n	8005bc8 <FreeRTOS_CLIProcessCommand+0x9c>
						{
							xReturn = pdFALSE;
						}
					}

					break;
 8005bc6:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <FreeRTOS_CLIProcessCommand+0xbc>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4915      	ldr	r1, [pc, #84]	; (8005c30 <FreeRTOS_CLIProcessCommand+0x104>)
 8005bda:	68b8      	ldr	r0, [r7, #8]
 8005bdc:	f001 fb81 	bl	80072e2 <strncpy>
		pxCommand = NULL;
 8005be0:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e01a      	b.n	8005c1e <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00f      	beq.n	8005c10 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	68b8      	ldr	r0, [r7, #8]
 8005bfe:	4798      	blx	r3
 8005c00:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e006      	b.n	8005c1e <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4908      	ldr	r1, [pc, #32]	; (8005c34 <FreeRTOS_CLIProcessCommand+0x108>)
 8005c14:	68b8      	ldr	r0, [r7, #8]
 8005c16:	f001 fb64 	bl	80072e2 <strncpy>
		xReturn = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	200143e8 	.word	0x200143e8
 8005c2c:	20010004 	.word	0x20010004
 8005c30:	0800a5d4 	.word	0x0800a5d4
 8005c34:	0800a62c 	.word	0x0800a62c

08005c38 <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	20014368 	.word	0x20014368

08005c4c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8005c66:	e03b      	b.n	8005ce0 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <FreeRTOS_CLIGetParameter+0x3a>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d1f4      	bne.n	8005c68 <FreeRTOS_CLIGetParameter+0x1c>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8005c7e:	e002      	b.n	8005c86 <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <FreeRTOS_CLIGetParameter+0x4a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d0f4      	beq.n	8005c80 <FreeRTOS_CLIGetParameter+0x34>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d025      	beq.n	8005cea <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d119      	bne.n	8005ce0 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005cb0:	e007      	b.n	8005cc2 <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <FreeRTOS_CLIGetParameter+0x86>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d1ef      	bne.n	8005cb2 <FreeRTOS_CLIGetParameter+0x66>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
				}

				break;
 8005cde:	e006      	b.n	8005cee <FreeRTOS_CLIGetParameter+0xa2>
UBaseType_t uxParametersFound = 0;
const char *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3c2      	bcc.n	8005c6e <FreeRTOS_CLIGetParameter+0x22>
 8005ce8:	e002      	b.n	8005cf0 <FreeRTOS_CLIGetParameter+0xa4>
				break;
			}
		}
		else
		{
			break;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <FreeRTOS_CLIGetParameter+0xa4>
				if( *pxParameterStringLength == 0 )
				{
					pcReturn = NULL;
				}

				break;
 8005cee:	bf00      	nop
		{
			break;
		}
	}

	return pcReturn;
 8005cf0:	693b      	ldr	r3, [r7, #16]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop

08005d00 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <prvHelpCommand+0x54>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <prvHelpCommand+0x54>)
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <prvHelpCommand+0x58>)
 8005d18:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <prvHelpCommand+0x54>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4619      	mov	r1, r3
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f001 fadb 	bl	80072e2 <strncpy>
	pxCommand = pxCommand->pxNext;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <prvHelpCommand+0x54>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <prvHelpCommand+0x54>)
 8005d34:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <prvHelpCommand+0x54>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e001      	b.n	8005d48 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d48:	697b      	ldr	r3, [r7, #20]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200143ec 	.word	0x200143ec
 8005d58:	20010004 	.word	0x20010004

08005d5c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8005d6c:	e014      	b.n	8005d98 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d10b      	bne.n	8005d8e <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d00a      	beq.n	8005d92 <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8005d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	3301      	adds	r3, #1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60bb      	str	r3, [r7, #8]
 8005d8c:	e001      	b.n	8005d92 <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3301      	adds	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e6      	bne.n	8005d6e <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 8005da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8005db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <HW_ConfigAll>:
  *         module.
  * @param  None
  * @retval None
  */
static void HW_ConfigAll(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
   /*
    * Configure the Debug UART init structure:
    *   8 bits length + 1 stop bit, no parity
    *   Baudrate 115200 kbps
    */
    Debug_Config.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8005dc8:	4b16      	ldr	r3, [pc, #88]	; (8005e24 <HW_ConfigAll+0x60>)
 8005dca:	220c      	movs	r2, #12
 8005dcc:	611a      	str	r2, [r3, #16]
    Debug_Config.USART_BaudRate            = 115200;
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <HW_ConfigAll+0x60>)
 8005dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005dd4:	601a      	str	r2, [r3, #0]
    Debug_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005dd6:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <HW_ConfigAll+0x60>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	615a      	str	r2, [r3, #20]
    Debug_Config.USART_Parity              = USART_Parity_Even;
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <HW_ConfigAll+0x60>)
 8005dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de2:	60da      	str	r2, [r3, #12]
    Debug_Config.USART_StopBits            = USART_StopBits_1;
 8005de4:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <HW_ConfigAll+0x60>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
    Debug_Config.USART_WordLength          = USART_WordLength_9b;
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <HW_ConfigAll+0x60>)
 8005dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005df0:	605a      	str	r2, [r3, #4]
    /*
     * Configure the Digital Servo UART init structure:
     *   8 bits length + 1 stop bit, no parity
     *   Baudrate 57600 kbps
     */
     Dsv_Config.USART_Mode                = USART_Mode_Tx;
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <HW_ConfigAll+0x64>)
 8005df4:	2208      	movs	r2, #8
 8005df6:	611a      	str	r2, [r3, #16]
     Dsv_Config.USART_BaudRate            = 57600;
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HW_ConfigAll+0x64>)
 8005dfa:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005dfe:	601a      	str	r2, [r3, #0]
     Dsv_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005e00:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <HW_ConfigAll+0x64>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	615a      	str	r2, [r3, #20]
     Dsv_Config.USART_Parity              = USART_Parity_No;
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <HW_ConfigAll+0x64>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	60da      	str	r2, [r3, #12]
     Dsv_Config.USART_StopBits            = USART_StopBits_1;
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HW_ConfigAll+0x64>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	609a      	str	r2, [r3, #8]
     Dsv_Config.USART_WordLength          = USART_WordLength_8b;
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HW_ConfigAll+0x64>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	605a      	str	r2, [r3, #4]
}
 8005e18:	bf00      	nop
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200143f0 	.word	0x200143f0
 8005e28:	20014408 	.word	0x20014408

08005e2c <HW_InitAll>:
  *         HW_ConfigAll() function.
  * @param  None
  * @retval None
  */
void HW_InitAll(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
    /* System Config */
    HW_CPU_CACHE_Enable();
 8005e30:	f001 f85c 	bl	8006eec <HW_CPU_CACHE_Enable>
    HW_SystemClock_Config();
 8005e34:	f001 f802 	bl	8006e3c <HW_SystemClock_Config>

    /* HW Modules Configurations */
    HW_ConfigAll();
 8005e38:	f7ff ffc4 	bl	8005dc4 <HW_ConfigAll>

    /* HW Modules Initializations */
    HW_PWR_Init();
 8005e3c:	f000 ff1e 	bl	8006c7c <HW_PWR_Init>
    HW_LED_Init();
 8005e40:	f000 fcb6 	bl	80067b0 <HW_LED_Init>
    HW_ENC_Init();
 8005e44:	f000 fb68 	bl	8006518 <HW_ENC_Init>
    HW_MOT_Init();
 8005e48:	f000 fe72 	bl	8006b30 <HW_MOT_Init>
    HW_ASV_Init();
 8005e4c:	f000 f850 	bl	8005ef0 <HW_ASV_Init>
    HW_MON_Init();
 8005e50:	f000 fda2 	bl	8006998 <HW_MON_Init>
    HW_HMI_Init();
 8005e54:	f000 fbf0 	bl	8006638 <HW_HMI_Init>
    HW_Digital_Input_Init();
 8005e58:	f000 fa26 	bl	80062a8 <HW_Digital_Input_Init>

    HW_DBG_Init(&Debug_Config);
 8005e5c:	4805      	ldr	r0, [pc, #20]	; (8005e74 <HW_InitAll+0x48>)
 8005e5e:	f000 f96d 	bl	800613c <HW_DBG_Init>
    HW_DSV_Init(&Dsv_Config);
 8005e62:	4805      	ldr	r0, [pc, #20]	; (8005e78 <HW_InitAll+0x4c>)
 8005e64:	f000 fafa 	bl	800645c <HW_DSV_Init>

    /* Set Interrupt group priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8005e68:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005e6c:	f7fb fb4c 	bl	8001508 <NVIC_PriorityGroupConfig>
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	200143f0 	.word	0x200143f0
 8005e78:	20014408 	.word	0x20014408

08005e7c <HW_PowerUp>:
  * @brief  Apply the power-up sequence
  * @param  None
  * @retval None
  */
void HW_PowerUp(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
    int i = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]

    //MOT_SLEEP_WRITE(MOT_SLEEP_OFF);
    //MOT_RESET_WRITE(MOT_RESET_ON);

    /* Enable powers */
    for(i = 10000000; i; i--);
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <HW_PowerUp+0x6c>)
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e002      	b.n	8005e92 <HW_PowerUp+0x16>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f9      	bne.n	8005e8c <HW_PowerUp+0x10>
    HW_PWR_Enable(HW_PWR_VP1);
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f000 ff2f 	bl	8006cfc <HW_PWR_Enable>
    for(i = 10000000; i; i--);
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HW_PowerUp+0x6c>)
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	e002      	b.n	8005eaa <HW_PowerUp+0x2e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f9      	bne.n	8005ea4 <HW_PowerUp+0x28>
    HW_PWR_Enable(HW_PWR_VP2);
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f000 ff23 	bl	8006cfc <HW_PWR_Enable>
    for(i = 10000000; i; i--);
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <HW_PowerUp+0x6c>)
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	e002      	b.n	8005ec2 <HW_PowerUp+0x46>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f9      	bne.n	8005ebc <HW_PowerUp+0x40>
    HW_PWR_Enable(HW_PWR_VP3);
 8005ec8:	2002      	movs	r0, #2
 8005eca:	f000 ff17 	bl	8006cfc <HW_PWR_Enable>
    for(i = 50000000; i; i--);
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HW_PowerUp+0x70>)
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	e002      	b.n	8005eda <HW_PowerUp+0x5e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f9      	bne.n	8005ed4 <HW_PowerUp+0x58>

    /* Enable H-bridges power */
  //  MOT_RESET_WRITE(MOT_RESET_OFF);

}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	00989680 	.word	0x00989680
 8005eec:	02faf080 	.word	0x02faf080

08005ef0 <HW_ASV_Init>:


#include "blueboard.h"

void HW_ASV_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b090      	sub	sp, #64	; 0x40
 8005ef4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    TIM_OCInitTypeDef TIM_OCStruct;

    /* Enable ASV GPIO Clocks */
    ASV1_PWM_GPIO_CLK_ENABLE();
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	2004      	movs	r0, #4
 8005efa:	f7fb ff2d 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV2_PWM_GPIO_CLK_ENABLE();
 8005efe:	2101      	movs	r1, #1
 8005f00:	2004      	movs	r0, #4
 8005f02:	f7fb ff29 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV3_PWM_GPIO_CLK_ENABLE();
 8005f06:	2101      	movs	r1, #1
 8005f08:	2004      	movs	r0, #4
 8005f0a:	f7fb ff25 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV4_PWM_GPIO_CLK_ENABLE();
 8005f0e:	2101      	movs	r1, #1
 8005f10:	2004      	movs	r0, #4
 8005f12:	f7fb ff21 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV5_PWM_GPIO_CLK_ENABLE();
 8005f16:	2101      	movs	r1, #1
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f7fb ff1d 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV6_PWM_GPIO_CLK_ENABLE();
 8005f1e:	2101      	movs	r1, #1
 8005f20:	2001      	movs	r0, #1
 8005f22:	f7fb ff19 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV7_PWM_GPIO_CLK_ENABLE();
 8005f26:	2101      	movs	r1, #1
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f7fb ff15 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ASV8_PWM_GPIO_CLK_ENABLE();
 8005f2e:	2101      	movs	r1, #1
 8005f30:	2001      	movs	r0, #1
 8005f32:	f7fb ff11 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8005f36:	2302      	movs	r3, #2
 8005f38:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    GPIO_InitStruct.GPIO_Pin = ASV1_PWM_PIN;
 8005f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV1_PWM_GPIO_PORT, ASV1_PWM_PIN_SOURCE, ASV1_PWM_AF);
 8005f54:	2203      	movs	r2, #3
 8005f56:	2109      	movs	r1, #9
 8005f58:	4874      	ldr	r0, [pc, #464]	; (800612c <HW_ASV_Init+0x23c>)
 8005f5a:	f7fb fc93 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ASV1_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005f5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f62:	4619      	mov	r1, r3
 8005f64:	4871      	ldr	r0, [pc, #452]	; (800612c <HW_ASV_Init+0x23c>)
 8005f66:	f7fb fbe5 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV2_PWM_PIN;
 8005f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV2_PWM_GPIO_PORT, ASV2_PWM_PIN_SOURCE, ASV2_PWM_AF);
 8005f70:	2203      	movs	r2, #3
 8005f72:	2108      	movs	r1, #8
 8005f74:	486d      	ldr	r0, [pc, #436]	; (800612c <HW_ASV_Init+0x23c>)
 8005f76:	f7fb fc85 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ASV2_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f7e:	4619      	mov	r1, r3
 8005f80:	486a      	ldr	r0, [pc, #424]	; (800612c <HW_ASV_Init+0x23c>)
 8005f82:	f7fb fbd7 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV3_PWM_PIN;
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV3_PWM_GPIO_PORT, ASV3_PWM_PIN_SOURCE, ASV3_PWM_AF);
    GPIO_Init(ASV3_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f94:	4619      	mov	r1, r3
 8005f96:	4865      	ldr	r0, [pc, #404]	; (800612c <HW_ASV_Init+0x23c>)
 8005f98:	f7fb fbcc 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV4_PWM_PIN;
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV4_PWM_GPIO_PORT, ASV4_PWM_PIN_SOURCE, ASV4_PWM_AF);
    GPIO_Init(ASV4_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4861      	ldr	r0, [pc, #388]	; (800612c <HW_ASV_Init+0x23c>)
 8005fa8:	f7fb fbc4 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV5_PWM_PIN;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV5_PWM_GPIO_PORT, ASV5_PWM_PIN_SOURCE, ASV5_PWM_AF);
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	2100      	movs	r1, #0
 8005fba:	485d      	ldr	r0, [pc, #372]	; (8006130 <HW_ASV_Init+0x240>)
 8005fbc:	f7fb fc62 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ASV5_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005fc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	485a      	ldr	r0, [pc, #360]	; (8006130 <HW_ASV_Init+0x240>)
 8005fc8:	f7fb fbb4 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV6_PWM_PIN;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV6_PWM_GPIO_PORT, ASV6_PWM_PIN_SOURCE, ASV6_PWM_AF);
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4856      	ldr	r0, [pc, #344]	; (8006130 <HW_ASV_Init+0x240>)
 8005fd6:	f7fb fc55 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ASV6_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4853      	ldr	r0, [pc, #332]	; (8006130 <HW_ASV_Init+0x240>)
 8005fe2:	f7fb fba7 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV7_PWM_PIN;
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV7_PWM_GPIO_PORT, ASV7_PWM_PIN_SOURCE, ASV7_PWM_AF);
 8005fea:	2202      	movs	r2, #2
 8005fec:	2102      	movs	r1, #2
 8005fee:	4850      	ldr	r0, [pc, #320]	; (8006130 <HW_ASV_Init+0x240>)
 8005ff0:	f7fb fc48 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ASV7_PWM_GPIO_PORT, &GPIO_InitStruct);
 8005ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	484d      	ldr	r0, [pc, #308]	; (8006130 <HW_ASV_Init+0x240>)
 8005ffc:	f7fb fb9a 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV8_PWM_PIN;
 8006000:	2308      	movs	r3, #8
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV8_PWM_GPIO_PORT, ASV8_PWM_PIN_SOURCE, ASV8_PWM_AF);
 8006004:	2202      	movs	r2, #2
 8006006:	2103      	movs	r1, #3
 8006008:	4849      	ldr	r0, [pc, #292]	; (8006130 <HW_ASV_Init+0x240>)
 800600a:	f7fb fc3b 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ASV8_PWM_GPIO_PORT, &GPIO_InitStruct);
 800600e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006012:	4619      	mov	r1, r3
 8006014:	4846      	ldr	r0, [pc, #280]	; (8006130 <HW_ASV_Init+0x240>)
 8006016:	f7fb fb8d 	bl	8001734 <GPIO_Init>

    /* Enable Timers Clocks from RCC */
    ASV_1_TO_4_TIM_CLK_ENABLE();
 800601a:	2101      	movs	r1, #1
 800601c:	2002      	movs	r0, #2
 800601e:	f7fb fedb 	bl	8001dd8 <RCC_APB2PeriphClockCmd>
    ASV_5_TO_8_TIM_CLK_ENABLE();
 8006022:	2101      	movs	r1, #1
 8006024:	2008      	movs	r0, #8
 8006026:	f7fb feb7 	bl	8001d98 <RCC_APB1PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 800602a:	2300      	movs	r3, #0
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 800602e:	2300      	movs	r3, #0
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = ASV_TIMER_PRESCALER;
 8006032:	232f      	movs	r3, #47	; 0x2f
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = ASV_TIMER_PERIOD;
 8006036:	f649 433f 	movw	r3, #39999	; 0x9c3f
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(ASV_1_TO_4_TIM, &TIM_BaseStruct);
 8006040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006044:	4619      	mov	r1, r3
 8006046:	483b      	ldr	r0, [pc, #236]	; (8006134 <HW_ASV_Init+0x244>)
 8006048:	f7fb ffd2 	bl	8001ff0 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(ASV_5_TO_8_TIM, &TIM_BaseStruct);
 800604c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006050:	4619      	mov	r1, r3
 8006052:	4839      	ldr	r0, [pc, #228]	; (8006138 <HW_ASV_Init+0x248>)
 8006054:	f7fb ffcc 	bl	8001ff0 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(ASV_1_TO_4_TIM, ENABLE);
 8006058:	2101      	movs	r1, #1
 800605a:	4836      	ldr	r0, [pc, #216]	; (8006134 <HW_ASV_Init+0x244>)
 800605c:	f7fc face 	bl	80025fc <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(ASV_5_TO_8_TIM, ENABLE);
 8006060:	2101      	movs	r1, #1
 8006062:	4835      	ldr	r0, [pc, #212]	; (8006138 <HW_ASV_Init+0x248>)
 8006064:	f7fc faca 	bl	80025fc <TIM_CtrlPWMOutputs>

    TIM_Cmd(ASV_1_TO_4_TIM, ENABLE);
 8006068:	2101      	movs	r1, #1
 800606a:	4832      	ldr	r0, [pc, #200]	; (8006134 <HW_ASV_Init+0x244>)
 800606c:	f7fc f838 	bl	80020e0 <TIM_Cmd>
    TIM_Cmd(ASV_5_TO_8_TIM, ENABLE);
 8006070:	2101      	movs	r1, #1
 8006072:	4831      	ldr	r0, [pc, #196]	; (8006138 <HW_ASV_Init+0x248>)
 8006074:	f7fc f834 	bl	80020e0 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 8006078:	1d3b      	adds	r3, r7, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc fa2c 	bl	80024d8 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 8006080:	2360      	movs	r3, #96	; 0x60
 8006082:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OCPolarity     = TIM_OCPolarity_Low;       /* Invert polarity since we have optocouplers */
 8006084:	2302      	movs	r3, #2
 8006086:	617b      	str	r3, [r7, #20]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 8006088:	2301      	movs	r3, #1
 800608a:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 800608c:	2301      	movs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8006094:	1d3b      	adds	r3, r7, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4826      	ldr	r0, [pc, #152]	; (8006134 <HW_ASV_Init+0x244>)
 800609a:	f7fc f83d 	bl	8002118 <TIM_OC1Init>
    TIM_OC2Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	4824      	ldr	r0, [pc, #144]	; (8006134 <HW_ASV_Init+0x244>)
 80060a4:	f7fc f8b2 	bl	800220c <TIM_OC2Init>
    TIM_OC3Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4821      	ldr	r0, [pc, #132]	; (8006134 <HW_ASV_Init+0x244>)
 80060ae:	f7fc f92f 	bl	8002310 <TIM_OC3Init>
    TIM_OC4Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	481f      	ldr	r0, [pc, #124]	; (8006134 <HW_ASV_Init+0x244>)
 80060b8:	f7fc f9aa 	bl	8002410 <TIM_OC4Init>
    TIM_OC1Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	481d      	ldr	r0, [pc, #116]	; (8006138 <HW_ASV_Init+0x248>)
 80060c2:	f7fc f829 	bl	8002118 <TIM_OC1Init>
    TIM_OC2Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80060c6:	1d3b      	adds	r3, r7, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	481b      	ldr	r0, [pc, #108]	; (8006138 <HW_ASV_Init+0x248>)
 80060cc:	f7fc f89e 	bl	800220c <TIM_OC2Init>
    TIM_OC3Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80060d0:	1d3b      	adds	r3, r7, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4818      	ldr	r0, [pc, #96]	; (8006138 <HW_ASV_Init+0x248>)
 80060d6:	f7fc f91b 	bl	8002310 <TIM_OC3Init>
    TIM_OC4Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4816      	ldr	r0, [pc, #88]	; (8006138 <HW_ASV_Init+0x248>)
 80060e0:	f7fc f996 	bl	8002410 <TIM_OC4Init>

    TIM_OC1PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80060e4:	2108      	movs	r1, #8
 80060e6:	4813      	ldr	r0, [pc, #76]	; (8006134 <HW_ASV_Init+0x244>)
 80060e8:	f7fc fa18 	bl	800251c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80060ec:	2108      	movs	r1, #8
 80060ee:	4811      	ldr	r0, [pc, #68]	; (8006134 <HW_ASV_Init+0x244>)
 80060f0:	f7fc fa30 	bl	8002554 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80060f4:	2108      	movs	r1, #8
 80060f6:	480f      	ldr	r0, [pc, #60]	; (8006134 <HW_ASV_Init+0x244>)
 80060f8:	f7fc fa48 	bl	800258c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80060fc:	2108      	movs	r1, #8
 80060fe:	480d      	ldr	r0, [pc, #52]	; (8006134 <HW_ASV_Init+0x244>)
 8006100:	f7fc fa60 	bl	80025c4 <TIM_OC4PreloadConfig>
    TIM_OC1PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8006104:	2108      	movs	r1, #8
 8006106:	480c      	ldr	r0, [pc, #48]	; (8006138 <HW_ASV_Init+0x248>)
 8006108:	f7fc fa08 	bl	800251c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800610c:	2108      	movs	r1, #8
 800610e:	480a      	ldr	r0, [pc, #40]	; (8006138 <HW_ASV_Init+0x248>)
 8006110:	f7fc fa20 	bl	8002554 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8006114:	2108      	movs	r1, #8
 8006116:	4808      	ldr	r0, [pc, #32]	; (8006138 <HW_ASV_Init+0x248>)
 8006118:	f7fc fa38 	bl	800258c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800611c:	2108      	movs	r1, #8
 800611e:	4806      	ldr	r0, [pc, #24]	; (8006138 <HW_ASV_Init+0x248>)
 8006120:	f7fc fa50 	bl	80025c4 <TIM_OC4PreloadConfig>

}
 8006124:	bf00      	nop
 8006126:	3740      	adds	r7, #64	; 0x40
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40020800 	.word	0x40020800
 8006130:	40020000 	.word	0x40020000
 8006134:	40010400 	.word	0x40010400
 8006138:	40000c00 	.word	0x40000c00

0800613c <HW_DBG_Init>:
  * @brief  Initialize the Debug UART
  * @param  None
  * @retval None
  */
void HW_DBG_Init(USART_InitTypeDef * USART_InitStruct)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable GPIOs Clock */
    DBG_TX_GPIO_CLK_ENABLE();
 8006144:	2101      	movs	r1, #1
 8006146:	2001      	movs	r0, #1
 8006148:	f7fb fe06 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    DBG_RX_GPIO_CLK_ENABLE();
 800614c:	2101      	movs	r1, #1
 800614e:	2001      	movs	r0, #1
 8006150:	f7fb fe02 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    DBG_CTS_GPIO_CLK_ENABLE();
 8006154:	2101      	movs	r1, #1
 8006156:	2001      	movs	r0, #1
 8006158:	f7fb fdfe 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    DBG_RTS_GPIO_CLK_ENABLE();
 800615c:	2101      	movs	r1, #1
 800615e:	2001      	movs	r0, #1
 8006160:	f7fb fdfa 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Enable Debug USART clock */
    DBG_CLK_ENABLE();
 8006164:	2101      	movs	r1, #1
 8006166:	2010      	movs	r0, #16
 8006168:	f7fb fe36 	bl	8001dd8 <RCC_APB2PeriphClockCmd>

    /* Configure USART TX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_TX_PIN;
 800616c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006172:	2302      	movs	r3, #2
 8006174:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 8006176:	2300      	movs	r3, #0
 8006178:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800617a:	2301      	movs	r3, #1
 800617c:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DBG_TX_GPIO_PORT, &GPIO_InitStructure);
 800617e:	f107 0318 	add.w	r3, r7, #24
 8006182:	4619      	mov	r1, r3
 8006184:	4824      	ldr	r0, [pc, #144]	; (8006218 <HW_DBG_Init+0xdc>)
 8006186:	f7fb fad5 	bl	8001734 <GPIO_Init>

    /* Configure USART RX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RX_PIN;
 800618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618e:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RX_GPIO_PORT, &GPIO_InitStructure);
 8006190:	f107 0318 	add.w	r3, r7, #24
 8006194:	4619      	mov	r1, r3
 8006196:	4820      	ldr	r0, [pc, #128]	; (8006218 <HW_DBG_Init+0xdc>)
 8006198:	f7fb facc 	bl	8001734 <GPIO_Init>

    /* Configure USART CTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_CTS_PIN;
 800619c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061a0:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_CTS_GPIO_PORT, &GPIO_InitStructure);
 80061a2:	f107 0318 	add.w	r3, r7, #24
 80061a6:	4619      	mov	r1, r3
 80061a8:	481b      	ldr	r0, [pc, #108]	; (8006218 <HW_DBG_Init+0xdc>)
 80061aa:	f7fb fac3 	bl	8001734 <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RTS_PIN;
 80061ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b2:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RTS_GPIO_PORT, &GPIO_InitStructure);
 80061b4:	f107 0318 	add.w	r3, r7, #24
 80061b8:	4619      	mov	r1, r3
 80061ba:	4817      	ldr	r0, [pc, #92]	; (8006218 <HW_DBG_Init+0xdc>)
 80061bc:	f7fb faba 	bl	8001734 <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(DBG_TX_GPIO_PORT,  DBG_TX_PIN_SOURCE,  DBG_TX_AF);
 80061c0:	2207      	movs	r2, #7
 80061c2:	2109      	movs	r1, #9
 80061c4:	4814      	ldr	r0, [pc, #80]	; (8006218 <HW_DBG_Init+0xdc>)
 80061c6:	f7fb fb5d 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RX_GPIO_PORT,  DBG_RX_PIN_SOURCE,  DBG_RX_AF);
 80061ca:	2207      	movs	r2, #7
 80061cc:	210a      	movs	r1, #10
 80061ce:	4812      	ldr	r0, [pc, #72]	; (8006218 <HW_DBG_Init+0xdc>)
 80061d0:	f7fb fb58 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_CTS_GPIO_PORT, DBG_CTS_PIN_SOURCE, DBG_CTS_AF);
 80061d4:	2207      	movs	r2, #7
 80061d6:	210b      	movs	r1, #11
 80061d8:	480f      	ldr	r0, [pc, #60]	; (8006218 <HW_DBG_Init+0xdc>)
 80061da:	f7fb fb53 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RTS_GPIO_PORT, DBG_RTS_PIN_SOURCE, DBG_RTS_AF);
 80061de:	2207      	movs	r2, #7
 80061e0:	210c      	movs	r1, #12
 80061e2:	480d      	ldr	r0, [pc, #52]	; (8006218 <HW_DBG_Init+0xdc>)
 80061e4:	f7fb fb4e 	bl	8001884 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DBG_COM, USART_InitStruct);
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	480c      	ldr	r0, [pc, #48]	; (800621c <HW_DBG_Init+0xe0>)
 80061ec:	f7fc fcd6 	bl	8002b9c <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 80061f0:	f107 0308 	add.w	r3, r7, #8
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fc fdb1 	bl	8002d5c <USART_ClockStructInit>
    USART_ClockInit(DBG_COM, &USART_ClockInitStruct);
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	4619      	mov	r1, r3
 8006200:	4806      	ldr	r0, [pc, #24]	; (800621c <HW_DBG_Init+0xe0>)
 8006202:	f7fc fd85 	bl	8002d10 <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DBG_COM, ENABLE);
 8006206:	2101      	movs	r1, #1
 8006208:	4804      	ldr	r0, [pc, #16]	; (800621c <HW_DBG_Init+0xe0>)
 800620a:	f7fc fdbd 	bl	8002d88 <USART_Cmd>

}
 800620e:	bf00      	nop
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40020000 	.word	0x40020000
 800621c:	40011000 	.word	0x40011000

08006220 <HW_DBG_Put>:
  * @brief  Send a byte through debug UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DBG_Put(uint8_t ch)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DBG_COM, (uint16_t) ch);
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	b29b      	uxth	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	4807      	ldr	r0, [pc, #28]	; (8006250 <HW_DBG_Put+0x30>)
 8006232:	f7fc fdc5 	bl	8002dc0 <USART_SendData>
      while(USART_GetFlagStatus(DBG_COM, USART_FLAG_TC) == RESET);
 8006236:	bf00      	nop
 8006238:	2140      	movs	r1, #64	; 0x40
 800623a:	4805      	ldr	r0, [pc, #20]	; (8006250 <HW_DBG_Put+0x30>)
 800623c:	f7fc fde2 	bl	8002e04 <USART_GetFlagStatus>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f8      	beq.n	8006238 <HW_DBG_Put+0x18>
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40011000 	.word	0x40011000

08006254 <HW_DBG_Puts>:
  * @brief  Send a string through debug UART and wait for end of transmission
  * @param  str: string to send
  * @retval None
  */
void HW_DBG_Puts(const char *str)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
    while (*str)
 800625c:	e007      	b.n	800626e <HW_DBG_Puts+0x1a>
    {
    	HW_DBG_Put(*str);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff ffdc 	bl	8006220 <HW_DBG_Put>
        str++;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3301      	adds	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
  * @param  str: string to send
  * @retval None
  */
void HW_DBG_Puts(const char *str)
{
    while (*str)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f3      	bne.n	800625e <HW_DBG_Puts+0xa>
    {
    	HW_DBG_Put(*str);
        str++;
    }
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop

08006280 <HW_DBG_Get>:
  * @brief  Receive a byte from debug UART
  * @param  None
  * @retval Received byte
  */
uint8_t HW_DBG_Get(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
     while (USART_GetFlagStatus(DBG_COM, USART_FLAG_RXNE) == RESET);
 8006284:	bf00      	nop
 8006286:	2120      	movs	r1, #32
 8006288:	4806      	ldr	r0, [pc, #24]	; (80062a4 <HW_DBG_Get+0x24>)
 800628a:	f7fc fdbb 	bl	8002e04 <USART_GetFlagStatus>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f8      	beq.n	8006286 <HW_DBG_Get+0x6>
        return (uint8_t) USART_ReceiveData(DBG_COM);
 8006294:	4803      	ldr	r0, [pc, #12]	; (80062a4 <HW_DBG_Get+0x24>)
 8006296:	f7fc fda5 	bl	8002de4 <USART_ReceiveData>
 800629a:	4603      	mov	r3, r0
 800629c:	b2db      	uxtb	r3, r3
}
 800629e:	4618      	mov	r0, r3
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40011000 	.word	0x40011000

080062a8 <HW_Digital_Input_Init>:
  * @brief  Initialize the digital inputs
  * @param  None
  * @retval None
  */
void HW_Digital_Input_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable Port Clock */
	SW1_GPIO_CLK_ENABLE();
 80062ae:	2101      	movs	r1, #1
 80062b0:	2004      	movs	r0, #4
 80062b2:	f7fb fd51 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
	SW2_GPIO_CLK_ENABLE();
 80062b6:	2101      	movs	r1, #1
 80062b8:	2004      	movs	r0, #4
 80062ba:	f7fb fd4d 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
	SW3_GPIO_CLK_ENABLE();
 80062be:	2101      	movs	r1, #1
 80062c0:	2010      	movs	r0, #16
 80062c2:	f7fb fd49 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Configure switches as input */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 80062c6:	2300      	movs	r3, #0
 80062c8:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80062ca:	2302      	movs	r3, #2
 80062cc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 80062ce:	2300      	movs	r3, #0
 80062d0:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = SW1_PIN;
 80062d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062d6:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW1_GPIO_PORT, &GPIO_InitStructure);
 80062d8:	463b      	mov	r3, r7
 80062da:	4619      	mov	r1, r3
 80062dc:	485a      	ldr	r0, [pc, #360]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 80062de:	f7fb fa29 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW2_PIN;
 80062e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e6:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW2_GPIO_PORT, &GPIO_InitStructure);
 80062e8:	463b      	mov	r3, r7
 80062ea:	4619      	mov	r1, r3
 80062ec:	4856      	ldr	r0, [pc, #344]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 80062ee:	f7fb fa21 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW3_PIN;
 80062f2:	2302      	movs	r3, #2
 80062f4:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW3_GPIO_PORT, &GPIO_InitStructure);
 80062f6:	463b      	mov	r3, r7
 80062f8:	4619      	mov	r1, r3
 80062fa:	4854      	ldr	r0, [pc, #336]	; (800644c <HW_Digital_Input_Init+0x1a4>)
 80062fc:	f7fb fa1a 	bl	8001734 <GPIO_Init>

    /* Configure end stops as input */
    GPIO_InitStructure.GPIO_Pin = END1_PIN;
 8006300:	2301      	movs	r3, #1
 8006302:	603b      	str	r3, [r7, #0]
    GPIO_Init(END1_GPIO_PORT, &GPIO_InitStructure);
 8006304:	463b      	mov	r3, r7
 8006306:	4619      	mov	r1, r3
 8006308:	484f      	ldr	r0, [pc, #316]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 800630a:	f7fb fa13 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END2_PIN;
 800630e:	2302      	movs	r3, #2
 8006310:	603b      	str	r3, [r7, #0]
    GPIO_Init(END2_GPIO_PORT, &GPIO_InitStructure);
 8006312:	463b      	mov	r3, r7
 8006314:	4619      	mov	r1, r3
 8006316:	484c      	ldr	r0, [pc, #304]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 8006318:	f7fb fa0c 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END3_PIN;
 800631c:	2304      	movs	r3, #4
 800631e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END3_GPIO_PORT, &GPIO_InitStructure);
 8006320:	463b      	mov	r3, r7
 8006322:	4619      	mov	r1, r3
 8006324:	484a      	ldr	r0, [pc, #296]	; (8006450 <HW_Digital_Input_Init+0x1a8>)
 8006326:	f7fb fa05 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END4_PIN;
 800632a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800632e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END4_GPIO_PORT, &GPIO_InitStructure);
 8006330:	463b      	mov	r3, r7
 8006332:	4619      	mov	r1, r3
 8006334:	4846      	ldr	r0, [pc, #280]	; (8006450 <HW_Digital_Input_Init+0x1a8>)
 8006336:	f7fb f9fd 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END5_PIN;
 800633a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END5_GPIO_PORT, &GPIO_InitStructure);
 8006340:	463b      	mov	r3, r7
 8006342:	4619      	mov	r1, r3
 8006344:	4843      	ldr	r0, [pc, #268]	; (8006454 <HW_Digital_Input_Init+0x1ac>)
 8006346:	f7fb f9f5 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800634a:	2301      	movs	r3, #1
 800634c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Pin = END6_PIN;
 800634e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006352:	603b      	str	r3, [r7, #0]
    GPIO_Init(END6_GPIO_PORT, &GPIO_InitStructure);
 8006354:	463b      	mov	r3, r7
 8006356:	4619      	mov	r1, r3
 8006358:	483b      	ldr	r0, [pc, #236]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 800635a:	f7fb f9eb 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END7_PIN;
 800635e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006362:	603b      	str	r3, [r7, #0]
    GPIO_Init(END7_GPIO_PORT, &GPIO_InitStructure);
 8006364:	463b      	mov	r3, r7
 8006366:	4619      	mov	r1, r3
 8006368:	4837      	ldr	r0, [pc, #220]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 800636a:	f7fb f9e3 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 800636e:	2300      	movs	r3, #0
 8006370:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8006372:	2302      	movs	r3, #2
 8006374:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = END8_PIN;
 8006376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800637a:	603b      	str	r3, [r7, #0]
    GPIO_Init(END8_GPIO_PORT, &GPIO_InitStructure);
 800637c:	463b      	mov	r3, r7
 800637e:	4619      	mov	r1, r3
 8006380:	4831      	ldr	r0, [pc, #196]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 8006382:	f7fb f9d7 	bl	8001734 <GPIO_Init>

    /* Configure end industrial sensors as input */
    GPIO_InitStructure.GPIO_Pin = IND1_PIN;
 8006386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND1_GPIO_PORT, &GPIO_InitStructure);
 800638c:	463b      	mov	r3, r7
 800638e:	4619      	mov	r1, r3
 8006390:	4831      	ldr	r0, [pc, #196]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 8006392:	f7fb f9cf 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND2_PIN;
 8006396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800639a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND2_GPIO_PORT, &GPIO_InitStructure);
 800639c:	463b      	mov	r3, r7
 800639e:	4619      	mov	r1, r3
 80063a0:	482d      	ldr	r0, [pc, #180]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 80063a2:	f7fb f9c7 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND3_PIN;
 80063a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063aa:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND3_GPIO_PORT, &GPIO_InitStructure);
 80063ac:	463b      	mov	r3, r7
 80063ae:	4619      	mov	r1, r3
 80063b0:	4829      	ldr	r0, [pc, #164]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 80063b2:	f7fb f9bf 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND4_PIN;
 80063b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ba:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND4_GPIO_PORT, &GPIO_InitStructure);
 80063bc:	463b      	mov	r3, r7
 80063be:	4619      	mov	r1, r3
 80063c0:	4825      	ldr	r0, [pc, #148]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 80063c2:	f7fb f9b7 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND5_PIN;
 80063c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ca:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND5_GPIO_PORT, &GPIO_InitStructure);
 80063cc:	463b      	mov	r3, r7
 80063ce:	4619      	mov	r1, r3
 80063d0:	4821      	ldr	r0, [pc, #132]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 80063d2:	f7fb f9af 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND6_PIN;
 80063d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063da:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND6_GPIO_PORT, &GPIO_InitStructure);
 80063dc:	463b      	mov	r3, r7
 80063de:	4619      	mov	r1, r3
 80063e0:	481d      	ldr	r0, [pc, #116]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 80063e2:	f7fb f9a7 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND7_PIN;
 80063e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ea:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND7_GPIO_PORT, &GPIO_InitStructure);
 80063ec:	463b      	mov	r3, r7
 80063ee:	4619      	mov	r1, r3
 80063f0:	4819      	ldr	r0, [pc, #100]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 80063f2:	f7fb f99f 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND8_PIN;
 80063f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063fa:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND8_GPIO_PORT, &GPIO_InitStructure);
 80063fc:	463b      	mov	r3, r7
 80063fe:	4619      	mov	r1, r3
 8006400:	4815      	ldr	r0, [pc, #84]	; (8006458 <HW_Digital_Input_Init+0x1b0>)
 8006402:	f7fb f997 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND9_PIN;
 8006406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800640a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND9_GPIO_PORT, &GPIO_InitStructure);
 800640c:	463b      	mov	r3, r7
 800640e:	4619      	mov	r1, r3
 8006410:	480f      	ldr	r0, [pc, #60]	; (8006450 <HW_Digital_Input_Init+0x1a8>)
 8006412:	f7fb f98f 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND10_PIN;
 8006416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800641a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND10_GPIO_PORT, &GPIO_InitStructure);
 800641c:	463b      	mov	r3, r7
 800641e:	4619      	mov	r1, r3
 8006420:	480b      	ldr	r0, [pc, #44]	; (8006450 <HW_Digital_Input_Init+0x1a8>)
 8006422:	f7fb f987 	bl	8001734 <GPIO_Init>

	GPIO_WriteBit((GPIO_TypeDef*) END6_GPIO_PORT, END6_PIN, Bit_SET);
 8006426:	2201      	movs	r2, #1
 8006428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800642c:	4806      	ldr	r0, [pc, #24]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 800642e:	f7fb fa0f 	bl	8001850 <GPIO_WriteBit>
	GPIO_WriteBit((GPIO_TypeDef*) END7_GPIO_PORT, END7_PIN, Bit_SET);
 8006432:	2201      	movs	r2, #1
 8006434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006438:	4803      	ldr	r0, [pc, #12]	; (8006448 <HW_Digital_Input_Init+0x1a0>)
 800643a:	f7fb fa09 	bl	8001850 <GPIO_WriteBit>
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40020800 	.word	0x40020800
 800644c:	40021000 	.word	0x40021000
 8006450:	40020400 	.word	0x40020400
 8006454:	40020000 	.word	0x40020000
 8006458:	40020c00 	.word	0x40020c00

0800645c <HW_DSV_Init>:
  * @brief  Initialize the DSV UART
  * @param  None
  * @retval None
  */
void HW_DSV_Init(USART_InitTypeDef * USART_InitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable TXRX Clock */
    DSV_TXRX_GPIO_CLK_ENABLE();
 8006464:	2101      	movs	r1, #1
 8006466:	2002      	movs	r0, #2
 8006468:	f7fb fc76 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Enable DSV USART clock */
    DSV_CLK_ENABLE();
 800646c:	2101      	movs	r1, #1
 800646e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006472:	f7fb fc91 	bl	8001d98 <RCC_APB1PeriphClockCmd>

    /* Configure USART TXRX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DSV_TXRX_PIN;
 8006476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800647a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800647c:	2302      	movs	r3, #2
 800647e:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 8006480:	2300      	movs	r3, #0
 8006482:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8006484:	2301      	movs	r3, #1
 8006486:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DSV_TXRX_GPIO_PORT, &GPIO_InitStructure);
 8006488:	f107 0318 	add.w	r3, r7, #24
 800648c:	4619      	mov	r1, r3
 800648e:	4812      	ldr	r0, [pc, #72]	; (80064d8 <HW_DSV_Init+0x7c>)
 8006490:	f7fb f950 	bl	8001734 <GPIO_Init>


    /* Connect Alternate functions */
    GPIO_PinAFConfig(DSV_TXRX_GPIO_PORT,  DSV_TXRX_PIN_SOURCE,  DSV_TXRX_AF);
 8006494:	2207      	movs	r2, #7
 8006496:	210a      	movs	r1, #10
 8006498:	480f      	ldr	r0, [pc, #60]	; (80064d8 <HW_DSV_Init+0x7c>)
 800649a:	f7fb f9f3 	bl	8001884 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DSV_COM, USART_InitStruct);
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	480e      	ldr	r0, [pc, #56]	; (80064dc <HW_DSV_Init+0x80>)
 80064a2:	f7fc fb7b 	bl	8002b9c <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fc fc56 	bl	8002d5c <USART_ClockStructInit>
    USART_ClockInit(DSV_COM, &USART_ClockInitStruct);
 80064b0:	f107 0308 	add.w	r3, r7, #8
 80064b4:	4619      	mov	r1, r3
 80064b6:	4809      	ldr	r0, [pc, #36]	; (80064dc <HW_DSV_Init+0x80>)
 80064b8:	f7fc fc2a 	bl	8002d10 <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DSV_COM, ENABLE);
 80064bc:	2101      	movs	r1, #1
 80064be:	4807      	ldr	r0, [pc, #28]	; (80064dc <HW_DSV_Init+0x80>)
 80064c0:	f7fc fc62 	bl	8002d88 <USART_Cmd>

	xl_320_init(XL_320_TX_ONLY);
 80064c4:	2001      	movs	r0, #1
 80064c6:	f000 fe0d 	bl	80070e4 <xl_320_init>
	xl_320_set_hw_send(HW_DSV_Put);
 80064ca:	4805      	ldr	r0, [pc, #20]	; (80064e0 <HW_DSV_Init+0x84>)
 80064cc:	f000 fe28 	bl	8007120 <xl_320_set_hw_send>
}
 80064d0:	bf00      	nop
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40020400 	.word	0x40020400
 80064dc:	40004800 	.word	0x40004800
 80064e0:	080064e5 	.word	0x080064e5

080064e4 <HW_DSV_Put>:
  * @brief  Send a byte through DSV UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DSV_Put(uint8_t ch)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DSV_COM, (uint8_t) ch);
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	4807      	ldr	r0, [pc, #28]	; (8006514 <HW_DSV_Put+0x30>)
 80064f6:	f7fc fc63 	bl	8002dc0 <USART_SendData>
      while(USART_GetFlagStatus(DSV_COM, USART_FLAG_TC) == RESET);
 80064fa:	bf00      	nop
 80064fc:	2140      	movs	r1, #64	; 0x40
 80064fe:	4805      	ldr	r0, [pc, #20]	; (8006514 <HW_DSV_Put+0x30>)
 8006500:	f7fc fc80 	bl	8002e04 <USART_GetFlagStatus>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f8      	beq.n	80064fc <HW_DSV_Put+0x18>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40004800 	.word	0x40004800

08006518 <HW_ENC_Init>:

static int32_t encoder1_Value, encoder2_Value;
static int16_t encoder1_Old, encoder2_Old;

void HW_ENC_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Enable GPIO Clocks */
    ENC1_A_GPIO_CLK_ENABLE();
 800651e:	2101      	movs	r1, #1
 8006520:	2002      	movs	r0, #2
 8006522:	f7fb fc19 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ENC1_B_GPIO_CLK_ENABLE();
 8006526:	2101      	movs	r1, #1
 8006528:	2002      	movs	r0, #2
 800652a:	f7fb fc15 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ENC2_A_GPIO_CLK_ENABLE();
 800652e:	2101      	movs	r1, #1
 8006530:	2002      	movs	r0, #2
 8006532:	f7fb fc11 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ENC2_B_GPIO_CLK_ENABLE();
 8006536:	2101      	movs	r1, #1
 8006538:	2002      	movs	r0, #2
 800653a:	f7fb fc0d 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Configure GPIOs */
    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 800653e:	2302      	movs	r3, #2
 8006540:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 8006542:	2300      	movs	r3, #0
 8006544:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 8006546:	2300      	movs	r3, #0
 8006548:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 800654a:	2302      	movs	r3, #2
 800654c:	717b      	strb	r3, [r7, #5]

    GPIO_InitStruct.GPIO_Pin = ENC1_A_PIN;
 800654e:	2310      	movs	r3, #16
 8006550:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_A_GPIO_PORT, ENC1_A_PIN_SOURCE, ENC1_A_AF);
 8006552:	2202      	movs	r2, #2
 8006554:	2104      	movs	r1, #4
 8006556:	482c      	ldr	r0, [pc, #176]	; (8006608 <HW_ENC_Init+0xf0>)
 8006558:	f7fb f994 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_A_GPIO_PORT, &GPIO_InitStruct);
 800655c:	463b      	mov	r3, r7
 800655e:	4619      	mov	r1, r3
 8006560:	4829      	ldr	r0, [pc, #164]	; (8006608 <HW_ENC_Init+0xf0>)
 8006562:	f7fb f8e7 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC1_B_PIN;
 8006566:	2320      	movs	r3, #32
 8006568:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_B_GPIO_PORT, ENC1_B_PIN_SOURCE, ENC1_B_AF);
 800656a:	2202      	movs	r2, #2
 800656c:	2105      	movs	r1, #5
 800656e:	4826      	ldr	r0, [pc, #152]	; (8006608 <HW_ENC_Init+0xf0>)
 8006570:	f7fb f988 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_B_GPIO_PORT, &GPIO_InitStruct);
 8006574:	463b      	mov	r3, r7
 8006576:	4619      	mov	r1, r3
 8006578:	4823      	ldr	r0, [pc, #140]	; (8006608 <HW_ENC_Init+0xf0>)
 800657a:	f7fb f8db 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_A_PIN;
 800657e:	2340      	movs	r3, #64	; 0x40
 8006580:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_A_GPIO_PORT, ENC2_A_PIN_SOURCE, ENC2_A_AF);
 8006582:	2202      	movs	r2, #2
 8006584:	2106      	movs	r1, #6
 8006586:	4820      	ldr	r0, [pc, #128]	; (8006608 <HW_ENC_Init+0xf0>)
 8006588:	f7fb f97c 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_A_GPIO_PORT, &GPIO_InitStruct);
 800658c:	463b      	mov	r3, r7
 800658e:	4619      	mov	r1, r3
 8006590:	481d      	ldr	r0, [pc, #116]	; (8006608 <HW_ENC_Init+0xf0>)
 8006592:	f7fb f8cf 	bl	8001734 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_B_PIN;
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_B_GPIO_PORT, ENC2_B_PIN_SOURCE, ENC2_B_AF);
 800659a:	2202      	movs	r2, #2
 800659c:	2107      	movs	r1, #7
 800659e:	481a      	ldr	r0, [pc, #104]	; (8006608 <HW_ENC_Init+0xf0>)
 80065a0:	f7fb f970 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_B_GPIO_PORT, &GPIO_InitStruct);
 80065a4:	463b      	mov	r3, r7
 80065a6:	4619      	mov	r1, r3
 80065a8:	4817      	ldr	r0, [pc, #92]	; (8006608 <HW_ENC_Init+0xf0>)
 80065aa:	f7fb f8c3 	bl	8001734 <GPIO_Init>

    /* Enable Quadrature Encoder timer clocks */
    ENC1_TIM_CLK_ENABLE();
 80065ae:	2101      	movs	r1, #1
 80065b0:	2002      	movs	r0, #2
 80065b2:	f7fb fbf1 	bl	8001d98 <RCC_APB1PeriphClockCmd>
    ENC2_TIM_CLK_ENABLE();
 80065b6:	2101      	movs	r1, #1
 80065b8:	2004      	movs	r0, #4
 80065ba:	f7fb fbed 	bl	8001d98 <RCC_APB1PeriphClockCmd>

    /* Configure Quadrature Encoder Timers */
    TIM_EncoderInterfaceConfig(ENC1_TIM,
 80065be:	2300      	movs	r3, #0
 80065c0:	2200      	movs	r2, #0
 80065c2:	2103      	movs	r1, #3
 80065c4:	4811      	ldr	r0, [pc, #68]	; (800660c <HW_ENC_Init+0xf4>)
 80065c6:	f7fc f835 	bl	8002634 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC1_TIM, 0xFFFFFFFF);
 80065ca:	f04f 31ff 	mov.w	r1, #4294967295
 80065ce:	480f      	ldr	r0, [pc, #60]	; (800660c <HW_ENC_Init+0xf4>)
 80065d0:	f7fb fd78 	bl	80020c4 <TIM_SetAutoreload>

    TIM_EncoderInterfaceConfig(ENC2_TIM,
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	2103      	movs	r1, #3
 80065da:	480d      	ldr	r0, [pc, #52]	; (8006610 <HW_ENC_Init+0xf8>)
 80065dc:	f7fc f82a 	bl	8002634 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC2_TIM, 0xFFFFFFFF);
 80065e0:	f04f 31ff 	mov.w	r1, #4294967295
 80065e4:	480a      	ldr	r0, [pc, #40]	; (8006610 <HW_ENC_Init+0xf8>)
 80065e6:	f7fb fd6d 	bl	80020c4 <TIM_SetAutoreload>

    /* Cleanup timers */
    HW_ENC_ResetChannels();
 80065ea:	f000 f813 	bl	8006614 <HW_ENC_ResetChannels>

    /* Enable Quadrature Encoders */
    TIM_Cmd(ENC1_TIM, ENABLE);
 80065ee:	2101      	movs	r1, #1
 80065f0:	4806      	ldr	r0, [pc, #24]	; (800660c <HW_ENC_Init+0xf4>)
 80065f2:	f7fb fd75 	bl	80020e0 <TIM_Cmd>
    TIM_Cmd(ENC2_TIM, ENABLE);
 80065f6:	2101      	movs	r1, #1
 80065f8:	4805      	ldr	r0, [pc, #20]	; (8006610 <HW_ENC_Init+0xf8>)
 80065fa:	f7fb fd71 	bl	80020e0 <TIM_Cmd>

}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40020400 	.word	0x40020400
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800

08006614 <HW_ENC_ResetChannels>:
    }

}

void HW_ENC_ResetChannels(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
    ENC1_TIM->CNT = 0x00000000 ;
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <HW_ENC_ResetChannels+0x1c>)
 800661a:	2200      	movs	r2, #0
 800661c:	625a      	str	r2, [r3, #36]	; 0x24
    ENC2_TIM->CNT = 0x00000000 ;
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HW_ENC_ResetChannels+0x20>)
 8006620:	2200      	movs	r2, #0
 8006622:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800

08006638 <HW_HMI_Init>:
 */

#include "blueboard.h"

void HW_HMI_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08c      	sub	sp, #48	; 0x30
 800663c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef SPI_InitStruct;

    /* Enable GPIOs Clock */
    HMI_CSN_GPIO_CLK_ENABLE();
 800663e:	2101      	movs	r1, #1
 8006640:	2010      	movs	r0, #16
 8006642:	f7fb fb89 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    HMI_SCK_GPIO_CLK_ENABLE();
 8006646:	2101      	movs	r1, #1
 8006648:	2010      	movs	r0, #16
 800664a:	f7fb fb85 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    HMI_MOSI_GPIO_CLK_ENABLE();
 800664e:	2101      	movs	r1, #1
 8006650:	2010      	movs	r0, #16
 8006652:	f7fb fb81 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    HMI_MISO_GPIO_CLK_ENABLE();
 8006656:	2101      	movs	r1, #1
 8006658:	2010      	movs	r0, #16
 800665a:	f7fb fb7d 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_IN_GPIO_CLK_ENABLE();
 800665e:	2101      	movs	r1, #1
 8006660:	2010      	movs	r0, #16
 8006662:	f7fb fb79 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_OUT_GPIO_CLK_ENABLE();
 8006666:	2101      	movs	r1, #1
 8006668:	2004      	movs	r0, #4
 800666a:	f7fb fb75 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Enable Control Interface SPI clock */
    HMI_CLK_ENABLE();
 800666e:	2101      	movs	r1, #1
 8006670:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006674:	f7fb fbb0 	bl	8001dd8 <RCC_APB2PeriphClockCmd>

    /* Configure HMI_CSN as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 8006678:	2310      	movs	r3, #16
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800667c:	2300      	movs	r3, #0
 800667e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006682:	2302      	movs	r3, #2
 8006684:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 8006688:	2303      	movs	r3, #3
 800668a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800668e:	2300      	movs	r3, #0
 8006690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 8006694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006698:	4619      	mov	r1, r3
 800669a:	4842      	ldr	r0, [pc, #264]	; (80067a4 <HW_HMI_Init+0x16c>)
 800669c:	f7fb f84a 	bl	8001734 <GPIO_Init>

    /* Configure HMI_SCK as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_SCK_PIN;
 80066a0:	2304      	movs	r3, #4
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80066a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066a8:	4619      	mov	r1, r3
 80066aa:	483e      	ldr	r0, [pc, #248]	; (80067a4 <HW_HMI_Init+0x16c>)
 80066ac:	f7fb f842 	bl	8001734 <GPIO_Init>

    /* Configure HMI_MOSI as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MOSI_PIN;
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80066b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066b8:	4619      	mov	r1, r3
 80066ba:	483a      	ldr	r0, [pc, #232]	; (80067a4 <HW_HMI_Init+0x16c>)
 80066bc:	f7fb f83a 	bl	8001734 <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MISO_PIN;
 80066c0:	2320      	movs	r3, #32
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80066c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066c8:	4619      	mov	r1, r3
 80066ca:	4836      	ldr	r0, [pc, #216]	; (80067a4 <HW_HMI_Init+0x16c>)
 80066cc:	f7fb f832 	bl	8001734 <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(HMI_SCK_GPIO_PORT,   HMI_SCK_PIN_SOURCE,   HMI_SCK_AF);
 80066d0:	2205      	movs	r2, #5
 80066d2:	2102      	movs	r1, #2
 80066d4:	4833      	ldr	r0, [pc, #204]	; (80067a4 <HW_HMI_Init+0x16c>)
 80066d6:	f7fb f8d5 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MOSI_GPIO_PORT,  HMI_MOSI_PIN_SOURCE,  HMI_MOSI_AF);
 80066da:	2205      	movs	r2, #5
 80066dc:	2106      	movs	r1, #6
 80066de:	4831      	ldr	r0, [pc, #196]	; (80067a4 <HW_HMI_Init+0x16c>)
 80066e0:	f7fb f8d0 	bl	8001884 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MISO_GPIO_PORT,  HMI_MISO_PIN_SOURCE,  HMI_MISO_AF);
 80066e4:	2205      	movs	r2, #5
 80066e6:	2105      	movs	r1, #5
 80066e8:	482e      	ldr	r0, [pc, #184]	; (80067a4 <HW_HMI_Init+0x16c>)
 80066ea:	f7fb f8cb 	bl	8001884 <GPIO_PinAFConfig>

    /* Configure HMI_CSN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 80066ee:	2310      	movs	r3, #16
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 80066f8:	2303      	movs	r3, #3
 80066fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 8006704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006708:	4619      	mov	r1, r3
 800670a:	4826      	ldr	r0, [pc, #152]	; (80067a4 <HW_HMI_Init+0x16c>)
 800670c:	f7fb f812 	bl	8001734 <GPIO_Init>

    /* Configure HMI_IRQ_IN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_IN_PIN;
 8006710:	2308      	movs	r3, #8
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006714:	2300      	movs	r3, #0
 8006716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; /* "IN" for HMI, "OUT" for master (us) */
 800671a:	2301      	movs	r3, #1
 800671c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_IN_GPIO_PORT, &GPIO_InitStructure);
 8006720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006724:	4619      	mov	r1, r3
 8006726:	481f      	ldr	r0, [pc, #124]	; (80067a4 <HW_HMI_Init+0x16c>)
 8006728:	f7fb f804 	bl	8001734 <GPIO_Init>

    /* Configure HMI_IRQ_OUT as Digital Input */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_OUT_PIN;
 800672c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006732:	2300      	movs	r3, #0
 8006734:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; /* "OUT" for HMI, "IN" for master (us) */
 8006738:	2300      	movs	r3, #0
 800673a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_OUT_GPIO_PORT, &GPIO_InitStructure);
 800673e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006742:	4619      	mov	r1, r3
 8006744:	4818      	ldr	r0, [pc, #96]	; (80067a8 <HW_HMI_Init+0x170>)
 8006746:	f7fa fff5 	bl	8001734 <GPIO_Init>

    /* Default SPI Configuration */
    SPI_StructInit(&SPI_InitStruct);
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fb fb9d 	bl	8001e8c <SPI_StructInit>

    /* Configure custom fields */
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8006752:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006756:	60bb      	str	r3, [r7, #8]
    SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8006758:	2300      	movs	r3, #0
 800675a:	607b      	str	r3, [r7, #4]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; /* TBC */
 800675c:	2320      	movs	r3, #32
 800675e:	61fb      	str	r3, [r7, #28]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
 8006760:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006764:	60fb      	str	r3, [r7, #12]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // Internal NSS mgmt and pull internal NSS high;
 800676e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006772:	61bb      	str	r3, [r7, #24]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8006774:	2300      	movs	r3, #0
 8006776:	623b      	str	r3, [r7, #32]

    /* Configure SPI module */
    SPI_Init(HMI_COM, &SPI_InitStruct);
 8006778:	1d3b      	adds	r3, r7, #4
 800677a:	4619      	mov	r1, r3
 800677c:	480b      	ldr	r0, [pc, #44]	; (80067ac <HW_HMI_Init+0x174>)
 800677e:	f7fb fbab 	bl	8001ed8 <SPI_Init>
    SPI_SSOutputCmd(HMI_COM, ENABLE);
 8006782:	2101      	movs	r1, #1
 8006784:	4809      	ldr	r0, [pc, #36]	; (80067ac <HW_HMI_Init+0x174>)
 8006786:	f7fb fc17 	bl	8001fb8 <SPI_SSOutputCmd>

    /* Enable SPI module */
    HMI_CSN_WRITE(HMI_FRAME_IDLE);
 800678a:	2201      	movs	r2, #1
 800678c:	2110      	movs	r1, #16
 800678e:	4805      	ldr	r0, [pc, #20]	; (80067a4 <HW_HMI_Init+0x16c>)
 8006790:	f7fb f85e 	bl	8001850 <GPIO_WriteBit>
    SPI_Cmd(HMI_COM, ENABLE);
 8006794:	2101      	movs	r1, #1
 8006796:	4805      	ldr	r0, [pc, #20]	; (80067ac <HW_HMI_Init+0x174>)
 8006798:	f7fb fbf2 	bl	8001f80 <SPI_Cmd>

}
 800679c:	bf00      	nop
 800679e:	3730      	adds	r7, #48	; 0x30
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40021000 	.word	0x40021000
 80067a8:	40020800 	.word	0x40020800
 80067ac:	40013400 	.word	0x40013400

080067b0 <HW_LED_Init>:
  * @brief  Configure LEDs GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_LED_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    LEDR_GPIO_CLK_ENABLE();
 80067b6:	2101      	movs	r1, #1
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fb facd 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    LEDG_GPIO_CLK_ENABLE();
 80067be:	2101      	movs	r1, #1
 80067c0:	2008      	movs	r0, #8
 80067c2:	f7fb fac9 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    LEDB_GPIO_CLK_ENABLE();
 80067c6:	2101      	movs	r1, #1
 80067c8:	2008      	movs	r0, #8
 80067ca:	f7fb fac5 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all LEDs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 80067ce:	2301      	movs	r3, #1
 80067d0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80067d2:	2300      	movs	r3, #0
 80067d4:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 80067da:	2302      	movs	r3, #2
 80067dc:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = LEDR_PIN;
 80067de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e2:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDR_GPIO_PORT, &GPIO_InitStructure);
 80067e4:	463b      	mov	r3, r7
 80067e6:	4619      	mov	r1, r3
 80067e8:	4812      	ldr	r0, [pc, #72]	; (8006834 <HW_LED_Init+0x84>)
 80067ea:	f7fa ffa3 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDG_PIN;
 80067ee:	2304      	movs	r3, #4
 80067f0:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDG_GPIO_PORT, &GPIO_InitStructure);
 80067f2:	463b      	mov	r3, r7
 80067f4:	4619      	mov	r1, r3
 80067f6:	4810      	ldr	r0, [pc, #64]	; (8006838 <HW_LED_Init+0x88>)
 80067f8:	f7fa ff9c 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDB_PIN;
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDB_GPIO_PORT, &GPIO_InitStructure);
 8006800:	463b      	mov	r3, r7
 8006802:	4619      	mov	r1, r3
 8006804:	480c      	ldr	r0, [pc, #48]	; (8006838 <HW_LED_Init+0x88>)
 8006806:	f7fa ff95 	bl	8001734 <GPIO_Init>

    /* Default state: LEDs OFF */
    LEDR_WRITE(LEDx_OFF);
 800680a:	2201      	movs	r2, #1
 800680c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006810:	4808      	ldr	r0, [pc, #32]	; (8006834 <HW_LED_Init+0x84>)
 8006812:	f7fb f81d 	bl	8001850 <GPIO_WriteBit>
    LEDG_WRITE(LEDx_OFF);
 8006816:	2201      	movs	r2, #1
 8006818:	2104      	movs	r1, #4
 800681a:	4807      	ldr	r0, [pc, #28]	; (8006838 <HW_LED_Init+0x88>)
 800681c:	f7fb f818 	bl	8001850 <GPIO_WriteBit>
    LEDB_WRITE(LEDx_OFF);
 8006820:	2201      	movs	r2, #1
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	4804      	ldr	r0, [pc, #16]	; (8006838 <HW_LED_Init+0x88>)
 8006826:	f7fb f813 	bl	8001850 <GPIO_WriteBit>
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40020000 	.word	0x40020000
 8006838:	40020c00 	.word	0x40020c00

0800683c <HW_LED_SetColor>:
  * @brief  Setup a new RGB Led color
  * @param  color: Color to setup
  * @retval None
  */
void HW_LED_SetColor(HW_LED_ColorTypeDef color)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
    switch(color)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	3b01      	subs	r3, #1
 800684a:	2b07      	cmp	r3, #7
 800684c:	f200 808b 	bhi.w	8006966 <HW_LED_SetColor+0x12a>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <HW_LED_SetColor+0x1c>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006879 	.word	0x08006879
 800685c:	0800689b 	.word	0x0800689b
 8006860:	080068bd 	.word	0x080068bd
 8006864:	080068df 	.word	0x080068df
 8006868:	08006901 	.word	0x08006901
 800686c:	08006967 	.word	0x08006967
 8006870:	08006923 	.word	0x08006923
 8006874:	08006945 	.word	0x08006945
    {
    case HW_LED_RED:
        LEDR_WRITE(LEDx_ON);
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800687e:	4844      	ldr	r0, [pc, #272]	; (8006990 <HW_LED_SetColor+0x154>)
 8006880:	f7fa ffe6 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8006884:	2201      	movs	r2, #1
 8006886:	2104      	movs	r1, #4
 8006888:	4842      	ldr	r0, [pc, #264]	; (8006994 <HW_LED_SetColor+0x158>)
 800688a:	f7fa ffe1 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 800688e:	2201      	movs	r2, #1
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	4840      	ldr	r0, [pc, #256]	; (8006994 <HW_LED_SetColor+0x158>)
 8006894:	f7fa ffdc 	bl	8001850 <GPIO_WriteBit>
        break;
 8006898:	e076      	b.n	8006988 <HW_LED_SetColor+0x14c>
    case HW_LED_GREEN:
        LEDR_WRITE(LEDx_OFF);
 800689a:	2201      	movs	r2, #1
 800689c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a0:	483b      	ldr	r0, [pc, #236]	; (8006990 <HW_LED_SetColor+0x154>)
 80068a2:	f7fa ffd5 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2104      	movs	r1, #4
 80068aa:	483a      	ldr	r0, [pc, #232]	; (8006994 <HW_LED_SetColor+0x158>)
 80068ac:	f7fa ffd0 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 80068b0:	2201      	movs	r2, #1
 80068b2:	2180      	movs	r1, #128	; 0x80
 80068b4:	4837      	ldr	r0, [pc, #220]	; (8006994 <HW_LED_SetColor+0x158>)
 80068b6:	f7fa ffcb 	bl	8001850 <GPIO_WriteBit>
        break;
 80068ba:	e065      	b.n	8006988 <HW_LED_SetColor+0x14c>
    case HW_LED_BLUE:
        LEDR_WRITE(LEDx_OFF);
 80068bc:	2201      	movs	r2, #1
 80068be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068c2:	4833      	ldr	r0, [pc, #204]	; (8006990 <HW_LED_SetColor+0x154>)
 80068c4:	f7fa ffc4 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 80068c8:	2201      	movs	r2, #1
 80068ca:	2104      	movs	r1, #4
 80068cc:	4831      	ldr	r0, [pc, #196]	; (8006994 <HW_LED_SetColor+0x158>)
 80068ce:	f7fa ffbf 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 80068d2:	2200      	movs	r2, #0
 80068d4:	2180      	movs	r1, #128	; 0x80
 80068d6:	482f      	ldr	r0, [pc, #188]	; (8006994 <HW_LED_SetColor+0x158>)
 80068d8:	f7fa ffba 	bl	8001850 <GPIO_WriteBit>
        break;
 80068dc:	e054      	b.n	8006988 <HW_LED_SetColor+0x14c>
    case HW_LED_CYAN:
        LEDR_WRITE(LEDx_OFF);
 80068de:	2201      	movs	r2, #1
 80068e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068e4:	482a      	ldr	r0, [pc, #168]	; (8006990 <HW_LED_SetColor+0x154>)
 80068e6:	f7fa ffb3 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2104      	movs	r1, #4
 80068ee:	4829      	ldr	r0, [pc, #164]	; (8006994 <HW_LED_SetColor+0x158>)
 80068f0:	f7fa ffae 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 80068f4:	2200      	movs	r2, #0
 80068f6:	2180      	movs	r1, #128	; 0x80
 80068f8:	4826      	ldr	r0, [pc, #152]	; (8006994 <HW_LED_SetColor+0x158>)
 80068fa:	f7fa ffa9 	bl	8001850 <GPIO_WriteBit>
        break;
 80068fe:	e043      	b.n	8006988 <HW_LED_SetColor+0x14c>
    case HW_LED_YELLOW:
        LEDR_WRITE(LEDx_ON);
 8006900:	2200      	movs	r2, #0
 8006902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006906:	4822      	ldr	r0, [pc, #136]	; (8006990 <HW_LED_SetColor+0x154>)
 8006908:	f7fa ffa2 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 800690c:	2200      	movs	r2, #0
 800690e:	2104      	movs	r1, #4
 8006910:	4820      	ldr	r0, [pc, #128]	; (8006994 <HW_LED_SetColor+0x158>)
 8006912:	f7fa ff9d 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8006916:	2201      	movs	r2, #1
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	481e      	ldr	r0, [pc, #120]	; (8006994 <HW_LED_SetColor+0x158>)
 800691c:	f7fa ff98 	bl	8001850 <GPIO_WriteBit>
        break;
 8006920:	e032      	b.n	8006988 <HW_LED_SetColor+0x14c>
    case HW_LED_MAGENTA:
        LEDR_WRITE(LEDx_ON);
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006928:	4819      	ldr	r0, [pc, #100]	; (8006990 <HW_LED_SetColor+0x154>)
 800692a:	f7fa ff91 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 800692e:	2201      	movs	r2, #1
 8006930:	2104      	movs	r1, #4
 8006932:	4818      	ldr	r0, [pc, #96]	; (8006994 <HW_LED_SetColor+0x158>)
 8006934:	f7fa ff8c 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8006938:	2200      	movs	r2, #0
 800693a:	2180      	movs	r1, #128	; 0x80
 800693c:	4815      	ldr	r0, [pc, #84]	; (8006994 <HW_LED_SetColor+0x158>)
 800693e:	f7fa ff87 	bl	8001850 <GPIO_WriteBit>
        break;
 8006942:	e021      	b.n	8006988 <HW_LED_SetColor+0x14c>
    case HW_LED_WHITE:
        LEDR_WRITE(LEDx_ON);
 8006944:	2200      	movs	r2, #0
 8006946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800694a:	4811      	ldr	r0, [pc, #68]	; (8006990 <HW_LED_SetColor+0x154>)
 800694c:	f7fa ff80 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8006950:	2200      	movs	r2, #0
 8006952:	2104      	movs	r1, #4
 8006954:	480f      	ldr	r0, [pc, #60]	; (8006994 <HW_LED_SetColor+0x158>)
 8006956:	f7fa ff7b 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 800695a:	2200      	movs	r2, #0
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	480d      	ldr	r0, [pc, #52]	; (8006994 <HW_LED_SetColor+0x158>)
 8006960:	f7fa ff76 	bl	8001850 <GPIO_WriteBit>
        break;
 8006964:	e010      	b.n	8006988 <HW_LED_SetColor+0x14c>

    default:
    case HW_LED_OFF:
        LEDR_WRITE(LEDx_OFF);
 8006966:	2201      	movs	r2, #1
 8006968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800696c:	4808      	ldr	r0, [pc, #32]	; (8006990 <HW_LED_SetColor+0x154>)
 800696e:	f7fa ff6f 	bl	8001850 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8006972:	2201      	movs	r2, #1
 8006974:	2104      	movs	r1, #4
 8006976:	4807      	ldr	r0, [pc, #28]	; (8006994 <HW_LED_SetColor+0x158>)
 8006978:	f7fa ff6a 	bl	8001850 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 800697c:	2201      	movs	r2, #1
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	4804      	ldr	r0, [pc, #16]	; (8006994 <HW_LED_SetColor+0x158>)
 8006982:	f7fa ff65 	bl	8001850 <GPIO_WriteBit>
        break;
 8006986:	bf00      	nop

    }

}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40020000 	.word	0x40020000
 8006994:	40020c00 	.word	0x40020c00

08006998 <HW_MON_Init>:
 */

#include "blueboard.h"

void HW_MON_Init(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08c      	sub	sp, #48	; 0x30
 800699c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    ADC_InitTypeDef  ADC_InitStructure;

    /* Enable ADC clock so that we can talk to it */
    MON_CLK_ENABLE();
 800699e:	2101      	movs	r1, #1
 80069a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80069a4:	f7fb fa18 	bl	8001dd8 <RCC_APB2PeriphClockCmd>

    /* Enable GPIO clocks */
    ADC_CEL1_GPIO_CLK_ENABLE();
 80069a8:	2101      	movs	r1, #1
 80069aa:	2004      	movs	r0, #4
 80069ac:	f7fb f9d4 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_CEL2_GPIO_CLK_ENABLE();
 80069b0:	2101      	movs	r1, #1
 80069b2:	2004      	movs	r0, #4
 80069b4:	f7fb f9d0 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_CEL3_GPIO_CLK_ENABLE();
 80069b8:	2101      	movs	r1, #1
 80069ba:	2002      	movs	r0, #2
 80069bc:	f7fb f9cc 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_CEL4_GPIO_CLK_ENABLE();
 80069c0:	2101      	movs	r1, #1
 80069c2:	2002      	movs	r0, #2
 80069c4:	f7fb f9c8 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_IBAT_GPIO_CLK_ENABLE();
 80069c8:	2101      	movs	r1, #1
 80069ca:	2004      	movs	r0, #4
 80069cc:	f7fb f9c4 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_IP1_GPIO_CLK_ENABLE();
 80069d0:	2101      	movs	r1, #1
 80069d2:	2004      	movs	r0, #4
 80069d4:	f7fb f9c0 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_IP2_GPIO_CLK_ENABLE();
 80069d8:	2101      	movs	r1, #1
 80069da:	2001      	movs	r0, #1
 80069dc:	f7fb f9bc 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_IP3_GPIO_CLK_ENABLE();
 80069e0:	2101      	movs	r1, #1
 80069e2:	2001      	movs	r0, #1
 80069e4:	f7fb f9b8 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT1_GPIO_CLK_ENABLE();
 80069e8:	2101      	movs	r1, #1
 80069ea:	2001      	movs	r0, #1
 80069ec:	f7fb f9b4 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT2_GPIO_CLK_ENABLE();
 80069f0:	2101      	movs	r1, #1
 80069f2:	2001      	movs	r0, #1
 80069f4:	f7fb f9b0 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all Analog channels */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 80069f8:	2303      	movs	r3, #3
 80069fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    GPIO_InitStructure.GPIO_Pin = ADC_CEL1_PIN;
 8006a10:	2310      	movs	r3, #16
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL1_GPIO_PORT, &GPIO_InitStructure);
 8006a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4840      	ldr	r0, [pc, #256]	; (8006b1c <HW_MON_Init+0x184>)
 8006a1c:	f7fa fe8a 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL2_PIN;
 8006a20:	2320      	movs	r3, #32
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL2_GPIO_PORT, &GPIO_InitStructure);
 8006a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a28:	4619      	mov	r1, r3
 8006a2a:	483c      	ldr	r0, [pc, #240]	; (8006b1c <HW_MON_Init+0x184>)
 8006a2c:	f7fa fe82 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL3_PIN;
 8006a30:	2301      	movs	r3, #1
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL3_GPIO_PORT, &GPIO_InitStructure);
 8006a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4839      	ldr	r0, [pc, #228]	; (8006b20 <HW_MON_Init+0x188>)
 8006a3c:	f7fa fe7a 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL4_PIN;
 8006a40:	2302      	movs	r3, #2
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL4_GPIO_PORT, &GPIO_InitStructure);
 8006a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4835      	ldr	r0, [pc, #212]	; (8006b20 <HW_MON_Init+0x188>)
 8006a4c:	f7fa fe72 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IBAT_PIN;
 8006a50:	2304      	movs	r3, #4
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IBAT_GPIO_PORT, &GPIO_InitStructure);
 8006a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4830      	ldr	r0, [pc, #192]	; (8006b1c <HW_MON_Init+0x184>)
 8006a5c:	f7fa fe6a 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP1_PIN;
 8006a60:	2308      	movs	r3, #8
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP1_GPIO_PORT, &GPIO_InitStructure);
 8006a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a68:	4619      	mov	r1, r3
 8006a6a:	482c      	ldr	r0, [pc, #176]	; (8006b1c <HW_MON_Init+0x184>)
 8006a6c:	f7fa fe62 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP2_PIN;
 8006a70:	2310      	movs	r3, #16
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP2_GPIO_PORT, &GPIO_InitStructure);
 8006a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a78:	4619      	mov	r1, r3
 8006a7a:	482a      	ldr	r0, [pc, #168]	; (8006b24 <HW_MON_Init+0x18c>)
 8006a7c:	f7fa fe5a 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP3_PIN;
 8006a80:	2320      	movs	r3, #32
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP3_GPIO_PORT, &GPIO_InitStructure);
 8006a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4826      	ldr	r0, [pc, #152]	; (8006b24 <HW_MON_Init+0x18c>)
 8006a8c:	f7fa fe52 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT1_PIN;
 8006a90:	2340      	movs	r3, #64	; 0x40
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT1_GPIO_PORT, &GPIO_InitStructure);
 8006a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4822      	ldr	r0, [pc, #136]	; (8006b24 <HW_MON_Init+0x18c>)
 8006a9c:	f7fa fe4a 	bl	8001734 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT2_PIN;
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT2_GPIO_PORT, &GPIO_InitStructure);
 8006aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	481e      	ldr	r0, [pc, #120]	; (8006b24 <HW_MON_Init+0x18c>)
 8006aac:	f7fa fe42 	bl	8001734 <GPIO_Init>

    /* IMPORTANT: populate default values before use */
    ADC_CommonStructInit(&ADC_CommonInitStruct);
 8006ab0:	f107 0318 	add.w	r3, r7, #24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fa fdd9 	bl	800166c <ADC_CommonStructInit>
    ADC_StructInit(&ADC_InitStructure);
 8006aba:	463b      	mov	r3, r7
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fa fd8d 	bl	80015dc <ADC_StructInit>

    /* PCLK2 is the APB2 clock (96 MHz)
     * ADCCLK = PCLK2/8 = 96/8 = 12 MHz */
    ADC_CommonInitStruct.ADC_Prescaler          = ADC_Prescaler_Div8;
 8006ac2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006ac6:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStruct.ADC_Mode               = ADC_Mode_Independent;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
    ADC_CommonInitStruct.ADC_DMAAccessMode      = ADC_DMAAccessMode_Disabled;
 8006acc:	2300      	movs	r3, #0
 8006ace:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStruct.ADC_TwoSamplingDelay   = ADC_TwoSamplingDelay_5Cycles;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInit(&ADC_CommonInitStruct);
 8006ad4:	f107 0318 	add.w	r3, r7, #24
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fa fd9f 	bl	800161c <ADC_CommonInit>

    /* Actual ADC Configuration */
    ADC_InitStructure.ADC_Resolution            = ADC_Resolution_12b;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	603b      	str	r3, [r7, #0]
    ADC_InitStructure.ADC_ScanConvMode          = DISABLE;//DISABLE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	713b      	strb	r3, [r7, #4]
    ADC_InitStructure.ADC_ContinuousConvMode    = DISABLE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	717b      	strb	r3, [r7, #5]
    ADC_InitStructure.ADC_ExternalTrigConv      = ADC_Software_Start;//// //
 8006aea:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <HW_MON_Init+0x190>)
 8006aec:	60fb      	str	r3, [r7, #12]
    ADC_InitStructure.ADC_ExternalTrigConvEdge  = ADC_ExternalTrigConvEdge_None;//// //
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]
    ADC_InitStructure.ADC_DataAlign             = ADC_DataAlign_Right;
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_NbrOfConversion       = 1;//MONn;
 8006af6:	2301      	movs	r3, #1
 8006af8:	753b      	strb	r3, [r7, #20]
    ADC_Init(MON_ADC, &ADC_InitStructure);
 8006afa:	463b      	mov	r3, r7
 8006afc:	4619      	mov	r1, r3
 8006afe:	480b      	ldr	r0, [pc, #44]	; (8006b2c <HW_MON_Init+0x194>)
 8006b00:	f7fa fd16 	bl	8001530 <ADC_Init>

    /* Enable Temperature and Internal VREF channels
     * VBAT Conversion cannot be activated at the same time (channel is shared)
     */
    ADC_TempSensorVrefintCmd(ENABLE);
 8006b04:	2001      	movs	r0, #1
 8006b06:	f7fa fde3 	bl	80016d0 <ADC_TempSensorVrefintCmd>

    /* Switch ADC ON */
    ADC_Cmd(MON_ADC, ENABLE);
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4807      	ldr	r0, [pc, #28]	; (8006b2c <HW_MON_Init+0x194>)
 8006b0e:	f7fa fdc3 	bl	8001698 <ADC_Cmd>

}
 8006b12:	bf00      	nop
 8006b14:	3730      	adds	r7, #48	; 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40020800 	.word	0x40020800
 8006b20:	40020400 	.word	0x40020400
 8006b24:	40020000 	.word	0x40020000
 8006b28:	0f000001 	.word	0x0f000001
 8006b2c:	40012000 	.word	0x40012000

08006b30 <HW_MOT_Init>:

#include "blueboard.h"


void HW_MOT_Init(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b090      	sub	sp, #64	; 0x40
 8006b34:	af00      	add	r7, sp, #0

  //  MOT_SLEEP_GPIO_CLK_ENABLE();
  //  MOT_RESET_GPIO_CLK_ENABLE();
  //  MOT_I1_GPIO_CLK_ENABLE();
  //  MOT_I0_GPIO_CLK_ENABLE();
    MOT1_IN1_GPIO_CLK_ENABLE();
 8006b36:	2101      	movs	r1, #1
 8006b38:	2010      	movs	r0, #16
 8006b3a:	f7fb f90d 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    MOT1_IN2_GPIO_CLK_ENABLE();
 8006b3e:	2101      	movs	r1, #1
 8006b40:	2010      	movs	r0, #16
 8006b42:	f7fb f909 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    MOT2_IN1_GPIO_CLK_ENABLE();
 8006b46:	2101      	movs	r1, #1
 8006b48:	2010      	movs	r0, #16
 8006b4a:	f7fb f905 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    MOT2_IN2_GPIO_CLK_ENABLE();
 8006b4e:	2101      	movs	r1, #1
 8006b50:	2010      	movs	r0, #16
 8006b52:	f7fb f901 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
  //  MOT_FAULT_GPIO_CLK_ENABLE();

    /* Common configuration for all General-Purpose Outputs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    //    GPIO_Init(MOT_I1_GPIO_PORT, &GPIO_InitStructure);

    //    GPIO_InitStructure.GPIO_Pin = MOT_I0_PIN;
    //    GPIO_Init(MOT_I0_GPIO_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
 8006b6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
 8006b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b78:	4619      	mov	r1, r3
 8006b7a:	483e      	ldr	r0, [pc, #248]	; (8006c74 <HW_MOT_Init+0x144>)
 8006b7c:	f7fa fdda 	bl	8001734 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin = MOT2_IN2_PIN;
 8006b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b84:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT2_IN2_GPIO_PORT, &GPIO_InitStructure);
 8006b86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4839      	ldr	r0, [pc, #228]	; (8006c74 <HW_MOT_Init+0x144>)
 8006b8e:	f7fa fdd1 	bl	8001734 <GPIO_Init>

    /* Alternate function (PWM) */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006b92:	2302      	movs	r3, #2
 8006b94:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    GPIO_InitStructure.GPIO_Pin = MOT1_IN1_PIN;
 8006b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT1_IN1_GPIO_PORT, &GPIO_InitStructure);
 8006b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4833      	ldr	r0, [pc, #204]	; (8006c74 <HW_MOT_Init+0x144>)
 8006ba6:	f7fa fdc5 	bl	8001734 <GPIO_Init>
    GPIO_PinAFConfig(MOT1_IN1_GPIO_PORT, MOT1_IN1_PIN_SOURCE, MOT1_IN1_AF);
 8006baa:	2201      	movs	r2, #1
 8006bac:	210d      	movs	r1, #13
 8006bae:	4831      	ldr	r0, [pc, #196]	; (8006c74 <HW_MOT_Init+0x144>)
 8006bb0:	f7fa fe68 	bl	8001884 <GPIO_PinAFConfig>

    //    GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
    //    GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
    //    GPIO_PinAFConfig(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN_SOURCE, MOT1_IN2_AF);

    GPIO_InitStructure.GPIO_Pin = MOT2_IN1_PIN;
 8006bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT2_IN1_GPIO_PORT, &GPIO_InitStructure);
 8006bba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	482c      	ldr	r0, [pc, #176]	; (8006c74 <HW_MOT_Init+0x144>)
 8006bc2:	f7fa fdb7 	bl	8001734 <GPIO_Init>
    GPIO_PinAFConfig(MOT2_IN1_GPIO_PORT, MOT2_IN1_PIN_SOURCE, MOT2_IN1_AF);
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	210b      	movs	r1, #11
 8006bca:	482a      	ldr	r0, [pc, #168]	; (8006c74 <HW_MOT_Init+0x144>)
 8006bcc:	f7fa fe5a 	bl	8001884 <GPIO_PinAFConfig>
    //    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    //    GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    //    GPIO_Init(MOT_FAULT_GPIO_PORT, &GPIO_InitStructure);

    /* Enable Timers Clocks from RCC */
    MOT_TIM_CLK_ENABLE();
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f7fb f900 	bl	8001dd8 <RCC_APB2PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = MOT_TIMER_PRESCALER;
 8006be0:	2300      	movs	r3, #0
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = MOT_TIMER_PERIOD;
 8006be4:	f640 739f 	movw	r3, #3999	; 0xf9f
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(MOT_TIM, &TIM_BaseStruct);
 8006bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4820      	ldr	r0, [pc, #128]	; (8006c78 <HW_MOT_Init+0x148>)
 8006bf6:	f7fb f9fb 	bl	8001ff0 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(MOT_TIM, ENABLE);
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	481e      	ldr	r0, [pc, #120]	; (8006c78 <HW_MOT_Init+0x148>)
 8006bfe:	f7fb fcfd 	bl	80025fc <TIM_CtrlPWMOutputs>

    /* Enable Motor Timer */
    TIM_Cmd(MOT_TIM, ENABLE);
 8006c02:	2101      	movs	r1, #1
 8006c04:	481c      	ldr	r0, [pc, #112]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c06:	f7fb fa6b 	bl	80020e0 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 8006c0a:	1d3b      	adds	r3, r7, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fb fc63 	bl	80024d8 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 8006c12:	2360      	movs	r3, #96	; 0x60
 8006c14:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 8006c16:	2301      	movs	r3, #1
 8006c18:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(MOT_TIM, &TIM_OCStruct);
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4814      	ldr	r0, [pc, #80]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c28:	f7fb fa76 	bl	8002118 <TIM_OC1Init>
    TIM_OC2Init(MOT_TIM, &TIM_OCStruct);
 8006c2c:	1d3b      	adds	r3, r7, #4
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4811      	ldr	r0, [pc, #68]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c32:	f7fb faeb 	bl	800220c <TIM_OC2Init>
    TIM_OC3Init(MOT_TIM, &TIM_OCStruct);
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	480f      	ldr	r0, [pc, #60]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c3c:	f7fb fb68 	bl	8002310 <TIM_OC3Init>
    TIM_OC4Init(MOT_TIM, &TIM_OCStruct);
 8006c40:	1d3b      	adds	r3, r7, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	480c      	ldr	r0, [pc, #48]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c46:	f7fb fbe3 	bl	8002410 <TIM_OC4Init>

    TIM_OC1PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8006c4a:	2108      	movs	r1, #8
 8006c4c:	480a      	ldr	r0, [pc, #40]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c4e:	f7fb fc65 	bl	800251c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8006c52:	2108      	movs	r1, #8
 8006c54:	4808      	ldr	r0, [pc, #32]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c56:	f7fb fc7d 	bl	8002554 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8006c5a:	2108      	movs	r1, #8
 8006c5c:	4806      	ldr	r0, [pc, #24]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c5e:	f7fb fc95 	bl	800258c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8006c62:	2108      	movs	r1, #8
 8006c64:	4804      	ldr	r0, [pc, #16]	; (8006c78 <HW_MOT_Init+0x148>)
 8006c66:	f7fb fcad 	bl	80025c4 <TIM_OC4PreloadConfig>
    //    MOT_SLEEP_WRITE(MOT_SLEEP_ON);
    //    MOT_RESET_WRITE(MOT_RESET_ON);

    /* Setup default bridge current */
    //    HW_MOT_SetBridgeCurrent(HW_MOT_CURRENT_100);
}
 8006c6a:	bf00      	nop
 8006c6c:	3740      	adds	r7, #64	; 0x40
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40010000 	.word	0x40010000

08006c7c <HW_PWR_Init>:
  * @brief  Configure all VPn power GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_PWR_Init(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    VP1_EN_GPIO_CLK_ENABLE();
 8006c82:	2101      	movs	r1, #1
 8006c84:	2002      	movs	r0, #2
 8006c86:	f7fb f867 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    VP2_EN_GPIO_CLK_ENABLE();
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	2002      	movs	r0, #2
 8006c8e:	f7fb f863 	bl	8001d58 <RCC_AHB1PeriphClockCmd>
    VP3_EN_GPIO_CLK_ENABLE();
 8006c92:	2101      	movs	r1, #1
 8006c94:	2010      	movs	r0, #16
 8006c96:	f7fb f85f 	bl	8001d58 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all VPn */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = VP1_EN_PIN;
 8006caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cae:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP1_EN_GPIO_PORT, &GPIO_InitStructure);
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	480f      	ldr	r0, [pc, #60]	; (8006cf4 <HW_PWR_Init+0x78>)
 8006cb6:	f7fa fd3d 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP2_EN_PIN;
 8006cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cbe:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP2_EN_GPIO_PORT, &GPIO_InitStructure);
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	480b      	ldr	r0, [pc, #44]	; (8006cf4 <HW_PWR_Init+0x78>)
 8006cc6:	f7fa fd35 	bl	8001734 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP3_EN_PIN;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP3_EN_GPIO_PORT, &GPIO_InitStructure);
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <HW_PWR_Init+0x7c>)
 8006cd4:	f7fa fd2e 	bl	8001734 <GPIO_Init>

    /* Default state: Modules OFF */
    HW_PWR_Disable(HW_PWR_VP1);
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f000 f829 	bl	8006d30 <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP2);
 8006cde:	2001      	movs	r0, #1
 8006ce0:	f000 f826 	bl	8006d30 <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP3);
 8006ce4:	2002      	movs	r0, #2
 8006ce6:	f000 f823 	bl	8006d30 <HW_PWR_Disable>

}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40020400 	.word	0x40020400
 8006cf8:	40021000 	.word	0x40021000

08006cfc <HW_PWR_Enable>:
  * @brief  Enable a VPx power-supply
  * @param  power VPx channel to enable
  * @retval None
  */
void HW_PWR_Enable(HW_PWR_TypeDef power)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_ON);
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	4a07      	ldr	r2, [pc, #28]	; (8006d28 <HW_PWR_Enable+0x2c>)
 8006d0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	4a06      	ldr	r2, [pc, #24]	; (8006d2c <HW_PWR_Enable+0x30>)
 8006d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d16:	2200      	movs	r2, #0
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7fa fd99 	bl	8001850 <GPIO_WriteBit>
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20010010 	.word	0x20010010
 8006d2c:	0800a6cc 	.word	0x0800a6cc

08006d30 <HW_PWR_Disable>:
  * @brief  Disable a VPx power-supply
  * @param  power VPx channel to disable
  * @retval None
  */
void HW_PWR_Disable(HW_PWR_TypeDef power)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_OFF);
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	4a07      	ldr	r2, [pc, #28]	; (8006d5c <HW_PWR_Disable+0x2c>)
 8006d3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	4a06      	ldr	r2, [pc, #24]	; (8006d60 <HW_PWR_Disable+0x30>)
 8006d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f7fa fd7f 	bl	8001850 <GPIO_WriteBit>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20010010 	.word	0x20010010
 8006d60:	0800a6cc 	.word	0x0800a6cc

08006d64 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006d68:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006d6c:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     // invalidate I-Cache
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <SCB_EnableICache+0x34>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  // enable I-Cache
 8006d78:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <SCB_EnableICache+0x34>)
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <SCB_EnableICache+0x34>)
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d82:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006d84:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006d88:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	e000ed00 	.word	0xe000ed00

08006d9c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    SCB->CSSELR = (0UL << 1) | 0UL;         // Level 1 data cache
 8006da2:	4b25      	ldr	r3, [pc, #148]	; (8006e38 <SCB_EnableDCache+0x9c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ccsidr  = SCB->CCSIDR;
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <SCB_EnableDCache+0x9c>)
 8006dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db0:	617b      	str	r3, [r7, #20]
    sets    = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	0b5b      	lsrs	r3, r3, #13
 8006db6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006dba:	61fb      	str	r3, [r7, #28]
    sshift  = (uint32_t)(CCSIDR_LSSHIFT(ccsidr) + 4UL);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	613b      	str	r3, [r7, #16]
    ways    = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dce:	60fb      	str	r3, [r7, #12]
    wshift  = (uint32_t)((uint32_t)__CLZ(ways) & 0x1FUL);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	fab3 f383 	clz	r3, r3
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	60bb      	str	r3, [r7, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ddc:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                   // invalidate D-Cache
         uint32_t tmpways = ways;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	61bb      	str	r3, [r7, #24]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	409a      	lsls	r2, r3
 8006dea:	69f9      	ldr	r1, [r7, #28]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	607b      	str	r3, [r7, #4]
              SCB->DCISW = sw;
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <SCB_EnableDCache+0x9c>)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	61ba      	str	r2, [r7, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ed      	bne.n	8006de4 <SCB_EnableDCache+0x48>
        } while(sets--);
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	1e5a      	subs	r2, r3, #1
 8006e0c:	61fa      	str	r2, [r7, #28]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <SCB_EnableDCache+0x44>
 8006e12:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;   // enable D-Cache
 8006e16:	4a08      	ldr	r2, [pc, #32]	; (8006e38 <SCB_EnableDCache+0x9c>)
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <SCB_EnableDCache+0x9c>)
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e20:	6153      	str	r3, [r2, #20]
 8006e22:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006e26:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8006e2a:	bf00      	nop
 8006e2c:	3724      	adds	r7, #36	; 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	e000ed00 	.word	0xe000ed00

08006e3c <HW_SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void HW_SystemClock_Config(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af02      	add	r7, sp, #8
  RCC_HSEConfig(RCC_HSE_ON);
 8006e42:	2001      	movs	r0, #1
 8006e44:	f7fa fdd2 	bl	80019ec <RCC_HSEConfig>

  if ( RCC_WaitForHSEStartUp() != SUCCESS )
 8006e48:	f7fa fde4 	bl	8001a14 <RCC_WaitForHSEStartUp>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d000      	beq.n	8006e54 <HW_SystemClock_Config+0x18>
  {
    while(1);
 8006e52:	e7fe      	b.n	8006e52 <HW_SystemClock_Config+0x16>
  }

  RCC_PLLConfig(RCC_PLLSource_HSE, 8, 384, 2, 8);
 8006e54:	2308      	movs	r3, #8
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006e5e:	2108      	movs	r1, #8
 8006e60:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006e64:	f7fa fdfe 	bl	8001a64 <RCC_PLLConfig>
  RCC_PLLCmd(ENABLE);
 8006e68:	2001      	movs	r0, #1
 8006e6a:	f7fa fe3d 	bl	8001ae8 <RCC_PLLCmd>

  while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8006e6e:	bf00      	nop
 8006e70:	2039      	movs	r0, #57	; 0x39
 8006e72:	f7fa ffd1 	bl	8001e18 <RCC_GetFlagStatus>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f9      	beq.n	8006e70 <HW_SystemClock_Config+0x34>

  /* Activate the OverDrive to reach the 196 MHz Frequency */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006e82:	f7fa ff89 	bl	8001d98 <RCC_APB1PeriphClockCmd>

  PWR_OverDriveCmd( ENABLE );
 8006e86:	2001      	movs	r0, #1
 8006e88:	f7fa fd46 	bl	8001918 <PWR_OverDriveCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODRDY ) == RESET );
 8006e8c:	bf00      	nop
 8006e8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006e92:	f7fa fd7d 	bl	8001990 <PWR_GetFlagStatus>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f8      	beq.n	8006e8e <HW_SystemClock_Config+0x52>

  while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 8006e9c:	bf00      	nop
 8006e9e:	2031      	movs	r0, #49	; 0x31
 8006ea0:	f7fa ffba 	bl	8001e18 <RCC_GetFlagStatus>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f9      	beq.n	8006e9e <HW_SystemClock_Config+0x62>

  PWR_OverDriveSWCmd(ENABLE);
 8006eaa:	2001      	movs	r0, #1
 8006eac:	f7fa fd52 	bl	8001954 <PWR_OverDriveSWCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODSWRDY ) == RESET );
 8006eb0:	bf00      	nop
 8006eb2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006eb6:	f7fa fd6b 	bl	8001990 <PWR_GetFlagStatus>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0f8      	beq.n	8006eb2 <HW_SystemClock_Config+0x76>

  FLASH_SetLatency(FLASH_Latency_7);
 8006ec0:	2007      	movs	r0, #7
 8006ec2:	f7fa fc23 	bl	800170c <FLASH_SetLatency>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8006ec6:	2002      	movs	r0, #2
 8006ec8:	f7fa fe2c 	bl	8001b24 <RCC_SYSCLKConfig>

  RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f7fa fe45 	bl	8001b5c <RCC_HCLKConfig>
  RCC_PCLK1Config(RCC_HCLK_Div4);
 8006ed2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006ed6:	f7fa fe5d 	bl	8001b94 <RCC_PCLK1Config>
  RCC_PCLK2Config(RCC_HCLK_Div4);
 8006eda:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006ede:	f7fa fe75 	bl	8001bcc <RCC_PCLK2Config>

  SystemCoreClockUpdate();
 8006ee2:	f000 f875 	bl	8006fd0 <SystemCoreClockUpdate>
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HW_CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
void HW_CPU_CACHE_Enable(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Enable branch prediction */
  SCB->CCR |= (1 <<18);
 8006ef0:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <HW_CPU_CACHE_Enable+0x20>)
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HW_CPU_CACHE_Enable+0x20>)
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006efa:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006efc:	f3bf 8f4f 	dsb	sy
  __DSB();

  /* Enable I-Cache */
  SCB_EnableICache();
 8006f00:	f7ff ff30 	bl	8006d64 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8006f04:	f7ff ff4a 	bl	8006d9c <SCB_EnableDCache>
}
 8006f08:	bf00      	nop
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	e000ed00 	.word	0xe000ed00

08006f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006f16:	e003      	b.n	8006f20 <LoopCopyDataInit>

08006f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006f1e:	3104      	adds	r1, #4

08006f20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f20:	480b      	ldr	r0, [pc, #44]	; (8006f50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006f28:	d3f6      	bcc.n	8006f18 <CopyDataInit>
  ldr  r2, =_sbss
 8006f2a:	4a0b      	ldr	r2, [pc, #44]	; (8006f58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006f2c:	e002      	b.n	8006f34 <LoopFillZerobss>

08006f2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006f2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006f30:	f842 3b04 	str.w	r3, [r2], #4

08006f34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006f38:	d3f9      	bcc.n	8006f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006f3a:	f000 f813 	bl	8006f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f3e:	f000 f905 	bl	800714c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f42:	f000 f8c1 	bl	80070c8 <main>
  bx  lr    
 8006f46:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006f48:	2004ff00 	.word	0x2004ff00
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8006f4c:	0800a9bc 	.word	0x0800a9bc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f50:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 8006f54:	20010560 	.word	0x20010560
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006f58:	20010560 	.word	0x20010560
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006f5c:	200144ac 	.word	0x200144ac

08006f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f60:	e7fe      	b.n	8006f60 <ADC_IRQHandler>
	...

08006f64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f68:	4a15      	ldr	r2, [pc, #84]	; (8006fc0 <SystemInit+0x5c>)
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <SystemInit+0x5c>)
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006f78:	4a12      	ldr	r2, [pc, #72]	; (8006fc4 <SystemInit+0x60>)
 8006f7a:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <SystemInit+0x60>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f043 0301 	orr.w	r3, r3, #1
 8006f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <SystemInit+0x60>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006f8a:	490e      	ldr	r1, [pc, #56]	; (8006fc4 <SystemInit+0x60>)
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <SystemInit+0x60>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <SystemInit+0x64>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <SystemInit+0x60>)
 8006f98:	4a0c      	ldr	r2, [pc, #48]	; (8006fcc <SystemInit+0x68>)
 8006f9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006f9c:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <SystemInit+0x60>)
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <SystemInit+0x60>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <SystemInit+0x60>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <SystemInit+0x5c>)
 8006fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fb4:	609a      	str	r2, [r3, #8]
#endif
}
 8006fb6:	bf00      	nop
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	e000ed00 	.word	0xe000ed00
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	fef6ffff 	.word	0xfef6ffff
 8006fcc:	24003010 	.word	0x24003010

08006fd0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	2302      	movs	r3, #2
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006fea:	4b32      	ldr	r3, [pc, #200]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
 8006ff2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d007      	beq.n	800700a <SystemCoreClockUpdate+0x3a>
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d009      	beq.n	8007012 <SystemCoreClockUpdate+0x42>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d13f      	bne.n	8007082 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8007002:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <SystemCoreClockUpdate+0xe8>)
 8007004:	4a2d      	ldr	r2, [pc, #180]	; (80070bc <SystemCoreClockUpdate+0xec>)
 8007006:	601a      	str	r2, [r3, #0]
      break;
 8007008:	e03f      	b.n	800708a <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800700a:	4b2b      	ldr	r3, [pc, #172]	; (80070b8 <SystemCoreClockUpdate+0xe8>)
 800700c:	4a2c      	ldr	r2, [pc, #176]	; (80070c0 <SystemCoreClockUpdate+0xf0>)
 800700e:	601a      	str	r2, [r3, #0]
      break;
 8007010:	e03b      	b.n	800708a <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8007012:	4b28      	ldr	r3, [pc, #160]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701a:	0d9b      	lsrs	r3, r3, #22
 800701c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800701e:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007026:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800702e:	4a24      	ldr	r2, [pc, #144]	; (80070c0 <SystemCoreClockUpdate+0xf0>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	fbb2 f2f3 	udiv	r2, r2, r3
 8007036:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 8007038:	6859      	ldr	r1, [r3, #4]
 800703a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800703e:	400b      	ands	r3, r1
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	fb03 f302 	mul.w	r3, r3, r2
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e00c      	b.n	8007064 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800704a:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <SystemCoreClockUpdate+0xec>)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007052:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 8007054:	6859      	ldr	r1, [r3, #4]
 8007056:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800705a:	400b      	ands	r3, r1
 800705c:	099b      	lsrs	r3, r3, #6
 800705e:	fb03 f302 	mul.w	r3, r3, r2
 8007062:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007064:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	3301      	adds	r3, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <SystemCoreClockUpdate+0xe8>)
 800707e:	6013      	str	r3, [r2, #0]
      break;
 8007080:	e003      	b.n	800708a <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <SystemCoreClockUpdate+0xe8>)
 8007084:	4a0d      	ldr	r2, [pc, #52]	; (80070bc <SystemCoreClockUpdate+0xec>)
 8007086:	601a      	str	r2, [r3, #0]
      break;
 8007088:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <SystemCoreClockUpdate+0xe4>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007092:	091b      	lsrs	r3, r3, #4
 8007094:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <SystemCoreClockUpdate+0xf4>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <SystemCoreClockUpdate+0xe8>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <SystemCoreClockUpdate+0xe8>)
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40023800 	.word	0x40023800
 80070b8:	2001001c 	.word	0x2001001c
 80070bc:	00f42400 	.word	0x00f42400
 80070c0:	007a1200 	.word	0x007a1200
 80070c4:	0800a6d4 	.word	0x0800a6d4

080070c8 <main>:
**
********************************************************************************
*/

int main( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
    /* Configure the hardware */
    HW_InitAll();
 80070cc:	f7fe feae 	bl	8005e2c <HW_InitAll>

    /* Apply the Power-Up sequence*/
    HW_PowerUp();
 80070d0:	f7fe fed4 	bl	8005e7c <HW_PowerUp>

    /* Start software tasks */

    //OS_CreateDebugTask();
    OS_SHL_Start();
 80070d4:	f7fa f96a 	bl	80013ac <OS_SHL_Start>
    OS_CreateLedTask();
 80070d8:	f7fa f8be 	bl	8001258 <OS_CreateLedTask>
    OS_CreateASVTask();*/
    //OS_CreateDSVTask();


    /* Start FreeRTOS Scheduler */
    vTaskStartScheduler();
 80070dc:	f7fd fa5a 	bl	8004594 <vTaskStartScheduler>


    /* Infinite loop */
    for( ;; );
 80070e0:	e7fe      	b.n	80070e0 <main+0x18>
 80070e2:	bf00      	nop

080070e4 <xl_320_init>:

// -----------------------------------------------------------------------------
// First layer: handles UART data
// -----------------------------------------------------------------------------

void xl_320_init(XL_320_Com_Mode mode){
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
	xl_320_cfg.mode = mode;
 80070ee:	4a0b      	ldr	r2, [pc, #44]	; (800711c <xl_320_init+0x38>)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	7013      	strb	r3, [r2, #0]
	{
		case XL_320_TX_ONLY:
		case XL_320_TXRX_ONE_PIN:
		case XL_320_TXRX_TWO_PINS:
		default:
			xl_320_cfg.hw_send_byte = NULL;
 80070f4:	4b09      	ldr	r3, [pc, #36]	; (800711c <xl_320_init+0x38>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	609a      	str	r2, [r3, #8]
			xl_320_cfg.hw_receive_byte = NULL;
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <xl_320_init+0x38>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	60da      	str	r2, [r3, #12]
			xl_320_cfg.hw_flush = NULL;
 8007100:	4b06      	ldr	r3, [pc, #24]	; (800711c <xl_320_init+0x38>)
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]
			xl_320_cfg.hw_switch = NULL;
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <xl_320_init+0x38>)
 8007108:	2200      	movs	r2, #0
 800710a:	605a      	str	r2, [r3, #4]
		break;
 800710c:	bf00      	nop
	}
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20014494 	.word	0x20014494

08007120 <xl_320_set_hw_send>:
void xl_320_set_hw_send(void (*hw_send)(uint8_t))
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	xl_320_cfg.hw_send_byte = hw_send;
 8007128:	4a04      	ldr	r2, [pc, #16]	; (800713c <xl_320_set_hw_send+0x1c>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6093      	str	r3, [r2, #8]
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20014494 	.word	0x20014494

08007140 <__errno>:
 8007140:	4b01      	ldr	r3, [pc, #4]	; (8007148 <__errno+0x8>)
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20010110 	.word	0x20010110

0800714c <__libc_init_array>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <__libc_init_array+0x3c>)
 8007150:	4c0e      	ldr	r4, [pc, #56]	; (800718c <__libc_init_array+0x40>)
 8007152:	1ae4      	subs	r4, r4, r3
 8007154:	10a4      	asrs	r4, r4, #2
 8007156:	2500      	movs	r5, #0
 8007158:	461e      	mov	r6, r3
 800715a:	42a5      	cmp	r5, r4
 800715c:	d004      	beq.n	8007168 <__libc_init_array+0x1c>
 800715e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007162:	4798      	blx	r3
 8007164:	3501      	adds	r5, #1
 8007166:	e7f8      	b.n	800715a <__libc_init_array+0xe>
 8007168:	f002 ff5a 	bl	800a020 <_init>
 800716c:	4c08      	ldr	r4, [pc, #32]	; (8007190 <__libc_init_array+0x44>)
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <__libc_init_array+0x48>)
 8007170:	1ae4      	subs	r4, r4, r3
 8007172:	10a4      	asrs	r4, r4, #2
 8007174:	2500      	movs	r5, #0
 8007176:	461e      	mov	r6, r3
 8007178:	42a5      	cmp	r5, r4
 800717a:	d004      	beq.n	8007186 <__libc_init_array+0x3a>
 800717c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007180:	4798      	blx	r3
 8007182:	3501      	adds	r5, #1
 8007184:	e7f8      	b.n	8007178 <__libc_init_array+0x2c>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	0800a9b4 	.word	0x0800a9b4
 800718c:	0800a9b4 	.word	0x0800a9b4
 8007190:	0800a9b8 	.word	0x0800a9b8
 8007194:	0800a9b4 	.word	0x0800a9b4

08007198 <memcpy>:
 8007198:	b510      	push	{r4, lr}
 800719a:	1e43      	subs	r3, r0, #1
 800719c:	440a      	add	r2, r1
 800719e:	4291      	cmp	r1, r2
 80071a0:	d004      	beq.n	80071ac <memcpy+0x14>
 80071a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071aa:	e7f8      	b.n	800719e <memcpy+0x6>
 80071ac:	bd10      	pop	{r4, pc}

080071ae <memset>:
 80071ae:	4402      	add	r2, r0
 80071b0:	4603      	mov	r3, r0
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d002      	beq.n	80071bc <memset+0xe>
 80071b6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ba:	e7fa      	b.n	80071b2 <memset+0x4>
 80071bc:	4770      	bx	lr
	...

080071c0 <snprintf>:
 80071c0:	b40c      	push	{r2, r3}
 80071c2:	b530      	push	{r4, r5, lr}
 80071c4:	4b16      	ldr	r3, [pc, #88]	; (8007220 <snprintf+0x60>)
 80071c6:	1e0c      	subs	r4, r1, #0
 80071c8:	b09d      	sub	sp, #116	; 0x74
 80071ca:	681d      	ldr	r5, [r3, #0]
 80071cc:	da04      	bge.n	80071d8 <snprintf+0x18>
 80071ce:	238b      	movs	r3, #139	; 0x8b
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	e01e      	b.n	8007216 <snprintf+0x56>
 80071d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80071dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80071e0:	bf14      	ite	ne
 80071e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071e6:	4623      	moveq	r3, r4
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	9307      	str	r3, [sp, #28]
 80071ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	9006      	str	r0, [sp, #24]
 80071f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80071fa:	ab21      	add	r3, sp, #132	; 0x84
 80071fc:	a902      	add	r1, sp, #8
 80071fe:	4628      	mov	r0, r5
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	f000 f881 	bl	8007308 <_svfprintf_r>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	bfbc      	itt	lt
 800720a:	238b      	movlt	r3, #139	; 0x8b
 800720c:	602b      	strlt	r3, [r5, #0]
 800720e:	b114      	cbz	r4, 8007216 <snprintf+0x56>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	b01d      	add	sp, #116	; 0x74
 8007218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721c:	b002      	add	sp, #8
 800721e:	4770      	bx	lr
 8007220:	20010110 	.word	0x20010110

08007224 <sprintf>:
 8007224:	b40e      	push	{r1, r2, r3}
 8007226:	b500      	push	{lr}
 8007228:	b09c      	sub	sp, #112	; 0x70
 800722a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800722e:	ab1d      	add	r3, sp, #116	; 0x74
 8007230:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723c:	480a      	ldr	r0, [pc, #40]	; (8007268 <sprintf+0x44>)
 800723e:	9104      	str	r1, [sp, #16]
 8007240:	9107      	str	r1, [sp, #28]
 8007242:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007246:	f853 2b04 	ldr.w	r2, [r3], #4
 800724a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f000 f858 	bl	8007308 <_svfprintf_r>
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	20010110 	.word	0x20010110

0800726c <strcasecmp>:
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <strcasecmp+0x38>)
 800726e:	b530      	push	{r4, r5, lr}
 8007270:	681d      	ldr	r5, [r3, #0]
 8007272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007276:	18ea      	adds	r2, r5, r3
 8007278:	7852      	ldrb	r2, [r2, #1]
 800727a:	f002 0203 	and.w	r2, r2, #3
 800727e:	2a01      	cmp	r2, #1
 8007280:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007284:	eb05 0402 	add.w	r4, r5, r2
 8007288:	bf08      	it	eq
 800728a:	3320      	addeq	r3, #32
 800728c:	7864      	ldrb	r4, [r4, #1]
 800728e:	f004 0403 	and.w	r4, r4, #3
 8007292:	2c01      	cmp	r4, #1
 8007294:	bf08      	it	eq
 8007296:	3220      	addeq	r2, #32
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	d101      	bne.n	80072a0 <strcasecmp+0x34>
 800729c:	2a00      	cmp	r2, #0
 800729e:	d1e8      	bne.n	8007272 <strcasecmp+0x6>
 80072a0:	4618      	mov	r0, r3
 80072a2:	bd30      	pop	{r4, r5, pc}
 80072a4:	20010114 	.word	0x20010114

080072a8 <strcpy>:
 80072a8:	4603      	mov	r3, r0
 80072aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ae:	f803 2b01 	strb.w	r2, [r3], #1
 80072b2:	2a00      	cmp	r2, #0
 80072b4:	d1f9      	bne.n	80072aa <strcpy+0x2>
 80072b6:	4770      	bx	lr

080072b8 <strncmp>:
 80072b8:	b530      	push	{r4, r5, lr}
 80072ba:	b182      	cbz	r2, 80072de <strncmp+0x26>
 80072bc:	1e45      	subs	r5, r0, #1
 80072be:	3901      	subs	r1, #1
 80072c0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80072c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	d106      	bne.n	80072da <strncmp+0x22>
 80072cc:	43ec      	mvns	r4, r5
 80072ce:	4414      	add	r4, r2
 80072d0:	42e0      	cmn	r0, r4
 80072d2:	d001      	beq.n	80072d8 <strncmp+0x20>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f3      	bne.n	80072c0 <strncmp+0x8>
 80072d8:	461c      	mov	r4, r3
 80072da:	1b18      	subs	r0, r3, r4
 80072dc:	bd30      	pop	{r4, r5, pc}
 80072de:	4610      	mov	r0, r2
 80072e0:	bd30      	pop	{r4, r5, pc}

080072e2 <strncpy>:
 80072e2:	b510      	push	{r4, lr}
 80072e4:	4603      	mov	r3, r0
 80072e6:	b142      	cbz	r2, 80072fa <strncpy+0x18>
 80072e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ec:	f803 4b01 	strb.w	r4, [r3], #1
 80072f0:	3a01      	subs	r2, #1
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d1f7      	bne.n	80072e6 <strncpy+0x4>
 80072f6:	441a      	add	r2, r3
 80072f8:	e000      	b.n	80072fc <strncpy+0x1a>
 80072fa:	bd10      	pop	{r4, pc}
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d002      	beq.n	8007306 <strncpy+0x24>
 8007300:	f803 4b01 	strb.w	r4, [r3], #1
 8007304:	e7fa      	b.n	80072fc <strncpy+0x1a>
 8007306:	bd10      	pop	{r4, pc}

08007308 <_svfprintf_r>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b0bd      	sub	sp, #244	; 0xf4
 800730e:	468b      	mov	fp, r1
 8007310:	9205      	str	r2, [sp, #20]
 8007312:	461f      	mov	r7, r3
 8007314:	4682      	mov	sl, r0
 8007316:	f001 feff 	bl	8009118 <_localeconv_r>
 800731a:	6803      	ldr	r3, [r0, #0]
 800731c:	930d      	str	r3, [sp, #52]	; 0x34
 800731e:	4618      	mov	r0, r3
 8007320:	f7f8 ff76 	bl	8000210 <strlen>
 8007324:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007328:	9008      	str	r0, [sp, #32]
 800732a:	0619      	lsls	r1, r3, #24
 800732c:	d515      	bpl.n	800735a <_svfprintf_r+0x52>
 800732e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007332:	b993      	cbnz	r3, 800735a <_svfprintf_r+0x52>
 8007334:	2140      	movs	r1, #64	; 0x40
 8007336:	4650      	mov	r0, sl
 8007338:	f001 fefa 	bl	8009130 <_malloc_r>
 800733c:	f8cb 0000 	str.w	r0, [fp]
 8007340:	f8cb 0010 	str.w	r0, [fp, #16]
 8007344:	b930      	cbnz	r0, 8007354 <_svfprintf_r+0x4c>
 8007346:	230c      	movs	r3, #12
 8007348:	f8ca 3000 	str.w	r3, [sl]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	f000 bf95 	b.w	800827e <_svfprintf_r+0xf76>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	f8cb 3014 	str.w	r3, [fp, #20]
 800735a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80075c0 <_svfprintf_r+0x2b8>
 800735e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007362:	2300      	movs	r3, #0
 8007364:	ac2c      	add	r4, sp, #176	; 0xb0
 8007366:	941f      	str	r4, [sp, #124]	; 0x7c
 8007368:	9321      	str	r3, [sp, #132]	; 0x84
 800736a:	9320      	str	r3, [sp, #128]	; 0x80
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	9311      	str	r3, [sp, #68]	; 0x44
 8007370:	9310      	str	r3, [sp, #64]	; 0x40
 8007372:	930a      	str	r3, [sp, #40]	; 0x28
 8007374:	9d05      	ldr	r5, [sp, #20]
 8007376:	462b      	mov	r3, r5
 8007378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800737c:	b11a      	cbz	r2, 8007386 <_svfprintf_r+0x7e>
 800737e:	2a25      	cmp	r2, #37	; 0x25
 8007380:	d001      	beq.n	8007386 <_svfprintf_r+0x7e>
 8007382:	461d      	mov	r5, r3
 8007384:	e7f7      	b.n	8007376 <_svfprintf_r+0x6e>
 8007386:	9b05      	ldr	r3, [sp, #20]
 8007388:	1aee      	subs	r6, r5, r3
 800738a:	d017      	beq.n	80073bc <_svfprintf_r+0xb4>
 800738c:	e884 0048 	stmia.w	r4, {r3, r6}
 8007390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007392:	4433      	add	r3, r6
 8007394:	9321      	str	r3, [sp, #132]	; 0x84
 8007396:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007398:	3301      	adds	r3, #1
 800739a:	2b07      	cmp	r3, #7
 800739c:	9320      	str	r3, [sp, #128]	; 0x80
 800739e:	dc01      	bgt.n	80073a4 <_svfprintf_r+0x9c>
 80073a0:	3408      	adds	r4, #8
 80073a2:	e008      	b.n	80073b6 <_svfprintf_r+0xae>
 80073a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80073a6:	4659      	mov	r1, fp
 80073a8:	4650      	mov	r0, sl
 80073aa:	f002 fd8d 	bl	8009ec8 <__ssprint_r>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f040 862c 	bne.w	800800c <_svfprintf_r+0xd04>
 80073b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80073b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b8:	4433      	add	r3, r6
 80073ba:	930a      	str	r3, [sp, #40]	; 0x28
 80073bc:	782b      	ldrb	r3, [r5, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 861d 	beq.w	8007ffe <_svfprintf_r+0xcf6>
 80073c4:	2200      	movs	r2, #0
 80073c6:	1c6b      	adds	r3, r5, #1
 80073c8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80073cc:	4611      	mov	r1, r2
 80073ce:	f04f 39ff 	mov.w	r9, #4294967295
 80073d2:	9209      	str	r2, [sp, #36]	; 0x24
 80073d4:	4615      	mov	r5, r2
 80073d6:	200a      	movs	r0, #10
 80073d8:	1c5e      	adds	r6, r3, #1
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	9605      	str	r6, [sp, #20]
 80073de:	9302      	str	r3, [sp, #8]
 80073e0:	9b02      	ldr	r3, [sp, #8]
 80073e2:	3b20      	subs	r3, #32
 80073e4:	2b58      	cmp	r3, #88	; 0x58
 80073e6:	f200 8263 	bhi.w	80078b0 <_svfprintf_r+0x5a8>
 80073ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80073ee:	005c      	.short	0x005c
 80073f0:	02610261 	.word	0x02610261
 80073f4:	0261006b 	.word	0x0261006b
 80073f8:	02610261 	.word	0x02610261
 80073fc:	02610261 	.word	0x02610261
 8007400:	006e0261 	.word	0x006e0261
 8007404:	02610059 	.word	0x02610059
 8007408:	007c0079 	.word	0x007c0079
 800740c:	00a30261 	.word	0x00a30261
 8007410:	00a600a6 	.word	0x00a600a6
 8007414:	00a600a6 	.word	0x00a600a6
 8007418:	00a600a6 	.word	0x00a600a6
 800741c:	00a600a6 	.word	0x00a600a6
 8007420:	026100a6 	.word	0x026100a6
 8007424:	02610261 	.word	0x02610261
 8007428:	02610261 	.word	0x02610261
 800742c:	02610261 	.word	0x02610261
 8007430:	02610261 	.word	0x02610261
 8007434:	00d60261 	.word	0x00d60261
 8007438:	0261010b 	.word	0x0261010b
 800743c:	0261010b 	.word	0x0261010b
 8007440:	02610261 	.word	0x02610261
 8007444:	00b90261 	.word	0x00b90261
 8007448:	02610261 	.word	0x02610261
 800744c:	02610152 	.word	0x02610152
 8007450:	02610261 	.word	0x02610261
 8007454:	02610261 	.word	0x02610261
 8007458:	02610199 	.word	0x02610199
 800745c:	00660261 	.word	0x00660261
 8007460:	02610261 	.word	0x02610261
 8007464:	02610261 	.word	0x02610261
 8007468:	02610261 	.word	0x02610261
 800746c:	02610261 	.word	0x02610261
 8007470:	02610261 	.word	0x02610261
 8007474:	006100cd 	.word	0x006100cd
 8007478:	010b010b 	.word	0x010b010b
 800747c:	00bc010b 	.word	0x00bc010b
 8007480:	02610061 	.word	0x02610061
 8007484:	00bf0261 	.word	0x00bf0261
 8007488:	01340261 	.word	0x01340261
 800748c:	016f0154 	.word	0x016f0154
 8007490:	026100ca 	.word	0x026100ca
 8007494:	02610180 	.word	0x02610180
 8007498:	0261019b 	.word	0x0261019b
 800749c:	01b30261 	.word	0x01b30261
 80074a0:	2201      	movs	r2, #1
 80074a2:	212b      	movs	r1, #43	; 0x2b
 80074a4:	e002      	b.n	80074ac <_svfprintf_r+0x1a4>
 80074a6:	b909      	cbnz	r1, 80074ac <_svfprintf_r+0x1a4>
 80074a8:	2201      	movs	r2, #1
 80074aa:	2120      	movs	r1, #32
 80074ac:	9b05      	ldr	r3, [sp, #20]
 80074ae:	e793      	b.n	80073d8 <_svfprintf_r+0xd0>
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d077      	beq.n	80075a4 <_svfprintf_r+0x29c>
 80074b4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80074b8:	e074      	b.n	80075a4 <_svfprintf_r+0x29c>
 80074ba:	b10a      	cbz	r2, 80074c0 <_svfprintf_r+0x1b8>
 80074bc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80074c0:	4b41      	ldr	r3, [pc, #260]	; (80075c8 <_svfprintf_r+0x2c0>)
 80074c2:	e14b      	b.n	800775c <_svfprintf_r+0x454>
 80074c4:	f045 0501 	orr.w	r5, r5, #1
 80074c8:	e7f0      	b.n	80074ac <_svfprintf_r+0x1a4>
 80074ca:	683e      	ldr	r6, [r7, #0]
 80074cc:	9609      	str	r6, [sp, #36]	; 0x24
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	f107 0304 	add.w	r3, r7, #4
 80074d4:	db01      	blt.n	80074da <_svfprintf_r+0x1d2>
 80074d6:	461f      	mov	r7, r3
 80074d8:	e7e8      	b.n	80074ac <_svfprintf_r+0x1a4>
 80074da:	4276      	negs	r6, r6
 80074dc:	9609      	str	r6, [sp, #36]	; 0x24
 80074de:	461f      	mov	r7, r3
 80074e0:	f045 0504 	orr.w	r5, r5, #4
 80074e4:	e7e2      	b.n	80074ac <_svfprintf_r+0x1a4>
 80074e6:	9e05      	ldr	r6, [sp, #20]
 80074e8:	9b05      	ldr	r3, [sp, #20]
 80074ea:	7836      	ldrb	r6, [r6, #0]
 80074ec:	9602      	str	r6, [sp, #8]
 80074ee:	2e2a      	cmp	r6, #42	; 0x2a
 80074f0:	f103 0301 	add.w	r3, r3, #1
 80074f4:	d002      	beq.n	80074fc <_svfprintf_r+0x1f4>
 80074f6:	f04f 0900 	mov.w	r9, #0
 80074fa:	e00a      	b.n	8007512 <_svfprintf_r+0x20a>
 80074fc:	f8d7 9000 	ldr.w	r9, [r7]
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	1d3e      	adds	r6, r7, #4
 8007504:	f1b9 0f00 	cmp.w	r9, #0
 8007508:	4637      	mov	r7, r6
 800750a:	dacf      	bge.n	80074ac <_svfprintf_r+0x1a4>
 800750c:	f04f 39ff 	mov.w	r9, #4294967295
 8007510:	e7cc      	b.n	80074ac <_svfprintf_r+0x1a4>
 8007512:	9305      	str	r3, [sp, #20]
 8007514:	9b02      	ldr	r3, [sp, #8]
 8007516:	3b30      	subs	r3, #48	; 0x30
 8007518:	2b09      	cmp	r3, #9
 800751a:	d808      	bhi.n	800752e <_svfprintf_r+0x226>
 800751c:	fb00 3909 	mla	r9, r0, r9, r3
 8007520:	9b05      	ldr	r3, [sp, #20]
 8007522:	461e      	mov	r6, r3
 8007524:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	4633      	mov	r3, r6
 800752c:	e7f1      	b.n	8007512 <_svfprintf_r+0x20a>
 800752e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8007532:	e755      	b.n	80073e0 <_svfprintf_r+0xd8>
 8007534:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007538:	e7b8      	b.n	80074ac <_svfprintf_r+0x1a4>
 800753a:	2300      	movs	r3, #0
 800753c:	9309      	str	r3, [sp, #36]	; 0x24
 800753e:	9b02      	ldr	r3, [sp, #8]
 8007540:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007542:	3b30      	subs	r3, #48	; 0x30
 8007544:	fb00 3306 	mla	r3, r0, r6, r3
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	9b05      	ldr	r3, [sp, #20]
 800754c:	461e      	mov	r6, r3
 800754e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007552:	9302      	str	r3, [sp, #8]
 8007554:	9b02      	ldr	r3, [sp, #8]
 8007556:	9605      	str	r6, [sp, #20]
 8007558:	3b30      	subs	r3, #48	; 0x30
 800755a:	2b09      	cmp	r3, #9
 800755c:	d9ef      	bls.n	800753e <_svfprintf_r+0x236>
 800755e:	e73f      	b.n	80073e0 <_svfprintf_r+0xd8>
 8007560:	f045 0508 	orr.w	r5, r5, #8
 8007564:	e7a2      	b.n	80074ac <_svfprintf_r+0x1a4>
 8007566:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800756a:	e79f      	b.n	80074ac <_svfprintf_r+0x1a4>
 800756c:	9b05      	ldr	r3, [sp, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b6c      	cmp	r3, #108	; 0x6c
 8007572:	d103      	bne.n	800757c <_svfprintf_r+0x274>
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	3301      	adds	r3, #1
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	e002      	b.n	8007582 <_svfprintf_r+0x27a>
 800757c:	f045 0510 	orr.w	r5, r5, #16
 8007580:	e794      	b.n	80074ac <_svfprintf_r+0x1a4>
 8007582:	f045 0520 	orr.w	r5, r5, #32
 8007586:	e791      	b.n	80074ac <_svfprintf_r+0x1a4>
 8007588:	1d3b      	adds	r3, r7, #4
 800758a:	9303      	str	r3, [sp, #12]
 800758c:	2600      	movs	r6, #0
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8007594:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007598:	e199      	b.n	80078ce <_svfprintf_r+0x5c6>
 800759a:	b10a      	cbz	r2, 80075a0 <_svfprintf_r+0x298>
 800759c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075a0:	f045 0510 	orr.w	r5, r5, #16
 80075a4:	06aa      	lsls	r2, r5, #26
 80075a6:	d511      	bpl.n	80075cc <_svfprintf_r+0x2c4>
 80075a8:	3707      	adds	r7, #7
 80075aa:	f027 0707 	bic.w	r7, r7, #7
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	9303      	str	r3, [sp, #12]
 80075b4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80075b8:	e017      	b.n	80075ea <_svfprintf_r+0x2e2>
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
	...
 80075c8:	0800a706 	.word	0x0800a706
 80075cc:	f015 0f10 	tst.w	r5, #16
 80075d0:	f107 0304 	add.w	r3, r7, #4
 80075d4:	d002      	beq.n	80075dc <_svfprintf_r+0x2d4>
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	683e      	ldr	r6, [r7, #0]
 80075da:	e005      	b.n	80075e8 <_svfprintf_r+0x2e0>
 80075dc:	683e      	ldr	r6, [r7, #0]
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075e4:	bf18      	it	ne
 80075e6:	b236      	sxthne	r6, r6
 80075e8:	17f7      	asrs	r7, r6, #31
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	f177 0300 	sbcs.w	r3, r7, #0
 80075f0:	f280 80de 	bge.w	80077b0 <_svfprintf_r+0x4a8>
 80075f4:	4276      	negs	r6, r6
 80075f6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80075fa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80075fe:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007602:	e0d5      	b.n	80077b0 <_svfprintf_r+0x4a8>
 8007604:	b10a      	cbz	r2, 800760a <_svfprintf_r+0x302>
 8007606:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800760a:	3707      	adds	r7, #7
 800760c:	f027 0707 	bic.w	r7, r7, #7
 8007610:	f107 0308 	add.w	r3, r7, #8
 8007614:	9303      	str	r3, [sp, #12]
 8007616:	ed97 7b00 	vldr	d7, [r7]
 800761a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	9312      	str	r3, [sp, #72]	; 0x48
 8007622:	9b07      	ldr	r3, [sp, #28]
 8007624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007628:	9313      	str	r3, [sp, #76]	; 0x4c
 800762a:	f04f 32ff 	mov.w	r2, #4294967295
 800762e:	4bab      	ldr	r3, [pc, #684]	; (80078dc <_svfprintf_r+0x5d4>)
 8007630:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007634:	f7f9 fa96 	bl	8000b64 <__aeabi_dcmpun>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 84f1 	bne.w	8008020 <_svfprintf_r+0xd18>
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	4ba6      	ldr	r3, [pc, #664]	; (80078dc <_svfprintf_r+0x5d4>)
 8007644:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007648:	f7f9 fa6e 	bl	8000b28 <__aeabi_dcmple>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 84e7 	bne.w	8008020 <_svfprintf_r+0xd18>
 8007652:	f000 bdfd 	b.w	8008250 <_svfprintf_r+0xf48>
 8007656:	b10a      	cbz	r2, 800765c <_svfprintf_r+0x354>
 8007658:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800765c:	f015 0f20 	tst.w	r5, #32
 8007660:	f107 0304 	add.w	r3, r7, #4
 8007664:	d007      	beq.n	8007676 <_svfprintf_r+0x36e>
 8007666:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	17ce      	asrs	r6, r1, #31
 800766c:	4608      	mov	r0, r1
 800766e:	4631      	mov	r1, r6
 8007670:	e9c2 0100 	strd	r0, r1, [r2]
 8007674:	e00b      	b.n	800768e <_svfprintf_r+0x386>
 8007676:	06e9      	lsls	r1, r5, #27
 8007678:	d406      	bmi.n	8007688 <_svfprintf_r+0x380>
 800767a:	066a      	lsls	r2, r5, #25
 800767c:	d504      	bpl.n	8007688 <_svfprintf_r+0x380>
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8007684:	8011      	strh	r1, [r2, #0]
 8007686:	e002      	b.n	800768e <_svfprintf_r+0x386>
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	461f      	mov	r7, r3
 8007690:	e670      	b.n	8007374 <_svfprintf_r+0x6c>
 8007692:	f045 0510 	orr.w	r5, r5, #16
 8007696:	f015 0320 	ands.w	r3, r5, #32
 800769a:	d009      	beq.n	80076b0 <_svfprintf_r+0x3a8>
 800769c:	3707      	adds	r7, #7
 800769e:	f027 0707 	bic.w	r7, r7, #7
 80076a2:	f107 0308 	add.w	r3, r7, #8
 80076a6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	2300      	movs	r3, #0
 80076ae:	e07b      	b.n	80077a8 <_svfprintf_r+0x4a0>
 80076b0:	1d3a      	adds	r2, r7, #4
 80076b2:	f015 0110 	ands.w	r1, r5, #16
 80076b6:	9203      	str	r2, [sp, #12]
 80076b8:	d105      	bne.n	80076c6 <_svfprintf_r+0x3be>
 80076ba:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80076be:	d002      	beq.n	80076c6 <_svfprintf_r+0x3be>
 80076c0:	883e      	ldrh	r6, [r7, #0]
 80076c2:	2700      	movs	r7, #0
 80076c4:	e7f2      	b.n	80076ac <_svfprintf_r+0x3a4>
 80076c6:	683e      	ldr	r6, [r7, #0]
 80076c8:	2700      	movs	r7, #0
 80076ca:	e06d      	b.n	80077a8 <_svfprintf_r+0x4a0>
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	2330      	movs	r3, #48	; 0x30
 80076d2:	2278      	movs	r2, #120	; 0x78
 80076d4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80076d8:	4b81      	ldr	r3, [pc, #516]	; (80078e0 <_svfprintf_r+0x5d8>)
 80076da:	683e      	ldr	r6, [r7, #0]
 80076dc:	9311      	str	r3, [sp, #68]	; 0x44
 80076de:	2700      	movs	r7, #0
 80076e0:	f045 0502 	orr.w	r5, r5, #2
 80076e4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80076e8:	2302      	movs	r3, #2
 80076ea:	9202      	str	r2, [sp, #8]
 80076ec:	e05c      	b.n	80077a8 <_svfprintf_r+0x4a0>
 80076ee:	2600      	movs	r6, #0
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	45b1      	cmp	r9, r6
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	f8d7 8000 	ldr.w	r8, [r7]
 80076fa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80076fe:	db0a      	blt.n	8007716 <_svfprintf_r+0x40e>
 8007700:	464a      	mov	r2, r9
 8007702:	4631      	mov	r1, r6
 8007704:	4640      	mov	r0, r8
 8007706:	f7f8 fd8b 	bl	8000220 <memchr>
 800770a:	2800      	cmp	r0, #0
 800770c:	f000 80ea 	beq.w	80078e4 <_svfprintf_r+0x5dc>
 8007710:	ebc8 0900 	rsb	r9, r8, r0
 8007714:	e0e7      	b.n	80078e6 <_svfprintf_r+0x5de>
 8007716:	4640      	mov	r0, r8
 8007718:	f7f8 fd7a 	bl	8000210 <strlen>
 800771c:	4681      	mov	r9, r0
 800771e:	e0e2      	b.n	80078e6 <_svfprintf_r+0x5de>
 8007720:	f045 0510 	orr.w	r5, r5, #16
 8007724:	06ae      	lsls	r6, r5, #26
 8007726:	d508      	bpl.n	800773a <_svfprintf_r+0x432>
 8007728:	3707      	adds	r7, #7
 800772a:	f027 0707 	bic.w	r7, r7, #7
 800772e:	f107 0308 	add.w	r3, r7, #8
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007738:	e00a      	b.n	8007750 <_svfprintf_r+0x448>
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	f015 0f10 	tst.w	r5, #16
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	d103      	bne.n	800774c <_svfprintf_r+0x444>
 8007744:	0668      	lsls	r0, r5, #25
 8007746:	d501      	bpl.n	800774c <_svfprintf_r+0x444>
 8007748:	883e      	ldrh	r6, [r7, #0]
 800774a:	e000      	b.n	800774e <_svfprintf_r+0x446>
 800774c:	683e      	ldr	r6, [r7, #0]
 800774e:	2700      	movs	r7, #0
 8007750:	2301      	movs	r3, #1
 8007752:	e029      	b.n	80077a8 <_svfprintf_r+0x4a0>
 8007754:	b10a      	cbz	r2, 800775a <_svfprintf_r+0x452>
 8007756:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800775a:	4b61      	ldr	r3, [pc, #388]	; (80078e0 <_svfprintf_r+0x5d8>)
 800775c:	9311      	str	r3, [sp, #68]	; 0x44
 800775e:	06a9      	lsls	r1, r5, #26
 8007760:	d508      	bpl.n	8007774 <_svfprintf_r+0x46c>
 8007762:	3707      	adds	r7, #7
 8007764:	f027 0707 	bic.w	r7, r7, #7
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	9303      	str	r3, [sp, #12]
 800776e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007772:	e00a      	b.n	800778a <_svfprintf_r+0x482>
 8007774:	1d3b      	adds	r3, r7, #4
 8007776:	f015 0f10 	tst.w	r5, #16
 800777a:	9303      	str	r3, [sp, #12]
 800777c:	d103      	bne.n	8007786 <_svfprintf_r+0x47e>
 800777e:	066a      	lsls	r2, r5, #25
 8007780:	d501      	bpl.n	8007786 <_svfprintf_r+0x47e>
 8007782:	883e      	ldrh	r6, [r7, #0]
 8007784:	e000      	b.n	8007788 <_svfprintf_r+0x480>
 8007786:	683e      	ldr	r6, [r7, #0]
 8007788:	2700      	movs	r7, #0
 800778a:	07eb      	lsls	r3, r5, #31
 800778c:	d50b      	bpl.n	80077a6 <_svfprintf_r+0x49e>
 800778e:	ea56 0307 	orrs.w	r3, r6, r7
 8007792:	d008      	beq.n	80077a6 <_svfprintf_r+0x49e>
 8007794:	2330      	movs	r3, #48	; 0x30
 8007796:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800779a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800779e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80077a2:	f045 0502 	orr.w	r5, r5, #2
 80077a6:	2302      	movs	r3, #2
 80077a8:	2200      	movs	r2, #0
 80077aa:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80077ae:	e000      	b.n	80077b2 <_svfprintf_r+0x4aa>
 80077b0:	2301      	movs	r3, #1
 80077b2:	f1b9 0f00 	cmp.w	r9, #0
 80077b6:	f2c0 855c 	blt.w	8008272 <_svfprintf_r+0xf6a>
 80077ba:	ea56 0207 	orrs.w	r2, r6, r7
 80077be:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80077c2:	d103      	bne.n	80077cc <_svfprintf_r+0x4c4>
 80077c4:	f1b9 0f00 	cmp.w	r9, #0
 80077c8:	d05f      	beq.n	800788a <_svfprintf_r+0x582>
 80077ca:	e006      	b.n	80077da <_svfprintf_r+0x4d2>
 80077cc:	460d      	mov	r5, r1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d025      	beq.n	800781e <_svfprintf_r+0x516>
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d046      	beq.n	8007864 <_svfprintf_r+0x55c>
 80077d6:	4629      	mov	r1, r5
 80077d8:	e007      	b.n	80077ea <_svfprintf_r+0x4e2>
 80077da:	460d      	mov	r5, r1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d022      	beq.n	8007826 <_svfprintf_r+0x51e>
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d03d      	beq.n	8007860 <_svfprintf_r+0x558>
 80077e4:	4629      	mov	r1, r5
 80077e6:	2600      	movs	r6, #0
 80077e8:	2700      	movs	r7, #0
 80077ea:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80077ee:	08f2      	lsrs	r2, r6, #3
 80077f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80077f4:	08f8      	lsrs	r0, r7, #3
 80077f6:	f006 0307 	and.w	r3, r6, #7
 80077fa:	4607      	mov	r7, r0
 80077fc:	4616      	mov	r6, r2
 80077fe:	3330      	adds	r3, #48	; 0x30
 8007800:	ea56 0207 	orrs.w	r2, r6, r7
 8007804:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007808:	d1f1      	bne.n	80077ee <_svfprintf_r+0x4e6>
 800780a:	07e8      	lsls	r0, r5, #31
 800780c:	d548      	bpl.n	80078a0 <_svfprintf_r+0x598>
 800780e:	2b30      	cmp	r3, #48	; 0x30
 8007810:	d046      	beq.n	80078a0 <_svfprintf_r+0x598>
 8007812:	2330      	movs	r3, #48	; 0x30
 8007814:	f808 3c01 	strb.w	r3, [r8, #-1]
 8007818:	f108 38ff 	add.w	r8, r8, #4294967295
 800781c:	e040      	b.n	80078a0 <_svfprintf_r+0x598>
 800781e:	2f00      	cmp	r7, #0
 8007820:	bf08      	it	eq
 8007822:	2e0a      	cmpeq	r6, #10
 8007824:	d205      	bcs.n	8007832 <_svfprintf_r+0x52a>
 8007826:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800782a:	3630      	adds	r6, #48	; 0x30
 800782c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8007830:	e029      	b.n	8007886 <_svfprintf_r+0x57e>
 8007832:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	220a      	movs	r2, #10
 800783c:	2300      	movs	r3, #0
 800783e:	f7f9 f9cf 	bl	8000be0 <__aeabi_uldivmod>
 8007842:	3230      	adds	r2, #48	; 0x30
 8007844:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8007848:	2300      	movs	r3, #0
 800784a:	4630      	mov	r0, r6
 800784c:	4639      	mov	r1, r7
 800784e:	220a      	movs	r2, #10
 8007850:	f7f9 f9c6 	bl	8000be0 <__aeabi_uldivmod>
 8007854:	4606      	mov	r6, r0
 8007856:	460f      	mov	r7, r1
 8007858:	ea56 0307 	orrs.w	r3, r6, r7
 800785c:	d1eb      	bne.n	8007836 <_svfprintf_r+0x52e>
 800785e:	e012      	b.n	8007886 <_svfprintf_r+0x57e>
 8007860:	2600      	movs	r6, #0
 8007862:	2700      	movs	r7, #0
 8007864:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007868:	f006 030f 	and.w	r3, r6, #15
 800786c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800786e:	5cd3      	ldrb	r3, [r2, r3]
 8007870:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007874:	0933      	lsrs	r3, r6, #4
 8007876:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800787a:	093a      	lsrs	r2, r7, #4
 800787c:	461e      	mov	r6, r3
 800787e:	4617      	mov	r7, r2
 8007880:	ea56 0307 	orrs.w	r3, r6, r7
 8007884:	d1f0      	bne.n	8007868 <_svfprintf_r+0x560>
 8007886:	4629      	mov	r1, r5
 8007888:	e00a      	b.n	80078a0 <_svfprintf_r+0x598>
 800788a:	b93b      	cbnz	r3, 800789c <_svfprintf_r+0x594>
 800788c:	07ea      	lsls	r2, r5, #31
 800788e:	d505      	bpl.n	800789c <_svfprintf_r+0x594>
 8007890:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8007894:	2330      	movs	r3, #48	; 0x30
 8007896:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800789a:	e001      	b.n	80078a0 <_svfprintf_r+0x598>
 800789c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80078a0:	464e      	mov	r6, r9
 80078a2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80078a6:	ebc8 0909 	rsb	r9, r8, r9
 80078aa:	460d      	mov	r5, r1
 80078ac:	2700      	movs	r7, #0
 80078ae:	e01b      	b.n	80078e8 <_svfprintf_r+0x5e0>
 80078b0:	b10a      	cbz	r2, 80078b6 <_svfprintf_r+0x5ae>
 80078b2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 83a0 	beq.w	8007ffe <_svfprintf_r+0xcf6>
 80078be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80078c2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80078c6:	2600      	movs	r6, #0
 80078c8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80078cc:	9703      	str	r7, [sp, #12]
 80078ce:	f04f 0901 	mov.w	r9, #1
 80078d2:	4637      	mov	r7, r6
 80078d4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80078d8:	e006      	b.n	80078e8 <_svfprintf_r+0x5e0>
 80078da:	bf00      	nop
 80078dc:	7fefffff 	.word	0x7fefffff
 80078e0:	0800a717 	.word	0x0800a717
 80078e4:	4606      	mov	r6, r0
 80078e6:	4637      	mov	r7, r6
 80078e8:	454e      	cmp	r6, r9
 80078ea:	4633      	mov	r3, r6
 80078ec:	bfb8      	it	lt
 80078ee:	464b      	movlt	r3, r9
 80078f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078f2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80078f6:	b113      	cbz	r3, 80078fe <_svfprintf_r+0x5f6>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fa:	3301      	adds	r3, #1
 80078fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80078fe:	f015 0302 	ands.w	r3, r5, #2
 8007902:	9314      	str	r3, [sp, #80]	; 0x50
 8007904:	bf1e      	ittt	ne
 8007906:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8007908:	3302      	addne	r3, #2
 800790a:	930b      	strne	r3, [sp, #44]	; 0x2c
 800790c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8007910:	9315      	str	r3, [sp, #84]	; 0x54
 8007912:	d139      	bne.n	8007988 <_svfprintf_r+0x680>
 8007914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	930c      	str	r3, [sp, #48]	; 0x30
 800791e:	dd33      	ble.n	8007988 <_svfprintf_r+0x680>
 8007920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007922:	2b10      	cmp	r3, #16
 8007924:	4ba6      	ldr	r3, [pc, #664]	; (8007bc0 <_svfprintf_r+0x8b8>)
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	dd18      	ble.n	800795c <_svfprintf_r+0x654>
 800792a:	2310      	movs	r3, #16
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007930:	3310      	adds	r3, #16
 8007932:	9321      	str	r3, [sp, #132]	; 0x84
 8007934:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007936:	3301      	adds	r3, #1
 8007938:	2b07      	cmp	r3, #7
 800793a:	9320      	str	r3, [sp, #128]	; 0x80
 800793c:	dc01      	bgt.n	8007942 <_svfprintf_r+0x63a>
 800793e:	3408      	adds	r4, #8
 8007940:	e008      	b.n	8007954 <_svfprintf_r+0x64c>
 8007942:	aa1f      	add	r2, sp, #124	; 0x7c
 8007944:	4659      	mov	r1, fp
 8007946:	4650      	mov	r0, sl
 8007948:	f002 fabe 	bl	8009ec8 <__ssprint_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 835d 	bne.w	800800c <_svfprintf_r+0xd04>
 8007952:	ac2c      	add	r4, sp, #176	; 0xb0
 8007954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007956:	3b10      	subs	r3, #16
 8007958:	930c      	str	r3, [sp, #48]	; 0x30
 800795a:	e7e1      	b.n	8007920 <_svfprintf_r+0x618>
 800795c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800795e:	6063      	str	r3, [r4, #4]
 8007960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007964:	4413      	add	r3, r2
 8007966:	9321      	str	r3, [sp, #132]	; 0x84
 8007968:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800796a:	3301      	adds	r3, #1
 800796c:	2b07      	cmp	r3, #7
 800796e:	9320      	str	r3, [sp, #128]	; 0x80
 8007970:	dc01      	bgt.n	8007976 <_svfprintf_r+0x66e>
 8007972:	3408      	adds	r4, #8
 8007974:	e008      	b.n	8007988 <_svfprintf_r+0x680>
 8007976:	aa1f      	add	r2, sp, #124	; 0x7c
 8007978:	4659      	mov	r1, fp
 800797a:	4650      	mov	r0, sl
 800797c:	f002 faa4 	bl	8009ec8 <__ssprint_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	f040 8343 	bne.w	800800c <_svfprintf_r+0xd04>
 8007986:	ac2c      	add	r4, sp, #176	; 0xb0
 8007988:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800798c:	b1bb      	cbz	r3, 80079be <_svfprintf_r+0x6b6>
 800798e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	2301      	movs	r3, #1
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800799a:	3301      	adds	r3, #1
 800799c:	9321      	str	r3, [sp, #132]	; 0x84
 800799e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079a0:	3301      	adds	r3, #1
 80079a2:	2b07      	cmp	r3, #7
 80079a4:	9320      	str	r3, [sp, #128]	; 0x80
 80079a6:	dc01      	bgt.n	80079ac <_svfprintf_r+0x6a4>
 80079a8:	3408      	adds	r4, #8
 80079aa:	e008      	b.n	80079be <_svfprintf_r+0x6b6>
 80079ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80079ae:	4659      	mov	r1, fp
 80079b0:	4650      	mov	r0, sl
 80079b2:	f002 fa89 	bl	8009ec8 <__ssprint_r>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f040 8328 	bne.w	800800c <_svfprintf_r+0xd04>
 80079bc:	ac2c      	add	r4, sp, #176	; 0xb0
 80079be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079c0:	b1b3      	cbz	r3, 80079f0 <_svfprintf_r+0x6e8>
 80079c2:	ab18      	add	r3, sp, #96	; 0x60
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	2302      	movs	r3, #2
 80079c8:	6063      	str	r3, [r4, #4]
 80079ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079cc:	3302      	adds	r3, #2
 80079ce:	9321      	str	r3, [sp, #132]	; 0x84
 80079d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079d2:	3301      	adds	r3, #1
 80079d4:	2b07      	cmp	r3, #7
 80079d6:	9320      	str	r3, [sp, #128]	; 0x80
 80079d8:	dc01      	bgt.n	80079de <_svfprintf_r+0x6d6>
 80079da:	3408      	adds	r4, #8
 80079dc:	e008      	b.n	80079f0 <_svfprintf_r+0x6e8>
 80079de:	aa1f      	add	r2, sp, #124	; 0x7c
 80079e0:	4659      	mov	r1, fp
 80079e2:	4650      	mov	r0, sl
 80079e4:	f002 fa70 	bl	8009ec8 <__ssprint_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f040 830f 	bne.w	800800c <_svfprintf_r+0xd04>
 80079ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80079f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d135      	bne.n	8007a62 <_svfprintf_r+0x75a>
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd30      	ble.n	8007a62 <_svfprintf_r+0x75a>
 8007a00:	4a70      	ldr	r2, [pc, #448]	; (8007bc4 <_svfprintf_r+0x8bc>)
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	dd18      	ble.n	8007a3a <_svfprintf_r+0x732>
 8007a08:	2210      	movs	r2, #16
 8007a0a:	6062      	str	r2, [r4, #4]
 8007a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a0e:	3210      	adds	r2, #16
 8007a10:	9221      	str	r2, [sp, #132]	; 0x84
 8007a12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a14:	3201      	adds	r2, #1
 8007a16:	2a07      	cmp	r2, #7
 8007a18:	9220      	str	r2, [sp, #128]	; 0x80
 8007a1a:	dc01      	bgt.n	8007a20 <_svfprintf_r+0x718>
 8007a1c:	3408      	adds	r4, #8
 8007a1e:	e00a      	b.n	8007a36 <_svfprintf_r+0x72e>
 8007a20:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a22:	4659      	mov	r1, fp
 8007a24:	4650      	mov	r0, sl
 8007a26:	930c      	str	r3, [sp, #48]	; 0x30
 8007a28:	f002 fa4e 	bl	8009ec8 <__ssprint_r>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 82ed 	bne.w	800800c <_svfprintf_r+0xd04>
 8007a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a34:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a36:	3b10      	subs	r3, #16
 8007a38:	e7e2      	b.n	8007a00 <_svfprintf_r+0x6f8>
 8007a3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a3c:	6063      	str	r3, [r4, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	9321      	str	r3, [sp, #132]	; 0x84
 8007a42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a44:	3301      	adds	r3, #1
 8007a46:	2b07      	cmp	r3, #7
 8007a48:	9320      	str	r3, [sp, #128]	; 0x80
 8007a4a:	dc01      	bgt.n	8007a50 <_svfprintf_r+0x748>
 8007a4c:	3408      	adds	r4, #8
 8007a4e:	e008      	b.n	8007a62 <_svfprintf_r+0x75a>
 8007a50:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a52:	4659      	mov	r1, fp
 8007a54:	4650      	mov	r0, sl
 8007a56:	f002 fa37 	bl	8009ec8 <__ssprint_r>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f040 82d6 	bne.w	800800c <_svfprintf_r+0xd04>
 8007a60:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a62:	ebc9 0606 	rsb	r6, r9, r6
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	dd2e      	ble.n	8007ac8 <_svfprintf_r+0x7c0>
 8007a6a:	4b56      	ldr	r3, [pc, #344]	; (8007bc4 <_svfprintf_r+0x8bc>)
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	2e10      	cmp	r6, #16
 8007a70:	dd16      	ble.n	8007aa0 <_svfprintf_r+0x798>
 8007a72:	2310      	movs	r3, #16
 8007a74:	6063      	str	r3, [r4, #4]
 8007a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a78:	3310      	adds	r3, #16
 8007a7a:	9321      	str	r3, [sp, #132]	; 0x84
 8007a7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a7e:	3301      	adds	r3, #1
 8007a80:	2b07      	cmp	r3, #7
 8007a82:	9320      	str	r3, [sp, #128]	; 0x80
 8007a84:	dc01      	bgt.n	8007a8a <_svfprintf_r+0x782>
 8007a86:	3408      	adds	r4, #8
 8007a88:	e008      	b.n	8007a9c <_svfprintf_r+0x794>
 8007a8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f002 fa1a 	bl	8009ec8 <__ssprint_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f040 82b9 	bne.w	800800c <_svfprintf_r+0xd04>
 8007a9a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a9c:	3e10      	subs	r6, #16
 8007a9e:	e7e4      	b.n	8007a6a <_svfprintf_r+0x762>
 8007aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aa2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007aa4:	6066      	str	r6, [r4, #4]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4406      	add	r6, r0
 8007aaa:	2b07      	cmp	r3, #7
 8007aac:	9621      	str	r6, [sp, #132]	; 0x84
 8007aae:	9320      	str	r3, [sp, #128]	; 0x80
 8007ab0:	dc01      	bgt.n	8007ab6 <_svfprintf_r+0x7ae>
 8007ab2:	3408      	adds	r4, #8
 8007ab4:	e008      	b.n	8007ac8 <_svfprintf_r+0x7c0>
 8007ab6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ab8:	4659      	mov	r1, fp
 8007aba:	4650      	mov	r0, sl
 8007abc:	f002 fa04 	bl	8009ec8 <__ssprint_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f040 82a3 	bne.w	800800c <_svfprintf_r+0xd04>
 8007ac6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ac8:	05eb      	lsls	r3, r5, #23
 8007aca:	d414      	bmi.n	8007af6 <_svfprintf_r+0x7ee>
 8007acc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ace:	e884 0300 	stmia.w	r4, {r8, r9}
 8007ad2:	444b      	add	r3, r9
 8007ad4:	9321      	str	r3, [sp, #132]	; 0x84
 8007ad6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2b07      	cmp	r3, #7
 8007adc:	9320      	str	r3, [sp, #128]	; 0x80
 8007ade:	f340 8244 	ble.w	8007f6a <_svfprintf_r+0xc62>
 8007ae2:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f002 f9ee 	bl	8009ec8 <__ssprint_r>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f040 828d 	bne.w	800800c <_svfprintf_r+0xd04>
 8007af2:	ac2c      	add	r4, sp, #176	; 0xb0
 8007af4:	e23a      	b.n	8007f6c <_svfprintf_r+0xc64>
 8007af6:	9b02      	ldr	r3, [sp, #8]
 8007af8:	2b65      	cmp	r3, #101	; 0x65
 8007afa:	f340 81ad 	ble.w	8007e58 <_svfprintf_r+0xb50>
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b06:	f7f8 fffb 	bl	8000b00 <__aeabi_dcmpeq>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d05e      	beq.n	8007bcc <_svfprintf_r+0x8c4>
 8007b0e:	4b2e      	ldr	r3, [pc, #184]	; (8007bc8 <_svfprintf_r+0x8c0>)
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	2301      	movs	r3, #1
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b18:	3301      	adds	r3, #1
 8007b1a:	9321      	str	r3, [sp, #132]	; 0x84
 8007b1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b1e:	3301      	adds	r3, #1
 8007b20:	2b07      	cmp	r3, #7
 8007b22:	9320      	str	r3, [sp, #128]	; 0x80
 8007b24:	dc01      	bgt.n	8007b2a <_svfprintf_r+0x822>
 8007b26:	3408      	adds	r4, #8
 8007b28:	e008      	b.n	8007b3c <_svfprintf_r+0x834>
 8007b2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f002 f9ca 	bl	8009ec8 <__ssprint_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f040 8269 	bne.w	800800c <_svfprintf_r+0xd04>
 8007b3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b3e:	9a04      	ldr	r2, [sp, #16]
 8007b40:	4293      	cmp	r3, r2
 8007b42:	db02      	blt.n	8007b4a <_svfprintf_r+0x842>
 8007b44:	07ee      	lsls	r6, r5, #31
 8007b46:	f140 8211 	bpl.w	8007f6c <_svfprintf_r+0xc64>
 8007b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	9b08      	ldr	r3, [sp, #32]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	9a08      	ldr	r2, [sp, #32]
 8007b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b56:	4413      	add	r3, r2
 8007b58:	9321      	str	r3, [sp, #132]	; 0x84
 8007b5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	2b07      	cmp	r3, #7
 8007b60:	9320      	str	r3, [sp, #128]	; 0x80
 8007b62:	dc01      	bgt.n	8007b68 <_svfprintf_r+0x860>
 8007b64:	3408      	adds	r4, #8
 8007b66:	e008      	b.n	8007b7a <_svfprintf_r+0x872>
 8007b68:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b6a:	4659      	mov	r1, fp
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f002 f9ab 	bl	8009ec8 <__ssprint_r>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f040 824a 	bne.w	800800c <_svfprintf_r+0xd04>
 8007b78:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b7a:	9b04      	ldr	r3, [sp, #16]
 8007b7c:	1e5e      	subs	r6, r3, #1
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	f340 81f4 	ble.w	8007f6c <_svfprintf_r+0xc64>
 8007b84:	4f0f      	ldr	r7, [pc, #60]	; (8007bc4 <_svfprintf_r+0x8bc>)
 8007b86:	f04f 0810 	mov.w	r8, #16
 8007b8a:	2e10      	cmp	r6, #16
 8007b8c:	f340 8159 	ble.w	8007e42 <_svfprintf_r+0xb3a>
 8007b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b92:	3310      	adds	r3, #16
 8007b94:	9321      	str	r3, [sp, #132]	; 0x84
 8007b96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b98:	3301      	adds	r3, #1
 8007b9a:	2b07      	cmp	r3, #7
 8007b9c:	e884 0180 	stmia.w	r4, {r7, r8}
 8007ba0:	9320      	str	r3, [sp, #128]	; 0x80
 8007ba2:	dc01      	bgt.n	8007ba8 <_svfprintf_r+0x8a0>
 8007ba4:	3408      	adds	r4, #8
 8007ba6:	e008      	b.n	8007bba <_svfprintf_r+0x8b2>
 8007ba8:	aa1f      	add	r2, sp, #124	; 0x7c
 8007baa:	4659      	mov	r1, fp
 8007bac:	4650      	mov	r0, sl
 8007bae:	f002 f98b 	bl	8009ec8 <__ssprint_r>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f040 822a 	bne.w	800800c <_svfprintf_r+0xd04>
 8007bb8:	ac2c      	add	r4, sp, #176	; 0xb0
 8007bba:	3e10      	subs	r6, #16
 8007bbc:	e7e5      	b.n	8007b8a <_svfprintf_r+0x882>
 8007bbe:	bf00      	nop
 8007bc0:	0800a72a 	.word	0x0800a72a
 8007bc4:	0800a6e6 	.word	0x0800a6e6
 8007bc8:	0800a728 	.word	0x0800a728
 8007bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc7c      	bgt.n	8007ccc <_svfprintf_r+0x9c4>
 8007bd2:	4b9f      	ldr	r3, [pc, #636]	; (8007e50 <_svfprintf_r+0xb48>)
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bdc:	3301      	adds	r3, #1
 8007bde:	9321      	str	r3, [sp, #132]	; 0x84
 8007be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007be2:	3301      	adds	r3, #1
 8007be4:	2b07      	cmp	r3, #7
 8007be6:	9320      	str	r3, [sp, #128]	; 0x80
 8007be8:	dc01      	bgt.n	8007bee <_svfprintf_r+0x8e6>
 8007bea:	3408      	adds	r4, #8
 8007bec:	e008      	b.n	8007c00 <_svfprintf_r+0x8f8>
 8007bee:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bf0:	4659      	mov	r1, fp
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f002 f968 	bl	8009ec8 <__ssprint_r>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f040 8207 	bne.w	800800c <_svfprintf_r+0xd04>
 8007bfe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c02:	b923      	cbnz	r3, 8007c0e <_svfprintf_r+0x906>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	b913      	cbnz	r3, 8007c0e <_svfprintf_r+0x906>
 8007c08:	07e8      	lsls	r0, r5, #31
 8007c0a:	f140 81af 	bpl.w	8007f6c <_svfprintf_r+0xc64>
 8007c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	9b08      	ldr	r3, [sp, #32]
 8007c14:	6063      	str	r3, [r4, #4]
 8007c16:	9a08      	ldr	r2, [sp, #32]
 8007c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c1a:	4413      	add	r3, r2
 8007c1c:	9321      	str	r3, [sp, #132]	; 0x84
 8007c1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c20:	3301      	adds	r3, #1
 8007c22:	2b07      	cmp	r3, #7
 8007c24:	9320      	str	r3, [sp, #128]	; 0x80
 8007c26:	dc02      	bgt.n	8007c2e <_svfprintf_r+0x926>
 8007c28:	f104 0308 	add.w	r3, r4, #8
 8007c2c:	e008      	b.n	8007c40 <_svfprintf_r+0x938>
 8007c2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c30:	4659      	mov	r1, fp
 8007c32:	4650      	mov	r0, sl
 8007c34:	f002 f948 	bl	8009ec8 <__ssprint_r>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f040 81e7 	bne.w	800800c <_svfprintf_r+0xd04>
 8007c3e:	ab2c      	add	r3, sp, #176	; 0xb0
 8007c40:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007c42:	4276      	negs	r6, r6
 8007c44:	2e00      	cmp	r6, #0
 8007c46:	dd30      	ble.n	8007caa <_svfprintf_r+0x9a2>
 8007c48:	4f82      	ldr	r7, [pc, #520]	; (8007e54 <_svfprintf_r+0xb4c>)
 8007c4a:	2410      	movs	r4, #16
 8007c4c:	2e10      	cmp	r6, #16
 8007c4e:	dd16      	ble.n	8007c7e <_svfprintf_r+0x976>
 8007c50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c52:	601f      	str	r7, [r3, #0]
 8007c54:	3210      	adds	r2, #16
 8007c56:	9221      	str	r2, [sp, #132]	; 0x84
 8007c58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c5a:	605c      	str	r4, [r3, #4]
 8007c5c:	3201      	adds	r2, #1
 8007c5e:	2a07      	cmp	r2, #7
 8007c60:	9220      	str	r2, [sp, #128]	; 0x80
 8007c62:	dc01      	bgt.n	8007c68 <_svfprintf_r+0x960>
 8007c64:	3308      	adds	r3, #8
 8007c66:	e008      	b.n	8007c7a <_svfprintf_r+0x972>
 8007c68:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	f002 f92b 	bl	8009ec8 <__ssprint_r>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f040 81ca 	bne.w	800800c <_svfprintf_r+0xd04>
 8007c78:	ab2c      	add	r3, sp, #176	; 0xb0
 8007c7a:	3e10      	subs	r6, #16
 8007c7c:	e7e6      	b.n	8007c4c <_svfprintf_r+0x944>
 8007c7e:	4a75      	ldr	r2, [pc, #468]	; (8007e54 <_svfprintf_r+0xb4c>)
 8007c80:	e883 0044 	stmia.w	r3, {r2, r6}
 8007c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c86:	4416      	add	r6, r2
 8007c88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c8a:	9621      	str	r6, [sp, #132]	; 0x84
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	2a07      	cmp	r2, #7
 8007c90:	9220      	str	r2, [sp, #128]	; 0x80
 8007c92:	dc01      	bgt.n	8007c98 <_svfprintf_r+0x990>
 8007c94:	3308      	adds	r3, #8
 8007c96:	e008      	b.n	8007caa <_svfprintf_r+0x9a2>
 8007c98:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c9a:	4659      	mov	r1, fp
 8007c9c:	4650      	mov	r0, sl
 8007c9e:	f002 f913 	bl	8009ec8 <__ssprint_r>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	f040 81b2 	bne.w	800800c <_svfprintf_r+0xd04>
 8007ca8:	ab2c      	add	r3, sp, #176	; 0xb0
 8007caa:	9a04      	ldr	r2, [sp, #16]
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	9904      	ldr	r1, [sp, #16]
 8007cb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cb2:	f8c3 8000 	str.w	r8, [r3]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	9221      	str	r2, [sp, #132]	; 0x84
 8007cba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cbc:	3201      	adds	r2, #1
 8007cbe:	2a07      	cmp	r2, #7
 8007cc0:	9220      	str	r2, [sp, #128]	; 0x80
 8007cc2:	f73f af0e 	bgt.w	8007ae2 <_svfprintf_r+0x7da>
 8007cc6:	f103 0408 	add.w	r4, r3, #8
 8007cca:	e14f      	b.n	8007f6c <_svfprintf_r+0xc64>
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	42bb      	cmp	r3, r7
 8007cd0:	bfa8      	it	ge
 8007cd2:	463b      	movge	r3, r7
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	461e      	mov	r6, r3
 8007cd8:	dd15      	ble.n	8007d06 <_svfprintf_r+0x9fe>
 8007cda:	6063      	str	r3, [r4, #4]
 8007cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cde:	f8c4 8000 	str.w	r8, [r4]
 8007ce2:	4433      	add	r3, r6
 8007ce4:	9321      	str	r3, [sp, #132]	; 0x84
 8007ce6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ce8:	3301      	adds	r3, #1
 8007cea:	2b07      	cmp	r3, #7
 8007cec:	9320      	str	r3, [sp, #128]	; 0x80
 8007cee:	dc01      	bgt.n	8007cf4 <_svfprintf_r+0x9ec>
 8007cf0:	3408      	adds	r4, #8
 8007cf2:	e008      	b.n	8007d06 <_svfprintf_r+0x9fe>
 8007cf4:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cf6:	4659      	mov	r1, fp
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f002 f8e5 	bl	8009ec8 <__ssprint_r>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f040 8184 	bne.w	800800c <_svfprintf_r+0xd04>
 8007d04:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	bfac      	ite	ge
 8007d0a:	1bbe      	subge	r6, r7, r6
 8007d0c:	463e      	movlt	r6, r7
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	dd30      	ble.n	8007d74 <_svfprintf_r+0xa6c>
 8007d12:	f04f 0910 	mov.w	r9, #16
 8007d16:	4b4f      	ldr	r3, [pc, #316]	; (8007e54 <_svfprintf_r+0xb4c>)
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	2e10      	cmp	r6, #16
 8007d1c:	dd16      	ble.n	8007d4c <_svfprintf_r+0xa44>
 8007d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d20:	f8c4 9004 	str.w	r9, [r4, #4]
 8007d24:	3310      	adds	r3, #16
 8007d26:	9321      	str	r3, [sp, #132]	; 0x84
 8007d28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	2b07      	cmp	r3, #7
 8007d2e:	9320      	str	r3, [sp, #128]	; 0x80
 8007d30:	dc01      	bgt.n	8007d36 <_svfprintf_r+0xa2e>
 8007d32:	3408      	adds	r4, #8
 8007d34:	e008      	b.n	8007d48 <_svfprintf_r+0xa40>
 8007d36:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d38:	4659      	mov	r1, fp
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f002 f8c4 	bl	8009ec8 <__ssprint_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f040 8163 	bne.w	800800c <_svfprintf_r+0xd04>
 8007d46:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d48:	3e10      	subs	r6, #16
 8007d4a:	e7e4      	b.n	8007d16 <_svfprintf_r+0xa0e>
 8007d4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d4e:	6066      	str	r6, [r4, #4]
 8007d50:	441e      	add	r6, r3
 8007d52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d54:	9621      	str	r6, [sp, #132]	; 0x84
 8007d56:	3301      	adds	r3, #1
 8007d58:	2b07      	cmp	r3, #7
 8007d5a:	9320      	str	r3, [sp, #128]	; 0x80
 8007d5c:	dc01      	bgt.n	8007d62 <_svfprintf_r+0xa5a>
 8007d5e:	3408      	adds	r4, #8
 8007d60:	e008      	b.n	8007d74 <_svfprintf_r+0xa6c>
 8007d62:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d64:	4659      	mov	r1, fp
 8007d66:	4650      	mov	r0, sl
 8007d68:	f002 f8ae 	bl	8009ec8 <__ssprint_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f040 814d 	bne.w	800800c <_svfprintf_r+0xd04>
 8007d72:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d76:	9a04      	ldr	r2, [sp, #16]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	4447      	add	r7, r8
 8007d7c:	db01      	blt.n	8007d82 <_svfprintf_r+0xa7a>
 8007d7e:	07e9      	lsls	r1, r5, #31
 8007d80:	d517      	bpl.n	8007db2 <_svfprintf_r+0xaaa>
 8007d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	9b08      	ldr	r3, [sp, #32]
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	9a08      	ldr	r2, [sp, #32]
 8007d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d8e:	4413      	add	r3, r2
 8007d90:	9321      	str	r3, [sp, #132]	; 0x84
 8007d92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d94:	3301      	adds	r3, #1
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	9320      	str	r3, [sp, #128]	; 0x80
 8007d9a:	dc01      	bgt.n	8007da0 <_svfprintf_r+0xa98>
 8007d9c:	3408      	adds	r4, #8
 8007d9e:	e008      	b.n	8007db2 <_svfprintf_r+0xaaa>
 8007da0:	aa1f      	add	r2, sp, #124	; 0x7c
 8007da2:	4659      	mov	r1, fp
 8007da4:	4650      	mov	r0, sl
 8007da6:	f002 f88f 	bl	8009ec8 <__ssprint_r>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f040 812e 	bne.w	800800c <_svfprintf_r+0xd04>
 8007db0:	ac2c      	add	r4, sp, #176	; 0xb0
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	9a04      	ldr	r2, [sp, #16]
 8007db6:	eb08 0603 	add.w	r6, r8, r3
 8007dba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dbc:	1bf6      	subs	r6, r6, r7
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	429e      	cmp	r6, r3
 8007dc2:	bfa8      	it	ge
 8007dc4:	461e      	movge	r6, r3
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	dd14      	ble.n	8007df4 <_svfprintf_r+0xaec>
 8007dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dcc:	6027      	str	r7, [r4, #0]
 8007dce:	4433      	add	r3, r6
 8007dd0:	9321      	str	r3, [sp, #132]	; 0x84
 8007dd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dd4:	6066      	str	r6, [r4, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	2b07      	cmp	r3, #7
 8007dda:	9320      	str	r3, [sp, #128]	; 0x80
 8007ddc:	dc01      	bgt.n	8007de2 <_svfprintf_r+0xada>
 8007dde:	3408      	adds	r4, #8
 8007de0:	e008      	b.n	8007df4 <_svfprintf_r+0xaec>
 8007de2:	aa1f      	add	r2, sp, #124	; 0x7c
 8007de4:	4659      	mov	r1, fp
 8007de6:	4650      	mov	r0, sl
 8007de8:	f002 f86e 	bl	8009ec8 <__ssprint_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	f040 810d 	bne.w	800800c <_svfprintf_r+0xd04>
 8007df2:	ac2c      	add	r4, sp, #176	; 0xb0
 8007df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df6:	9a04      	ldr	r2, [sp, #16]
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	eba2 0303 	sub.w	r3, r2, r3
 8007dfe:	bfac      	ite	ge
 8007e00:	1b9e      	subge	r6, r3, r6
 8007e02:	461e      	movlt	r6, r3
 8007e04:	2e00      	cmp	r6, #0
 8007e06:	f340 80b1 	ble.w	8007f6c <_svfprintf_r+0xc64>
 8007e0a:	4f12      	ldr	r7, [pc, #72]	; (8007e54 <_svfprintf_r+0xb4c>)
 8007e0c:	f04f 0810 	mov.w	r8, #16
 8007e10:	2e10      	cmp	r6, #16
 8007e12:	dd16      	ble.n	8007e42 <_svfprintf_r+0xb3a>
 8007e14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e16:	3310      	adds	r3, #16
 8007e18:	9321      	str	r3, [sp, #132]	; 0x84
 8007e1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	e884 0180 	stmia.w	r4, {r7, r8}
 8007e24:	9320      	str	r3, [sp, #128]	; 0x80
 8007e26:	dc01      	bgt.n	8007e2c <_svfprintf_r+0xb24>
 8007e28:	3408      	adds	r4, #8
 8007e2a:	e008      	b.n	8007e3e <_svfprintf_r+0xb36>
 8007e2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e2e:	4659      	mov	r1, fp
 8007e30:	4650      	mov	r0, sl
 8007e32:	f002 f849 	bl	8009ec8 <__ssprint_r>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f040 80e8 	bne.w	800800c <_svfprintf_r+0xd04>
 8007e3c:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e3e:	3e10      	subs	r6, #16
 8007e40:	e7e6      	b.n	8007e10 <_svfprintf_r+0xb08>
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <_svfprintf_r+0xb4c>)
 8007e44:	e884 0048 	stmia.w	r4, {r3, r6}
 8007e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e4a:	441e      	add	r6, r3
 8007e4c:	9621      	str	r6, [sp, #132]	; 0x84
 8007e4e:	e642      	b.n	8007ad6 <_svfprintf_r+0x7ce>
 8007e50:	0800a728 	.word	0x0800a728
 8007e54:	0800a6e6 	.word	0x0800a6e6
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	dc01      	bgt.n	8007e62 <_svfprintf_r+0xb5a>
 8007e5e:	07ea      	lsls	r2, r5, #31
 8007e60:	d573      	bpl.n	8007f4a <_svfprintf_r+0xc42>
 8007e62:	2301      	movs	r3, #1
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e68:	f8c4 8000 	str.w	r8, [r4]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	9321      	str	r3, [sp, #132]	; 0x84
 8007e70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e72:	3301      	adds	r3, #1
 8007e74:	2b07      	cmp	r3, #7
 8007e76:	9320      	str	r3, [sp, #128]	; 0x80
 8007e78:	dc01      	bgt.n	8007e7e <_svfprintf_r+0xb76>
 8007e7a:	3408      	adds	r4, #8
 8007e7c:	e008      	b.n	8007e90 <_svfprintf_r+0xb88>
 8007e7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e80:	4659      	mov	r1, fp
 8007e82:	4650      	mov	r0, sl
 8007e84:	f002 f820 	bl	8009ec8 <__ssprint_r>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f040 80bf 	bne.w	800800c <_svfprintf_r+0xd04>
 8007e8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	9b08      	ldr	r3, [sp, #32]
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	9a08      	ldr	r2, [sp, #32]
 8007e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e9c:	4413      	add	r3, r2
 8007e9e:	9321      	str	r3, [sp, #132]	; 0x84
 8007ea0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	2b07      	cmp	r3, #7
 8007ea6:	9320      	str	r3, [sp, #128]	; 0x80
 8007ea8:	dc01      	bgt.n	8007eae <_svfprintf_r+0xba6>
 8007eaa:	3408      	adds	r4, #8
 8007eac:	e008      	b.n	8007ec0 <_svfprintf_r+0xbb8>
 8007eae:	aa1f      	add	r2, sp, #124	; 0x7c
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f002 f808 	bl	8009ec8 <__ssprint_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f040 80a7 	bne.w	800800c <_svfprintf_r+0xd04>
 8007ebe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ec8:	f7f8 fe1a 	bl	8000b00 <__aeabi_dcmpeq>
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	1e5e      	subs	r6, r3, #1
 8007ed0:	b9b8      	cbnz	r0, 8007f02 <_svfprintf_r+0xbfa>
 8007ed2:	f108 0301 	add.w	r3, r8, #1
 8007ed6:	e884 0048 	stmia.w	r4, {r3, r6}
 8007eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	2b07      	cmp	r3, #7
 8007eea:	9320      	str	r3, [sp, #128]	; 0x80
 8007eec:	dd34      	ble.n	8007f58 <_svfprintf_r+0xc50>
 8007eee:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	f001 ffe8 	bl	8009ec8 <__ssprint_r>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f040 8087 	bne.w	800800c <_svfprintf_r+0xd04>
 8007efe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f00:	e02b      	b.n	8007f5a <_svfprintf_r+0xc52>
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	dd29      	ble.n	8007f5a <_svfprintf_r+0xc52>
 8007f06:	4fa7      	ldr	r7, [pc, #668]	; (80081a4 <_svfprintf_r+0xe9c>)
 8007f08:	f04f 0810 	mov.w	r8, #16
 8007f0c:	2e10      	cmp	r6, #16
 8007f0e:	dd15      	ble.n	8007f3c <_svfprintf_r+0xc34>
 8007f10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f12:	3310      	adds	r3, #16
 8007f14:	9321      	str	r3, [sp, #132]	; 0x84
 8007f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f18:	3301      	adds	r3, #1
 8007f1a:	2b07      	cmp	r3, #7
 8007f1c:	e884 0180 	stmia.w	r4, {r7, r8}
 8007f20:	9320      	str	r3, [sp, #128]	; 0x80
 8007f22:	dc01      	bgt.n	8007f28 <_svfprintf_r+0xc20>
 8007f24:	3408      	adds	r4, #8
 8007f26:	e007      	b.n	8007f38 <_svfprintf_r+0xc30>
 8007f28:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	4650      	mov	r0, sl
 8007f2e:	f001 ffcb 	bl	8009ec8 <__ssprint_r>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d16a      	bne.n	800800c <_svfprintf_r+0xd04>
 8007f36:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f38:	3e10      	subs	r6, #16
 8007f3a:	e7e7      	b.n	8007f0c <_svfprintf_r+0xc04>
 8007f3c:	4b99      	ldr	r3, [pc, #612]	; (80081a4 <_svfprintf_r+0xe9c>)
 8007f3e:	e884 0048 	stmia.w	r4, {r3, r6}
 8007f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f44:	441e      	add	r6, r3
 8007f46:	9621      	str	r6, [sp, #132]	; 0x84
 8007f48:	e7cc      	b.n	8007ee4 <_svfprintf_r+0xbdc>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f50:	f8c4 8000 	str.w	r8, [r4]
 8007f54:	3301      	adds	r3, #1
 8007f56:	e7c4      	b.n	8007ee2 <_svfprintf_r+0xbda>
 8007f58:	3408      	adds	r4, #8
 8007f5a:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f60:	6063      	str	r3, [r4, #4]
 8007f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f66:	4413      	add	r3, r2
 8007f68:	e5b4      	b.n	8007ad4 <_svfprintf_r+0x7cc>
 8007f6a:	3408      	adds	r4, #8
 8007f6c:	076b      	lsls	r3, r5, #29
 8007f6e:	d40b      	bmi.n	8007f88 <_svfprintf_r+0xc80>
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f76:	428a      	cmp	r2, r1
 8007f78:	bfac      	ite	ge
 8007f7a:	189b      	addge	r3, r3, r2
 8007f7c:	185b      	addlt	r3, r3, r1
 8007f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d035      	beq.n	8007ff2 <_svfprintf_r+0xcea>
 8007f86:	e02e      	b.n	8007fe6 <_svfprintf_r+0xcde>
 8007f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f8c:	1a9d      	subs	r5, r3, r2
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	ddee      	ble.n	8007f70 <_svfprintf_r+0xc68>
 8007f92:	2610      	movs	r6, #16
 8007f94:	4b84      	ldr	r3, [pc, #528]	; (80081a8 <_svfprintf_r+0xea0>)
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	2d10      	cmp	r5, #16
 8007f9a:	dd13      	ble.n	8007fc4 <_svfprintf_r+0xcbc>
 8007f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f9e:	6066      	str	r6, [r4, #4]
 8007fa0:	3310      	adds	r3, #16
 8007fa2:	9321      	str	r3, [sp, #132]	; 0x84
 8007fa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	2b07      	cmp	r3, #7
 8007faa:	9320      	str	r3, [sp, #128]	; 0x80
 8007fac:	dc01      	bgt.n	8007fb2 <_svfprintf_r+0xcaa>
 8007fae:	3408      	adds	r4, #8
 8007fb0:	e006      	b.n	8007fc0 <_svfprintf_r+0xcb8>
 8007fb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	f001 ff86 	bl	8009ec8 <__ssprint_r>
 8007fbc:	bb30      	cbnz	r0, 800800c <_svfprintf_r+0xd04>
 8007fbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007fc0:	3d10      	subs	r5, #16
 8007fc2:	e7e7      	b.n	8007f94 <_svfprintf_r+0xc8c>
 8007fc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc6:	6065      	str	r5, [r4, #4]
 8007fc8:	441d      	add	r5, r3
 8007fca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007fcc:	9521      	str	r5, [sp, #132]	; 0x84
 8007fce:	3301      	adds	r3, #1
 8007fd0:	2b07      	cmp	r3, #7
 8007fd2:	9320      	str	r3, [sp, #128]	; 0x80
 8007fd4:	ddcc      	ble.n	8007f70 <_svfprintf_r+0xc68>
 8007fd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007fd8:	4659      	mov	r1, fp
 8007fda:	4650      	mov	r0, sl
 8007fdc:	f001 ff74 	bl	8009ec8 <__ssprint_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d0c5      	beq.n	8007f70 <_svfprintf_r+0xc68>
 8007fe4:	e012      	b.n	800800c <_svfprintf_r+0xd04>
 8007fe6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007fe8:	4659      	mov	r1, fp
 8007fea:	4650      	mov	r0, sl
 8007fec:	f001 ff6c 	bl	8009ec8 <__ssprint_r>
 8007ff0:	b960      	cbnz	r0, 800800c <_svfprintf_r+0xd04>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9320      	str	r3, [sp, #128]	; 0x80
 8007ff6:	9f03      	ldr	r7, [sp, #12]
 8007ff8:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ffa:	f7ff b9bb 	b.w	8007374 <_svfprintf_r+0x6c>
 8007ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008000:	b123      	cbz	r3, 800800c <_svfprintf_r+0xd04>
 8008002:	aa1f      	add	r2, sp, #124	; 0x7c
 8008004:	4659      	mov	r1, fp
 8008006:	4650      	mov	r0, sl
 8008008:	f001 ff5e 	bl	8009ec8 <__ssprint_r>
 800800c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008010:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008016:	bf18      	it	ne
 8008018:	f04f 33ff 	movne.w	r3, #4294967295
 800801c:	4618      	mov	r0, r3
 800801e:	e12e      	b.n	800827e <_svfprintf_r+0xf76>
 8008020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008024:	4610      	mov	r0, r2
 8008026:	4619      	mov	r1, r3
 8008028:	f7f8 fd9c 	bl	8000b64 <__aeabi_dcmpun>
 800802c:	b160      	cbz	r0, 8008048 <_svfprintf_r+0xd40>
 800802e:	4b5f      	ldr	r3, [pc, #380]	; (80081ac <_svfprintf_r+0xea4>)
 8008030:	4a5f      	ldr	r2, [pc, #380]	; (80081b0 <_svfprintf_r+0xea8>)
 8008032:	9902      	ldr	r1, [sp, #8]
 8008034:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008038:	2947      	cmp	r1, #71	; 0x47
 800803a:	bfcc      	ite	gt
 800803c:	4690      	movgt	r8, r2
 800803e:	4698      	movle	r8, r3
 8008040:	f04f 0903 	mov.w	r9, #3
 8008044:	2600      	movs	r6, #0
 8008046:	e44e      	b.n	80078e6 <_svfprintf_r+0x5de>
 8008048:	f1b9 3fff 	cmp.w	r9, #4294967295
 800804c:	d00a      	beq.n	8008064 <_svfprintf_r+0xd5c>
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	f023 0320 	bic.w	r3, r3, #32
 8008054:	2b47      	cmp	r3, #71	; 0x47
 8008056:	d107      	bne.n	8008068 <_svfprintf_r+0xd60>
 8008058:	f1b9 0f00 	cmp.w	r9, #0
 800805c:	bf08      	it	eq
 800805e:	f04f 0901 	moveq.w	r9, #1
 8008062:	e001      	b.n	8008068 <_svfprintf_r+0xd60>
 8008064:	f04f 0906 	mov.w	r9, #6
 8008068:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800806c:	930c      	str	r3, [sp, #48]	; 0x30
 800806e:	9b07      	ldr	r3, [sp, #28]
 8008070:	2b00      	cmp	r3, #0
 8008072:	da07      	bge.n	8008084 <_svfprintf_r+0xd7c>
 8008074:	9b06      	ldr	r3, [sp, #24]
 8008076:	930e      	str	r3, [sp, #56]	; 0x38
 8008078:	9b07      	ldr	r3, [sp, #28]
 800807a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800807e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008080:	232d      	movs	r3, #45	; 0x2d
 8008082:	e004      	b.n	800808e <_svfprintf_r+0xd86>
 8008084:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008088:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800808c:	2300      	movs	r3, #0
 800808e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	f023 0720 	bic.w	r7, r3, #32
 8008096:	2f46      	cmp	r7, #70	; 0x46
 8008098:	d004      	beq.n	80080a4 <_svfprintf_r+0xd9c>
 800809a:	2f45      	cmp	r7, #69	; 0x45
 800809c:	d105      	bne.n	80080aa <_svfprintf_r+0xda2>
 800809e:	f109 0601 	add.w	r6, r9, #1
 80080a2:	e003      	b.n	80080ac <_svfprintf_r+0xda4>
 80080a4:	464e      	mov	r6, r9
 80080a6:	2103      	movs	r1, #3
 80080a8:	e001      	b.n	80080ae <_svfprintf_r+0xda6>
 80080aa:	464e      	mov	r6, r9
 80080ac:	2102      	movs	r1, #2
 80080ae:	ab1d      	add	r3, sp, #116	; 0x74
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	ab1a      	add	r3, sp, #104	; 0x68
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	4632      	mov	r2, r6
 80080b8:	ab19      	add	r3, sp, #100	; 0x64
 80080ba:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80080be:	4650      	mov	r0, sl
 80080c0:	f000 f976 	bl	80083b0 <_dtoa_r>
 80080c4:	2f47      	cmp	r7, #71	; 0x47
 80080c6:	4680      	mov	r8, r0
 80080c8:	d102      	bne.n	80080d0 <_svfprintf_r+0xdc8>
 80080ca:	07eb      	lsls	r3, r5, #31
 80080cc:	f140 80cd 	bpl.w	800826a <_svfprintf_r+0xf62>
 80080d0:	eb08 0306 	add.w	r3, r8, r6
 80080d4:	2f46      	cmp	r7, #70	; 0x46
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	d111      	bne.n	80080fe <_svfprintf_r+0xdf6>
 80080da:	f898 3000 	ldrb.w	r3, [r8]
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	d109      	bne.n	80080f6 <_svfprintf_r+0xdee>
 80080e2:	2200      	movs	r2, #0
 80080e4:	2300      	movs	r3, #0
 80080e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80080ea:	f7f8 fd09 	bl	8000b00 <__aeabi_dcmpeq>
 80080ee:	b910      	cbnz	r0, 80080f6 <_svfprintf_r+0xdee>
 80080f0:	f1c6 0601 	rsb	r6, r6, #1
 80080f4:	9619      	str	r6, [sp, #100]	; 0x64
 80080f6:	9a04      	ldr	r2, [sp, #16]
 80080f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080fa:	441a      	add	r2, r3
 80080fc:	9204      	str	r2, [sp, #16]
 80080fe:	2200      	movs	r2, #0
 8008100:	2300      	movs	r3, #0
 8008102:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008106:	f7f8 fcfb 	bl	8000b00 <__aeabi_dcmpeq>
 800810a:	b908      	cbnz	r0, 8008110 <_svfprintf_r+0xe08>
 800810c:	2230      	movs	r2, #48	; 0x30
 800810e:	e002      	b.n	8008116 <_svfprintf_r+0xe0e>
 8008110:	9b04      	ldr	r3, [sp, #16]
 8008112:	931d      	str	r3, [sp, #116]	; 0x74
 8008114:	e007      	b.n	8008126 <_svfprintf_r+0xe1e>
 8008116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008118:	9904      	ldr	r1, [sp, #16]
 800811a:	4299      	cmp	r1, r3
 800811c:	d903      	bls.n	8008126 <_svfprintf_r+0xe1e>
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	911d      	str	r1, [sp, #116]	; 0x74
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	e7f7      	b.n	8008116 <_svfprintf_r+0xe0e>
 8008126:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008128:	2f47      	cmp	r7, #71	; 0x47
 800812a:	ebc8 0303 	rsb	r3, r8, r3
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	d108      	bne.n	8008144 <_svfprintf_r+0xe3c>
 8008132:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008134:	1cdf      	adds	r7, r3, #3
 8008136:	db01      	blt.n	800813c <_svfprintf_r+0xe34>
 8008138:	4599      	cmp	r9, r3
 800813a:	da68      	bge.n	800820e <_svfprintf_r+0xf06>
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	3b02      	subs	r3, #2
 8008140:	9302      	str	r3, [sp, #8]
 8008142:	e002      	b.n	800814a <_svfprintf_r+0xe42>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	2b65      	cmp	r3, #101	; 0x65
 8008148:	dc4a      	bgt.n	80081e0 <_svfprintf_r+0xed8>
 800814a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800814c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8008150:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8008154:	3b01      	subs	r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	9319      	str	r3, [sp, #100]	; 0x64
 800815a:	bfba      	itte	lt
 800815c:	425b      	neglt	r3, r3
 800815e:	222d      	movlt	r2, #45	; 0x2d
 8008160:	222b      	movge	r2, #43	; 0x2b
 8008162:	2b09      	cmp	r3, #9
 8008164:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8008168:	dd24      	ble.n	80081b4 <_svfprintf_r+0xeac>
 800816a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800816e:	200a      	movs	r0, #10
 8008170:	fb93 f1f0 	sdiv	r1, r3, r0
 8008174:	fb00 3311 	mls	r3, r0, r1, r3
 8008178:	3330      	adds	r3, #48	; 0x30
 800817a:	2909      	cmp	r1, #9
 800817c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008180:	460b      	mov	r3, r1
 8008182:	dcf5      	bgt.n	8008170 <_svfprintf_r+0xe68>
 8008184:	3330      	adds	r3, #48	; 0x30
 8008186:	f802 3c01 	strb.w	r3, [r2, #-1]
 800818a:	1e51      	subs	r1, r2, #1
 800818c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8008190:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8008194:	4281      	cmp	r1, r0
 8008196:	461a      	mov	r2, r3
 8008198:	d213      	bcs.n	80081c2 <_svfprintf_r+0xeba>
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f803 2b01 	strb.w	r2, [r3], #1
 80081a2:	e7f7      	b.n	8008194 <_svfprintf_r+0xe8c>
 80081a4:	0800a6e6 	.word	0x0800a6e6
 80081a8:	0800a72a 	.word	0x0800a72a
 80081ac:	0800a6fe 	.word	0x0800a6fe
 80081b0:	0800a702 	.word	0x0800a702
 80081b4:	2230      	movs	r2, #48	; 0x30
 80081b6:	4413      	add	r3, r2
 80081b8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80081bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80081c0:	aa1c      	add	r2, sp, #112	; 0x70
 80081c2:	ab1b      	add	r3, sp, #108	; 0x6c
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	9310      	str	r3, [sp, #64]	; 0x40
 80081ca:	2a01      	cmp	r2, #1
 80081cc:	eb03 0902 	add.w	r9, r3, r2
 80081d0:	dc02      	bgt.n	80081d8 <_svfprintf_r+0xed0>
 80081d2:	f015 0701 	ands.w	r7, r5, #1
 80081d6:	d032      	beq.n	800823e <_svfprintf_r+0xf36>
 80081d8:	9b08      	ldr	r3, [sp, #32]
 80081da:	2700      	movs	r7, #0
 80081dc:	4499      	add	r9, r3
 80081de:	e02e      	b.n	800823e <_svfprintf_r+0xf36>
 80081e0:	9b02      	ldr	r3, [sp, #8]
 80081e2:	2b66      	cmp	r3, #102	; 0x66
 80081e4:	d113      	bne.n	800820e <_svfprintf_r+0xf06>
 80081e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd07      	ble.n	80081fc <_svfprintf_r+0xef4>
 80081ec:	f1b9 0f00 	cmp.w	r9, #0
 80081f0:	d101      	bne.n	80081f6 <_svfprintf_r+0xeee>
 80081f2:	07ee      	lsls	r6, r5, #31
 80081f4:	d521      	bpl.n	800823a <_svfprintf_r+0xf32>
 80081f6:	9a08      	ldr	r2, [sp, #32]
 80081f8:	4413      	add	r3, r2
 80081fa:	e006      	b.n	800820a <_svfprintf_r+0xf02>
 80081fc:	f1b9 0f00 	cmp.w	r9, #0
 8008200:	d101      	bne.n	8008206 <_svfprintf_r+0xefe>
 8008202:	07ed      	lsls	r5, r5, #31
 8008204:	d514      	bpl.n	8008230 <_svfprintf_r+0xf28>
 8008206:	9b08      	ldr	r3, [sp, #32]
 8008208:	3301      	adds	r3, #1
 800820a:	444b      	add	r3, r9
 800820c:	e015      	b.n	800823a <_svfprintf_r+0xf32>
 800820e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008210:	9a04      	ldr	r2, [sp, #16]
 8008212:	4293      	cmp	r3, r2
 8008214:	db03      	blt.n	800821e <_svfprintf_r+0xf16>
 8008216:	07e8      	lsls	r0, r5, #31
 8008218:	d50d      	bpl.n	8008236 <_svfprintf_r+0xf2e>
 800821a:	9a08      	ldr	r2, [sp, #32]
 800821c:	e006      	b.n	800822c <_svfprintf_r+0xf24>
 800821e:	9a04      	ldr	r2, [sp, #16]
 8008220:	9908      	ldr	r1, [sp, #32]
 8008222:	2b00      	cmp	r3, #0
 8008224:	440a      	add	r2, r1
 8008226:	dc05      	bgt.n	8008234 <_svfprintf_r+0xf2c>
 8008228:	f1c3 0301 	rsb	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	e002      	b.n	8008236 <_svfprintf_r+0xf2e>
 8008230:	2301      	movs	r3, #1
 8008232:	e002      	b.n	800823a <_svfprintf_r+0xf32>
 8008234:	4613      	mov	r3, r2
 8008236:	2267      	movs	r2, #103	; 0x67
 8008238:	9202      	str	r2, [sp, #8]
 800823a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800823c:	4699      	mov	r9, r3
 800823e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008240:	b113      	cbz	r3, 8008248 <_svfprintf_r+0xf40>
 8008242:	232d      	movs	r3, #45	; 0x2d
 8008244:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008248:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800824a:	2600      	movs	r6, #0
 800824c:	f7ff bb4c 	b.w	80078e8 <_svfprintf_r+0x5e0>
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008258:	f7f8 fc5c 	bl	8000b14 <__aeabi_dcmplt>
 800825c:	b110      	cbz	r0, 8008264 <_svfprintf_r+0xf5c>
 800825e:	232d      	movs	r3, #45	; 0x2d
 8008260:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008264:	4b07      	ldr	r3, [pc, #28]	; (8008284 <_svfprintf_r+0xf7c>)
 8008266:	4a08      	ldr	r2, [pc, #32]	; (8008288 <_svfprintf_r+0xf80>)
 8008268:	e6e3      	b.n	8008032 <_svfprintf_r+0xd2a>
 800826a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800826c:	1a1b      	subs	r3, r3, r0
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	e75f      	b.n	8008132 <_svfprintf_r+0xe2a>
 8008272:	ea56 0207 	orrs.w	r2, r6, r7
 8008276:	f47f aaaa 	bne.w	80077ce <_svfprintf_r+0x4c6>
 800827a:	f7ff baaf 	b.w	80077dc <_svfprintf_r+0x4d4>
 800827e:	b03d      	add	sp, #244	; 0xf4
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	0800a6f6 	.word	0x0800a6f6
 8008288:	0800a6fa 	.word	0x0800a6fa

0800828c <quorem>:
 800828c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	6903      	ldr	r3, [r0, #16]
 8008292:	690c      	ldr	r4, [r1, #16]
 8008294:	429c      	cmp	r4, r3
 8008296:	4680      	mov	r8, r0
 8008298:	f300 8083 	bgt.w	80083a2 <quorem+0x116>
 800829c:	3c01      	subs	r4, #1
 800829e:	f101 0714 	add.w	r7, r1, #20
 80082a2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80082a6:	f100 0614 	add.w	r6, r0, #20
 80082aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80082ae:	eb06 030e 	add.w	r3, r6, lr
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	3501      	adds	r5, #1
 80082b6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80082ba:	fbb3 f5f5 	udiv	r5, r3, r5
 80082be:	eb07 090e 	add.w	r9, r7, lr
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	d039      	beq.n	800833a <quorem+0xae>
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	4638      	mov	r0, r7
 80082cc:	46b4      	mov	ip, r6
 80082ce:	46d3      	mov	fp, sl
 80082d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80082d4:	b293      	uxth	r3, r2
 80082d6:	fb05 a303 	mla	r3, r5, r3, sl
 80082da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082de:	b29b      	uxth	r3, r3
 80082e0:	ebc3 030b 	rsb	r3, r3, fp
 80082e4:	0c12      	lsrs	r2, r2, #16
 80082e6:	f8bc b000 	ldrh.w	fp, [ip]
 80082ea:	fb05 a202 	mla	r2, r5, r2, sl
 80082ee:	fa13 f38b 	uxtah	r3, r3, fp
 80082f2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80082f6:	fa1f fb82 	uxth.w	fp, r2
 80082fa:	f8dc 2000 	ldr.w	r2, [ip]
 80082fe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008302:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008306:	b29b      	uxth	r3, r3
 8008308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800830c:	4581      	cmp	r9, r0
 800830e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008312:	f84c 3b04 	str.w	r3, [ip], #4
 8008316:	d2db      	bcs.n	80082d0 <quorem+0x44>
 8008318:	f856 300e 	ldr.w	r3, [r6, lr]
 800831c:	b96b      	cbnz	r3, 800833a <quorem+0xae>
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	3b04      	subs	r3, #4
 8008322:	429e      	cmp	r6, r3
 8008324:	461a      	mov	r2, r3
 8008326:	d302      	bcc.n	800832e <quorem+0xa2>
 8008328:	f8c8 4010 	str.w	r4, [r8, #16]
 800832c:	e005      	b.n	800833a <quorem+0xae>
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	3b04      	subs	r3, #4
 8008332:	2a00      	cmp	r2, #0
 8008334:	d1f8      	bne.n	8008328 <quorem+0x9c>
 8008336:	3c01      	subs	r4, #1
 8008338:	e7f3      	b.n	8008322 <quorem+0x96>
 800833a:	4640      	mov	r0, r8
 800833c:	f001 fb43 	bl	80099c6 <__mcmp>
 8008340:	2800      	cmp	r0, #0
 8008342:	db2c      	blt.n	800839e <quorem+0x112>
 8008344:	3501      	adds	r5, #1
 8008346:	4630      	mov	r0, r6
 8008348:	f04f 0e00 	mov.w	lr, #0
 800834c:	f857 1b04 	ldr.w	r1, [r7], #4
 8008350:	f8d0 c000 	ldr.w	ip, [r0]
 8008354:	b28a      	uxth	r2, r1
 8008356:	ebc2 030e 	rsb	r3, r2, lr
 800835a:	0c09      	lsrs	r1, r1, #16
 800835c:	fa13 f38c 	uxtah	r3, r3, ip
 8008360:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8008364:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008368:	b29b      	uxth	r3, r3
 800836a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800836e:	45b9      	cmp	r9, r7
 8008370:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008374:	f840 3b04 	str.w	r3, [r0], #4
 8008378:	d2e8      	bcs.n	800834c <quorem+0xc0>
 800837a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800837e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008382:	b962      	cbnz	r2, 800839e <quorem+0x112>
 8008384:	3b04      	subs	r3, #4
 8008386:	429e      	cmp	r6, r3
 8008388:	461a      	mov	r2, r3
 800838a:	d302      	bcc.n	8008392 <quorem+0x106>
 800838c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008390:	e005      	b.n	800839e <quorem+0x112>
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	3b04      	subs	r3, #4
 8008396:	2a00      	cmp	r2, #0
 8008398:	d1f8      	bne.n	800838c <quorem+0x100>
 800839a:	3c01      	subs	r4, #1
 800839c:	e7f3      	b.n	8008386 <quorem+0xfa>
 800839e:	4628      	mov	r0, r5
 80083a0:	e000      	b.n	80083a4 <quorem+0x118>
 80083a2:	2000      	movs	r0, #0
 80083a4:	b003      	add	sp, #12
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	0000      	movs	r0, r0
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <_dtoa_r>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	ec59 8b10 	vmov	r8, r9, d0
 80083b8:	b097      	sub	sp, #92	; 0x5c
 80083ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083bc:	9106      	str	r1, [sp, #24]
 80083be:	4682      	mov	sl, r0
 80083c0:	9209      	str	r2, [sp, #36]	; 0x24
 80083c2:	9310      	str	r3, [sp, #64]	; 0x40
 80083c4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80083c6:	e9cd 8900 	strd	r8, r9, [sp]
 80083ca:	b945      	cbnz	r5, 80083de <_dtoa_r+0x2e>
 80083cc:	2010      	movs	r0, #16
 80083ce:	f000 fea7 	bl	8009120 <malloc>
 80083d2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80083d6:	6045      	str	r5, [r0, #4]
 80083d8:	6085      	str	r5, [r0, #8]
 80083da:	6005      	str	r5, [r0, #0]
 80083dc:	60c5      	str	r5, [r0, #12]
 80083de:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80083e2:	6819      	ldr	r1, [r3, #0]
 80083e4:	b159      	cbz	r1, 80083fe <_dtoa_r+0x4e>
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	604a      	str	r2, [r1, #4]
 80083ea:	2301      	movs	r3, #1
 80083ec:	4093      	lsls	r3, r2
 80083ee:	608b      	str	r3, [r1, #8]
 80083f0:	4650      	mov	r0, sl
 80083f2:	f001 f90f 	bl	8009614 <_Bfree>
 80083f6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	4a9f      	ldr	r2, [pc, #636]	; (8008680 <_dtoa_r+0x2d0>)
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfbf      	itttt	lt
 8008406:	2301      	movlt	r3, #1
 8008408:	6023      	strlt	r3, [r4, #0]
 800840a:	9b01      	ldrlt	r3, [sp, #4]
 800840c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008410:	bfb8      	it	lt
 8008412:	9301      	strlt	r3, [sp, #4]
 8008414:	9f01      	ldr	r7, [sp, #4]
 8008416:	bfa4      	itt	ge
 8008418:	2300      	movge	r3, #0
 800841a:	6023      	strge	r3, [r4, #0]
 800841c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8008420:	0d1b      	lsrs	r3, r3, #20
 8008422:	051b      	lsls	r3, r3, #20
 8008424:	4293      	cmp	r3, r2
 8008426:	d11d      	bne.n	8008464 <_dtoa_r+0xb4>
 8008428:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800842a:	f242 730f 	movw	r3, #9999	; 0x270f
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	9b00      	ldr	r3, [sp, #0]
 8008432:	b943      	cbnz	r3, 8008446 <_dtoa_r+0x96>
 8008434:	4a93      	ldr	r2, [pc, #588]	; (8008684 <_dtoa_r+0x2d4>)
 8008436:	4b94      	ldr	r3, [pc, #592]	; (8008688 <_dtoa_r+0x2d8>)
 8008438:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800843c:	2800      	cmp	r0, #0
 800843e:	bf14      	ite	ne
 8008440:	4618      	movne	r0, r3
 8008442:	4610      	moveq	r0, r2
 8008444:	e000      	b.n	8008448 <_dtoa_r+0x98>
 8008446:	4890      	ldr	r0, [pc, #576]	; (8008688 <_dtoa_r+0x2d8>)
 8008448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 854a 	beq.w	8008ee4 <_dtoa_r+0xb34>
 8008450:	78c3      	ldrb	r3, [r0, #3]
 8008452:	b113      	cbz	r3, 800845a <_dtoa_r+0xaa>
 8008454:	f100 0308 	add.w	r3, r0, #8
 8008458:	e000      	b.n	800845c <_dtoa_r+0xac>
 800845a:	1cc3      	adds	r3, r0, #3
 800845c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	f000 bd40 	b.w	8008ee4 <_dtoa_r+0xb34>
 8008464:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008468:	2200      	movs	r2, #0
 800846a:	2300      	movs	r3, #0
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 fb46 	bl	8000b00 <__aeabi_dcmpeq>
 8008474:	4680      	mov	r8, r0
 8008476:	b158      	cbz	r0, 8008490 <_dtoa_r+0xe0>
 8008478:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800847a:	2301      	movs	r3, #1
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8522 	beq.w	8008eca <_dtoa_r+0xb1a>
 8008486:	4881      	ldr	r0, [pc, #516]	; (800868c <_dtoa_r+0x2dc>)
 8008488:	6018      	str	r0, [r3, #0]
 800848a:	3801      	subs	r0, #1
 800848c:	f000 bd2a 	b.w	8008ee4 <_dtoa_r+0xb34>
 8008490:	aa14      	add	r2, sp, #80	; 0x50
 8008492:	a915      	add	r1, sp, #84	; 0x54
 8008494:	ec45 4b10 	vmov	d0, r4, r5
 8008498:	4650      	mov	r0, sl
 800849a:	f001 fb0f 	bl	8009abc <__d2b>
 800849e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80084a2:	9002      	str	r0, [sp, #8]
 80084a4:	b15e      	cbz	r6, 80084be <_dtoa_r+0x10e>
 80084a6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80084aa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084ae:	4620      	mov	r0, r4
 80084b0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084b4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80084b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80084bc:	e01d      	b.n	80084fa <_dtoa_r+0x14a>
 80084be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084c0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80084c2:	441e      	add	r6, r3
 80084c4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	dd0a      	ble.n	80084e2 <_dtoa_r+0x132>
 80084cc:	9a00      	ldr	r2, [sp, #0]
 80084ce:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80084d2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80084d6:	fa22 f000 	lsr.w	r0, r2, r0
 80084da:	fa07 f303 	lsl.w	r3, r7, r3
 80084de:	4318      	orrs	r0, r3
 80084e0:	e004      	b.n	80084ec <_dtoa_r+0x13c>
 80084e2:	f1c3 0020 	rsb	r0, r3, #32
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	fa03 f000 	lsl.w	r0, r3, r0
 80084ec:	f7f8 f82a 	bl	8000544 <__aeabi_ui2d>
 80084f0:	2301      	movs	r3, #1
 80084f2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80084f6:	3e01      	subs	r6, #1
 80084f8:	9311      	str	r3, [sp, #68]	; 0x44
 80084fa:	2200      	movs	r2, #0
 80084fc:	4b64      	ldr	r3, [pc, #400]	; (8008690 <_dtoa_r+0x2e0>)
 80084fe:	f7f7 fee3 	bl	80002c8 <__aeabi_dsub>
 8008502:	a359      	add	r3, pc, #356	; (adr r3, 8008668 <_dtoa_r+0x2b8>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f8 f892 	bl	8000630 <__aeabi_dmul>
 800850c:	a358      	add	r3, pc, #352	; (adr r3, 8008670 <_dtoa_r+0x2c0>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f7f7 fedb 	bl	80002cc <__adddf3>
 8008516:	4604      	mov	r4, r0
 8008518:	4630      	mov	r0, r6
 800851a:	460d      	mov	r5, r1
 800851c:	f7f8 f822 	bl	8000564 <__aeabi_i2d>
 8008520:	a355      	add	r3, pc, #340	; (adr r3, 8008678 <_dtoa_r+0x2c8>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f8 f883 	bl	8000630 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	f7f7 fecb 	bl	80002cc <__adddf3>
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	f7f8 fb29 	bl	8000b90 <__aeabi_d2iz>
 800853e:	2200      	movs	r2, #0
 8008540:	4683      	mov	fp, r0
 8008542:	2300      	movs	r3, #0
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 fae4 	bl	8000b14 <__aeabi_dcmplt>
 800854c:	b158      	cbz	r0, 8008566 <_dtoa_r+0x1b6>
 800854e:	4658      	mov	r0, fp
 8008550:	f7f8 f808 	bl	8000564 <__aeabi_i2d>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4620      	mov	r0, r4
 800855a:	4629      	mov	r1, r5
 800855c:	f7f8 fad0 	bl	8000b00 <__aeabi_dcmpeq>
 8008560:	b908      	cbnz	r0, 8008566 <_dtoa_r+0x1b6>
 8008562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008566:	f1bb 0f16 	cmp.w	fp, #22
 800856a:	d80d      	bhi.n	8008588 <_dtoa_r+0x1d8>
 800856c:	4949      	ldr	r1, [pc, #292]	; (8008694 <_dtoa_r+0x2e4>)
 800856e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800857a:	f7f8 fae9 	bl	8000b50 <__aeabi_dcmpgt>
 800857e:	b130      	cbz	r0, 800858e <_dtoa_r+0x1de>
 8008580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008584:	2300      	movs	r3, #0
 8008586:	e000      	b.n	800858a <_dtoa_r+0x1da>
 8008588:	2301      	movs	r3, #1
 800858a:	930d      	str	r3, [sp, #52]	; 0x34
 800858c:	e000      	b.n	8008590 <_dtoa_r+0x1e0>
 800858e:	900d      	str	r0, [sp, #52]	; 0x34
 8008590:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008592:	1b9e      	subs	r6, r3, r6
 8008594:	1e73      	subs	r3, r6, #1
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	bf43      	ittte	mi
 800859a:	f1c3 0900 	rsbmi	r9, r3, #0
 800859e:	2300      	movmi	r3, #0
 80085a0:	9305      	strmi	r3, [sp, #20]
 80085a2:	f04f 0900 	movpl.w	r9, #0
 80085a6:	f1bb 0f00 	cmp.w	fp, #0
 80085aa:	db07      	blt.n	80085bc <_dtoa_r+0x20c>
 80085ac:	9b05      	ldr	r3, [sp, #20]
 80085ae:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80085b2:	445b      	add	r3, fp
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	e006      	b.n	80085ca <_dtoa_r+0x21a>
 80085bc:	f1cb 0300 	rsb	r3, fp, #0
 80085c0:	9307      	str	r3, [sp, #28]
 80085c2:	2300      	movs	r3, #0
 80085c4:	ebcb 0909 	rsb	r9, fp, r9
 80085c8:	930c      	str	r3, [sp, #48]	; 0x30
 80085ca:	9b06      	ldr	r3, [sp, #24]
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d827      	bhi.n	8008620 <_dtoa_r+0x270>
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	bfc4      	itt	gt
 80085d4:	3b04      	subgt	r3, #4
 80085d6:	9306      	strgt	r3, [sp, #24]
 80085d8:	9b06      	ldr	r3, [sp, #24]
 80085da:	f1a3 0302 	sub.w	r3, r3, #2
 80085de:	bfcc      	ite	gt
 80085e0:	2500      	movgt	r5, #0
 80085e2:	2501      	movle	r5, #1
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d820      	bhi.n	800862a <_dtoa_r+0x27a>
 80085e8:	e8df f003 	tbb	[pc, r3]
 80085ec:	04020e06 	.word	0x04020e06
 80085f0:	2301      	movs	r3, #1
 80085f2:	e002      	b.n	80085fa <_dtoa_r+0x24a>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e008      	b.n	800860a <_dtoa_r+0x25a>
 80085f8:	2300      	movs	r3, #0
 80085fa:	9308      	str	r3, [sp, #32]
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dd1c      	ble.n	800863c <_dtoa_r+0x28c>
 8008602:	9303      	str	r3, [sp, #12]
 8008604:	4698      	mov	r8, r3
 8008606:	e01e      	b.n	8008646 <_dtoa_r+0x296>
 8008608:	2300      	movs	r3, #0
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	445b      	add	r3, fp
 8008610:	f103 0801 	add.w	r8, r3, #1
 8008614:	9303      	str	r3, [sp, #12]
 8008616:	4643      	mov	r3, r8
 8008618:	2b01      	cmp	r3, #1
 800861a:	bfb8      	it	lt
 800861c:	2301      	movlt	r3, #1
 800861e:	e012      	b.n	8008646 <_dtoa_r+0x296>
 8008620:	2501      	movs	r5, #1
 8008622:	2300      	movs	r3, #0
 8008624:	9306      	str	r3, [sp, #24]
 8008626:	9508      	str	r5, [sp, #32]
 8008628:	e001      	b.n	800862e <_dtoa_r+0x27e>
 800862a:	2301      	movs	r3, #1
 800862c:	9308      	str	r3, [sp, #32]
 800862e:	f04f 33ff 	mov.w	r3, #4294967295
 8008632:	9303      	str	r3, [sp, #12]
 8008634:	4698      	mov	r8, r3
 8008636:	2200      	movs	r2, #0
 8008638:	2312      	movs	r3, #18
 800863a:	e003      	b.n	8008644 <_dtoa_r+0x294>
 800863c:	2301      	movs	r3, #1
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	4698      	mov	r8, r3
 8008642:	461a      	mov	r2, r3
 8008644:	9209      	str	r2, [sp, #36]	; 0x24
 8008646:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800864a:	2200      	movs	r2, #0
 800864c:	6062      	str	r2, [r4, #4]
 800864e:	2104      	movs	r1, #4
 8008650:	f101 0214 	add.w	r2, r1, #20
 8008654:	429a      	cmp	r2, r3
 8008656:	d81f      	bhi.n	8008698 <_dtoa_r+0x2e8>
 8008658:	6862      	ldr	r2, [r4, #4]
 800865a:	3201      	adds	r2, #1
 800865c:	6062      	str	r2, [r4, #4]
 800865e:	0049      	lsls	r1, r1, #1
 8008660:	e7f6      	b.n	8008650 <_dtoa_r+0x2a0>
 8008662:	bf00      	nop
 8008664:	f3af 8000 	nop.w
 8008668:	636f4361 	.word	0x636f4361
 800866c:	3fd287a7 	.word	0x3fd287a7
 8008670:	8b60c8b3 	.word	0x8b60c8b3
 8008674:	3fc68a28 	.word	0x3fc68a28
 8008678:	509f79fb 	.word	0x509f79fb
 800867c:	3fd34413 	.word	0x3fd34413
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	0800a83b 	.word	0x0800a83b
 8008688:	0800a844 	.word	0x0800a844
 800868c:	0800a729 	.word	0x0800a729
 8008690:	3ff80000 	.word	0x3ff80000
 8008694:	0800a8b0 	.word	0x0800a8b0
 8008698:	6861      	ldr	r1, [r4, #4]
 800869a:	4650      	mov	r0, sl
 800869c:	f000 ff85 	bl	80095aa <_Balloc>
 80086a0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80086a4:	6020      	str	r0, [r4, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	f1b8 0f0e 	cmp.w	r8, #14
 80086ae:	f200 815d 	bhi.w	800896c <_dtoa_r+0x5bc>
 80086b2:	2d00      	cmp	r5, #0
 80086b4:	f000 815a 	beq.w	800896c <_dtoa_r+0x5bc>
 80086b8:	ed9d 7b00 	vldr	d7, [sp]
 80086bc:	f1bb 0f00 	cmp.w	fp, #0
 80086c0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80086c4:	dd31      	ble.n	800872a <_dtoa_r+0x37a>
 80086c6:	4aa0      	ldr	r2, [pc, #640]	; (8008948 <_dtoa_r+0x598>)
 80086c8:	f00b 030f 	and.w	r3, fp, #15
 80086cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086d0:	ed93 7b00 	vldr	d7, [r3]
 80086d4:	ea4f 142b 	mov.w	r4, fp, asr #4
 80086d8:	06e2      	lsls	r2, r4, #27
 80086da:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80086de:	d50c      	bpl.n	80086fa <_dtoa_r+0x34a>
 80086e0:	4b9a      	ldr	r3, [pc, #616]	; (800894c <_dtoa_r+0x59c>)
 80086e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80086e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086ea:	f7f8 f8cb 	bl	8000884 <__aeabi_ddiv>
 80086ee:	f004 040f 	and.w	r4, r4, #15
 80086f2:	e9cd 0100 	strd	r0, r1, [sp]
 80086f6:	2603      	movs	r6, #3
 80086f8:	e000      	b.n	80086fc <_dtoa_r+0x34c>
 80086fa:	2602      	movs	r6, #2
 80086fc:	4d93      	ldr	r5, [pc, #588]	; (800894c <_dtoa_r+0x59c>)
 80086fe:	b16c      	cbz	r4, 800871c <_dtoa_r+0x36c>
 8008700:	07e3      	lsls	r3, r4, #31
 8008702:	d508      	bpl.n	8008716 <_dtoa_r+0x366>
 8008704:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800870c:	f7f7 ff90 	bl	8000630 <__aeabi_dmul>
 8008710:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008714:	3601      	adds	r6, #1
 8008716:	1064      	asrs	r4, r4, #1
 8008718:	3508      	adds	r5, #8
 800871a:	e7f0      	b.n	80086fe <_dtoa_r+0x34e>
 800871c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008724:	f7f8 f8ae 	bl	8000884 <__aeabi_ddiv>
 8008728:	e020      	b.n	800876c <_dtoa_r+0x3bc>
 800872a:	f1cb 0400 	rsb	r4, fp, #0
 800872e:	b304      	cbz	r4, 8008772 <_dtoa_r+0x3c2>
 8008730:	4b85      	ldr	r3, [pc, #532]	; (8008948 <_dtoa_r+0x598>)
 8008732:	4d86      	ldr	r5, [pc, #536]	; (800894c <_dtoa_r+0x59c>)
 8008734:	f004 020f 	and.w	r2, r4, #15
 8008738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008744:	f7f7 ff74 	bl	8000630 <__aeabi_dmul>
 8008748:	e9cd 0100 	strd	r0, r1, [sp]
 800874c:	1124      	asrs	r4, r4, #4
 800874e:	2300      	movs	r3, #0
 8008750:	2602      	movs	r6, #2
 8008752:	b154      	cbz	r4, 800876a <_dtoa_r+0x3ba>
 8008754:	07e7      	lsls	r7, r4, #31
 8008756:	d505      	bpl.n	8008764 <_dtoa_r+0x3b4>
 8008758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800875c:	f7f7 ff68 	bl	8000630 <__aeabi_dmul>
 8008760:	3601      	adds	r6, #1
 8008762:	2301      	movs	r3, #1
 8008764:	1064      	asrs	r4, r4, #1
 8008766:	3508      	adds	r5, #8
 8008768:	e7f3      	b.n	8008752 <_dtoa_r+0x3a2>
 800876a:	b11b      	cbz	r3, 8008774 <_dtoa_r+0x3c4>
 800876c:	e9cd 0100 	strd	r0, r1, [sp]
 8008770:	e000      	b.n	8008774 <_dtoa_r+0x3c4>
 8008772:	2602      	movs	r6, #2
 8008774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008776:	b1eb      	cbz	r3, 80087b4 <_dtoa_r+0x404>
 8008778:	e9dd 4500 	ldrd	r4, r5, [sp]
 800877c:	2200      	movs	r2, #0
 800877e:	4b74      	ldr	r3, [pc, #464]	; (8008950 <_dtoa_r+0x5a0>)
 8008780:	4620      	mov	r0, r4
 8008782:	4629      	mov	r1, r5
 8008784:	f7f8 f9c6 	bl	8000b14 <__aeabi_dcmplt>
 8008788:	b1a0      	cbz	r0, 80087b4 <_dtoa_r+0x404>
 800878a:	f1b8 0f00 	cmp.w	r8, #0
 800878e:	d011      	beq.n	80087b4 <_dtoa_r+0x404>
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f340 80e6 	ble.w	8008964 <_dtoa_r+0x5b4>
 8008798:	f10b 33ff 	add.w	r3, fp, #4294967295
 800879c:	930a      	str	r3, [sp, #40]	; 0x28
 800879e:	2200      	movs	r2, #0
 80087a0:	4b6c      	ldr	r3, [pc, #432]	; (8008954 <_dtoa_r+0x5a4>)
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	f7f7 ff43 	bl	8000630 <__aeabi_dmul>
 80087aa:	3601      	adds	r6, #1
 80087ac:	e9cd 0100 	strd	r0, r1, [sp]
 80087b0:	9f03      	ldr	r7, [sp, #12]
 80087b2:	e002      	b.n	80087ba <_dtoa_r+0x40a>
 80087b4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80087b8:	4647      	mov	r7, r8
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7f7 fed2 	bl	8000564 <__aeabi_i2d>
 80087c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087c4:	f7f7 ff34 	bl	8000630 <__aeabi_dmul>
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b63      	ldr	r3, [pc, #396]	; (8008958 <_dtoa_r+0x5a8>)
 80087cc:	f7f7 fd7e 	bl	80002cc <__adddf3>
 80087d0:	4604      	mov	r4, r0
 80087d2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80087d6:	b9cf      	cbnz	r7, 800880c <_dtoa_r+0x45c>
 80087d8:	2200      	movs	r2, #0
 80087da:	4b60      	ldr	r3, [pc, #384]	; (800895c <_dtoa_r+0x5ac>)
 80087dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e0:	f7f7 fd72 	bl	80002c8 <__aeabi_dsub>
 80087e4:	4622      	mov	r2, r4
 80087e6:	462b      	mov	r3, r5
 80087e8:	e9cd 0100 	strd	r0, r1, [sp]
 80087ec:	f7f8 f9b0 	bl	8000b50 <__aeabi_dcmpgt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f040 8241 	bne.w	8008c78 <_dtoa_r+0x8c8>
 80087f6:	4622      	mov	r2, r4
 80087f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80087fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008800:	f7f8 f988 	bl	8000b14 <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	f040 822e 	bne.w	8008c66 <_dtoa_r+0x8b6>
 800880a:	e0ab      	b.n	8008964 <_dtoa_r+0x5b4>
 800880c:	9a08      	ldr	r2, [sp, #32]
 800880e:	4b4e      	ldr	r3, [pc, #312]	; (8008948 <_dtoa_r+0x598>)
 8008810:	1e79      	subs	r1, r7, #1
 8008812:	2a00      	cmp	r2, #0
 8008814:	d04a      	beq.n	80088ac <_dtoa_r+0x4fc>
 8008816:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	2000      	movs	r0, #0
 8008820:	494f      	ldr	r1, [pc, #316]	; (8008960 <_dtoa_r+0x5b0>)
 8008822:	f7f8 f82f 	bl	8000884 <__aeabi_ddiv>
 8008826:	4622      	mov	r2, r4
 8008828:	462b      	mov	r3, r5
 800882a:	f7f7 fd4d 	bl	80002c8 <__aeabi_dsub>
 800882e:	9c04      	ldr	r4, [sp, #16]
 8008830:	4605      	mov	r5, r0
 8008832:	460e      	mov	r6, r1
 8008834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008838:	f7f8 f9aa 	bl	8000b90 <__aeabi_d2iz>
 800883c:	9012      	str	r0, [sp, #72]	; 0x48
 800883e:	f7f7 fe91 	bl	8000564 <__aeabi_i2d>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884a:	f7f7 fd3d 	bl	80002c8 <__aeabi_dsub>
 800884e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008850:	3330      	adds	r3, #48	; 0x30
 8008852:	f804 3b01 	strb.w	r3, [r4], #1
 8008856:	462a      	mov	r2, r5
 8008858:	4633      	mov	r3, r6
 800885a:	e9cd 0100 	strd	r0, r1, [sp]
 800885e:	f7f8 f959 	bl	8000b14 <__aeabi_dcmplt>
 8008862:	2800      	cmp	r0, #0
 8008864:	f040 8321 	bne.w	8008eaa <_dtoa_r+0xafa>
 8008868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800886c:	2000      	movs	r0, #0
 800886e:	4938      	ldr	r1, [pc, #224]	; (8008950 <_dtoa_r+0x5a0>)
 8008870:	f7f7 fd2a 	bl	80002c8 <__aeabi_dsub>
 8008874:	462a      	mov	r2, r5
 8008876:	4633      	mov	r3, r6
 8008878:	f7f8 f94c 	bl	8000b14 <__aeabi_dcmplt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f040 80d2 	bne.w	8008a26 <_dtoa_r+0x676>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	1ae3      	subs	r3, r4, r3
 8008886:	42bb      	cmp	r3, r7
 8008888:	da6c      	bge.n	8008964 <_dtoa_r+0x5b4>
 800888a:	2200      	movs	r2, #0
 800888c:	4b31      	ldr	r3, [pc, #196]	; (8008954 <_dtoa_r+0x5a4>)
 800888e:	4628      	mov	r0, r5
 8008890:	4631      	mov	r1, r6
 8008892:	f7f7 fecd 	bl	8000630 <__aeabi_dmul>
 8008896:	2200      	movs	r2, #0
 8008898:	4605      	mov	r5, r0
 800889a:	460e      	mov	r6, r1
 800889c:	4b2d      	ldr	r3, [pc, #180]	; (8008954 <_dtoa_r+0x5a4>)
 800889e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088a2:	f7f7 fec5 	bl	8000630 <__aeabi_dmul>
 80088a6:	e9cd 0100 	strd	r0, r1, [sp]
 80088aa:	e7c3      	b.n	8008834 <_dtoa_r+0x484>
 80088ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80088b0:	4622      	mov	r2, r4
 80088b2:	462b      	mov	r3, r5
 80088b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b8:	f7f7 feba 	bl	8000630 <__aeabi_dmul>
 80088bc:	9b04      	ldr	r3, [sp, #16]
 80088be:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80088c2:	19dc      	adds	r4, r3, r7
 80088c4:	461d      	mov	r5, r3
 80088c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ca:	f7f8 f961 	bl	8000b90 <__aeabi_d2iz>
 80088ce:	4606      	mov	r6, r0
 80088d0:	f7f7 fe48 	bl	8000564 <__aeabi_i2d>
 80088d4:	3630      	adds	r6, #48	; 0x30
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088de:	f7f7 fcf3 	bl	80002c8 <__aeabi_dsub>
 80088e2:	f805 6b01 	strb.w	r6, [r5], #1
 80088e6:	42ac      	cmp	r4, r5
 80088e8:	e9cd 0100 	strd	r0, r1, [sp]
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	d123      	bne.n	800893a <_dtoa_r+0x58a>
 80088f2:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <_dtoa_r+0x5b0>)
 80088f4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80088f8:	f7f7 fce8 	bl	80002cc <__adddf3>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008904:	f7f8 f924 	bl	8000b50 <__aeabi_dcmpgt>
 8008908:	2800      	cmp	r0, #0
 800890a:	f040 808c 	bne.w	8008a26 <_dtoa_r+0x676>
 800890e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008912:	2000      	movs	r0, #0
 8008914:	4912      	ldr	r1, [pc, #72]	; (8008960 <_dtoa_r+0x5b0>)
 8008916:	f7f7 fcd7 	bl	80002c8 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008922:	f7f8 f8f7 	bl	8000b14 <__aeabi_dcmplt>
 8008926:	b1e8      	cbz	r0, 8008964 <_dtoa_r+0x5b4>
 8008928:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	f104 32ff 	add.w	r2, r4, #4294967295
 8008932:	f040 82ba 	bne.w	8008eaa <_dtoa_r+0xafa>
 8008936:	4614      	mov	r4, r2
 8008938:	e7f6      	b.n	8008928 <_dtoa_r+0x578>
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <_dtoa_r+0x5a4>)
 800893c:	f7f7 fe78 	bl	8000630 <__aeabi_dmul>
 8008940:	e9cd 0100 	strd	r0, r1, [sp]
 8008944:	e7bf      	b.n	80088c6 <_dtoa_r+0x516>
 8008946:	bf00      	nop
 8008948:	0800a8b0 	.word	0x0800a8b0
 800894c:	0800a978 	.word	0x0800a978
 8008950:	3ff00000 	.word	0x3ff00000
 8008954:	40240000 	.word	0x40240000
 8008958:	401c0000 	.word	0x401c0000
 800895c:	40140000 	.word	0x40140000
 8008960:	3fe00000 	.word	0x3fe00000
 8008964:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8008968:	e88d 0018 	stmia.w	sp, {r3, r4}
 800896c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800896e:	2b00      	cmp	r3, #0
 8008970:	db7c      	blt.n	8008a6c <_dtoa_r+0x6bc>
 8008972:	f1bb 0f0e 	cmp.w	fp, #14
 8008976:	dc79      	bgt.n	8008a6c <_dtoa_r+0x6bc>
 8008978:	4b8f      	ldr	r3, [pc, #572]	; (8008bb8 <_dtoa_r+0x808>)
 800897a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800897e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	da14      	bge.n	80089b2 <_dtoa_r+0x602>
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	dc11      	bgt.n	80089b2 <_dtoa_r+0x602>
 800898e:	f040 816c 	bne.w	8008c6a <_dtoa_r+0x8ba>
 8008992:	2200      	movs	r2, #0
 8008994:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <_dtoa_r+0x80c>)
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f7 fe49 	bl	8000630 <__aeabi_dmul>
 800899e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089a2:	f7f8 f8cb 	bl	8000b3c <__aeabi_dcmpge>
 80089a6:	4645      	mov	r5, r8
 80089a8:	4646      	mov	r6, r8
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f040 815f 	bne.w	8008c6e <_dtoa_r+0x8be>
 80089b0:	e166      	b.n	8008c80 <_dtoa_r+0x8d0>
 80089b2:	9c04      	ldr	r4, [sp, #16]
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089bc:	f7f7 ff62 	bl	8000884 <__aeabi_ddiv>
 80089c0:	f7f8 f8e6 	bl	8000b90 <__aeabi_d2iz>
 80089c4:	4605      	mov	r5, r0
 80089c6:	f7f7 fdcd 	bl	8000564 <__aeabi_i2d>
 80089ca:	4632      	mov	r2, r6
 80089cc:	463b      	mov	r3, r7
 80089ce:	f7f7 fe2f 	bl	8000630 <__aeabi_dmul>
 80089d2:	460b      	mov	r3, r1
 80089d4:	4602      	mov	r2, r0
 80089d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089da:	f7f7 fc75 	bl	80002c8 <__aeabi_dsub>
 80089de:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80089e2:	f804 eb01 	strb.w	lr, [r4], #1
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	ebc3 0e04 	rsb	lr, r3, r4
 80089ec:	45f0      	cmp	r8, lr
 80089ee:	e9cd 0100 	strd	r0, r1, [sp]
 80089f2:	d12e      	bne.n	8008a52 <_dtoa_r+0x6a2>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	f7f7 fc68 	bl	80002cc <__adddf3>
 80089fc:	4680      	mov	r8, r0
 80089fe:	4689      	mov	r9, r1
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	f7f8 f884 	bl	8000b14 <__aeabi_dcmplt>
 8008a0c:	b978      	cbnz	r0, 8008a2e <_dtoa_r+0x67e>
 8008a0e:	4642      	mov	r2, r8
 8008a10:	464b      	mov	r3, r9
 8008a12:	4630      	mov	r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	f7f8 f873 	bl	8000b00 <__aeabi_dcmpeq>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	f000 8247 	beq.w	8008eae <_dtoa_r+0xafe>
 8008a20:	07e9      	lsls	r1, r5, #31
 8008a22:	d404      	bmi.n	8008a2e <_dtoa_r+0x67e>
 8008a24:	e243      	b.n	8008eae <_dtoa_r+0xafe>
 8008a26:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008a2a:	e000      	b.n	8008a2e <_dtoa_r+0x67e>
 8008a2c:	461c      	mov	r4, r3
 8008a2e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8008a32:	2a39      	cmp	r2, #57	; 0x39
 8008a34:	f104 33ff 	add.w	r3, r4, #4294967295
 8008a38:	d107      	bne.n	8008a4a <_dtoa_r+0x69a>
 8008a3a:	9a04      	ldr	r2, [sp, #16]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d1f5      	bne.n	8008a2c <_dtoa_r+0x67c>
 8008a40:	9904      	ldr	r1, [sp, #16]
 8008a42:	2230      	movs	r2, #48	; 0x30
 8008a44:	f10b 0b01 	add.w	fp, fp, #1
 8008a48:	700a      	strb	r2, [r1, #0]
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	3201      	adds	r2, #1
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	e22d      	b.n	8008eae <_dtoa_r+0xafe>
 8008a52:	2200      	movs	r2, #0
 8008a54:	4b5a      	ldr	r3, [pc, #360]	; (8008bc0 <_dtoa_r+0x810>)
 8008a56:	f7f7 fdeb 	bl	8000630 <__aeabi_dmul>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a62:	f7f8 f84d 	bl	8000b00 <__aeabi_dcmpeq>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d0a4      	beq.n	80089b4 <_dtoa_r+0x604>
 8008a6a:	e220      	b.n	8008eae <_dtoa_r+0xafe>
 8008a6c:	9a08      	ldr	r2, [sp, #32]
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	d02d      	beq.n	8008ace <_dtoa_r+0x71e>
 8008a72:	9a06      	ldr	r2, [sp, #24]
 8008a74:	2a01      	cmp	r2, #1
 8008a76:	dc0a      	bgt.n	8008a8e <_dtoa_r+0x6de>
 8008a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a7a:	b112      	cbz	r2, 8008a82 <_dtoa_r+0x6d2>
 8008a7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a80:	e002      	b.n	8008a88 <_dtoa_r+0x6d8>
 8008a82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a84:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a88:	9d07      	ldr	r5, [sp, #28]
 8008a8a:	464c      	mov	r4, r9
 8008a8c:	e015      	b.n	8008aba <_dtoa_r+0x70a>
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	f108 35ff 	add.w	r5, r8, #4294967295
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	bfbf      	itttt	lt
 8008a98:	9b07      	ldrlt	r3, [sp, #28]
 8008a9a:	9507      	strlt	r5, [sp, #28]
 8008a9c:	1aea      	sublt	r2, r5, r3
 8008a9e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008aa0:	bfb7      	itett	lt
 8008aa2:	189b      	addlt	r3, r3, r2
 8008aa4:	1b5d      	subge	r5, r3, r5
 8008aa6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008aa8:	2500      	movlt	r5, #0
 8008aaa:	f1b8 0f00 	cmp.w	r8, #0
 8008aae:	bfb9      	ittee	lt
 8008ab0:	ebc8 0409 	rsblt	r4, r8, r9
 8008ab4:	2300      	movlt	r3, #0
 8008ab6:	464c      	movge	r4, r9
 8008ab8:	4643      	movge	r3, r8
 8008aba:	9a05      	ldr	r2, [sp, #20]
 8008abc:	2101      	movs	r1, #1
 8008abe:	441a      	add	r2, r3
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	4499      	add	r9, r3
 8008ac4:	9205      	str	r2, [sp, #20]
 8008ac6:	f000 fe44 	bl	8009752 <__i2b>
 8008aca:	4606      	mov	r6, r0
 8008acc:	e002      	b.n	8008ad4 <_dtoa_r+0x724>
 8008ace:	9d07      	ldr	r5, [sp, #28]
 8008ad0:	9e08      	ldr	r6, [sp, #32]
 8008ad2:	464c      	mov	r4, r9
 8008ad4:	b15c      	cbz	r4, 8008aee <_dtoa_r+0x73e>
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dd08      	ble.n	8008aee <_dtoa_r+0x73e>
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	9a05      	ldr	r2, [sp, #20]
 8008ae0:	bfa8      	it	ge
 8008ae2:	4623      	movge	r3, r4
 8008ae4:	ebc3 0909 	rsb	r9, r3, r9
 8008ae8:	1ae4      	subs	r4, r4, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dd1d      	ble.n	8008b30 <_dtoa_r+0x780>
 8008af4:	9b08      	ldr	r3, [sp, #32]
 8008af6:	b1ab      	cbz	r3, 8008b24 <_dtoa_r+0x774>
 8008af8:	b185      	cbz	r5, 8008b1c <_dtoa_r+0x76c>
 8008afa:	4631      	mov	r1, r6
 8008afc:	462a      	mov	r2, r5
 8008afe:	4650      	mov	r0, sl
 8008b00:	f000 fec2 	bl	8009888 <__pow5mult>
 8008b04:	9a02      	ldr	r2, [sp, #8]
 8008b06:	4601      	mov	r1, r0
 8008b08:	4606      	mov	r6, r0
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f000 fe2a 	bl	8009764 <__multiply>
 8008b10:	9902      	ldr	r1, [sp, #8]
 8008b12:	4607      	mov	r7, r0
 8008b14:	4650      	mov	r0, sl
 8008b16:	f000 fd7d 	bl	8009614 <_Bfree>
 8008b1a:	9702      	str	r7, [sp, #8]
 8008b1c:	9b07      	ldr	r3, [sp, #28]
 8008b1e:	1b5a      	subs	r2, r3, r5
 8008b20:	d006      	beq.n	8008b30 <_dtoa_r+0x780>
 8008b22:	e000      	b.n	8008b26 <_dtoa_r+0x776>
 8008b24:	9a07      	ldr	r2, [sp, #28]
 8008b26:	9902      	ldr	r1, [sp, #8]
 8008b28:	4650      	mov	r0, sl
 8008b2a:	f000 fead 	bl	8009888 <__pow5mult>
 8008b2e:	9002      	str	r0, [sp, #8]
 8008b30:	2101      	movs	r1, #1
 8008b32:	4650      	mov	r0, sl
 8008b34:	f000 fe0d 	bl	8009752 <__i2b>
 8008b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	b35b      	cbz	r3, 8008b96 <_dtoa_r+0x7e6>
 8008b3e:	461a      	mov	r2, r3
 8008b40:	4601      	mov	r1, r0
 8008b42:	4650      	mov	r0, sl
 8008b44:	f000 fea0 	bl	8009888 <__pow5mult>
 8008b48:	9b06      	ldr	r3, [sp, #24]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	dc18      	bgt.n	8008b82 <_dtoa_r+0x7d2>
 8008b50:	9b00      	ldr	r3, [sp, #0]
 8008b52:	b983      	cbnz	r3, 8008b76 <_dtoa_r+0x7c6>
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b5a:	b973      	cbnz	r3, 8008b7a <_dtoa_r+0x7ca>
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8008b62:	0d3f      	lsrs	r7, r7, #20
 8008b64:	053f      	lsls	r7, r7, #20
 8008b66:	b14f      	cbz	r7, 8008b7c <_dtoa_r+0x7cc>
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	f109 0901 	add.w	r9, r9, #1
 8008b70:	9305      	str	r3, [sp, #20]
 8008b72:	2701      	movs	r7, #1
 8008b74:	e002      	b.n	8008b7c <_dtoa_r+0x7cc>
 8008b76:	2700      	movs	r7, #0
 8008b78:	e000      	b.n	8008b7c <_dtoa_r+0x7cc>
 8008b7a:	9f00      	ldr	r7, [sp, #0]
 8008b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b7e:	b173      	cbz	r3, 8008b9e <_dtoa_r+0x7ee>
 8008b80:	e000      	b.n	8008b84 <_dtoa_r+0x7d4>
 8008b82:	2700      	movs	r7, #0
 8008b84:	692b      	ldr	r3, [r5, #16]
 8008b86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008b8a:	6918      	ldr	r0, [r3, #16]
 8008b8c:	f000 fd94 	bl	80096b8 <__hi0bits>
 8008b90:	f1c0 0020 	rsb	r0, r0, #32
 8008b94:	e004      	b.n	8008ba0 <_dtoa_r+0x7f0>
 8008b96:	9b06      	ldr	r3, [sp, #24]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	ddd9      	ble.n	8008b50 <_dtoa_r+0x7a0>
 8008b9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	9b05      	ldr	r3, [sp, #20]
 8008ba2:	4418      	add	r0, r3
 8008ba4:	f010 001f 	ands.w	r0, r0, #31
 8008ba8:	d00e      	beq.n	8008bc8 <_dtoa_r+0x818>
 8008baa:	f1c0 0320 	rsb	r3, r0, #32
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	dd08      	ble.n	8008bc4 <_dtoa_r+0x814>
 8008bb2:	f1c0 001c 	rsb	r0, r0, #28
 8008bb6:	e008      	b.n	8008bca <_dtoa_r+0x81a>
 8008bb8:	0800a8b0 	.word	0x0800a8b0
 8008bbc:	40140000 	.word	0x40140000
 8008bc0:	40240000 	.word	0x40240000
 8008bc4:	d006      	beq.n	8008bd4 <_dtoa_r+0x824>
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	301c      	adds	r0, #28
 8008bca:	9b05      	ldr	r3, [sp, #20]
 8008bcc:	4403      	add	r3, r0
 8008bce:	4481      	add	r9, r0
 8008bd0:	4404      	add	r4, r0
 8008bd2:	9305      	str	r3, [sp, #20]
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	dd05      	ble.n	8008be6 <_dtoa_r+0x836>
 8008bda:	464a      	mov	r2, r9
 8008bdc:	9902      	ldr	r1, [sp, #8]
 8008bde:	4650      	mov	r0, sl
 8008be0:	f000 fea0 	bl	8009924 <__lshift>
 8008be4:	9002      	str	r0, [sp, #8]
 8008be6:	9b05      	ldr	r3, [sp, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dd05      	ble.n	8008bf8 <_dtoa_r+0x848>
 8008bec:	4629      	mov	r1, r5
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	f000 fe97 	bl	8009924 <__lshift>
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bfa:	b1eb      	cbz	r3, 8008c38 <_dtoa_r+0x888>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	9802      	ldr	r0, [sp, #8]
 8008c00:	f000 fee1 	bl	80099c6 <__mcmp>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	da17      	bge.n	8008c38 <_dtoa_r+0x888>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	220a      	movs	r2, #10
 8008c0c:	9902      	ldr	r1, [sp, #8]
 8008c0e:	4650      	mov	r0, sl
 8008c10:	f000 fd17 	bl	8009642 <__multadd>
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	9002      	str	r0, [sp, #8]
 8008c18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8158 	beq.w	8008ed2 <_dtoa_r+0xb22>
 8008c22:	2300      	movs	r3, #0
 8008c24:	4631      	mov	r1, r6
 8008c26:	220a      	movs	r2, #10
 8008c28:	4650      	mov	r0, sl
 8008c2a:	f000 fd0a 	bl	8009642 <__multadd>
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	4606      	mov	r6, r0
 8008c34:	dc37      	bgt.n	8008ca6 <_dtoa_r+0x8f6>
 8008c36:	e033      	b.n	8008ca0 <_dtoa_r+0x8f0>
 8008c38:	f1b8 0f00 	cmp.w	r8, #0
 8008c3c:	dc2a      	bgt.n	8008c94 <_dtoa_r+0x8e4>
 8008c3e:	9b06      	ldr	r3, [sp, #24]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	dd27      	ble.n	8008c94 <_dtoa_r+0x8e4>
 8008c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	b983      	cbnz	r3, 8008c6e <_dtoa_r+0x8be>
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	2205      	movs	r2, #5
 8008c50:	4650      	mov	r0, sl
 8008c52:	f000 fcf6 	bl	8009642 <__multadd>
 8008c56:	4601      	mov	r1, r0
 8008c58:	4605      	mov	r5, r0
 8008c5a:	9802      	ldr	r0, [sp, #8]
 8008c5c:	f000 feb3 	bl	80099c6 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dc0d      	bgt.n	8008c80 <_dtoa_r+0x8d0>
 8008c64:	e003      	b.n	8008c6e <_dtoa_r+0x8be>
 8008c66:	463d      	mov	r5, r7
 8008c68:	e000      	b.n	8008c6c <_dtoa_r+0x8bc>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	462e      	mov	r6, r5
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	9c04      	ldr	r4, [sp, #16]
 8008c72:	ea6f 0b03 	mvn.w	fp, r3
 8008c76:	e00a      	b.n	8008c8e <_dtoa_r+0x8de>
 8008c78:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008c7c:	463d      	mov	r5, r7
 8008c7e:	463e      	mov	r6, r7
 8008c80:	9b04      	ldr	r3, [sp, #16]
 8008c82:	9a04      	ldr	r2, [sp, #16]
 8008c84:	1c5c      	adds	r4, r3, #1
 8008c86:	2331      	movs	r3, #49	; 0x31
 8008c88:	7013      	strb	r3, [r2, #0]
 8008c8a:	f10b 0b01 	add.w	fp, fp, #1
 8008c8e:	46b0      	mov	r8, r6
 8008c90:	2600      	movs	r6, #0
 8008c92:	e0f7      	b.n	8008e84 <_dtoa_r+0xad4>
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c9a:	b923      	cbnz	r3, 8008ca6 <_dtoa_r+0x8f6>
 8008c9c:	9c04      	ldr	r4, [sp, #16]
 8008c9e:	e0b1      	b.n	8008e04 <_dtoa_r+0xa54>
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	dcd0      	bgt.n	8008c48 <_dtoa_r+0x898>
 8008ca6:	2c00      	cmp	r4, #0
 8008ca8:	dd05      	ble.n	8008cb6 <_dtoa_r+0x906>
 8008caa:	4631      	mov	r1, r6
 8008cac:	4622      	mov	r2, r4
 8008cae:	4650      	mov	r0, sl
 8008cb0:	f000 fe38 	bl	8009924 <__lshift>
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	b19f      	cbz	r7, 8008ce0 <_dtoa_r+0x930>
 8008cb8:	6871      	ldr	r1, [r6, #4]
 8008cba:	4650      	mov	r0, sl
 8008cbc:	f000 fc75 	bl	80095aa <_Balloc>
 8008cc0:	6932      	ldr	r2, [r6, #16]
 8008cc2:	3202      	adds	r2, #2
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	0092      	lsls	r2, r2, #2
 8008cc8:	f106 010c 	add.w	r1, r6, #12
 8008ccc:	300c      	adds	r0, #12
 8008cce:	f7fe fa63 	bl	8007198 <memcpy>
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	f000 fe24 	bl	8009924 <__lshift>
 8008cdc:	4680      	mov	r8, r0
 8008cde:	e000      	b.n	8008ce2 <_dtoa_r+0x932>
 8008ce0:	46b0      	mov	r8, r6
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	4629      	mov	r1, r5
 8008cf0:	9802      	ldr	r0, [sp, #8]
 8008cf2:	f7ff facb 	bl	800828c <quorem>
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008cfe:	9802      	ldr	r0, [sp, #8]
 8008d00:	f000 fe61 	bl	80099c6 <__mcmp>
 8008d04:	4642      	mov	r2, r8
 8008d06:	9000      	str	r0, [sp, #0]
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	f000 fe77 	bl	80099fe <__mdiff>
 8008d10:	68c3      	ldr	r3, [r0, #12]
 8008d12:	4602      	mov	r2, r0
 8008d14:	b93b      	cbnz	r3, 8008d26 <_dtoa_r+0x976>
 8008d16:	4601      	mov	r1, r0
 8008d18:	9007      	str	r0, [sp, #28]
 8008d1a:	9802      	ldr	r0, [sp, #8]
 8008d1c:	f000 fe53 	bl	80099c6 <__mcmp>
 8008d20:	9a07      	ldr	r2, [sp, #28]
 8008d22:	4603      	mov	r3, r0
 8008d24:	e000      	b.n	8008d28 <_dtoa_r+0x978>
 8008d26:	2301      	movs	r3, #1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	f000 fc71 	bl	8009614 <_Bfree>
 8008d32:	9b07      	ldr	r3, [sp, #28]
 8008d34:	b94b      	cbnz	r3, 8008d4a <_dtoa_r+0x99a>
 8008d36:	9a06      	ldr	r2, [sp, #24]
 8008d38:	b93a      	cbnz	r2, 8008d4a <_dtoa_r+0x99a>
 8008d3a:	9a05      	ldr	r2, [sp, #20]
 8008d3c:	b92a      	cbnz	r2, 8008d4a <_dtoa_r+0x99a>
 8008d3e:	2f39      	cmp	r7, #57	; 0x39
 8008d40:	d028      	beq.n	8008d94 <_dtoa_r+0x9e4>
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dc1a      	bgt.n	8008d7e <_dtoa_r+0x9ce>
 8008d48:	e01b      	b.n	8008d82 <_dtoa_r+0x9d2>
 8008d4a:	9a00      	ldr	r2, [sp, #0]
 8008d4c:	2a00      	cmp	r2, #0
 8008d4e:	db04      	blt.n	8008d5a <_dtoa_r+0x9aa>
 8008d50:	d11a      	bne.n	8008d88 <_dtoa_r+0x9d8>
 8008d52:	9a06      	ldr	r2, [sp, #24]
 8008d54:	b9c2      	cbnz	r2, 8008d88 <_dtoa_r+0x9d8>
 8008d56:	9a05      	ldr	r2, [sp, #20]
 8008d58:	b9b2      	cbnz	r2, 8008d88 <_dtoa_r+0x9d8>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dd11      	ble.n	8008d82 <_dtoa_r+0x9d2>
 8008d5e:	2201      	movs	r2, #1
 8008d60:	9902      	ldr	r1, [sp, #8]
 8008d62:	4650      	mov	r0, sl
 8008d64:	f000 fdde 	bl	8009924 <__lshift>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	9002      	str	r0, [sp, #8]
 8008d6c:	f000 fe2b 	bl	80099c6 <__mcmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	dc02      	bgt.n	8008d7a <_dtoa_r+0x9ca>
 8008d74:	d105      	bne.n	8008d82 <_dtoa_r+0x9d2>
 8008d76:	07fa      	lsls	r2, r7, #31
 8008d78:	d503      	bpl.n	8008d82 <_dtoa_r+0x9d2>
 8008d7a:	2f39      	cmp	r7, #57	; 0x39
 8008d7c:	d00a      	beq.n	8008d94 <_dtoa_r+0x9e4>
 8008d7e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8008d82:	f109 0401 	add.w	r4, r9, #1
 8008d86:	e00c      	b.n	8008da2 <_dtoa_r+0x9f2>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f109 0401 	add.w	r4, r9, #1
 8008d8e:	dd0b      	ble.n	8008da8 <_dtoa_r+0x9f8>
 8008d90:	2f39      	cmp	r7, #57	; 0x39
 8008d92:	d105      	bne.n	8008da0 <_dtoa_r+0x9f0>
 8008d94:	2339      	movs	r3, #57	; 0x39
 8008d96:	f889 3000 	strb.w	r3, [r9]
 8008d9a:	f109 0901 	add.w	r9, r9, #1
 8008d9e:	e054      	b.n	8008e4a <_dtoa_r+0xa9a>
 8008da0:	3701      	adds	r7, #1
 8008da2:	f889 7000 	strb.w	r7, [r9]
 8008da6:	e06d      	b.n	8008e84 <_dtoa_r+0xad4>
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	9a03      	ldr	r2, [sp, #12]
 8008dac:	f804 7c01 	strb.w	r7, [r4, #-1]
 8008db0:	1ae3      	subs	r3, r4, r3
 8008db2:	4293      	cmp	r3, r2
 8008db4:	46a1      	mov	r9, r4
 8008db6:	d03a      	beq.n	8008e2e <_dtoa_r+0xa7e>
 8008db8:	2300      	movs	r3, #0
 8008dba:	220a      	movs	r2, #10
 8008dbc:	9902      	ldr	r1, [sp, #8]
 8008dbe:	4650      	mov	r0, sl
 8008dc0:	f000 fc3f 	bl	8009642 <__multadd>
 8008dc4:	4546      	cmp	r6, r8
 8008dc6:	9002      	str	r0, [sp, #8]
 8008dc8:	f04f 0300 	mov.w	r3, #0
 8008dcc:	f04f 020a 	mov.w	r2, #10
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	d104      	bne.n	8008de0 <_dtoa_r+0xa30>
 8008dd6:	f000 fc34 	bl	8009642 <__multadd>
 8008dda:	4606      	mov	r6, r0
 8008ddc:	4680      	mov	r8, r0
 8008dde:	e786      	b.n	8008cee <_dtoa_r+0x93e>
 8008de0:	f000 fc2f 	bl	8009642 <__multadd>
 8008de4:	4641      	mov	r1, r8
 8008de6:	4606      	mov	r6, r0
 8008de8:	2300      	movs	r3, #0
 8008dea:	220a      	movs	r2, #10
 8008dec:	4650      	mov	r0, sl
 8008dee:	f000 fc28 	bl	8009642 <__multadd>
 8008df2:	4680      	mov	r8, r0
 8008df4:	e77b      	b.n	8008cee <_dtoa_r+0x93e>
 8008df6:	2300      	movs	r3, #0
 8008df8:	220a      	movs	r2, #10
 8008dfa:	9902      	ldr	r1, [sp, #8]
 8008dfc:	4650      	mov	r0, sl
 8008dfe:	f000 fc20 	bl	8009642 <__multadd>
 8008e02:	9002      	str	r0, [sp, #8]
 8008e04:	4629      	mov	r1, r5
 8008e06:	9802      	ldr	r0, [sp, #8]
 8008e08:	f7ff fa40 	bl	800828c <quorem>
 8008e0c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008e10:	f804 7b01 	strb.w	r7, [r4], #1
 8008e14:	9b04      	ldr	r3, [sp, #16]
 8008e16:	9a03      	ldr	r2, [sp, #12]
 8008e18:	1ae3      	subs	r3, r4, r3
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	dbeb      	blt.n	8008df6 <_dtoa_r+0xa46>
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	2a01      	cmp	r2, #1
 8008e22:	bfac      	ite	ge
 8008e24:	189b      	addge	r3, r3, r2
 8008e26:	3301      	addlt	r3, #1
 8008e28:	46b0      	mov	r8, r6
 8008e2a:	4699      	mov	r9, r3
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	2201      	movs	r2, #1
 8008e30:	9902      	ldr	r1, [sp, #8]
 8008e32:	4650      	mov	r0, sl
 8008e34:	f000 fd76 	bl	8009924 <__lshift>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	9002      	str	r0, [sp, #8]
 8008e3c:	f000 fdc3 	bl	80099c6 <__mcmp>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	dc02      	bgt.n	8008e4a <_dtoa_r+0xa9a>
 8008e44:	d115      	bne.n	8008e72 <_dtoa_r+0xac2>
 8008e46:	07fb      	lsls	r3, r7, #31
 8008e48:	d513      	bpl.n	8008e72 <_dtoa_r+0xac2>
 8008e4a:	464c      	mov	r4, r9
 8008e4c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008e50:	2b39      	cmp	r3, #57	; 0x39
 8008e52:	f104 32ff 	add.w	r2, r4, #4294967295
 8008e56:	d109      	bne.n	8008e6c <_dtoa_r+0xabc>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d104      	bne.n	8008e68 <_dtoa_r+0xab8>
 8008e5e:	f10b 0b01 	add.w	fp, fp, #1
 8008e62:	2331      	movs	r3, #49	; 0x31
 8008e64:	9a04      	ldr	r2, [sp, #16]
 8008e66:	e002      	b.n	8008e6e <_dtoa_r+0xabe>
 8008e68:	4614      	mov	r4, r2
 8008e6a:	e7ef      	b.n	8008e4c <_dtoa_r+0xa9c>
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	7013      	strb	r3, [r2, #0]
 8008e70:	e008      	b.n	8008e84 <_dtoa_r+0xad4>
 8008e72:	464c      	mov	r4, r9
 8008e74:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008e78:	2b30      	cmp	r3, #48	; 0x30
 8008e7a:	f104 32ff 	add.w	r2, r4, #4294967295
 8008e7e:	d101      	bne.n	8008e84 <_dtoa_r+0xad4>
 8008e80:	4614      	mov	r4, r2
 8008e82:	e7f7      	b.n	8008e74 <_dtoa_r+0xac4>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4650      	mov	r0, sl
 8008e88:	f000 fbc4 	bl	8009614 <_Bfree>
 8008e8c:	f1b8 0f00 	cmp.w	r8, #0
 8008e90:	d00d      	beq.n	8008eae <_dtoa_r+0xafe>
 8008e92:	b12e      	cbz	r6, 8008ea0 <_dtoa_r+0xaf0>
 8008e94:	4546      	cmp	r6, r8
 8008e96:	d003      	beq.n	8008ea0 <_dtoa_r+0xaf0>
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f000 fbba 	bl	8009614 <_Bfree>
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	f000 fbb6 	bl	8009614 <_Bfree>
 8008ea8:	e001      	b.n	8008eae <_dtoa_r+0xafe>
 8008eaa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008eae:	9902      	ldr	r1, [sp, #8]
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	f000 fbaf 	bl	8009614 <_Bfree>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008eba:	7023      	strb	r3, [r4, #0]
 8008ebc:	f10b 0301 	add.w	r3, fp, #1
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec4:	b11b      	cbz	r3, 8008ece <_dtoa_r+0xb1e>
 8008ec6:	601c      	str	r4, [r3, #0]
 8008ec8:	e001      	b.n	8008ece <_dtoa_r+0xb1e>
 8008eca:	4808      	ldr	r0, [pc, #32]	; (8008eec <_dtoa_r+0xb3c>)
 8008ecc:	e00a      	b.n	8008ee4 <_dtoa_r+0xb34>
 8008ece:	9804      	ldr	r0, [sp, #16]
 8008ed0:	e008      	b.n	8008ee4 <_dtoa_r+0xb34>
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f73f aee1 	bgt.w	8008c9c <_dtoa_r+0x8ec>
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	f77f aedd 	ble.w	8008c9c <_dtoa_r+0x8ec>
 8008ee2:	e6b1      	b.n	8008c48 <_dtoa_r+0x898>
 8008ee4:	b017      	add	sp, #92	; 0x5c
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	bf00      	nop
 8008eec:	0800a728 	.word	0x0800a728

08008ef0 <_malloc_trim_r>:
 8008ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	4f25      	ldr	r7, [pc, #148]	; (8008f8c <_malloc_trim_r+0x9c>)
 8008ef6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008f98 <_malloc_trim_r+0xa8>
 8008efa:	4689      	mov	r9, r1
 8008efc:	4606      	mov	r6, r0
 8008efe:	f000 fb52 	bl	80095a6 <__malloc_lock>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	685d      	ldr	r5, [r3, #4]
 8008f06:	f1a8 0411 	sub.w	r4, r8, #17
 8008f0a:	f025 0503 	bic.w	r5, r5, #3
 8008f0e:	442c      	add	r4, r5
 8008f10:	ebc9 0404 	rsb	r4, r9, r4
 8008f14:	fbb4 f4f8 	udiv	r4, r4, r8
 8008f18:	3c01      	subs	r4, #1
 8008f1a:	fb08 f404 	mul.w	r4, r8, r4
 8008f1e:	4544      	cmp	r4, r8
 8008f20:	da05      	bge.n	8008f2e <_malloc_trim_r+0x3e>
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 fb40 	bl	80095a8 <__malloc_unlock>
 8008f28:	2000      	movs	r0, #0
 8008f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4630      	mov	r0, r6
 8008f32:	f000 ffb9 	bl	8009ea8 <_sbrk_r>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	442b      	add	r3, r5
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	d1f1      	bne.n	8008f22 <_malloc_trim_r+0x32>
 8008f3e:	4261      	negs	r1, r4
 8008f40:	4630      	mov	r0, r6
 8008f42:	f000 ffb1 	bl	8009ea8 <_sbrk_r>
 8008f46:	3001      	adds	r0, #1
 8008f48:	d110      	bne.n	8008f6c <_malloc_trim_r+0x7c>
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 ffab 	bl	8009ea8 <_sbrk_r>
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	1a83      	subs	r3, r0, r2
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	dde3      	ble.n	8008f22 <_malloc_trim_r+0x32>
 8008f5a:	490d      	ldr	r1, [pc, #52]	; (8008f90 <_malloc_trim_r+0xa0>)
 8008f5c:	6809      	ldr	r1, [r1, #0]
 8008f5e:	1a40      	subs	r0, r0, r1
 8008f60:	490c      	ldr	r1, [pc, #48]	; (8008f94 <_malloc_trim_r+0xa4>)
 8008f62:	f043 0301 	orr.w	r3, r3, #1
 8008f66:	6008      	str	r0, [r1, #0]
 8008f68:	6053      	str	r3, [r2, #4]
 8008f6a:	e7da      	b.n	8008f22 <_malloc_trim_r+0x32>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4a09      	ldr	r2, [pc, #36]	; (8008f94 <_malloc_trim_r+0xa4>)
 8008f70:	1b2d      	subs	r5, r5, r4
 8008f72:	f045 0501 	orr.w	r5, r5, #1
 8008f76:	605d      	str	r5, [r3, #4]
 8008f78:	6813      	ldr	r3, [r2, #0]
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	1b1c      	subs	r4, r3, r4
 8008f7e:	6014      	str	r4, [r2, #0]
 8008f80:	f000 fb12 	bl	80095a8 <__malloc_unlock>
 8008f84:	2001      	movs	r0, #1
 8008f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20010150 	.word	0x20010150
 8008f90:	2001055c 	.word	0x2001055c
 8008f94:	2001442c 	.word	0x2001442c
 8008f98:	00000080 	.word	0x00000080

08008f9c <_free_r>:
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	4688      	mov	r8, r1
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	f000 80ad 	beq.w	8009104 <_free_r+0x168>
 8008faa:	f000 fafc 	bl	80095a6 <__malloc_lock>
 8008fae:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008fb2:	4d55      	ldr	r5, [pc, #340]	; (8009108 <_free_r+0x16c>)
 8008fb4:	f022 0001 	bic.w	r0, r2, #1
 8008fb8:	f1a8 0308 	sub.w	r3, r8, #8
 8008fbc:	181f      	adds	r7, r3, r0
 8008fbe:	68a9      	ldr	r1, [r5, #8]
 8008fc0:	687e      	ldr	r6, [r7, #4]
 8008fc2:	428f      	cmp	r7, r1
 8008fc4:	f026 0603 	bic.w	r6, r6, #3
 8008fc8:	f002 0201 	and.w	r2, r2, #1
 8008fcc:	d11b      	bne.n	8009006 <_free_r+0x6a>
 8008fce:	4430      	add	r0, r6
 8008fd0:	b93a      	cbnz	r2, 8008fe2 <_free_r+0x46>
 8008fd2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008fd6:	1a9b      	subs	r3, r3, r2
 8008fd8:	4410      	add	r0, r2
 8008fda:	6899      	ldr	r1, [r3, #8]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	60ca      	str	r2, [r1, #12]
 8008fe0:	6091      	str	r1, [r2, #8]
 8008fe2:	f040 0201 	orr.w	r2, r0, #1
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	60ab      	str	r3, [r5, #8]
 8008fea:	4b48      	ldr	r3, [pc, #288]	; (800910c <_free_r+0x170>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	d304      	bcc.n	8008ffc <_free_r+0x60>
 8008ff2:	4b47      	ldr	r3, [pc, #284]	; (8009110 <_free_r+0x174>)
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	6819      	ldr	r1, [r3, #0]
 8008ff8:	f7ff ff7a 	bl	8008ef0 <_malloc_trim_r>
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	f000 bad1 	b.w	80095a8 <__malloc_unlock>
 8009006:	607e      	str	r6, [r7, #4]
 8009008:	b97a      	cbnz	r2, 800902a <_free_r+0x8e>
 800900a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800900e:	1a5b      	subs	r3, r3, r1
 8009010:	4408      	add	r0, r1
 8009012:	6899      	ldr	r1, [r3, #8]
 8009014:	f105 0e08 	add.w	lr, r5, #8
 8009018:	4571      	cmp	r1, lr
 800901a:	d008      	beq.n	800902e <_free_r+0x92>
 800901c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8009020:	f8c1 e00c 	str.w	lr, [r1, #12]
 8009024:	f8ce 1008 	str.w	r1, [lr, #8]
 8009028:	e002      	b.n	8009030 <_free_r+0x94>
 800902a:	2200      	movs	r2, #0
 800902c:	e000      	b.n	8009030 <_free_r+0x94>
 800902e:	2201      	movs	r2, #1
 8009030:	19b9      	adds	r1, r7, r6
 8009032:	6849      	ldr	r1, [r1, #4]
 8009034:	07c9      	lsls	r1, r1, #31
 8009036:	d40e      	bmi.n	8009056 <_free_r+0xba>
 8009038:	4430      	add	r0, r6
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	b942      	cbnz	r2, 8009050 <_free_r+0xb4>
 800903e:	4e35      	ldr	r6, [pc, #212]	; (8009114 <_free_r+0x178>)
 8009040:	42b1      	cmp	r1, r6
 8009042:	d105      	bne.n	8009050 <_free_r+0xb4>
 8009044:	616b      	str	r3, [r5, #20]
 8009046:	612b      	str	r3, [r5, #16]
 8009048:	2201      	movs	r2, #1
 800904a:	60d9      	str	r1, [r3, #12]
 800904c:	6099      	str	r1, [r3, #8]
 800904e:	e002      	b.n	8009056 <_free_r+0xba>
 8009050:	68fe      	ldr	r6, [r7, #12]
 8009052:	60ce      	str	r6, [r1, #12]
 8009054:	60b1      	str	r1, [r6, #8]
 8009056:	f040 0101 	orr.w	r1, r0, #1
 800905a:	6059      	str	r1, [r3, #4]
 800905c:	5018      	str	r0, [r3, r0]
 800905e:	2a00      	cmp	r2, #0
 8009060:	d1cc      	bne.n	8008ffc <_free_r+0x60>
 8009062:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009066:	d212      	bcs.n	800908e <_free_r+0xf2>
 8009068:	08c0      	lsrs	r0, r0, #3
 800906a:	1081      	asrs	r1, r0, #2
 800906c:	2201      	movs	r2, #1
 800906e:	fa02 f101 	lsl.w	r1, r2, r1
 8009072:	686a      	ldr	r2, [r5, #4]
 8009074:	3001      	adds	r0, #1
 8009076:	430a      	orrs	r2, r1
 8009078:	606a      	str	r2, [r5, #4]
 800907a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800907e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009082:	6099      	str	r1, [r3, #8]
 8009084:	3a08      	subs	r2, #8
 8009086:	60da      	str	r2, [r3, #12]
 8009088:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800908c:	e038      	b.n	8009100 <_free_r+0x164>
 800908e:	0a42      	lsrs	r2, r0, #9
 8009090:	2a04      	cmp	r2, #4
 8009092:	d802      	bhi.n	800909a <_free_r+0xfe>
 8009094:	0982      	lsrs	r2, r0, #6
 8009096:	3238      	adds	r2, #56	; 0x38
 8009098:	e015      	b.n	80090c6 <_free_r+0x12a>
 800909a:	2a14      	cmp	r2, #20
 800909c:	d801      	bhi.n	80090a2 <_free_r+0x106>
 800909e:	325b      	adds	r2, #91	; 0x5b
 80090a0:	e011      	b.n	80090c6 <_free_r+0x12a>
 80090a2:	2a54      	cmp	r2, #84	; 0x54
 80090a4:	d802      	bhi.n	80090ac <_free_r+0x110>
 80090a6:	0b02      	lsrs	r2, r0, #12
 80090a8:	326e      	adds	r2, #110	; 0x6e
 80090aa:	e00c      	b.n	80090c6 <_free_r+0x12a>
 80090ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80090b0:	d802      	bhi.n	80090b8 <_free_r+0x11c>
 80090b2:	0bc2      	lsrs	r2, r0, #15
 80090b4:	3277      	adds	r2, #119	; 0x77
 80090b6:	e006      	b.n	80090c6 <_free_r+0x12a>
 80090b8:	f240 5154 	movw	r1, #1364	; 0x554
 80090bc:	428a      	cmp	r2, r1
 80090be:	bf9a      	itte	ls
 80090c0:	0c82      	lsrls	r2, r0, #18
 80090c2:	327c      	addls	r2, #124	; 0x7c
 80090c4:	227e      	movhi	r2, #126	; 0x7e
 80090c6:	1c51      	adds	r1, r2, #1
 80090c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80090cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80090d0:	4f0d      	ldr	r7, [pc, #52]	; (8009108 <_free_r+0x16c>)
 80090d2:	428e      	cmp	r6, r1
 80090d4:	d10b      	bne.n	80090ee <_free_r+0x152>
 80090d6:	2101      	movs	r1, #1
 80090d8:	1092      	asrs	r2, r2, #2
 80090da:	fa01 f202 	lsl.w	r2, r1, r2
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4311      	orrs	r1, r2
 80090e2:	6079      	str	r1, [r7, #4]
 80090e4:	4631      	mov	r1, r6
 80090e6:	e008      	b.n	80090fa <_free_r+0x15e>
 80090e8:	6889      	ldr	r1, [r1, #8]
 80090ea:	428e      	cmp	r6, r1
 80090ec:	d004      	beq.n	80090f8 <_free_r+0x15c>
 80090ee:	684a      	ldr	r2, [r1, #4]
 80090f0:	f022 0203 	bic.w	r2, r2, #3
 80090f4:	4290      	cmp	r0, r2
 80090f6:	d3f7      	bcc.n	80090e8 <_free_r+0x14c>
 80090f8:	68ce      	ldr	r6, [r1, #12]
 80090fa:	60de      	str	r6, [r3, #12]
 80090fc:	6099      	str	r1, [r3, #8]
 80090fe:	60b3      	str	r3, [r6, #8]
 8009100:	60cb      	str	r3, [r1, #12]
 8009102:	e77b      	b.n	8008ffc <_free_r+0x60>
 8009104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009108:	20010150 	.word	0x20010150
 800910c:	20010558 	.word	0x20010558
 8009110:	20014428 	.word	0x20014428
 8009114:	20010158 	.word	0x20010158

08009118 <_localeconv_r>:
 8009118:	4800      	ldr	r0, [pc, #0]	; (800911c <_localeconv_r+0x4>)
 800911a:	4770      	bx	lr
 800911c:	20010118 	.word	0x20010118

08009120 <malloc>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <malloc+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f000 b803 	b.w	8009130 <_malloc_r>
 800912a:	bf00      	nop
 800912c:	20010110 	.word	0x20010110

08009130 <_malloc_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	f101 040b 	add.w	r4, r1, #11
 8009138:	2c16      	cmp	r4, #22
 800913a:	b085      	sub	sp, #20
 800913c:	4681      	mov	r9, r0
 800913e:	d903      	bls.n	8009148 <_malloc_r+0x18>
 8009140:	f034 0407 	bics.w	r4, r4, #7
 8009144:	d501      	bpl.n	800914a <_malloc_r+0x1a>
 8009146:	e002      	b.n	800914e <_malloc_r+0x1e>
 8009148:	2410      	movs	r4, #16
 800914a:	428c      	cmp	r4, r1
 800914c:	d203      	bcs.n	8009156 <_malloc_r+0x26>
 800914e:	230c      	movs	r3, #12
 8009150:	f8c9 3000 	str.w	r3, [r9]
 8009154:	e1ea      	b.n	800952c <_malloc_r+0x3fc>
 8009156:	4648      	mov	r0, r9
 8009158:	f000 fa25 	bl	80095a6 <__malloc_lock>
 800915c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009160:	4d9e      	ldr	r5, [pc, #632]	; (80093dc <_malloc_r+0x2ac>)
 8009162:	d217      	bcs.n	8009194 <_malloc_r+0x64>
 8009164:	f104 0208 	add.w	r2, r4, #8
 8009168:	442a      	add	r2, r5
 800916a:	f1a2 0108 	sub.w	r1, r2, #8
 800916e:	6856      	ldr	r6, [r2, #4]
 8009170:	428e      	cmp	r6, r1
 8009172:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009176:	d102      	bne.n	800917e <_malloc_r+0x4e>
 8009178:	68d6      	ldr	r6, [r2, #12]
 800917a:	42b2      	cmp	r2, r6
 800917c:	d008      	beq.n	8009190 <_malloc_r+0x60>
 800917e:	6873      	ldr	r3, [r6, #4]
 8009180:	68f2      	ldr	r2, [r6, #12]
 8009182:	68b1      	ldr	r1, [r6, #8]
 8009184:	f023 0303 	bic.w	r3, r3, #3
 8009188:	60ca      	str	r2, [r1, #12]
 800918a:	4433      	add	r3, r6
 800918c:	6091      	str	r1, [r2, #8]
 800918e:	e02f      	b.n	80091f0 <_malloc_r+0xc0>
 8009190:	3302      	adds	r3, #2
 8009192:	e03d      	b.n	8009210 <_malloc_r+0xe0>
 8009194:	0a63      	lsrs	r3, r4, #9
 8009196:	d01a      	beq.n	80091ce <_malloc_r+0x9e>
 8009198:	2b04      	cmp	r3, #4
 800919a:	d802      	bhi.n	80091a2 <_malloc_r+0x72>
 800919c:	09a3      	lsrs	r3, r4, #6
 800919e:	3338      	adds	r3, #56	; 0x38
 80091a0:	e018      	b.n	80091d4 <_malloc_r+0xa4>
 80091a2:	2b14      	cmp	r3, #20
 80091a4:	d801      	bhi.n	80091aa <_malloc_r+0x7a>
 80091a6:	335b      	adds	r3, #91	; 0x5b
 80091a8:	e014      	b.n	80091d4 <_malloc_r+0xa4>
 80091aa:	2b54      	cmp	r3, #84	; 0x54
 80091ac:	d802      	bhi.n	80091b4 <_malloc_r+0x84>
 80091ae:	0b23      	lsrs	r3, r4, #12
 80091b0:	336e      	adds	r3, #110	; 0x6e
 80091b2:	e00f      	b.n	80091d4 <_malloc_r+0xa4>
 80091b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80091b8:	d802      	bhi.n	80091c0 <_malloc_r+0x90>
 80091ba:	0be3      	lsrs	r3, r4, #15
 80091bc:	3377      	adds	r3, #119	; 0x77
 80091be:	e009      	b.n	80091d4 <_malloc_r+0xa4>
 80091c0:	f240 5254 	movw	r2, #1364	; 0x554
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d804      	bhi.n	80091d2 <_malloc_r+0xa2>
 80091c8:	0ca3      	lsrs	r3, r4, #18
 80091ca:	337c      	adds	r3, #124	; 0x7c
 80091cc:	e002      	b.n	80091d4 <_malloc_r+0xa4>
 80091ce:	233f      	movs	r3, #63	; 0x3f
 80091d0:	e000      	b.n	80091d4 <_malloc_r+0xa4>
 80091d2:	237e      	movs	r3, #126	; 0x7e
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80091da:	f1a2 0008 	sub.w	r0, r2, #8
 80091de:	6856      	ldr	r6, [r2, #4]
 80091e0:	e00c      	b.n	80091fc <_malloc_r+0xcc>
 80091e2:	2900      	cmp	r1, #0
 80091e4:	68f1      	ldr	r1, [r6, #12]
 80091e6:	db08      	blt.n	80091fa <_malloc_r+0xca>
 80091e8:	68b3      	ldr	r3, [r6, #8]
 80091ea:	60d9      	str	r1, [r3, #12]
 80091ec:	608b      	str	r3, [r1, #8]
 80091ee:	18b3      	adds	r3, r6, r2
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	f042 0201 	orr.w	r2, r2, #1
 80091f6:	605a      	str	r2, [r3, #4]
 80091f8:	e1a3      	b.n	8009542 <_malloc_r+0x412>
 80091fa:	460e      	mov	r6, r1
 80091fc:	4286      	cmp	r6, r0
 80091fe:	d006      	beq.n	800920e <_malloc_r+0xde>
 8009200:	6872      	ldr	r2, [r6, #4]
 8009202:	f022 0203 	bic.w	r2, r2, #3
 8009206:	1b11      	subs	r1, r2, r4
 8009208:	290f      	cmp	r1, #15
 800920a:	ddea      	ble.n	80091e2 <_malloc_r+0xb2>
 800920c:	3b01      	subs	r3, #1
 800920e:	3301      	adds	r3, #1
 8009210:	4a72      	ldr	r2, [pc, #456]	; (80093dc <_malloc_r+0x2ac>)
 8009212:	692e      	ldr	r6, [r5, #16]
 8009214:	f102 0708 	add.w	r7, r2, #8
 8009218:	42be      	cmp	r6, r7
 800921a:	4639      	mov	r1, r7
 800921c:	d079      	beq.n	8009312 <_malloc_r+0x1e2>
 800921e:	6870      	ldr	r0, [r6, #4]
 8009220:	f020 0003 	bic.w	r0, r0, #3
 8009224:	ebc4 0e00 	rsb	lr, r4, r0
 8009228:	f1be 0f0f 	cmp.w	lr, #15
 800922c:	dd0d      	ble.n	800924a <_malloc_r+0x11a>
 800922e:	1933      	adds	r3, r6, r4
 8009230:	f044 0401 	orr.w	r4, r4, #1
 8009234:	6074      	str	r4, [r6, #4]
 8009236:	6153      	str	r3, [r2, #20]
 8009238:	6113      	str	r3, [r2, #16]
 800923a:	f04e 0201 	orr.w	r2, lr, #1
 800923e:	60df      	str	r7, [r3, #12]
 8009240:	609f      	str	r7, [r3, #8]
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	f843 e00e 	str.w	lr, [r3, lr]
 8009248:	e17b      	b.n	8009542 <_malloc_r+0x412>
 800924a:	f1be 0f00 	cmp.w	lr, #0
 800924e:	6157      	str	r7, [r2, #20]
 8009250:	6117      	str	r7, [r2, #16]
 8009252:	db05      	blt.n	8009260 <_malloc_r+0x130>
 8009254:	4430      	add	r0, r6
 8009256:	6843      	ldr	r3, [r0, #4]
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6043      	str	r3, [r0, #4]
 800925e:	e170      	b.n	8009542 <_malloc_r+0x412>
 8009260:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009264:	d215      	bcs.n	8009292 <_malloc_r+0x162>
 8009266:	08c0      	lsrs	r0, r0, #3
 8009268:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800926c:	2701      	movs	r7, #1
 800926e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8009272:	6857      	ldr	r7, [r2, #4]
 8009274:	3001      	adds	r0, #1
 8009276:	ea4e 0707 	orr.w	r7, lr, r7
 800927a:	6057      	str	r7, [r2, #4]
 800927c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8009280:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8009284:	f8c6 e008 	str.w	lr, [r6, #8]
 8009288:	3f08      	subs	r7, #8
 800928a:	60f7      	str	r7, [r6, #12]
 800928c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8009290:	e03d      	b.n	800930e <_malloc_r+0x1de>
 8009292:	0a42      	lsrs	r2, r0, #9
 8009294:	2a04      	cmp	r2, #4
 8009296:	d802      	bhi.n	800929e <_malloc_r+0x16e>
 8009298:	0982      	lsrs	r2, r0, #6
 800929a:	3238      	adds	r2, #56	; 0x38
 800929c:	e015      	b.n	80092ca <_malloc_r+0x19a>
 800929e:	2a14      	cmp	r2, #20
 80092a0:	d801      	bhi.n	80092a6 <_malloc_r+0x176>
 80092a2:	325b      	adds	r2, #91	; 0x5b
 80092a4:	e011      	b.n	80092ca <_malloc_r+0x19a>
 80092a6:	2a54      	cmp	r2, #84	; 0x54
 80092a8:	d802      	bhi.n	80092b0 <_malloc_r+0x180>
 80092aa:	0b02      	lsrs	r2, r0, #12
 80092ac:	326e      	adds	r2, #110	; 0x6e
 80092ae:	e00c      	b.n	80092ca <_malloc_r+0x19a>
 80092b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80092b4:	d802      	bhi.n	80092bc <_malloc_r+0x18c>
 80092b6:	0bc2      	lsrs	r2, r0, #15
 80092b8:	3277      	adds	r2, #119	; 0x77
 80092ba:	e006      	b.n	80092ca <_malloc_r+0x19a>
 80092bc:	f240 5754 	movw	r7, #1364	; 0x554
 80092c0:	42ba      	cmp	r2, r7
 80092c2:	bf9a      	itte	ls
 80092c4:	0c82      	lsrls	r2, r0, #18
 80092c6:	327c      	addls	r2, #124	; 0x7c
 80092c8:	227e      	movhi	r2, #126	; 0x7e
 80092ca:	1c57      	adds	r7, r2, #1
 80092cc:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80092d0:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80092d4:	f8df c104 	ldr.w	ip, [pc, #260]	; 80093dc <_malloc_r+0x2ac>
 80092d8:	45be      	cmp	lr, r7
 80092da:	d10d      	bne.n	80092f8 <_malloc_r+0x1c8>
 80092dc:	2001      	movs	r0, #1
 80092de:	1092      	asrs	r2, r2, #2
 80092e0:	fa00 f202 	lsl.w	r2, r0, r2
 80092e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80092e8:	4310      	orrs	r0, r2
 80092ea:	f8cc 0004 	str.w	r0, [ip, #4]
 80092ee:	4672      	mov	r2, lr
 80092f0:	e009      	b.n	8009306 <_malloc_r+0x1d6>
 80092f2:	68bf      	ldr	r7, [r7, #8]
 80092f4:	45be      	cmp	lr, r7
 80092f6:	d004      	beq.n	8009302 <_malloc_r+0x1d2>
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f022 0203 	bic.w	r2, r2, #3
 80092fe:	4290      	cmp	r0, r2
 8009300:	d3f7      	bcc.n	80092f2 <_malloc_r+0x1c2>
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	46be      	mov	lr, r7
 8009306:	60f2      	str	r2, [r6, #12]
 8009308:	f8c6 e008 	str.w	lr, [r6, #8]
 800930c:	6096      	str	r6, [r2, #8]
 800930e:	f8ce 600c 	str.w	r6, [lr, #12]
 8009312:	2001      	movs	r0, #1
 8009314:	109a      	asrs	r2, r3, #2
 8009316:	fa00 f202 	lsl.w	r2, r0, r2
 800931a:	6868      	ldr	r0, [r5, #4]
 800931c:	4282      	cmp	r2, r0
 800931e:	d85f      	bhi.n	80093e0 <_malloc_r+0x2b0>
 8009320:	4202      	tst	r2, r0
 8009322:	d106      	bne.n	8009332 <_malloc_r+0x202>
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	0052      	lsls	r2, r2, #1
 800932a:	4202      	tst	r2, r0
 800932c:	f103 0304 	add.w	r3, r3, #4
 8009330:	d0fa      	beq.n	8009328 <_malloc_r+0x1f8>
 8009332:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8009336:	46c2      	mov	sl, r8
 8009338:	469c      	mov	ip, r3
 800933a:	f8da 600c 	ldr.w	r6, [sl, #12]
 800933e:	4556      	cmp	r6, sl
 8009340:	d02c      	beq.n	800939c <_malloc_r+0x26c>
 8009342:	6870      	ldr	r0, [r6, #4]
 8009344:	68f7      	ldr	r7, [r6, #12]
 8009346:	f020 0003 	bic.w	r0, r0, #3
 800934a:	ebc4 0e00 	rsb	lr, r4, r0
 800934e:	f1be 0f0f 	cmp.w	lr, #15
 8009352:	dd11      	ble.n	8009378 <_malloc_r+0x248>
 8009354:	1933      	adds	r3, r6, r4
 8009356:	f044 0401 	orr.w	r4, r4, #1
 800935a:	6074      	str	r4, [r6, #4]
 800935c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8009360:	60d7      	str	r7, [r2, #12]
 8009362:	60ba      	str	r2, [r7, #8]
 8009364:	f04e 0201 	orr.w	r2, lr, #1
 8009368:	616b      	str	r3, [r5, #20]
 800936a:	612b      	str	r3, [r5, #16]
 800936c:	60d9      	str	r1, [r3, #12]
 800936e:	6099      	str	r1, [r3, #8]
 8009370:	605a      	str	r2, [r3, #4]
 8009372:	f843 e00e 	str.w	lr, [r3, lr]
 8009376:	e00b      	b.n	8009390 <_malloc_r+0x260>
 8009378:	f1be 0f00 	cmp.w	lr, #0
 800937c:	db0c      	blt.n	8009398 <_malloc_r+0x268>
 800937e:	1833      	adds	r3, r6, r0
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	f042 0201 	orr.w	r2, r2, #1
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800938c:	60df      	str	r7, [r3, #12]
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	4648      	mov	r0, r9
 8009392:	f000 f909 	bl	80095a8 <__malloc_unlock>
 8009396:	e0d8      	b.n	800954a <_malloc_r+0x41a>
 8009398:	463e      	mov	r6, r7
 800939a:	e7d0      	b.n	800933e <_malloc_r+0x20e>
 800939c:	f10c 0c01 	add.w	ip, ip, #1
 80093a0:	f01c 0f03 	tst.w	ip, #3
 80093a4:	f10a 0a08 	add.w	sl, sl, #8
 80093a8:	d1c7      	bne.n	800933a <_malloc_r+0x20a>
 80093aa:	0798      	lsls	r0, r3, #30
 80093ac:	d104      	bne.n	80093b8 <_malloc_r+0x288>
 80093ae:	686b      	ldr	r3, [r5, #4]
 80093b0:	ea23 0302 	bic.w	r3, r3, r2
 80093b4:	606b      	str	r3, [r5, #4]
 80093b6:	e005      	b.n	80093c4 <_malloc_r+0x294>
 80093b8:	f858 0908 	ldr.w	r0, [r8], #-8
 80093bc:	4580      	cmp	r8, r0
 80093be:	f103 33ff 	add.w	r3, r3, #4294967295
 80093c2:	d0f2      	beq.n	80093aa <_malloc_r+0x27a>
 80093c4:	6868      	ldr	r0, [r5, #4]
 80093c6:	0052      	lsls	r2, r2, #1
 80093c8:	4282      	cmp	r2, r0
 80093ca:	d809      	bhi.n	80093e0 <_malloc_r+0x2b0>
 80093cc:	b142      	cbz	r2, 80093e0 <_malloc_r+0x2b0>
 80093ce:	4663      	mov	r3, ip
 80093d0:	4202      	tst	r2, r0
 80093d2:	d1ae      	bne.n	8009332 <_malloc_r+0x202>
 80093d4:	3304      	adds	r3, #4
 80093d6:	0052      	lsls	r2, r2, #1
 80093d8:	e7fa      	b.n	80093d0 <_malloc_r+0x2a0>
 80093da:	bf00      	nop
 80093dc:	20010150 	.word	0x20010150
 80093e0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80093e4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80093e8:	f026 0603 	bic.w	r6, r6, #3
 80093ec:	42b4      	cmp	r4, r6
 80093ee:	d803      	bhi.n	80093f8 <_malloc_r+0x2c8>
 80093f0:	1b33      	subs	r3, r6, r4
 80093f2:	2b0f      	cmp	r3, #15
 80093f4:	f300 809c 	bgt.w	8009530 <_malloc_r+0x400>
 80093f8:	4a56      	ldr	r2, [pc, #344]	; (8009554 <_malloc_r+0x424>)
 80093fa:	4957      	ldr	r1, [pc, #348]	; (8009558 <_malloc_r+0x428>)
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	6808      	ldr	r0, [r1, #0]
 8009400:	9101      	str	r1, [sp, #4]
 8009402:	f102 0810 	add.w	r8, r2, #16
 8009406:	4a55      	ldr	r2, [pc, #340]	; (800955c <_malloc_r+0x42c>)
 8009408:	9203      	str	r2, [sp, #12]
 800940a:	3001      	adds	r0, #1
 800940c:	bf18      	it	ne
 800940e:	f102 31ff 	addne.w	r1, r2, #4294967295
 8009412:	44a0      	add	r8, r4
 8009414:	bf1e      	ittt	ne
 8009416:	4488      	addne	r8, r1
 8009418:	4251      	negne	r1, r2
 800941a:	ea01 0808 	andne.w	r8, r1, r8
 800941e:	eb0b 0306 	add.w	r3, fp, r6
 8009422:	4641      	mov	r1, r8
 8009424:	4648      	mov	r0, r9
 8009426:	9302      	str	r3, [sp, #8]
 8009428:	f000 fd3e 	bl	8009ea8 <_sbrk_r>
 800942c:	1c42      	adds	r2, r0, #1
 800942e:	4607      	mov	r7, r0
 8009430:	d06f      	beq.n	8009512 <_malloc_r+0x3e2>
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	9a03      	ldr	r2, [sp, #12]
 8009436:	4283      	cmp	r3, r0
 8009438:	d901      	bls.n	800943e <_malloc_r+0x30e>
 800943a:	45ab      	cmp	fp, r5
 800943c:	d169      	bne.n	8009512 <_malloc_r+0x3e2>
 800943e:	f8df a128 	ldr.w	sl, [pc, #296]	; 8009568 <_malloc_r+0x438>
 8009442:	f8df c128 	ldr.w	ip, [pc, #296]	; 800956c <_malloc_r+0x43c>
 8009446:	f8da 0000 	ldr.w	r0, [sl]
 800944a:	42bb      	cmp	r3, r7
 800944c:	4440      	add	r0, r8
 800944e:	f8ca 0000 	str.w	r0, [sl]
 8009452:	d108      	bne.n	8009466 <_malloc_r+0x336>
 8009454:	ea13 0f0c 	tst.w	r3, ip
 8009458:	d105      	bne.n	8009466 <_malloc_r+0x336>
 800945a:	68ab      	ldr	r3, [r5, #8]
 800945c:	4446      	add	r6, r8
 800945e:	f046 0601 	orr.w	r6, r6, #1
 8009462:	605e      	str	r6, [r3, #4]
 8009464:	e049      	b.n	80094fa <_malloc_r+0x3ca>
 8009466:	9901      	ldr	r1, [sp, #4]
 8009468:	f8d1 e000 	ldr.w	lr, [r1]
 800946c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009470:	bf15      	itete	ne
 8009472:	1afb      	subne	r3, r7, r3
 8009474:	4b38      	ldreq	r3, [pc, #224]	; (8009558 <_malloc_r+0x428>)
 8009476:	181b      	addne	r3, r3, r0
 8009478:	601f      	streq	r7, [r3, #0]
 800947a:	bf18      	it	ne
 800947c:	f8ca 3000 	strne.w	r3, [sl]
 8009480:	f017 0307 	ands.w	r3, r7, #7
 8009484:	bf1c      	itt	ne
 8009486:	f1c3 0308 	rsbne	r3, r3, #8
 800948a:	18ff      	addne	r7, r7, r3
 800948c:	44b8      	add	r8, r7
 800948e:	441a      	add	r2, r3
 8009490:	ea08 080c 	and.w	r8, r8, ip
 8009494:	ebc8 0802 	rsb	r8, r8, r2
 8009498:	4641      	mov	r1, r8
 800949a:	4648      	mov	r0, r9
 800949c:	f000 fd04 	bl	8009ea8 <_sbrk_r>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	bf04      	itt	eq
 80094a4:	4638      	moveq	r0, r7
 80094a6:	f04f 0800 	moveq.w	r8, #0
 80094aa:	f8da 3000 	ldr.w	r3, [sl]
 80094ae:	60af      	str	r7, [r5, #8]
 80094b0:	1bc2      	subs	r2, r0, r7
 80094b2:	4442      	add	r2, r8
 80094b4:	4443      	add	r3, r8
 80094b6:	f042 0201 	orr.w	r2, r2, #1
 80094ba:	45ab      	cmp	fp, r5
 80094bc:	f8ca 3000 	str.w	r3, [sl]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	d01a      	beq.n	80094fa <_malloc_r+0x3ca>
 80094c4:	2e0f      	cmp	r6, #15
 80094c6:	d802      	bhi.n	80094ce <_malloc_r+0x39e>
 80094c8:	2301      	movs	r3, #1
 80094ca:	607b      	str	r3, [r7, #4]
 80094cc:	e021      	b.n	8009512 <_malloc_r+0x3e2>
 80094ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 80094d2:	3e0c      	subs	r6, #12
 80094d4:	f026 0607 	bic.w	r6, r6, #7
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	4333      	orrs	r3, r6
 80094de:	f8cb 3004 	str.w	r3, [fp, #4]
 80094e2:	eb0b 0306 	add.w	r3, fp, r6
 80094e6:	2205      	movs	r2, #5
 80094e8:	2e0f      	cmp	r6, #15
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	609a      	str	r2, [r3, #8]
 80094ee:	d904      	bls.n	80094fa <_malloc_r+0x3ca>
 80094f0:	f10b 0108 	add.w	r1, fp, #8
 80094f4:	4648      	mov	r0, r9
 80094f6:	f7ff fd51 	bl	8008f9c <_free_r>
 80094fa:	4a19      	ldr	r2, [pc, #100]	; (8009560 <_malloc_r+0x430>)
 80094fc:	f8da 3000 	ldr.w	r3, [sl]
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	428b      	cmp	r3, r1
 8009504:	bf88      	it	hi
 8009506:	6013      	strhi	r3, [r2, #0]
 8009508:	4a16      	ldr	r2, [pc, #88]	; (8009564 <_malloc_r+0x434>)
 800950a:	6811      	ldr	r1, [r2, #0]
 800950c:	428b      	cmp	r3, r1
 800950e:	bf88      	it	hi
 8009510:	6013      	strhi	r3, [r2, #0]
 8009512:	68ab      	ldr	r3, [r5, #8]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	f022 0203 	bic.w	r2, r2, #3
 800951a:	4294      	cmp	r4, r2
 800951c:	eba2 0304 	sub.w	r3, r2, r4
 8009520:	d801      	bhi.n	8009526 <_malloc_r+0x3f6>
 8009522:	2b0f      	cmp	r3, #15
 8009524:	dc04      	bgt.n	8009530 <_malloc_r+0x400>
 8009526:	4648      	mov	r0, r9
 8009528:	f000 f83e 	bl	80095a8 <__malloc_unlock>
 800952c:	2600      	movs	r6, #0
 800952e:	e00c      	b.n	800954a <_malloc_r+0x41a>
 8009530:	68ae      	ldr	r6, [r5, #8]
 8009532:	f044 0201 	orr.w	r2, r4, #1
 8009536:	4434      	add	r4, r6
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6072      	str	r2, [r6, #4]
 800953e:	60ac      	str	r4, [r5, #8]
 8009540:	6063      	str	r3, [r4, #4]
 8009542:	4648      	mov	r0, r9
 8009544:	f000 f830 	bl	80095a8 <__malloc_unlock>
 8009548:	3608      	adds	r6, #8
 800954a:	4630      	mov	r0, r6
 800954c:	b005      	add	sp, #20
 800954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009552:	bf00      	nop
 8009554:	20014428 	.word	0x20014428
 8009558:	2001055c 	.word	0x2001055c
 800955c:	00000080 	.word	0x00000080
 8009560:	20014424 	.word	0x20014424
 8009564:	20014420 	.word	0x20014420
 8009568:	2001442c 	.word	0x2001442c
 800956c:	0000007f 	.word	0x0000007f

08009570 <memmove>:
 8009570:	4288      	cmp	r0, r1
 8009572:	b510      	push	{r4, lr}
 8009574:	eb01 0302 	add.w	r3, r1, r2
 8009578:	d801      	bhi.n	800957e <memmove+0xe>
 800957a:	1e42      	subs	r2, r0, #1
 800957c:	e00b      	b.n	8009596 <memmove+0x26>
 800957e:	4298      	cmp	r0, r3
 8009580:	d2fb      	bcs.n	800957a <memmove+0xa>
 8009582:	1881      	adds	r1, r0, r2
 8009584:	1ad2      	subs	r2, r2, r3
 8009586:	42d3      	cmn	r3, r2
 8009588:	d004      	beq.n	8009594 <memmove+0x24>
 800958a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800958e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009592:	e7f8      	b.n	8009586 <memmove+0x16>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	4299      	cmp	r1, r3
 8009598:	d004      	beq.n	80095a4 <memmove+0x34>
 800959a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095a2:	e7f8      	b.n	8009596 <memmove+0x26>
 80095a4:	bd10      	pop	{r4, pc}

080095a6 <__malloc_lock>:
 80095a6:	4770      	bx	lr

080095a8 <__malloc_unlock>:
 80095a8:	4770      	bx	lr

080095aa <_Balloc>:
 80095aa:	b570      	push	{r4, r5, r6, lr}
 80095ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095ae:	4604      	mov	r4, r0
 80095b0:	460e      	mov	r6, r1
 80095b2:	b93d      	cbnz	r5, 80095c4 <_Balloc+0x1a>
 80095b4:	2010      	movs	r0, #16
 80095b6:	f7ff fdb3 	bl	8009120 <malloc>
 80095ba:	6260      	str	r0, [r4, #36]	; 0x24
 80095bc:	6045      	str	r5, [r0, #4]
 80095be:	6085      	str	r5, [r0, #8]
 80095c0:	6005      	str	r5, [r0, #0]
 80095c2:	60c5      	str	r5, [r0, #12]
 80095c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095c6:	68eb      	ldr	r3, [r5, #12]
 80095c8:	b143      	cbz	r3, 80095dc <_Balloc+0x32>
 80095ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095d2:	b178      	cbz	r0, 80095f4 <_Balloc+0x4a>
 80095d4:	6802      	ldr	r2, [r0, #0]
 80095d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80095da:	e017      	b.n	800960c <_Balloc+0x62>
 80095dc:	2221      	movs	r2, #33	; 0x21
 80095de:	2104      	movs	r1, #4
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fcf0 	bl	8009fc6 <_calloc_r>
 80095e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e8:	60e8      	str	r0, [r5, #12]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ec      	bne.n	80095ca <_Balloc+0x20>
 80095f0:	2000      	movs	r0, #0
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f506 	lsl.w	r5, r1, r6
 80095fa:	1d6a      	adds	r2, r5, #5
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fce1 	bl	8009fc6 <_calloc_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	d0f3      	beq.n	80095f0 <_Balloc+0x46>
 8009608:	6046      	str	r6, [r0, #4]
 800960a:	6085      	str	r5, [r0, #8]
 800960c:	2300      	movs	r3, #0
 800960e:	6103      	str	r3, [r0, #16]
 8009610:	60c3      	str	r3, [r0, #12]
 8009612:	bd70      	pop	{r4, r5, r6, pc}

08009614 <_Bfree>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009618:	4606      	mov	r6, r0
 800961a:	460d      	mov	r5, r1
 800961c:	b93c      	cbnz	r4, 800962e <_Bfree+0x1a>
 800961e:	2010      	movs	r0, #16
 8009620:	f7ff fd7e 	bl	8009120 <malloc>
 8009624:	6270      	str	r0, [r6, #36]	; 0x24
 8009626:	6044      	str	r4, [r0, #4]
 8009628:	6084      	str	r4, [r0, #8]
 800962a:	6004      	str	r4, [r0, #0]
 800962c:	60c4      	str	r4, [r0, #12]
 800962e:	b13d      	cbz	r5, 8009640 <_Bfree+0x2c>
 8009630:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009632:	686a      	ldr	r2, [r5, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800963a:	6029      	str	r1, [r5, #0]
 800963c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009640:	bd70      	pop	{r4, r5, r6, pc}

08009642 <__multadd>:
 8009642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009646:	690d      	ldr	r5, [r1, #16]
 8009648:	461f      	mov	r7, r3
 800964a:	4606      	mov	r6, r0
 800964c:	460c      	mov	r4, r1
 800964e:	f101 0e14 	add.w	lr, r1, #20
 8009652:	2300      	movs	r3, #0
 8009654:	f8de 0000 	ldr.w	r0, [lr]
 8009658:	b281      	uxth	r1, r0
 800965a:	fb02 7101 	mla	r1, r2, r1, r7
 800965e:	0c0f      	lsrs	r7, r1, #16
 8009660:	0c00      	lsrs	r0, r0, #16
 8009662:	fb02 7000 	mla	r0, r2, r0, r7
 8009666:	b289      	uxth	r1, r1
 8009668:	3301      	adds	r3, #1
 800966a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800966e:	429d      	cmp	r5, r3
 8009670:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009674:	f84e 1b04 	str.w	r1, [lr], #4
 8009678:	dcec      	bgt.n	8009654 <__multadd+0x12>
 800967a:	b1d7      	cbz	r7, 80096b2 <__multadd+0x70>
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	429d      	cmp	r5, r3
 8009680:	db12      	blt.n	80096a8 <__multadd+0x66>
 8009682:	6861      	ldr	r1, [r4, #4]
 8009684:	4630      	mov	r0, r6
 8009686:	3101      	adds	r1, #1
 8009688:	f7ff ff8f 	bl	80095aa <_Balloc>
 800968c:	6922      	ldr	r2, [r4, #16]
 800968e:	3202      	adds	r2, #2
 8009690:	f104 010c 	add.w	r1, r4, #12
 8009694:	4680      	mov	r8, r0
 8009696:	0092      	lsls	r2, r2, #2
 8009698:	300c      	adds	r0, #12
 800969a:	f7fd fd7d 	bl	8007198 <memcpy>
 800969e:	4621      	mov	r1, r4
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7ff ffb7 	bl	8009614 <_Bfree>
 80096a6:	4644      	mov	r4, r8
 80096a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096ac:	3501      	adds	r5, #1
 80096ae:	615f      	str	r7, [r3, #20]
 80096b0:	6125      	str	r5, [r4, #16]
 80096b2:	4620      	mov	r0, r4
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096b8 <__hi0bits>:
 80096b8:	0c03      	lsrs	r3, r0, #16
 80096ba:	041b      	lsls	r3, r3, #16
 80096bc:	b913      	cbnz	r3, 80096c4 <__hi0bits+0xc>
 80096be:	0400      	lsls	r0, r0, #16
 80096c0:	2310      	movs	r3, #16
 80096c2:	e000      	b.n	80096c6 <__hi0bits+0xe>
 80096c4:	2300      	movs	r3, #0
 80096c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096ca:	bf04      	itt	eq
 80096cc:	0200      	lsleq	r0, r0, #8
 80096ce:	3308      	addeq	r3, #8
 80096d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096d4:	bf04      	itt	eq
 80096d6:	0100      	lsleq	r0, r0, #4
 80096d8:	3304      	addeq	r3, #4
 80096da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096de:	bf04      	itt	eq
 80096e0:	0080      	lsleq	r0, r0, #2
 80096e2:	3302      	addeq	r3, #2
 80096e4:	2800      	cmp	r0, #0
 80096e6:	db03      	blt.n	80096f0 <__hi0bits+0x38>
 80096e8:	0042      	lsls	r2, r0, #1
 80096ea:	d503      	bpl.n	80096f4 <__hi0bits+0x3c>
 80096ec:	1c58      	adds	r0, r3, #1
 80096ee:	4770      	bx	lr
 80096f0:	4618      	mov	r0, r3
 80096f2:	4770      	bx	lr
 80096f4:	2020      	movs	r0, #32
 80096f6:	4770      	bx	lr

080096f8 <__lo0bits>:
 80096f8:	6803      	ldr	r3, [r0, #0]
 80096fa:	f013 0207 	ands.w	r2, r3, #7
 80096fe:	d00b      	beq.n	8009718 <__lo0bits+0x20>
 8009700:	07d9      	lsls	r1, r3, #31
 8009702:	d422      	bmi.n	800974a <__lo0bits+0x52>
 8009704:	079a      	lsls	r2, r3, #30
 8009706:	bf4b      	itete	mi
 8009708:	085b      	lsrmi	r3, r3, #1
 800970a:	089b      	lsrpl	r3, r3, #2
 800970c:	6003      	strmi	r3, [r0, #0]
 800970e:	6003      	strpl	r3, [r0, #0]
 8009710:	bf4c      	ite	mi
 8009712:	2001      	movmi	r0, #1
 8009714:	2002      	movpl	r0, #2
 8009716:	4770      	bx	lr
 8009718:	b299      	uxth	r1, r3
 800971a:	b909      	cbnz	r1, 8009720 <__lo0bits+0x28>
 800971c:	0c1b      	lsrs	r3, r3, #16
 800971e:	2210      	movs	r2, #16
 8009720:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009724:	bf04      	itt	eq
 8009726:	0a1b      	lsreq	r3, r3, #8
 8009728:	3208      	addeq	r2, #8
 800972a:	0719      	lsls	r1, r3, #28
 800972c:	bf04      	itt	eq
 800972e:	091b      	lsreq	r3, r3, #4
 8009730:	3204      	addeq	r2, #4
 8009732:	0799      	lsls	r1, r3, #30
 8009734:	bf04      	itt	eq
 8009736:	089b      	lsreq	r3, r3, #2
 8009738:	3202      	addeq	r2, #2
 800973a:	07d9      	lsls	r1, r3, #31
 800973c:	d402      	bmi.n	8009744 <__lo0bits+0x4c>
 800973e:	085b      	lsrs	r3, r3, #1
 8009740:	d005      	beq.n	800974e <__lo0bits+0x56>
 8009742:	3201      	adds	r2, #1
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	4610      	mov	r0, r2
 8009748:	4770      	bx	lr
 800974a:	2000      	movs	r0, #0
 800974c:	4770      	bx	lr
 800974e:	2020      	movs	r0, #32
 8009750:	4770      	bx	lr

08009752 <__i2b>:
 8009752:	b510      	push	{r4, lr}
 8009754:	460c      	mov	r4, r1
 8009756:	2101      	movs	r1, #1
 8009758:	f7ff ff27 	bl	80095aa <_Balloc>
 800975c:	2201      	movs	r2, #1
 800975e:	6144      	str	r4, [r0, #20]
 8009760:	6102      	str	r2, [r0, #16]
 8009762:	bd10      	pop	{r4, pc}

08009764 <__multiply>:
 8009764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	4614      	mov	r4, r2
 800976a:	690a      	ldr	r2, [r1, #16]
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	bfb8      	it	lt
 8009772:	460b      	movlt	r3, r1
 8009774:	4688      	mov	r8, r1
 8009776:	bfbc      	itt	lt
 8009778:	46a0      	movlt	r8, r4
 800977a:	461c      	movlt	r4, r3
 800977c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009780:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009784:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009788:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800978c:	eb07 0609 	add.w	r6, r7, r9
 8009790:	429e      	cmp	r6, r3
 8009792:	bfc8      	it	gt
 8009794:	3101      	addgt	r1, #1
 8009796:	f7ff ff08 	bl	80095aa <_Balloc>
 800979a:	f100 0514 	add.w	r5, r0, #20
 800979e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80097a2:	462b      	mov	r3, r5
 80097a4:	2200      	movs	r2, #0
 80097a6:	4563      	cmp	r3, ip
 80097a8:	d202      	bcs.n	80097b0 <__multiply+0x4c>
 80097aa:	f843 2b04 	str.w	r2, [r3], #4
 80097ae:	e7fa      	b.n	80097a6 <__multiply+0x42>
 80097b0:	f104 0214 	add.w	r2, r4, #20
 80097b4:	f108 0114 	add.w	r1, r8, #20
 80097b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80097bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	9b00      	ldr	r3, [sp, #0]
 80097c4:	9201      	str	r2, [sp, #4]
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d957      	bls.n	800987a <__multiply+0x116>
 80097ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80097ce:	f1bb 0f00 	cmp.w	fp, #0
 80097d2:	d023      	beq.n	800981c <__multiply+0xb8>
 80097d4:	4689      	mov	r9, r1
 80097d6:	46ae      	mov	lr, r5
 80097d8:	f04f 0800 	mov.w	r8, #0
 80097dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80097e0:	f8be a000 	ldrh.w	sl, [lr]
 80097e4:	b2a3      	uxth	r3, r4
 80097e6:	fb0b a303 	mla	r3, fp, r3, sl
 80097ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097ee:	f8de 4000 	ldr.w	r4, [lr]
 80097f2:	4443      	add	r3, r8
 80097f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80097f8:	fb0b 840a 	mla	r4, fp, sl, r8
 80097fc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009800:	46f2      	mov	sl, lr
 8009802:	b29b      	uxth	r3, r3
 8009804:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009808:	454f      	cmp	r7, r9
 800980a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800980e:	f84a 3b04 	str.w	r3, [sl], #4
 8009812:	d901      	bls.n	8009818 <__multiply+0xb4>
 8009814:	46d6      	mov	lr, sl
 8009816:	e7e1      	b.n	80097dc <__multiply+0x78>
 8009818:	f8ce 8004 	str.w	r8, [lr, #4]
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009822:	3204      	adds	r2, #4
 8009824:	f1ba 0f00 	cmp.w	sl, #0
 8009828:	d021      	beq.n	800986e <__multiply+0x10a>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	462c      	mov	r4, r5
 800982e:	4689      	mov	r9, r1
 8009830:	f04f 0800 	mov.w	r8, #0
 8009834:	f8b9 e000 	ldrh.w	lr, [r9]
 8009838:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800983c:	fb0a be0e 	mla	lr, sl, lr, fp
 8009840:	44f0      	add	r8, lr
 8009842:	46a3      	mov	fp, r4
 8009844:	b29b      	uxth	r3, r3
 8009846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800984a:	f84b 3b04 	str.w	r3, [fp], #4
 800984e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009852:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	fb0a e303 	mla	r3, sl, r3, lr
 800985c:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8009860:	454f      	cmp	r7, r9
 8009862:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8009866:	d901      	bls.n	800986c <__multiply+0x108>
 8009868:	465c      	mov	r4, fp
 800986a:	e7e3      	b.n	8009834 <__multiply+0xd0>
 800986c:	6063      	str	r3, [r4, #4]
 800986e:	3504      	adds	r5, #4
 8009870:	e7a7      	b.n	80097c2 <__multiply+0x5e>
 8009872:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8009876:	b913      	cbnz	r3, 800987e <__multiply+0x11a>
 8009878:	3e01      	subs	r6, #1
 800987a:	2e00      	cmp	r6, #0
 800987c:	dcf9      	bgt.n	8009872 <__multiply+0x10e>
 800987e:	6106      	str	r6, [r0, #16]
 8009880:	b003      	add	sp, #12
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009888 <__pow5mult>:
 8009888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800988c:	4615      	mov	r5, r2
 800988e:	f012 0203 	ands.w	r2, r2, #3
 8009892:	4606      	mov	r6, r0
 8009894:	460f      	mov	r7, r1
 8009896:	d007      	beq.n	80098a8 <__pow5mult+0x20>
 8009898:	3a01      	subs	r2, #1
 800989a:	4c21      	ldr	r4, [pc, #132]	; (8009920 <__pow5mult+0x98>)
 800989c:	2300      	movs	r3, #0
 800989e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098a2:	f7ff fece 	bl	8009642 <__multadd>
 80098a6:	4607      	mov	r7, r0
 80098a8:	10ad      	asrs	r5, r5, #2
 80098aa:	d036      	beq.n	800991a <__pow5mult+0x92>
 80098ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098ae:	b93c      	cbnz	r4, 80098c0 <__pow5mult+0x38>
 80098b0:	2010      	movs	r0, #16
 80098b2:	f7ff fc35 	bl	8009120 <malloc>
 80098b6:	6270      	str	r0, [r6, #36]	; 0x24
 80098b8:	6044      	str	r4, [r0, #4]
 80098ba:	6084      	str	r4, [r0, #8]
 80098bc:	6004      	str	r4, [r0, #0]
 80098be:	60c4      	str	r4, [r0, #12]
 80098c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098c8:	b94c      	cbnz	r4, 80098de <__pow5mult+0x56>
 80098ca:	f240 2171 	movw	r1, #625	; 0x271
 80098ce:	4630      	mov	r0, r6
 80098d0:	f7ff ff3f 	bl	8009752 <__i2b>
 80098d4:	2300      	movs	r3, #0
 80098d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80098da:	4604      	mov	r4, r0
 80098dc:	6003      	str	r3, [r0, #0]
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	07eb      	lsls	r3, r5, #31
 80098e4:	d50a      	bpl.n	80098fc <__pow5mult+0x74>
 80098e6:	4639      	mov	r1, r7
 80098e8:	4622      	mov	r2, r4
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff ff3a 	bl	8009764 <__multiply>
 80098f0:	4639      	mov	r1, r7
 80098f2:	4681      	mov	r9, r0
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff fe8d 	bl	8009614 <_Bfree>
 80098fa:	464f      	mov	r7, r9
 80098fc:	106d      	asrs	r5, r5, #1
 80098fe:	d00c      	beq.n	800991a <__pow5mult+0x92>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	b108      	cbz	r0, 8009908 <__pow5mult+0x80>
 8009904:	4604      	mov	r4, r0
 8009906:	e7ec      	b.n	80098e2 <__pow5mult+0x5a>
 8009908:	4622      	mov	r2, r4
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff ff29 	bl	8009764 <__multiply>
 8009912:	6020      	str	r0, [r4, #0]
 8009914:	f8c0 8000 	str.w	r8, [r0]
 8009918:	e7f4      	b.n	8009904 <__pow5mult+0x7c>
 800991a:	4638      	mov	r0, r7
 800991c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009920:	0800a9a0 	.word	0x0800a9a0

08009924 <__lshift>:
 8009924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009928:	460c      	mov	r4, r1
 800992a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800992e:	6926      	ldr	r6, [r4, #16]
 8009930:	6849      	ldr	r1, [r1, #4]
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	4456      	add	r6, sl
 8009936:	4607      	mov	r7, r0
 8009938:	4691      	mov	r9, r2
 800993a:	1c75      	adds	r5, r6, #1
 800993c:	42ab      	cmp	r3, r5
 800993e:	da02      	bge.n	8009946 <__lshift+0x22>
 8009940:	3101      	adds	r1, #1
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	e7fa      	b.n	800993c <__lshift+0x18>
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff fe2f 	bl	80095aa <_Balloc>
 800994c:	2300      	movs	r3, #0
 800994e:	4680      	mov	r8, r0
 8009950:	f100 0114 	add.w	r1, r0, #20
 8009954:	461a      	mov	r2, r3
 8009956:	4553      	cmp	r3, sl
 8009958:	da03      	bge.n	8009962 <__lshift+0x3e>
 800995a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800995e:	3301      	adds	r3, #1
 8009960:	e7f9      	b.n	8009956 <__lshift+0x32>
 8009962:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8009966:	6920      	ldr	r0, [r4, #16]
 8009968:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800996c:	f019 091f 	ands.w	r9, r9, #31
 8009970:	f104 0114 	add.w	r1, r4, #20
 8009974:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009978:	d014      	beq.n	80099a4 <__lshift+0x80>
 800997a:	f1c9 0c20 	rsb	ip, r9, #32
 800997e:	2200      	movs	r2, #0
 8009980:	6808      	ldr	r0, [r1, #0]
 8009982:	fa00 f009 	lsl.w	r0, r0, r9
 8009986:	4302      	orrs	r2, r0
 8009988:	469a      	mov	sl, r3
 800998a:	f843 2b04 	str.w	r2, [r3], #4
 800998e:	f851 2b04 	ldr.w	r2, [r1], #4
 8009992:	458e      	cmp	lr, r1
 8009994:	fa22 f20c 	lsr.w	r2, r2, ip
 8009998:	d8f2      	bhi.n	8009980 <__lshift+0x5c>
 800999a:	f8ca 2004 	str.w	r2, [sl, #4]
 800999e:	b142      	cbz	r2, 80099b2 <__lshift+0x8e>
 80099a0:	1cb5      	adds	r5, r6, #2
 80099a2:	e006      	b.n	80099b2 <__lshift+0x8e>
 80099a4:	3b04      	subs	r3, #4
 80099a6:	f851 2b04 	ldr.w	r2, [r1], #4
 80099aa:	f843 2f04 	str.w	r2, [r3, #4]!
 80099ae:	458e      	cmp	lr, r1
 80099b0:	d8f9      	bhi.n	80099a6 <__lshift+0x82>
 80099b2:	3d01      	subs	r5, #1
 80099b4:	4638      	mov	r0, r7
 80099b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80099ba:	4621      	mov	r1, r4
 80099bc:	f7ff fe2a 	bl	8009614 <_Bfree>
 80099c0:	4640      	mov	r0, r8
 80099c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080099c6 <__mcmp>:
 80099c6:	6903      	ldr	r3, [r0, #16]
 80099c8:	690a      	ldr	r2, [r1, #16]
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	b510      	push	{r4, lr}
 80099ce:	d111      	bne.n	80099f4 <__mcmp+0x2e>
 80099d0:	0092      	lsls	r2, r2, #2
 80099d2:	3014      	adds	r0, #20
 80099d4:	3114      	adds	r1, #20
 80099d6:	1883      	adds	r3, r0, r2
 80099d8:	440a      	add	r2, r1
 80099da:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80099de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80099e2:	428c      	cmp	r4, r1
 80099e4:	d002      	beq.n	80099ec <__mcmp+0x26>
 80099e6:	d307      	bcc.n	80099f8 <__mcmp+0x32>
 80099e8:	2001      	movs	r0, #1
 80099ea:	bd10      	pop	{r4, pc}
 80099ec:	4298      	cmp	r0, r3
 80099ee:	d3f4      	bcc.n	80099da <__mcmp+0x14>
 80099f0:	2000      	movs	r0, #0
 80099f2:	bd10      	pop	{r4, pc}
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd10      	pop	{r4, pc}
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	bd10      	pop	{r4, pc}

080099fe <__mdiff>:
 80099fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a02:	460c      	mov	r4, r1
 8009a04:	4607      	mov	r7, r0
 8009a06:	4611      	mov	r1, r2
 8009a08:	4620      	mov	r0, r4
 8009a0a:	4615      	mov	r5, r2
 8009a0c:	f7ff ffdb 	bl	80099c6 <__mcmp>
 8009a10:	1e06      	subs	r6, r0, #0
 8009a12:	d108      	bne.n	8009a26 <__mdiff+0x28>
 8009a14:	4631      	mov	r1, r6
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7ff fdc7 	bl	80095aa <_Balloc>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	6103      	str	r3, [r0, #16]
 8009a20:	6146      	str	r6, [r0, #20]
 8009a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a26:	bfbc      	itt	lt
 8009a28:	4623      	movlt	r3, r4
 8009a2a:	462c      	movlt	r4, r5
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	6861      	ldr	r1, [r4, #4]
 8009a30:	bfba      	itte	lt
 8009a32:	461d      	movlt	r5, r3
 8009a34:	2601      	movlt	r6, #1
 8009a36:	2600      	movge	r6, #0
 8009a38:	f7ff fdb7 	bl	80095aa <_Balloc>
 8009a3c:	692b      	ldr	r3, [r5, #16]
 8009a3e:	60c6      	str	r6, [r0, #12]
 8009a40:	6926      	ldr	r6, [r4, #16]
 8009a42:	f105 0914 	add.w	r9, r5, #20
 8009a46:	3414      	adds	r4, #20
 8009a48:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8009a4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a50:	f100 0514 	add.w	r5, r0, #20
 8009a54:	f04f 0c00 	mov.w	ip, #0
 8009a58:	f854 3b04 	ldr.w	r3, [r4], #4
 8009a5c:	f859 2b04 	ldr.w	r2, [r9], #4
 8009a60:	fa1c f183 	uxtah	r1, ip, r3
 8009a64:	fa1f fe82 	uxth.w	lr, r2
 8009a68:	0c12      	lsrs	r2, r2, #16
 8009a6a:	ebce 0101 	rsb	r1, lr, r1
 8009a6e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8009a72:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a76:	b289      	uxth	r1, r1
 8009a78:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a7c:	45c8      	cmp	r8, r9
 8009a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a82:	46a6      	mov	lr, r4
 8009a84:	f845 3b04 	str.w	r3, [r5], #4
 8009a88:	d8e6      	bhi.n	8009a58 <__mdiff+0x5a>
 8009a8a:	45be      	cmp	lr, r7
 8009a8c:	d20e      	bcs.n	8009aac <__mdiff+0xae>
 8009a8e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009a92:	fa1c f281 	uxtah	r2, ip, r1
 8009a96:	1413      	asrs	r3, r2, #16
 8009a98:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8009a9c:	b292      	uxth	r2, r2
 8009a9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009aa2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009aa6:	f845 2b04 	str.w	r2, [r5], #4
 8009aaa:	e7ee      	b.n	8009a8a <__mdiff+0x8c>
 8009aac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009ab0:	b90b      	cbnz	r3, 8009ab6 <__mdiff+0xb8>
 8009ab2:	3e01      	subs	r6, #1
 8009ab4:	e7fa      	b.n	8009aac <__mdiff+0xae>
 8009ab6:	6106      	str	r6, [r0, #16]
 8009ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009abc <__d2b>:
 8009abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	460e      	mov	r6, r1
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	ec59 8b10 	vmov	r8, r9, d0
 8009ac8:	4615      	mov	r5, r2
 8009aca:	f7ff fd6e 	bl	80095aa <_Balloc>
 8009ace:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ad8:	b10c      	cbz	r4, 8009ade <__d2b+0x22>
 8009ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	f1b8 0f00 	cmp.w	r8, #0
 8009ae4:	d019      	beq.n	8009b1a <__d2b+0x5e>
 8009ae6:	a802      	add	r0, sp, #8
 8009ae8:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009aec:	f7ff fe04 	bl	80096f8 <__lo0bits>
 8009af0:	9b00      	ldr	r3, [sp, #0]
 8009af2:	b148      	cbz	r0, 8009b08 <__d2b+0x4c>
 8009af4:	9a01      	ldr	r2, [sp, #4]
 8009af6:	f1c0 0120 	rsb	r1, r0, #32
 8009afa:	fa02 f101 	lsl.w	r1, r2, r1
 8009afe:	430b      	orrs	r3, r1
 8009b00:	40c2      	lsrs	r2, r0
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	9201      	str	r2, [sp, #4]
 8009b06:	e000      	b.n	8009b0a <__d2b+0x4e>
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	61bb      	str	r3, [r7, #24]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	bf14      	ite	ne
 8009b12:	2102      	movne	r1, #2
 8009b14:	2101      	moveq	r1, #1
 8009b16:	6139      	str	r1, [r7, #16]
 8009b18:	e007      	b.n	8009b2a <__d2b+0x6e>
 8009b1a:	a801      	add	r0, sp, #4
 8009b1c:	f7ff fdec 	bl	80096f8 <__lo0bits>
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	2101      	movs	r1, #1
 8009b26:	6139      	str	r1, [r7, #16]
 8009b28:	3020      	adds	r0, #32
 8009b2a:	b134      	cbz	r4, 8009b3a <__d2b+0x7e>
 8009b2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b30:	4404      	add	r4, r0
 8009b32:	6034      	str	r4, [r6, #0]
 8009b34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b38:	e009      	b.n	8009b4e <__d2b+0x92>
 8009b3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b42:	6030      	str	r0, [r6, #0]
 8009b44:	6918      	ldr	r0, [r3, #16]
 8009b46:	f7ff fdb7 	bl	80096b8 <__hi0bits>
 8009b4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b4e:	6028      	str	r0, [r5, #0]
 8009b50:	4638      	mov	r0, r7
 8009b52:	b003      	add	sp, #12
 8009b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009b58 <_realloc_r>:
 8009b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4681      	mov	r9, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	b929      	cbnz	r1, 8009b6e <_realloc_r+0x16>
 8009b62:	4611      	mov	r1, r2
 8009b64:	b003      	add	sp, #12
 8009b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	f7ff bae1 	b.w	8009130 <_malloc_r>
 8009b6e:	9201      	str	r2, [sp, #4]
 8009b70:	f7ff fd19 	bl	80095a6 <__malloc_lock>
 8009b74:	9a01      	ldr	r2, [sp, #4]
 8009b76:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8009b7a:	f102 080b 	add.w	r8, r2, #11
 8009b7e:	f1b8 0f16 	cmp.w	r8, #22
 8009b82:	f1a4 0b08 	sub.w	fp, r4, #8
 8009b86:	f02e 0503 	bic.w	r5, lr, #3
 8009b8a:	d903      	bls.n	8009b94 <_realloc_r+0x3c>
 8009b8c:	f038 0807 	bics.w	r8, r8, #7
 8009b90:	d502      	bpl.n	8009b98 <_realloc_r+0x40>
 8009b92:	e003      	b.n	8009b9c <_realloc_r+0x44>
 8009b94:	f04f 0810 	mov.w	r8, #16
 8009b98:	4590      	cmp	r8, r2
 8009b9a:	d204      	bcs.n	8009ba6 <_realloc_r+0x4e>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	f8c9 3000 	str.w	r3, [r9]
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e17d      	b.n	8009ea2 <_realloc_r+0x34a>
 8009ba6:	45a8      	cmp	r8, r5
 8009ba8:	f340 8150 	ble.w	8009e4c <_realloc_r+0x2f4>
 8009bac:	4ba6      	ldr	r3, [pc, #664]	; (8009e48 <_realloc_r+0x2f0>)
 8009bae:	6898      	ldr	r0, [r3, #8]
 8009bb0:	eb0b 0105 	add.w	r1, fp, r5
 8009bb4:	4281      	cmp	r1, r0
 8009bb6:	684f      	ldr	r7, [r1, #4]
 8009bb8:	d005      	beq.n	8009bc6 <_realloc_r+0x6e>
 8009bba:	f027 0601 	bic.w	r6, r7, #1
 8009bbe:	440e      	add	r6, r1
 8009bc0:	6876      	ldr	r6, [r6, #4]
 8009bc2:	07f6      	lsls	r6, r6, #31
 8009bc4:	d426      	bmi.n	8009c14 <_realloc_r+0xbc>
 8009bc6:	f027 0a03 	bic.w	sl, r7, #3
 8009bca:	4281      	cmp	r1, r0
 8009bcc:	eb05 070a 	add.w	r7, r5, sl
 8009bd0:	d118      	bne.n	8009c04 <_realloc_r+0xac>
 8009bd2:	f108 0610 	add.w	r6, r8, #16
 8009bd6:	42b7      	cmp	r7, r6
 8009bd8:	db1f      	blt.n	8009c1a <_realloc_r+0xc2>
 8009bda:	eb0b 0008 	add.w	r0, fp, r8
 8009bde:	ebc8 0707 	rsb	r7, r8, r7
 8009be2:	f047 0701 	orr.w	r7, r7, #1
 8009be6:	6098      	str	r0, [r3, #8]
 8009be8:	6047      	str	r7, [r0, #4]
 8009bea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	ea43 0308 	orr.w	r3, r3, r8
 8009bf6:	4648      	mov	r0, r9
 8009bf8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bfc:	f7ff fcd4 	bl	80095a8 <__malloc_unlock>
 8009c00:	4620      	mov	r0, r4
 8009c02:	e14e      	b.n	8009ea2 <_realloc_r+0x34a>
 8009c04:	45b8      	cmp	r8, r7
 8009c06:	dc08      	bgt.n	8009c1a <_realloc_r+0xc2>
 8009c08:	68cb      	ldr	r3, [r1, #12]
 8009c0a:	688a      	ldr	r2, [r1, #8]
 8009c0c:	463d      	mov	r5, r7
 8009c0e:	60d3      	str	r3, [r2, #12]
 8009c10:	609a      	str	r2, [r3, #8]
 8009c12:	e11b      	b.n	8009e4c <_realloc_r+0x2f4>
 8009c14:	f04f 0a00 	mov.w	sl, #0
 8009c18:	4651      	mov	r1, sl
 8009c1a:	f01e 0f01 	tst.w	lr, #1
 8009c1e:	f040 80c3 	bne.w	8009da8 <_realloc_r+0x250>
 8009c22:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009c26:	ebc7 070b 	rsb	r7, r7, fp
 8009c2a:	687e      	ldr	r6, [r7, #4]
 8009c2c:	f026 0603 	bic.w	r6, r6, #3
 8009c30:	442e      	add	r6, r5
 8009c32:	2900      	cmp	r1, #0
 8009c34:	f000 8083 	beq.w	8009d3e <_realloc_r+0x1e6>
 8009c38:	4281      	cmp	r1, r0
 8009c3a:	44b2      	add	sl, r6
 8009c3c:	d147      	bne.n	8009cce <_realloc_r+0x176>
 8009c3e:	f108 0110 	add.w	r1, r8, #16
 8009c42:	458a      	cmp	sl, r1
 8009c44:	db7b      	blt.n	8009d3e <_realloc_r+0x1e6>
 8009c46:	463e      	mov	r6, r7
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8009c4e:	60ca      	str	r2, [r1, #12]
 8009c50:	6091      	str	r1, [r2, #8]
 8009c52:	1f2a      	subs	r2, r5, #4
 8009c54:	2a24      	cmp	r2, #36	; 0x24
 8009c56:	d825      	bhi.n	8009ca4 <_realloc_r+0x14c>
 8009c58:	2a13      	cmp	r2, #19
 8009c5a:	d91b      	bls.n	8009c94 <_realloc_r+0x13c>
 8009c5c:	6821      	ldr	r1, [r4, #0]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	6861      	ldr	r1, [r4, #4]
 8009c62:	60f9      	str	r1, [r7, #12]
 8009c64:	2a1b      	cmp	r2, #27
 8009c66:	d803      	bhi.n	8009c70 <_realloc_r+0x118>
 8009c68:	f107 0210 	add.w	r2, r7, #16
 8009c6c:	3408      	adds	r4, #8
 8009c6e:	e012      	b.n	8009c96 <_realloc_r+0x13e>
 8009c70:	68a1      	ldr	r1, [r4, #8]
 8009c72:	6139      	str	r1, [r7, #16]
 8009c74:	68e1      	ldr	r1, [r4, #12]
 8009c76:	6179      	str	r1, [r7, #20]
 8009c78:	2a24      	cmp	r2, #36	; 0x24
 8009c7a:	bf01      	itttt	eq
 8009c7c:	6922      	ldreq	r2, [r4, #16]
 8009c7e:	61ba      	streq	r2, [r7, #24]
 8009c80:	6961      	ldreq	r1, [r4, #20]
 8009c82:	61f9      	streq	r1, [r7, #28]
 8009c84:	bf19      	ittee	ne
 8009c86:	f107 0218 	addne.w	r2, r7, #24
 8009c8a:	3410      	addne	r4, #16
 8009c8c:	f107 0220 	addeq.w	r2, r7, #32
 8009c90:	3418      	addeq	r4, #24
 8009c92:	e000      	b.n	8009c96 <_realloc_r+0x13e>
 8009c94:	4632      	mov	r2, r6
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	6011      	str	r1, [r2, #0]
 8009c9a:	6861      	ldr	r1, [r4, #4]
 8009c9c:	6051      	str	r1, [r2, #4]
 8009c9e:	68a1      	ldr	r1, [r4, #8]
 8009ca0:	6091      	str	r1, [r2, #8]
 8009ca2:	e005      	b.n	8009cb0 <_realloc_r+0x158>
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	f7ff fc61 	bl	8009570 <memmove>
 8009cae:	9b01      	ldr	r3, [sp, #4]
 8009cb0:	eb07 0208 	add.w	r2, r7, r8
 8009cb4:	ebc8 0a0a 	rsb	sl, r8, sl
 8009cb8:	609a      	str	r2, [r3, #8]
 8009cba:	f04a 0301 	orr.w	r3, sl, #1
 8009cbe:	6053      	str	r3, [r2, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	ea43 0308 	orr.w	r3, r3, r8
 8009cca:	607b      	str	r3, [r7, #4]
 8009ccc:	e0b6      	b.n	8009e3c <_realloc_r+0x2e4>
 8009cce:	45d0      	cmp	r8, sl
 8009cd0:	dc35      	bgt.n	8009d3e <_realloc_r+0x1e6>
 8009cd2:	68cb      	ldr	r3, [r1, #12]
 8009cd4:	688a      	ldr	r2, [r1, #8]
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	60d3      	str	r3, [r2, #12]
 8009cda:	609a      	str	r2, [r3, #8]
 8009cdc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	60d3      	str	r3, [r2, #12]
 8009ce4:	609a      	str	r2, [r3, #8]
 8009ce6:	1f2a      	subs	r2, r5, #4
 8009ce8:	2a24      	cmp	r2, #36	; 0x24
 8009cea:	d823      	bhi.n	8009d34 <_realloc_r+0x1dc>
 8009cec:	2a13      	cmp	r2, #19
 8009cee:	d91a      	bls.n	8009d26 <_realloc_r+0x1ce>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	60bb      	str	r3, [r7, #8]
 8009cf4:	6863      	ldr	r3, [r4, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	2a1b      	cmp	r2, #27
 8009cfa:	d803      	bhi.n	8009d04 <_realloc_r+0x1ac>
 8009cfc:	f107 0010 	add.w	r0, r7, #16
 8009d00:	3408      	adds	r4, #8
 8009d02:	e010      	b.n	8009d26 <_realloc_r+0x1ce>
 8009d04:	68a3      	ldr	r3, [r4, #8]
 8009d06:	613b      	str	r3, [r7, #16]
 8009d08:	68e3      	ldr	r3, [r4, #12]
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	2a24      	cmp	r2, #36	; 0x24
 8009d0e:	bf01      	itttt	eq
 8009d10:	6923      	ldreq	r3, [r4, #16]
 8009d12:	61bb      	streq	r3, [r7, #24]
 8009d14:	6963      	ldreq	r3, [r4, #20]
 8009d16:	61fb      	streq	r3, [r7, #28]
 8009d18:	bf19      	ittee	ne
 8009d1a:	f107 0018 	addne.w	r0, r7, #24
 8009d1e:	3410      	addne	r4, #16
 8009d20:	f107 0020 	addeq.w	r0, r7, #32
 8009d24:	3418      	addeq	r4, #24
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	6003      	str	r3, [r0, #0]
 8009d2a:	6863      	ldr	r3, [r4, #4]
 8009d2c:	6043      	str	r3, [r0, #4]
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	6083      	str	r3, [r0, #8]
 8009d32:	e002      	b.n	8009d3a <_realloc_r+0x1e2>
 8009d34:	4621      	mov	r1, r4
 8009d36:	f7ff fc1b 	bl	8009570 <memmove>
 8009d3a:	4655      	mov	r5, sl
 8009d3c:	e02e      	b.n	8009d9c <_realloc_r+0x244>
 8009d3e:	45b0      	cmp	r8, r6
 8009d40:	dc32      	bgt.n	8009da8 <_realloc_r+0x250>
 8009d42:	4638      	mov	r0, r7
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009d4a:	60d3      	str	r3, [r2, #12]
 8009d4c:	609a      	str	r2, [r3, #8]
 8009d4e:	1f2a      	subs	r2, r5, #4
 8009d50:	2a24      	cmp	r2, #36	; 0x24
 8009d52:	d825      	bhi.n	8009da0 <_realloc_r+0x248>
 8009d54:	2a13      	cmp	r2, #19
 8009d56:	d91a      	bls.n	8009d8e <_realloc_r+0x236>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	60bb      	str	r3, [r7, #8]
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	2a1b      	cmp	r2, #27
 8009d62:	d803      	bhi.n	8009d6c <_realloc_r+0x214>
 8009d64:	f107 0010 	add.w	r0, r7, #16
 8009d68:	3408      	adds	r4, #8
 8009d6a:	e010      	b.n	8009d8e <_realloc_r+0x236>
 8009d6c:	68a3      	ldr	r3, [r4, #8]
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	68e3      	ldr	r3, [r4, #12]
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	2a24      	cmp	r2, #36	; 0x24
 8009d76:	bf01      	itttt	eq
 8009d78:	6923      	ldreq	r3, [r4, #16]
 8009d7a:	61bb      	streq	r3, [r7, #24]
 8009d7c:	6963      	ldreq	r3, [r4, #20]
 8009d7e:	61fb      	streq	r3, [r7, #28]
 8009d80:	bf19      	ittee	ne
 8009d82:	f107 0018 	addne.w	r0, r7, #24
 8009d86:	3410      	addne	r4, #16
 8009d88:	f107 0020 	addeq.w	r0, r7, #32
 8009d8c:	3418      	addeq	r4, #24
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	6043      	str	r3, [r0, #4]
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	6083      	str	r3, [r0, #8]
 8009d9a:	4635      	mov	r5, r6
 8009d9c:	46bb      	mov	fp, r7
 8009d9e:	e055      	b.n	8009e4c <_realloc_r+0x2f4>
 8009da0:	4621      	mov	r1, r4
 8009da2:	f7ff fbe5 	bl	8009570 <memmove>
 8009da6:	e7f8      	b.n	8009d9a <_realloc_r+0x242>
 8009da8:	4611      	mov	r1, r2
 8009daa:	4648      	mov	r0, r9
 8009dac:	f7ff f9c0 	bl	8009130 <_malloc_r>
 8009db0:	4606      	mov	r6, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d042      	beq.n	8009e3c <_realloc_r+0x2e4>
 8009db6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009dba:	f023 0301 	bic.w	r3, r3, #1
 8009dbe:	f1a0 0208 	sub.w	r2, r0, #8
 8009dc2:	445b      	add	r3, fp
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d105      	bne.n	8009dd4 <_realloc_r+0x27c>
 8009dc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009dcc:	f023 0303 	bic.w	r3, r3, #3
 8009dd0:	441d      	add	r5, r3
 8009dd2:	e03b      	b.n	8009e4c <_realloc_r+0x2f4>
 8009dd4:	1f2a      	subs	r2, r5, #4
 8009dd6:	2a24      	cmp	r2, #36	; 0x24
 8009dd8:	d829      	bhi.n	8009e2e <_realloc_r+0x2d6>
 8009dda:	2a13      	cmp	r2, #19
 8009ddc:	d91e      	bls.n	8009e1c <_realloc_r+0x2c4>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	6043      	str	r3, [r0, #4]
 8009de6:	2a1b      	cmp	r2, #27
 8009de8:	d804      	bhi.n	8009df4 <_realloc_r+0x29c>
 8009dea:	f100 0308 	add.w	r3, r0, #8
 8009dee:	f104 0208 	add.w	r2, r4, #8
 8009df2:	e015      	b.n	8009e20 <_realloc_r+0x2c8>
 8009df4:	68a3      	ldr	r3, [r4, #8]
 8009df6:	6083      	str	r3, [r0, #8]
 8009df8:	68e3      	ldr	r3, [r4, #12]
 8009dfa:	60c3      	str	r3, [r0, #12]
 8009dfc:	2a24      	cmp	r2, #36	; 0x24
 8009dfe:	bf01      	itttt	eq
 8009e00:	6923      	ldreq	r3, [r4, #16]
 8009e02:	6103      	streq	r3, [r0, #16]
 8009e04:	6961      	ldreq	r1, [r4, #20]
 8009e06:	6141      	streq	r1, [r0, #20]
 8009e08:	bf19      	ittee	ne
 8009e0a:	f100 0310 	addne.w	r3, r0, #16
 8009e0e:	f104 0210 	addne.w	r2, r4, #16
 8009e12:	f100 0318 	addeq.w	r3, r0, #24
 8009e16:	f104 0218 	addeq.w	r2, r4, #24
 8009e1a:	e001      	b.n	8009e20 <_realloc_r+0x2c8>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	4622      	mov	r2, r4
 8009e20:	6811      	ldr	r1, [r2, #0]
 8009e22:	6019      	str	r1, [r3, #0]
 8009e24:	6851      	ldr	r1, [r2, #4]
 8009e26:	6059      	str	r1, [r3, #4]
 8009e28:	6892      	ldr	r2, [r2, #8]
 8009e2a:	609a      	str	r2, [r3, #8]
 8009e2c:	e002      	b.n	8009e34 <_realloc_r+0x2dc>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	f7ff fb9e 	bl	8009570 <memmove>
 8009e34:	4621      	mov	r1, r4
 8009e36:	4648      	mov	r0, r9
 8009e38:	f7ff f8b0 	bl	8008f9c <_free_r>
 8009e3c:	4648      	mov	r0, r9
 8009e3e:	f7ff fbb3 	bl	80095a8 <__malloc_unlock>
 8009e42:	4630      	mov	r0, r6
 8009e44:	e02d      	b.n	8009ea2 <_realloc_r+0x34a>
 8009e46:	bf00      	nop
 8009e48:	20010150 	.word	0x20010150
 8009e4c:	ebc8 0205 	rsb	r2, r8, r5
 8009e50:	2a0f      	cmp	r2, #15
 8009e52:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009e56:	d914      	bls.n	8009e82 <_realloc_r+0x32a>
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	eb0b 0108 	add.w	r1, fp, r8
 8009e60:	ea43 0308 	orr.w	r3, r3, r8
 8009e64:	f8cb 3004 	str.w	r3, [fp, #4]
 8009e68:	f042 0301 	orr.w	r3, r2, #1
 8009e6c:	440a      	add	r2, r1
 8009e6e:	604b      	str	r3, [r1, #4]
 8009e70:	6853      	ldr	r3, [r2, #4]
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	6053      	str	r3, [r2, #4]
 8009e78:	3108      	adds	r1, #8
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	f7ff f88e 	bl	8008f9c <_free_r>
 8009e80:	e00a      	b.n	8009e98 <_realloc_r+0x340>
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	432b      	orrs	r3, r5
 8009e88:	eb0b 0205 	add.w	r2, fp, r5
 8009e8c:	f8cb 3004 	str.w	r3, [fp, #4]
 8009e90:	6853      	ldr	r3, [r2, #4]
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	6053      	str	r3, [r2, #4]
 8009e98:	4648      	mov	r0, r9
 8009e9a:	f7ff fb85 	bl	80095a8 <__malloc_unlock>
 8009e9e:	f10b 0008 	add.w	r0, fp, #8
 8009ea2:	b003      	add	sp, #12
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ea8 <_sbrk_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4c06      	ldr	r4, [pc, #24]	; (8009ec4 <_sbrk_r+0x1c>)
 8009eac:	2300      	movs	r3, #0
 8009eae:	4605      	mov	r5, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	f7f7 f9a4 	bl	8001200 <_sbrk>
 8009eb8:	1c43      	adds	r3, r0, #1
 8009eba:	d102      	bne.n	8009ec2 <_sbrk_r+0x1a>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	b103      	cbz	r3, 8009ec2 <_sbrk_r+0x1a>
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	200144a8 	.word	0x200144a8

08009ec8 <__ssprint_r>:
 8009ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4693      	mov	fp, r2
 8009ece:	6892      	ldr	r2, [r2, #8]
 8009ed0:	4681      	mov	r9, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	b34a      	cbz	r2, 8009f2a <__ssprint_r+0x62>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8db a000 	ldr.w	sl, [fp]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	461f      	mov	r7, r3
 8009ee0:	e006      	b.n	8009ef0 <__ssprint_r+0x28>
 8009ee2:	f8da 3000 	ldr.w	r3, [sl]
 8009ee6:	f8da 7004 	ldr.w	r7, [sl, #4]
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	f10a 0a08 	add.w	sl, sl, #8
 8009ef0:	2f00      	cmp	r7, #0
 8009ef2:	d0f6      	beq.n	8009ee2 <__ssprint_r+0x1a>
 8009ef4:	68a6      	ldr	r6, [r4, #8]
 8009ef6:	42b7      	cmp	r7, r6
 8009ef8:	d360      	bcc.n	8009fbc <__ssprint_r+0xf4>
 8009efa:	89a0      	ldrh	r0, [r4, #12]
 8009efc:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8009f00:	d117      	bne.n	8009f32 <__ssprint_r+0x6a>
 8009f02:	42b7      	cmp	r7, r6
 8009f04:	d35a      	bcc.n	8009fbc <__ssprint_r+0xf4>
 8009f06:	4632      	mov	r2, r6
 8009f08:	9901      	ldr	r1, [sp, #4]
 8009f0a:	6820      	ldr	r0, [r4, #0]
 8009f0c:	f7ff fb30 	bl	8009570 <memmove>
 8009f10:	68a2      	ldr	r2, [r4, #8]
 8009f12:	1b92      	subs	r2, r2, r6
 8009f14:	60a2      	str	r2, [r4, #8]
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	4416      	add	r6, r2
 8009f1a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8009f1e:	6026      	str	r6, [r4, #0]
 8009f20:	1bd7      	subs	r7, r2, r7
 8009f22:	f8cb 7008 	str.w	r7, [fp, #8]
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	d1db      	bne.n	8009ee2 <__ssprint_r+0x1a>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	f8cb 0004 	str.w	r0, [fp, #4]
 8009f30:	e046      	b.n	8009fc0 <__ssprint_r+0xf8>
 8009f32:	6825      	ldr	r5, [r4, #0]
 8009f34:	6921      	ldr	r1, [r4, #16]
 8009f36:	ebc1 0805 	rsb	r8, r1, r5
 8009f3a:	f108 0201 	add.w	r2, r8, #1
 8009f3e:	6965      	ldr	r5, [r4, #20]
 8009f40:	443a      	add	r2, r7
 8009f42:	2302      	movs	r3, #2
 8009f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f48:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f4c:	4295      	cmp	r5, r2
 8009f4e:	bf38      	it	cc
 8009f50:	4615      	movcc	r5, r2
 8009f52:	0543      	lsls	r3, r0, #21
 8009f54:	d510      	bpl.n	8009f78 <__ssprint_r+0xb0>
 8009f56:	4629      	mov	r1, r5
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f7ff f8e9 	bl	8009130 <_malloc_r>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	b1a0      	cbz	r0, 8009f8c <__ssprint_r+0xc4>
 8009f62:	4642      	mov	r2, r8
 8009f64:	6921      	ldr	r1, [r4, #16]
 8009f66:	f7fd f917 	bl	8007198 <memcpy>
 8009f6a:	89a2      	ldrh	r2, [r4, #12]
 8009f6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f74:	81a2      	strh	r2, [r4, #12]
 8009f76:	e018      	b.n	8009faa <__ssprint_r+0xe2>
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	f7ff fdec 	bl	8009b58 <_realloc_r>
 8009f80:	4606      	mov	r6, r0
 8009f82:	b990      	cbnz	r0, 8009faa <__ssprint_r+0xe2>
 8009f84:	6921      	ldr	r1, [r4, #16]
 8009f86:	4648      	mov	r0, r9
 8009f88:	f7ff f808 	bl	8008f9c <_free_r>
 8009f8c:	220c      	movs	r2, #12
 8009f8e:	f8c9 2000 	str.w	r2, [r9]
 8009f92:	89a2      	ldrh	r2, [r4, #12]
 8009f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f98:	81a2      	strh	r2, [r4, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8cb 2008 	str.w	r2, [fp, #8]
 8009fa0:	f8cb 2004 	str.w	r2, [fp, #4]
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	e00a      	b.n	8009fc0 <__ssprint_r+0xf8>
 8009faa:	6126      	str	r6, [r4, #16]
 8009fac:	6165      	str	r5, [r4, #20]
 8009fae:	4446      	add	r6, r8
 8009fb0:	ebc8 0505 	rsb	r5, r8, r5
 8009fb4:	6026      	str	r6, [r4, #0]
 8009fb6:	60a5      	str	r5, [r4, #8]
 8009fb8:	463e      	mov	r6, r7
 8009fba:	e7a2      	b.n	8009f02 <__ssprint_r+0x3a>
 8009fbc:	463e      	mov	r6, r7
 8009fbe:	e7a2      	b.n	8009f06 <__ssprint_r+0x3e>
 8009fc0:	b003      	add	sp, #12
 8009fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fc6 <_calloc_r>:
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	4351      	muls	r1, r2
 8009fca:	f7ff f8b1 	bl	8009130 <_malloc_r>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	b320      	cbz	r0, 800a01c <_calloc_r+0x56>
 8009fd2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009fd6:	f022 0203 	bic.w	r2, r2, #3
 8009fda:	3a04      	subs	r2, #4
 8009fdc:	2a24      	cmp	r2, #36	; 0x24
 8009fde:	d81a      	bhi.n	800a016 <_calloc_r+0x50>
 8009fe0:	2a13      	cmp	r2, #19
 8009fe2:	d912      	bls.n	800a00a <_calloc_r+0x44>
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	2a1b      	cmp	r2, #27
 8009fe8:	6001      	str	r1, [r0, #0]
 8009fea:	6041      	str	r1, [r0, #4]
 8009fec:	d802      	bhi.n	8009ff4 <_calloc_r+0x2e>
 8009fee:	f100 0308 	add.w	r3, r0, #8
 8009ff2:	e00b      	b.n	800a00c <_calloc_r+0x46>
 8009ff4:	2a24      	cmp	r2, #36	; 0x24
 8009ff6:	6081      	str	r1, [r0, #8]
 8009ff8:	60c1      	str	r1, [r0, #12]
 8009ffa:	bf11      	iteee	ne
 8009ffc:	f100 0310 	addne.w	r3, r0, #16
 800a000:	6101      	streq	r1, [r0, #16]
 800a002:	f100 0318 	addeq.w	r3, r0, #24
 800a006:	6141      	streq	r1, [r0, #20]
 800a008:	e000      	b.n	800a00c <_calloc_r+0x46>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2200      	movs	r2, #0
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	605a      	str	r2, [r3, #4]
 800a012:	609a      	str	r2, [r3, #8]
 800a014:	e002      	b.n	800a01c <_calloc_r+0x56>
 800a016:	2100      	movs	r1, #0
 800a018:	f7fd f8c9 	bl	80071ae <memset>
 800a01c:	4620      	mov	r0, r4
 800a01e:	bd10      	pop	{r4, pc}

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
