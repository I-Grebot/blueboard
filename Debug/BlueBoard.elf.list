
BlueBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f0  080001c8  080001c8  000081c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0800a5b8  0800a5b8  000125b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8ec  0800a8ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8f4  0800a8f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8f8  0800a8f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000578  20010000  0800a8fc  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004074  20010578  20010578  00018578  2**3
                  ALLOC
  8 ._user_heap_stack 00001100  200145ec  200145ec  00018578  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00018578  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fd52  00000000  00000000  000185a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c2c  00000000  00000000  000282fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001460  00000000  00000000  0002af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001268  00000000  00000000  0002c388  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000090d0  00000000  00000000  0002d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000061b6  00000000  00000000  000366c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000082  00000000  00000000  0003c876  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e30  00000000  00000000  0003c8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20010578 	.word	0x20010578
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a5a0 	.word	0x0800a5a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4903      	ldr	r1, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a5a0 	.word	0x0800a5a0
 8000204:	2001057c 	.word	0x2001057c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b94b      	cbnz	r3, 8000b12 <__aeabi_uldivmod+0x16>
 8000afe:	b942      	cbnz	r2, 8000b12 <__aeabi_uldivmod+0x16>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	d002      	beq.n	8000b0e <__aeabi_uldivmod+0x12>
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	f000 b83b 	b.w	8000b88 <__aeabi_idiv0>
 8000b12:	b082      	sub	sp, #8
 8000b14:	46ec      	mov	ip, sp
 8000b16:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000b1a:	f000 f81d 	bl	8000b58 <__gnu_uldivmod_helper>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	b002      	add	sp, #8
 8000b24:	bc0c      	pop	{r2, r3}
 8000b26:	4770      	bx	lr

08000b28 <__gnu_ldivmod_helper>:
 8000b28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b2c:	9e06      	ldr	r6, [sp, #24]
 8000b2e:	4614      	mov	r4, r2
 8000b30:	461d      	mov	r5, r3
 8000b32:	4680      	mov	r8, r0
 8000b34:	4689      	mov	r9, r1
 8000b36:	f000 f829 	bl	8000b8c <__divdi3>
 8000b3a:	fb04 f301 	mul.w	r3, r4, r1
 8000b3e:	fb00 3305 	mla	r3, r0, r5, r3
 8000b42:	fba4 4500 	umull	r4, r5, r4, r0
 8000b46:	441d      	add	r5, r3
 8000b48:	ebb8 0404 	subs.w	r4, r8, r4
 8000b4c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b50:	e9c6 4500 	strd	r4, r5, [r6]
 8000b54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b58 <__gnu_uldivmod_helper>:
 8000b58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b5c:	9e06      	ldr	r6, [sp, #24]
 8000b5e:	4614      	mov	r4, r2
 8000b60:	4680      	mov	r8, r0
 8000b62:	4689      	mov	r9, r1
 8000b64:	461d      	mov	r5, r3
 8000b66:	f000 f95d 	bl	8000e24 <__udivdi3>
 8000b6a:	fb00 f505 	mul.w	r5, r0, r5
 8000b6e:	fb04 5301 	mla	r3, r4, r1, r5
 8000b72:	fba0 4504 	umull	r4, r5, r0, r4
 8000b76:	441d      	add	r5, r3
 8000b78:	ebb8 0404 	subs.w	r4, r8, r4
 8000b7c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b80:	e9c6 4500 	strd	r4, r5, [r6]
 8000b84:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__divdi3>:
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b92:	f2c0 809f 	blt.w	8000cd4 <__divdi3+0x148>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f2c0 8096 	blt.w	8000cca <__divdi3+0x13e>
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	4606      	mov	r6, r0
 8000ba2:	460f      	mov	r7, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d13e      	bne.n	8000c26 <__divdi3+0x9a>
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	d957      	bls.n	8000c5c <__divdi3+0xd0>
 8000bac:	fab2 f382 	clz	r3, r2
 8000bb0:	b14b      	cbz	r3, 8000bc6 <__divdi3+0x3a>
 8000bb2:	f1c3 0220 	rsb	r2, r3, #32
 8000bb6:	fa01 f703 	lsl.w	r7, r1, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	409d      	lsls	r5, r3
 8000bc0:	4317      	orrs	r7, r2
 8000bc2:	fa00 f603 	lsl.w	r6, r0, r3
 8000bc6:	0c29      	lsrs	r1, r5, #16
 8000bc8:	fbb7 f2f1 	udiv	r2, r7, r1
 8000bcc:	0c33      	lsrs	r3, r6, #16
 8000bce:	fb01 7c12 	mls	ip, r1, r2, r7
 8000bd2:	b2a8      	uxth	r0, r5
 8000bd4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000bd8:	fb00 f302 	mul.w	r3, r0, r2
 8000bdc:	42bb      	cmp	r3, r7
 8000bde:	d909      	bls.n	8000bf4 <__divdi3+0x68>
 8000be0:	197f      	adds	r7, r7, r5
 8000be2:	f102 3cff 	add.w	ip, r2, #4294967295
 8000be6:	f080 8101 	bcs.w	8000dec <__divdi3+0x260>
 8000bea:	42bb      	cmp	r3, r7
 8000bec:	f240 80fe 	bls.w	8000dec <__divdi3+0x260>
 8000bf0:	3a02      	subs	r2, #2
 8000bf2:	442f      	add	r7, r5
 8000bf4:	1aff      	subs	r7, r7, r3
 8000bf6:	fbb7 f3f1 	udiv	r3, r7, r1
 8000bfa:	b2b6      	uxth	r6, r6
 8000bfc:	fb01 7113 	mls	r1, r1, r3, r7
 8000c00:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000c04:	fb00 f003 	mul.w	r0, r0, r3
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	d908      	bls.n	8000c1e <__divdi3+0x92>
 8000c0c:	1949      	adds	r1, r1, r5
 8000c0e:	f103 37ff 	add.w	r7, r3, #4294967295
 8000c12:	f080 80ed 	bcs.w	8000df0 <__divdi3+0x264>
 8000c16:	4288      	cmp	r0, r1
 8000c18:	f240 80ea 	bls.w	8000df0 <__divdi3+0x264>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000c22:	2300      	movs	r3, #0
 8000c24:	e003      	b.n	8000c2e <__divdi3+0xa2>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d90a      	bls.n	8000c40 <__divdi3+0xb4>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	b114      	cbz	r4, 8000c3a <__divdi3+0xae>
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c3e:	4770      	bx	lr
 8000c40:	fab3 f883 	clz	r8, r3
 8000c44:	f1b8 0f00 	cmp.w	r8, #0
 8000c48:	f040 8084 	bne.w	8000d54 <__divdi3+0x1c8>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d302      	bcc.n	8000c56 <__divdi3+0xca>
 8000c50:	4282      	cmp	r2, r0
 8000c52:	f200 80de 	bhi.w	8000e12 <__divdi3+0x286>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2201      	movs	r2, #1
 8000c5a:	e7e8      	b.n	8000c2e <__divdi3+0xa2>
 8000c5c:	b912      	cbnz	r2, 8000c64 <__divdi3+0xd8>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	fbb3 f5f2 	udiv	r5, r3, r2
 8000c64:	fab5 f285 	clz	r2, r5
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	d139      	bne.n	8000ce0 <__divdi3+0x154>
 8000c6c:	1b7f      	subs	r7, r7, r5
 8000c6e:	0c28      	lsrs	r0, r5, #16
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	2301      	movs	r3, #1
 8000c76:	fbb7 f1f0 	udiv	r1, r7, r0
 8000c7a:	0c32      	lsrs	r2, r6, #16
 8000c7c:	fb00 7711 	mls	r7, r0, r1, r7
 8000c80:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c84:	fb0c f201 	mul.w	r2, ip, r1
 8000c88:	42ba      	cmp	r2, r7
 8000c8a:	d907      	bls.n	8000c9c <__divdi3+0x110>
 8000c8c:	197f      	adds	r7, r7, r5
 8000c8e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__divdi3+0x10e>
 8000c94:	42ba      	cmp	r2, r7
 8000c96:	f200 80c1 	bhi.w	8000e1c <__divdi3+0x290>
 8000c9a:	4641      	mov	r1, r8
 8000c9c:	1abf      	subs	r7, r7, r2
 8000c9e:	fbb7 f2f0 	udiv	r2, r7, r0
 8000ca2:	b2b6      	uxth	r6, r6
 8000ca4:	fb00 7012 	mls	r0, r0, r2, r7
 8000ca8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8000cac:	fb0c fc02 	mul.w	ip, ip, r2
 8000cb0:	4584      	cmp	ip, r0
 8000cb2:	d907      	bls.n	8000cc4 <__divdi3+0x138>
 8000cb4:	1940      	adds	r0, r0, r5
 8000cb6:	f102 37ff 	add.w	r7, r2, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__divdi3+0x136>
 8000cbc:	4584      	cmp	ip, r0
 8000cbe:	f200 80ab 	bhi.w	8000e18 <__divdi3+0x28c>
 8000cc2:	463a      	mov	r2, r7
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	e7b1      	b.n	8000c2e <__divdi3+0xa2>
 8000cca:	43e4      	mvns	r4, r4
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	e764      	b.n	8000b9e <__divdi3+0x12>
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	f04f 34ff 	mov.w	r4, #4294967295
 8000cde:	e75b      	b.n	8000b98 <__divdi3+0xc>
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	fa27 f103 	lsr.w	r1, r7, r3
 8000cea:	0c28      	lsrs	r0, r5, #16
 8000cec:	fa26 f303 	lsr.w	r3, r6, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fbb1 f8f0 	udiv	r8, r1, r0
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fb00 1118 	mls	r1, r0, r8, r1
 8000cfe:	fa1f fc85 	uxth.w	ip, r5
 8000d02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d06:	fb0c f308 	mul.w	r3, ip, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa06 f602 	lsl.w	r6, r6, r2
 8000d10:	d908      	bls.n	8000d24 <__divdi3+0x198>
 8000d12:	1949      	adds	r1, r1, r5
 8000d14:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d18:	d279      	bcs.n	8000e0e <__divdi3+0x282>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d977      	bls.n	8000e0e <__divdi3+0x282>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4429      	add	r1, r5
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	fbb1 f3f0 	udiv	r3, r1, r0
 8000d2a:	b2bf      	uxth	r7, r7
 8000d2c:	fb00 1113 	mls	r1, r0, r3, r1
 8000d30:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d34:	fb0c f203 	mul.w	r2, ip, r3
 8000d38:	42ba      	cmp	r2, r7
 8000d3a:	d907      	bls.n	8000d4c <__divdi3+0x1c0>
 8000d3c:	197f      	adds	r7, r7, r5
 8000d3e:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d42:	d260      	bcs.n	8000e06 <__divdi3+0x27a>
 8000d44:	42ba      	cmp	r2, r7
 8000d46:	d95e      	bls.n	8000e06 <__divdi3+0x27a>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	442f      	add	r7, r5
 8000d4c:	1abf      	subs	r7, r7, r2
 8000d4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d52:	e790      	b.n	8000c76 <__divdi3+0xea>
 8000d54:	f1c8 0220 	rsb	r2, r8, #32
 8000d58:	fa03 fc08 	lsl.w	ip, r3, r8
 8000d5c:	fa25 f302 	lsr.w	r3, r5, r2
 8000d60:	ea43 0c0c 	orr.w	ip, r3, ip
 8000d64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d68:	fa21 f302 	lsr.w	r3, r1, r2
 8000d6c:	fa01 f708 	lsl.w	r7, r1, r8
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	fbb3 f1f9 	udiv	r1, r3, r9
 8000d78:	4317      	orrs	r7, r2
 8000d7a:	fb09 3311 	mls	r3, r9, r1, r3
 8000d7e:	0c3a      	lsrs	r2, r7, #16
 8000d80:	fa1f fb8c 	uxth.w	fp, ip
 8000d84:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d88:	fb0b fa01 	mul.w	sl, fp, r1
 8000d8c:	459a      	cmp	sl, r3
 8000d8e:	fa05 f008 	lsl.w	r0, r5, r8
 8000d92:	d908      	bls.n	8000da6 <__divdi3+0x21a>
 8000d94:	eb13 030c 	adds.w	r3, r3, ip
 8000d98:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d9c:	d235      	bcs.n	8000e0a <__divdi3+0x27e>
 8000d9e:	459a      	cmp	sl, r3
 8000da0:	d933      	bls.n	8000e0a <__divdi3+0x27e>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4463      	add	r3, ip
 8000da6:	ebca 0303 	rsb	r3, sl, r3
 8000daa:	fbb3 f2f9 	udiv	r2, r3, r9
 8000dae:	fb09 3312 	mls	r3, r9, r2, r3
 8000db2:	b2bf      	uxth	r7, r7
 8000db4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000db8:	fb0b f902 	mul.w	r9, fp, r2
 8000dbc:	45b9      	cmp	r9, r7
 8000dbe:	d908      	bls.n	8000dd2 <__divdi3+0x246>
 8000dc0:	eb17 070c 	adds.w	r7, r7, ip
 8000dc4:	f102 33ff 	add.w	r3, r2, #4294967295
 8000dc8:	d21b      	bcs.n	8000e02 <__divdi3+0x276>
 8000dca:	45b9      	cmp	r9, r7
 8000dcc:	d919      	bls.n	8000e02 <__divdi3+0x276>
 8000dce:	3a02      	subs	r2, #2
 8000dd0:	4467      	add	r7, ip
 8000dd2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8000dd6:	fba5 0100 	umull	r0, r1, r5, r0
 8000dda:	ebc9 0707 	rsb	r7, r9, r7
 8000dde:	428f      	cmp	r7, r1
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	d30a      	bcc.n	8000dfc <__divdi3+0x270>
 8000de6:	d005      	beq.n	8000df4 <__divdi3+0x268>
 8000de8:	462a      	mov	r2, r5
 8000dea:	e720      	b.n	8000c2e <__divdi3+0xa2>
 8000dec:	4662      	mov	r2, ip
 8000dee:	e701      	b.n	8000bf4 <__divdi3+0x68>
 8000df0:	463b      	mov	r3, r7
 8000df2:	e714      	b.n	8000c1e <__divdi3+0x92>
 8000df4:	fa06 f608 	lsl.w	r6, r6, r8
 8000df8:	4286      	cmp	r6, r0
 8000dfa:	d2f5      	bcs.n	8000de8 <__divdi3+0x25c>
 8000dfc:	1e6a      	subs	r2, r5, #1
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e715      	b.n	8000c2e <__divdi3+0xa2>
 8000e02:	461a      	mov	r2, r3
 8000e04:	e7e5      	b.n	8000dd2 <__divdi3+0x246>
 8000e06:	460b      	mov	r3, r1
 8000e08:	e7a0      	b.n	8000d4c <__divdi3+0x1c0>
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	e7cb      	b.n	8000da6 <__divdi3+0x21a>
 8000e0e:	4690      	mov	r8, r2
 8000e10:	e788      	b.n	8000d24 <__divdi3+0x198>
 8000e12:	4643      	mov	r3, r8
 8000e14:	4642      	mov	r2, r8
 8000e16:	e70a      	b.n	8000c2e <__divdi3+0xa2>
 8000e18:	3a02      	subs	r2, #2
 8000e1a:	e753      	b.n	8000cc4 <__divdi3+0x138>
 8000e1c:	3902      	subs	r1, #2
 8000e1e:	442f      	add	r7, r5
 8000e20:	e73c      	b.n	8000c9c <__divdi3+0x110>
 8000e22:	bf00      	nop

08000e24 <__udivdi3>:
 8000e24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e28:	4614      	mov	r4, r2
 8000e2a:	4605      	mov	r5, r0
 8000e2c:	460e      	mov	r6, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d143      	bne.n	8000eba <__udivdi3+0x96>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d953      	bls.n	8000ede <__udivdi3+0xba>
 8000e36:	fab2 f782 	clz	r7, r2
 8000e3a:	b157      	cbz	r7, 8000e52 <__udivdi3+0x2e>
 8000e3c:	f1c7 0620 	rsb	r6, r7, #32
 8000e40:	fa20 f606 	lsr.w	r6, r0, r6
 8000e44:	fa01 f307 	lsl.w	r3, r1, r7
 8000e48:	fa02 f407 	lsl.w	r4, r2, r7
 8000e4c:	431e      	orrs	r6, r3
 8000e4e:	fa00 f507 	lsl.w	r5, r0, r7
 8000e52:	0c21      	lsrs	r1, r4, #16
 8000e54:	fbb6 f2f1 	udiv	r2, r6, r1
 8000e58:	0c2b      	lsrs	r3, r5, #16
 8000e5a:	fb01 6712 	mls	r7, r1, r2, r6
 8000e5e:	b2a0      	uxth	r0, r4
 8000e60:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8000e64:	fb00 f302 	mul.w	r3, r0, r2
 8000e68:	42b3      	cmp	r3, r6
 8000e6a:	d909      	bls.n	8000e80 <__udivdi3+0x5c>
 8000e6c:	1936      	adds	r6, r6, r4
 8000e6e:	f102 37ff 	add.w	r7, r2, #4294967295
 8000e72:	f080 80f6 	bcs.w	8001062 <__udivdi3+0x23e>
 8000e76:	42b3      	cmp	r3, r6
 8000e78:	f240 80f3 	bls.w	8001062 <__udivdi3+0x23e>
 8000e7c:	3a02      	subs	r2, #2
 8000e7e:	4426      	add	r6, r4
 8000e80:	1af6      	subs	r6, r6, r3
 8000e82:	fbb6 f3f1 	udiv	r3, r6, r1
 8000e86:	b2ad      	uxth	r5, r5
 8000e88:	fb01 6113 	mls	r1, r1, r3, r6
 8000e8c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000e90:	fb00 f003 	mul.w	r0, r0, r3
 8000e94:	4288      	cmp	r0, r1
 8000e96:	d908      	bls.n	8000eaa <__udivdi3+0x86>
 8000e98:	1909      	adds	r1, r1, r4
 8000e9a:	f103 36ff 	add.w	r6, r3, #4294967295
 8000e9e:	f080 80e2 	bcs.w	8001066 <__udivdi3+0x242>
 8000ea2:	4288      	cmp	r0, r1
 8000ea4:	f240 80df 	bls.w	8001066 <__udivdi3+0x242>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000eb8:	4770      	bx	lr
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d84a      	bhi.n	8000f54 <__udivdi3+0x130>
 8000ebe:	fab3 f683 	clz	r6, r3
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d14d      	bne.n	8000f62 <__udivdi3+0x13e>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d302      	bcc.n	8000ed0 <__udivdi3+0xac>
 8000eca:	4282      	cmp	r2, r0
 8000ecc:	f200 80d6 	bhi.w	800107c <__udivdi3+0x258>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000edc:	4770      	bx	lr
 8000ede:	b912      	cbnz	r2, 8000ee6 <__udivdi3+0xc2>
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	fbb4 f4f2 	udiv	r4, r4, r2
 8000ee6:	fab4 f284 	clz	r2, r4
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d17c      	bne.n	8000fe8 <__udivdi3+0x1c4>
 8000eee:	1b09      	subs	r1, r1, r4
 8000ef0:	0c26      	lsrs	r6, r4, #16
 8000ef2:	b2a7      	uxth	r7, r4
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	fbb1 f0f6 	udiv	r0, r1, r6
 8000efa:	0c2a      	lsrs	r2, r5, #16
 8000efc:	fb06 1110 	mls	r1, r6, r0, r1
 8000f00:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000f04:	fb07 f200 	mul.w	r2, r7, r0
 8000f08:	428a      	cmp	r2, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivdi3+0xf8>
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d202      	bcs.n	8000f1a <__udivdi3+0xf6>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	f200 80c3 	bhi.w	80010a0 <__udivdi3+0x27c>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	1a89      	subs	r1, r1, r2
 8000f1e:	fbb1 f2f6 	udiv	r2, r1, r6
 8000f22:	b2ad      	uxth	r5, r5
 8000f24:	fb06 1112 	mls	r1, r6, r2, r1
 8000f28:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000f2c:	fb07 f702 	mul.w	r7, r7, r2
 8000f30:	42af      	cmp	r7, r5
 8000f32:	d908      	bls.n	8000f46 <__udivdi3+0x122>
 8000f34:	192c      	adds	r4, r5, r4
 8000f36:	f102 31ff 	add.w	r1, r2, #4294967295
 8000f3a:	f080 8096 	bcs.w	800106a <__udivdi3+0x246>
 8000f3e:	42a7      	cmp	r7, r4
 8000f40:	f240 8093 	bls.w	800106a <__udivdi3+0x246>
 8000f44:	3a02      	subs	r2, #2
 8000f46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f52:	4770      	bx	lr
 8000f54:	2300      	movs	r3, #0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f60:	4770      	bx	lr
 8000f62:	f1c6 0520 	rsb	r5, r6, #32
 8000f66:	fa22 f405 	lsr.w	r4, r2, r5
 8000f6a:	40b3      	lsls	r3, r6
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000f72:	fa21 f305 	lsr.w	r3, r1, r5
 8000f76:	fa01 f706 	lsl.w	r7, r1, r6
 8000f7a:	fa20 f505 	lsr.w	r5, r0, r5
 8000f7e:	fbb3 fcf8 	udiv	ip, r3, r8
 8000f82:	432f      	orrs	r7, r5
 8000f84:	fb08 331c 	mls	r3, r8, ip, r3
 8000f88:	0c3d      	lsrs	r5, r7, #16
 8000f8a:	fa1f fa84 	uxth.w	sl, r4
 8000f8e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8000f92:	fb0a f90c 	mul.w	r9, sl, ip
 8000f96:	4599      	cmp	r9, r3
 8000f98:	fa02 fb06 	lsl.w	fp, r2, r6
 8000f9c:	d904      	bls.n	8000fa8 <__udivdi3+0x184>
 8000f9e:	191b      	adds	r3, r3, r4
 8000fa0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000fa4:	d36d      	bcc.n	8001082 <__udivdi3+0x25e>
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	ebc9 0303 	rsb	r3, r9, r3
 8000fac:	fbb3 f5f8 	udiv	r5, r3, r8
 8000fb0:	fb08 3315 	mls	r3, r8, r5, r3
 8000fb4:	b2bf      	uxth	r7, r7
 8000fb6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000fba:	fb0a f805 	mul.w	r8, sl, r5
 8000fbe:	45b8      	cmp	r8, r7
 8000fc0:	d904      	bls.n	8000fcc <__udivdi3+0x1a8>
 8000fc2:	193f      	adds	r7, r7, r4
 8000fc4:	f105 33ff 	add.w	r3, r5, #4294967295
 8000fc8:	d361      	bcc.n	800108e <__udivdi3+0x26a>
 8000fca:	461d      	mov	r5, r3
 8000fcc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8000fd0:	fbac 230b 	umull	r2, r3, ip, fp
 8000fd4:	ebc8 0707 	rsb	r7, r8, r7
 8000fd8:	429f      	cmp	r7, r3
 8000fda:	f04f 0500 	mov.w	r5, #0
 8000fde:	d349      	bcc.n	8001074 <__udivdi3+0x250>
 8000fe0:	d045      	beq.n	800106e <__udivdi3+0x24a>
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e763      	b.n	8000eb0 <__udivdi3+0x8c>
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	f1c2 0320 	rsb	r3, r2, #32
 8000fee:	fa21 fc03 	lsr.w	ip, r1, r3
 8000ff2:	0c26      	lsrs	r6, r4, #16
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	fa01 f502 	lsl.w	r5, r1, r2
 8000ffc:	fbbc f8f6 	udiv	r8, ip, r6
 8001000:	ea43 0105 	orr.w	r1, r3, r5
 8001004:	0c0b      	lsrs	r3, r1, #16
 8001006:	fb06 cc18 	mls	ip, r6, r8, ip
 800100a:	b2a7      	uxth	r7, r4
 800100c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8001010:	fb07 f308 	mul.w	r3, r7, r8
 8001014:	4563      	cmp	r3, ip
 8001016:	fa00 f502 	lsl.w	r5, r0, r2
 800101a:	d909      	bls.n	8001030 <__udivdi3+0x20c>
 800101c:	eb1c 0c04 	adds.w	ip, ip, r4
 8001020:	f108 32ff 	add.w	r2, r8, #4294967295
 8001024:	d23a      	bcs.n	800109c <__udivdi3+0x278>
 8001026:	4563      	cmp	r3, ip
 8001028:	d938      	bls.n	800109c <__udivdi3+0x278>
 800102a:	f1a8 0802 	sub.w	r8, r8, #2
 800102e:	44a4      	add	ip, r4
 8001030:	ebc3 0c0c 	rsb	ip, r3, ip
 8001034:	fbbc f3f6 	udiv	r3, ip, r6
 8001038:	b289      	uxth	r1, r1
 800103a:	fb06 cc13 	mls	ip, r6, r3, ip
 800103e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001042:	fb07 f203 	mul.w	r2, r7, r3
 8001046:	428a      	cmp	r2, r1
 8001048:	d907      	bls.n	800105a <__udivdi3+0x236>
 800104a:	1909      	adds	r1, r1, r4
 800104c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001050:	d222      	bcs.n	8001098 <__udivdi3+0x274>
 8001052:	428a      	cmp	r2, r1
 8001054:	d920      	bls.n	8001098 <__udivdi3+0x274>
 8001056:	3b02      	subs	r3, #2
 8001058:	4421      	add	r1, r4
 800105a:	1a89      	subs	r1, r1, r2
 800105c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001060:	e749      	b.n	8000ef6 <__udivdi3+0xd2>
 8001062:	463a      	mov	r2, r7
 8001064:	e70c      	b.n	8000e80 <__udivdi3+0x5c>
 8001066:	4633      	mov	r3, r6
 8001068:	e71f      	b.n	8000eaa <__udivdi3+0x86>
 800106a:	460a      	mov	r2, r1
 800106c:	e76b      	b.n	8000f46 <__udivdi3+0x122>
 800106e:	40b0      	lsls	r0, r6
 8001070:	4290      	cmp	r0, r2
 8001072:	d2b6      	bcs.n	8000fe2 <__udivdi3+0x1be>
 8001074:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001078:	2300      	movs	r3, #0
 800107a:	e719      	b.n	8000eb0 <__udivdi3+0x8c>
 800107c:	4633      	mov	r3, r6
 800107e:	4632      	mov	r2, r6
 8001080:	e716      	b.n	8000eb0 <__udivdi3+0x8c>
 8001082:	4599      	cmp	r9, r3
 8001084:	d98f      	bls.n	8000fa6 <__udivdi3+0x182>
 8001086:	f1ac 0c02 	sub.w	ip, ip, #2
 800108a:	4423      	add	r3, r4
 800108c:	e78c      	b.n	8000fa8 <__udivdi3+0x184>
 800108e:	45b8      	cmp	r8, r7
 8001090:	d99b      	bls.n	8000fca <__udivdi3+0x1a6>
 8001092:	3d02      	subs	r5, #2
 8001094:	4427      	add	r7, r4
 8001096:	e799      	b.n	8000fcc <__udivdi3+0x1a8>
 8001098:	4603      	mov	r3, r0
 800109a:	e7de      	b.n	800105a <__udivdi3+0x236>
 800109c:	4690      	mov	r8, r2
 800109e:	e7c7      	b.n	8001030 <__udivdi3+0x20c>
 80010a0:	3802      	subs	r0, #2
 80010a2:	4421      	add	r1, r4
 80010a4:	e73a      	b.n	8000f1c <__udivdi3+0xf8>
 80010a6:	bf00      	nop

080010a8 <main>:
**
********************************************************************************
*/

int main( void )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    /* Initialize global variables */
    memset(&robot, 0, sizeof(RobotTypeDef));
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <main+0x28>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	f44f 721a 	mov.w	r2, #616	; 0x268
 80010b4:	f005 fd85 	bl	8006bc2 <memset>

    /* Configure the hardware */
    HW_InitAll();
 80010b8:	f001 f9a0 	bl	80023fc <HW_InitAll>

    /* Apply the Power-Up sequence*/
    HW_PowerUp();
 80010bc:	f001 f9be 	bl	800243c <HW_PowerUp>

    /* Start software tasks */
    OS_CreateMotionTask();
 80010c0:	f005 fbca 	bl	8006858 <OS_CreateMotionTask>
    OS_CreateLedTask();
 80010c4:	f005 fc22 	bl	800690c <OS_CreateLedTask>

    /* Start FreeRTOS Scheduler */
    vTaskStartScheduler();
 80010c8:	f001 fe68 	bl	8002d9c <vTaskStartScheduler>

    /* Infinite loop */
    for( ;; );
 80010cc:	e7fe      	b.n	80010cc <main+0x24>
 80010ce:	bf00      	nop
 80010d0:	20014340 	.word	0x20014340

080010d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <SystemInit+0x60>)
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <SystemInit+0x60>)
 80010dc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80010e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80010e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <SystemInit+0x64>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <SystemInit+0x64>)
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <SystemInit+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <SystemInit+0x64>)
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <SystemInit+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <SystemInit+0x64>)
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <SystemInit+0x68>)
 800110e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <SystemInit+0x64>)
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <SystemInit+0x64>)
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800111a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SystemInit+0x60>)
 8001124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001128:	609a      	str	r2, [r3, #8]
#endif
}
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	40023800 	.word	0x40023800
 800113c:	24003010 	.word	0x24003010

08001140 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	2302      	movs	r3, #2
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	2302      	movs	r3, #2
 8001158:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b04      	cmp	r3, #4
 8001168:	d007      	beq.n	800117a <SystemCoreClockUpdate+0x3a>
 800116a:	2b08      	cmp	r3, #8
 800116c:	d009      	beq.n	8001182 <SystemCoreClockUpdate+0x42>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d13f      	bne.n	80011f2 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <SystemCoreClockUpdate+0xe4>)
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <SystemCoreClockUpdate+0xe8>)
 8001176:	601a      	str	r2, [r3, #0]
      break;
 8001178:	e03f      	b.n	80011fa <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <SystemCoreClockUpdate+0xe4>)
 800117c:	4a2b      	ldr	r2, [pc, #172]	; (800122c <SystemCoreClockUpdate+0xec>)
 800117e:	601a      	str	r2, [r3, #0]
      break;
 8001180:	e03b      	b.n	80011fa <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	0d9b      	lsrs	r3, r3, #22
 800118c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001196:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00d      	beq.n	80011ba <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <SystemCoreClockUpdate+0xec>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 80011a8:	6859      	ldr	r1, [r3, #4]
 80011aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011ae:	400b      	ands	r3, r1
 80011b0:	099b      	lsrs	r3, r3, #6
 80011b2:	fb03 f302 	mul.w	r3, r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00c      	b.n	80011d4 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <SystemCoreClockUpdate+0xe8>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	fbb2 f2f3 	udiv	r2, r2, r3
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011ca:	400b      	ands	r3, r1
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	fb03 f302 	mul.w	r3, r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011dc:	0c1b      	lsrs	r3, r3, #16
 80011de:	3301      	adds	r3, #1
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <SystemCoreClockUpdate+0xe4>)
 80011ee:	601a      	str	r2, [r3, #0]
      break;
 80011f0:	e003      	b.n	80011fa <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <SystemCoreClockUpdate+0xe4>)
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <SystemCoreClockUpdate+0xe8>)
 80011f6:	601a      	str	r2, [r3, #0]
      break;
 80011f8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <SystemCoreClockUpdate+0xe0>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SystemCoreClockUpdate+0xf0>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemCoreClockUpdate+0xe4>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	40da      	lsrs	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SystemCoreClockUpdate+0xe4>)
 8001214:	601a      	str	r2, [r3, #0]
}
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40023800 	.word	0x40023800
 8001224:	20010000 	.word	0x20010000
 8001228:	00f42400 	.word	0x00f42400
 800122c:	007a1200 	.word	0x007a1200
 8001230:	0800a6f0 	.word	0x0800a6f0

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8001274 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800123a:	f000 b804 	b.w	8001246 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8001240:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001242:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001244:	3104      	adds	r1, #4

08001246 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800124a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800124c:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800124e:	f4ff aff6 	bcc.w	800123e <CopyDataInit>
  ldr  r2, =_sbss
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8001254:	f000 b803 	b.w	800125e <LoopFillZerobss>

08001258 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001258:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800125a:	f842 3b04 	str.w	r3, [r2], #4

0800125e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8001260:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001262:	f4ff aff9 	bcc.w	8001258 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001266:	f7ff ff35 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f005 fc7b 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff ff1b 	bl	80010a8 <main>
  bx  lr    
 8001272:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	2004ff00 	.word	0x2004ff00
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001278:	0800a8fc 	.word	0x0800a8fc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800127c:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 8001280:	20010578 	.word	0x20010578
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001284:	20010578 	.word	0x20010578
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001288:	200145ec 	.word	0x200145ec

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	f7ff bffe 	b.w	800128c <ADC_IRQHandler>

08001290 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001294:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001298:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     // invalidate I-Cache
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <SCB_EnableICache+0x30>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  // enable I-Cache
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SCB_EnableICache+0x30>)
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <SCB_EnableICache+0x30>)
 80012a8:	6952      	ldr	r2, [r2, #20]
 80012aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012ae:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012b0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80012b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    SCB->CSSELR = (0UL << 1) | 0UL;         // Level 1 data cache
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <SCB_EnableDCache+0x9c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ccsidr  = SCB->CCSIDR;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <SCB_EnableDCache+0x9c>)
 80012d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d8:	617b      	str	r3, [r7, #20]
    sets    = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <SCB_EnableDCache+0xa0>)
 80012de:	4013      	ands	r3, r2
 80012e0:	0b5b      	lsrs	r3, r3, #13
 80012e2:	61fb      	str	r3, [r7, #28]
    sshift  = (uint32_t)(CCSIDR_LSSHIFT(ccsidr) + 4UL);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	3304      	adds	r3, #4
 80012ec:	613b      	str	r3, [r7, #16]
    ways    = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80012f4:	4013      	ands	r3, r2
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	60fb      	str	r3, [r7, #12]
    wshift  = (uint32_t)((uint32_t)__CLZ(ways) & 0x1FUL);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	60bb      	str	r3, [r7, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001306:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                   // invalidate D-Cache
         uint32_t tmpways = ways;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	61bb      	str	r3, [r7, #24]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	409a      	lsls	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	69f9      	ldr	r1, [r7, #28]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	607b      	str	r3, [r7, #4]
              SCB->DCISW = sw;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <SCB_EnableDCache+0x9c>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            } while(tmpways--);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	61ba      	str	r2, [r7, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ed      	bne.n	800130e <SCB_EnableDCache+0x4a>
        } while(sets--);
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	61fa      	str	r2, [r7, #28]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e6      	bne.n	800130a <SCB_EnableDCache+0x46>
 800133c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;   // enable D-Cache
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <SCB_EnableDCache+0x9c>)
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <SCB_EnableDCache+0x9c>)
 8001344:	6952      	ldr	r2, [r2, #20]
 8001346:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001350:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	0fffe000 	.word	0x0fffe000

08001368 <HW_SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void HW_SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af02      	add	r7, sp, #8
  RCC_HSEConfig(RCC_HSE_ON);
 800136e:	2001      	movs	r0, #1
 8001370:	f004 fcd6 	bl	8005d20 <RCC_HSEConfig>

  if ( RCC_WaitForHSEStartUp() != SUCCESS )
 8001374:	f004 fce6 	bl	8005d44 <RCC_WaitForHSEStartUp>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d000      	beq.n	8001380 <HW_SystemClock_Config+0x18>
  {
    while(1);
 800137e:	e7fe      	b.n	800137e <HW_SystemClock_Config+0x16>
  }

  RCC_PLLConfig(RCC_PLLSource_HSE, 8, 384, 2, 8);
 8001380:	2308      	movs	r3, #8
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001388:	2108      	movs	r1, #8
 800138a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800138e:	2302      	movs	r3, #2
 8001390:	f004 fd00 	bl	8005d94 <RCC_PLLConfig>
  RCC_PLLCmd(ENABLE);
 8001394:	2001      	movs	r0, #1
 8001396:	f004 fd3d 	bl	8005e14 <RCC_PLLCmd>

  while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 800139a:	bf00      	nop
 800139c:	2039      	movs	r0, #57	; 0x39
 800139e:	f004 fec5 	bl	800612c <RCC_GetFlagStatus>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f9      	beq.n	800139c <HW_SystemClock_Config+0x34>

  /* Activate the OverDrive to reach the 196 MHz Frequency */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80013a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80013ac:	2101      	movs	r1, #1
 80013ae:	f004 fe81 	bl	80060b4 <RCC_APB1PeriphClockCmd>

  PWR_OverDriveCmd( ENABLE );
 80013b2:	2001      	movs	r0, #1
 80013b4:	f004 fef4 	bl	80061a0 <PWR_OverDriveCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODRDY ) == RESET );
 80013b8:	bf00      	nop
 80013ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80013be:	f004 ff27 	bl	8006210 <PWR_GetFlagStatus>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f8      	beq.n	80013ba <HW_SystemClock_Config+0x52>

  while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 80013c8:	bf00      	nop
 80013ca:	2031      	movs	r0, #49	; 0x31
 80013cc:	f004 feae 	bl	800612c <RCC_GetFlagStatus>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f9      	beq.n	80013ca <HW_SystemClock_Config+0x62>

  PWR_OverDriveSWCmd(ENABLE);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f004 fefe 	bl	80061d8 <PWR_OverDriveSWCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODSWRDY ) == RESET );
 80013dc:	bf00      	nop
 80013de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013e2:	f004 ff15 	bl	8006210 <PWR_GetFlagStatus>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f8      	beq.n	80013de <HW_SystemClock_Config+0x76>

  FLASH_SetLatency(FLASH_Latency_7);
 80013ec:	2007      	movs	r0, #7
 80013ee:	f005 f829 	bl	8006444 <FLASH_SetLatency>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f004 fd2a 	bl	8005e4c <RCC_SYSCLKConfig>

  RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f004 fd43 	bl	8005e84 <RCC_HCLKConfig>
  RCC_PCLK1Config(RCC_HCLK_Div4);
 80013fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001402:	f004 fd5b 	bl	8005ebc <RCC_PCLK1Config>
  RCC_PCLK2Config(RCC_HCLK_Div4);
 8001406:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800140a:	f004 fd73 	bl	8005ef4 <RCC_PCLK2Config>

  SystemCoreClockUpdate();
 800140e:	f7ff fe97 	bl	8001140 <SystemCoreClockUpdate>
}
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop

08001418 <HW_CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
void HW_CPU_CACHE_Enable(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Enable branch prediction */
  SCB->CCR |= (1 <<18);
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HW_CPU_CACHE_Enable+0x20>)
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HW_CPU_CACHE_Enable+0x20>)
 8001420:	6952      	ldr	r2, [r2, #20]
 8001422:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001426:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001428:	f3bf 8f4f 	dsb	sy
  __DSB();

  /* Enable I-Cache */
  SCB_EnableICache();
 800142c:	f7ff ff30 	bl	8001290 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8001430:	f7ff ff48 	bl	80012c4 <SCB_EnableDCache>
}
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <HW_PWR_Init>:
  * @brief  Configure all VPn power GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_PWR_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    VP1_EN_GPIO_CLK_ENABLE();
 8001442:	2002      	movs	r0, #2
 8001444:	2101      	movs	r1, #1
 8001446:	f004 fe17 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    VP2_EN_GPIO_CLK_ENABLE();
 800144a:	2002      	movs	r0, #2
 800144c:	2101      	movs	r1, #1
 800144e:	f004 fe13 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    VP3_EN_GPIO_CLK_ENABLE();
 8001452:	2010      	movs	r0, #16
 8001454:	2101      	movs	r1, #1
 8001456:	f004 fe0f 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all VPn */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800145a:	2301      	movs	r3, #1
 800145c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800145e:	2300      	movs	r3, #0
 8001460:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 8001466:	2300      	movs	r3, #0
 8001468:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = VP1_EN_PIN;
 800146a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146e:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP1_EN_GPIO_PORT, &GPIO_InitStructure);
 8001470:	463b      	mov	r3, r7
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <HW_PWR_Init+0x74>)
 8001474:	4619      	mov	r1, r3
 8001476:	f004 fef9 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP2_EN_PIN;
 800147a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147e:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP2_EN_GPIO_PORT, &GPIO_InitStructure);
 8001480:	463b      	mov	r3, r7
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HW_PWR_Init+0x74>)
 8001484:	4619      	mov	r1, r3
 8001486:	f004 fef1 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP3_EN_PIN;
 800148a:	2301      	movs	r3, #1
 800148c:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP3_EN_GPIO_PORT, &GPIO_InitStructure);
 800148e:	463b      	mov	r3, r7
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <HW_PWR_Init+0x78>)
 8001492:	4619      	mov	r1, r3
 8001494:	f004 feea 	bl	800626c <GPIO_Init>

    /* Default state: Modules OFF */
    HW_PWR_Disable(HW_PWR_VP1);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f827 	bl	80014ec <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP2);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 f824 	bl	80014ec <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP3);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f000 f821 	bl	80014ec <HW_PWR_Disable>

}
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40021000 	.word	0x40021000

080014b8 <HW_PWR_Enable>:
  * @brief  Enable a VPx power-supply
  * @param  power VPx channel to enable
  * @retval None
  */
void HW_PWR_Enable(HW_PWR_TypeDef power)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_ON);
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HW_PWR_Enable+0x2c>)
 80014c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014ca:	79f9      	ldrb	r1, [r7, #7]
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HW_PWR_Enable+0x30>)
 80014ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	f004 ff56 	bl	8006388 <GPIO_WriteBit>
}
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20010004 	.word	0x20010004
 80014e8:	0800a700 	.word	0x0800a700

080014ec <HW_PWR_Disable>:
  * @brief  Disable a VPx power-supply
  * @param  power VPx channel to disable
  * @retval None
  */
void HW_PWR_Disable(HW_PWR_TypeDef power)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_OFF);
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HW_PWR_Disable+0x2c>)
 80014fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014fe:	79f9      	ldrb	r1, [r7, #7]
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HW_PWR_Disable+0x30>)
 8001502:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	2201      	movs	r2, #1
 800150c:	f004 ff3c 	bl	8006388 <GPIO_WriteBit>
}
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20010004 	.word	0x20010004
 800151c:	0800a700 	.word	0x0800a700

08001520 <HW_MOT_Init>:

#include "blueboard.h"


void HW_MOT_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    TIM_OCInitTypeDef TIM_OCStruct;

    MOT_SLEEP_GPIO_CLK_ENABLE();
 8001526:	2010      	movs	r0, #16
 8001528:	2101      	movs	r1, #1
 800152a:	f004 fda5 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT_RESET_GPIO_CLK_ENABLE();
 800152e:	2010      	movs	r0, #16
 8001530:	2101      	movs	r1, #1
 8001532:	f004 fda1 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT_I1_GPIO_CLK_ENABLE();
 8001536:	2010      	movs	r0, #16
 8001538:	2101      	movs	r1, #1
 800153a:	f004 fd9d 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT_I0_GPIO_CLK_ENABLE();
 800153e:	2010      	movs	r0, #16
 8001540:	2101      	movs	r1, #1
 8001542:	f004 fd99 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT1_IN1_GPIO_CLK_ENABLE();
 8001546:	2010      	movs	r0, #16
 8001548:	2101      	movs	r1, #1
 800154a:	f004 fd95 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT1_IN2_GPIO_CLK_ENABLE();
 800154e:	2010      	movs	r0, #16
 8001550:	2101      	movs	r1, #1
 8001552:	f004 fd91 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT2_IN1_GPIO_CLK_ENABLE();
 8001556:	2010      	movs	r0, #16
 8001558:	2101      	movs	r1, #1
 800155a:	f004 fd8d 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT2_IN2_GPIO_CLK_ENABLE();
 800155e:	2010      	movs	r0, #16
 8001560:	2101      	movs	r1, #1
 8001562:	f004 fd89 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    MOT_FAULT_GPIO_CLK_ENABLE();
 8001566:	2010      	movs	r0, #16
 8001568:	2101      	movs	r1, #1
 800156a:	f004 fd85 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all General-Purpose Outputs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8001580:	2302      	movs	r3, #2
 8001582:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
 8001586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT_SLEEP_GPIO_PORT, &GPIO_InitStructure);
 800158c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001590:	4863      	ldr	r0, [pc, #396]	; (8001720 <HW_MOT_Init+0x200>)
 8001592:	4619      	mov	r1, r3
 8001594:	f004 fe6a 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT_RESET_GPIO_PORT, &GPIO_InitStructure);
 800159e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015a2:	485f      	ldr	r0, [pc, #380]	; (8001720 <HW_MOT_Init+0x200>)
 80015a4:	4619      	mov	r1, r3
 80015a6:	f004 fe61 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = MOT_I1_PIN;
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT_I1_GPIO_PORT, &GPIO_InitStructure);
 80015ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015b2:	485b      	ldr	r0, [pc, #364]	; (8001720 <HW_MOT_Init+0x200>)
 80015b4:	4619      	mov	r1, r3
 80015b6:	f004 fe59 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = MOT_I0_PIN;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT_I0_GPIO_PORT, &GPIO_InitStructure);
 80015c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c4:	4856      	ldr	r0, [pc, #344]	; (8001720 <HW_MOT_Init+0x200>)
 80015c6:	4619      	mov	r1, r3
 80015c8:	f004 fe50 	bl	800626c <GPIO_Init>

    /* Alternate function (PWM) */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    GPIO_InitStructure.GPIO_Pin = MOT1_IN1_PIN;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT1_IN1_GPIO_PORT, &GPIO_InitStructure);
 80015d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015dc:	4850      	ldr	r0, [pc, #320]	; (8001720 <HW_MOT_Init+0x200>)
 80015de:	4619      	mov	r1, r3
 80015e0:	f004 fe44 	bl	800626c <GPIO_Init>
    GPIO_PinAFConfig(MOT1_IN1_GPIO_PORT, MOT1_IN1_PIN_SOURCE, MOT1_IN1_AF);
 80015e4:	484e      	ldr	r0, [pc, #312]	; (8001720 <HW_MOT_Init+0x200>)
 80015e6:	210d      	movs	r1, #13
 80015e8:	2201      	movs	r2, #1
 80015ea:	f004 fee5 	bl	80063b8 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
 80015ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
 80015f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f8:	4849      	ldr	r0, [pc, #292]	; (8001720 <HW_MOT_Init+0x200>)
 80015fa:	4619      	mov	r1, r3
 80015fc:	f004 fe36 	bl	800626c <GPIO_Init>
    GPIO_PinAFConfig(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN_SOURCE, MOT1_IN2_AF);
 8001600:	4847      	ldr	r0, [pc, #284]	; (8001720 <HW_MOT_Init+0x200>)
 8001602:	210e      	movs	r1, #14
 8001604:	2201      	movs	r2, #1
 8001606:	f004 fed7 	bl	80063b8 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = MOT2_IN1_PIN;
 800160a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT2_IN1_GPIO_PORT, &GPIO_InitStructure);
 8001610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001614:	4842      	ldr	r0, [pc, #264]	; (8001720 <HW_MOT_Init+0x200>)
 8001616:	4619      	mov	r1, r3
 8001618:	f004 fe28 	bl	800626c <GPIO_Init>
    GPIO_PinAFConfig(MOT2_IN1_GPIO_PORT, MOT2_IN1_PIN_SOURCE, MOT2_IN1_AF);
 800161c:	4840      	ldr	r0, [pc, #256]	; (8001720 <HW_MOT_Init+0x200>)
 800161e:	210b      	movs	r1, #11
 8001620:	2201      	movs	r2, #1
 8001622:	f004 fec9 	bl	80063b8 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = MOT2_IN2_PIN;
 8001626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT2_IN2_GPIO_PORT, &GPIO_InitStructure);
 800162c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001630:	483b      	ldr	r0, [pc, #236]	; (8001720 <HW_MOT_Init+0x200>)
 8001632:	4619      	mov	r1, r3
 8001634:	f004 fe1a 	bl	800626c <GPIO_Init>
    GPIO_PinAFConfig(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN_SOURCE, MOT2_IN2_AF);
 8001638:	4839      	ldr	r0, [pc, #228]	; (8001720 <HW_MOT_Init+0x200>)
 800163a:	2109      	movs	r1, #9
 800163c:	2201      	movs	r2, #1
 800163e:	f004 febb 	bl	80063b8 <GPIO_PinAFConfig>

    /* Fault is an Open-Drain output so we need a pull-up */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001648:	2301      	movs	r3, #1
 800164a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
 800164e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT_FAULT_GPIO_PORT, &GPIO_InitStructure);
 8001654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001658:	4831      	ldr	r0, [pc, #196]	; (8001720 <HW_MOT_Init+0x200>)
 800165a:	4619      	mov	r1, r3
 800165c:	f004 fe06 	bl	800626c <GPIO_Init>

    /* Enable Timers Clocks from RCC */
    MOT_TIM_CLK_ENABLE();
 8001660:	2001      	movs	r0, #1
 8001662:	2101      	movs	r1, #1
 8001664:	f004 fd44 	bl	80060f0 <RCC_APB2PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = MOT_TIMER_PRESCALER;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = MOT_TIMER_PERIOD;
 8001674:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(MOT_TIM, &TIM_BaseStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4828      	ldr	r0, [pc, #160]	; (8001724 <HW_MOT_Init+0x204>)
 8001684:	4619      	mov	r1, r3
 8001686:	f003 fecb 	bl	8005420 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(MOT_TIM, ENABLE);
 800168a:	4826      	ldr	r0, [pc, #152]	; (8001724 <HW_MOT_Init+0x204>)
 800168c:	2101      	movs	r1, #1
 800168e:	f004 f9fd 	bl	8005a8c <TIM_CtrlPWMOutputs>

    /* Enable Motor Timer */
    TIM_Cmd(MOT_TIM, ENABLE);
 8001692:	4824      	ldr	r0, [pc, #144]	; (8001724 <HW_MOT_Init+0x204>)
 8001694:	2101      	movs	r1, #1
 8001696:	f003 ff3b 	bl	8005510 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4618      	mov	r0, r3
 800169e:	f004 f92f 	bl	8005900 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 80016a2:	2360      	movs	r3, #96	; 0x60
 80016a4:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 80016aa:	2301      	movs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(MOT_TIM, &TIM_OCStruct);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	481b      	ldr	r0, [pc, #108]	; (8001724 <HW_MOT_Init+0x204>)
 80016b6:	4619      	mov	r1, r3
 80016b8:	f003 ff46 	bl	8005548 <TIM_OC1Init>
    TIM_OC2Init(MOT_TIM, &TIM_OCStruct);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4819      	ldr	r0, [pc, #100]	; (8001724 <HW_MOT_Init+0x204>)
 80016c0:	4619      	mov	r1, r3
 80016c2:	f003 ffbb 	bl	800563c <TIM_OC2Init>
    TIM_OC3Init(MOT_TIM, &TIM_OCStruct);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <HW_MOT_Init+0x204>)
 80016ca:	4619      	mov	r1, r3
 80016cc:	f004 f836 	bl	800573c <TIM_OC3Init>
    TIM_OC4Init(MOT_TIM, &TIM_OCStruct);
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4814      	ldr	r0, [pc, #80]	; (8001724 <HW_MOT_Init+0x204>)
 80016d4:	4619      	mov	r1, r3
 80016d6:	f004 f8b1 	bl	800583c <TIM_OC4Init>

    TIM_OC1PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <HW_MOT_Init+0x204>)
 80016dc:	2108      	movs	r1, #8
 80016de:	f004 f969 	bl	80059b4 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 80016e2:	4810      	ldr	r0, [pc, #64]	; (8001724 <HW_MOT_Init+0x204>)
 80016e4:	2108      	movs	r1, #8
 80016e6:	f004 f97f 	bl	80059e8 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <HW_MOT_Init+0x204>)
 80016ec:	2108      	movs	r1, #8
 80016ee:	f004 f997 	bl	8005a20 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <HW_MOT_Init+0x204>)
 80016f4:	2108      	movs	r1, #8
 80016f6:	f004 f9ad 	bl	8005a54 <TIM_OC4PreloadConfig>

    /* Ensure the module is in Reset and Sleep mode by default */
    MOT_SLEEP_WRITE(MOT_SLEEP_ON);
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <HW_MOT_Init+0x200>)
 80016fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001700:	2200      	movs	r2, #0
 8001702:	f004 fe41 	bl	8006388 <GPIO_WriteBit>
    MOT_RESET_WRITE(MOT_RESET_ON);
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <HW_MOT_Init+0x200>)
 8001708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170c:	2200      	movs	r2, #0
 800170e:	f004 fe3b 	bl	8006388 <GPIO_WriteBit>

    /* Setup default bridge current */
    HW_MOT_SetBridgeCurrent(HW_MOT_CURRENT_100);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f808 	bl	8001728 <HW_MOT_SetBridgeCurrent>

}
 8001718:	3740      	adds	r7, #64	; 0x40
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000

08001728 <HW_MOT_SetBridgeCurrent>:

void HW_MOT_SetBridgeCurrent(HW_MOT_CurrentTypeDef current)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    switch(current) {
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d00f      	beq.n	8001758 <HW_MOT_SetBridgeCurrent+0x30>
 8001738:	2b02      	cmp	r3, #2
 800173a:	d019      	beq.n	8001770 <HW_MOT_SetBridgeCurrent+0x48>
 800173c:	2b00      	cmp	r3, #0
 800173e:	d123      	bne.n	8001788 <HW_MOT_SetBridgeCurrent+0x60>
        case HW_MOT_CURRENT_100:
            MOT_I1_WRITE(Bit_RESET);
 8001740:	4819      	ldr	r0, [pc, #100]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	2200      	movs	r2, #0
 8001746:	f004 fe1f 	bl	8006388 <GPIO_WriteBit>
            MOT_I0_WRITE(Bit_RESET);
 800174a:	4817      	ldr	r0, [pc, #92]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 800174c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001750:	2200      	movs	r2, #0
 8001752:	f004 fe19 	bl	8006388 <GPIO_WriteBit>
            break;
 8001756:	e023      	b.n	80017a0 <HW_MOT_SetBridgeCurrent+0x78>

        case HW_MOT_CURRENT_71:
            MOT_I1_WRITE(Bit_RESET);
 8001758:	4813      	ldr	r0, [pc, #76]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	2200      	movs	r2, #0
 800175e:	f004 fe13 	bl	8006388 <GPIO_WriteBit>
            MOT_I0_WRITE(Bit_SET);
 8001762:	4811      	ldr	r0, [pc, #68]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 8001764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001768:	2201      	movs	r2, #1
 800176a:	f004 fe0d 	bl	8006388 <GPIO_WriteBit>
            break;
 800176e:	e017      	b.n	80017a0 <HW_MOT_SetBridgeCurrent+0x78>

        case HW_MOT_CURRENT_38:
            MOT_I1_WRITE(Bit_SET);
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	2201      	movs	r2, #1
 8001776:	f004 fe07 	bl	8006388 <GPIO_WriteBit>
            MOT_I0_WRITE(Bit_RESET);
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 800177c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001780:	2200      	movs	r2, #0
 8001782:	f004 fe01 	bl	8006388 <GPIO_WriteBit>
            break;
 8001786:	e00b      	b.n	80017a0 <HW_MOT_SetBridgeCurrent+0x78>

        default:
        case HW_MOT_CURRENT_0:
            MOT_I1_WRITE(Bit_SET);
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	2201      	movs	r2, #1
 800178e:	f004 fdfb 	bl	8006388 <GPIO_WriteBit>
            MOT_I0_WRITE(Bit_SET);
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HW_MOT_SetBridgeCurrent+0x80>)
 8001794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001798:	2201      	movs	r2, #1
 800179a:	f004 fdf5 	bl	8006388 <GPIO_WriteBit>
            break;
 800179e:	bf00      	nop
    }
}
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <HW_MOT_SetMotorSpeed>:
  * @param  speed: Signed input value, the sign indicates backward or forward rotation
  * @param  fastDecay: If this param is enabled, fast decay mode is applied.
  * @retval None
  */
void HW_MOT_SetMotorSpeed(HW_MOT_ChannelTypeDef channel, int16_t speed, FunctionalState fastDecay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4613      	mov	r3, r2
 80017b4:	4602      	mov	r2, r0
 80017b6:	71fa      	strb	r2, [r7, #7]
 80017b8:	460a      	mov	r2, r1
 80017ba:	80ba      	strh	r2, [r7, #4]
 80017bc:	71bb      	strb	r3, [r7, #6]
    uint16_t xIN1_PWM;
    uint16_t xIN2_PWM;

    /* Clamp speed value to 100% */
    if(speed > MOT_TIMER_PERIOD) {
 80017be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017c2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80017c6:	db03      	blt.n	80017d0 <HW_MOT_SetMotorSpeed+0x24>
        speed = MOT_TIMER_PERIOD;
 80017c8:	f640 739f 	movw	r3, #3999	; 0xf9f
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	e007      	b.n	80017e0 <HW_MOT_SetMotorSpeed+0x34>
    } else if(speed < -MOT_TIMER_PERIOD) {
 80017d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017d4:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 80017d8:	dc02      	bgt.n	80017e0 <HW_MOT_SetMotorSpeed+0x34>
        speed = -MOT_TIMER_PERIOD;
 80017da:	f24f 0361 	movw	r3, #61537	; 0xf061
 80017de:	80bb      	strh	r3, [r7, #4]
    }

    /* Forward rotation */
    if(speed > 0) {
 80017e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dd0d      	ble.n	8001804 <HW_MOT_SetMotorSpeed+0x58>
        if(fastDecay == ENABLE) {
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d104      	bne.n	80017f8 <HW_MOT_SetMotorSpeed+0x4c>
            xIN1_PWM = (uint16_t) speed;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = 0x0000;           /* Meaning constant 0 */
 80017f2:	2300      	movs	r3, #0
 80017f4:	81bb      	strh	r3, [r7, #12]
 80017f6:	e014      	b.n	8001822 <HW_MOT_SetMotorSpeed+0x76>
        } else {
            xIN1_PWM = MOT_TIMER_PERIOD; /* Meaning constant 1 */
 80017f8:	f640 739f 	movw	r3, #3999	; 0xf9f
 80017fc:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = (uint16_t) speed;
 80017fe:	88bb      	ldrh	r3, [r7, #4]
 8001800:	81bb      	strh	r3, [r7, #12]
 8001802:	e00e      	b.n	8001822 <HW_MOT_SetMotorSpeed+0x76>
        }

    /* Reverse rotation */
    } else {
        if(fastDecay == ENABLE) {
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HW_MOT_SetMotorSpeed+0x6a>
            xIN1_PWM = 0x0000;           /* Meaning constant 0 */
 800180a:	2300      	movs	r3, #0
 800180c:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = (uint16_t) -speed;
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	425b      	negs	r3, r3
 8001812:	81bb      	strh	r3, [r7, #12]
 8001814:	e005      	b.n	8001822 <HW_MOT_SetMotorSpeed+0x76>
        } else {
            xIN1_PWM = (uint16_t) -speed;
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	425b      	negs	r3, r3
 800181a:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = MOT_TIMER_PERIOD; /* Meaning constant 1 */
 800181c:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001820:	81bb      	strh	r3, [r7, #12]
        }

    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HW_MOT_SetMotorSpeed+0x82>
 8001828:	2b01      	cmp	r3, #1
 800182a:	d00b      	beq.n	8001844 <HW_MOT_SetMotorSpeed+0x98>
            MOT2_IN2_SET_PULSE(xIN2_PWM);
            break;

        default:
            /* Incorrect channel: do noting */
            break;
 800182c:	e015      	b.n	800185a <HW_MOT_SetMotorSpeed+0xae>
    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
        case HW_MOT_CHANNEL1:
            MOT1_IN1_SET_PULSE(xIN1_PWM);
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <HW_MOT_SetMotorSpeed+0xb4>)
 8001832:	4619      	mov	r1, r3
 8001834:	f004 f8a2 	bl	800597c <TIM_SetCompare3>
            MOT1_IN2_SET_PULSE(xIN2_PWM);
 8001838:	89bb      	ldrh	r3, [r7, #12]
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <HW_MOT_SetMotorSpeed+0xb4>)
 800183c:	4619      	mov	r1, r3
 800183e:	f004 f8ab 	bl	8005998 <TIM_SetCompare4>
            break;
 8001842:	e00a      	b.n	800185a <HW_MOT_SetMotorSpeed+0xae>

        case HW_MOT_CHANNEL2:
            MOT2_IN1_SET_PULSE(xIN1_PWM);
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <HW_MOT_SetMotorSpeed+0xb4>)
 8001848:	4619      	mov	r1, r3
 800184a:	f004 f889 	bl	8005960 <TIM_SetCompare2>
            MOT2_IN2_SET_PULSE(xIN2_PWM);
 800184e:	89bb      	ldrh	r3, [r7, #12]
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <HW_MOT_SetMotorSpeed+0xb4>)
 8001852:	4619      	mov	r1, r3
 8001854:	f004 f876 	bl	8005944 <TIM_SetCompare1>
            break;
 8001858:	bf00      	nop
        default:
            /* Incorrect channel: do noting */
            break;
    }

}
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40010000 	.word	0x40010000

08001864 <HW_MON_Init>:
 */

#include "blueboard.h"

void HW_MON_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    ADC_InitTypeDef  ADC_InitStructure;

    /* Enable ADC clock so that we can talk to it */
    MON_CLK_ENABLE();
 800186a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800186e:	2101      	movs	r1, #1
 8001870:	f004 fc3e 	bl	80060f0 <RCC_APB2PeriphClockCmd>

    /* Enable GPIO clocks */
    ADC_CEL1_GPIO_CLK_ENABLE();
 8001874:	2004      	movs	r0, #4
 8001876:	2101      	movs	r1, #1
 8001878:	f004 fbfe 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_CEL2_GPIO_CLK_ENABLE();
 800187c:	2004      	movs	r0, #4
 800187e:	2101      	movs	r1, #1
 8001880:	f004 fbfa 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_CEL3_GPIO_CLK_ENABLE();
 8001884:	2002      	movs	r0, #2
 8001886:	2101      	movs	r1, #1
 8001888:	f004 fbf6 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_CEL4_GPIO_CLK_ENABLE();
 800188c:	2002      	movs	r0, #2
 800188e:	2101      	movs	r1, #1
 8001890:	f004 fbf2 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_IBAT_GPIO_CLK_ENABLE();
 8001894:	2004      	movs	r0, #4
 8001896:	2101      	movs	r1, #1
 8001898:	f004 fbee 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_IP1_GPIO_CLK_ENABLE();
 800189c:	2004      	movs	r0, #4
 800189e:	2101      	movs	r1, #1
 80018a0:	f004 fbea 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_IP2_GPIO_CLK_ENABLE();
 80018a4:	2001      	movs	r0, #1
 80018a6:	2101      	movs	r1, #1
 80018a8:	f004 fbe6 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_IP3_GPIO_CLK_ENABLE();
 80018ac:	2001      	movs	r0, #1
 80018ae:	2101      	movs	r1, #1
 80018b0:	f004 fbe2 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT1_GPIO_CLK_ENABLE();
 80018b4:	2001      	movs	r0, #1
 80018b6:	2101      	movs	r1, #1
 80018b8:	f004 fbde 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT2_GPIO_CLK_ENABLE();
 80018bc:	2001      	movs	r0, #1
 80018be:	2101      	movs	r1, #1
 80018c0:	f004 fbda 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all Analog channels */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    GPIO_InitStructure.GPIO_Pin = ADC_CEL1_PIN;
 80018dc:	2310      	movs	r3, #16
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL1_GPIO_PORT, &GPIO_InitStructure);
 80018e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e4:	483f      	ldr	r0, [pc, #252]	; (80019e4 <HW_MON_Init+0x180>)
 80018e6:	4619      	mov	r1, r3
 80018e8:	f004 fcc0 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL2_PIN;
 80018ec:	2320      	movs	r3, #32
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL2_GPIO_PORT, &GPIO_InitStructure);
 80018f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f4:	483b      	ldr	r0, [pc, #236]	; (80019e4 <HW_MON_Init+0x180>)
 80018f6:	4619      	mov	r1, r3
 80018f8:	f004 fcb8 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL3_PIN;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL3_GPIO_PORT, &GPIO_InitStructure);
 8001900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001904:	4838      	ldr	r0, [pc, #224]	; (80019e8 <HW_MON_Init+0x184>)
 8001906:	4619      	mov	r1, r3
 8001908:	f004 fcb0 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL4_PIN;
 800190c:	2302      	movs	r3, #2
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL4_GPIO_PORT, &GPIO_InitStructure);
 8001910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001914:	4834      	ldr	r0, [pc, #208]	; (80019e8 <HW_MON_Init+0x184>)
 8001916:	4619      	mov	r1, r3
 8001918:	f004 fca8 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IBAT_PIN;
 800191c:	2304      	movs	r3, #4
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IBAT_GPIO_PORT, &GPIO_InitStructure);
 8001920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001924:	482f      	ldr	r0, [pc, #188]	; (80019e4 <HW_MON_Init+0x180>)
 8001926:	4619      	mov	r1, r3
 8001928:	f004 fca0 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP1_PIN;
 800192c:	2308      	movs	r3, #8
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP1_GPIO_PORT, &GPIO_InitStructure);
 8001930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001934:	482b      	ldr	r0, [pc, #172]	; (80019e4 <HW_MON_Init+0x180>)
 8001936:	4619      	mov	r1, r3
 8001938:	f004 fc98 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP2_PIN;
 800193c:	2310      	movs	r3, #16
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP2_GPIO_PORT, &GPIO_InitStructure);
 8001940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001944:	4829      	ldr	r0, [pc, #164]	; (80019ec <HW_MON_Init+0x188>)
 8001946:	4619      	mov	r1, r3
 8001948:	f004 fc90 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP3_PIN;
 800194c:	2320      	movs	r3, #32
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP3_GPIO_PORT, &GPIO_InitStructure);
 8001950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001954:	4825      	ldr	r0, [pc, #148]	; (80019ec <HW_MON_Init+0x188>)
 8001956:	4619      	mov	r1, r3
 8001958:	f004 fc88 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT1_PIN;
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT1_GPIO_PORT, &GPIO_InitStructure);
 8001960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001964:	4821      	ldr	r0, [pc, #132]	; (80019ec <HW_MON_Init+0x188>)
 8001966:	4619      	mov	r1, r3
 8001968:	f004 fc80 	bl	800626c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT2_PIN;
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT2_GPIO_PORT, &GPIO_InitStructure);
 8001970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <HW_MON_Init+0x188>)
 8001976:	4619      	mov	r1, r3
 8001978:	f004 fc78 	bl	800626c <GPIO_Init>

    /* IMPORTANT: populate default values before use */
    ADC_CommonStructInit(&ADC_CommonInitStruct);
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4618      	mov	r0, r3
 8001982:	f004 fe0d 	bl	80065a0 <ADC_CommonStructInit>
    ADC_StructInit(&ADC_InitStructure);
 8001986:	463b      	mov	r3, r7
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fdc3 	bl	8006514 <ADC_StructInit>

    /* PCLK2 is the APB2 clock (96 MHz)
     * ADCCLK = PCLK2/8 = 96/8 = 12 MHz */
    ADC_CommonInitStruct.ADC_Prescaler          = ADC_Prescaler_Div8;
 800198e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001992:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStruct.ADC_Mode               = ADC_Mode_Independent;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    ADC_CommonInitStruct.ADC_DMAAccessMode      = ADC_DMAAccessMode_Disabled;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStruct.ADC_TwoSamplingDelay   = ADC_TwoSamplingDelay_5Cycles;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInit(&ADC_CommonInitStruct);
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 fdd3 	bl	8006550 <ADC_CommonInit>

    /* Actual ADC Configuration */
    ADC_InitStructure.ADC_Resolution            = ADC_Resolution_12b;
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
    ADC_InitStructure.ADC_ScanConvMode          = DISABLE;//DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	713b      	strb	r3, [r7, #4]
    ADC_InitStructure.ADC_ContinuousConvMode    = DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	717b      	strb	r3, [r7, #5]
    ADC_InitStructure.ADC_ExternalTrigConv      = ADC_Software_Start;//// //
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HW_MON_Init+0x18c>)
 80019b8:	60fb      	str	r3, [r7, #12]
    ADC_InitStructure.ADC_ExternalTrigConvEdge  = ADC_ExternalTrigConvEdge_None;//// //
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
    ADC_InitStructure.ADC_DataAlign             = ADC_DataAlign_Right;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_NbrOfConversion       = 1;//MONn;
 80019c2:	2301      	movs	r3, #1
 80019c4:	753b      	strb	r3, [r7, #20]
    ADC_Init(MON_ADC, &ADC_InitStructure);
 80019c6:	463b      	mov	r3, r7
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <HW_MON_Init+0x190>)
 80019ca:	4619      	mov	r1, r3
 80019cc:	f004 fd4e 	bl	800646c <ADC_Init>

    /* Enable Temperature and Internal VREF channels
     * VBAT Conversion cannot be activated at the same time (channel is shared)
     */
    ADC_TempSensorVrefintCmd(ENABLE);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f004 fe17 	bl	8006604 <ADC_TempSensorVrefintCmd>

    /* Switch ADC ON */
    ADC_Cmd(MON_ADC, ENABLE);
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <HW_MON_Init+0x190>)
 80019d8:	2101      	movs	r1, #1
 80019da:	f004 fdf7 	bl	80065cc <ADC_Cmd>

}
 80019de:	3730      	adds	r7, #48	; 0x30
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020000 	.word	0x40020000
 80019f0:	0f000001 	.word	0x0f000001
 80019f4:	40012000 	.word	0x40012000

080019f8 <HW_MON_ReadChannel>:

uint16_t HW_MON_ReadChannel(uint8_t channel)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
    /* Configure channel to acquire */
    ADC_RegularChannelConfig(MON_ADC, channel, 1, ADC_SampleTime_480Cycles);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <HW_MON_ReadChannel+0x40>)
 8001a06:	4619      	mov	r1, r3
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	f004 fe16 	bl	800663c <ADC_RegularChannelConfig>

    /* Start conversion and wait for completion */
    ADC_SoftwareStartConv(MON_ADC);
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HW_MON_ReadChannel+0x40>)
 8001a12:	f004 fed7 	bl	80067c4 <ADC_SoftwareStartConv>
    while(ADC_GetFlagStatus(MON_ADC, ADC_FLAG_EOC) == RESET);
 8001a16:	bf00      	nop
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <HW_MON_ReadChannel+0x40>)
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	f004 fef0 	bl	8006800 <ADC_GetFlagStatus>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f8      	beq.n	8001a18 <HW_MON_ReadChannel+0x20>

    /* Get converted value */
    return ADC_GetConversionValue(MON_ADC);
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <HW_MON_ReadChannel+0x40>)
 8001a28:	f004 fedc 	bl	80067e4 <ADC_GetConversionValue>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012000 	.word	0x40012000

08001a3c <HW_MON_ConvertRawValueToMv>:

uint32_t HW_MON_ConvertRawValueToMv(const uint16_t rawValue)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
    return (((uint32_t) rawValue) * 1000) / ADC_STEPS_PER_VOLT;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4c:	fb02 f203 	mul.w	r2, r2, r3
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HW_MON_ConvertRawValueToMv+0x30>)
 8001a52:	fba3 1302 	umull	r1, r3, r3, r2
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	0a9b      	lsrs	r3, r3, #10
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	80180181 	.word	0x80180181

08001a70 <HW_LED_Init>:
  * @brief  Configure LEDs GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_LED_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    LEDR_GPIO_CLK_ENABLE();
 8001a76:	2001      	movs	r0, #1
 8001a78:	2101      	movs	r1, #1
 8001a7a:	f004 fafd 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    LEDG_GPIO_CLK_ENABLE();
 8001a7e:	2008      	movs	r0, #8
 8001a80:	2101      	movs	r1, #1
 8001a82:	f004 faf9 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    LEDB_GPIO_CLK_ENABLE();
 8001a86:	2008      	movs	r0, #8
 8001a88:	2101      	movs	r1, #1
 8001a8a:	f004 faf5 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all LEDs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a92:	2300      	movs	r3, #0
 8001a94:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = LEDR_PIN;
 8001a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa2:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDR_GPIO_PORT, &GPIO_InitStructure);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4812      	ldr	r0, [pc, #72]	; (8001af0 <HW_LED_Init+0x80>)
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f004 fbdf 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDG_PIN;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDG_GPIO_PORT, &GPIO_InitStructure);
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <HW_LED_Init+0x84>)
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f004 fbd8 	bl	800626c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDB_PIN;
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDB_GPIO_PORT, &GPIO_InitStructure);
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	480c      	ldr	r0, [pc, #48]	; (8001af4 <HW_LED_Init+0x84>)
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f004 fbd1 	bl	800626c <GPIO_Init>

    /* Default state: LEDs OFF */
    LEDR_WRITE(LEDx_OFF);
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HW_LED_Init+0x80>)
 8001acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f004 fc59 	bl	8006388 <GPIO_WriteBit>
    LEDG_WRITE(LEDx_OFF);
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <HW_LED_Init+0x84>)
 8001ad8:	2104      	movs	r1, #4
 8001ada:	2201      	movs	r2, #1
 8001adc:	f004 fc54 	bl	8006388 <GPIO_WriteBit>
    LEDB_WRITE(LEDx_OFF);
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <HW_LED_Init+0x84>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f004 fc4f 	bl	8006388 <GPIO_WriteBit>
}
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <HW_LED_SetColor>:
  * @brief  Setup a new RGB Led color
  * @param  color: Color to setup
  * @retval None
  */
void HW_LED_SetColor(HW_LED_ColorTypeDef color)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
    switch(color)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	f200 808b 	bhi.w	8001c22 <HW_LED_SetColor+0x12a>
 8001b0c:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <HW_LED_SetColor+0x1c>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b35 	.word	0x08001b35
 8001b18:	08001b57 	.word	0x08001b57
 8001b1c:	08001b79 	.word	0x08001b79
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001bbd 	.word	0x08001bbd
 8001b28:	08001c23 	.word	0x08001c23
 8001b2c:	08001bdf 	.word	0x08001bdf
 8001b30:	08001c01 	.word	0x08001c01
    {
    case HW_LED_RED:
        LEDR_WRITE(LEDx_ON);
 8001b34:	4845      	ldr	r0, [pc, #276]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f004 fc24 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8001b40:	4843      	ldr	r0, [pc, #268]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001b42:	2104      	movs	r1, #4
 8001b44:	2201      	movs	r2, #1
 8001b46:	f004 fc1f 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8001b4a:	4841      	ldr	r0, [pc, #260]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f004 fc1a 	bl	8006388 <GPIO_WriteBit>
        break;
 8001b54:	e076      	b.n	8001c44 <HW_LED_SetColor+0x14c>
    case HW_LED_GREEN:
        LEDR_WRITE(LEDx_OFF);
 8001b56:	483d      	ldr	r0, [pc, #244]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f004 fc13 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8001b62:	483b      	ldr	r0, [pc, #236]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001b64:	2104      	movs	r1, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	f004 fc0e 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8001b6c:	4838      	ldr	r0, [pc, #224]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	2201      	movs	r2, #1
 8001b72:	f004 fc09 	bl	8006388 <GPIO_WriteBit>
        break;
 8001b76:	e065      	b.n	8001c44 <HW_LED_SetColor+0x14c>
    case HW_LED_BLUE:
        LEDR_WRITE(LEDx_OFF);
 8001b78:	4834      	ldr	r0, [pc, #208]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f004 fc02 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8001b84:	4832      	ldr	r0, [pc, #200]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001b86:	2104      	movs	r1, #4
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f004 fbfd 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8001b8e:	4830      	ldr	r0, [pc, #192]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	2200      	movs	r2, #0
 8001b94:	f004 fbf8 	bl	8006388 <GPIO_WriteBit>
        break;
 8001b98:	e054      	b.n	8001c44 <HW_LED_SetColor+0x14c>
    case HW_LED_CYAN:
        LEDR_WRITE(LEDx_OFF);
 8001b9a:	482c      	ldr	r0, [pc, #176]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f004 fbf1 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8001ba6:	482a      	ldr	r0, [pc, #168]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001ba8:	2104      	movs	r1, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	f004 fbec 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8001bb0:	4827      	ldr	r0, [pc, #156]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f004 fbe7 	bl	8006388 <GPIO_WriteBit>
        break;
 8001bba:	e043      	b.n	8001c44 <HW_LED_SetColor+0x14c>
    case HW_LED_YELLOW:
        LEDR_WRITE(LEDx_ON);
 8001bbc:	4823      	ldr	r0, [pc, #140]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f004 fbe0 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8001bc8:	4821      	ldr	r0, [pc, #132]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001bca:	2104      	movs	r1, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f004 fbdb 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8001bd2:	481f      	ldr	r0, [pc, #124]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f004 fbd6 	bl	8006388 <GPIO_WriteBit>
        break;
 8001bdc:	e032      	b.n	8001c44 <HW_LED_SetColor+0x14c>
    case HW_LED_MAGENTA:
        LEDR_WRITE(LEDx_ON);
 8001bde:	481b      	ldr	r0, [pc, #108]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be4:	2200      	movs	r2, #0
 8001be6:	f004 fbcf 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8001bea:	4819      	ldr	r0, [pc, #100]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001bec:	2104      	movs	r1, #4
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f004 fbca 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8001bf4:	4816      	ldr	r0, [pc, #88]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f004 fbc5 	bl	8006388 <GPIO_WriteBit>
        break;
 8001bfe:	e021      	b.n	8001c44 <HW_LED_SetColor+0x14c>
    case HW_LED_WHITE:
        LEDR_WRITE(LEDx_ON);
 8001c00:	4812      	ldr	r0, [pc, #72]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	2200      	movs	r2, #0
 8001c08:	f004 fbbe 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8001c0c:	4810      	ldr	r0, [pc, #64]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001c0e:	2104      	movs	r1, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	f004 fbb9 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8001c16:	480e      	ldr	r0, [pc, #56]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f004 fbb4 	bl	8006388 <GPIO_WriteBit>
        break;
 8001c20:	e010      	b.n	8001c44 <HW_LED_SetColor+0x14c>

    default:
    case HW_LED_OFF:
        LEDR_WRITE(LEDx_OFF);
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <HW_LED_SetColor+0x154>)
 8001c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f004 fbad 	bl	8006388 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8001c2e:	4808      	ldr	r0, [pc, #32]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001c30:	2104      	movs	r1, #4
 8001c32:	2201      	movs	r2, #1
 8001c34:	f004 fba8 	bl	8006388 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HW_LED_SetColor+0x158>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f004 fba3 	bl	8006388 <GPIO_WriteBit>
        break;
 8001c42:	bf00      	nop

    }

}
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020c00 	.word	0x40020c00

08001c54 <HW_HMI_Init>:
 */

#include "blueboard.h"

void HW_HMI_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef SPI_InitStruct;

    /* Enable GPIOs Clock */
    HMI_CSN_GPIO_CLK_ENABLE();
 8001c5a:	2010      	movs	r0, #16
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	f004 fa0b 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    HMI_SCK_GPIO_CLK_ENABLE();
 8001c62:	2010      	movs	r0, #16
 8001c64:	2101      	movs	r1, #1
 8001c66:	f004 fa07 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    HMI_MOSI_GPIO_CLK_ENABLE();
 8001c6a:	2010      	movs	r0, #16
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	f004 fa03 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    HMI_MISO_GPIO_CLK_ENABLE();
 8001c72:	2010      	movs	r0, #16
 8001c74:	2101      	movs	r1, #1
 8001c76:	f004 f9ff 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_IN_GPIO_CLK_ENABLE();
 8001c7a:	2010      	movs	r0, #16
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	f004 f9fb 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_OUT_GPIO_CLK_ENABLE();
 8001c82:	2004      	movs	r0, #4
 8001c84:	2101      	movs	r1, #1
 8001c86:	f004 f9f7 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Enable Control Interface SPI clock */
    HMI_CLK_ENABLE();
 8001c8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c8e:	2101      	movs	r1, #1
 8001c90:	f004 fa2e 	bl	80060f0 <RCC_APB2PeriphClockCmd>

    /* Configure HMI_CSN as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 8001c94:	2310      	movs	r3, #16
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 8001cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb4:	4842      	ldr	r0, [pc, #264]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f004 fad8 	bl	800626c <GPIO_Init>

    /* Configure HMI_SCK as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_SCK_PIN;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8001cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc4:	483e      	ldr	r0, [pc, #248]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f004 fad0 	bl	800626c <GPIO_Init>

    /* Configure HMI_MOSI as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MOSI_PIN;
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8001cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd4:	483a      	ldr	r0, [pc, #232]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f004 fac8 	bl	800626c <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MISO_PIN;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8001ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce4:	4836      	ldr	r0, [pc, #216]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f004 fac0 	bl	800626c <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(HMI_SCK_GPIO_PORT,   HMI_SCK_PIN_SOURCE,   HMI_SCK_AF);
 8001cec:	4834      	ldr	r0, [pc, #208]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001cee:	2102      	movs	r1, #2
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f004 fb61 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MOSI_GPIO_PORT,  HMI_MOSI_PIN_SOURCE,  HMI_MOSI_AF);
 8001cf6:	4832      	ldr	r0, [pc, #200]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001cf8:	2106      	movs	r1, #6
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	f004 fb5c 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MISO_GPIO_PORT,  HMI_MISO_PIN_SOURCE,  HMI_MISO_AF);
 8001d00:	482f      	ldr	r0, [pc, #188]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001d02:	2105      	movs	r1, #5
 8001d04:	2205      	movs	r2, #5
 8001d06:	f004 fb57 	bl	80063b8 <GPIO_PinAFConfig>

    /* Configure HMI_CSN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 8001d14:	2303      	movs	r3, #3
 8001d16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 8001d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d24:	4826      	ldr	r0, [pc, #152]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001d26:	4619      	mov	r1, r3
 8001d28:	f004 faa0 	bl	800626c <GPIO_Init>

    /* Configure HMI_IRQ_IN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_IN_PIN;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; /* "IN" for HMI, "OUT" for master (us) */
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_IN_GPIO_PORT, &GPIO_InitStructure);
 8001d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d40:	481f      	ldr	r0, [pc, #124]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001d42:	4619      	mov	r1, r3
 8001d44:	f004 fa92 	bl	800626c <GPIO_Init>

    /* Configure HMI_IRQ_OUT as Digital Input */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_OUT_PIN;
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; /* "OUT" for HMI, "IN" for master (us) */
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_OUT_GPIO_PORT, &GPIO_InitStructure);
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <HW_HMI_Init+0x170>)
 8001d60:	4619      	mov	r1, r3
 8001d62:	f004 fa83 	bl	800626c <GPIO_Init>

    /* Default SPI Configuration */
    SPI_StructInit(&SPI_InitStruct);
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fef1 	bl	8005b50 <SPI_StructInit>

    /* Configure custom fields */
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8001d6e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d72:	60bb      	str	r3, [r7, #8]
    SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; /* TBC */
 8001d78:	2320      	movs	r3, #32
 8001d7a:	61fb      	str	r3, [r7, #28]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
 8001d7c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d80:	60fb      	str	r3, [r7, #12]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // Internal NSS mgmt and pull internal NSS high;
 8001d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8e:	61bb      	str	r3, [r7, #24]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]

    /* Configure SPI module */
    SPI_Init(HMI_COM, &SPI_InitStruct);
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <HW_HMI_Init+0x174>)
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f003 feff 	bl	8005b9c <SPI_Init>
    SPI_SSOutputCmd(HMI_COM, ENABLE);
 8001d9e:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <HW_HMI_Init+0x174>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	f003 ff6b 	bl	8005c7c <SPI_SSOutputCmd>

    /* Enable SPI module */
    HMI_CSN_WRITE(HMI_FRAME_IDLE);
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <HW_HMI_Init+0x16c>)
 8001da8:	2110      	movs	r1, #16
 8001daa:	2201      	movs	r2, #1
 8001dac:	f004 faec 	bl	8006388 <GPIO_WriteBit>
    SPI_Cmd(HMI_COM, ENABLE);
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HW_HMI_Init+0x174>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	f003 ff46 	bl	8005c44 <SPI_Cmd>

}
 8001db8:	3730      	adds	r7, #48	; 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40013400 	.word	0x40013400

08001dcc <HW_HMI_TxRx>:

uint16_t HW_HMI_TxRx(uint16_t value)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
    /* Send a new 16 bits word */
    HMI_CSN_WRITE(HMI_FRAME_ACTIVE);
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <HW_HMI_TxRx+0x68>)
 8001dd8:	2110      	movs	r1, #16
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f004 fad4 	bl	8006388 <GPIO_WriteBit>
    SPI_I2S_SendData16(HMI_COM, value);
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4815      	ldr	r0, [pc, #84]	; (8001e38 <HW_HMI_TxRx+0x6c>)
 8001de4:	4619      	mov	r1, r3
 8001de6:	f003 ff65 	bl	8005cb4 <SPI_I2S_SendData16>

    /* Wait until transmit complete */
    while(SPI_I2S_GetFlagStatus(HMI_COM, SPI_I2S_FLAG_TXE) == RESET);
 8001dea:	bf00      	nop
 8001dec:	4812      	ldr	r0, [pc, #72]	; (8001e38 <HW_HMI_TxRx+0x6c>)
 8001dee:	2102      	movs	r1, #2
 8001df0:	f003 ff7c 	bl	8005cec <SPI_I2S_GetFlagStatus>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f8      	beq.n	8001dec <HW_HMI_TxRx+0x20>

    /* Wait until receive complete */
    while(SPI_I2S_GetFlagStatus(HMI_COM, SPI_I2S_FLAG_RXNE) == RESET);
 8001dfa:	bf00      	nop
 8001dfc:	480e      	ldr	r0, [pc, #56]	; (8001e38 <HW_HMI_TxRx+0x6c>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	f003 ff74 	bl	8005cec <SPI_I2S_GetFlagStatus>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f8      	beq.n	8001dfc <HW_HMI_TxRx+0x30>

    /* Wait until SPI is not busy anymore */
    while(SPI_I2S_GetFlagStatus(HMI_COM, SPI_I2S_FLAG_BSY) == SET);
 8001e0a:	bf00      	nop
 8001e0c:	480a      	ldr	r0, [pc, #40]	; (8001e38 <HW_HMI_TxRx+0x6c>)
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	f003 ff6c 	bl	8005cec <SPI_I2S_GetFlagStatus>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d0f8      	beq.n	8001e0c <HW_HMI_TxRx+0x40>

    HMI_CSN_WRITE(HMI_FRAME_IDLE);
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HW_HMI_TxRx+0x68>)
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f004 fab2 	bl	8006388 <GPIO_WriteBit>

    /* Return 16 bit received word */
    return SPI_I2S_ReceiveData16(HMI_COM);
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <HW_HMI_TxRx+0x6c>)
 8001e26:	f003 ff53 	bl	8005cd0 <SPI_I2S_ReceiveData16>
 8001e2a:	4603      	mov	r3, r0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013400 	.word	0x40013400

08001e3c <HW_ENC_Init>:

#include "blueboard.h"


void HW_ENC_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Enable GPIO Clocks */
    ENC1_A_GPIO_CLK_ENABLE();
 8001e42:	2002      	movs	r0, #2
 8001e44:	2101      	movs	r1, #1
 8001e46:	f004 f917 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ENC1_B_GPIO_CLK_ENABLE();
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	f004 f913 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ENC2_A_GPIO_CLK_ENABLE();
 8001e52:	2002      	movs	r0, #2
 8001e54:	2101      	movs	r1, #1
 8001e56:	f004 f90f 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ENC2_B_GPIO_CLK_ENABLE();
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	f004 f90b 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Configure GPIOs */
    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8001e62:	2302      	movs	r3, #2
 8001e64:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 8001e66:	2300      	movs	r3, #0
 8001e68:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	717b      	strb	r3, [r7, #5]

    GPIO_InitStruct.GPIO_Pin = ENC1_A_PIN;
 8001e72:	2310      	movs	r3, #16
 8001e74:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_A_GPIO_PORT, ENC1_A_PIN_SOURCE, ENC1_A_AF);
 8001e76:	482c      	ldr	r0, [pc, #176]	; (8001f28 <HW_ENC_Init+0xec>)
 8001e78:	2104      	movs	r1, #4
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f004 fa9c 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_A_GPIO_PORT, &GPIO_InitStruct);
 8001e80:	463b      	mov	r3, r7
 8001e82:	4829      	ldr	r0, [pc, #164]	; (8001f28 <HW_ENC_Init+0xec>)
 8001e84:	4619      	mov	r1, r3
 8001e86:	f004 f9f1 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC1_B_PIN;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_B_GPIO_PORT, ENC1_B_PIN_SOURCE, ENC1_B_AF);
 8001e8e:	4826      	ldr	r0, [pc, #152]	; (8001f28 <HW_ENC_Init+0xec>)
 8001e90:	2105      	movs	r1, #5
 8001e92:	2202      	movs	r2, #2
 8001e94:	f004 fa90 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_B_GPIO_PORT, &GPIO_InitStruct);
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4823      	ldr	r0, [pc, #140]	; (8001f28 <HW_ENC_Init+0xec>)
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f004 f9e5 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_A_PIN;
 8001ea2:	2340      	movs	r3, #64	; 0x40
 8001ea4:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_A_GPIO_PORT, ENC2_A_PIN_SOURCE, ENC2_A_AF);
 8001ea6:	4820      	ldr	r0, [pc, #128]	; (8001f28 <HW_ENC_Init+0xec>)
 8001ea8:	2106      	movs	r1, #6
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f004 fa84 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_A_GPIO_PORT, &GPIO_InitStruct);
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	481d      	ldr	r0, [pc, #116]	; (8001f28 <HW_ENC_Init+0xec>)
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f004 f9d9 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_B_PIN;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_B_GPIO_PORT, ENC2_B_PIN_SOURCE, ENC2_B_AF);
 8001ebe:	481a      	ldr	r0, [pc, #104]	; (8001f28 <HW_ENC_Init+0xec>)
 8001ec0:	2107      	movs	r1, #7
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f004 fa78 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_B_GPIO_PORT, &GPIO_InitStruct);
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4817      	ldr	r0, [pc, #92]	; (8001f28 <HW_ENC_Init+0xec>)
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f004 f9cd 	bl	800626c <GPIO_Init>

    /* Enable Quadrature Encoder timer clocks */
    ENC1_TIM_CLK_ENABLE();
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	f004 f8ed 	bl	80060b4 <RCC_APB1PeriphClockCmd>
    ENC2_TIM_CLK_ENABLE();
 8001eda:	2004      	movs	r0, #4
 8001edc:	2101      	movs	r1, #1
 8001ede:	f004 f8e9 	bl	80060b4 <RCC_APB1PeriphClockCmd>

    /* Configure Quadrature Encoder Timers */
    TIM_EncoderInterfaceConfig(ENC1_TIM,
 8001ee2:	4812      	ldr	r0, [pc, #72]	; (8001f2c <HW_ENC_Init+0xf0>)
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f003 fdeb 	bl	8005ac4 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC1_TIM, 0xFFFF);
 8001eee:	480f      	ldr	r0, [pc, #60]	; (8001f2c <HW_ENC_Init+0xf0>)
 8001ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ef4:	f003 fafe 	bl	80054f4 <TIM_SetAutoreload>

    TIM_EncoderInterfaceConfig(ENC2_TIM,
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <HW_ENC_Init+0xf4>)
 8001efa:	2103      	movs	r1, #3
 8001efc:	2200      	movs	r2, #0
 8001efe:	2300      	movs	r3, #0
 8001f00:	f003 fde0 	bl	8005ac4 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC2_TIM, 0xFFFF);
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <HW_ENC_Init+0xf4>)
 8001f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f0a:	f003 faf3 	bl	80054f4 <TIM_SetAutoreload>

    /* Cleanup timers */
    HW_ENC_ResetChannels();
 8001f0e:	f000 f82d 	bl	8001f6c <HW_ENC_ResetChannels>

    /* Enable Quadrature Encoders */
    TIM_Cmd(ENC1_TIM, ENABLE);
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <HW_ENC_Init+0xf0>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	f003 fafb 	bl	8005510 <TIM_Cmd>
    TIM_Cmd(ENC2_TIM, ENABLE);
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HW_ENC_Init+0xf4>)
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	f003 faf7 	bl	8005510 <TIM_Cmd>

}
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800

08001f34 <HW_ENC_GetChannel>:

int32_t HW_ENC_GetChannel(HW_ENC_ChannelTypeDef channel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
    switch(channel)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HW_ENC_GetChannel+0x16>
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d003      	beq.n	8001f50 <HW_ENC_GetChannel+0x1c>
 8001f48:	e005      	b.n	8001f56 <HW_ENC_GetChannel+0x22>
    {
    case HW_ENC_CHANNEL1:
        return (int32_t) ENC1_TIM->CNT;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HW_ENC_GetChannel+0x30>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	e003      	b.n	8001f58 <HW_ENC_GetChannel+0x24>
        break;

    case HW_ENC_CHANNEL2:
        return (int32_t) ENC2_TIM->CNT;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HW_ENC_GetChannel+0x34>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	e000      	b.n	8001f58 <HW_ENC_GetChannel+0x24>
        break;

    default:
        /* Error */
        return 0;
 8001f56:	2300      	movs	r3, #0
        break;
    }

}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800

08001f6c <HW_ENC_ResetChannels>:

void HW_ENC_ResetChannels(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
    ENC1_TIM->CNT = 0x0000 ;
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HW_ENC_ResetChannels+0x18>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
    ENC2_TIM->CNT = 0x0000 ;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HW_ENC_ResetChannels+0x1c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800

08001f8c <HW_DBG_Init>:
  * @brief  Initialize the Debug UART
  * @param  None
  * @retval None
  */
void HW_DBG_Init(USART_InitTypeDef * USART_InitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable GPIOs Clock */
    DBG_TX_GPIO_CLK_ENABLE();
 8001f94:	2001      	movs	r0, #1
 8001f96:	2101      	movs	r1, #1
 8001f98:	f004 f86e 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    DBG_RX_GPIO_CLK_ENABLE();
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	f004 f86a 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    DBG_CTS_GPIO_CLK_ENABLE();
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	f004 f866 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    DBG_RTS_GPIO_CLK_ENABLE();
 8001fac:	2001      	movs	r0, #1
 8001fae:	2101      	movs	r1, #1
 8001fb0:	f004 f862 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    /* Enable Debug USART clock */
    DBG_CLK_ENABLE();
 8001fb4:	2010      	movs	r0, #16
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	f004 f89a 	bl	80060f0 <RCC_APB2PeriphClockCmd>

    /* Configure USART TX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_TX_PIN;
 8001fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DBG_TX_GPIO_PORT, &GPIO_InitStructure);
 8001fce:	f107 0318 	add.w	r3, r7, #24
 8001fd2:	4824      	ldr	r0, [pc, #144]	; (8002064 <HW_DBG_Init+0xd8>)
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f004 f949 	bl	800626c <GPIO_Init>

    /* Configure USART RX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RX_PIN;
 8001fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RX_GPIO_PORT, &GPIO_InitStructure);
 8001fe0:	f107 0318 	add.w	r3, r7, #24
 8001fe4:	481f      	ldr	r0, [pc, #124]	; (8002064 <HW_DBG_Init+0xd8>)
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f004 f940 	bl	800626c <GPIO_Init>

    /* Configure USART CTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_CTS_PIN;
 8001fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_CTS_GPIO_PORT, &GPIO_InitStructure);
 8001ff2:	f107 0318 	add.w	r3, r7, #24
 8001ff6:	481b      	ldr	r0, [pc, #108]	; (8002064 <HW_DBG_Init+0xd8>)
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f004 f937 	bl	800626c <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RTS_PIN;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RTS_GPIO_PORT, &GPIO_InitStructure);
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	4816      	ldr	r0, [pc, #88]	; (8002064 <HW_DBG_Init+0xd8>)
 800200a:	4619      	mov	r1, r3
 800200c:	f004 f92e 	bl	800626c <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(DBG_TX_GPIO_PORT,  DBG_TX_PIN_SOURCE,  DBG_TX_AF);
 8002010:	4814      	ldr	r0, [pc, #80]	; (8002064 <HW_DBG_Init+0xd8>)
 8002012:	2109      	movs	r1, #9
 8002014:	2207      	movs	r2, #7
 8002016:	f004 f9cf 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RX_GPIO_PORT,  DBG_RX_PIN_SOURCE,  DBG_RX_AF);
 800201a:	4812      	ldr	r0, [pc, #72]	; (8002064 <HW_DBG_Init+0xd8>)
 800201c:	210a      	movs	r1, #10
 800201e:	2207      	movs	r2, #7
 8002020:	f004 f9ca 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_CTS_GPIO_PORT, DBG_CTS_PIN_SOURCE, DBG_CTS_AF);
 8002024:	480f      	ldr	r0, [pc, #60]	; (8002064 <HW_DBG_Init+0xd8>)
 8002026:	210b      	movs	r1, #11
 8002028:	2207      	movs	r2, #7
 800202a:	f004 f9c5 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RTS_GPIO_PORT, DBG_RTS_PIN_SOURCE, DBG_RTS_AF);
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <HW_DBG_Init+0xd8>)
 8002030:	210c      	movs	r1, #12
 8002032:	2207      	movs	r2, #7
 8002034:	f004 f9c0 	bl	80063b8 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DBG_COM, USART_InitStruct);
 8002038:	480b      	ldr	r0, [pc, #44]	; (8002068 <HW_DBG_Init+0xdc>)
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	f003 f8a6 	bl	800518c <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	4618      	mov	r0, r3
 8002046:	f003 f97f 	bl	8005348 <USART_ClockStructInit>
    USART_ClockInit(DBG_COM, &USART_ClockInitStruct);
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <HW_DBG_Init+0xdc>)
 8002050:	4619      	mov	r1, r3
 8002052:	f003 f955 	bl	8005300 <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DBG_COM, ENABLE);
 8002056:	4804      	ldr	r0, [pc, #16]	; (8002068 <HW_DBG_Init+0xdc>)
 8002058:	2101      	movs	r1, #1
 800205a:	f003 f98b 	bl	8005374 <USART_Cmd>

}
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020000 	.word	0x40020000
 8002068:	40011000 	.word	0x40011000

0800206c <HW_DBG_Put>:
  * @brief  Send a byte through debug UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DBG_Put(uint8_t ch)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DBG_COM, (uint8_t) ch);
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <HW_DBG_Put+0x2c>)
 800207c:	4619      	mov	r1, r3
 800207e:	f003 f995 	bl	80053ac <USART_SendData>
      while(USART_GetFlagStatus(DBG_COM, USART_FLAG_TC) == RESET);
 8002082:	bf00      	nop
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <HW_DBG_Put+0x2c>)
 8002086:	2140      	movs	r1, #64	; 0x40
 8002088:	f003 f9b0 	bl	80053ec <USART_GetFlagStatus>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f8      	beq.n	8002084 <HW_DBG_Put+0x18>
}
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40011000 	.word	0x40011000

0800209c <HW_DBG_Get>:
  * @brief  Receive a byte from debug UART
  * @param  None
  * @retval Received byte
  */
uint8_t HW_DBG_Get(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
     while (USART_GetFlagStatus(DBG_COM, USART_FLAG_RXNE) == RESET);
 80020a0:	bf00      	nop
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <HW_DBG_Get+0x24>)
 80020a4:	2120      	movs	r1, #32
 80020a6:	f003 f9a1 	bl	80053ec <USART_GetFlagStatus>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f8      	beq.n	80020a2 <HW_DBG_Get+0x6>
        return (uint8_t) USART_ReceiveData(DBG_COM);
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <HW_DBG_Get+0x24>)
 80020b2:	f003 f98b 	bl	80053cc <USART_ReceiveData>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b2db      	uxtb	r3, r3
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40011000 	.word	0x40011000

080020c4 <HW_ASV_Init>:


#include "blueboard.h"

void HW_ASV_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b090      	sub	sp, #64	; 0x40
 80020c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    TIM_OCInitTypeDef TIM_OCStruct;

    /* Enable ASV GPIO Clocks */
    ASV1_PWM_GPIO_CLK_ENABLE();
 80020ca:	2004      	movs	r0, #4
 80020cc:	2101      	movs	r1, #1
 80020ce:	f003 ffd3 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV2_PWM_GPIO_CLK_ENABLE();
 80020d2:	2004      	movs	r0, #4
 80020d4:	2101      	movs	r1, #1
 80020d6:	f003 ffcf 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV3_PWM_GPIO_CLK_ENABLE();
 80020da:	2004      	movs	r0, #4
 80020dc:	2101      	movs	r1, #1
 80020de:	f003 ffcb 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV4_PWM_GPIO_CLK_ENABLE();
 80020e2:	2004      	movs	r0, #4
 80020e4:	2101      	movs	r1, #1
 80020e6:	f003 ffc7 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV5_PWM_GPIO_CLK_ENABLE();
 80020ea:	2001      	movs	r0, #1
 80020ec:	2101      	movs	r1, #1
 80020ee:	f003 ffc3 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV6_PWM_GPIO_CLK_ENABLE();
 80020f2:	2001      	movs	r0, #1
 80020f4:	2101      	movs	r1, #1
 80020f6:	f003 ffbf 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV7_PWM_GPIO_CLK_ENABLE();
 80020fa:	2001      	movs	r0, #1
 80020fc:	2101      	movs	r1, #1
 80020fe:	f003 ffbb 	bl	8006078 <RCC_AHB1PeriphClockCmd>
    ASV8_PWM_GPIO_CLK_ENABLE();
 8002102:	2001      	movs	r0, #1
 8002104:	2101      	movs	r1, #1
 8002106:	f003 ffb7 	bl	8006078 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 800210a:	2302      	movs	r3, #2
 800210c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 800211c:	2302      	movs	r3, #2
 800211e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    GPIO_InitStruct.GPIO_Pin = ASV1_PWM_PIN;
 8002122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV1_PWM_GPIO_PORT, ASV1_PWM_PIN_SOURCE, ASV1_PWM_AF);
 8002128:	4877      	ldr	r0, [pc, #476]	; (8002308 <HW_ASV_Init+0x244>)
 800212a:	2109      	movs	r1, #9
 800212c:	2203      	movs	r2, #3
 800212e:	f004 f943 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV1_PWM_GPIO_PORT, &GPIO_InitStruct);
 8002132:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002136:	4874      	ldr	r0, [pc, #464]	; (8002308 <HW_ASV_Init+0x244>)
 8002138:	4619      	mov	r1, r3
 800213a:	f004 f897 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV2_PWM_PIN;
 800213e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV2_PWM_GPIO_PORT, ASV2_PWM_PIN_SOURCE, ASV2_PWM_AF);
 8002144:	4870      	ldr	r0, [pc, #448]	; (8002308 <HW_ASV_Init+0x244>)
 8002146:	2108      	movs	r1, #8
 8002148:	2203      	movs	r2, #3
 800214a:	f004 f935 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV2_PWM_GPIO_PORT, &GPIO_InitStruct);
 800214e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002152:	486d      	ldr	r0, [pc, #436]	; (8002308 <HW_ASV_Init+0x244>)
 8002154:	4619      	mov	r1, r3
 8002156:	f004 f889 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV3_PWM_PIN;
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV3_PWM_GPIO_PORT, ASV3_PWM_PIN_SOURCE, ASV3_PWM_AF);
 800215e:	486a      	ldr	r0, [pc, #424]	; (8002308 <HW_ASV_Init+0x244>)
 8002160:	2107      	movs	r1, #7
 8002162:	2203      	movs	r2, #3
 8002164:	f004 f928 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV3_PWM_GPIO_PORT, &GPIO_InitStruct);
 8002168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800216c:	4866      	ldr	r0, [pc, #408]	; (8002308 <HW_ASV_Init+0x244>)
 800216e:	4619      	mov	r1, r3
 8002170:	f004 f87c 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV4_PWM_PIN;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV4_PWM_GPIO_PORT, ASV4_PWM_PIN_SOURCE, ASV4_PWM_AF);
 8002178:	4863      	ldr	r0, [pc, #396]	; (8002308 <HW_ASV_Init+0x244>)
 800217a:	2106      	movs	r1, #6
 800217c:	2203      	movs	r2, #3
 800217e:	f004 f91b 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV4_PWM_GPIO_PORT, &GPIO_InitStruct);
 8002182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002186:	4860      	ldr	r0, [pc, #384]	; (8002308 <HW_ASV_Init+0x244>)
 8002188:	4619      	mov	r1, r3
 800218a:	f004 f86f 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV5_PWM_PIN;
 800218e:	2301      	movs	r3, #1
 8002190:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV5_PWM_GPIO_PORT, ASV5_PWM_PIN_SOURCE, ASV5_PWM_AF);
 8002192:	485e      	ldr	r0, [pc, #376]	; (800230c <HW_ASV_Init+0x248>)
 8002194:	2100      	movs	r1, #0
 8002196:	2202      	movs	r2, #2
 8002198:	f004 f90e 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV5_PWM_GPIO_PORT, &GPIO_InitStruct);
 800219c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021a0:	485a      	ldr	r0, [pc, #360]	; (800230c <HW_ASV_Init+0x248>)
 80021a2:	4619      	mov	r1, r3
 80021a4:	f004 f862 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV6_PWM_PIN;
 80021a8:	2302      	movs	r3, #2
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV6_PWM_GPIO_PORT, ASV6_PWM_PIN_SOURCE, ASV6_PWM_AF);
 80021ac:	4857      	ldr	r0, [pc, #348]	; (800230c <HW_ASV_Init+0x248>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	2202      	movs	r2, #2
 80021b2:	f004 f901 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV6_PWM_GPIO_PORT, &GPIO_InitStruct);
 80021b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ba:	4854      	ldr	r0, [pc, #336]	; (800230c <HW_ASV_Init+0x248>)
 80021bc:	4619      	mov	r1, r3
 80021be:	f004 f855 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV7_PWM_PIN;
 80021c2:	2304      	movs	r3, #4
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV7_PWM_GPIO_PORT, ASV7_PWM_PIN_SOURCE, ASV7_PWM_AF);
 80021c6:	4851      	ldr	r0, [pc, #324]	; (800230c <HW_ASV_Init+0x248>)
 80021c8:	2102      	movs	r1, #2
 80021ca:	2202      	movs	r2, #2
 80021cc:	f004 f8f4 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV7_PWM_GPIO_PORT, &GPIO_InitStruct);
 80021d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d4:	484d      	ldr	r0, [pc, #308]	; (800230c <HW_ASV_Init+0x248>)
 80021d6:	4619      	mov	r1, r3
 80021d8:	f004 f848 	bl	800626c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV8_PWM_PIN;
 80021dc:	2308      	movs	r3, #8
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV8_PWM_GPIO_PORT, ASV8_PWM_PIN_SOURCE, ASV8_PWM_AF);
 80021e0:	484a      	ldr	r0, [pc, #296]	; (800230c <HW_ASV_Init+0x248>)
 80021e2:	2103      	movs	r1, #3
 80021e4:	2202      	movs	r2, #2
 80021e6:	f004 f8e7 	bl	80063b8 <GPIO_PinAFConfig>
    GPIO_Init(ASV8_PWM_GPIO_PORT, &GPIO_InitStruct);
 80021ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ee:	4847      	ldr	r0, [pc, #284]	; (800230c <HW_ASV_Init+0x248>)
 80021f0:	4619      	mov	r1, r3
 80021f2:	f004 f83b 	bl	800626c <GPIO_Init>

    /* Enable Timers Clocks from RCC */
    ASV_1_TO_4_TIM_CLK_ENABLE();
 80021f6:	2002      	movs	r0, #2
 80021f8:	2101      	movs	r1, #1
 80021fa:	f003 ff79 	bl	80060f0 <RCC_APB2PeriphClockCmd>
    ASV_5_TO_8_TIM_CLK_ENABLE();
 80021fe:	2008      	movs	r0, #8
 8002200:	2101      	movs	r1, #1
 8002202:	f003 ff57 	bl	80060b4 <RCC_APB1PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = ASV_TIMER_PRESCALER;
 800220e:	232f      	movs	r3, #47	; 0x2f
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = ASV_TIMER_PERIOD;
 8002212:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(ASV_1_TO_4_TIM, &TIM_BaseStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	483b      	ldr	r0, [pc, #236]	; (8002310 <HW_ASV_Init+0x24c>)
 8002222:	4619      	mov	r1, r3
 8002224:	f003 f8fc 	bl	8005420 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(ASV_5_TO_8_TIM, &TIM_BaseStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4839      	ldr	r0, [pc, #228]	; (8002314 <HW_ASV_Init+0x250>)
 800222e:	4619      	mov	r1, r3
 8002230:	f003 f8f6 	bl	8005420 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(ASV_1_TO_4_TIM, ENABLE);
 8002234:	4836      	ldr	r0, [pc, #216]	; (8002310 <HW_ASV_Init+0x24c>)
 8002236:	2101      	movs	r1, #1
 8002238:	f003 fc28 	bl	8005a8c <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(ASV_5_TO_8_TIM, ENABLE);
 800223c:	4835      	ldr	r0, [pc, #212]	; (8002314 <HW_ASV_Init+0x250>)
 800223e:	2101      	movs	r1, #1
 8002240:	f003 fc24 	bl	8005a8c <TIM_CtrlPWMOutputs>

    TIM_Cmd(ASV_1_TO_4_TIM, ENABLE);
 8002244:	4832      	ldr	r0, [pc, #200]	; (8002310 <HW_ASV_Init+0x24c>)
 8002246:	2101      	movs	r1, #1
 8002248:	f003 f962 	bl	8005510 <TIM_Cmd>
    TIM_Cmd(ASV_5_TO_8_TIM, ENABLE);
 800224c:	4831      	ldr	r0, [pc, #196]	; (8002314 <HW_ASV_Init+0x250>)
 800224e:	2101      	movs	r1, #1
 8002250:	f003 f95e 	bl	8005510 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fb52 	bl	8005900 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 800225c:	2360      	movs	r3, #96	; 0x60
 800225e:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OCPolarity     = TIM_OCPolarity_Low;       /* Invert polarity since we have optocouplers */
 8002260:	2302      	movs	r3, #2
 8002262:	617b      	str	r3, [r7, #20]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 8002264:	2301      	movs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 8002268:	2301      	movs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4827      	ldr	r0, [pc, #156]	; (8002310 <HW_ASV_Init+0x24c>)
 8002274:	4619      	mov	r1, r3
 8002276:	f003 f967 	bl	8005548 <TIM_OC1Init>
    TIM_OC2Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4824      	ldr	r0, [pc, #144]	; (8002310 <HW_ASV_Init+0x24c>)
 800227e:	4619      	mov	r1, r3
 8002280:	f003 f9dc 	bl	800563c <TIM_OC2Init>
    TIM_OC3Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4822      	ldr	r0, [pc, #136]	; (8002310 <HW_ASV_Init+0x24c>)
 8002288:	4619      	mov	r1, r3
 800228a:	f003 fa57 	bl	800573c <TIM_OC3Init>
    TIM_OC4Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	481f      	ldr	r0, [pc, #124]	; (8002310 <HW_ASV_Init+0x24c>)
 8002292:	4619      	mov	r1, r3
 8002294:	f003 fad2 	bl	800583c <TIM_OC4Init>
    TIM_OC1Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	481e      	ldr	r0, [pc, #120]	; (8002314 <HW_ASV_Init+0x250>)
 800229c:	4619      	mov	r1, r3
 800229e:	f003 f953 	bl	8005548 <TIM_OC1Init>
    TIM_OC2Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	481b      	ldr	r0, [pc, #108]	; (8002314 <HW_ASV_Init+0x250>)
 80022a6:	4619      	mov	r1, r3
 80022a8:	f003 f9c8 	bl	800563c <TIM_OC2Init>
    TIM_OC3Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4819      	ldr	r0, [pc, #100]	; (8002314 <HW_ASV_Init+0x250>)
 80022b0:	4619      	mov	r1, r3
 80022b2:	f003 fa43 	bl	800573c <TIM_OC3Init>
    TIM_OC4Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	4816      	ldr	r0, [pc, #88]	; (8002314 <HW_ASV_Init+0x250>)
 80022ba:	4619      	mov	r1, r3
 80022bc:	f003 fabe 	bl	800583c <TIM_OC4Init>

    TIM_OC1PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <HW_ASV_Init+0x24c>)
 80022c2:	2108      	movs	r1, #8
 80022c4:	f003 fb76 	bl	80059b4 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <HW_ASV_Init+0x24c>)
 80022ca:	2108      	movs	r1, #8
 80022cc:	f003 fb8c 	bl	80059e8 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80022d0:	480f      	ldr	r0, [pc, #60]	; (8002310 <HW_ASV_Init+0x24c>)
 80022d2:	2108      	movs	r1, #8
 80022d4:	f003 fba4 	bl	8005a20 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <HW_ASV_Init+0x24c>)
 80022da:	2108      	movs	r1, #8
 80022dc:	f003 fbba 	bl	8005a54 <TIM_OC4PreloadConfig>
    TIM_OC1PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <HW_ASV_Init+0x250>)
 80022e2:	2108      	movs	r1, #8
 80022e4:	f003 fb66 	bl	80059b4 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <HW_ASV_Init+0x250>)
 80022ea:	2108      	movs	r1, #8
 80022ec:	f003 fb7c 	bl	80059e8 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 80022f0:	4808      	ldr	r0, [pc, #32]	; (8002314 <HW_ASV_Init+0x250>)
 80022f2:	2108      	movs	r1, #8
 80022f4:	f003 fb94 	bl	8005a20 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 80022f8:	4806      	ldr	r0, [pc, #24]	; (8002314 <HW_ASV_Init+0x250>)
 80022fa:	2108      	movs	r1, #8
 80022fc:	f003 fbaa 	bl	8005a54 <TIM_OC4PreloadConfig>

}
 8002300:	3740      	adds	r7, #64	; 0x40
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000
 8002310:	40010400 	.word	0x40010400
 8002314:	40000c00 	.word	0x40000c00

08002318 <HW_ASV_SetPwmPulseLength>:

void HW_ASV_SetPwmPulseLength(HW_ASV_ChannelTypeDef ASV_Channel, uint16_t pulseLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	71fa      	strb	r2, [r7, #7]
 8002324:	80bb      	strh	r3, [r7, #4]

    /* Configure the correct OC depending on channel selection */
    switch(ASV_Channel)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d843      	bhi.n	80023b4 <HW_ASV_SetPwmPulseLength+0x9c>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <HW_ASV_SetPwmPulseLength+0x1c>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002355 	.word	0x08002355
 8002338:	08002361 	.word	0x08002361
 800233c:	0800236d 	.word	0x0800236d
 8002340:	08002379 	.word	0x08002379
 8002344:	08002385 	.word	0x08002385
 8002348:	08002391 	.word	0x08002391
 800234c:	0800239d 	.word	0x0800239d
 8002350:	080023a9 	.word	0x080023a9
    {
        case HW_ASV_CHANNEL1: ASV1_PWM_SET_PULSE(pulseLength); break;
 8002354:	88bb      	ldrh	r3, [r7, #4]
 8002356:	4819      	ldr	r0, [pc, #100]	; (80023bc <HW_ASV_SetPwmPulseLength+0xa4>)
 8002358:	4619      	mov	r1, r3
 800235a:	f003 fb1d 	bl	8005998 <TIM_SetCompare4>
 800235e:	e02a      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL2: ASV2_PWM_SET_PULSE(pulseLength); break;
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	4816      	ldr	r0, [pc, #88]	; (80023bc <HW_ASV_SetPwmPulseLength+0xa4>)
 8002364:	4619      	mov	r1, r3
 8002366:	f003 fb09 	bl	800597c <TIM_SetCompare3>
 800236a:	e024      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL3: ASV3_PWM_SET_PULSE(pulseLength); break;
 800236c:	88bb      	ldrh	r3, [r7, #4]
 800236e:	4813      	ldr	r0, [pc, #76]	; (80023bc <HW_ASV_SetPwmPulseLength+0xa4>)
 8002370:	4619      	mov	r1, r3
 8002372:	f003 faf5 	bl	8005960 <TIM_SetCompare2>
 8002376:	e01e      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL4: ASV4_PWM_SET_PULSE(pulseLength); break;
 8002378:	88bb      	ldrh	r3, [r7, #4]
 800237a:	4810      	ldr	r0, [pc, #64]	; (80023bc <HW_ASV_SetPwmPulseLength+0xa4>)
 800237c:	4619      	mov	r1, r3
 800237e:	f003 fae1 	bl	8005944 <TIM_SetCompare1>
 8002382:	e018      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL5: ASV5_PWM_SET_PULSE(pulseLength); break;
 8002384:	88bb      	ldrh	r3, [r7, #4]
 8002386:	480e      	ldr	r0, [pc, #56]	; (80023c0 <HW_ASV_SetPwmPulseLength+0xa8>)
 8002388:	4619      	mov	r1, r3
 800238a:	f003 fadb 	bl	8005944 <TIM_SetCompare1>
 800238e:	e012      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL6: ASV6_PWM_SET_PULSE(pulseLength); break;
 8002390:	88bb      	ldrh	r3, [r7, #4]
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <HW_ASV_SetPwmPulseLength+0xa8>)
 8002394:	4619      	mov	r1, r3
 8002396:	f003 fae3 	bl	8005960 <TIM_SetCompare2>
 800239a:	e00c      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL7: ASV7_PWM_SET_PULSE(pulseLength); break;
 800239c:	88bb      	ldrh	r3, [r7, #4]
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <HW_ASV_SetPwmPulseLength+0xa8>)
 80023a0:	4619      	mov	r1, r3
 80023a2:	f003 faeb 	bl	800597c <TIM_SetCompare3>
 80023a6:	e006      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL8: ASV8_PWM_SET_PULSE(pulseLength); break;
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HW_ASV_SetPwmPulseLength+0xa8>)
 80023ac:	4619      	mov	r1, r3
 80023ae:	f003 faf3 	bl	8005998 <TIM_SetCompare4>
 80023b2:	e000      	b.n	80023b6 <HW_ASV_SetPwmPulseLength+0x9e>

        default:
            /* Incorrect, Do nothing */
            break;
 80023b4:	bf00      	nop
    }

}
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40010400 	.word	0x40010400
 80023c0:	40000c00 	.word	0x40000c00

080023c4 <HW_ConfigAll>:
  *         module.
  * @param  None
  * @retval None
  */
static void HW_ConfigAll(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
   /*
    * Configure the Debug UART init structure:
    *   8 bits length + 1 stop bit, no parity
    *   Baudrate 115200 kbps
    */
    Debug_Config.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HW_ConfigAll+0x34>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	611a      	str	r2, [r3, #16]
    Debug_Config.USART_BaudRate            = 115200;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HW_ConfigAll+0x34>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d4:	601a      	str	r2, [r3, #0]
    Debug_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HW_ConfigAll+0x34>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
    Debug_Config.USART_Parity              = USART_Parity_No;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HW_ConfigAll+0x34>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
    Debug_Config.USART_StopBits            = USART_StopBits_1;
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HW_ConfigAll+0x34>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
    Debug_Config.USART_WordLength          = USART_WordLength_8b;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HW_ConfigAll+0x34>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	605a      	str	r2, [r3, #4]

}
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20010594 	.word	0x20010594

080023fc <HW_InitAll>:
  *         HW_ConfigAll() function.
  * @param  None
  * @retval None
  */
void HW_InitAll(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
    /* System Config */
    HW_CPU_CACHE_Enable();
 8002400:	f7ff f80a 	bl	8001418 <HW_CPU_CACHE_Enable>
    HW_SystemClock_Config();
 8002404:	f7fe ffb0 	bl	8001368 <HW_SystemClock_Config>

    /* HW Modules Configurations */
    HW_ConfigAll();
 8002408:	f7ff ffdc 	bl	80023c4 <HW_ConfigAll>

    /* HW Modules Initializations */
    HW_PWR_Init();
 800240c:	f7ff f816 	bl	800143c <HW_PWR_Init>
    HW_LED_Init();
 8002410:	f7ff fb2e 	bl	8001a70 <HW_LED_Init>
    HW_ENC_Init();
 8002414:	f7ff fd12 	bl	8001e3c <HW_ENC_Init>
    HW_MOT_Init();
 8002418:	f7ff f882 	bl	8001520 <HW_MOT_Init>
    HW_ASV_Init();
 800241c:	f7ff fe52 	bl	80020c4 <HW_ASV_Init>
    HW_MON_Init();
 8002420:	f7ff fa20 	bl	8001864 <HW_MON_Init>
    HW_HMI_Init();
 8002424:	f7ff fc16 	bl	8001c54 <HW_HMI_Init>

    HW_DBG_Init(&Debug_Config);
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <HW_InitAll+0x3c>)
 800242a:	f7ff fdaf 	bl	8001f8c <HW_DBG_Init>

    /* Set Interrupt group priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800242e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002432:	f004 f9ff 	bl	8006834 <NVIC_PriorityGroupConfig>

}
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20010594 	.word	0x20010594

0800243c <HW_PowerUp>:
  * @brief  Apply the power-up sequence
  * @param  None
  * @retval None
  */
void HW_PowerUp(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
    int i = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]

    /* TEMPORARY */

    MOT_SLEEP_WRITE(MOT_SLEEP_OFF);
 8002446:	483c      	ldr	r0, [pc, #240]	; (8002538 <HW_PowerUp+0xfc>)
 8002448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800244c:	2201      	movs	r2, #1
 800244e:	f003 ff9b 	bl	8006388 <GPIO_WriteBit>
    MOT_RESET_WRITE(MOT_RESET_ON);
 8002452:	4839      	ldr	r0, [pc, #228]	; (8002538 <HW_PowerUp+0xfc>)
 8002454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002458:	2200      	movs	r2, #0
 800245a:	f003 ff95 	bl	8006388 <GPIO_WriteBit>

    /* Enable powers */
    for(i = 10000000; i; i--);
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <HW_PowerUp+0x100>)
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	e002      	b.n	800246a <HW_PowerUp+0x2e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <HW_PowerUp+0x28>
    HW_PWR_Enable(HW_PWR_VP1);
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff f821 	bl	80014b8 <HW_PWR_Enable>
    for(i = 10000000; i; i--);
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HW_PowerUp+0x100>)
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	e002      	b.n	8002482 <HW_PowerUp+0x46>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <HW_PowerUp+0x40>
    HW_PWR_Enable(HW_PWR_VP2);
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff f815 	bl	80014b8 <HW_PWR_Enable>
    for(i = 10000000; i; i--);
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HW_PowerUp+0x100>)
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	e002      	b.n	800249a <HW_PowerUp+0x5e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <HW_PowerUp+0x58>
    HW_PWR_Enable(HW_PWR_VP3);
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7ff f809 	bl	80014b8 <HW_PWR_Enable>
    for(i = 50000000; i; i--);
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HW_PowerUp+0x104>)
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	e002      	b.n	80024b2 <HW_PowerUp+0x76>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f9      	bne.n	80024ac <HW_PowerUp+0x70>

    /* Enable H-bridges power */
    MOT_RESET_WRITE(MOT_RESET_OFF);
 80024b8:	481f      	ldr	r0, [pc, #124]	; (8002538 <HW_PowerUp+0xfc>)
 80024ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024be:	2201      	movs	r2, #1
 80024c0:	f003 ff62 	bl	8006388 <GPIO_WriteBit>

    printf("Hello from BlueBoard!\r\n");
 80024c4:	481f      	ldr	r0, [pc, #124]	; (8002544 <HW_PowerUp+0x108>)
 80024c6:	f004 fbcf 	bl	8006c68 <puts>

    /* Tests */
    HW_MOT_SetMotorSpeed(HW_MOT_CHANNEL1,   500, DISABLE);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024d0:	2200      	movs	r2, #0
 80024d2:	f7ff f96b 	bl	80017ac <HW_MOT_SetMotorSpeed>
    HW_MOT_SetMotorSpeed(HW_MOT_CHANNEL2,     0, DISABLE);
 80024d6:	2001      	movs	r0, #1
 80024d8:	2100      	movs	r1, #0
 80024da:	2200      	movs	r2, #0
 80024dc:	f7ff f966 	bl	80017ac <HW_MOT_SetMotorSpeed>

    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL1, 1000);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024e6:	f7ff ff17 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL2, 3000);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80024f0:	f7ff ff12 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL3, 5000);
 80024f4:	2002      	movs	r0, #2
 80024f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80024fa:	f7ff ff0d 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL4, 8000);
 80024fe:	2003      	movs	r0, #3
 8002500:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002504:	f7ff ff08 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL5, 10000);
 8002508:	2004      	movs	r0, #4
 800250a:	f242 7110 	movw	r1, #10000	; 0x2710
 800250e:	f7ff ff03 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL6, 15000);
 8002512:	2005      	movs	r0, #5
 8002514:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002518:	f7ff fefe 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL7, 25000);
 800251c:	2006      	movs	r0, #6
 800251e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002522:	f7ff fef9 	bl	8002318 <HW_ASV_SetPwmPulseLength>
    HW_ASV_SetPwmPulseLength(HW_ASV_CHANNEL8, 35000);
 8002526:	2007      	movs	r0, #7
 8002528:	f648 01b8 	movw	r1, #35000	; 0x88b8
 800252c:	f7ff fef4 	bl	8002318 <HW_ASV_SetPwmPulseLength>
}
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	00989680 	.word	0x00989680
 8002540:	02faf080 	.word	0x02faf080
 8002544:	0800a5b8 	.word	0x0800a5b8

08002548 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002552:	f000 fa9f 	bl	8002a94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <xTimerCreateTimerTask+0x50>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00f      	beq.n	800257e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800255e:	2304      	movs	r3, #4
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2300      	movs	r3, #0
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	2300      	movs	r3, #0
 800256c:	9303      	str	r3, [sp, #12]
 800256e:	480b      	ldr	r0, [pc, #44]	; (800259c <xTimerCreateTimerTask+0x54>)
 8002570:	490b      	ldr	r1, [pc, #44]	; (80025a0 <xTimerCreateTimerTask+0x58>)
 8002572:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002576:	2300      	movs	r3, #0
 8002578:	f000 facc 	bl	8002b14 <xTaskGenericCreate>
 800257c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <xTimerCreateTimerTask+0x46>
 8002584:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <xTimerCreateTimerTask+0x5c>)
 800258a:	f004 fad1 	bl	8006b30 <vAssertCalled>
	return xReturn;
 800258e:	687b      	ldr	r3, [r7, #4]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200105dc 	.word	0x200105dc
 800259c:	080026c1 	.word	0x080026c1
 80025a0:	0800a5d0 	.word	0x0800a5d0
 80025a4:	0800a5d8 	.word	0x0800a5d8

080025a8 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <xTimerGenericCommand+0x22>
 80025c0:	f240 1041 	movw	r0, #321	; 0x141
 80025c4:	491e      	ldr	r1, [pc, #120]	; (8002640 <xTimerGenericCommand+0x98>)
 80025c6:	f004 fab3 	bl	8006b30 <vAssertCalled>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <xTimerGenericCommand+0x9c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d030      	beq.n	8002634 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	dc1c      	bgt.n	800261e <xTimerGenericCommand+0x76>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80025e4:	f001 f8fe 	bl	80037e4 <xTaskGetSchedulerState>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d10b      	bne.n	8002606 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <xTimerGenericCommand+0x9c>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fc:	2300      	movs	r3, #0
 80025fe:	f001 facd 	bl	8003b9c <xQueueGenericSend>
 8002602:	6278      	str	r0, [r7, #36]	; 0x24
 8002604:	e016      	b.n	8002634 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <xTimerGenericCommand+0x9c>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	2200      	movs	r2, #0
 8002614:	2300      	movs	r3, #0
 8002616:	f001 fac1 	bl	8003b9c <xQueueGenericSend>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24
 800261c:	e00a      	b.n	8002634 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <xTimerGenericCommand+0x9c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	2300      	movs	r3, #0
 800262e:	f001 fbad 	bl	8003d8c <xQueueGenericSendFromISR>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002636:	4618      	mov	r0, r3
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	0800a5d8 	.word	0x0800a5d8
 8002644:	200105dc 	.word	0x200105dc

08002648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af02      	add	r7, sp, #8
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <prvProcessExpiredTimer+0x70>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3304      	adds	r3, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f002 faf5 	bl	8004c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d11d      	bne.n	80026aa <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	4619      	mov	r1, r3
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f000 f8c3 	bl	8002808 <prvInsertTimerInActiveList>
 8002682:	4603      	mov	r3, r0
 8002684:	2b01      	cmp	r3, #1
 8002686:	d110      	bne.n	80026aa <prvProcessExpiredTimer+0x62>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002688:	2300      	movs	r3, #0
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	2100      	movs	r1, #0
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	2300      	movs	r3, #0
 8002694:	f7ff ff88 	bl	80025a8 <xTimerGenericCommand>
 8002698:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d104      	bne.n	80026aa <prvProcessExpiredTimer+0x62>
 80026a0:	f240 1093 	movw	r0, #403	; 0x193
 80026a4:	4905      	ldr	r1, [pc, #20]	; (80026bc <prvProcessExpiredTimer+0x74>)
 80026a6:	f004 fa43 	bl	8006b30 <vAssertCalled>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	4798      	blx	r3
}
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200105d4 	.word	0x200105d4
 80026bc:	0800a5d8 	.word	0x0800a5d8

080026c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f857 	bl	8002780 <prvGetNextExpireTime>
 80026d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	4619      	mov	r1, r3
 80026da:	f000 f803 	bl	80026e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80026de:	f000 f8d5 	bl	800288c <prvProcessReceivedCommands>
	}
 80026e2:	e7f1      	b.n	80026c8 <prvTimerTask+0x8>

080026e4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80026ee:	f000 fb9f 	bl	8002e30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f866 	bl	80027c8 <prvSampleTimeNow>
 80026fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d131      	bne.n	8002768 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <prvProcessTimerOrBlockTask+0x3c>
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	429a      	cmp	r2, r3
 8002710:	d806      	bhi.n	8002720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002712:	f000 fb9b 	bl	8002e4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	f7ff ff95 	bl	8002648 <prvProcessExpiredTimer>
 800271e:	e025      	b.n	800276c <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <prvProcessTimerOrBlockTask+0x90>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2300      	movne	r3, #0
 8002732:	2301      	moveq	r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <prvProcessTimerOrBlockTask+0x94>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1acb      	subs	r3, r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	f001 fdf2 	bl	8004330 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800274c:	f000 fb7e 	bl	8002e4c <xTaskResumeAll>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <prvProcessTimerOrBlockTask+0x98>)
 8002758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	e001      	b.n	800276c <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002768:	f000 fb70 	bl	8002e4c <xTaskResumeAll>
		}
	}
}
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200105d8 	.word	0x200105d8
 8002778:	200105dc 	.word	0x200105dc
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <prvGetNextExpireTime+0x44>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf14      	ite	ne
 8002792:	2300      	movne	r3, #0
 8002794:	2301      	moveq	r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <prvGetNextExpireTime+0x44>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e001      	b.n	80027b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	200105d4 	.word	0x200105d4

080027c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80027d0:	f000 fbcc 	bl	8002f6c <xTaskGetTickCount>
 80027d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <prvSampleTimeNow+0x3c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d205      	bcs.n	80027ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80027e0:	f000 f8fc 	bl	80029dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e002      	b.n	80027f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <prvSampleTimeNow+0x3c>)
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200105e0 	.word	0x200105e0

08002808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d812      	bhi.n	8002854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800283c:	2301      	movs	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e01b      	b.n	800287a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <prvInsertTimerInActiveList+0x7c>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3304      	adds	r3, #4
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f002 f9c7 	bl	8004be0 <vListInsert>
 8002852:	e012      	b.n	800287a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d206      	bcs.n	800286a <prvInsertTimerInActiveList+0x62>
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002864:	2301      	movs	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e007      	b.n	800287a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <prvInsertTimerInActiveList+0x80>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3304      	adds	r3, #4
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f002 f9b3 	bl	8004be0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800287a:	697b      	ldr	r3, [r7, #20]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200105d8 	.word	0x200105d8
 8002888:	200105d4 	.word	0x200105d4

0800288c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	; 0x30
 8002890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002892:	e08d      	b.n	80029b0 <prvProcessReceivedCommands+0x124>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	da14      	bge.n	80028c4 <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	3304      	adds	r3, #4
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <prvProcessReceivedCommands+0x26>
 80028a8:	f240 2066 	movw	r0, #614	; 0x266
 80028ac:	4949      	ldr	r1, [pc, #292]	; (80029d4 <prvProcessReceivedCommands+0x148>)
 80028ae:	f004 f93f 	bl	8006b30 <vAssertCalled>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	6851      	ldr	r1, [r2, #4]
 80028ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028bc:	6892      	ldr	r2, [r2, #8]
 80028be:	4608      	mov	r0, r1
 80028c0:	4611      	mov	r1, r2
 80028c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db72      	blt.n	80029b0 <prvProcessReceivedCommands+0x124>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	3304      	adds	r3, #4
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 f9b8 	bl	8004c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff70 	bl	80027c8 <prvSampleTimeNow>
 80028e8:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d85e      	bhi.n	80029ae <prvProcessReceivedCommands+0x122>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <prvProcessReceivedCommands+0x6c>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002921 	.word	0x08002921
 80028fc:	08002921 	.word	0x08002921
 8002900:	08002921 	.word	0x08002921
 8002904:	080029af 	.word	0x080029af
 8002908:	08002979 	.word	0x08002979
 800290c:	080029a7 	.word	0x080029a7
 8002910:	08002921 	.word	0x08002921
 8002914:	08002921 	.word	0x08002921
 8002918:	080029af 	.word	0x080029af
 800291c:	08002979 	.word	0x08002979
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a38      	ldr	r0, [r7, #32]
 800292c:	4611      	mov	r1, r2
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f7ff ff6a 	bl	8002808 <prvInsertTimerInActiveList>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d11d      	bne.n	8002976 <prvProcessReceivedCommands+0xea>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	6a38      	ldr	r0, [r7, #32]
 8002940:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d115      	bne.n	8002976 <prvProcessReceivedCommands+0xea>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4413      	add	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	6a38      	ldr	r0, [r7, #32]
 8002958:	2100      	movs	r1, #0
 800295a:	461a      	mov	r2, r3
 800295c:	2300      	movs	r3, #0
 800295e:	f7ff fe23 	bl	80025a8 <xTimerGenericCommand>
 8002962:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <prvProcessReceivedCommands+0xea>
 800296a:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 800296e:	4919      	ldr	r1, [pc, #100]	; (80029d4 <prvProcessReceivedCommands+0x148>)
 8002970:	f004 f8de 	bl	8006b30 <vAssertCalled>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8002974:	e01c      	b.n	80029b0 <prvProcessReceivedCommands+0x124>
 8002976:	e01b      	b.n	80029b0 <prvProcessReceivedCommands+0x124>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <prvProcessReceivedCommands+0x104>
 8002986:	f240 20b7 	movw	r0, #695	; 0x2b7
 800298a:	4912      	ldr	r1, [pc, #72]	; (80029d4 <prvProcessReceivedCommands+0x148>)
 800298c:	f004 f8d0 	bl	8006b30 <vAssertCalled>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	6a38      	ldr	r0, [r7, #32]
 800299a:	4619      	mov	r1, r3
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f7ff ff32 	bl	8002808 <prvInsertTimerInActiveList>
					break;
 80029a4:	e004      	b.n	80029b0 <prvProcessReceivedCommands+0x124>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 80029a6:	6a38      	ldr	r0, [r7, #32]
 80029a8:	f001 fdf0 	bl	800458c <vPortFree>
					break;
 80029ac:	e000      	b.n	80029b0 <prvProcessReceivedCommands+0x124>

				default	:
					/* Don't expect to get here. */
					break;
 80029ae:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <prvProcessReceivedCommands+0x14c>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	2300      	movs	r3, #0
 80029c0:	f001 fa78 	bl	8003eb4 <xQueueGenericReceive>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f47f af64 	bne.w	8002894 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800a5d8 	.word	0x0800a5d8
 80029d8:	200105dc 	.word	0x200105dc

080029dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029e2:	e03f      	b.n	8002a64 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <prvSwitchTimerLists+0xac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <prvSwitchTimerLists+0xac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	3304      	adds	r3, #4
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 f927 	bl	8004c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	6938      	ldr	r0, [r7, #16]
 8002a08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d128      	bne.n	8002a64 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4413      	add	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d90e      	bls.n	8002a42 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <prvSwitchTimerLists+0xac>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f002 f8d0 	bl	8004be0 <vListInsert>
 8002a40:	e010      	b.n	8002a64 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6938      	ldr	r0, [r7, #16]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f7ff fdab 	bl	80025a8 <xTimerGenericCommand>
 8002a52:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <prvSwitchTimerLists+0x88>
 8002a5a:	f44f 703f 	mov.w	r0, #764	; 0x2fc
 8002a5e:	490b      	ldr	r1, [pc, #44]	; (8002a8c <prvSwitchTimerLists+0xb0>)
 8002a60:	f004 f866 	bl	8006b30 <vAssertCalled>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <prvSwitchTimerLists+0xac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1ba      	bne.n	80029e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <prvSwitchTimerLists+0xac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <prvSwitchTimerLists+0xb4>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <prvSwitchTimerLists+0xac>)
 8002a7a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <prvSwitchTimerLists+0xb4>)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200105d4 	.word	0x200105d4
 8002a8c:	0800a5d8 	.word	0x0800a5d8
 8002a90:	200105d8 	.word	0x200105d8

08002a94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a98:	f001 ff5a 	bl	8004950 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <prvCheckForValidListAndQueue+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d126      	bne.n	8002af2 <prvCheckForValidListAndQueue+0x5e>
		{
			vListInitialise( &xActiveTimerList1 );
 8002aa4:	4815      	ldr	r0, [pc, #84]	; (8002afc <prvCheckForValidListAndQueue+0x68>)
 8002aa6:	f002 f84b 	bl	8004b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002aaa:	4815      	ldr	r0, [pc, #84]	; (8002b00 <prvCheckForValidListAndQueue+0x6c>)
 8002aac:	f002 f848 	bl	8004b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <prvCheckForValidListAndQueue+0x70>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <prvCheckForValidListAndQueue+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <prvCheckForValidListAndQueue+0x74>)
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <prvCheckForValidListAndQueue+0x6c>)
 8002aba:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002abc:	2005      	movs	r0, #5
 8002abe:	2110      	movs	r1, #16
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f001 f817 	bl	8003af4 <xQueueGenericCreate>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <prvCheckForValidListAndQueue+0x64>)
 8002aca:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <prvCheckForValidListAndQueue+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <prvCheckForValidListAndQueue+0x4a>
 8002ad4:	f240 301a 	movw	r0, #794	; 0x31a
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <prvCheckForValidListAndQueue+0x78>)
 8002ada:	f004 f829 	bl	8006b30 <vAssertCalled>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <prvCheckForValidListAndQueue+0x64>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <prvCheckForValidListAndQueue+0x5e>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <prvCheckForValidListAndQueue+0x64>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	4908      	ldr	r1, [pc, #32]	; (8002b10 <prvCheckForValidListAndQueue+0x7c>)
 8002aee:	f001 fbf7 	bl	80042e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002af2:	f001 ff57 	bl	80049a4 <vPortExitCritical>
}
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200105dc 	.word	0x200105dc
 8002afc:	200105ac 	.word	0x200105ac
 8002b00:	200105c0 	.word	0x200105c0
 8002b04:	200105d4 	.word	0x200105d4
 8002b08:	200105d8 	.word	0x200105d8
 8002b0c:	0800a5d8 	.word	0x0800a5d8
 8002b10:	0800a5f4 	.word	0x0800a5f4

08002b14 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <xTaskGenericCreate+0x20>
 8002b2a:	f240 202d 	movw	r0, #557	; 0x22d
 8002b2e:	4952      	ldr	r1, [pc, #328]	; (8002c78 <xTaskGenericCreate+0x164>)
 8002b30:	f003 fffe 	bl	8006b30 <vAssertCalled>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d904      	bls.n	8002b44 <xTaskGenericCreate+0x30>
 8002b3a:	f240 202e 	movw	r0, #558	; 0x22e
 8002b3e:	494e      	ldr	r1, [pc, #312]	; (8002c78 <xTaskGenericCreate+0x164>)
 8002b40:	f003 fff6 	bl	8006b30 <vAssertCalled>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	4618      	mov	r0, r3
 8002b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4a:	f000 fddf 	bl	800370c <prvAllocateTCBAndStack>
 8002b4e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d073      	beq.n	8002c3e <xTaskGenericCreate+0x12a>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b60:	3b01      	subs	r3, #1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0307 	bic.w	r3, r3, #7
 8002b6e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <xTaskGenericCreate+0x70>
 8002b7a:	f44f 7017 	mov.w	r0, #604	; 0x25c
 8002b7e:	493e      	ldr	r1, [pc, #248]	; (8002c78 <xTaskGenericCreate+0x164>)
 8002b80:	f003 ffd6 	bl	8006b30 <vAssertCalled>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	69b8      	ldr	r0, [r7, #24]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	f000 fcbc 	bl	800350c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	f001 fe01 	bl	80047a0 <pxPortInitialiseStack>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002bb0:	f001 fece 	bl	8004950 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <xTaskGenericCreate+0x168>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <xTaskGenericCreate+0x168>)
 8002bbc:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <xTaskGenericCreate+0x16c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <xTaskGenericCreate+0x16c>)
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <xTaskGenericCreate+0x168>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10f      	bne.n	8002bf4 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002bd4:	f000 fcec 	bl	80035b0 <prvInitialiseTaskLists>
 8002bd8:	e00c      	b.n	8002bf4 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <xTaskGenericCreate+0x170>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <xTaskGenericCreate+0x16c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d802      	bhi.n	8002bf4 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <xTaskGenericCreate+0x16c>)
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <xTaskGenericCreate+0x174>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <xTaskGenericCreate+0x174>)
 8002bfc:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <xTaskGenericCreate+0x174>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <xTaskGenericCreate+0x178>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <xTaskGenericCreate+0x178>)
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <xTaskGenericCreate+0x17c>)
 8002c26:	441a      	add	r2, r3
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f001 ffb2 	bl	8004b98 <vListInsertEnd>

			xReturn = pdPASS;
 8002c34:	2301      	movs	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002c38:	f001 feb4 	bl	80049a4 <vPortExitCritical>
 8002c3c:	e002      	b.n	8002c44 <xTaskGenericCreate+0x130>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d111      	bne.n	8002c6e <xTaskGenericCreate+0x15a>
	{
		if( xSchedulerRunning != pdFALSE )
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <xTaskGenericCreate+0x170>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <xTaskGenericCreate+0x15a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <xTaskGenericCreate+0x16c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d207      	bcs.n	8002c6e <xTaskGenericCreate+0x15a>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <xTaskGenericCreate+0x180>)
 8002c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	0800a5fc 	.word	0x0800a5fc
 8002c7c:	200106bc 	.word	0x200106bc
 8002c80:	200105e4 	.word	0x200105e4
 8002c84:	200106c8 	.word	0x200106c8
 8002c88:	200106d8 	.word	0x200106d8
 8002c8c:	200106c4 	.word	0x200106c4
 8002c90:	200105e8 	.word	0x200105e8
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <vTaskDelayUntil+0x1e>
 8002cac:	f240 303f 	movw	r0, #831	; 0x33f
 8002cb0:	4934      	ldr	r1, [pc, #208]	; (8002d84 <vTaskDelayUntil+0xec>)
 8002cb2:	f003 ff3d 	bl	8006b30 <vAssertCalled>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <vTaskDelayUntil+0x2e>
 8002cbc:	f44f 7050 	mov.w	r0, #832	; 0x340
 8002cc0:	4930      	ldr	r1, [pc, #192]	; (8002d84 <vTaskDelayUntil+0xec>)
 8002cc2:	f003 ff35 	bl	8006b30 <vAssertCalled>
		configASSERT( uxSchedulerSuspended == 0 );
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <vTaskDelayUntil+0xf0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <vTaskDelayUntil+0x40>
 8002cce:	f240 3041 	movw	r0, #833	; 0x341
 8002cd2:	492c      	ldr	r1, [pc, #176]	; (8002d84 <vTaskDelayUntil+0xec>)
 8002cd4:	f003 ff2c 	bl	8006b30 <vAssertCalled>

		vTaskSuspendAll();
 8002cd8:	f000 f8aa 	bl	8002e30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <vTaskDelayUntil+0xf4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90b      	bls.n	8002d0e <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d911      	bls.n	8002d24 <vTaskDelayUntil+0x8c>
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d90d      	bls.n	8002d24 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e00a      	b.n	8002d24 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d803      	bhi.n	8002d20 <vTaskDelayUntil+0x88>
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d901      	bls.n	8002d24 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d017      	beq.n	8002d60 <vTaskDelayUntil+0xc8>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <vTaskDelayUntil+0xf8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3304      	adds	r3, #4
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 ff8a 	bl	8004c50 <uxListRemove>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <vTaskDelayUntil+0xc2>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <vTaskDelayUntil+0xf8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <vTaskDelayUntil+0xfc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	401a      	ands	r2, r3
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <vTaskDelayUntil+0xfc>)
 8002d58:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fca0 	bl	80036a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002d60:	f000 f874 	bl	8002e4c <xTaskResumeAll>
 8002d64:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <vTaskDelayUntil+0xe4>
		{
			portYIELD_WITHIN_API();
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <vTaskDelayUntil+0x100>)
 8002d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	0800a5fc 	.word	0x0800a5fc
 8002d88:	200106e0 	.word	0x200106e0
 8002d8c:	200106c0 	.word	0x200106c0
 8002d90:	200105e4 	.word	0x200105e4
 8002d94:	200106c4 	.word	0x200106c4
 8002d98:	e000ed04 	.word	0xe000ed04

08002d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002da2:	2300      	movs	r3, #0
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9302      	str	r3, [sp, #8]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9303      	str	r3, [sp, #12]
 8002db2:	4819      	ldr	r0, [pc, #100]	; (8002e18 <vTaskStartScheduler+0x7c>)
 8002db4:	4919      	ldr	r1, [pc, #100]	; (8002e1c <vTaskStartScheduler+0x80>)
 8002db6:	2282      	movs	r2, #130	; 0x82
 8002db8:	2300      	movs	r3, #0
 8002dba:	f7ff feab 	bl	8002b14 <xTaskGenericCreate>
 8002dbe:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8002dc6:	f7ff fbbf 	bl	8002548 <xTimerCreateTimerTask>
 8002dca:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d117      	bne.n	8002e02 <vTaskStartScheduler+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dd2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002dd6:	b672      	cpsid	i
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	b662      	cpsie	i
 8002de6:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <vTaskStartScheduler+0x84>)
 8002dea:	f04f 32ff 	mov.w	r2, #4294967295
 8002dee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <vTaskStartScheduler+0x88>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <vTaskStartScheduler+0x8c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dfc:	f001 fd40 	bl	8004880 <xPortStartScheduler>
 8002e00:	e007      	b.n	8002e12 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <vTaskStartScheduler+0x76>
 8002e08:	f240 6051 	movw	r0, #1617	; 0x651
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <vTaskStartScheduler+0x90>)
 8002e0e:	f003 fe8f 	bl	8006b30 <vAssertCalled>
	}
}
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	080034dd 	.word	0x080034dd
 8002e1c:	0800a614 	.word	0x0800a614
 8002e20:	200106dc 	.word	0x200106dc
 8002e24:	200106c8 	.word	0x200106c8
 8002e28:	200106c0 	.word	0x200106c0
 8002e2c:	0800a5fc 	.word	0x0800a5fc

08002e30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <vTaskSuspendAll+0x18>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <vTaskSuspendAll+0x18>)
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	200106e0 	.word	0x200106e0

08002e4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <xTaskResumeAll+0xf8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d104      	bne.n	8002e68 <xTaskResumeAll+0x1c>
 8002e5e:	f240 608e 	movw	r0, #1678	; 0x68e
 8002e62:	4939      	ldr	r1, [pc, #228]	; (8002f48 <xTaskResumeAll+0xfc>)
 8002e64:	f003 fe64 	bl	8006b30 <vAssertCalled>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e68:	f001 fd72 	bl	8004950 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <xTaskResumeAll+0xf8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <xTaskResumeAll+0xf8>)
 8002e74:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <xTaskResumeAll+0xf8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d15b      	bne.n	8002f36 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <xTaskResumeAll+0x100>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d057      	beq.n	8002f36 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e86:	e02e      	b.n	8002ee6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e88:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <xTaskResumeAll+0x104>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	3318      	adds	r3, #24
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fedb 	bl	8004c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fed6 	bl	8004c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <xTaskResumeAll+0x108>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <xTaskResumeAll+0x108>)
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <xTaskResumeAll+0x10c>)
 8002ec4:	441a      	add	r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f001 fe63 	bl	8004b98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <xTaskResumeAll+0x110>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <xTaskResumeAll+0x114>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <xTaskResumeAll+0x104>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1cc      	bne.n	8002e88 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <xTaskResumeAll+0x118>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <xTaskResumeAll+0xce>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002ef6:	e00c      	b.n	8002f12 <xTaskResumeAll+0xc6>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002ef8:	f000 f848 	bl	8002f8c <xTaskIncrementTick>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <xTaskResumeAll+0xbc>
						{
							xYieldPending = pdTRUE;
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <xTaskResumeAll+0x114>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <xTaskResumeAll+0x118>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <xTaskResumeAll+0x118>)
 8002f10:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <xTaskResumeAll+0x118>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ee      	bne.n	8002ef8 <xTaskResumeAll+0xac>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <xTaskResumeAll+0x114>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d109      	bne.n	8002f36 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <xTaskResumeAll+0x11c>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f36:	f001 fd35 	bl	80049a4 <vPortExitCritical>

	return xAlreadyYielded;
 8002f3a:	687b      	ldr	r3, [r7, #4]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200106e0 	.word	0x200106e0
 8002f48:	0800a5fc 	.word	0x0800a5fc
 8002f4c:	200106bc 	.word	0x200106bc
 8002f50:	2001067c 	.word	0x2001067c
 8002f54:	200106c4 	.word	0x200106c4
 8002f58:	200105e8 	.word	0x200105e8
 8002f5c:	200105e4 	.word	0x200105e4
 8002f60:	200106d0 	.word	0x200106d0
 8002f64:	200106cc 	.word	0x200106cc
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <xTaskGetTickCount+0x1c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	200106c0 	.word	0x200106c0

08002f8c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f96:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <xTaskIncrementTick+0x144>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8088 	bne.w	80030b0 <xTaskIncrementTick+0x124>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <xTaskIncrementTick+0x148>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <xTaskIncrementTick+0x148>)
 8002fa8:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <xTaskIncrementTick+0x148>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11a      	bne.n	8002fec <xTaskIncrementTick+0x60>
			{
				taskSWITCH_DELAYED_LISTS();
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <xTaskIncrementTick+0x3e>
 8002fc0:	f240 70aa 	movw	r0, #1962	; 0x7aa
 8002fc4:	4945      	ldr	r1, [pc, #276]	; (80030dc <xTaskIncrementTick+0x150>)
 8002fc6:	f003 fdb3 	bl	8006b30 <vAssertCalled>
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b43      	ldr	r3, [pc, #268]	; (80030e0 <xTaskIncrementTick+0x154>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <xTaskIncrementTick+0x154>)
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <xTaskIncrementTick+0x158>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <xTaskIncrementTick+0x158>)
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f000 fbd8 	bl	800379c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002fec:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <xTaskIncrementTick+0x15c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d34d      	bcc.n	8003092 <xTaskIncrementTick+0x106>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <xTaskIncrementTick+0x78>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <xTaskIncrementTick+0x7a>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <xTaskIncrementTick+0x88>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <xTaskIncrementTick+0x15c>)
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	601a      	str	r2, [r3, #0]
						break;
 8003012:	e03e      	b.n	8003092 <xTaskIncrementTick+0x106>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d203      	bcs.n	8003034 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800302c:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <xTaskIncrementTick+0x15c>)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
							break;
 8003032:	e02e      	b.n	8003092 <xTaskIncrementTick+0x106>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3304      	adds	r3, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f001 fe09 	bl	8004c50 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <xTaskIncrementTick+0xc4>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3318      	adds	r3, #24
 800304a:	4618      	mov	r0, r3
 800304c:	f001 fe00 	bl	8004c50 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <xTaskIncrementTick+0x160>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	431a      	orrs	r2, r3
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <xTaskIncrementTick+0x160>)
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <xTaskIncrementTick+0x164>)
 8003070:	441a      	add	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3304      	adds	r3, #4
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f001 fd8d 	bl	8004b98 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <xTaskIncrementTick+0x168>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	429a      	cmp	r2, r3
 800308a:	d301      	bcc.n	8003090 <xTaskIncrementTick+0x104>
							{
								xSwitchRequired = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8003090:	e7b1      	b.n	8002ff6 <xTaskIncrementTick+0x6a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <xTaskIncrementTick+0x168>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4915      	ldr	r1, [pc, #84]	; (80030f0 <xTaskIncrementTick+0x164>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d907      	bls.n	80030ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e004      	b.n	80030ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <xTaskIncrementTick+0x16c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <xTaskIncrementTick+0x16c>)
 80030b8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <xTaskIncrementTick+0x170>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030c6:	697b      	ldr	r3, [r7, #20]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200106e0 	.word	0x200106e0
 80030d4:	200106c0 	.word	0x200106c0
 80030d8:	20010674 	.word	0x20010674
 80030dc:	0800a5fc 	.word	0x0800a5fc
 80030e0:	20010678 	.word	0x20010678
 80030e4:	200106d4 	.word	0x200106d4
 80030e8:	200106dc 	.word	0x200106dc
 80030ec:	200106c4 	.word	0x200106c4
 80030f0:	200105e8 	.word	0x200105e8
 80030f4:	200105e4 	.word	0x200105e4
 80030f8:	200106cc 	.word	0x200106cc
 80030fc:	200106d0 	.word	0x200106d0

08003100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <vTaskSwitchContext+0xe0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800310e:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <vTaskSwitchContext+0xe4>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e060      	b.n	80031d8 <vTaskSwitchContext+0xd8>
	}
	else
	{
		xYieldPending = pdFALSE;
 8003116:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <vTaskSwitchContext+0xe4>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <vTaskSwitchContext+0xe8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d111      	bne.n	8003158 <vTaskSwitchContext+0x58>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3304      	adds	r3, #4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d10b      	bne.n	8003158 <vTaskSwitchContext+0x58>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3308      	adds	r3, #8
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d105      	bne.n	8003158 <vTaskSwitchContext+0x58>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	330c      	adds	r3, #12
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d008      	beq.n	800316a <vTaskSwitchContext+0x6a>
 8003158:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <vTaskSwitchContext+0xe8>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <vTaskSwitchContext+0xe8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3334      	adds	r3, #52	; 0x34
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f003 fcd5 	bl	8006b14 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <vTaskSwitchContext+0xec>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f1c3 031f 	rsb	r3, r3, #31
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	491b      	ldr	r1, [pc, #108]	; (80031f0 <vTaskSwitchContext+0xf0>)
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <vTaskSwitchContext+0x9e>
 8003194:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8003198:	4916      	ldr	r1, [pc, #88]	; (80031f4 <vTaskSwitchContext+0xf4>)
 800319a:	f003 fcc9 	bl	8006b30 <vAssertCalled>
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <vTaskSwitchContext+0xf0>)
 80031aa:	4413      	add	r3, r2
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	3308      	adds	r3, #8
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d104      	bne.n	80031ce <vTaskSwitchContext+0xce>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <vTaskSwitchContext+0xe8>)
 80031d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200106e0 	.word	0x200106e0
 80031e4:	200106d0 	.word	0x200106d0
 80031e8:	200105e4 	.word	0x200105e4
 80031ec:	200106c4 	.word	0x200106c4
 80031f0:	200105e8 	.word	0x200105e8
 80031f4:	0800a5fc 	.word	0x0800a5fc

080031f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <vTaskPlaceOnEventList+0x1a>
 8003208:	f640 00da 	movw	r0, #2266	; 0x8da
 800320c:	491a      	ldr	r1, [pc, #104]	; (8003278 <vTaskPlaceOnEventList+0x80>)
 800320e:	f003 fc8f 	bl	8006b30 <vAssertCalled>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <vTaskPlaceOnEventList+0x84>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3318      	adds	r3, #24
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4619      	mov	r1, r3
 800321c:	f001 fce0 	bl	8004be0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <vTaskPlaceOnEventList+0x84>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fd12 	bl	8004c50 <uxListRemove>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <vTaskPlaceOnEventList+0x52>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <vTaskPlaceOnEventList+0x84>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2201      	movs	r2, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <vTaskPlaceOnEventList+0x88>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	401a      	ands	r2, r3
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <vTaskPlaceOnEventList+0x88>)
 8003248:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d107      	bne.n	8003262 <vTaskPlaceOnEventList+0x6a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <vTaskPlaceOnEventList+0x84>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3304      	adds	r3, #4
 8003258:	480a      	ldr	r0, [pc, #40]	; (8003284 <vTaskPlaceOnEventList+0x8c>)
 800325a:	4619      	mov	r1, r3
 800325c:	f001 fc9c 	bl	8004b98 <vListInsertEnd>
 8003260:	e007      	b.n	8003272 <vTaskPlaceOnEventList+0x7a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <vTaskPlaceOnEventList+0x90>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa17 	bl	80036a0 <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800a5fc 	.word	0x0800a5fc
 800327c:	200105e4 	.word	0x200105e4
 8003280:	200106c4 	.word	0x200106c4
 8003284:	200106a8 	.word	0x200106a8
 8003288:	200106c0 	.word	0x200106c0

0800328c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <vTaskPlaceOnEventListRestricted+0x1c>
 800329e:	f640 1059 	movw	r0, #2393	; 0x959
 80032a2:	491a      	ldr	r1, [pc, #104]	; (800330c <vTaskPlaceOnEventListRestricted+0x80>)
 80032a4:	f003 fc44 	bl	8006b30 <vAssertCalled>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <vTaskPlaceOnEventListRestricted+0x84>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3318      	adds	r3, #24
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f001 fc71 	bl	8004b98 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <vTaskPlaceOnEventListRestricted+0x84>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fcc7 	bl	8004c50 <uxListRemove>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10b      	bne.n	80032e0 <vTaskPlaceOnEventListRestricted+0x54>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <vTaskPlaceOnEventListRestricted+0x84>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43da      	mvns	r2, r3
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <vTaskPlaceOnEventListRestricted+0x88>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	401a      	ands	r2, r3
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <vTaskPlaceOnEventListRestricted+0x88>)
 80032de:	601a      	str	r2, [r3, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <vTaskPlaceOnEventListRestricted+0x6a>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <vTaskPlaceOnEventListRestricted+0x84>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3304      	adds	r3, #4
 80032ec:	480a      	ldr	r0, [pc, #40]	; (8003318 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032ee:	4619      	mov	r1, r3
 80032f0:	f001 fc52 	bl	8004b98 <vListInsertEnd>
 80032f4:	e007      	b.n	8003306 <vTaskPlaceOnEventListRestricted+0x7a>
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <vTaskPlaceOnEventListRestricted+0x90>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f000 f9cd 	bl	80036a0 <prvAddCurrentTaskToDelayedList>
			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
			defined. */
			( void ) xWaitIndefinitely;
		}
		#endif
	}
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	0800a5fc 	.word	0x0800a5fc
 8003310:	200105e4 	.word	0x200105e4
 8003314:	200106c4 	.word	0x200106c4
 8003318:	200106a8 	.word	0x200106a8
 800331c:	200106c0 	.word	0x200106c0

08003320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <xTaskRemoveFromEventList+0x20>
 8003336:	f640 10b4 	movw	r0, #2484	; 0x9b4
 800333a:	4921      	ldr	r1, [pc, #132]	; (80033c0 <xTaskRemoveFromEventList+0xa0>)
 800333c:	f003 fbf8 	bl	8006b30 <vAssertCalled>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3318      	adds	r3, #24
 8003344:	4618      	mov	r0, r3
 8003346:	f001 fc83 	bl	8004c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <xTaskRemoveFromEventList+0xa4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11c      	bne.n	800338c <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3304      	adds	r3, #4
 8003356:	4618      	mov	r0, r3
 8003358:	f001 fc7a 	bl	8004c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <xTaskRemoveFromEventList+0xa8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	431a      	orrs	r2, r3
 800336a:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <xTaskRemoveFromEventList+0xa8>)
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <xTaskRemoveFromEventList+0xac>)
 800337c:	441a      	add	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3304      	adds	r3, #4
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f001 fc07 	bl	8004b98 <vListInsertEnd>
 800338a:	e005      	b.n	8003398 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	3318      	adds	r3, #24
 8003390:	480f      	ldr	r0, [pc, #60]	; (80033d0 <xTaskRemoveFromEventList+0xb0>)
 8003392:	4619      	mov	r1, r3
 8003394:	f001 fc00 	bl	8004b98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <xTaskRemoveFromEventList+0xb4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d905      	bls.n	80033b2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <xTaskRemoveFromEventList+0xb8>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e001      	b.n	80033b6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	0800a5fc 	.word	0x0800a5fc
 80033c4:	200106e0 	.word	0x200106e0
 80033c8:	200106c4 	.word	0x200106c4
 80033cc:	200105e8 	.word	0x200105e8
 80033d0:	2001067c 	.word	0x2001067c
 80033d4:	200105e4 	.word	0x200105e4
 80033d8:	200106d0 	.word	0x200106d0

080033dc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <vTaskSetTimeOutState+0x18>
 80033ea:	f640 2014 	movw	r0, #2580	; 0xa14
 80033ee:	4907      	ldr	r1, [pc, #28]	; (800340c <vTaskSetTimeOutState+0x30>)
 80033f0:	f003 fb9e 	bl	8006b30 <vAssertCalled>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <vTaskSetTimeOutState+0x34>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <vTaskSetTimeOutState+0x38>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]
}
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	0800a5fc 	.word	0x0800a5fc
 8003410:	200106d4 	.word	0x200106d4
 8003414:	200106c0 	.word	0x200106c0

08003418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <xTaskCheckForTimeOut+0x1a>
 8003428:	f640 201e 	movw	r0, #2590	; 0xa1e
 800342c:	4922      	ldr	r1, [pc, #136]	; (80034b8 <xTaskCheckForTimeOut+0xa0>)
 800342e:	f003 fb7f 	bl	8006b30 <vAssertCalled>
	configASSERT( pxTicksToWait );
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <xTaskCheckForTimeOut+0x2a>
 8003438:	f640 201f 	movw	r0, #2591	; 0xa1f
 800343c:	491e      	ldr	r1, [pc, #120]	; (80034b8 <xTaskCheckForTimeOut+0xa0>)
 800343e:	f003 fb77 	bl	8006b30 <vAssertCalled>

	taskENTER_CRITICAL();
 8003442:	f001 fa85 	bl	8004950 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <xTaskCheckForTimeOut+0xa4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d102      	bne.n	800345c <xTaskCheckForTimeOut+0x44>
			{
				xReturn = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e026      	b.n	80034aa <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <xTaskCheckForTimeOut+0xa8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d007      	beq.n	8003478 <xTaskCheckForTimeOut+0x60>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d802      	bhi.n	8003478 <xTaskCheckForTimeOut+0x60>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003472:	2301      	movs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e018      	b.n	80034aa <xTaskCheckForTimeOut+0x92>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d20e      	bcs.n	80034a6 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1acb      	subs	r3, r1, r3
 8003494:	441a      	add	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff9e 	bl	80033dc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034aa:	f001 fa7b 	bl	80049a4 <vPortExitCritical>

	return xReturn;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	0800a5fc 	.word	0x0800a5fc
 80034bc:	200106c0 	.word	0x200106c0
 80034c0:	200106d4 	.word	0x200106d4

080034c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <vTaskMissedYield+0x14>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	200106d0 	.word	0x200106d0

080034dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80034e4:	f000 f8a2 	bl	800362c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <prvIdleTask+0x28>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d907      	bls.n	8003500 <prvIdleTask+0x24>
			{
				taskYIELD();
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <prvIdleTask+0x2c>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003500:	e7f0      	b.n	80034e4 <prvIdleTask+0x8>
 8003502:	bf00      	nop
 8003504:	200105e8 	.word	0x200105e8
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <prvInitialiseTCBVariables>:

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e012      	b.n	8003546 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4413      	add	r3, r2
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	440b      	add	r3, r1
 800352e:	3330      	adds	r3, #48	; 0x30
 8003530:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4413      	add	r3, r2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d100      	bne.n	8003540 <prvInitialiseTCBVariables+0x34>
		{
			break;
 800353e:	e005      	b.n	800354c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3301      	adds	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b0f      	cmp	r3, #15
 800354a:	d9e9      	bls.n	8003520 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d901      	bls.n	800355e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800355a:	2304      	movs	r3, #4
 800355c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	64da      	str	r2, [r3, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fb03 	bl	8004b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3318      	adds	r3, #24
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fafe 	bl	8004b80 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1c3 0205 	rsb	r2, r3, #5
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
		pxTCB->eNotifyState = eNotWaitingNotification;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop

080035b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	e00c      	b.n	80035d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <prvInitialiseTaskLists+0x5c>)
 80035c8:	4413      	add	r3, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fab8 	bl	8004b40 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3301      	adds	r3, #1
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d9ef      	bls.n	80035bc <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <prvInitialiseTaskLists+0x60>)
 80035de:	f001 faaf 	bl	8004b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035e2:	480c      	ldr	r0, [pc, #48]	; (8003614 <prvInitialiseTaskLists+0x64>)
 80035e4:	f001 faac 	bl	8004b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035e8:	480b      	ldr	r0, [pc, #44]	; (8003618 <prvInitialiseTaskLists+0x68>)
 80035ea:	f001 faa9 	bl	8004b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035ee:	480b      	ldr	r0, [pc, #44]	; (800361c <prvInitialiseTaskLists+0x6c>)
 80035f0:	f001 faa6 	bl	8004b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035f4:	480a      	ldr	r0, [pc, #40]	; (8003620 <prvInitialiseTaskLists+0x70>)
 80035f6:	f001 faa3 	bl	8004b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvInitialiseTaskLists+0x74>)
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <prvInitialiseTaskLists+0x60>)
 80035fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <prvInitialiseTaskLists+0x78>)
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <prvInitialiseTaskLists+0x64>)
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200105e8 	.word	0x200105e8
 8003610:	2001064c 	.word	0x2001064c
 8003614:	20010660 	.word	0x20010660
 8003618:	2001067c 	.word	0x2001067c
 800361c:	20010690 	.word	0x20010690
 8003620:	200106a8 	.word	0x200106a8
 8003624:	20010674 	.word	0x20010674
 8003628:	20010678 	.word	0x20010678

0800362c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8003632:	e028      	b.n	8003686 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003634:	f7ff fbfc 	bl	8002e30 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <prvCheckTasksWaitingTermination+0x68>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2300      	movne	r3, #0
 8003642:	2301      	moveq	r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003648:	f7ff fc00 	bl	8002e4c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003652:	f001 f97d 	bl	8004950 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <prvCheckTasksWaitingTermination+0x68>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f001 faf4 	bl	8004c50 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <prvCheckTasksWaitingTermination+0x6c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <prvCheckTasksWaitingTermination+0x6c>)
 8003670:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvCheckTasksWaitingTermination+0x70>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <prvCheckTasksWaitingTermination+0x70>)
 800367a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800367c:	f001 f992 	bl	80049a4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	f000 f87b 	bl	800377c <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <prvCheckTasksWaitingTermination+0x70>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1d2      	bne.n	8003634 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20010690 	.word	0x20010690
 8003698:	200106bc 	.word	0x200106bc
 800369c:	200106a4 	.word	0x200106a4

080036a0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x58>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <prvAddCurrentTaskToDelayedList+0x5c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d209      	bcs.n	80036ce <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <prvAddCurrentTaskToDelayedList+0x60>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x58>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f001 fa8a 	bl	8004be0 <vListInsert>
 80036cc:	e010      	b.n	80036f0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <prvAddCurrentTaskToDelayedList+0x64>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x58>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	f001 fa80 	bl	8004be0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <prvAddCurrentTaskToDelayedList+0x68>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d202      	bcs.n	80036f0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <prvAddCurrentTaskToDelayedList+0x68>)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200105e4 	.word	0x200105e4
 80036fc:	200106c0 	.word	0x200106c0
 8003700:	20010678 	.word	0x20010678
 8003704:	20010674 	.word	0x20010674
 8003708:	200106dc 	.word	0x200106dc

0800370c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <prvAllocateTCBAndStack+0x20>
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fe7c 	bl	8004420 <pvPortMalloc>
 8003728:	4603      	mov	r3, r0
 800372a:	e000      	b.n	800372e <prvAllocateTCBAndStack+0x22>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00e      	beq.n	8003754 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003736:	205c      	movs	r0, #92	; 0x5c
 8003738:	f000 fe72 	bl	8004420 <pvPortMalloc>
 800373c:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
 800374a:	e005      	b.n	8003758 <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f000 ff1d 	bl	800458c <vPortFree>
 8003752:	e001      	b.n	8003758 <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <prvAllocateTCBAndStack+0x64>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4610      	mov	r0, r2
 8003768:	21a5      	movs	r1, #165	; 0xa5
 800376a:	461a      	mov	r2, r3
 800376c:	f003 fa29 	bl	8006bc2 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 8003770:	68fb      	ldr	r3, [r7, #12]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop

0800377c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4618      	mov	r0, r3
 800378a:	f000 feff 	bl	800458c <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fefc 	bl	800458c <vPortFree>
	}
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop

0800379c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <prvResetNextTaskUnblockTime+0x40>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <prvResetNextTaskUnblockTime+0x14>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <prvResetNextTaskUnblockTime+0x16>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvResetNextTaskUnblockTime+0x44>)
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e008      	b.n	80037d2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <prvResetNextTaskUnblockTime+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <prvResetNextTaskUnblockTime+0x44>)
 80037d0:	601a      	str	r2, [r3, #0]
	}
}
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20010674 	.word	0x20010674
 80037e0:	200106dc 	.word	0x200106dc

080037e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <xTaskGetSchedulerState+0x34>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037f2:	2301      	movs	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	e008      	b.n	800380a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <xTaskGetSchedulerState+0x38>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003800:	2302      	movs	r3, #2
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e001      	b.n	800380a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800380a:	687b      	ldr	r3, [r7, #4]
	}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	200106c8 	.word	0x200106c8
 800381c:	200106e0 	.word	0x200106e0

08003820 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d062      	beq.n	80038f8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <vTaskPriorityInherit+0xe0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	429a      	cmp	r2, r3
 800383e:	d25b      	bcs.n	80038f8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db06      	blt.n	8003856 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <vTaskPriorityInherit+0xe0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f1c3 0205 	rsb	r2, r3, #5
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6959      	ldr	r1, [r3, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <vTaskPriorityInherit+0xe4>)
 8003868:	4413      	add	r3, r2
 800386a:	4299      	cmp	r1, r3
 800386c:	d101      	bne.n	8003872 <vTaskPriorityInherit+0x52>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <vTaskPriorityInherit+0x54>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03a      	beq.n	80038ee <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f9e7 	bl	8004c50 <uxListRemove>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d115      	bne.n	80038b4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	491d      	ldr	r1, [pc, #116]	; (8003904 <vTaskPriorityInherit+0xe4>)
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <vTaskPriorityInherit+0x94>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	2201      	movs	r2, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43da      	mvns	r2, r3
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <vTaskPriorityInherit+0xe8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	401a      	ands	r2, r3
 80038b0:	4b15      	ldr	r3, [pc, #84]	; (8003908 <vTaskPriorityInherit+0xe8>)
 80038b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <vTaskPriorityInherit+0xe0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	2201      	movs	r2, #1
 80038c4:	409a      	lsls	r2, r3
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <vTaskPriorityInherit+0xe8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <vTaskPriorityInherit+0xe8>)
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4a09      	ldr	r2, [pc, #36]	; (8003904 <vTaskPriorityInherit+0xe4>)
 80038de:	441a      	add	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f001 f956 	bl	8004b98 <vListInsertEnd>
 80038ec:	e004      	b.n	80038f8 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <vTaskPriorityInherit+0xe0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200105e4 	.word	0x200105e4
 8003904:	200105e8 	.word	0x200105e8
 8003908:	200106c4 	.word	0x200106c4

0800390c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d062      	beq.n	80039e8 <xTaskPriorityDisinherit+0xdc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003922:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <xTaskPriorityDisinherit+0xe8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	d004      	beq.n	8003936 <xTaskPriorityDisinherit+0x2a>
 800392c:	f640 50a7 	movw	r0, #3495	; 0xda7
 8003930:	4931      	ldr	r1, [pc, #196]	; (80039f8 <xTaskPriorityDisinherit+0xec>)
 8003932:	f003 f8fd 	bl	8006b30 <vAssertCalled>

			configASSERT( pxTCB->uxMutexesHeld );
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <xTaskPriorityDisinherit+0x3c>
 800393e:	f640 50a9 	movw	r0, #3497	; 0xda9
 8003942:	492d      	ldr	r1, [pc, #180]	; (80039f8 <xTaskPriorityDisinherit+0xec>)
 8003944:	f003 f8f4 	bl	8006b30 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	1e5a      	subs	r2, r3, #1
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	429a      	cmp	r2, r3
 800395c:	d044      	beq.n	80039e8 <xTaskPriorityDisinherit+0xdc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	d140      	bne.n	80039e8 <xTaskPriorityDisinherit+0xdc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f970 	bl	8004c50 <uxListRemove>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d115      	bne.n	80039a2 <xTaskPriorityDisinherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	4920      	ldr	r1, [pc, #128]	; (80039fc <xTaskPriorityDisinherit+0xf0>)
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xTaskPriorityDisinherit+0x96>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	2201      	movs	r2, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <xTaskPriorityDisinherit+0xf4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	401a      	ands	r2, r3
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <xTaskPriorityDisinherit+0xf4>)
 80039a0:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f1c3 0205 	rsb	r2, r3, #5
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <xTaskPriorityDisinherit+0xf4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <xTaskPriorityDisinherit+0xf4>)
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <xTaskPriorityDisinherit+0xf0>)
 80039d6:	441a      	add	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3304      	adds	r3, #4
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	f001 f8da 	bl	8004b98 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039e8:	68fb      	ldr	r3, [r7, #12]
	}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200105e4 	.word	0x200105e4
 80039f8:	0800a5fc 	.word	0x0800a5fc
 80039fc:	200105e8 	.word	0x200105e8
 8003a00:	200106c4 	.word	0x200106c4

08003a04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a16:	3201      	adds	r2, #1
 8003a18:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003a1a:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
	}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	200105e4 	.word	0x200105e4

08003a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <xQueueGenericReset+0x1e>
 8003a40:	f44f 7084 	mov.w	r0, #264	; 0x108
 8003a44:	4929      	ldr	r1, [pc, #164]	; (8003aec <xQueueGenericReset+0xc0>)
 8003a46:	f003 f873 	bl	8006b30 <vAssertCalled>

	taskENTER_CRITICAL();
 8003a4a:	f000 ff81 	bl	8004950 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	441a      	add	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	441a      	add	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295
 8003a98:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d114      	bne.n	8003aca <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01a      	beq.n	8003ade <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3310      	adds	r3, #16
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fc37 	bl	8003320 <xTaskRemoveFromEventList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d112      	bne.n	8003ade <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <xQueueGenericReset+0xc4>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	e009      	b.n	8003ade <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3310      	adds	r3, #16
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 f836 	bl	8004b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3324      	adds	r3, #36	; 0x24
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f831 	bl	8004b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ade:	f000 ff61 	bl	80049a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ae2:	2301      	movs	r3, #1
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	0800a62c 	.word	0x0800a62c
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d104      	bne.n	8003b16 <xQueueGenericCreate+0x22>
 8003b0c:	f240 1043 	movw	r0, #323	; 0x143
 8003b10:	4921      	ldr	r1, [pc, #132]	; (8003b98 <xQueueGenericCreate+0xa4>)
 8003b12:	f003 f80d 	bl	8006b30 <vAssertCalled>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <xQueueGenericCreate+0x2e>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e005      	b.n	8003b2e <xQueueGenericCreate+0x3a>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3358      	adds	r3, #88	; 0x58
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fc74 	bl	8004420 <pvPortMalloc>
 8003b38:	6178      	str	r0, [r7, #20]

	if( pxNewQueue != NULL )
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01e      	beq.n	8003b7e <xQueueGenericCreate+0x8a>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <xQueueGenericCreate+0x5a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e004      	b.n	8003b58 <xQueueGenericCreate+0x64>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	601a      	str	r2, [r3, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b64:	6978      	ldr	r0, [r7, #20]
 8003b66:	2101      	movs	r1, #1
 8003b68:	f7ff ff60 	bl	8003a2c <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	79fa      	ldrb	r2, [r7, #7]
 8003b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	61bb      	str	r3, [r7, #24]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <xQueueGenericCreate+0x9a>
 8003b84:	f240 107f 	movw	r0, #383	; 0x17f
 8003b88:	4903      	ldr	r1, [pc, #12]	; (8003b98 <xQueueGenericCreate+0xa4>)
 8003b8a:	f002 ffd1 	bl	8006b30 <vAssertCalled>

	return xReturn;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	0800a62c 	.word	0x0800a62c

08003b9c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <xQueueGenericSend+0x26>
 8003bb8:	f240 2067 	movw	r0, #615	; 0x267
 8003bbc:	4971      	ldr	r1, [pc, #452]	; (8003d84 <xQueueGenericSend+0x1e8>)
 8003bbe:	f002 ffb7 	bl	8006b30 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <xQueueGenericSend+0x34>
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <xQueueGenericSend+0x38>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <xQueueGenericSend+0x3a>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <xQueueGenericSend+0x48>
 8003bda:	f44f 701a 	mov.w	r0, #616	; 0x268
 8003bde:	4969      	ldr	r1, [pc, #420]	; (8003d84 <xQueueGenericSend+0x1e8>)
 8003be0:	f002 ffa6 	bl	8006b30 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d103      	bne.n	8003bf2 <xQueueGenericSend+0x56>
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <xQueueGenericSend+0x5a>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <xQueueGenericSend+0x5c>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <xQueueGenericSend+0x6a>
 8003bfc:	f240 2069 	movw	r0, #617	; 0x269
 8003c00:	4960      	ldr	r1, [pc, #384]	; (8003d84 <xQueueGenericSend+0x1e8>)
 8003c02:	f002 ff95 	bl	8006b30 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c06:	f7ff fded 	bl	80037e4 <xTaskGetSchedulerState>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <xQueueGenericSend+0x7a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <xQueueGenericSend+0x7e>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <xQueueGenericSend+0x80>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <xQueueGenericSend+0x8e>
 8003c20:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8003c24:	4957      	ldr	r1, [pc, #348]	; (8003d84 <xQueueGenericSend+0x1e8>)
 8003c26:	f002 ff83 	bl	8006b30 <vAssertCalled>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2a:	f000 fe91 	bl	8004950 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <xQueueGenericSend+0xa4>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d13d      	bne.n	8003cbc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c40:	6a38      	ldr	r0, [r7, #32]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	f000 fa2f 	bl	80040a8 <prvCopyDataToQueue>
 8003c4a:	61f8      	str	r0, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00f      	beq.n	8003c74 <xQueueGenericSend+0xd8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 8003c54:	6a38      	ldr	r0, [r7, #32]
 8003c56:	6839      	ldr	r1, [r7, #0]
 8003c58:	f000 fb98 	bl	800438c <prvNotifyQueueSetContainer>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d128      	bne.n	8003cb4 <xQueueGenericSend+0x118>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c62:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <xQueueGenericSend+0x1ec>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e01f      	b.n	8003cb4 <xQueueGenericSend+0x118>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <xQueueGenericSend+0x102>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fb4d 	bl	8003320 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d113      	bne.n	8003cb4 <xQueueGenericSend+0x118>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <xQueueGenericSend+0x1ec>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	e00a      	b.n	8003cb4 <xQueueGenericSend+0x118>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <xQueueGenericSend+0x118>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <xQueueGenericSend+0x1ec>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cb4:	f000 fe76 	bl	80049a4 <vPortExitCritical>
				return pdPASS;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e05f      	b.n	8003d7c <xQueueGenericSend+0x1e0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cc2:	f000 fe6f 	bl	80049a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e058      	b.n	8003d7c <xQueueGenericSend+0x1e0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fb81 	bl	80033dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cde:	f000 fe61 	bl	80049a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce2:	f7ff f8a5 	bl	8002e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ce6:	f000 fe33 	bl	8004950 <vPortEnterCritical>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d102      	bne.n	8003cfa <xQueueGenericSend+0x15e>
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d102      	bne.n	8003d0a <xQueueGenericSend+0x16e>
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2200      	movs	r2, #0
 8003d08:	649a      	str	r2, [r3, #72]	; 0x48
 8003d0a:	f000 fe4b 	bl	80049a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d0e:	f107 0214 	add.w	r2, r7, #20
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	f7ff fb7e 	bl	8003418 <xTaskCheckForTimeOut>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d124      	bne.n	8003d6c <xQueueGenericSend+0x1d0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d22:	6a38      	ldr	r0, [r7, #32]
 8003d24:	f000 fac4 	bl	80042b0 <prvIsQueueFull>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d018      	beq.n	8003d60 <xQueueGenericSend+0x1c4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f103 0210 	add.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7ff fa5d 	bl	80031f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d3e:	6a38      	ldr	r0, [r7, #32]
 8003d40:	f000 fa46 	bl	80041d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d44:	f7ff f882 	bl	8002e4c <xTaskResumeAll>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <xQueueGenericSend+0x1de>
				{
					portYIELD_WITHIN_API();
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <xQueueGenericSend+0x1ec>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	e00c      	b.n	8003d7a <xQueueGenericSend+0x1de>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d60:	6a38      	ldr	r0, [r7, #32]
 8003d62:	f000 fa35 	bl	80041d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d66:	f7ff f871 	bl	8002e4c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003d6a:	e75e      	b.n	8003c2a <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d6c:	6a38      	ldr	r0, [r7, #32]
 8003d6e:	f000 fa2f 	bl	80041d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d72:	f7ff f86b 	bl	8002e4c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <xQueueGenericSend+0x1e0>
		}
	}
 8003d7a:	e756      	b.n	8003c2a <xQueueGenericSend+0x8e>
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	; 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	0800a62c 	.word	0x0800a62c
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <xQueueGenericSendFromISR+0x22>
 8003da4:	f240 4024 	movw	r0, #1060	; 0x424
 8003da8:	4941      	ldr	r1, [pc, #260]	; (8003eb0 <xQueueGenericSendFromISR+0x124>)
 8003daa:	f002 fec1 	bl	8006b30 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <xQueueGenericSendFromISR+0x30>
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <xQueueGenericSendFromISR+0x34>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <xQueueGenericSendFromISR+0x36>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d104      	bne.n	8003dd0 <xQueueGenericSendFromISR+0x44>
 8003dc6:	f240 4025 	movw	r0, #1061	; 0x425
 8003dca:	4939      	ldr	r1, [pc, #228]	; (8003eb0 <xQueueGenericSendFromISR+0x124>)
 8003dcc:	f002 feb0 	bl	8006b30 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d103      	bne.n	8003dde <xQueueGenericSendFromISR+0x52>
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <xQueueGenericSendFromISR+0x56>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <xQueueGenericSendFromISR+0x58>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <xQueueGenericSendFromISR+0x66>
 8003de8:	f240 4026 	movw	r0, #1062	; 0x426
 8003dec:	4930      	ldr	r1, [pc, #192]	; (8003eb0 <xQueueGenericSendFromISR+0x124>)
 8003dee:	f002 fe9f 	bl	8006b30 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003df2:	f000 fe73 	bl	8004adc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003df6:	f3ef 8211 	mrs	r2, BASEPRI
 8003dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003dfe:	b672      	cpsid	i
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	b662      	cpsie	i
 8003e0e:	61ba      	str	r2, [r7, #24]
 8003e10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e14:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <xQueueGenericSendFromISR+0x9c>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d136      	bne.n	8003e96 <xQueueGenericSendFromISR+0x10a>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e28:	6a38      	ldr	r0, [r7, #32]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	f000 f93b 	bl	80040a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d124      	bne.n	8003e86 <xQueueGenericSendFromISR+0xfa>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <xQueueGenericSendFromISR+0xd4>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 8003e44:	6a38      	ldr	r0, [r7, #32]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	f000 faa0 	bl	800438c <prvNotifyQueueSetContainer>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11e      	bne.n	8003e90 <xQueueGenericSendFromISR+0x104>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <xQueueGenericSendFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e017      	b.n	8003e90 <xQueueGenericSendFromISR+0x104>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <xQueueGenericSendFromISR+0x104>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	3324      	adds	r3, #36	; 0x24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fa57 	bl	8003320 <xTaskRemoveFromEventList>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <xQueueGenericSendFromISR+0x104>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <xQueueGenericSendFromISR+0x104>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e004      	b.n	8003e90 <xQueueGenericSendFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8003e90:	2301      	movs	r3, #1
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	e001      	b.n	8003e9a <xQueueGenericSendFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	0800a62c 	.word	0x0800a62c

08003eb4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <xQueueGenericReceive+0x26>
 8003ed0:	f240 505b 	movw	r0, #1371	; 0x55b
 8003ed4:	4972      	ldr	r1, [pc, #456]	; (80040a0 <xQueueGenericReceive+0x1ec>)
 8003ed6:	f002 fe2b 	bl	8006b30 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <xQueueGenericReceive+0x34>
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <xQueueGenericReceive+0x38>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <xQueueGenericReceive+0x3a>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <xQueueGenericReceive+0x48>
 8003ef2:	f240 505c 	movw	r0, #1372	; 0x55c
 8003ef6:	496a      	ldr	r1, [pc, #424]	; (80040a0 <xQueueGenericReceive+0x1ec>)
 8003ef8:	f002 fe1a 	bl	8006b30 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003efc:	f7ff fc72 	bl	80037e4 <xTaskGetSchedulerState>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xQueueGenericReceive+0x58>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGenericReceive+0x5c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericReceive+0x5e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <xQueueGenericReceive+0x6c>
 8003f16:	f240 505f 	movw	r0, #1375	; 0x55f
 8003f1a:	4961      	ldr	r1, [pc, #388]	; (80040a0 <xQueueGenericReceive+0x1ec>)
 8003f1c:	f002 fe08 	bl	8006b30 <vAssertCalled>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f20:	f000 fd16 	bl	8004950 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d047      	beq.n	8003fbc <xQueueGenericReceive+0x108>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f32:	6a38      	ldr	r0, [r7, #32]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	f000 f925 	bl	8004184 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d122      	bne.n	8003f86 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <xQueueGenericReceive+0xa8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003f52:	f7ff fd57 	bl	8003a04 <pvTaskIncrementMutexHeldCount>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d027      	beq.n	8003fb4 <xQueueGenericReceive+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	3310      	adds	r3, #16
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff f9d9 	bl	8003320 <xTaskRemoveFromEventList>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d11f      	bne.n	8003fb4 <xQueueGenericReceive+0x100>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003f74:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <xQueueGenericReceive+0x1f0>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	e016      	b.n	8003fb4 <xQueueGenericReceive+0x100>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00f      	beq.n	8003fb4 <xQueueGenericReceive+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	3324      	adds	r3, #36	; 0x24
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff f9c1 	bl	8003320 <xTaskRemoveFromEventList>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <xQueueGenericReceive+0x100>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <xQueueGenericReceive+0x1f0>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003fb4:	f000 fcf6 	bl	80049a4 <vPortExitCritical>
				return pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e06c      	b.n	8004096 <xQueueGenericReceive+0x1e2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <xQueueGenericReceive+0x116>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc2:	f000 fcef 	bl	80049a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e065      	b.n	8004096 <xQueueGenericReceive+0x1e2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <xQueueGenericReceive+0x12a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fa01 	bl	80033dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fde:	f000 fce1 	bl	80049a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe2:	f7fe ff25 	bl	8002e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fe6:	f000 fcb3 	bl	8004950 <vPortEnterCritical>
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d102      	bne.n	8003ffa <xQueueGenericReceive+0x146>
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <xQueueGenericReceive+0x156>
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2200      	movs	r2, #0
 8004008:	649a      	str	r2, [r3, #72]	; 0x48
 800400a:	f000 fccb 	bl	80049a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800400e:	f107 0214 	add.w	r2, r7, #20
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	f7ff f9fe 	bl	8003418 <xTaskCheckForTimeOut>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d131      	bne.n	8004086 <xQueueGenericReceive+0x1d2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004022:	6a38      	ldr	r0, [r7, #32]
 8004024:	f000 f92e 	bl	8004284 <prvIsQueueEmpty>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d025      	beq.n	800407a <xQueueGenericReceive+0x1c6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <xQueueGenericReceive+0x194>
					{
						taskENTER_CRITICAL();
 8004036:	f000 fc8b 	bl	8004950 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fbee 	bl	8003820 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8004044:	f000 fcae 	bl	80049a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f7ff f8d0 	bl	80031f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004058:	6a38      	ldr	r0, [r7, #32]
 800405a:	f000 f8b9 	bl	80041d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800405e:	f7fe fef5 	bl	8002e4c <xTaskResumeAll>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <xQueueGenericReceive+0x1e0>
				{
					portYIELD_WITHIN_API();
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <xQueueGenericReceive+0x1f0>)
 800406a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	e00c      	b.n	8004094 <xQueueGenericReceive+0x1e0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800407a:	6a38      	ldr	r0, [r7, #32]
 800407c:	f000 f8a8 	bl	80041d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004080:	f7fe fee4 	bl	8002e4c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8004084:	e74c      	b.n	8003f20 <xQueueGenericReceive+0x6c>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004086:	6a38      	ldr	r0, [r7, #32]
 8004088:	f000 f8a2 	bl	80041d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800408c:	f7fe fede 	bl	8002e4c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8004090:	2300      	movs	r3, #0
 8004092:	e000      	b.n	8004096 <xQueueGenericReceive+0x1e2>
		}
	}
 8004094:	e744      	b.n	8003f20 <xQueueGenericReceive+0x6c>
}
 8004096:	4618      	mov	r0, r3
 8004098:	3728      	adds	r7, #40	; 0x28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	0800a62c 	.word	0x0800a62c
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d152      	bne.n	800416e <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fc1d 	bl	800390c <xTaskPriorityDisinherit>
 80040d2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	e048      	b.n	800416e <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11a      	bne.n	8004118 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4610      	mov	r0, r2
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f002 fd5e 	bl	8006bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	441a      	add	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d32f      	bcc.n	800416e <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	e02a      	b.n	800416e <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	4610      	mov	r0, r2
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	461a      	mov	r2, r3
 8004126:	f002 fd43 	bl	8006bb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	425b      	negs	r3, r3
 8004134:	441a      	add	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d207      	bcs.n	8004156 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	425b      	negs	r3, r3
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d108      	bne.n	800416e <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	1e5a      	subs	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004178:	697b      	ldr	r3, [r7, #20]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d019      	beq.n	80041ca <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d303      	bcc.n	80041b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	6838      	ldr	r0, [r7, #0]
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	f002 fcf3 	bl	8006bb0 <memcpy>
	}
}
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041d8:	f000 fbba 	bl	8004950 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80041dc:	e022      	b.n	8004224 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <prvUnlockQueue+0x2a>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	2100      	movs	r1, #0
 80041ea:	f000 f8cf 	bl	800438c <prvNotifyQueueSetContainer>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d112      	bne.n	800421a <prvUnlockQueue+0x4a>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80041f4:	f7ff f966 	bl	80034c4 <vTaskMissedYield>
 80041f8:	e00f      	b.n	800421a <prvUnlockQueue+0x4a>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3324      	adds	r3, #36	; 0x24
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f88a 	bl	8003320 <xTaskRemoveFromEventList>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <prvUnlockQueue+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8004212:	f7ff f957 	bl	80034c4 <vTaskMissedYield>
 8004216:	e000      	b.n	800421a <prvUnlockQueue+0x4a>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8004218:	e008      	b.n	800422c <prvUnlockQueue+0x5c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	2b00      	cmp	r3, #0
 800422a:	dcd8      	bgt.n	80041de <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8004234:	f000 fbb6 	bl	80049a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004238:	f000 fb8a 	bl	8004950 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800423c:	e014      	b.n	8004268 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00f      	beq.n	8004266 <prvUnlockQueue+0x96>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3310      	adds	r3, #16
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f868 	bl	8003320 <xTaskRemoveFromEventList>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004256:	f7ff f935 	bl	80034c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	1e5a      	subs	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
 8004264:	e000      	b.n	8004268 <prvUnlockQueue+0x98>
			}
			else
			{
				break;
 8004266:	e003      	b.n	8004270 <prvUnlockQueue+0xa0>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	2b00      	cmp	r3, #0
 800426e:	dce6      	bgt.n	800423e <prvUnlockQueue+0x6e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004278:	f000 fb94 	bl	80049a4 <vPortExitCritical>
}
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop

08004284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800428c:	f000 fb60 	bl	8004950 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e001      	b.n	80042a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042a2:	f000 fb7f 	bl	80049a4 <vPortExitCritical>

	return xReturn;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042b8:	f000 fb4a 	bl	8004950 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d102      	bne.n	80042ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e001      	b.n	80042d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042d2:	f000 fb67 	bl	80049a4 <vPortExitCritical>

	return xReturn;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e014      	b.n	800431a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042f0:	4b0e      	ldr	r3, [pc, #56]	; (800432c <vQueueAddToRegistry+0x4c>)
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <vQueueAddToRegistry+0x4c>)
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <vQueueAddToRegistry+0x4c>)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004312:	e005      	b.n	8004320 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b07      	cmp	r3, #7
 800431e:	d9e7      	bls.n	80042f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	200145a8 	.word	0x200145a8

08004330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004340:	f000 fb06 	bl	8004950 <vPortEnterCritical>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d102      	bne.n	8004354 <vQueueWaitForMessageRestricted+0x24>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	645a      	str	r2, [r3, #68]	; 0x44
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d102      	bne.n	8004364 <vQueueWaitForMessageRestricted+0x34>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	649a      	str	r2, [r3, #72]	; 0x48
 8004364:	f000 fb1e 	bl	80049a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <vQueueWaitForMessageRestricted+0x4e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	4618      	mov	r0, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	f7fe ff87 	bl	800328c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff26 	bl	80041d0 <prvUnlockQueue>
	}
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop

0800438c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <prvNotifyQueueSetContainer+0x24>
 80043a6:	f640 10fa 	movw	r0, #2554	; 0x9fa
 80043aa:	491c      	ldr	r1, [pc, #112]	; (800441c <prvNotifyQueueSetContainer+0x90>)
 80043ac:	f002 fbc0 	bl	8006b30 <vAssertCalled>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d304      	bcc.n	80043c6 <prvNotifyQueueSetContainer+0x3a>
 80043bc:	f640 10fb 	movw	r0, #2555	; 0x9fb
 80043c0:	4916      	ldr	r1, [pc, #88]	; (800441c <prvNotifyQueueSetContainer+0x90>)
 80043c2:	f002 fbb5 	bl	8006b30 <vAssertCalled>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d21f      	bcs.n	8004412 <prvNotifyQueueSetContainer+0x86>
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	68b8      	ldr	r0, [r7, #8]
 80043d6:	4619      	mov	r1, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	f7ff fe65 	bl	80040a8 <prvCopyDataToQueue>
 80043de:	60f8      	str	r0, [r7, #12]

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d10e      	bne.n	8004408 <prvNotifyQueueSetContainer+0x7c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <prvNotifyQueueSetContainer+0x86>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3324      	adds	r3, #36	; 0x24
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe ff92 	bl	8003320 <xTaskRemoveFromEventList>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <prvNotifyQueueSetContainer+0x86>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8004402:	2301      	movs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e004      	b.n	8004412 <prvNotifyQueueSetContainer+0x86>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	649a      	str	r2, [r3, #72]	; 0x48
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004412:	68fb      	ldr	r3, [r7, #12]
	}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	0800a62c 	.word	0x0800a62c

08004420 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800442c:	f7fe fd00 	bl	8002e30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <pvPortMalloc+0x154>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004438:	f000 f8f8 	bl	800462c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800443c:	4b4e      	ldr	r3, [pc, #312]	; (8004578 <pvPortMalloc+0x158>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d17f      	bne.n	8004548 <pvPortMalloc+0x128>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800444e:	2308      	movs	r3, #8
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	3308      	adds	r3, #8
 8004468:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <pvPortMalloc+0x5c>
 8004474:	20bb      	movs	r0, #187	; 0xbb
 8004476:	4941      	ldr	r1, [pc, #260]	; (800457c <pvPortMalloc+0x15c>)
 8004478:	f002 fb5a 	bl	8006b30 <vAssertCalled>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d062      	beq.n	8004548 <pvPortMalloc+0x128>
 8004482:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <pvPortMalloc+0x160>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d85d      	bhi.n	8004548 <pvPortMalloc+0x128>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <pvPortMalloc+0x164>)
 800448e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004490:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <pvPortMalloc+0x164>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004496:	e004      	b.n	80044a2 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d203      	bcs.n	80044b4 <pvPortMalloc+0x94>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f1      	bne.n	8004498 <pvPortMalloc+0x78>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044b4:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <pvPortMalloc+0x154>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d044      	beq.n	8004548 <pvPortMalloc+0x128>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2308      	movs	r3, #8
 80044c4:	4413      	add	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1ad2      	subs	r2, r2, r3
 80044d8:	2308      	movs	r3, #8
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	429a      	cmp	r2, r3
 80044de:	d918      	bls.n	8004512 <pvPortMalloc+0xf2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <pvPortMalloc+0xda>
 80044f2:	20e8      	movs	r0, #232	; 0xe8
 80044f4:	4921      	ldr	r1, [pc, #132]	; (800457c <pvPortMalloc+0x15c>)
 80044f6:	f002 fb1b 	bl	8006b30 <vAssertCalled>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	f000 f8ef 	bl	80046f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <pvPortMalloc+0x160>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	1ad2      	subs	r2, r2, r3
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <pvPortMalloc+0x160>)
 800451e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <pvPortMalloc+0x160>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b18      	ldr	r3, [pc, #96]	; (8004588 <pvPortMalloc+0x168>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d203      	bcs.n	8004534 <pvPortMalloc+0x114>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <pvPortMalloc+0x160>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b15      	ldr	r3, [pc, #84]	; (8004588 <pvPortMalloc+0x168>)
 8004532:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <pvPortMalloc+0x158>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	431a      	orrs	r2, r3
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004548:	f7fe fc80 	bl	8002e4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <pvPortMalloc+0x136>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004552:	f002 fad5 	bl	8006b00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <pvPortMalloc+0x14a>
 8004560:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004564:	4905      	ldr	r1, [pc, #20]	; (800457c <pvPortMalloc+0x15c>)
 8004566:	f002 fae3 	bl	8006b30 <vAssertCalled>
	return pvReturn;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200142ec 	.word	0x200142ec
 8004578:	200142f8 	.word	0x200142f8
 800457c:	0800a644 	.word	0x0800a644
 8004580:	200142f0 	.word	0x200142f0
 8004584:	200142e4 	.word	0x200142e4
 8004588:	200142f4 	.word	0x200142f4

0800458c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d03c      	beq.n	8004618 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800459e:	2308      	movs	r3, #8
 80045a0:	425b      	negs	r3, r3
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <vPortFree+0x94>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <vPortFree+0x38>
 80045ba:	f44f 709e 	mov.w	r0, #316	; 0x13c
 80045be:	4919      	ldr	r1, [pc, #100]	; (8004624 <vPortFree+0x98>)
 80045c0:	f002 fab6 	bl	8006b30 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <vPortFree+0x4a>
 80045cc:	f240 103d 	movw	r0, #317	; 0x13d
 80045d0:	4914      	ldr	r1, [pc, #80]	; (8004624 <vPortFree+0x98>)
 80045d2:	f002 faad 	bl	8006b30 <vAssertCalled>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <vPortFree+0x94>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d019      	beq.n	8004618 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortFree+0x94>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	401a      	ands	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045fc:	f7fe fc18 	bl	8002e30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <vPortFree+0x9c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	441a      	add	r2, r3
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <vPortFree+0x9c>)
 800460c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f86e 	bl	80046f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004614:	f7fe fc1a 	bl	8002e4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200142f8 	.word	0x200142f8
 8004624:	0800a644 	.word	0x0800a644
 8004628:	200142f0 	.word	0x200142f0

0800462c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004632:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004636:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <prvHeapInit+0xac>)
 800463a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3307      	adds	r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad2      	subs	r2, r2, r3
 800465a:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <prvHeapInit+0xac>)
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <prvHeapInit+0xb0>)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <prvHeapInit+0xb0>)
 800466c:	2200      	movs	r2, #0
 800466e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004678:	2308      	movs	r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <prvHeapInit+0xb4>)
 800468c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <prvHeapInit+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <prvHeapInit+0xb4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <prvHeapInit+0xb4>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <prvHeapInit+0xb8>)
 80046ba:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <prvHeapInit+0xbc>)
 80046c2:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <prvHeapInit+0xc0>)
 80046c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046ca:	601a      	str	r2, [r3, #0]
}
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	200106e4 	.word	0x200106e4
 80046dc:	200142e4 	.word	0x200142e4
 80046e0:	200142ec 	.word	0x200142ec
 80046e4:	200142f4 	.word	0x200142f4
 80046e8:	200142f0 	.word	0x200142f0
 80046ec:	200142f8 	.word	0x200142f8

080046f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046f8:	4b27      	ldr	r3, [pc, #156]	; (8004798 <prvInsertBlockIntoFreeList+0xa8>)
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e002      	b.n	8004704 <prvInsertBlockIntoFreeList+0x14>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3f7      	bcc.n	80046fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d108      	bne.n	8004732 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d118      	bne.n	8004778 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <prvInsertBlockIntoFreeList+0xac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d00d      	beq.n	800476e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e008      	b.n	8004780 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <prvInsertBlockIntoFreeList+0xac>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e003      	b.n	8004780 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d002      	beq.n	800478e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	200142e4 	.word	0x200142e4
 800479c:	200142ec 	.word	0x200142ec

080047a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b04      	subs	r3, #4
 80047b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3b04      	subs	r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b04      	subs	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <pxPortInitialiseStack+0x60>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b14      	subs	r3, #20
 80047d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f06f 0202 	mvn.w	r2, #2
 80047ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b20      	subs	r3, #32
 80047f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	08004805 	.word	0x08004805

08004804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvTaskExitError+0x34>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d004      	beq.n	800481e <prvTaskExitError+0x1a>
 8004814:	f240 1001 	movw	r0, #257	; 0x101
 8004818:	4908      	ldr	r1, [pc, #32]	; (800483c <prvTaskExitError+0x38>)
 800481a:	f002 f989 	bl	8006b30 <vAssertCalled>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800481e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004822:	b672      	cpsid	i
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	b662      	cpsie	i
 8004832:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004834:	e7fe      	b.n	8004834 <prvTaskExitError+0x30>
 8004836:	bf00      	nop
 8004838:	20010010 	.word	0x20010010
 800483c:	0800a670 	.word	0x0800a670

08004840 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <pxCurrentTCBConst2>)
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	6808      	ldr	r0, [r1, #0]
 8004846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484a:	f380 8809 	msr	PSP, r0
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8811 	msr	BASEPRI, r0
 800485a:	4770      	bx	lr

0800485c <pxCurrentTCBConst2>:
 800485c:	200105e4 	.word	0x200105e4

08004860 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004860:	4806      	ldr	r0, [pc, #24]	; (800487c <prvPortStartFirstTask+0x1c>)
 8004862:	6800      	ldr	r0, [r0, #0]
 8004864:	6800      	ldr	r0, [r0, #0]
 8004866:	f380 8808 	msr	MSP, r0
 800486a:	b662      	cpsie	i
 800486c:	b661      	cpsie	f
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	df00      	svc	0
 8004878:	bf00      	nop
 800487a:	0000      	.short	0x0000
 800487c:	e000ed08 	.word	0xe000ed08

08004880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004886:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <xPortStartScheduler+0xb8>)
 8004888:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <xPortStartScheduler+0xbc>)
 80048ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ae:	4b24      	ldr	r3, [pc, #144]	; (8004940 <xPortStartScheduler+0xc0>)
 80048b0:	2207      	movs	r2, #7
 80048b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048b4:	e009      	b.n	80048ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <xPortStartScheduler+0xc0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <xPortStartScheduler+0xc0>)
 80048be:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	b25b      	sxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	dbef      	blt.n	80048b6 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <xPortStartScheduler+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <xPortStartScheduler+0xc0>)
 80048de:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048e0:	4b17      	ldr	r3, [pc, #92]	; (8004940 <xPortStartScheduler+0xc0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <xPortStartScheduler+0xc0>)
 80048ea:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <xPortStartScheduler+0xc4>)
 80048f6:	4a13      	ldr	r2, [pc, #76]	; (8004944 <xPortStartScheduler+0xc4>)
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80048fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004900:	4b10      	ldr	r3, [pc, #64]	; (8004944 <xPortStartScheduler+0xc4>)
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <xPortStartScheduler+0xc4>)
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800490a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800490c:	f000 f8c2 	bl	8004a94 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <xPortStartScheduler+0xc8>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004916:	f000 f8d7 	bl	8004ac8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <xPortStartScheduler+0xcc>)
 800491c:	4a0b      	ldr	r2, [pc, #44]	; (800494c <xPortStartScheduler+0xcc>)
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004924:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004926:	f7ff ff9b 	bl	8004860 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800492a:	f7ff ff6b 	bl	8004804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e000e400 	.word	0xe000e400
 800493c:	200142fc 	.word	0x200142fc
 8004940:	20014300 	.word	0x20014300
 8004944:	e000ed20 	.word	0xe000ed20
 8004948:	20010010 	.word	0x20010010
 800494c:	e000ef34 	.word	0xe000ef34

08004950 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	f04f 0340 	mov.w	r3, #64	; 0x40
 800495a:	b672      	cpsid	i
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	b662      	cpsie	i
 800496a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <vPortEnterCritical+0x48>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <vPortEnterCritical+0x48>)
 8004974:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <vPortEnterCritical+0x48>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d109      	bne.n	8004992 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <vPortEnterCritical+0x4c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <vPortEnterCritical+0x42>
 8004988:	f240 1093 	movw	r0, #403	; 0x193
 800498c:	4904      	ldr	r1, [pc, #16]	; (80049a0 <vPortEnterCritical+0x50>)
 800498e:	f002 f8cf 	bl	8006b30 <vAssertCalled>
	}
}
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20010010 	.word	0x20010010
 800499c:	e000ed04 	.word	0xe000ed04
 80049a0:	0800a670 	.word	0x0800a670

080049a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <vPortExitCritical+0x3c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <vPortExitCritical+0x18>
 80049b2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80049b6:	490b      	ldr	r1, [pc, #44]	; (80049e4 <vPortExitCritical+0x40>)
 80049b8:	f002 f8ba 	bl	8006b30 <vAssertCalled>
	uxCriticalNesting--;
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <vPortExitCritical+0x3c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <vPortExitCritical+0x3c>)
 80049c4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <vPortExitCritical+0x3c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <vPortExitCritical+0x34>
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20010010 	.word	0x20010010
 80049e4:	0800a670 	.word	0x0800a670

080049e8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049e8:	f3ef 8009 	mrs	r0, PSP
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <pxCurrentTCBConst>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	f01e 0f10 	tst.w	lr, #16
 80049f8:	bf08      	it	eq
 80049fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a02:	6010      	str	r0, [r2, #0]
 8004a04:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004a08:	f04f 0040 	mov.w	r0, #64	; 0x40
 8004a0c:	b672      	cpsid	i
 8004a0e:	f380 8811 	msr	BASEPRI, r0
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	b662      	cpsie	i
 8004a1c:	f7fe fb70 	bl	8003100 <vTaskSwitchContext>
 8004a20:	f04f 0000 	mov.w	r0, #0
 8004a24:	f380 8811 	msr	BASEPRI, r0
 8004a28:	bc08      	pop	{r3}
 8004a2a:	6819      	ldr	r1, [r3, #0]
 8004a2c:	6808      	ldr	r0, [r1, #0]
 8004a2e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a32:	f01e 0f10 	tst.w	lr, #16
 8004a36:	bf08      	it	eq
 8004a38:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a3c:	f380 8809 	msr	PSP, r0
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop

08004a48 <pxCurrentTCBConst>:
 8004a48:	200105e4 	.word	0x200105e4

08004a4c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a52:	f3ef 8211 	mrs	r2, BASEPRI
 8004a56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004a5a:	b672      	cpsid	i
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	b662      	cpsie	i
 8004a6a:	60fa      	str	r2, [r7, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a6e:	f7fe fa8d 	bl	8002f8c <xTaskIncrementTick>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <SysTick_Handler+0x34>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <SysTick_Handler+0x44>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <vPortSetupTimerInterrupt+0x24>)
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <vPortSetupTimerInterrupt+0x28>)
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <vPortSetupTimerInterrupt+0x2c>)
 8004aa0:	fba2 0201 	umull	r0, r2, r2, r1
 8004aa4:	0992      	lsrs	r2, r2, #6
 8004aa6:	3a01      	subs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <vPortSetupTimerInterrupt+0x30>)
 8004aac:	2207      	movs	r2, #7
 8004aae:	601a      	str	r2, [r3, #0]
}
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e014 	.word	0xe000e014
 8004abc:	20010000 	.word	0x20010000
 8004ac0:	10624dd3 	.word	0x10624dd3
 8004ac4:	e000e010 	.word	0xe000e010

08004ac8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ac8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ad8 <vPortEnableVFP+0x10>
 8004acc:	6801      	ldr	r1, [r0, #0]
 8004ace:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ad2:	6001      	str	r1, [r0, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	0000      	.short	0x0000
 8004ad8:	e000ed88 	.word	0xe000ed88

08004adc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004ae2:	f3ef 8305 	mrs	r3, IPSR
 8004ae6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d90e      	bls.n	8004b0c <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aee:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <vPortValidateInterruptPriority+0x50>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <vPortValidateInterruptPriority+0x54>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d204      	bcs.n	8004b0c <vPortValidateInterruptPriority+0x30>
 8004b02:	f240 20d6 	movw	r0, #726	; 0x2d6
 8004b06:	490b      	ldr	r1, [pc, #44]	; (8004b34 <vPortValidateInterruptPriority+0x58>)
 8004b08:	f002 f812 	bl	8006b30 <vAssertCalled>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <vPortValidateInterruptPriority+0x5c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <vPortValidateInterruptPriority+0x60>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d904      	bls.n	8004b26 <vPortValidateInterruptPriority+0x4a>
 8004b1c:	f240 20e6 	movw	r0, #742	; 0x2e6
 8004b20:	4904      	ldr	r1, [pc, #16]	; (8004b34 <vPortValidateInterruptPriority+0x58>)
 8004b22:	f002 f805 	bl	8006b30 <vAssertCalled>
	}
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	e000e3f0 	.word	0xe000e3f0
 8004b30:	200142fc 	.word	0x200142fc
 8004b34:	0800a670 	.word	0x0800a670
 8004b38:	e000ed0c 	.word	0xe000ed0c
 8004b3c:	20014300 	.word	0x20014300

08004b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f103 0208 	add.w	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f103 0208 	add.w	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f103 0208 	add.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop

08004be0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d103      	bne.n	8004c00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e00c      	b.n	8004c1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3308      	adds	r3, #8
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e002      	b.n	8004c0e <vListInsert+0x2e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d9f6      	bls.n	8004c08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6892      	ldr	r2, [r2, #8]
 8004c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6852      	ldr	r2, [r2, #4]
 8004c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d103      	bne.n	8004c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1e5a      	subs	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USART_GetClockSource>:
  *                USART_CLOCKSOURCE_SYSCLK:    USARTx use SYSCLK clock source 
  *                USART_CLOCKSOURCE_LSE:       USARTx use LSE clock source
  *                USART_CLOCKSOURCE_UNDEFINED: Undefined clock source
  */
USART_ClockSourceTypeDef USART_GetClockSource(USART_TypeDef* USARTx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 8004cac:	2310      	movs	r3, #16
 8004cae:	73fb      	strb	r3, [r7, #15]
    
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4bbb      	ldr	r3, [pc, #748]	; (8004fa0 <USART_GetClockSource+0x2fc>)
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d146      	bne.n	8004d46 <USART_GetClockSource+0xa2>
  {
    if( IS_USART1_CLKSOURCE_PCLK2() )
 8004cb8:	4bba      	ldr	r3, [pc, #744]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <USART_GetClockSource+0x36>
 8004cc6:	4bb7      	ldr	r3, [pc, #732]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <USART_GetClockSource+0x36>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e034      	b.n	8004d44 <USART_GetClockSource+0xa0>
    }
    else if( IS_USART1_CLKSOURCE_SYSCLK() )
 8004cda:	4bb2      	ldr	r3, [pc, #712]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <USART_GetClockSource+0x58>
 8004ce8:	4bae      	ldr	r3, [pc, #696]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <USART_GetClockSource+0x58>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e023      	b.n	8004d44 <USART_GetClockSource+0xa0>
    }
    else if( IS_USART1_CLKSOURCE_HSI() )
 8004cfc:	4ba9      	ldr	r3, [pc, #676]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <USART_GetClockSource+0x7a>
 8004d0a:	4ba6      	ldr	r3, [pc, #664]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <USART_GetClockSource+0x7a>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	e012      	b.n	8004d44 <USART_GetClockSource+0xa0>
    }
    else if( IS_USART1_CLKSOURCE_LSE() )
 8004d1e:	4ba1      	ldr	r3, [pc, #644]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8220 	beq.w	800516e <USART_GetClockSource+0x4ca>
 8004d2e:	4b9d      	ldr	r3, [pc, #628]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8218 	beq.w	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8004d3e:	2308      	movs	r3, #8
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	e214      	b.n	800516e <USART_GetClockSource+0x4ca>
 8004d44:	e213      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
  }
  else if (USARTx == USART2)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4b97      	ldr	r3, [pc, #604]	; (8004fa8 <USART_GetClockSource+0x304>)
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d146      	bne.n	8004ddc <USART_GetClockSource+0x138>
  {
    if( IS_USART2_CLKSOURCE_PCLK1() )
 8004d4e:	4b95      	ldr	r3, [pc, #596]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <USART_GetClockSource+0xcc>
 8004d5c:	4b91      	ldr	r3, [pc, #580]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <USART_GetClockSource+0xcc>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
 8004d6e:	e034      	b.n	8004dda <USART_GetClockSource+0x136>
    }
    else if( IS_USART2_CLKSOURCE_SYSCLK() )
 8004d70:	4b8c      	ldr	r3, [pc, #560]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <USART_GetClockSource+0xee>
 8004d7e:	4b89      	ldr	r3, [pc, #548]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <USART_GetClockSource+0xee>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e023      	b.n	8004dda <USART_GetClockSource+0x136>
    }
    else if( IS_USART2_CLKSOURCE_HSI() )
 8004d92:	4b84      	ldr	r3, [pc, #528]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <USART_GetClockSource+0x110>
 8004da0:	4b80      	ldr	r3, [pc, #512]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <USART_GetClockSource+0x110>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8004dae:	2302      	movs	r3, #2
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e012      	b.n	8004dda <USART_GetClockSource+0x136>
    }
    else if( IS_USART2_CLKSOURCE_LSE() )
 8004db4:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 81d5 	beq.w	800516e <USART_GetClockSource+0x4ca>
 8004dc4:	4b77      	ldr	r3, [pc, #476]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 81cd 	beq.w	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e1c9      	b.n	800516e <USART_GetClockSource+0x4ca>
 8004dda:	e1c8      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
  }
  else if (USARTx == USART3)
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4b73      	ldr	r3, [pc, #460]	; (8004fac <USART_GetClockSource+0x308>)
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d146      	bne.n	8004e72 <USART_GetClockSource+0x1ce>
  {
    if( IS_USART3_CLKSOURCE_PCLK1() )
 8004de4:	4b6f      	ldr	r3, [pc, #444]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <USART_GetClockSource+0x162>
 8004df2:	4b6c      	ldr	r3, [pc, #432]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <USART_GetClockSource+0x162>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e034      	b.n	8004e70 <USART_GetClockSource+0x1cc>
    }
    else if( IS_USART3_CLKSOURCE_SYSCLK() )
 8004e06:	4b67      	ldr	r3, [pc, #412]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <USART_GetClockSource+0x184>
 8004e14:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <USART_GetClockSource+0x184>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8004e22:	2304      	movs	r3, #4
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e023      	b.n	8004e70 <USART_GetClockSource+0x1cc>
    }
    else if( IS_USART3_CLKSOURCE_HSI() )
 8004e28:	4b5e      	ldr	r3, [pc, #376]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <USART_GetClockSource+0x1a6>
 8004e36:	4b5b      	ldr	r3, [pc, #364]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <USART_GetClockSource+0x1a6>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8004e44:	2302      	movs	r3, #2
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e012      	b.n	8004e70 <USART_GetClockSource+0x1cc>
    }
    else if( IS_USART3_CLKSOURCE_LSE() )
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 818a 	beq.w	800516e <USART_GetClockSource+0x4ca>
 8004e5a:	4b52      	ldr	r3, [pc, #328]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8182 	beq.w	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	73fb      	strb	r3, [r7, #15]
 8004e6e:	e17e      	b.n	800516e <USART_GetClockSource+0x4ca>
 8004e70:	e17d      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
  }
  else if (USARTx == UART4)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <USART_GetClockSource+0x30c>)
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d146      	bne.n	8004f08 <USART_GetClockSource+0x264>
  {
    if( IS_UART4_CLKSOURCE_PCLK1() )
 8004e7a:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <USART_GetClockSource+0x1f8>
 8004e88:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <USART_GetClockSource+0x1f8>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
 8004e9a:	e034      	b.n	8004f06 <USART_GetClockSource+0x262>
    }
    else if( IS_UART4_CLKSOURCE_SYSCLK() )
 8004e9c:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <USART_GetClockSource+0x21a>
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <USART_GetClockSource+0x21a>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e023      	b.n	8004f06 <USART_GetClockSource+0x262>
    }
    else if( IS_UART4_CLKSOURCE_HSI() )
 8004ebe:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <USART_GetClockSource+0x23c>
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <USART_GetClockSource+0x23c>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8004eda:	2302      	movs	r3, #2
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e012      	b.n	8004f06 <USART_GetClockSource+0x262>
    }
    else if( IS_UART4_CLKSOURCE_LSE() )
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 813f 	beq.w	800516e <USART_GetClockSource+0x4ca>
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8137 	beq.w	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8004f00:	2308      	movs	r3, #8
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e133      	b.n	800516e <USART_GetClockSource+0x4ca>
 8004f06:	e132      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
  }
  else if (USARTx == UART5)
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <USART_GetClockSource+0x310>)
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d153      	bne.n	8004fb8 <USART_GetClockSource+0x314>
  {
    if( IS_UART5_CLKSOURCE_PCLK1() )
 8004f10:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <USART_GetClockSource+0x28e>
 8004f1e:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <USART_GetClockSource+0x28e>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e034      	b.n	8004f9c <USART_GetClockSource+0x2f8>
    }
    else if( IS_UART5_CLKSOURCE_SYSCLK() )
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <USART_GetClockSource+0x2b0>
 8004f40:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <USART_GetClockSource+0x2b0>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8004f4e:	2304      	movs	r3, #4
 8004f50:	73fb      	strb	r3, [r7, #15]
 8004f52:	e023      	b.n	8004f9c <USART_GetClockSource+0x2f8>
    }
    else if( IS_UART5_CLKSOURCE_HSI() )
 8004f54:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <USART_GetClockSource+0x2d2>
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <USART_GetClockSource+0x2d2>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8004f70:	2302      	movs	r3, #2
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	e012      	b.n	8004f9c <USART_GetClockSource+0x2f8>
    }
    else if( IS_UART5_CLKSOURCE_LSE() )
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80f4 	beq.w	800516e <USART_GetClockSource+0x4ca>
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <USART_GetClockSource+0x300>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80ec 	beq.w	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8004f96:	2308      	movs	r3, #8
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	e0e8      	b.n	800516e <USART_GetClockSource+0x4ca>
 8004f9c:	e0e7      	b.n	800516e <USART_GetClockSource+0x4ca>
 8004f9e:	bf00      	nop
 8004fa0:	40011000 	.word	0x40011000
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40004400 	.word	0x40004400
 8004fac:	40004800 	.word	0x40004800
 8004fb0:	40004c00 	.word	0x40004c00
 8004fb4:	40005000 	.word	0x40005000
    }
  }
  else if (USARTx == USART6)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4b70      	ldr	r3, [pc, #448]	; (800517c <USART_GetClockSource+0x4d8>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d146      	bne.n	800504e <USART_GetClockSource+0x3aa>
  {
    if( IS_USART6_CLKSOURCE_PCLK2() )
 8004fc0:	4b6f      	ldr	r3, [pc, #444]	; (8005180 <USART_GetClockSource+0x4dc>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <USART_GetClockSource+0x33e>
 8004fce:	4b6c      	ldr	r3, [pc, #432]	; (8005180 <USART_GetClockSource+0x4dc>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <USART_GetClockSource+0x33e>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e034      	b.n	800504c <USART_GetClockSource+0x3a8>
    }
    else if( IS_USART6_CLKSOURCE_SYSCLK() )
 8004fe2:	4b67      	ldr	r3, [pc, #412]	; (8005180 <USART_GetClockSource+0x4dc>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <USART_GetClockSource+0x360>
 8004ff0:	4b63      	ldr	r3, [pc, #396]	; (8005180 <USART_GetClockSource+0x4dc>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <USART_GetClockSource+0x360>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8004ffe:	2304      	movs	r3, #4
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e023      	b.n	800504c <USART_GetClockSource+0x3a8>
    }
    else if( IS_USART6_CLKSOURCE_HSI() )
 8005004:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <USART_GetClockSource+0x382>
 8005012:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <USART_GetClockSource+0x382>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005020:	2302      	movs	r3, #2
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e012      	b.n	800504c <USART_GetClockSource+0x3a8>
    }
    else if( IS_USART6_CLKSOURCE_LSE() )
 8005026:	4b56      	ldr	r3, [pc, #344]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 809c 	beq.w	800516e <USART_GetClockSource+0x4ca>
 8005036:	4b52      	ldr	r3, [pc, #328]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8094 	beq.w	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005046:	2308      	movs	r3, #8
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e090      	b.n	800516e <USART_GetClockSource+0x4ca>
 800504c:	e08f      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
  }
  else if (USARTx == UART7)
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4b4c      	ldr	r3, [pc, #304]	; (8005184 <USART_GetClockSource+0x4e0>)
 8005052:	429a      	cmp	r2, r3
 8005054:	d144      	bne.n	80050e0 <USART_GetClockSource+0x43c>
  {
    if( IS_UART7_CLKSOURCE_PCLK1() )
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <USART_GetClockSource+0x3d4>
 8005064:	4b46      	ldr	r3, [pc, #280]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <USART_GetClockSource+0x3d4>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e032      	b.n	80050de <USART_GetClockSource+0x43a>
    }
    else if( IS_UART7_CLKSOURCE_SYSCLK() )
 8005078:	4b41      	ldr	r3, [pc, #260]	; (8005180 <USART_GetClockSource+0x4dc>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <USART_GetClockSource+0x3f6>
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <USART_GetClockSource+0x3f6>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005094:	2304      	movs	r3, #4
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e021      	b.n	80050de <USART_GetClockSource+0x43a>
    }
    else if( IS_UART7_CLKSOURCE_HSI() )
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <USART_GetClockSource+0x4dc>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <USART_GetClockSource+0x418>
 80050a8:	4b35      	ldr	r3, [pc, #212]	; (8005180 <USART_GetClockSource+0x4dc>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <USART_GetClockSource+0x418>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 80050b6:	2302      	movs	r3, #2
 80050b8:	73fb      	strb	r3, [r7, #15]
 80050ba:	e010      	b.n	80050de <USART_GetClockSource+0x43a>
    }
    else if( IS_UART7_CLKSOURCE_LSE() )
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <USART_GetClockSource+0x4dc>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d051      	beq.n	800516e <USART_GetClockSource+0x4ca>
 80050ca:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <USART_GetClockSource+0x4dc>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d04a      	beq.n	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80050d8:	2308      	movs	r3, #8
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e047      	b.n	800516e <USART_GetClockSource+0x4ca>
 80050de:	e046      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
  }
  else if (USARTx == UART8)
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <USART_GetClockSource+0x4e4>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d142      	bne.n	800516e <USART_GetClockSource+0x4ca>
  {
    if( IS_UART8_CLKSOURCE_PCLK1() )
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <USART_GetClockSource+0x4dc>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <USART_GetClockSource+0x466>
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <USART_GetClockSource+0x4dc>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <USART_GetClockSource+0x466>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e031      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
    else if( IS_UART8_CLKSOURCE_SYSCLK() )
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <USART_GetClockSource+0x4dc>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <USART_GetClockSource+0x488>
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <USART_GetClockSource+0x4dc>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <USART_GetClockSource+0x488>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005126:	2304      	movs	r3, #4
 8005128:	73fb      	strb	r3, [r7, #15]
 800512a:	e020      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
    else if( IS_UART8_CLKSOURCE_HSI() )
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <USART_GetClockSource+0x4dc>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <USART_GetClockSource+0x4aa>
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <USART_GetClockSource+0x4dc>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <USART_GetClockSource+0x4aa>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005148:	2302      	movs	r3, #2
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	e00f      	b.n	800516e <USART_GetClockSource+0x4ca>
    }
    else if( IS_UART8_CLKSOURCE_LSE() )
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <USART_GetClockSource+0x4dc>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <USART_GetClockSource+0x4ca>
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <USART_GetClockSource+0x4dc>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <USART_GetClockSource+0x4ca>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 800516a:	2308      	movs	r3, #8
 800516c:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return clocksource;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40011400 	.word	0x40011400
 8005180:	40023800 	.word	0x40023800
 8005184:	40007800 	.word	0x40007800
 8005188:	40007c00 	.word	0x40007c00

0800518c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 80051a2:	2310      	movs	r3, #16
 80051a4:	76fb      	strb	r3, [r7, #27]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051be:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <USART_Init+0x16c>)
 80051da:	4013      	ands	r3, r2
 80051dc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80051ec:	4313      	orrs	r3, r2
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61fb      	str	r3, [r7, #28]
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	4313      	orrs	r3, r2
 8005210:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005218:	f107 0308 	add.w	r3, r7, #8
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fe85 	bl	8005f2c <RCC_GetClocksFreq>
  clocksource = USART_GetClockSource(USARTx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fd3e 	bl	8004ca4 <USART_GetClockSource>
 8005228:	4603      	mov	r3, r0
 800522a:	76fb      	strb	r3, [r7, #27]
  
  if( clocksource == USART_CLOCKSOURCE_PCLK1 )
 800522c:	7efb      	ldrb	r3, [r7, #27]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <USART_Init+0xac>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	e014      	b.n	8005262 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_PCLK2 )
 8005238:	7efb      	ldrb	r3, [r7, #27]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	623b      	str	r3, [r7, #32]
 8005242:	e00e      	b.n	8005262 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_SYSCLK )
 8005244:	7efb      	ldrb	r3, [r7, #27]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d102      	bne.n	8005250 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.SYSCLK_Frequency;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	e008      	b.n	8005262 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_HSI )
 8005250:	7efb      	ldrb	r3, [r7, #27]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d102      	bne.n	800525c <USART_Init+0xd0>
  {
    apbclock = HSI_VALUE;
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <USART_Init+0x170>)
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	e002      	b.n	8005262 <USART_Init+0xd6>
  }
  else
  {
    apbclock = LSE_VALUE;
 800525c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005260:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d011      	beq.n	8005292 <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	005a      	lsls	r2, r3, #1
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	fbb3 f1f2 	udiv	r1, r3, r2
 8005288:	fb02 f201 	mul.w	r2, r2, r1
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e00e      	b.n	80052b0 <USART_Init+0x124>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80052a8:	fb02 f201 	mul.w	r2, r2, r1
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	085a      	lsrs	r2, r3, #1
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d802      	bhi.n	80052c2 <USART_Init+0x136>
  {
    divider++;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <USART_Init+0x15a>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80052de:	4013      	ands	r3, r2
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]
}
 80052f0:	3728      	adds	r7, #40	; 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	efffe9f3 	.word	0xefffe9f3
 80052fc:	00f42400 	.word	0x00f42400

08005300 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800531a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800532a:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005330:	4313      	orrs	r3, r2
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]
}
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	60da      	str	r2, [r3, #12]
}
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop

08005374 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e005      	b.n	80053a0 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 0201 	bic.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
  }
}
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop

080053ac <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)USART_TDR_TDR);
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)USART_RDR_RDR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	b29b      	uxth	r3, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
 800540a:	e001      	b.n	8005410 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop

08005420 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <TIM_TimeBaseInit+0xb8>)
 8005438:	429a      	cmp	r2, r3
 800543a:	d013      	beq.n	8005464 <TIM_TimeBaseInit+0x44>
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4b27      	ldr	r3, [pc, #156]	; (80054dc <TIM_TimeBaseInit+0xbc>)
 8005440:	429a      	cmp	r2, r3
 8005442:	d00f      	beq.n	8005464 <TIM_TimeBaseInit+0x44>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d00b      	beq.n	8005464 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <TIM_TimeBaseInit+0xc0>)
 8005450:	429a      	cmp	r2, r3
 8005452:	d007      	beq.n	8005464 <TIM_TimeBaseInit+0x44>
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	4b23      	ldr	r3, [pc, #140]	; (80054e4 <TIM_TimeBaseInit+0xc4>)
 8005458:	429a      	cmp	r2, r3
 800545a:	d003      	beq.n	8005464 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <TIM_TimeBaseInit+0xc8>)
 8005460:	429a      	cmp	r2, r3
 8005462:	d108      	bne.n	8005476 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint32_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <TIM_TimeBaseInit+0xcc>)
 800547a:	429a      	cmp	r2, r3
 800547c:	d00c      	beq.n	8005498 <TIM_TimeBaseInit+0x78>
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <TIM_TimeBaseInit+0xd0>)
 8005482:	429a      	cmp	r2, r3
 8005484:	d008      	beq.n	8005498 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint32_t)(~TIM_CR1_CKD);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	629a      	str	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <TIM_TimeBaseInit+0xb8>)
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d003      	beq.n	80054be <TIM_TimeBaseInit+0x9e>
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4b08      	ldr	r3, [pc, #32]	; (80054dc <TIM_TimeBaseInit+0xbc>)
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d103      	bne.n	80054c6 <TIM_TimeBaseInit+0xa6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	615a      	str	r2, [r3, #20]
}
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40001000 	.word	0x40001000
 80054f0:	40001400 	.word	0x40001400

080054f4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <TIM_Cmd+0x20>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e005      	b.n	800553c <TIM_Cmd+0x2c>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 0201 	bic.w	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
  }
}
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0302 	bic.w	r3, r3, #2
 80055a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <TIM_OC1Init+0xec>)
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d003      	beq.n	80055c6 <TIM_OC1Init+0x7e>
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <TIM_OC1Init+0xf0>)
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d123      	bne.n	800560e <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0308 	bic.w	r3, r3, #8
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0320 	bic.w	r3, r3, #32
 8005696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <TIM_OC2Init+0xf8>)
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d003      	beq.n	80056c0 <TIM_OC2Init+0x84>
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <TIM_OC2Init+0xfc>)
 80056bc:	429a      	cmp	r2, r3
 80056be:	d127      	bne.n	8005710 <TIM_OC2Init+0xd4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056da:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400

0800573c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4b20      	ldr	r3, [pc, #128]	; (8005834 <TIM_OC3Init+0xf8>)
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d003      	beq.n	80057be <TIM_OC3Init+0x82>
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <TIM_OC3Init+0xfc>)
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d127      	bne.n	800580e <TIM_OC3Init+0xd2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d8:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	621a      	str	r2, [r3, #32]
}
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400

0800583c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005896:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	031b      	lsls	r3, r3, #12
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <TIM_OC4Init+0xbc>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d003      	beq.n	80058c0 <TIM_OC4Init+0x84>
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <TIM_OC4Init+0xc0>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d109      	bne.n	80058d4 <TIM_OC4Init+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40010400 	.word	0x40010400

08005900 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	60da      	str	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	611a      	str	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	615a      	str	r2, [r3, #20]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	619a      	str	r2, [r3, #24]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	61da      	str	r2, [r3, #28]
}
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop

08005944 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop

0800597c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop

08005998 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop

080059b4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0308 	bic.w	r3, r3, #8
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	619a      	str	r2, [r3, #24]
}
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint32_t)(TIM_OCPreload << 8);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	619a      	str	r2, [r3, #24]
}
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop

08005a20 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0308 	bic.w	r3, r3, #8
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	61da      	str	r2, [r3, #28]
}
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint32_t)(TIM_OCPreload << 8);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	61da      	str	r2, [r3, #28]
}
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop

08005a8c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d006      	beq.n	8005aac <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8005aaa:	e005      	b.n	8005ab8 <TIM_CtrlPWMOutputs+0x2c>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	645a      	str	r2, [r3, #68]	; 0x44
  }  
}
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint32_t TIM_EncoderMode,
                                uint32_t TIM_IC1Polarity, uint32_t TIM_IC2Polarity)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  uint32_t tmpccmr1 = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61bb      	str	r3, [r7, #24]
  uint32_t tmpccer = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	61bb      	str	r3, [r7, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Set the encoder Mode */
  tmpsmcr &= (uint32_t)~TIM_SMCR_SMS;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	61fb      	str	r3, [r7, #28]
  tmpsmcr |= TIM_EncoderMode;
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61fb      	str	r3, [r7, #28]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_CC2S);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	61bb      	str	r3, [r7, #24]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint32_t)~TIM_CCER_CC1P) & ((uint32_t)~TIM_CCER_CC2P);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b22:	617b      	str	r3, [r7, #20]
  tmpccer |= (uint32_t)(TIM_IC1Polarity | (uint32_t)(TIM_IC2Polarity << (uint32_t)4));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	011a      	lsls	r2, r3, #4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop

08005b50 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b6a:	609a      	str	r2, [r3, #8]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	60da      	str	r2, [r3, #12]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	611a      	str	r2, [r3, #16]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	615a      	str	r2, [r3, #20]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	619a      	str	r2, [r3, #24]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	61da      	str	r2, [r3, #28]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2207      	movs	r2, #7
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005bc6:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005bd2:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint32_t)~SPI_CR2_DS;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint32_t)(SPI_InitStruct->SPI_DataSize);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint32_t)~((uint32_t)SPI_I2SCFGR_I2SMOD);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	61da      	str	r2, [r3, #28]
}
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop

08005c44 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <SPI_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e005      	b.n	8005c70 <SPI_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
  }
}
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <SPI_SSOutputCmd+0x20>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f043 0204 	orr.w	r2, r3, #4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	e005      	b.n	8005ca8 <SPI_SSOutputCmd+0x2c>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f023 0204 	bic.w	r2, r3, #4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]
  }
}
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <SPI_I2S_SendData16>:
  *   the SPI peripheral. 
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint32_t)Data;
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60da      	str	r2, [r3, #12]
}
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <SPI_I2S_ReceiveData16>:
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 in SPI mode or 1, 2 or 3 in I2S mode to select 
  *   the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  return SPIx->DR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	b29b      	uxth	r3, r3
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop

08005cec <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint32_t SPI_I2S_FLAG)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint32_t)RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <SPI_I2S_GetFlagStatus+0x20>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
 8005d0a:	e001      	b.n	8005d10 <SPI_I2S_GetFlagStatus+0x24>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <RCC_HSEConfig+0x20>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <RCC_HSEConfig+0x20>)
 8005d32:	79fa      	ldrb	r2, [r7, #7]
 8005d34:	701a      	strb	r2, [r3, #0]
}
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40023802 	.word	0x40023802

08005d44 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8005d56:	2031      	movs	r0, #49	; 0x31
 8005d58:	f000 f9e8 	bl	800612c <RCC_GetFlagStatus>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005d6c:	d002      	beq.n	8005d74 <RCC_WaitForHSEStartUp+0x30>
 8005d6e:	79bb      	ldrb	r3, [r7, #6]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8005d74:	2031      	movs	r0, #49	; 0x31
 8005d76:	f000 f9d9 	bl	800612c <RCC_GetFlagStatus>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8005d80:	2301      	movs	r3, #1
 8005d82:	71fb      	strb	r3, [r7, #7]
 8005d84:	e001      	b.n	8005d8a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8005d86:	2300      	movs	r3, #0
 8005d88:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b08b      	sub	sp, #44	; 0x2c
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8005da2:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <RCC_PLLConfig+0x7c>)
 8005da4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005da8:	627a      	str	r2, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	fa92 f2a2 	rbit	r2, r2
 8005db0:	623a      	str	r2, [r7, #32]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005db2:	6a3a      	ldr	r2, [r7, #32]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8005db4:	fab2 f282 	clz	r2, r2
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4091      	lsls	r1, r2
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4311      	orrs	r1, r2
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	0852      	lsrs	r2, r2, #1
 8005dc4:	1e50      	subs	r0, r2, #1
 8005dc6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005dca:	61fa      	str	r2, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	fa92 f2a2 	rbit	r2, r2
 8005dd2:	61ba      	str	r2, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	fab2 f282 	clz	r2, r2
 8005dda:	fa00 f202 	lsl.w	r2, r0, r2
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8005dde:	4311      	orrs	r1, r2
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4311      	orrs	r1, r2
 8005de4:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005de8:	617a      	str	r2, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	fa92 f2a2 	rbit	r2, r2
 8005df0:	613a      	str	r2, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005df2:	693a      	ldr	r2, [r7, #16]
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8005df4:	fab2 f282 	clz	r2, r2
 8005df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dfa:	fa00 f202 	lsl.w	r2, r0, r2
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8005e04:	605a      	str	r2, [r3, #4]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
}
 8005e06:	372c      	adds	r7, #44	; 0x2c
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40023800 	.word	0x40023800

08005e14 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if( NewState != DISABLE )
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <RCC_PLLCmd+0x1e>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <RCC_PLLCmd+0x34>)
 8005e26:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <RCC_PLLCmd+0x34>)
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e005      	b.n	8005e3e <RCC_PLLCmd+0x2a>
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <RCC_PLLCmd+0x34>)
 8005e34:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <RCC_PLLCmd+0x34>)
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005e3c:	601a      	str	r2, [r3, #0]
  }
}
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40023800 	.word	0x40023800

08005e4c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <RCC_SYSCLKConfig+0x34>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0303 	bic.w	r3, r3, #3
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005e6e:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <RCC_SYSCLKConfig+0x34>)
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800

08005e84 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <RCC_HCLKConfig+0x34>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005ea6:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <RCC_HCLKConfig+0x34>)
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	609a      	str	r2, [r3, #8]
}
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800

08005ebc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <RCC_PCLK1Config+0x34>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <RCC_PCLK1Config+0x34>)
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40023800 	.word	0x40023800

08005ef4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <RCC_PCLK2Config+0x34>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <RCC_PCLK2Config+0x34>)
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	609a      	str	r2, [r3, #8]
}
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	40023800 	.word	0x40023800

08005f2c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	; 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	2302      	movs	r3, #2
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	2302      	movs	r3, #2
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f4c:	4b46      	ldr	r3, [pc, #280]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d007      	beq.n	8005f6c <RCC_GetClocksFreq+0x40>
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d009      	beq.n	8005f74 <RCC_GetClocksFreq+0x48>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d13f      	bne.n	8005fe4 <RCC_GetClocksFreq+0xb8>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a41      	ldr	r2, [pc, #260]	; (800606c <RCC_GetClocksFreq+0x140>)
 8005f68:	601a      	str	r2, [r3, #0]
    break;
 8005f6a:	e03f      	b.n	8005fec <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a40      	ldr	r2, [pc, #256]	; (8006070 <RCC_GetClocksFreq+0x144>)
 8005f70:	601a      	str	r2, [r3, #0]
    break;
 8005f72:	e03b      	b.n	8005fec <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_PLL:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005f74:	4b3c      	ldr	r3, [pc, #240]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7c:	0d9b      	lsrs	r3, r3, #22
 8005f7e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f80:	4b39      	ldr	r3, [pc, #228]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f88:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00d      	beq.n	8005fac <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005f90:	4a37      	ldr	r2, [pc, #220]	; (8006070 <RCC_GetClocksFreq+0x144>)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f98:	4b33      	ldr	r3, [pc, #204]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fa0:	400b      	ands	r3, r1
 8005fa2:	099b      	lsrs	r3, r3, #6
 8005fa4:	fb03 f302 	mul.w	r3, r3, r2
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	e00c      	b.n	8005fc6 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <RCC_GetClocksFreq+0x140>)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fb4:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fbc:	400b      	ands	r3, r1
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	fb03 f302 	mul.w	r3, r3, r2
 8005fc4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005fc6:	4b28      	ldr	r3, [pc, #160]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
    break;
 8005fe2:	e003      	b.n	8005fec <RCC_GetClocksFreq+0xc0>
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	; (800606c <RCC_GetClocksFreq+0x140>)
 8005fe8:	601a      	str	r2, [r3, #0]
    break;
 8005fea:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005ffc:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <RCC_GetClocksFreq+0x148>)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	4413      	add	r3, r2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	40da      	lsrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800601a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	0a9b      	lsrs	r3, r3, #10
 8006020:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006022:	4a14      	ldr	r2, [pc, #80]	; (8006074 <RCC_GetClocksFreq+0x148>)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	4413      	add	r3, r2
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	40da      	lsrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8006038:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <RCC_GetClocksFreq+0x13c>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006040:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	0b5b      	lsrs	r3, r3, #13
 8006046:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006048:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <RCC_GetClocksFreq+0x148>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4413      	add	r3, r2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	40da      	lsrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60da      	str	r2, [r3, #12]
}
 800605e:	3724      	adds	r7, #36	; 0x24
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40023800 	.word	0x40023800
 800606c:	00f42400 	.word	0x00f42400
 8006070:	007a1200 	.word	0x007a1200
 8006074:	0800a708 	.word	0x0800a708

08006078 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800608c:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800608e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	430a      	orrs	r2, r1
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
 8006096:	e006      	b.n	80060a6 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800609c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	43d2      	mvns	r2, r2
 80060a2:	400a      	ands	r2, r1
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40023800 	.word	0x40023800

080060b4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d006      	beq.n	80060d4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <RCC_APB1PeriphClockCmd+0x38>)
 80060c8:	4a08      	ldr	r2, [pc, #32]	; (80060ec <RCC_APB1PeriphClockCmd+0x38>)
 80060ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
 80060d2:	e006      	b.n	80060e2 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <RCC_APB1PeriphClockCmd+0x38>)
 80060d6:	4a05      	ldr	r2, [pc, #20]	; (80060ec <RCC_APB1PeriphClockCmd+0x38>)
 80060d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	43d2      	mvns	r2, r2
 80060de:	400a      	ands	r2, r1
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40023800 	.word	0x40023800

080060f0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <RCC_APB2PeriphClockCmd+0x38>)
 8006104:	4a08      	ldr	r2, [pc, #32]	; (8006128 <RCC_APB2PeriphClockCmd+0x38>)
 8006106:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	430a      	orrs	r2, r1
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
 800610e:	e006      	b.n	800611e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <RCC_APB2PeriphClockCmd+0x38>)
 8006112:	4a05      	ldr	r2, [pc, #20]	; (8006128 <RCC_APB2PeriphClockCmd+0x38>)
 8006114:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	43d2      	mvns	r2, r2
 800611a:	400a      	ands	r2, r1
 800611c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40023800 	.word	0x40023800

0800612c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800613e:	2300      	movs	r3, #0
 8006140:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	b2db      	uxtb	r3, r3
 8006148:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d103      	bne.n	8006158 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8006150:	4b12      	ldr	r3, [pc, #72]	; (800619c <RCC_GetFlagStatus+0x70>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e009      	b.n	800616c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d103      	bne.n	8006166 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <RCC_GetFlagStatus+0x70>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e002      	b.n	800616c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <RCC_GetFlagStatus+0x70>)
 8006168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8006184:	2301      	movs	r3, #1
 8006186:	74fb      	strb	r3, [r7, #19]
 8006188:	e001      	b.n	800618e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800618e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006190:	4618      	mov	r0, r3
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	40023800 	.word	0x40023800

080061a0 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  if (NewState != DISABLE)
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <PWR_OverDriveCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODEN;
 80061b0:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <PWR_OverDriveCmd+0x34>)
 80061b2:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <PWR_OverDriveCmd+0x34>)
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e005      	b.n	80061ca <PWR_OverDriveCmd+0x2a>
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
 80061be:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <PWR_OverDriveCmd+0x34>)
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <PWR_OverDriveCmd+0x34>)
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061c8:	601a      	str	r2, [r3, #0]
  }
}
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	40007000 	.word	0x40007000

080061d8 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  if (NewState != DISABLE)
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d006      	beq.n	80061f6 <PWR_OverDriveSWCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODSWEN;
 80061e8:	4b08      	ldr	r3, [pc, #32]	; (800620c <PWR_OverDriveSWCmd+0x34>)
 80061ea:	4a08      	ldr	r2, [pc, #32]	; (800620c <PWR_OverDriveSWCmd+0x34>)
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e005      	b.n	8006202 <PWR_OverDriveSWCmd+0x2a>
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <PWR_OverDriveSWCmd+0x34>)
 80061f8:	4a04      	ldr	r2, [pc, #16]	; (800620c <PWR_OverDriveSWCmd+0x34>)
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006200:	601a      	str	r2, [r3, #0]
  }
}
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40007000 	.word	0x40007000

08006210 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if( PWR_FLAG & 0x80000000 )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da0f      	bge.n	8006242 <PWR_GetFlagStatus+0x32>
  {
    PWR_FLAG &= PWR_WUPF_MASK;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006228:	607b      	str	r3, [r7, #4]
    if ((PWR->CSR2 & PWR_FLAG) != (uint32_t)RESET)
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <PWR_GetFlagStatus+0x58>)
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <PWR_GetFlagStatus+0x2c>
    {
      bitstatus = SET;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e00d      	b.n	8006258 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 800623c:	2300      	movs	r3, #0
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	e00a      	b.n	8006258 <PWR_GetFlagStatus+0x48>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_FLAG) != (uint32_t)RESET)
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <PWR_GetFlagStatus+0x58>)
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <PWR_GetFlagStatus+0x44>
    {
      bitstatus = SET;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e001      	b.n	8006258 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the flag status */
  return bitstatus;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40007000 	.word	0x40007000

0800626c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e076      	b.n	8006376 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2201      	movs	r2, #1
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4013      	ands	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d165      	bne.n	8006370 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	2103      	movs	r1, #3
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	401a      	ands	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	791b      	ldrb	r3, [r3, #4]
 80062c2:	4619      	mov	r1, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	fa01 f303 	lsl.w	r3, r1, r3
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d003      	beq.n	80062e2 <GPIO_Init+0x76>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	791b      	ldrb	r3, [r3, #4]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d12e      	bne.n	8006340 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	2103      	movs	r1, #3
 80062ec:	fa01 f303 	lsl.w	r3, r1, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	795b      	ldrb	r3, [r3, #5]
 8006300:	4619      	mov	r1, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	fa01 f303 	lsl.w	r3, r1, r3
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	b29b      	uxth	r3, r3
 8006318:	2101      	movs	r1, #1
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	401a      	ands	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	799b      	ldrb	r3, [r3, #6]
 800632e:	4619      	mov	r1, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	b29b      	uxth	r3, r3
 8006334:	fa01 f303 	lsl.w	r3, r1, r3
 8006338:	b29b      	uxth	r3, r3
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	b29b      	uxth	r3, r3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	2103      	movs	r1, #3
 800634c:	fa01 f303 	lsl.w	r3, r1, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	401a      	ands	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	79db      	ldrb	r3, [r3, #7]
 8006360:	4619      	mov	r1, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	3301      	adds	r3, #1
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b0f      	cmp	r3, #15
 800637a:	d985      	bls.n	8006288 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	460a      	mov	r2, r1
 8006394:	807a      	strh	r2, [r7, #2]
 8006396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8006398:	787b      	ldrb	r3, [r7, #1]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]
 80063a4:	e003      	b.n	80063ae <GPIO_WriteBit+0x26>
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063a6:	887b      	ldrh	r3, [r7, #2]
 80063a8:	041a      	lsls	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	619a      	str	r2, [r3, #24]
  }
}
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF14_LTDC: Connect LTDC pins to AF14 for STM32F746xx/756xx devices.
  *            @arg GPIO_AF15_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	460a      	mov	r2, r1
 80063c4:	807a      	strh	r2, [r7, #2]
 80063c6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80063d0:	787a      	ldrb	r2, [r7, #1]
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	08db      	lsrs	r3, r3, #3
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	08db      	lsrs	r3, r3, #3
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	4619      	mov	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3108      	adds	r1, #8
 80063f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80063f8:	887b      	ldrh	r3, [r7, #2]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	200f      	movs	r0, #15
 8006402:	fa00 f303 	lsl.w	r3, r0, r3
 8006406:	43db      	mvns	r3, r3
 8006408:	4019      	ands	r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3208      	adds	r2, #8
 800640e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006412:	887b      	ldrh	r3, [r7, #2]
 8006414:	08db      	lsrs	r3, r3, #3
 8006416:	b29b      	uxth	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3208      	adds	r2, #8
 800641e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006428:	887b      	ldrh	r3, [r7, #2]
 800642a:	08db      	lsrs	r3, r3, #3
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3208      	adds	r2, #8
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)FLASH_Latency);
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <FLASH_SetLatency+0x24>)
 800644e:	4a06      	ldr	r2, [pc, #24]	; (8006468 <FLASH_SetLatency+0x24>)
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	f022 010f 	bic.w	r1, r2, #15
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	430a      	orrs	r2, r1
 800645a:	601a      	str	r2, [r3, #0]
}
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40023c00 	.word	0x40023c00

0800646c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800648a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800648e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800649a:	4313      	orrs	r3, r2
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4b17      	ldr	r3, [pc, #92]	; (8006510 <ADC_Init+0xa4>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80064be:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80064c4:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	795b      	ldrb	r3, [r3, #5]
 80064ca:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80064cc:	4313      	orrs	r3, r2
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064e6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	7d1b      	ldrb	r3, [r3, #20]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	051b      	lsls	r3, r3, #20
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	c0fff7fd 	.word	0xc0fff7fd

08006514 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	751a      	strb	r2, [r3, #20]
}
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <ADC_CommonInit+0x48>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4b0d      	ldr	r3, [pc, #52]	; (800659c <ADC_CommonInit+0x4c>)
 8006566:	4013      	ands	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8006572:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8006578:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800657e:	4313      	orrs	r3, r2
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8006586:	4b04      	ldr	r3, [pc, #16]	; (8006598 <ADC_CommonInit+0x48>)
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	605a      	str	r2, [r3, #4]
}
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40012300 	.word	0x40012300
 800659c:	fffc30e0 	.word	0xfffc30e0

080065a0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	60da      	str	r2, [r3, #12]
}
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop

080065cc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d006      	beq.n	80065ec <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	e005      	b.n	80065f8 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f023 0201 	bic.w	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	609a      	str	r2, [r3, #8]
  }
}
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop

08006604 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8006614:	4b08      	ldr	r3, [pc, #32]	; (8006638 <ADC_TempSensorVrefintCmd+0x34>)
 8006616:	4a08      	ldr	r2, [pc, #32]	; (8006638 <ADC_TempSensorVrefintCmd+0x34>)
 8006618:	6852      	ldr	r2, [r2, #4]
 800661a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	e005      	b.n	800662e <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <ADC_TempSensorVrefintCmd+0x34>)
 8006624:	4a04      	ldr	r2, [pc, #16]	; (8006638 <ADC_TempSensorVrefintCmd+0x34>)
 8006626:	6852      	ldr	r2, [r2, #4]
 8006628:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800662c:	605a      	str	r2, [r3, #4]
  }
}
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40012300 	.word	0x40012300

0800663c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	70f9      	strb	r1, [r7, #3]
 8006646:	70ba      	strb	r2, [r7, #2]
 8006648:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	2b09      	cmp	r3, #9
 8006656:	d923      	bls.n	80066a0 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	f1a3 020a 	sub.w	r2, r3, #10
 8006664:	4613      	mov	r3, r2
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	4413      	add	r3, r2
 800666a:	2207      	movs	r2, #7
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	43db      	mvns	r3, r3
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4013      	ands	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800667c:	7879      	ldrb	r1, [r7, #1]
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	f1a3 020a 	sub.w	r2, r3, #10
 8006684:	4613      	mov	r3, r2
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4413      	add	r3, r2
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	e01e      	b.n	80066de <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80066a6:	78fa      	ldrb	r2, [r7, #3]
 80066a8:	4613      	mov	r3, r2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	4413      	add	r3, r2
 80066ae:	2207      	movs	r2, #7
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	43db      	mvns	r3, r3
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80066c0:	7879      	ldrb	r1, [r7, #1]
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	4613      	mov	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	4413      	add	r3, r2
 80066ca:	fa01 f303 	lsl.w	r3, r1, r3
 80066ce:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80066de:	78bb      	ldrb	r3, [r7, #2]
 80066e0:	2b06      	cmp	r3, #6
 80066e2:	d821      	bhi.n	8006728 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80066ea:	78bb      	ldrb	r3, [r7, #2]
 80066ec:	1e5a      	subs	r2, r3, #1
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	221f      	movs	r2, #31
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	43db      	mvns	r3, r3
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4013      	ands	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8006706:	78f9      	ldrb	r1, [r7, #3]
 8006708:	78bb      	ldrb	r3, [r7, #2]
 800670a:	1e5a      	subs	r2, r3, #1
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	fa01 f303 	lsl.w	r3, r1, r3
 8006716:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	635a      	str	r2, [r3, #52]	; 0x34
 8006726:	e047      	b.n	80067b8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8006728:	78bb      	ldrb	r3, [r7, #2]
 800672a:	2b0c      	cmp	r3, #12
 800672c:	d821      	bhi.n	8006772 <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8006734:	78bb      	ldrb	r3, [r7, #2]
 8006736:	1fda      	subs	r2, r3, #7
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	221f      	movs	r2, #31
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	43db      	mvns	r3, r3
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4013      	ands	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8006750:	78f9      	ldrb	r1, [r7, #3]
 8006752:	78bb      	ldrb	r3, [r7, #2]
 8006754:	1fda      	subs	r2, r3, #7
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
 8006770:	e022      	b.n	80067b8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8006778:	78bb      	ldrb	r3, [r7, #2]
 800677a:	f1a3 020d 	sub.w	r2, r3, #13
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	221f      	movs	r2, #31
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	43db      	mvns	r3, r3
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4013      	ands	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8006796:	78f9      	ldrb	r1, [r7, #3]
 8006798:	78bb      	ldrb	r3, [r7, #2]
 800679a:	f1a3 020d 	sub.w	r2, r3, #13
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	fa01 f303 	lsl.w	r3, r1, r3
 80067a8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	609a      	str	r2, [r3, #8]
}
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f0:	b29b      	uxth	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop

08006800 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e001      	b.n	8006826 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800683c:	4a05      	ldr	r2, [pc, #20]	; (8006854 <NVIC_PriorityGroupConfig+0x20>)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006848:	60d3      	str	r3, [r2, #12]
}
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	e000ed00 	.word	0xe000ed00

08006858 <OS_CreateMotionTask>:
/* Local, Private functions */
static void OS_MotionTask(void *pvParameters);


void OS_CreateMotionTask(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af04      	add	r7, sp, #16
    xTaskCreate(OS_MotionTask, "MOTION", 250, NULL, OS_TASK_PRIORITY_MOTION, NULL );
 800685e:	2304      	movs	r3, #4
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	2300      	movs	r3, #0
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	2300      	movs	r3, #0
 8006868:	9302      	str	r3, [sp, #8]
 800686a:	2300      	movs	r3, #0
 800686c:	9303      	str	r3, [sp, #12]
 800686e:	4804      	ldr	r0, [pc, #16]	; (8006880 <OS_CreateMotionTask+0x28>)
 8006870:	4904      	ldr	r1, [pc, #16]	; (8006884 <OS_CreateMotionTask+0x2c>)
 8006872:	22fa      	movs	r2, #250	; 0xfa
 8006874:	2300      	movs	r3, #0
 8006876:	f7fc f94d 	bl	8002b14 <xTaskGenericCreate>
}
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	08006889 	.word	0x08006889
 8006884:	0800a6a4 	.word	0x0800a6a4

08006888 <OS_MotionTask>:

static void OS_MotionTask( void *pvParameters )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    TickType_t xNextWakeTime;

    int32_t encoderValue;

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8006890:	f7fc fb6c 	bl	8002f6c <xTaskGetTickCount>
 8006894:	4603      	mov	r3, r0
 8006896:	60bb      	str	r3, [r7, #8]

    for( ;; )
    {

        /* Wakes-up when required */
        vTaskDelayUntil( &xNextWakeTime, MOTION_CONTROL_PERIOD_TICKS);
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	4618      	mov	r0, r3
 800689e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80068a2:	f7fc f9f9 	bl	8002c98 <vTaskDelayUntil>

        encoderValue = 10*HW_ENC_GetChannel(HW_ENC_CHANNEL1);
 80068a6:	2000      	movs	r0, #0
 80068a8:	f7fb fb44 	bl	8001f34 <HW_ENC_GetChannel>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
        printf("IBAT: %u mV\r\n", HW_MON_ConvertRawValueToMv(HW_MON_ReadChannel(ADC_IBAT_CHANNEL)));
 80068b8:	200c      	movs	r0, #12
 80068ba:	f7fb f89d 	bl	80019f8 <HW_MON_ReadChannel>
 80068be:	4603      	mov	r3, r0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fb f8bb 	bl	8001a3c <HW_MON_ConvertRawValueToMv>
 80068c6:	4603      	mov	r3, r0
 80068c8:	480e      	ldr	r0, [pc, #56]	; (8006904 <OS_MotionTask+0x7c>)
 80068ca:	4619      	mov	r1, r3
 80068cc:	f000 f982 	bl	8006bd4 <printf>
        HW_MOT_SetMotorSpeed(HW_MOT_CHANNEL1,   encoderValue, DISABLE);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	b21b      	sxth	r3, r3
 80068d6:	2000      	movs	r0, #0
 80068d8:	4619      	mov	r1, r3
 80068da:	2200      	movs	r2, #0
 80068dc:	f7fa ff66 	bl	80017ac <HW_MOT_SetMotorSpeed>
        HW_MOT_SetMotorSpeed(HW_MOT_CHANNEL2,   encoderValue, DISABLE);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	2001      	movs	r0, #1
 80068e8:	4619      	mov	r1, r3
 80068ea:	2200      	movs	r2, #0
 80068ec:	f7fa ff5e 	bl	80017ac <HW_MOT_SetMotorSpeed>
        printf("MOT: %04d\r\n", encoderValue);
 80068f0:	4805      	ldr	r0, [pc, #20]	; (8006908 <OS_MotionTask+0x80>)
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	f000 f96e 	bl	8006bd4 <printf>
        HW_HMI_TxRx((uint16_t) encoderValue);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fb fa65 	bl	8001dcc <HW_HMI_TxRx>
        printf("CEL2: %u mV\r\n", HW_MON_ConvertRawValueToMv(HW_MON_ReadChannel(ADC_CEL2_CHANNEL)));
        printf("CEL3: %u mV\r\n", HW_MON_ConvertRawValueToMv(HW_MON_ReadChannel(ADC_CEL3_CHANNEL)));
        printf("CEL4: %u mV\r\n", HW_MON_ConvertRawValueToMv(HW_MON_ReadChannel(ADC_CEL4_CHANNEL)));
        printf("Read IP1: %u\r\n", HW_MON_ReadChannel(ADC_IP1_CHANNEL));*/

    }
 8006902:	e7c9      	b.n	8006898 <OS_MotionTask+0x10>
 8006904:	0800a6ac 	.word	0x0800a6ac
 8006908:	0800a6bc 	.word	0x0800a6bc

0800690c <OS_CreateLedTask>:
/* Local, Private functions */
static void OS_LedTask(void *pvParameters);


void OS_CreateLedTask(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af04      	add	r7, sp, #16
    xTaskCreate(OS_LedTask, "LED", configMINIMAL_STACK_SIZE, NULL, OS_TASK_PRIORITY_LED, NULL );
 8006912:	2301      	movs	r3, #1
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	2300      	movs	r3, #0
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	2300      	movs	r3, #0
 800691c:	9302      	str	r3, [sp, #8]
 800691e:	2300      	movs	r3, #0
 8006920:	9303      	str	r3, [sp, #12]
 8006922:	4804      	ldr	r0, [pc, #16]	; (8006934 <OS_CreateLedTask+0x28>)
 8006924:	4904      	ldr	r1, [pc, #16]	; (8006938 <OS_CreateLedTask+0x2c>)
 8006926:	2282      	movs	r2, #130	; 0x82
 8006928:	2300      	movs	r3, #0
 800692a:	f7fc f8f3 	bl	8002b14 <xTaskGenericCreate>
}
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	0800693d 	.word	0x0800693d
 8006938:	0800a6c8 	.word	0x0800a6c8

0800693c <OS_LedTask>:

static void OS_LedTask( void *pvParameters )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
    TickType_t xNextWakeTime;

    HW_LED_ColorTypeDef LedColor = HW_LED_CYAN;
 8006944:	2304      	movs	r3, #4
 8006946:	73fb      	strb	r3, [r7, #15]
    HW_LED_ModeTypeDef LedMode   = HW_LED_BLINK_SLOW ;
 8006948:	2301      	movs	r3, #1
 800694a:	73bb      	strb	r3, [r7, #14]

    uint32_t blinkCounter = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
    uint32_t blinkPeriod = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8006954:	f7fc fb0a 	bl	8002f6c <xTaskGetTickCount>
 8006958:	4603      	mov	r3, r0
 800695a:	60bb      	str	r3, [r7, #8]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
        switch(LedMode)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d002      	beq.n	8006968 <OS_LedTask+0x2c>
 8006962:	2b02      	cmp	r3, #2
 8006964:	d003      	beq.n	800696e <OS_LedTask+0x32>
                blinkPeriod = LED_BLINK_FAST;
                break;

            default:
            case HW_LED_STATIC:
                        break;
 8006966:	e005      	b.n	8006974 <OS_LedTask+0x38>
    for( ;; )
    {
        switch(LedMode)
        {
            case HW_LED_BLINK_SLOW:
                blinkPeriod = LED_BLINK_SLOW;
 8006968:	2364      	movs	r3, #100	; 0x64
 800696a:	613b      	str	r3, [r7, #16]
                break;
 800696c:	e002      	b.n	8006974 <OS_LedTask+0x38>

            case HW_LED_BLINK_FAST:
                blinkPeriod = LED_BLINK_FAST;
 800696e:	230a      	movs	r3, #10
 8006970:	613b      	str	r3, [r7, #16]
                break;
 8006972:	bf00      	nop
            case HW_LED_STATIC:
                        break;
        }

        /* Handles blinking counter */
        if(blinkCounter++ > blinkPeriod)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	617a      	str	r2, [r7, #20]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <OS_LedTask+0x48>
            blinkCounter = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]

        if((blinkCounter > blinkPeriod / 2) || LedMode == HW_LED_STATIC) {
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	085a      	lsrs	r2, r3, #1
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <OS_LedTask+0x58>
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d113      	bne.n	80069bc <OS_LedTask+0x80>

            /* Duration ON */
            HW_LED_SetColor(LedColor);
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	4618      	mov	r0, r3
 8006998:	f7fb f8ae 	bl	8001af8 <HW_LED_SetColor>
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_DUTY_TICK);
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	2101      	movs	r1, #1
 80069a4:	f7fc f978 	bl	8002c98 <vTaskDelayUntil>

            /* Duration OFF */
            HW_LED_SetColor(HW_LED_OFF);
 80069a8:	2000      	movs	r0, #0
 80069aa:	f7fb f8a5 	bl	8001af8 <HW_LED_SetColor>
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK-LED_PWM_DUTY_TICK);
 80069ae:	f107 0308 	add.w	r3, r7, #8
 80069b2:	4618      	mov	r0, r3
 80069b4:	2113      	movs	r1, #19
 80069b6:	f7fc f96f 	bl	8002c98 <vTaskDelayUntil>

        } else {
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK);
        }

    }
 80069ba:	e7cf      	b.n	800695c <OS_LedTask+0x20>
            /* Duration OFF */
            HW_LED_SetColor(HW_LED_OFF);
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK-LED_PWM_DUTY_TICK);

        } else {
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK);
 80069bc:	f107 0308 	add.w	r3, r7, #8
 80069c0:	4618      	mov	r0, r3
 80069c2:	2114      	movs	r1, #20
 80069c4:	f7fc f968 	bl	8002c98 <vTaskDelayUntil>
        }

    }
 80069c8:	e7c8      	b.n	800695c <OS_LedTask+0x20>
 80069ca:	bf00      	nop

080069cc <_read>:
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e009      	b.n	80069f2 <_read+0x26>
    {
        //*ptr++ = __io_getchar();
        *ptr++ = HW_DBG_Get();
 80069de:	68bc      	ldr	r4, [r7, #8]
 80069e0:	1c63      	adds	r3, r4, #1
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	f7fb fb5a 	bl	800209c <HW_DBG_Get>
 80069e8:	4603      	mov	r3, r0
 80069ea:	7023      	strb	r3, [r4, #0]

int _read (int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	3301      	adds	r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	dbf1      	blt.n	80069de <_read+0x12>
    {
        //*ptr++ = __io_getchar();
        *ptr++ = HW_DBG_Get();
    }

return len;
 80069fa:	687b      	ldr	r3, [r7, #4]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <_write>:

int _write(int file, char *ptr, int len)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	e009      	b.n	8006a2a <_write+0x26>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	60ba      	str	r2, [r7, #8]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fb fb24 	bl	800206c <HW_DBG_Put>

int _write(int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	3301      	adds	r3, #1
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	dbf1      	blt.n	8006a16 <_write+0x12>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
    }
    return len;
 8006a32:	687b      	ldr	r3, [r7, #4]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8006a44:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <_sbrk+0x50>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <_sbrk+0x16>
        heap_end = &end;
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <_sbrk+0x50>)
 8006a4e:	4a10      	ldr	r2, [pc, #64]	; (8006a90 <_sbrk+0x54>)
 8006a50:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <_sbrk+0x50>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <_sbrk+0x50>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	441a      	add	r2, r3
 8006a60:	466b      	mov	r3, sp
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d907      	bls.n	8006a76 <_sbrk+0x3a>
    {
//      write(1, "Heap and stack collision\n", 25);
//      abort();
        errno = ENOMEM;
 8006a66:	f000 f877 	bl	8006b58 <__errno>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	220c      	movs	r2, #12
 8006a6e:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 8006a70:	f04f 33ff 	mov.w	r3, #4294967295
 8006a74:	e006      	b.n	8006a84 <_sbrk+0x48>
    }

    heap_end += incr;
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <_sbrk+0x50>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	441a      	add	r2, r3
 8006a7e:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <_sbrk+0x50>)
 8006a80:	601a      	str	r2, [r3, #0]

    return (caddr_t) prev_heap_end;
 8006a82:	68fb      	ldr	r3, [r7, #12]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20014304 	.word	0x20014304
 8006a90:	200145ec 	.word	0x200145ec

08006a94 <_close>:

int _close(int file)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
    return -1;
 8006a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006abc:	605a      	str	r2, [r3, #4]
    return 0;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <_isatty>:

int _isatty(int file)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
    return 1;
 8006ad4:	2301      	movs	r3, #1
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
    return 0;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <vApplicationMallocFailedHook>:
 */

#include "blueboard.h"

void vApplicationMallocFailedHook( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 8006b04:	2022      	movs	r0, #34	; 0x22
 8006b06:	4902      	ldr	r1, [pc, #8]	; (8006b10 <vApplicationMallocFailedHook+0x10>)
 8006b08:	f000 f812 	bl	8006b30 <vAssertCalled>
}
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	0800a6cc 	.word	0x0800a6cc

08006b14 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    function is called if a stack overflow is detected. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 8006b1e:	2030      	movs	r0, #48	; 0x30
 8006b20:	4902      	ldr	r1, [pc, #8]	; (8006b2c <vApplicationStackOverflowHook+0x18>)
 8006b22:	f000 f805 	bl	8006b30 <vAssertCalled>
}
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	0800a6cc 	.word	0x0800a6cc

08006b30 <vAssertCalled>:
    ( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]

    ( void ) pcFile;
    ( void ) ulLine;

    taskENTER_CRITICAL();
 8006b3e:	f7fd ff07 	bl	8004950 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while( ul == 0 )
 8006b42:	e000      	b.n	8006b46 <vAssertCalled+0x16>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8006b44:	bf00      	nop
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0fb      	beq.n	8006b44 <vAssertCalled+0x14>
        {
            __NOP();
        }
    }
    taskEXIT_CRITICAL();
 8006b4c:	f7fd ff2a 	bl	80049a4 <vPortExitCritical>
}
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <__errno>:
 8006b58:	4b01      	ldr	r3, [pc, #4]	; (8006b60 <__errno+0x8>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20010104 	.word	0x20010104

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b68:	4d0e      	ldr	r5, [pc, #56]	; (8006ba4 <__libc_init_array+0x40>)
 8006b6a:	1aed      	subs	r5, r5, r3
 8006b6c:	10ad      	asrs	r5, r5, #2
 8006b6e:	2400      	movs	r4, #0
 8006b70:	461e      	mov	r6, r3
 8006b72:	42ac      	cmp	r4, r5
 8006b74:	d004      	beq.n	8006b80 <__libc_init_array+0x1c>
 8006b76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006b7a:	4790      	blx	r2
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	e7f8      	b.n	8006b72 <__libc_init_array+0xe>
 8006b80:	f003 fd0e 	bl	800a5a0 <_init>
 8006b84:	4d08      	ldr	r5, [pc, #32]	; (8006ba8 <__libc_init_array+0x44>)
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <__libc_init_array+0x48>)
 8006b88:	1aed      	subs	r5, r5, r3
 8006b8a:	10ad      	asrs	r5, r5, #2
 8006b8c:	2400      	movs	r4, #0
 8006b8e:	461e      	mov	r6, r3
 8006b90:	42ac      	cmp	r4, r5
 8006b92:	d004      	beq.n	8006b9e <__libc_init_array+0x3a>
 8006b94:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006b98:	4790      	blx	r2
 8006b9a:	3401      	adds	r4, #1
 8006b9c:	e7f8      	b.n	8006b90 <__libc_init_array+0x2c>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	0800a8f4 	.word	0x0800a8f4
 8006ba4:	0800a8f4 	.word	0x0800a8f4
 8006ba8:	0800a8f8 	.word	0x0800a8f8
 8006bac:	0800a8f4 	.word	0x0800a8f4

08006bb0 <memcpy>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <memcpy+0x10>
 8006bb8:	5ccc      	ldrb	r4, [r1, r3]
 8006bba:	54c4      	strb	r4, [r0, r3]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	e7f9      	b.n	8006bb4 <memcpy+0x4>
 8006bc0:	bd10      	pop	{r4, pc}

08006bc2 <memset>:
 8006bc2:	4402      	add	r2, r0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d002      	beq.n	8006bd0 <memset+0xe>
 8006bca:	f803 1b01 	strb.w	r1, [r3], #1
 8006bce:	e7fa      	b.n	8006bc6 <memset+0x4>
 8006bd0:	4770      	bx	lr
	...

08006bd4 <printf>:
 8006bd4:	b40f      	push	{r0, r1, r2, r3}
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <printf+0x2c>)
 8006bd8:	b513      	push	{r0, r1, r4, lr}
 8006bda:	681c      	ldr	r4, [r3, #0]
 8006bdc:	b124      	cbz	r4, 8006be8 <printf+0x14>
 8006bde:	69a3      	ldr	r3, [r4, #24]
 8006be0:	b913      	cbnz	r3, 8006be8 <printf+0x14>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f001 ffe2 	bl	8008bac <__sinit>
 8006be8:	ab05      	add	r3, sp, #20
 8006bea:	4620      	mov	r0, r4
 8006bec:	68a1      	ldr	r1, [r4, #8]
 8006bee:	9a04      	ldr	r2, [sp, #16]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	f000 f849 	bl	8006c88 <_vfprintf_r>
 8006bf6:	b002      	add	sp, #8
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	b004      	add	sp, #16
 8006bfe:	4770      	bx	lr
 8006c00:	20010104 	.word	0x20010104

08006c04 <_puts_r>:
 8006c04:	b530      	push	{r4, r5, lr}
 8006c06:	4604      	mov	r4, r0
 8006c08:	b089      	sub	sp, #36	; 0x24
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	f000 f833 	bl	8006c78 <strlen>
 8006c12:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <_puts_r+0x60>)
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	2301      	movs	r3, #1
 8006c18:	9005      	str	r0, [sp, #20]
 8006c1a:	9307      	str	r3, [sp, #28]
 8006c1c:	4418      	add	r0, r3
 8006c1e:	ab04      	add	r3, sp, #16
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	2302      	movs	r3, #2
 8006c24:	9504      	str	r5, [sp, #16]
 8006c26:	9003      	str	r0, [sp, #12]
 8006c28:	9302      	str	r3, [sp, #8]
 8006c2a:	b124      	cbz	r4, 8006c36 <_puts_r+0x32>
 8006c2c:	69a3      	ldr	r3, [r4, #24]
 8006c2e:	b913      	cbnz	r3, 8006c36 <_puts_r+0x32>
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 ffbb 	bl	8008bac <__sinit>
 8006c36:	68a1      	ldr	r1, [r4, #8]
 8006c38:	898b      	ldrh	r3, [r1, #12]
 8006c3a:	049a      	lsls	r2, r3, #18
 8006c3c:	d406      	bmi.n	8006c4c <_puts_r+0x48>
 8006c3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c42:	818b      	strh	r3, [r1, #12]
 8006c44:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4a:	664b      	str	r3, [r1, #100]	; 0x64
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	aa01      	add	r2, sp, #4
 8006c50:	f002 f97a 	bl	8008f48 <__sfvwrite_r>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	bf0c      	ite	eq
 8006c58:	200a      	moveq	r0, #10
 8006c5a:	f04f 30ff 	movne.w	r0, #4294967295
 8006c5e:	b009      	add	sp, #36	; 0x24
 8006c60:	bd30      	pop	{r4, r5, pc}
 8006c62:	bf00      	nop
 8006c64:	0800a720 	.word	0x0800a720

08006c68 <puts>:
 8006c68:	4b02      	ldr	r3, [pc, #8]	; (8006c74 <puts+0xc>)
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	f7ff bfc9 	b.w	8006c04 <_puts_r>
 8006c72:	bf00      	nop
 8006c74:	20010104 	.word	0x20010104

08006c78 <strlen>:
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	d1fb      	bne.n	8006c7a <strlen+0x2>
 8006c82:	1a18      	subs	r0, r3, r0
 8006c84:	3801      	subs	r0, #1
 8006c86:	4770      	bx	lr

08006c88 <_vfprintf_r>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	b0bf      	sub	sp, #252	; 0xfc
 8006c8e:	4689      	mov	r9, r1
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	461c      	mov	r4, r3
 8006c94:	4698      	mov	r8, r3
 8006c96:	4682      	mov	sl, r0
 8006c98:	f002 fac8 	bl	800922c <_localeconv_r>
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	9014      	str	r0, [sp, #80]	; 0x50
 8006ca0:	f7ff ffea 	bl	8006c78 <strlen>
 8006ca4:	900c      	str	r0, [sp, #48]	; 0x30
 8006ca6:	f1ba 0f00 	cmp.w	sl, #0
 8006caa:	d005      	beq.n	8006cb8 <_vfprintf_r+0x30>
 8006cac:	f8da 3018 	ldr.w	r3, [sl, #24]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_vfprintf_r+0x30>
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	f001 ff7a 	bl	8008bac <__sinit>
 8006cb8:	4b99      	ldr	r3, [pc, #612]	; (8006f20 <_vfprintf_r+0x298>)
 8006cba:	4599      	cmp	r9, r3
 8006cbc:	d102      	bne.n	8006cc4 <_vfprintf_r+0x3c>
 8006cbe:	f8da 9004 	ldr.w	r9, [sl, #4]
 8006cc2:	e00a      	b.n	8006cda <_vfprintf_r+0x52>
 8006cc4:	4b97      	ldr	r3, [pc, #604]	; (8006f24 <_vfprintf_r+0x29c>)
 8006cc6:	4599      	cmp	r9, r3
 8006cc8:	d102      	bne.n	8006cd0 <_vfprintf_r+0x48>
 8006cca:	f8da 9008 	ldr.w	r9, [sl, #8]
 8006cce:	e004      	b.n	8006cda <_vfprintf_r+0x52>
 8006cd0:	4b95      	ldr	r3, [pc, #596]	; (8006f28 <_vfprintf_r+0x2a0>)
 8006cd2:	4599      	cmp	r9, r3
 8006cd4:	bf08      	it	eq
 8006cd6:	f8da 900c 	ldreq.w	r9, [sl, #12]
 8006cda:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006cde:	0498      	lsls	r0, r3, #18
 8006ce0:	d409      	bmi.n	8006cf6 <_vfprintf_r+0x6e>
 8006ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ce6:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006cea:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8006cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf2:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8006cf6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006cfa:	0719      	lsls	r1, r3, #28
 8006cfc:	d509      	bpl.n	8006d12 <_vfprintf_r+0x8a>
 8006cfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d02:	b133      	cbz	r3, 8006d12 <_vfprintf_r+0x8a>
 8006d04:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006d08:	f003 031a 	and.w	r3, r3, #26
 8006d0c:	2b0a      	cmp	r3, #10
 8006d0e:	d116      	bne.n	8006d3e <_vfprintf_r+0xb6>
 8006d10:	e009      	b.n	8006d26 <_vfprintf_r+0x9e>
 8006d12:	4650      	mov	r0, sl
 8006d14:	4649      	mov	r1, r9
 8006d16:	f000 ffc1 	bl	8007c9c <__swsetup_r>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0f2      	beq.n	8006d04 <_vfprintf_r+0x7c>
 8006d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d22:	f000 bf7e 	b.w	8007c22 <_vfprintf_r+0xf9a>
 8006d26:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	db07      	blt.n	8006d3e <_vfprintf_r+0xb6>
 8006d2e:	4650      	mov	r0, sl
 8006d30:	4649      	mov	r1, r9
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	4623      	mov	r3, r4
 8006d36:	f000 ff7b 	bl	8007c30 <__sbprintf>
 8006d3a:	f000 bf72 	b.w	8007c22 <_vfprintf_r+0xf9a>
 8006d3e:	ed9f 7b76 	vldr	d7, [pc, #472]	; 8006f18 <_vfprintf_r+0x290>
 8006d42:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006d46:	2300      	movs	r3, #0
 8006d48:	ae2e      	add	r6, sp, #184	; 0xb8
 8006d4a:	9621      	str	r6, [sp, #132]	; 0x84
 8006d4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8006d4e:	9322      	str	r3, [sp, #136]	; 0x88
 8006d50:	9305      	str	r3, [sp, #20]
 8006d52:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d54:	9316      	str	r3, [sp, #88]	; 0x58
 8006d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d58:	9b07      	ldr	r3, [sp, #28]
 8006d5a:	461c      	mov	r4, r3
 8006d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d60:	b91a      	cbnz	r2, 8006d6a <_vfprintf_r+0xe2>
 8006d62:	9807      	ldr	r0, [sp, #28]
 8006d64:	1a25      	subs	r5, r4, r0
 8006d66:	d103      	bne.n	8006d70 <_vfprintf_r+0xe8>
 8006d68:	e01b      	b.n	8006da2 <_vfprintf_r+0x11a>
 8006d6a:	2a25      	cmp	r2, #37	; 0x25
 8006d6c:	d1f5      	bne.n	8006d5a <_vfprintf_r+0xd2>
 8006d6e:	e7f8      	b.n	8006d62 <_vfprintf_r+0xda>
 8006d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d72:	9907      	ldr	r1, [sp, #28]
 8006d74:	442b      	add	r3, r5
 8006d76:	9323      	str	r3, [sp, #140]	; 0x8c
 8006d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	2b07      	cmp	r3, #7
 8006d7e:	e886 0022 	stmia.w	r6, {r1, r5}
 8006d82:	9322      	str	r3, [sp, #136]	; 0x88
 8006d84:	dc01      	bgt.n	8006d8a <_vfprintf_r+0x102>
 8006d86:	3608      	adds	r6, #8
 8006d88:	e008      	b.n	8006d9c <_vfprintf_r+0x114>
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	aa21      	add	r2, sp, #132	; 0x84
 8006d90:	f003 f9f9 	bl	800a186 <__sprint_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 873e 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8006d9a:	ae2e      	add	r6, sp, #184	; 0xb8
 8006d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d9e:	442a      	add	r2, r5
 8006da0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006da2:	7823      	ldrb	r3, [r4, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 872f 	beq.w	8007c08 <_vfprintf_r+0xf80>
 8006daa:	2300      	movs	r3, #0
 8006dac:	3401      	adds	r4, #1
 8006dae:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006db2:	f04f 3bff 	mov.w	fp, #4294967295
 8006db6:	930a      	str	r3, [sp, #40]	; 0x28
 8006db8:	461f      	mov	r7, r3
 8006dba:	1c65      	adds	r5, r4, #1
 8006dbc:	7824      	ldrb	r4, [r4, #0]
 8006dbe:	9507      	str	r5, [sp, #28]
 8006dc0:	9404      	str	r4, [sp, #16]
 8006dc2:	9c04      	ldr	r4, [sp, #16]
 8006dc4:	f1a4 0220 	sub.w	r2, r4, #32
 8006dc8:	2a58      	cmp	r2, #88	; 0x58
 8006dca:	f200 838e 	bhi.w	80074ea <_vfprintf_r+0x862>
 8006dce:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006dd2:	006d      	.short	0x006d
 8006dd4:	038c038c 	.word	0x038c038c
 8006dd8:	038c0071 	.word	0x038c0071
 8006ddc:	038c038c 	.word	0x038c038c
 8006de0:	038c038c 	.word	0x038c038c
 8006de4:	005b038c 	.word	0x005b038c
 8006de8:	038c0059 	.word	0x038c0059
 8006dec:	007a0077 	.word	0x007a0077
 8006df0:	00a0038c 	.word	0x00a0038c
 8006df4:	00af00af 	.word	0x00af00af
 8006df8:	00af00af 	.word	0x00af00af
 8006dfc:	00af00af 	.word	0x00af00af
 8006e00:	00af00af 	.word	0x00af00af
 8006e04:	038c00af 	.word	0x038c00af
 8006e08:	038c038c 	.word	0x038c038c
 8006e0c:	038c038c 	.word	0x038c038c
 8006e10:	038c038c 	.word	0x038c038c
 8006e14:	038c038c 	.word	0x038c038c
 8006e18:	00e0038c 	.word	0x00e0038c
 8006e1c:	038c010b 	.word	0x038c010b
 8006e20:	038c010b 	.word	0x038c010b
 8006e24:	038c038c 	.word	0x038c038c
 8006e28:	00c3038c 	.word	0x00c3038c
 8006e2c:	038c038c 	.word	0x038c038c
 8006e30:	038c026b 	.word	0x038c026b
 8006e34:	038c038c 	.word	0x038c038c
 8006e38:	038c038c 	.word	0x038c038c
 8006e3c:	038c02c4 	.word	0x038c02c4
 8006e40:	0068038c 	.word	0x0068038c
 8006e44:	038c038c 	.word	0x038c038c
 8006e48:	038c038c 	.word	0x038c038c
 8006e4c:	038c038c 	.word	0x038c038c
 8006e50:	038c038c 	.word	0x038c038c
 8006e54:	038c038c 	.word	0x038c038c
 8006e58:	006500d6 	.word	0x006500d6
 8006e5c:	010b010b 	.word	0x010b010b
 8006e60:	00c6010b 	.word	0x00c6010b
 8006e64:	038c0065 	.word	0x038c0065
 8006e68:	00c9038c 	.word	0x00c9038c
 8006e6c:	024c038c 	.word	0x024c038c
 8006e70:	0295026d 	.word	0x0295026d
 8006e74:	038c00d3 	.word	0x038c00d3
 8006e78:	038c02a7 	.word	0x038c02a7
 8006e7c:	038c02c6 	.word	0x038c02c6
 8006e80:	02e1038c 	.word	0x02e1038c
 8006e84:	232b      	movs	r3, #43	; 0x2b
 8006e86:	e007      	b.n	8006e98 <_vfprintf_r+0x210>
 8006e88:	f8d8 5000 	ldr.w	r5, [r8]
 8006e8c:	950a      	str	r5, [sp, #40]	; 0x28
 8006e8e:	2d00      	cmp	r5, #0
 8006e90:	f108 0204 	add.w	r2, r8, #4
 8006e94:	db11      	blt.n	8006eba <_vfprintf_r+0x232>
 8006e96:	4690      	mov	r8, r2
 8006e98:	9c07      	ldr	r4, [sp, #28]
 8006e9a:	e78e      	b.n	8006dba <_vfprintf_r+0x132>
 8006e9c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006ea0:	e07b      	b.n	8006f9a <_vfprintf_r+0x312>
 8006ea2:	4c22      	ldr	r4, [pc, #136]	; (8006f2c <_vfprintf_r+0x2a4>)
 8006ea4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006ea8:	9417      	str	r4, [sp, #92]	; 0x5c
 8006eaa:	e277      	b.n	800739c <_vfprintf_r+0x714>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf08      	it	eq
 8006eb0:	2320      	moveq	r3, #32
 8006eb2:	e7f1      	b.n	8006e98 <_vfprintf_r+0x210>
 8006eb4:	f047 0701 	orr.w	r7, r7, #1
 8006eb8:	e7ee      	b.n	8006e98 <_vfprintf_r+0x210>
 8006eba:	426d      	negs	r5, r5
 8006ebc:	950a      	str	r5, [sp, #40]	; 0x28
 8006ebe:	4690      	mov	r8, r2
 8006ec0:	f047 0704 	orr.w	r7, r7, #4
 8006ec4:	e7e8      	b.n	8006e98 <_vfprintf_r+0x210>
 8006ec6:	9c07      	ldr	r4, [sp, #28]
 8006ec8:	7825      	ldrb	r5, [r4, #0]
 8006eca:	9504      	str	r5, [sp, #16]
 8006ecc:	2d2a      	cmp	r5, #42	; 0x2a
 8006ece:	f104 0201 	add.w	r2, r4, #1
 8006ed2:	d002      	beq.n	8006eda <_vfprintf_r+0x252>
 8006ed4:	f04f 0c00 	mov.w	ip, #0
 8006ed8:	e00b      	b.n	8006ef2 <_vfprintf_r+0x26a>
 8006eda:	f8d8 b000 	ldr.w	fp, [r8]
 8006ede:	9207      	str	r2, [sp, #28]
 8006ee0:	f108 0104 	add.w	r1, r8, #4
 8006ee4:	f1bb 0f00 	cmp.w	fp, #0
 8006ee8:	4688      	mov	r8, r1
 8006eea:	dad5      	bge.n	8006e98 <_vfprintf_r+0x210>
 8006eec:	f04f 3bff 	mov.w	fp, #4294967295
 8006ef0:	e7d2      	b.n	8006e98 <_vfprintf_r+0x210>
 8006ef2:	9d04      	ldr	r5, [sp, #16]
 8006ef4:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8006ef8:	2909      	cmp	r1, #9
 8006efa:	d806      	bhi.n	8006f0a <_vfprintf_r+0x282>
 8006efc:	200a      	movs	r0, #10
 8006efe:	f812 4b01 	ldrb.w	r4, [r2], #1
 8006f02:	9404      	str	r4, [sp, #16]
 8006f04:	fb00 1c0c 	mla	ip, r0, ip, r1
 8006f08:	e7f3      	b.n	8006ef2 <_vfprintf_r+0x26a>
 8006f0a:	ea4c 7bec 	orr.w	fp, ip, ip, asr #31
 8006f0e:	9207      	str	r2, [sp, #28]
 8006f10:	e757      	b.n	8006dc2 <_vfprintf_r+0x13a>
 8006f12:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8006f16:	e7bf      	b.n	8006e98 <_vfprintf_r+0x210>
	...
 8006f20:	0800a784 	.word	0x0800a784
 8006f24:	0800a7a4 	.word	0x0800a7a4
 8006f28:	0800a7c4 	.word	0x0800a7c4
 8006f2c:	0800a742 	.word	0x0800a742
 8006f30:	2400      	movs	r4, #0
 8006f32:	940a      	str	r4, [sp, #40]	; 0x28
 8006f34:	9d04      	ldr	r5, [sp, #16]
 8006f36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f38:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8006f3c:	210a      	movs	r1, #10
 8006f3e:	fb01 2404 	mla	r4, r1, r4, r2
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	940a      	str	r4, [sp, #40]	; 0x28
 8006f46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f4a:	9504      	str	r5, [sp, #16]
 8006f4c:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8006f50:	2909      	cmp	r1, #9
 8006f52:	d8dc      	bhi.n	8006f0e <_vfprintf_r+0x286>
 8006f54:	9207      	str	r2, [sp, #28]
 8006f56:	e7ed      	b.n	8006f34 <_vfprintf_r+0x2ac>
 8006f58:	f047 0708 	orr.w	r7, r7, #8
 8006f5c:	e79c      	b.n	8006e98 <_vfprintf_r+0x210>
 8006f5e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8006f62:	e799      	b.n	8006e98 <_vfprintf_r+0x210>
 8006f64:	9c07      	ldr	r4, [sp, #28]
 8006f66:	7822      	ldrb	r2, [r4, #0]
 8006f68:	2a6c      	cmp	r2, #108	; 0x6c
 8006f6a:	d102      	bne.n	8006f72 <_vfprintf_r+0x2ea>
 8006f6c:	3401      	adds	r4, #1
 8006f6e:	9407      	str	r4, [sp, #28]
 8006f70:	e002      	b.n	8006f78 <_vfprintf_r+0x2f0>
 8006f72:	f047 0710 	orr.w	r7, r7, #16
 8006f76:	e78f      	b.n	8006e98 <_vfprintf_r+0x210>
 8006f78:	f047 0720 	orr.w	r7, r7, #32
 8006f7c:	e78c      	b.n	8006e98 <_vfprintf_r+0x210>
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8006f86:	2500      	movs	r5, #0
 8006f88:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8006f8c:	f108 0804 	add.w	r8, r8, #4
 8006f90:	e2b6      	b.n	8007500 <_vfprintf_r+0x878>
 8006f92:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006f96:	f047 0710 	orr.w	r7, r7, #16
 8006f9a:	06ba      	lsls	r2, r7, #26
 8006f9c:	d508      	bpl.n	8006fb0 <_vfprintf_r+0x328>
 8006f9e:	f108 0807 	add.w	r8, r8, #7
 8006fa2:	f028 0307 	bic.w	r3, r8, #7
 8006fa6:	f103 0808 	add.w	r8, r3, #8
 8006faa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006fae:	e00f      	b.n	8006fd0 <_vfprintf_r+0x348>
 8006fb0:	f017 0f10 	tst.w	r7, #16
 8006fb4:	f108 0304 	add.w	r3, r8, #4
 8006fb8:	d002      	beq.n	8006fc0 <_vfprintf_r+0x338>
 8006fba:	f8d8 4000 	ldr.w	r4, [r8]
 8006fbe:	e005      	b.n	8006fcc <_vfprintf_r+0x344>
 8006fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8006fc4:	f017 0f40 	tst.w	r7, #64	; 0x40
 8006fc8:	bf18      	it	ne
 8006fca:	b224      	sxthne	r4, r4
 8006fcc:	17e5      	asrs	r5, r4, #31
 8006fce:	4698      	mov	r8, r3
 8006fd0:	2c00      	cmp	r4, #0
 8006fd2:	f175 0100 	sbcs.w	r1, r5, #0
 8006fd6:	f280 820c 	bge.w	80073f2 <_vfprintf_r+0x76a>
 8006fda:	232d      	movs	r3, #45	; 0x2d
 8006fdc:	4264      	negs	r4, r4
 8006fde:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006fe2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006fe6:	e204      	b.n	80073f2 <_vfprintf_r+0x76a>
 8006fe8:	9c04      	ldr	r4, [sp, #16]
 8006fea:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006fee:	f108 0807 	add.w	r8, r8, #7
 8006ff2:	f028 0307 	bic.w	r3, r8, #7
 8006ff6:	9706      	str	r7, [sp, #24]
 8006ff8:	940d      	str	r4, [sp, #52]	; 0x34
 8006ffa:	ed93 7b00 	vldr	d7, [r3]
 8006ffe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007002:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007006:	f103 0808 	add.w	r8, r3, #8
 800700a:	f003 f845 	bl	800a098 <__fpclassifyd>
 800700e:	2801      	cmp	r0, #1
 8007010:	d116      	bne.n	8007040 <_vfprintf_r+0x3b8>
 8007012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007016:	2200      	movs	r2, #0
 8007018:	2300      	movs	r3, #0
 800701a:	f7f9 fd1f 	bl	8000a5c <__aeabi_dcmplt>
 800701e:	b110      	cbz	r0, 8007026 <_vfprintf_r+0x39e>
 8007020:	232d      	movs	r3, #45	; 0x2d
 8007022:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8007026:	4ba8      	ldr	r3, [pc, #672]	; (80072c8 <_vfprintf_r+0x640>)
 8007028:	4aa8      	ldr	r2, [pc, #672]	; (80072cc <_vfprintf_r+0x644>)
 800702a:	9c04      	ldr	r4, [sp, #16]
 800702c:	2c47      	cmp	r4, #71	; 0x47
 800702e:	bfd8      	it	le
 8007030:	461a      	movle	r2, r3
 8007032:	9203      	str	r2, [sp, #12]
 8007034:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8007038:	f04f 0b03 	mov.w	fp, #3
 800703c:	2500      	movs	r5, #0
 800703e:	e266      	b.n	800750e <_vfprintf_r+0x886>
 8007040:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007044:	f003 f828 	bl	800a098 <__fpclassifyd>
 8007048:	b958      	cbnz	r0, 8007062 <_vfprintf_r+0x3da>
 800704a:	4ba1      	ldr	r3, [pc, #644]	; (80072d0 <_vfprintf_r+0x648>)
 800704c:	4aa1      	ldr	r2, [pc, #644]	; (80072d4 <_vfprintf_r+0x64c>)
 800704e:	9d04      	ldr	r5, [sp, #16]
 8007050:	2d47      	cmp	r5, #71	; 0x47
 8007052:	bfd8      	it	le
 8007054:	461a      	movle	r2, r3
 8007056:	9203      	str	r2, [sp, #12]
 8007058:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800705c:	f04f 0b03 	mov.w	fp, #3
 8007060:	e254      	b.n	800750c <_vfprintf_r+0x884>
 8007062:	f1bb 3fff 	cmp.w	fp, #4294967295
 8007066:	d00a      	beq.n	800707e <_vfprintf_r+0x3f6>
 8007068:	9c04      	ldr	r4, [sp, #16]
 800706a:	f024 0320 	bic.w	r3, r4, #32
 800706e:	2b47      	cmp	r3, #71	; 0x47
 8007070:	d107      	bne.n	8007082 <_vfprintf_r+0x3fa>
 8007072:	f1bb 0f00 	cmp.w	fp, #0
 8007076:	bf08      	it	eq
 8007078:	f04f 0b01 	moveq.w	fp, #1
 800707c:	e001      	b.n	8007082 <_vfprintf_r+0x3fa>
 800707e:	f04f 0b06 	mov.w	fp, #6
 8007082:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 800708c:	da07      	bge.n	800709e <_vfprintf_r+0x416>
 800708e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007090:	9d08      	ldr	r5, [sp, #32]
 8007092:	950e      	str	r5, [sp, #56]	; 0x38
 8007094:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007098:	900f      	str	r0, [sp, #60]	; 0x3c
 800709a:	242d      	movs	r4, #45	; 0x2d
 800709c:	e004      	b.n	80070a8 <_vfprintf_r+0x420>
 800709e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80070a2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80070a6:	2400      	movs	r4, #0
 80070a8:	9d04      	ldr	r5, [sp, #16]
 80070aa:	9415      	str	r4, [sp, #84]	; 0x54
 80070ac:	f025 0420 	bic.w	r4, r5, #32
 80070b0:	2c46      	cmp	r4, #70	; 0x46
 80070b2:	d004      	beq.n	80070be <_vfprintf_r+0x436>
 80070b4:	2c45      	cmp	r4, #69	; 0x45
 80070b6:	d105      	bne.n	80070c4 <_vfprintf_r+0x43c>
 80070b8:	f10b 0501 	add.w	r5, fp, #1
 80070bc:	e003      	b.n	80070c6 <_vfprintf_r+0x43e>
 80070be:	465d      	mov	r5, fp
 80070c0:	2103      	movs	r1, #3
 80070c2:	e001      	b.n	80070c8 <_vfprintf_r+0x440>
 80070c4:	465d      	mov	r5, fp
 80070c6:	2102      	movs	r1, #2
 80070c8:	ab1c      	add	r3, sp, #112	; 0x70
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	ab1f      	add	r3, sp, #124	; 0x7c
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	4650      	mov	r0, sl
 80070d2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80070d6:	462a      	mov	r2, r5
 80070d8:	ab1b      	add	r3, sp, #108	; 0x6c
 80070da:	f000 fedd 	bl	8007e98 <_dtoa_r>
 80070de:	2c47      	cmp	r4, #71	; 0x47
 80070e0:	9003      	str	r0, [sp, #12]
 80070e2:	d10a      	bne.n	80070fa <_vfprintf_r+0x472>
 80070e4:	9806      	ldr	r0, [sp, #24]
 80070e6:	07c3      	lsls	r3, r0, #31
 80070e8:	d407      	bmi.n	80070fa <_vfprintf_r+0x472>
 80070ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070ec:	9d03      	ldr	r5, [sp, #12]
 80070ee:	2c47      	cmp	r4, #71	; 0x47
 80070f0:	ebc5 0303 	rsb	r3, r5, r3
 80070f4:	9305      	str	r3, [sp, #20]
 80070f6:	d137      	bne.n	8007168 <_vfprintf_r+0x4e0>
 80070f8:	e02d      	b.n	8007156 <_vfprintf_r+0x4ce>
 80070fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80070fe:	2c46      	cmp	r4, #70	; 0x46
 8007100:	44ac      	add	ip, r5
 8007102:	d113      	bne.n	800712c <_vfprintf_r+0x4a4>
 8007104:	9803      	ldr	r0, [sp, #12]
 8007106:	7803      	ldrb	r3, [r0, #0]
 8007108:	2b30      	cmp	r3, #48	; 0x30
 800710a:	d10d      	bne.n	8007128 <_vfprintf_r+0x4a0>
 800710c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007110:	2200      	movs	r2, #0
 8007112:	2300      	movs	r3, #0
 8007114:	f8cd c008 	str.w	ip, [sp, #8]
 8007118:	f7f9 fc96 	bl	8000a48 <__aeabi_dcmpeq>
 800711c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007120:	b910      	cbnz	r0, 8007128 <_vfprintf_r+0x4a0>
 8007122:	f1c5 0501 	rsb	r5, r5, #1
 8007126:	951b      	str	r5, [sp, #108]	; 0x6c
 8007128:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800712a:	449c      	add	ip, r3
 800712c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	f8cd c008 	str.w	ip, [sp, #8]
 8007138:	f7f9 fc86 	bl	8000a48 <__aeabi_dcmpeq>
 800713c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007140:	b108      	cbz	r0, 8007146 <_vfprintf_r+0x4be>
 8007142:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 8007146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007148:	4563      	cmp	r3, ip
 800714a:	d2ce      	bcs.n	80070ea <_vfprintf_r+0x462>
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007150:	2230      	movs	r2, #48	; 0x30
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	e7f7      	b.n	8007146 <_vfprintf_r+0x4be>
 8007156:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007158:	1cdc      	adds	r4, r3, #3
 800715a:	db01      	blt.n	8007160 <_vfprintf_r+0x4d8>
 800715c:	455b      	cmp	r3, fp
 800715e:	dd62      	ble.n	8007226 <_vfprintf_r+0x59e>
 8007160:	9c04      	ldr	r4, [sp, #16]
 8007162:	3c02      	subs	r4, #2
 8007164:	9404      	str	r4, [sp, #16]
 8007166:	e002      	b.n	800716e <_vfprintf_r+0x4e6>
 8007168:	9d04      	ldr	r5, [sp, #16]
 800716a:	2d65      	cmp	r5, #101	; 0x65
 800716c:	dc42      	bgt.n	80071f4 <_vfprintf_r+0x56c>
 800716e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007170:	9c04      	ldr	r4, [sp, #16]
 8007172:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
 8007176:	3b01      	subs	r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	931b      	str	r3, [sp, #108]	; 0x6c
 800717c:	bfba      	itte	lt
 800717e:	425b      	neglt	r3, r3
 8007180:	222d      	movlt	r2, #45	; 0x2d
 8007182:	222b      	movge	r2, #43	; 0x2b
 8007184:	2b09      	cmp	r3, #9
 8007186:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800718a:	dd1c      	ble.n	80071c6 <_vfprintf_r+0x53e>
 800718c:	f10d 0282 	add.w	r2, sp, #130	; 0x82
 8007190:	200a      	movs	r0, #10
 8007192:	fb93 f1f0 	sdiv	r1, r3, r0
 8007196:	fb00 3311 	mls	r3, r0, r1, r3
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	2909      	cmp	r1, #9
 800719e:	4614      	mov	r4, r2
 80071a0:	f802 3901 	strb.w	r3, [r2], #-1
 80071a4:	460b      	mov	r3, r1
 80071a6:	dcf3      	bgt.n	8007190 <_vfprintf_r+0x508>
 80071a8:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80071ac:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80071b0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80071b4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80071b8:	4294      	cmp	r4, r2
 80071ba:	d20b      	bcs.n	80071d4 <_vfprintf_r+0x54c>
 80071bc:	f814 2b01 	ldrb.w	r2, [r4], #1
 80071c0:	f803 2b01 	strb.w	r2, [r3], #1
 80071c4:	e7f6      	b.n	80071b4 <_vfprintf_r+0x52c>
 80071c6:	2230      	movs	r2, #48	; 0x30
 80071c8:	4413      	add	r3, r2
 80071ca:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80071ce:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80071d2:	ab1e      	add	r3, sp, #120	; 0x78
 80071d4:	9d05      	ldr	r5, [sp, #20]
 80071d6:	aa1d      	add	r2, sp, #116	; 0x74
 80071d8:	1a9a      	subs	r2, r3, r2
 80071da:	4693      	mov	fp, r2
 80071dc:	2d01      	cmp	r5, #1
 80071de:	9216      	str	r2, [sp, #88]	; 0x58
 80071e0:	44ab      	add	fp, r5
 80071e2:	dc03      	bgt.n	80071ec <_vfprintf_r+0x564>
 80071e4:	9d06      	ldr	r5, [sp, #24]
 80071e6:	f015 0401 	ands.w	r4, r5, #1
 80071ea:	d037      	beq.n	800725c <_vfprintf_r+0x5d4>
 80071ec:	f10b 0b01 	add.w	fp, fp, #1
 80071f0:	2400      	movs	r4, #0
 80071f2:	e033      	b.n	800725c <_vfprintf_r+0x5d4>
 80071f4:	9c04      	ldr	r4, [sp, #16]
 80071f6:	2c66      	cmp	r4, #102	; 0x66
 80071f8:	d115      	bne.n	8007226 <_vfprintf_r+0x59e>
 80071fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dd09      	ble.n	8007214 <_vfprintf_r+0x58c>
 8007200:	f1bb 0f00 	cmp.w	fp, #0
 8007204:	d102      	bne.n	800720c <_vfprintf_r+0x584>
 8007206:	9d06      	ldr	r5, [sp, #24]
 8007208:	07e8      	lsls	r0, r5, #31
 800720a:	d523      	bpl.n	8007254 <_vfprintf_r+0x5cc>
 800720c:	f10b 0c01 	add.w	ip, fp, #1
 8007210:	4463      	add	r3, ip
 8007212:	e01f      	b.n	8007254 <_vfprintf_r+0x5cc>
 8007214:	f1bb 0f00 	cmp.w	fp, #0
 8007218:	d102      	bne.n	8007220 <_vfprintf_r+0x598>
 800721a:	9c06      	ldr	r4, [sp, #24]
 800721c:	07e1      	lsls	r1, r4, #31
 800721e:	d515      	bpl.n	800724c <_vfprintf_r+0x5c4>
 8007220:	f10b 0302 	add.w	r3, fp, #2
 8007224:	e016      	b.n	8007254 <_vfprintf_r+0x5cc>
 8007226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007228:	9d05      	ldr	r5, [sp, #20]
 800722a:	42ab      	cmp	r3, r5
 800722c:	db04      	blt.n	8007238 <_vfprintf_r+0x5b0>
 800722e:	9c06      	ldr	r4, [sp, #24]
 8007230:	07e2      	lsls	r2, r4, #31
 8007232:	d50d      	bpl.n	8007250 <_vfprintf_r+0x5c8>
 8007234:	3301      	adds	r3, #1
 8007236:	e006      	b.n	8007246 <_vfprintf_r+0x5be>
 8007238:	2b00      	cmp	r3, #0
 800723a:	9c05      	ldr	r4, [sp, #20]
 800723c:	bfd4      	ite	le
 800723e:	f1c3 0302 	rsble	r3, r3, #2
 8007242:	2301      	movgt	r3, #1
 8007244:	4423      	add	r3, r4
 8007246:	2567      	movs	r5, #103	; 0x67
 8007248:	950d      	str	r5, [sp, #52]	; 0x34
 800724a:	e003      	b.n	8007254 <_vfprintf_r+0x5cc>
 800724c:	2301      	movs	r3, #1
 800724e:	e001      	b.n	8007254 <_vfprintf_r+0x5cc>
 8007250:	2467      	movs	r4, #103	; 0x67
 8007252:	940d      	str	r4, [sp, #52]	; 0x34
 8007254:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007256:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8007258:	9504      	str	r5, [sp, #16]
 800725a:	469b      	mov	fp, r3
 800725c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800725e:	b115      	cbz	r5, 8007266 <_vfprintf_r+0x5de>
 8007260:	232d      	movs	r3, #45	; 0x2d
 8007262:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8007266:	2500      	movs	r5, #0
 8007268:	e152      	b.n	8007510 <_vfprintf_r+0x888>
 800726a:	f017 0f20 	tst.w	r7, #32
 800726e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8007272:	f108 0104 	add.w	r1, r8, #4
 8007276:	d008      	beq.n	800728a <_vfprintf_r+0x602>
 8007278:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800727a:	f8d8 0000 	ldr.w	r0, [r8]
 800727e:	17e5      	asrs	r5, r4, #31
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	e9c0 2300 	strd	r2, r3, [r0]
 8007288:	e00c      	b.n	80072a4 <_vfprintf_r+0x61c>
 800728a:	06fb      	lsls	r3, r7, #27
 800728c:	d406      	bmi.n	800729c <_vfprintf_r+0x614>
 800728e:	067d      	lsls	r5, r7, #25
 8007290:	d504      	bpl.n	800729c <_vfprintf_r+0x614>
 8007292:	f8d8 3000 	ldr.w	r3, [r8]
 8007296:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007298:	801c      	strh	r4, [r3, #0]
 800729a:	e003      	b.n	80072a4 <_vfprintf_r+0x61c>
 800729c:	f8d8 3000 	ldr.w	r3, [r8]
 80072a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80072a2:	601d      	str	r5, [r3, #0]
 80072a4:	4688      	mov	r8, r1
 80072a6:	e557      	b.n	8006d58 <_vfprintf_r+0xd0>
 80072a8:	f047 0710 	orr.w	r7, r7, #16
 80072ac:	f017 0320 	ands.w	r3, r7, #32
 80072b0:	d012      	beq.n	80072d8 <_vfprintf_r+0x650>
 80072b2:	f108 0807 	add.w	r8, r8, #7
 80072b6:	f028 0307 	bic.w	r3, r8, #7
 80072ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80072be:	f103 0808 	add.w	r8, r3, #8
 80072c2:	2300      	movs	r3, #0
 80072c4:	e091      	b.n	80073ea <_vfprintf_r+0x762>
 80072c6:	bf00      	nop
 80072c8:	0800a732 	.word	0x0800a732
 80072cc:	0800a736 	.word	0x0800a736
 80072d0:	0800a73a 	.word	0x0800a73a
 80072d4:	0800a73e 	.word	0x0800a73e
 80072d8:	f017 0110 	ands.w	r1, r7, #16
 80072dc:	f108 0204 	add.w	r2, r8, #4
 80072e0:	d107      	bne.n	80072f2 <_vfprintf_r+0x66a>
 80072e2:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 80072e6:	d004      	beq.n	80072f2 <_vfprintf_r+0x66a>
 80072e8:	f8b8 4000 	ldrh.w	r4, [r8]
 80072ec:	2500      	movs	r5, #0
 80072ee:	4690      	mov	r8, r2
 80072f0:	e7e7      	b.n	80072c2 <_vfprintf_r+0x63a>
 80072f2:	f8d8 4000 	ldr.w	r4, [r8]
 80072f6:	2500      	movs	r5, #0
 80072f8:	4690      	mov	r8, r2
 80072fa:	e076      	b.n	80073ea <_vfprintf_r+0x762>
 80072fc:	2330      	movs	r3, #48	; 0x30
 80072fe:	2278      	movs	r2, #120	; 0x78
 8007300:	48a8      	ldr	r0, [pc, #672]	; (80075a4 <_vfprintf_r+0x91c>)
 8007302:	f8d8 4000 	ldr.w	r4, [r8]
 8007306:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800730a:	2500      	movs	r5, #0
 800730c:	f047 0702 	orr.w	r7, r7, #2
 8007310:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8007314:	f108 0804 	add.w	r8, r8, #4
 8007318:	9017      	str	r0, [sp, #92]	; 0x5c
 800731a:	2302      	movs	r3, #2
 800731c:	9204      	str	r2, [sp, #16]
 800731e:	e064      	b.n	80073ea <_vfprintf_r+0x762>
 8007320:	4643      	mov	r3, r8
 8007322:	2500      	movs	r5, #0
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	45ab      	cmp	fp, r5
 800732a:	f108 0804 	add.w	r8, r8, #4
 800732e:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8007332:	db0d      	blt.n	8007350 <_vfprintf_r+0x6c8>
 8007334:	4618      	mov	r0, r3
 8007336:	4629      	mov	r1, r5
 8007338:	465a      	mov	r2, fp
 800733a:	f002 f9f9 	bl	8009730 <memchr>
 800733e:	2800      	cmp	r0, #0
 8007340:	f000 80e4 	beq.w	800750c <_vfprintf_r+0x884>
 8007344:	9c03      	ldr	r4, [sp, #12]
 8007346:	1b00      	subs	r0, r0, r4
 8007348:	4558      	cmp	r0, fp
 800734a:	bfb8      	it	lt
 800734c:	4683      	movlt	fp, r0
 800734e:	e0de      	b.n	800750e <_vfprintf_r+0x886>
 8007350:	9803      	ldr	r0, [sp, #12]
 8007352:	f7ff fc91 	bl	8006c78 <strlen>
 8007356:	4683      	mov	fp, r0
 8007358:	e0d9      	b.n	800750e <_vfprintf_r+0x886>
 800735a:	f047 0710 	orr.w	r7, r7, #16
 800735e:	06bc      	lsls	r4, r7, #26
 8007360:	d508      	bpl.n	8007374 <_vfprintf_r+0x6ec>
 8007362:	f108 0807 	add.w	r8, r8, #7
 8007366:	f028 0307 	bic.w	r3, r8, #7
 800736a:	f103 0808 	add.w	r8, r3, #8
 800736e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007372:	e00d      	b.n	8007390 <_vfprintf_r+0x708>
 8007374:	f017 0f10 	tst.w	r7, #16
 8007378:	f108 0304 	add.w	r3, r8, #4
 800737c:	d104      	bne.n	8007388 <_vfprintf_r+0x700>
 800737e:	0678      	lsls	r0, r7, #25
 8007380:	d502      	bpl.n	8007388 <_vfprintf_r+0x700>
 8007382:	f8b8 4000 	ldrh.w	r4, [r8]
 8007386:	e001      	b.n	800738c <_vfprintf_r+0x704>
 8007388:	f8d8 4000 	ldr.w	r4, [r8]
 800738c:	2500      	movs	r5, #0
 800738e:	4698      	mov	r8, r3
 8007390:	2301      	movs	r3, #1
 8007392:	e02a      	b.n	80073ea <_vfprintf_r+0x762>
 8007394:	4d83      	ldr	r5, [pc, #524]	; (80075a4 <_vfprintf_r+0x91c>)
 8007396:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800739a:	9517      	str	r5, [sp, #92]	; 0x5c
 800739c:	06b9      	lsls	r1, r7, #26
 800739e:	d508      	bpl.n	80073b2 <_vfprintf_r+0x72a>
 80073a0:	f108 0807 	add.w	r8, r8, #7
 80073a4:	f028 0307 	bic.w	r3, r8, #7
 80073a8:	f103 0808 	add.w	r8, r3, #8
 80073ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80073b0:	e00d      	b.n	80073ce <_vfprintf_r+0x746>
 80073b2:	f017 0f10 	tst.w	r7, #16
 80073b6:	f108 0304 	add.w	r3, r8, #4
 80073ba:	d104      	bne.n	80073c6 <_vfprintf_r+0x73e>
 80073bc:	067a      	lsls	r2, r7, #25
 80073be:	d502      	bpl.n	80073c6 <_vfprintf_r+0x73e>
 80073c0:	f8b8 4000 	ldrh.w	r4, [r8]
 80073c4:	e001      	b.n	80073ca <_vfprintf_r+0x742>
 80073c6:	f8d8 4000 	ldr.w	r4, [r8]
 80073ca:	2500      	movs	r5, #0
 80073cc:	4698      	mov	r8, r3
 80073ce:	07fb      	lsls	r3, r7, #31
 80073d0:	d50a      	bpl.n	80073e8 <_vfprintf_r+0x760>
 80073d2:	ea54 0005 	orrs.w	r0, r4, r5
 80073d6:	d007      	beq.n	80073e8 <_vfprintf_r+0x760>
 80073d8:	2330      	movs	r3, #48	; 0x30
 80073da:	9904      	ldr	r1, [sp, #16]
 80073dc:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80073e0:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 80073e4:	f047 0702 	orr.w	r7, r7, #2
 80073e8:	2302      	movs	r3, #2
 80073ea:	2200      	movs	r2, #0
 80073ec:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80073f0:	e000      	b.n	80073f4 <_vfprintf_r+0x76c>
 80073f2:	2301      	movs	r3, #1
 80073f4:	f1bb 0f00 	cmp.w	fp, #0
 80073f8:	bfa8      	it	ge
 80073fa:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
 80073fe:	ea54 0205 	orrs.w	r2, r4, r5
 8007402:	d102      	bne.n	800740a <_vfprintf_r+0x782>
 8007404:	f1bb 0f00 	cmp.w	fp, #0
 8007408:	d05a      	beq.n	80074c0 <_vfprintf_r+0x838>
 800740a:	2b01      	cmp	r3, #1
 800740c:	d01f      	beq.n	800744e <_vfprintf_r+0x7c6>
 800740e:	2b02      	cmp	r3, #2
 8007410:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 8007414:	d041      	beq.n	800749a <_vfprintf_r+0x812>
 8007416:	08e1      	lsrs	r1, r4, #3
 8007418:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
 800741c:	08e9      	lsrs	r1, r5, #3
 800741e:	9010      	str	r0, [sp, #64]	; 0x40
 8007420:	9111      	str	r1, [sp, #68]	; 0x44
 8007422:	f004 0207 	and.w	r2, r4, #7
 8007426:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 800742a:	3230      	adds	r2, #48	; 0x30
 800742c:	ea54 0005 	orrs.w	r0, r4, r5
 8007430:	9303      	str	r3, [sp, #12]
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	f103 33ff 	add.w	r3, r3, #4294967295
 8007438:	d1ed      	bne.n	8007416 <_vfprintf_r+0x78e>
 800743a:	07f8      	lsls	r0, r7, #31
 800743c:	9903      	ldr	r1, [sp, #12]
 800743e:	d54c      	bpl.n	80074da <_vfprintf_r+0x852>
 8007440:	2a30      	cmp	r2, #48	; 0x30
 8007442:	d04a      	beq.n	80074da <_vfprintf_r+0x852>
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	2330      	movs	r3, #48	; 0x30
 8007448:	f801 3c01 	strb.w	r3, [r1, #-1]
 800744c:	e045      	b.n	80074da <_vfprintf_r+0x852>
 800744e:	2d00      	cmp	r5, #0
 8007450:	bf08      	it	eq
 8007452:	2c0a      	cmpeq	r4, #10
 8007454:	d205      	bcs.n	8007462 <_vfprintf_r+0x7da>
 8007456:	3430      	adds	r4, #48	; 0x30
 8007458:	f88d 40b7 	strb.w	r4, [sp, #183]	; 0xb7
 800745c:	f10d 04b7 	add.w	r4, sp, #183	; 0xb7
 8007460:	e03a      	b.n	80074d8 <_vfprintf_r+0x850>
 8007462:	f10d 00b7 	add.w	r0, sp, #183	; 0xb7
 8007466:	9006      	str	r0, [sp, #24]
 8007468:	9906      	ldr	r1, [sp, #24]
 800746a:	9103      	str	r1, [sp, #12]
 800746c:	4620      	mov	r0, r4
 800746e:	4629      	mov	r1, r5
 8007470:	220a      	movs	r2, #10
 8007472:	2300      	movs	r3, #0
 8007474:	f7f9 fb42 	bl	8000afc <__aeabi_uldivmod>
 8007478:	9b06      	ldr	r3, [sp, #24]
 800747a:	3230      	adds	r2, #48	; 0x30
 800747c:	f803 2901 	strb.w	r2, [r3], #-1
 8007480:	4620      	mov	r0, r4
 8007482:	9306      	str	r3, [sp, #24]
 8007484:	4629      	mov	r1, r5
 8007486:	220a      	movs	r2, #10
 8007488:	2300      	movs	r3, #0
 800748a:	f7f9 fb37 	bl	8000afc <__aeabi_uldivmod>
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	ea54 0005 	orrs.w	r0, r4, r5
 8007496:	d1e7      	bne.n	8007468 <_vfprintf_r+0x7e0>
 8007498:	e01f      	b.n	80074da <_vfprintf_r+0x852>
 800749a:	f004 020f 	and.w	r2, r4, #15
 800749e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	5c8a      	ldrb	r2, [r1, r2]
 80074a4:	f803 2901 	strb.w	r2, [r3], #-1
 80074a8:	0922      	lsrs	r2, r4, #4
 80074aa:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
 80074ae:	0929      	lsrs	r1, r5, #4
 80074b0:	9012      	str	r0, [sp, #72]	; 0x48
 80074b2:	9113      	str	r1, [sp, #76]	; 0x4c
 80074b4:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 80074b8:	ea54 0205 	orrs.w	r2, r4, r5
 80074bc:	d1ed      	bne.n	800749a <_vfprintf_r+0x812>
 80074be:	e00c      	b.n	80074da <_vfprintf_r+0x852>
 80074c0:	b933      	cbnz	r3, 80074d0 <_vfprintf_r+0x848>
 80074c2:	07fa      	lsls	r2, r7, #31
 80074c4:	d507      	bpl.n	80074d6 <_vfprintf_r+0x84e>
 80074c6:	ac3e      	add	r4, sp, #248	; 0xf8
 80074c8:	2330      	movs	r3, #48	; 0x30
 80074ca:	f804 3d41 	strb.w	r3, [r4, #-65]!
 80074ce:	e003      	b.n	80074d8 <_vfprintf_r+0x850>
 80074d0:	ad2e      	add	r5, sp, #184	; 0xb8
 80074d2:	9503      	str	r5, [sp, #12]
 80074d4:	e001      	b.n	80074da <_vfprintf_r+0x852>
 80074d6:	ac2e      	add	r4, sp, #184	; 0xb8
 80074d8:	9403      	str	r4, [sp, #12]
 80074da:	9c03      	ldr	r4, [sp, #12]
 80074dc:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 80074e0:	465d      	mov	r5, fp
 80074e2:	ebc4 0b0c 	rsb	fp, r4, ip
 80074e6:	2400      	movs	r4, #0
 80074e8:	e012      	b.n	8007510 <_vfprintf_r+0x888>
 80074ea:	9d04      	ldr	r5, [sp, #16]
 80074ec:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	f000 8389 	beq.w	8007c08 <_vfprintf_r+0xf80>
 80074f6:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 80074fa:	2500      	movs	r5, #0
 80074fc:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8007500:	a824      	add	r0, sp, #144	; 0x90
 8007502:	f04f 0b01 	mov.w	fp, #1
 8007506:	462c      	mov	r4, r5
 8007508:	9003      	str	r0, [sp, #12]
 800750a:	e001      	b.n	8007510 <_vfprintf_r+0x888>
 800750c:	4605      	mov	r5, r0
 800750e:	462c      	mov	r4, r5
 8007510:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8007514:	45ab      	cmp	fp, r5
 8007516:	bfac      	ite	ge
 8007518:	4659      	movge	r1, fp
 800751a:	4629      	movlt	r1, r5
 800751c:	9106      	str	r1, [sp, #24]
 800751e:	b10b      	cbz	r3, 8007524 <_vfprintf_r+0x89c>
 8007520:	3101      	adds	r1, #1
 8007522:	9106      	str	r1, [sp, #24]
 8007524:	f017 0302 	ands.w	r3, r7, #2
 8007528:	930d      	str	r3, [sp, #52]	; 0x34
 800752a:	d002      	beq.n	8007532 <_vfprintf_r+0x8aa>
 800752c:	9806      	ldr	r0, [sp, #24]
 800752e:	3002      	adds	r0, #2
 8007530:	9006      	str	r0, [sp, #24]
 8007532:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8007536:	9315      	str	r3, [sp, #84]	; 0x54
 8007538:	d141      	bne.n	80075be <_vfprintf_r+0x936>
 800753a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800753c:	9906      	ldr	r1, [sp, #24]
 800753e:	ebc1 0c00 	rsb	ip, r1, r0
 8007542:	f1bc 0f00 	cmp.w	ip, #0
 8007546:	dd3a      	ble.n	80075be <_vfprintf_r+0x936>
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <_vfprintf_r+0x920>)
 800754a:	6033      	str	r3, [r6, #0]
 800754c:	f1bc 0f10 	cmp.w	ip, #16
 8007550:	dd1b      	ble.n	800758a <_vfprintf_r+0x902>
 8007552:	2310      	movs	r3, #16
 8007554:	6073      	str	r3, [r6, #4]
 8007556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007558:	3310      	adds	r3, #16
 800755a:	9323      	str	r3, [sp, #140]	; 0x8c
 800755c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800755e:	3301      	adds	r3, #1
 8007560:	2b07      	cmp	r3, #7
 8007562:	9322      	str	r3, [sp, #136]	; 0x88
 8007564:	dc01      	bgt.n	800756a <_vfprintf_r+0x8e2>
 8007566:	3608      	adds	r6, #8
 8007568:	e00c      	b.n	8007584 <_vfprintf_r+0x8fc>
 800756a:	4650      	mov	r0, sl
 800756c:	4649      	mov	r1, r9
 800756e:	aa21      	add	r2, sp, #132	; 0x84
 8007570:	f8cd c008 	str.w	ip, [sp, #8]
 8007574:	f002 fe07 	bl	800a186 <__sprint_r>
 8007578:	f8dd c008 	ldr.w	ip, [sp, #8]
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 834a 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007582:	ae2e      	add	r6, sp, #184	; 0xb8
 8007584:	f1ac 0c10 	sub.w	ip, ip, #16
 8007588:	e7de      	b.n	8007548 <_vfprintf_r+0x8c0>
 800758a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800758c:	f8c6 c004 	str.w	ip, [r6, #4]
 8007590:	4463      	add	r3, ip
 8007592:	9323      	str	r3, [sp, #140]	; 0x8c
 8007594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007596:	3301      	adds	r3, #1
 8007598:	2b07      	cmp	r3, #7
 800759a:	9322      	str	r3, [sp, #136]	; 0x88
 800759c:	dc06      	bgt.n	80075ac <_vfprintf_r+0x924>
 800759e:	3608      	adds	r6, #8
 80075a0:	e00d      	b.n	80075be <_vfprintf_r+0x936>
 80075a2:	bf00      	nop
 80075a4:	0800a753 	.word	0x0800a753
 80075a8:	0800a722 	.word	0x0800a722
 80075ac:	4650      	mov	r0, sl
 80075ae:	4649      	mov	r1, r9
 80075b0:	aa21      	add	r2, sp, #132	; 0x84
 80075b2:	f002 fde8 	bl	800a186 <__sprint_r>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 832d 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80075bc:	ae2e      	add	r6, sp, #184	; 0xb8
 80075be:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80075c2:	b1bb      	cbz	r3, 80075f4 <_vfprintf_r+0x96c>
 80075c4:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	2301      	movs	r3, #1
 80075cc:	6073      	str	r3, [r6, #4]
 80075ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075d0:	3301      	adds	r3, #1
 80075d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80075d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075d6:	3301      	adds	r3, #1
 80075d8:	2b07      	cmp	r3, #7
 80075da:	9322      	str	r3, [sp, #136]	; 0x88
 80075dc:	dc01      	bgt.n	80075e2 <_vfprintf_r+0x95a>
 80075de:	3608      	adds	r6, #8
 80075e0:	e008      	b.n	80075f4 <_vfprintf_r+0x96c>
 80075e2:	4650      	mov	r0, sl
 80075e4:	4649      	mov	r1, r9
 80075e6:	aa21      	add	r2, sp, #132	; 0x84
 80075e8:	f002 fdcd 	bl	800a186 <__sprint_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 8312 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80075f2:	ae2e      	add	r6, sp, #184	; 0xb8
 80075f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f6:	b1b3      	cbz	r3, 8007626 <_vfprintf_r+0x99e>
 80075f8:	ab1a      	add	r3, sp, #104	; 0x68
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	2302      	movs	r3, #2
 80075fe:	6073      	str	r3, [r6, #4]
 8007600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007602:	3302      	adds	r3, #2
 8007604:	9323      	str	r3, [sp, #140]	; 0x8c
 8007606:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007608:	3301      	adds	r3, #1
 800760a:	2b07      	cmp	r3, #7
 800760c:	9322      	str	r3, [sp, #136]	; 0x88
 800760e:	dc01      	bgt.n	8007614 <_vfprintf_r+0x98c>
 8007610:	3608      	adds	r6, #8
 8007612:	e008      	b.n	8007626 <_vfprintf_r+0x99e>
 8007614:	4650      	mov	r0, sl
 8007616:	4649      	mov	r1, r9
 8007618:	aa21      	add	r2, sp, #132	; 0x84
 800761a:	f002 fdb4 	bl	800a186 <__sprint_r>
 800761e:	2800      	cmp	r0, #0
 8007620:	f040 82f9 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007624:	ae2e      	add	r6, sp, #184	; 0xb8
 8007626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d13c      	bne.n	80076a6 <_vfprintf_r+0xa1e>
 800762c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800762e:	9906      	ldr	r1, [sp, #24]
 8007630:	ebc1 0c00 	rsb	ip, r1, r0
 8007634:	f1bc 0f00 	cmp.w	ip, #0
 8007638:	dd35      	ble.n	80076a6 <_vfprintf_r+0xa1e>
 800763a:	4b9c      	ldr	r3, [pc, #624]	; (80078ac <_vfprintf_r+0xc24>)
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	f1bc 0f10 	cmp.w	ip, #16
 8007642:	dd1b      	ble.n	800767c <_vfprintf_r+0x9f4>
 8007644:	2310      	movs	r3, #16
 8007646:	6073      	str	r3, [r6, #4]
 8007648:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800764a:	3310      	adds	r3, #16
 800764c:	9323      	str	r3, [sp, #140]	; 0x8c
 800764e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007650:	3301      	adds	r3, #1
 8007652:	2b07      	cmp	r3, #7
 8007654:	9322      	str	r3, [sp, #136]	; 0x88
 8007656:	dc01      	bgt.n	800765c <_vfprintf_r+0x9d4>
 8007658:	3608      	adds	r6, #8
 800765a:	e00c      	b.n	8007676 <_vfprintf_r+0x9ee>
 800765c:	4650      	mov	r0, sl
 800765e:	4649      	mov	r1, r9
 8007660:	aa21      	add	r2, sp, #132	; 0x84
 8007662:	f8cd c008 	str.w	ip, [sp, #8]
 8007666:	f002 fd8e 	bl	800a186 <__sprint_r>
 800766a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 82d1 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007674:	ae2e      	add	r6, sp, #184	; 0xb8
 8007676:	f1ac 0c10 	sub.w	ip, ip, #16
 800767a:	e7de      	b.n	800763a <_vfprintf_r+0x9b2>
 800767c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800767e:	f8c6 c004 	str.w	ip, [r6, #4]
 8007682:	4463      	add	r3, ip
 8007684:	9323      	str	r3, [sp, #140]	; 0x8c
 8007686:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007688:	3301      	adds	r3, #1
 800768a:	2b07      	cmp	r3, #7
 800768c:	9322      	str	r3, [sp, #136]	; 0x88
 800768e:	dc01      	bgt.n	8007694 <_vfprintf_r+0xa0c>
 8007690:	3608      	adds	r6, #8
 8007692:	e008      	b.n	80076a6 <_vfprintf_r+0xa1e>
 8007694:	4650      	mov	r0, sl
 8007696:	4649      	mov	r1, r9
 8007698:	aa21      	add	r2, sp, #132	; 0x84
 800769a:	f002 fd74 	bl	800a186 <__sprint_r>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f040 82b9 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80076a4:	ae2e      	add	r6, sp, #184	; 0xb8
 80076a6:	ebcb 0505 	rsb	r5, fp, r5
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	dd2e      	ble.n	800770c <_vfprintf_r+0xa84>
 80076ae:	4b7f      	ldr	r3, [pc, #508]	; (80078ac <_vfprintf_r+0xc24>)
 80076b0:	6033      	str	r3, [r6, #0]
 80076b2:	2d10      	cmp	r5, #16
 80076b4:	dd16      	ble.n	80076e4 <_vfprintf_r+0xa5c>
 80076b6:	2310      	movs	r3, #16
 80076b8:	6073      	str	r3, [r6, #4]
 80076ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076bc:	3310      	adds	r3, #16
 80076be:	9323      	str	r3, [sp, #140]	; 0x8c
 80076c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c2:	3301      	adds	r3, #1
 80076c4:	2b07      	cmp	r3, #7
 80076c6:	9322      	str	r3, [sp, #136]	; 0x88
 80076c8:	dc01      	bgt.n	80076ce <_vfprintf_r+0xa46>
 80076ca:	3608      	adds	r6, #8
 80076cc:	e008      	b.n	80076e0 <_vfprintf_r+0xa58>
 80076ce:	4650      	mov	r0, sl
 80076d0:	4649      	mov	r1, r9
 80076d2:	aa21      	add	r2, sp, #132	; 0x84
 80076d4:	f002 fd57 	bl	800a186 <__sprint_r>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f040 829c 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80076de:	ae2e      	add	r6, sp, #184	; 0xb8
 80076e0:	3d10      	subs	r5, #16
 80076e2:	e7e4      	b.n	80076ae <_vfprintf_r+0xa26>
 80076e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076e6:	6075      	str	r5, [r6, #4]
 80076e8:	441d      	add	r5, r3
 80076ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ec:	9523      	str	r5, [sp, #140]	; 0x8c
 80076ee:	3301      	adds	r3, #1
 80076f0:	2b07      	cmp	r3, #7
 80076f2:	9322      	str	r3, [sp, #136]	; 0x88
 80076f4:	dc01      	bgt.n	80076fa <_vfprintf_r+0xa72>
 80076f6:	3608      	adds	r6, #8
 80076f8:	e008      	b.n	800770c <_vfprintf_r+0xa84>
 80076fa:	4650      	mov	r0, sl
 80076fc:	4649      	mov	r1, r9
 80076fe:	aa21      	add	r2, sp, #132	; 0x84
 8007700:	f002 fd41 	bl	800a186 <__sprint_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 8286 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 800770a:	ae2e      	add	r6, sp, #184	; 0xb8
 800770c:	05fb      	lsls	r3, r7, #23
 800770e:	d405      	bmi.n	800771c <_vfprintf_r+0xa94>
 8007710:	9c03      	ldr	r4, [sp, #12]
 8007712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007714:	e886 0810 	stmia.w	r6, {r4, fp}
 8007718:	445b      	add	r3, fp
 800771a:	e0da      	b.n	80078d2 <_vfprintf_r+0xc4a>
 800771c:	9d04      	ldr	r5, [sp, #16]
 800771e:	2d65      	cmp	r5, #101	; 0x65
 8007720:	f340 81a7 	ble.w	8007a72 <_vfprintf_r+0xdea>
 8007724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007728:	2200      	movs	r2, #0
 800772a:	2300      	movs	r3, #0
 800772c:	f7f9 f98c 	bl	8000a48 <__aeabi_dcmpeq>
 8007730:	2800      	cmp	r0, #0
 8007732:	d059      	beq.n	80077e8 <_vfprintf_r+0xb60>
 8007734:	4b5e      	ldr	r3, [pc, #376]	; (80078b0 <_vfprintf_r+0xc28>)
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	2301      	movs	r3, #1
 800773a:	6073      	str	r3, [r6, #4]
 800773c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800773e:	3301      	adds	r3, #1
 8007740:	9323      	str	r3, [sp, #140]	; 0x8c
 8007742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007744:	3301      	adds	r3, #1
 8007746:	2b07      	cmp	r3, #7
 8007748:	9322      	str	r3, [sp, #136]	; 0x88
 800774a:	dc01      	bgt.n	8007750 <_vfprintf_r+0xac8>
 800774c:	3608      	adds	r6, #8
 800774e:	e008      	b.n	8007762 <_vfprintf_r+0xada>
 8007750:	4650      	mov	r0, sl
 8007752:	4649      	mov	r1, r9
 8007754:	aa21      	add	r2, sp, #132	; 0x84
 8007756:	f002 fd16 	bl	800a186 <__sprint_r>
 800775a:	2800      	cmp	r0, #0
 800775c:	f040 825b 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007760:	ae2e      	add	r6, sp, #184	; 0xb8
 8007762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007764:	9c05      	ldr	r4, [sp, #20]
 8007766:	42a3      	cmp	r3, r4
 8007768:	db02      	blt.n	8007770 <_vfprintf_r+0xae8>
 800776a:	07fd      	lsls	r5, r7, #31
 800776c:	f140 8202 	bpl.w	8007b74 <_vfprintf_r+0xeec>
 8007770:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007774:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007776:	6035      	str	r5, [r6, #0]
 8007778:	4423      	add	r3, r4
 800777a:	9323      	str	r3, [sp, #140]	; 0x8c
 800777c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800777e:	6074      	str	r4, [r6, #4]
 8007780:	3301      	adds	r3, #1
 8007782:	2b07      	cmp	r3, #7
 8007784:	9322      	str	r3, [sp, #136]	; 0x88
 8007786:	dc01      	bgt.n	800778c <_vfprintf_r+0xb04>
 8007788:	3608      	adds	r6, #8
 800778a:	e008      	b.n	800779e <_vfprintf_r+0xb16>
 800778c:	4650      	mov	r0, sl
 800778e:	4649      	mov	r1, r9
 8007790:	aa21      	add	r2, sp, #132	; 0x84
 8007792:	f002 fcf8 	bl	800a186 <__sprint_r>
 8007796:	2800      	cmp	r0, #0
 8007798:	f040 823d 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 800779c:	ae2e      	add	r6, sp, #184	; 0xb8
 800779e:	9d05      	ldr	r5, [sp, #20]
 80077a0:	1e6c      	subs	r4, r5, #1
 80077a2:	2c00      	cmp	r4, #0
 80077a4:	f340 81e6 	ble.w	8007b74 <_vfprintf_r+0xeec>
 80077a8:	4b40      	ldr	r3, [pc, #256]	; (80078ac <_vfprintf_r+0xc24>)
 80077aa:	6033      	str	r3, [r6, #0]
 80077ac:	2c10      	cmp	r4, #16
 80077ae:	dd16      	ble.n	80077de <_vfprintf_r+0xb56>
 80077b0:	2310      	movs	r3, #16
 80077b2:	6073      	str	r3, [r6, #4]
 80077b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077b6:	3310      	adds	r3, #16
 80077b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80077ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077bc:	3301      	adds	r3, #1
 80077be:	2b07      	cmp	r3, #7
 80077c0:	9322      	str	r3, [sp, #136]	; 0x88
 80077c2:	dc01      	bgt.n	80077c8 <_vfprintf_r+0xb40>
 80077c4:	3608      	adds	r6, #8
 80077c6:	e008      	b.n	80077da <_vfprintf_r+0xb52>
 80077c8:	4650      	mov	r0, sl
 80077ca:	4649      	mov	r1, r9
 80077cc:	aa21      	add	r2, sp, #132	; 0x84
 80077ce:	f002 fcda 	bl	800a186 <__sprint_r>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f040 821f 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80077d8:	ae2e      	add	r6, sp, #184	; 0xb8
 80077da:	3c10      	subs	r4, #16
 80077dc:	e7e4      	b.n	80077a8 <_vfprintf_r+0xb20>
 80077de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077e0:	6074      	str	r4, [r6, #4]
 80077e2:	441c      	add	r4, r3
 80077e4:	9423      	str	r4, [sp, #140]	; 0x8c
 80077e6:	e134      	b.n	8007a52 <_vfprintf_r+0xdca>
 80077e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dc73      	bgt.n	80078d6 <_vfprintf_r+0xc4e>
 80077ee:	4b30      	ldr	r3, [pc, #192]	; (80078b0 <_vfprintf_r+0xc28>)
 80077f0:	6033      	str	r3, [r6, #0]
 80077f2:	2301      	movs	r3, #1
 80077f4:	6073      	str	r3, [r6, #4]
 80077f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077f8:	3301      	adds	r3, #1
 80077fa:	9323      	str	r3, [sp, #140]	; 0x8c
 80077fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fe:	3301      	adds	r3, #1
 8007800:	2b07      	cmp	r3, #7
 8007802:	9322      	str	r3, [sp, #136]	; 0x88
 8007804:	dc01      	bgt.n	800780a <_vfprintf_r+0xb82>
 8007806:	3608      	adds	r6, #8
 8007808:	e008      	b.n	800781c <_vfprintf_r+0xb94>
 800780a:	4650      	mov	r0, sl
 800780c:	4649      	mov	r1, r9
 800780e:	aa21      	add	r2, sp, #132	; 0x84
 8007810:	f002 fcb9 	bl	800a186 <__sprint_r>
 8007814:	2800      	cmp	r0, #0
 8007816:	f040 81fe 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 800781a:	ae2e      	add	r6, sp, #184	; 0xb8
 800781c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800781e:	b923      	cbnz	r3, 800782a <_vfprintf_r+0xba2>
 8007820:	9c05      	ldr	r4, [sp, #20]
 8007822:	b914      	cbnz	r4, 800782a <_vfprintf_r+0xba2>
 8007824:	07fc      	lsls	r4, r7, #31
 8007826:	f140 81a5 	bpl.w	8007b74 <_vfprintf_r+0xeec>
 800782a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800782c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800782e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007830:	6035      	str	r5, [r6, #0]
 8007832:	4423      	add	r3, r4
 8007834:	9323      	str	r3, [sp, #140]	; 0x8c
 8007836:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007838:	6074      	str	r4, [r6, #4]
 800783a:	3301      	adds	r3, #1
 800783c:	2b07      	cmp	r3, #7
 800783e:	9322      	str	r3, [sp, #136]	; 0x88
 8007840:	dc01      	bgt.n	8007846 <_vfprintf_r+0xbbe>
 8007842:	3608      	adds	r6, #8
 8007844:	e008      	b.n	8007858 <_vfprintf_r+0xbd0>
 8007846:	4650      	mov	r0, sl
 8007848:	4649      	mov	r1, r9
 800784a:	aa21      	add	r2, sp, #132	; 0x84
 800784c:	f002 fc9b 	bl	800a186 <__sprint_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	f040 81e0 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007856:	ae2e      	add	r6, sp, #184	; 0xb8
 8007858:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800785a:	4264      	negs	r4, r4
 800785c:	2c00      	cmp	r4, #0
 800785e:	dd32      	ble.n	80078c6 <_vfprintf_r+0xc3e>
 8007860:	4b12      	ldr	r3, [pc, #72]	; (80078ac <_vfprintf_r+0xc24>)
 8007862:	6033      	str	r3, [r6, #0]
 8007864:	2c10      	cmp	r4, #16
 8007866:	dd16      	ble.n	8007896 <_vfprintf_r+0xc0e>
 8007868:	2310      	movs	r3, #16
 800786a:	6073      	str	r3, [r6, #4]
 800786c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800786e:	3310      	adds	r3, #16
 8007870:	9323      	str	r3, [sp, #140]	; 0x8c
 8007872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007874:	3301      	adds	r3, #1
 8007876:	2b07      	cmp	r3, #7
 8007878:	9322      	str	r3, [sp, #136]	; 0x88
 800787a:	dc01      	bgt.n	8007880 <_vfprintf_r+0xbf8>
 800787c:	3608      	adds	r6, #8
 800787e:	e008      	b.n	8007892 <_vfprintf_r+0xc0a>
 8007880:	4650      	mov	r0, sl
 8007882:	4649      	mov	r1, r9
 8007884:	aa21      	add	r2, sp, #132	; 0x84
 8007886:	f002 fc7e 	bl	800a186 <__sprint_r>
 800788a:	2800      	cmp	r0, #0
 800788c:	f040 81c3 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007890:	ae2e      	add	r6, sp, #184	; 0xb8
 8007892:	3c10      	subs	r4, #16
 8007894:	e7e4      	b.n	8007860 <_vfprintf_r+0xbd8>
 8007896:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007898:	6074      	str	r4, [r6, #4]
 800789a:	441c      	add	r4, r3
 800789c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800789e:	9423      	str	r4, [sp, #140]	; 0x8c
 80078a0:	3301      	adds	r3, #1
 80078a2:	2b07      	cmp	r3, #7
 80078a4:	9322      	str	r3, [sp, #136]	; 0x88
 80078a6:	dc05      	bgt.n	80078b4 <_vfprintf_r+0xc2c>
 80078a8:	3608      	adds	r6, #8
 80078aa:	e00c      	b.n	80078c6 <_vfprintf_r+0xc3e>
 80078ac:	0800a766 	.word	0x0800a766
 80078b0:	0800a764 	.word	0x0800a764
 80078b4:	4650      	mov	r0, sl
 80078b6:	4649      	mov	r1, r9
 80078b8:	aa21      	add	r2, sp, #132	; 0x84
 80078ba:	f002 fc64 	bl	800a186 <__sprint_r>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f040 81a9 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80078c4:	ae2e      	add	r6, sp, #184	; 0xb8
 80078c6:	9d03      	ldr	r5, [sp, #12]
 80078c8:	9c05      	ldr	r4, [sp, #20]
 80078ca:	6035      	str	r5, [r6, #0]
 80078cc:	6074      	str	r4, [r6, #4]
 80078ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078d0:	4423      	add	r3, r4
 80078d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80078d4:	e0bd      	b.n	8007a52 <_vfprintf_r+0xdca>
 80078d6:	9805      	ldr	r0, [sp, #20]
 80078d8:	9d03      	ldr	r5, [sp, #12]
 80078da:	4683      	mov	fp, r0
 80078dc:	45a3      	cmp	fp, r4
 80078de:	bfa8      	it	ge
 80078e0:	46a3      	movge	fp, r4
 80078e2:	f1bb 0f00 	cmp.w	fp, #0
 80078e6:	4405      	add	r5, r0
 80078e8:	dd15      	ble.n	8007916 <_vfprintf_r+0xc8e>
 80078ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078ec:	9903      	ldr	r1, [sp, #12]
 80078ee:	445b      	add	r3, fp
 80078f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80078f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078f4:	3301      	adds	r3, #1
 80078f6:	2b07      	cmp	r3, #7
 80078f8:	e886 0802 	stmia.w	r6, {r1, fp}
 80078fc:	9322      	str	r3, [sp, #136]	; 0x88
 80078fe:	dc01      	bgt.n	8007904 <_vfprintf_r+0xc7c>
 8007900:	3608      	adds	r6, #8
 8007902:	e008      	b.n	8007916 <_vfprintf_r+0xc8e>
 8007904:	4650      	mov	r0, sl
 8007906:	4649      	mov	r1, r9
 8007908:	aa21      	add	r2, sp, #132	; 0x84
 800790a:	f002 fc3c 	bl	800a186 <__sprint_r>
 800790e:	2800      	cmp	r0, #0
 8007910:	f040 8181 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007914:	ae2e      	add	r6, sp, #184	; 0xb8
 8007916:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 800791a:	ebcb 0b04 	rsb	fp, fp, r4
 800791e:	f1bb 0f00 	cmp.w	fp, #0
 8007922:	dd31      	ble.n	8007988 <_vfprintf_r+0xd00>
 8007924:	4b9a      	ldr	r3, [pc, #616]	; (8007b90 <_vfprintf_r+0xf08>)
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	f1bb 0f10 	cmp.w	fp, #16
 800792c:	dd17      	ble.n	800795e <_vfprintf_r+0xcd6>
 800792e:	2310      	movs	r3, #16
 8007930:	6073      	str	r3, [r6, #4]
 8007932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007934:	3310      	adds	r3, #16
 8007936:	9323      	str	r3, [sp, #140]	; 0x8c
 8007938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800793a:	3301      	adds	r3, #1
 800793c:	2b07      	cmp	r3, #7
 800793e:	9322      	str	r3, [sp, #136]	; 0x88
 8007940:	dc01      	bgt.n	8007946 <_vfprintf_r+0xcbe>
 8007942:	3608      	adds	r6, #8
 8007944:	e008      	b.n	8007958 <_vfprintf_r+0xcd0>
 8007946:	4650      	mov	r0, sl
 8007948:	4649      	mov	r1, r9
 800794a:	aa21      	add	r2, sp, #132	; 0x84
 800794c:	f002 fc1b 	bl	800a186 <__sprint_r>
 8007950:	2800      	cmp	r0, #0
 8007952:	f040 8160 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007956:	ae2e      	add	r6, sp, #184	; 0xb8
 8007958:	f1ab 0b10 	sub.w	fp, fp, #16
 800795c:	e7e2      	b.n	8007924 <_vfprintf_r+0xc9c>
 800795e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007960:	f8c6 b004 	str.w	fp, [r6, #4]
 8007964:	445b      	add	r3, fp
 8007966:	9323      	str	r3, [sp, #140]	; 0x8c
 8007968:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800796a:	3301      	adds	r3, #1
 800796c:	2b07      	cmp	r3, #7
 800796e:	9322      	str	r3, [sp, #136]	; 0x88
 8007970:	dc01      	bgt.n	8007976 <_vfprintf_r+0xcee>
 8007972:	3608      	adds	r6, #8
 8007974:	e008      	b.n	8007988 <_vfprintf_r+0xd00>
 8007976:	4650      	mov	r0, sl
 8007978:	4649      	mov	r1, r9
 800797a:	aa21      	add	r2, sp, #132	; 0x84
 800797c:	f002 fc03 	bl	800a186 <__sprint_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	f040 8148 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007986:	ae2e      	add	r6, sp, #184	; 0xb8
 8007988:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800798a:	9805      	ldr	r0, [sp, #20]
 800798c:	9a03      	ldr	r2, [sp, #12]
 800798e:	4283      	cmp	r3, r0
 8007990:	4414      	add	r4, r2
 8007992:	db01      	blt.n	8007998 <_vfprintf_r+0xd10>
 8007994:	07f8      	lsls	r0, r7, #31
 8007996:	d516      	bpl.n	80079c6 <_vfprintf_r+0xd3e>
 8007998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800799a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800799c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800799e:	6031      	str	r1, [r6, #0]
 80079a0:	4413      	add	r3, r2
 80079a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80079a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079a6:	6072      	str	r2, [r6, #4]
 80079a8:	3301      	adds	r3, #1
 80079aa:	2b07      	cmp	r3, #7
 80079ac:	9322      	str	r3, [sp, #136]	; 0x88
 80079ae:	dc01      	bgt.n	80079b4 <_vfprintf_r+0xd2c>
 80079b0:	3608      	adds	r6, #8
 80079b2:	e008      	b.n	80079c6 <_vfprintf_r+0xd3e>
 80079b4:	4650      	mov	r0, sl
 80079b6:	4649      	mov	r1, r9
 80079b8:	aa21      	add	r2, sp, #132	; 0x84
 80079ba:	f002 fbe4 	bl	800a186 <__sprint_r>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f040 8129 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 80079c4:	ae2e      	add	r6, sp, #184	; 0xb8
 80079c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079c8:	9805      	ldr	r0, [sp, #20]
 80079ca:	1b2d      	subs	r5, r5, r4
 80079cc:	1ac3      	subs	r3, r0, r3
 80079ce:	429d      	cmp	r5, r3
 80079d0:	bfa8      	it	ge
 80079d2:	461d      	movge	r5, r3
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	dd14      	ble.n	8007a02 <_vfprintf_r+0xd7a>
 80079d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079da:	442b      	add	r3, r5
 80079dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80079de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079e0:	3301      	adds	r3, #1
 80079e2:	2b07      	cmp	r3, #7
 80079e4:	e886 0030 	stmia.w	r6, {r4, r5}
 80079e8:	9322      	str	r3, [sp, #136]	; 0x88
 80079ea:	dc01      	bgt.n	80079f0 <_vfprintf_r+0xd68>
 80079ec:	3608      	adds	r6, #8
 80079ee:	e008      	b.n	8007a02 <_vfprintf_r+0xd7a>
 80079f0:	4650      	mov	r0, sl
 80079f2:	4649      	mov	r1, r9
 80079f4:	aa21      	add	r2, sp, #132	; 0x84
 80079f6:	f002 fbc6 	bl	800a186 <__sprint_r>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f040 810b 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007a00:	ae2e      	add	r6, sp, #184	; 0xb8
 8007a02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a04:	9c05      	ldr	r4, [sp, #20]
 8007a06:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8007a0a:	1ae3      	subs	r3, r4, r3
 8007a0c:	1b5d      	subs	r5, r3, r5
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	f340 80b0 	ble.w	8007b74 <_vfprintf_r+0xeec>
 8007a14:	4b5e      	ldr	r3, [pc, #376]	; (8007b90 <_vfprintf_r+0xf08>)
 8007a16:	6033      	str	r3, [r6, #0]
 8007a18:	2d10      	cmp	r5, #16
 8007a1a:	dd16      	ble.n	8007a4a <_vfprintf_r+0xdc2>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	6073      	str	r3, [r6, #4]
 8007a20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a22:	3310      	adds	r3, #16
 8007a24:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a28:	3301      	adds	r3, #1
 8007a2a:	2b07      	cmp	r3, #7
 8007a2c:	9322      	str	r3, [sp, #136]	; 0x88
 8007a2e:	dc01      	bgt.n	8007a34 <_vfprintf_r+0xdac>
 8007a30:	3608      	adds	r6, #8
 8007a32:	e008      	b.n	8007a46 <_vfprintf_r+0xdbe>
 8007a34:	4650      	mov	r0, sl
 8007a36:	4649      	mov	r1, r9
 8007a38:	aa21      	add	r2, sp, #132	; 0x84
 8007a3a:	f002 fba4 	bl	800a186 <__sprint_r>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f040 80e9 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007a44:	ae2e      	add	r6, sp, #184	; 0xb8
 8007a46:	3d10      	subs	r5, #16
 8007a48:	e7e4      	b.n	8007a14 <_vfprintf_r+0xd8c>
 8007a4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a4c:	6075      	str	r5, [r6, #4]
 8007a4e:	441d      	add	r5, r3
 8007a50:	9523      	str	r5, [sp, #140]	; 0x8c
 8007a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a54:	3301      	adds	r3, #1
 8007a56:	2b07      	cmp	r3, #7
 8007a58:	9322      	str	r3, [sp, #136]	; 0x88
 8007a5a:	f340 808a 	ble.w	8007b72 <_vfprintf_r+0xeea>
 8007a5e:	4650      	mov	r0, sl
 8007a60:	4649      	mov	r1, r9
 8007a62:	aa21      	add	r2, sp, #132	; 0x84
 8007a64:	f002 fb8f 	bl	800a186 <__sprint_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	f040 80d4 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007a6e:	ae2e      	add	r6, sp, #184	; 0xb8
 8007a70:	e080      	b.n	8007b74 <_vfprintf_r+0xeec>
 8007a72:	9d05      	ldr	r5, [sp, #20]
 8007a74:	2d01      	cmp	r5, #1
 8007a76:	dc01      	bgt.n	8007a7c <_vfprintf_r+0xdf4>
 8007a78:	07f9      	lsls	r1, r7, #31
 8007a7a:	d56d      	bpl.n	8007b58 <_vfprintf_r+0xed0>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	6073      	str	r3, [r6, #4]
 8007a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a82:	9c03      	ldr	r4, [sp, #12]
 8007a84:	6034      	str	r4, [r6, #0]
 8007a86:	3301      	adds	r3, #1
 8007a88:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	2b07      	cmp	r3, #7
 8007a90:	9322      	str	r3, [sp, #136]	; 0x88
 8007a92:	dc01      	bgt.n	8007a98 <_vfprintf_r+0xe10>
 8007a94:	3608      	adds	r6, #8
 8007a96:	e008      	b.n	8007aaa <_vfprintf_r+0xe22>
 8007a98:	4650      	mov	r0, sl
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	aa21      	add	r2, sp, #132	; 0x84
 8007a9e:	f002 fb72 	bl	800a186 <__sprint_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f040 80b7 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007aa8:	ae2e      	add	r6, sp, #184	; 0xb8
 8007aaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007aac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007ab0:	6035      	str	r5, [r6, #0]
 8007ab2:	4423      	add	r3, r4
 8007ab4:	9323      	str	r3, [sp, #140]	; 0x8c
 8007ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ab8:	6074      	str	r4, [r6, #4]
 8007aba:	3301      	adds	r3, #1
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	9322      	str	r3, [sp, #136]	; 0x88
 8007ac0:	dc01      	bgt.n	8007ac6 <_vfprintf_r+0xe3e>
 8007ac2:	3608      	adds	r6, #8
 8007ac4:	e008      	b.n	8007ad8 <_vfprintf_r+0xe50>
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	4649      	mov	r1, r9
 8007aca:	aa21      	add	r2, sp, #132	; 0x84
 8007acc:	f002 fb5b 	bl	800a186 <__sprint_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f040 80a0 	bne.w	8007c16 <_vfprintf_r+0xf8e>
 8007ad6:	ae2e      	add	r6, sp, #184	; 0xb8
 8007ad8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f7f8 ffb2 	bl	8000a48 <__aeabi_dcmpeq>
 8007ae4:	9d05      	ldr	r5, [sp, #20]
 8007ae6:	1e6c      	subs	r4, r5, #1
 8007ae8:	b940      	cbnz	r0, 8007afc <_vfprintf_r+0xe74>
 8007aea:	9d03      	ldr	r5, [sp, #12]
 8007aec:	1c6b      	adds	r3, r5, #1
 8007aee:	e886 0018 	stmia.w	r6, {r3, r4}
 8007af2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007af4:	9c05      	ldr	r4, [sp, #20]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4423      	add	r3, r4
 8007afa:	e033      	b.n	8007b64 <_vfprintf_r+0xedc>
 8007afc:	2c00      	cmp	r4, #0
 8007afe:	dd34      	ble.n	8007b6a <_vfprintf_r+0xee2>
 8007b00:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <_vfprintf_r+0xf08>)
 8007b02:	6033      	str	r3, [r6, #0]
 8007b04:	2c10      	cmp	r4, #16
 8007b06:	dd15      	ble.n	8007b34 <_vfprintf_r+0xeac>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	6073      	str	r3, [r6, #4]
 8007b0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0e:	3310      	adds	r3, #16
 8007b10:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b14:	3301      	adds	r3, #1
 8007b16:	2b07      	cmp	r3, #7
 8007b18:	9322      	str	r3, [sp, #136]	; 0x88
 8007b1a:	dc01      	bgt.n	8007b20 <_vfprintf_r+0xe98>
 8007b1c:	3608      	adds	r6, #8
 8007b1e:	e007      	b.n	8007b30 <_vfprintf_r+0xea8>
 8007b20:	4650      	mov	r0, sl
 8007b22:	4649      	mov	r1, r9
 8007b24:	aa21      	add	r2, sp, #132	; 0x84
 8007b26:	f002 fb2e 	bl	800a186 <__sprint_r>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d173      	bne.n	8007c16 <_vfprintf_r+0xf8e>
 8007b2e:	ae2e      	add	r6, sp, #184	; 0xb8
 8007b30:	3c10      	subs	r4, #16
 8007b32:	e7e5      	b.n	8007b00 <_vfprintf_r+0xe78>
 8007b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b36:	6074      	str	r4, [r6, #4]
 8007b38:	441c      	add	r4, r3
 8007b3a:	9423      	str	r4, [sp, #140]	; 0x8c
 8007b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b3e:	3301      	adds	r3, #1
 8007b40:	2b07      	cmp	r3, #7
 8007b42:	9322      	str	r3, [sp, #136]	; 0x88
 8007b44:	dd10      	ble.n	8007b68 <_vfprintf_r+0xee0>
 8007b46:	4650      	mov	r0, sl
 8007b48:	4649      	mov	r1, r9
 8007b4a:	aa21      	add	r2, sp, #132	; 0x84
 8007b4c:	f002 fb1b 	bl	800a186 <__sprint_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d160      	bne.n	8007c16 <_vfprintf_r+0xf8e>
 8007b54:	ae2e      	add	r6, sp, #184	; 0xb8
 8007b56:	e008      	b.n	8007b6a <_vfprintf_r+0xee2>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	6073      	str	r3, [r6, #4]
 8007b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b5e:	9d03      	ldr	r5, [sp, #12]
 8007b60:	6035      	str	r5, [r6, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b66:	e7e9      	b.n	8007b3c <_vfprintf_r+0xeb4>
 8007b68:	3608      	adds	r6, #8
 8007b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b6c:	6033      	str	r3, [r6, #0]
 8007b6e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8007b70:	e6ac      	b.n	80078cc <_vfprintf_r+0xc44>
 8007b72:	3608      	adds	r6, #8
 8007b74:	077a      	lsls	r2, r7, #29
 8007b76:	d40d      	bmi.n	8007b94 <_vfprintf_r+0xf0c>
 8007b78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007b7a:	9806      	ldr	r0, [sp, #24]
 8007b7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b80:	42a0      	cmp	r0, r4
 8007b82:	bfac      	ite	ge
 8007b84:	182d      	addge	r5, r5, r0
 8007b86:	192d      	addlt	r5, r5, r4
 8007b88:	950b      	str	r5, [sp, #44]	; 0x2c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d037      	beq.n	8007bfe <_vfprintf_r+0xf76>
 8007b8e:	e030      	b.n	8007bf2 <_vfprintf_r+0xf6a>
 8007b90:	0800a766 	.word	0x0800a766
 8007b94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b96:	9806      	ldr	r0, [sp, #24]
 8007b98:	1a2c      	subs	r4, r5, r0
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	ddec      	ble.n	8007b78 <_vfprintf_r+0xef0>
 8007b9e:	4b22      	ldr	r3, [pc, #136]	; (8007c28 <_vfprintf_r+0xfa0>)
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	2c10      	cmp	r4, #16
 8007ba4:	dd14      	ble.n	8007bd0 <_vfprintf_r+0xf48>
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	6073      	str	r3, [r6, #4]
 8007baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bac:	3310      	adds	r3, #16
 8007bae:	9323      	str	r3, [sp, #140]	; 0x8c
 8007bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	2b07      	cmp	r3, #7
 8007bb6:	9322      	str	r3, [sp, #136]	; 0x88
 8007bb8:	dc01      	bgt.n	8007bbe <_vfprintf_r+0xf36>
 8007bba:	3608      	adds	r6, #8
 8007bbc:	e006      	b.n	8007bcc <_vfprintf_r+0xf44>
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	aa21      	add	r2, sp, #132	; 0x84
 8007bc4:	f002 fadf 	bl	800a186 <__sprint_r>
 8007bc8:	bb28      	cbnz	r0, 8007c16 <_vfprintf_r+0xf8e>
 8007bca:	ae2e      	add	r6, sp, #184	; 0xb8
 8007bcc:	3c10      	subs	r4, #16
 8007bce:	e7e6      	b.n	8007b9e <_vfprintf_r+0xf16>
 8007bd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bd2:	6074      	str	r4, [r6, #4]
 8007bd4:	441c      	add	r4, r3
 8007bd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bd8:	9423      	str	r4, [sp, #140]	; 0x8c
 8007bda:	3301      	adds	r3, #1
 8007bdc:	2b07      	cmp	r3, #7
 8007bde:	9322      	str	r3, [sp, #136]	; 0x88
 8007be0:	ddca      	ble.n	8007b78 <_vfprintf_r+0xef0>
 8007be2:	4650      	mov	r0, sl
 8007be4:	4649      	mov	r1, r9
 8007be6:	aa21      	add	r2, sp, #132	; 0x84
 8007be8:	f002 facd 	bl	800a186 <__sprint_r>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d0c3      	beq.n	8007b78 <_vfprintf_r+0xef0>
 8007bf0:	e011      	b.n	8007c16 <_vfprintf_r+0xf8e>
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	aa21      	add	r2, sp, #132	; 0x84
 8007bf8:	f002 fac5 	bl	800a186 <__sprint_r>
 8007bfc:	b958      	cbnz	r0, 8007c16 <_vfprintf_r+0xf8e>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9322      	str	r3, [sp, #136]	; 0x88
 8007c02:	ae2e      	add	r6, sp, #184	; 0xb8
 8007c04:	f7ff b8a8 	b.w	8006d58 <_vfprintf_r+0xd0>
 8007c08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c0a:	b123      	cbz	r3, 8007c16 <_vfprintf_r+0xf8e>
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	4649      	mov	r1, r9
 8007c10:	aa21      	add	r2, sp, #132	; 0x84
 8007c12:	f002 fab8 	bl	800a186 <__sprint_r>
 8007c16:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007c1a:	065b      	lsls	r3, r3, #25
 8007c1c:	f53f a87f 	bmi.w	8006d1e <_vfprintf_r+0x96>
 8007c20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007c22:	b03f      	add	sp, #252	; 0xfc
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	0800a722 	.word	0x0800a722
 8007c2c:	f3af 8000 	nop.w

08007c30 <__sbprintf>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	460c      	mov	r4, r1
 8007c34:	8989      	ldrh	r1, [r1, #12]
 8007c36:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8007c3a:	f021 0102 	bic.w	r1, r1, #2
 8007c3e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007c42:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007c44:	9119      	str	r1, [sp, #100]	; 0x64
 8007c46:	89e1      	ldrh	r1, [r4, #14]
 8007c48:	f8ad 100e 	strh.w	r1, [sp, #14]
 8007c4c:	6a21      	ldr	r1, [r4, #32]
 8007c4e:	9108      	str	r1, [sp, #32]
 8007c50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c52:	910a      	str	r1, [sp, #40]	; 0x28
 8007c54:	a91a      	add	r1, sp, #104	; 0x68
 8007c56:	9100      	str	r1, [sp, #0]
 8007c58:	9104      	str	r1, [sp, #16]
 8007c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c5e:	9102      	str	r1, [sp, #8]
 8007c60:	9105      	str	r1, [sp, #20]
 8007c62:	2100      	movs	r1, #0
 8007c64:	9106      	str	r1, [sp, #24]
 8007c66:	4669      	mov	r1, sp
 8007c68:	4606      	mov	r6, r0
 8007c6a:	f7ff f80d 	bl	8006c88 <_vfprintf_r>
 8007c6e:	1e05      	subs	r5, r0, #0
 8007c70:	db07      	blt.n	8007c82 <__sbprintf+0x52>
 8007c72:	4630      	mov	r0, r6
 8007c74:	4669      	mov	r1, sp
 8007c76:	f000 ff53 	bl	8008b20 <_fflush_r>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	bf18      	it	ne
 8007c7e:	f04f 35ff 	movne.w	r5, #4294967295
 8007c82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007c86:	065b      	lsls	r3, r3, #25
 8007c88:	d503      	bpl.n	8007c92 <__sbprintf+0x62>
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	4628      	mov	r0, r5
 8007c94:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8007c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c9c <__swsetup_r>:
 8007c9c:	4b32      	ldr	r3, [pc, #200]	; (8007d68 <__swsetup_r+0xcc>)
 8007c9e:	b570      	push	{r4, r5, r6, lr}
 8007ca0:	681d      	ldr	r5, [r3, #0]
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	b125      	cbz	r5, 8007cb2 <__swsetup_r+0x16>
 8007ca8:	69ab      	ldr	r3, [r5, #24]
 8007caa:	b913      	cbnz	r3, 8007cb2 <__swsetup_r+0x16>
 8007cac:	4628      	mov	r0, r5
 8007cae:	f000 ff7d 	bl	8008bac <__sinit>
 8007cb2:	4b2e      	ldr	r3, [pc, #184]	; (8007d6c <__swsetup_r+0xd0>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d101      	bne.n	8007cbc <__swsetup_r+0x20>
 8007cb8:	686c      	ldr	r4, [r5, #4]
 8007cba:	e008      	b.n	8007cce <__swsetup_r+0x32>
 8007cbc:	4b2c      	ldr	r3, [pc, #176]	; (8007d70 <__swsetup_r+0xd4>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d101      	bne.n	8007cc6 <__swsetup_r+0x2a>
 8007cc2:	68ac      	ldr	r4, [r5, #8]
 8007cc4:	e003      	b.n	8007cce <__swsetup_r+0x32>
 8007cc6:	4b2b      	ldr	r3, [pc, #172]	; (8007d74 <__swsetup_r+0xd8>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	bf08      	it	eq
 8007ccc:	68ec      	ldreq	r4, [r5, #12]
 8007cce:	89a2      	ldrh	r2, [r4, #12]
 8007cd0:	b293      	uxth	r3, r2
 8007cd2:	0719      	lsls	r1, r3, #28
 8007cd4:	d420      	bmi.n	8007d18 <__swsetup_r+0x7c>
 8007cd6:	06dd      	lsls	r5, r3, #27
 8007cd8:	d405      	bmi.n	8007ce6 <__swsetup_r+0x4a>
 8007cda:	2309      	movs	r3, #9
 8007cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce0:	6033      	str	r3, [r6, #0]
 8007ce2:	81a2      	strh	r2, [r4, #12]
 8007ce4:	e03b      	b.n	8007d5e <__swsetup_r+0xc2>
 8007ce6:	0758      	lsls	r0, r3, #29
 8007ce8:	d512      	bpl.n	8007d10 <__swsetup_r+0x74>
 8007cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cec:	b141      	cbz	r1, 8007d00 <__swsetup_r+0x64>
 8007cee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cf2:	4299      	cmp	r1, r3
 8007cf4:	d002      	beq.n	8007cfc <__swsetup_r+0x60>
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f001 f86e 	bl	8008dd8 <_free_r>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6363      	str	r3, [r4, #52]	; 0x34
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f043 0308 	orr.w	r3, r3, #8
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	b94b      	cbnz	r3, 8007d30 <__swsetup_r+0x94>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d26:	d003      	beq.n	8007d30 <__swsetup_r+0x94>
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	f001 fa82 	bl	8009234 <__smakebuf_r>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f013 0201 	ands.w	r2, r3, #1
 8007d36:	d005      	beq.n	8007d44 <__swsetup_r+0xa8>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	60a2      	str	r2, [r4, #8]
 8007d3c:	6962      	ldr	r2, [r4, #20]
 8007d3e:	4252      	negs	r2, r2
 8007d40:	61a2      	str	r2, [r4, #24]
 8007d42:	e003      	b.n	8007d4c <__swsetup_r+0xb0>
 8007d44:	0799      	lsls	r1, r3, #30
 8007d46:	bf58      	it	pl
 8007d48:	6962      	ldrpl	r2, [r4, #20]
 8007d4a:	60a2      	str	r2, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	b94a      	cbnz	r2, 8007d64 <__swsetup_r+0xc8>
 8007d50:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8007d54:	b280      	uxth	r0, r0
 8007d56:	b130      	cbz	r0, 8007d66 <__swsetup_r+0xca>
 8007d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	2000      	movs	r0, #0
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	20010104 	.word	0x20010104
 8007d6c:	0800a784 	.word	0x0800a784
 8007d70:	0800a7a4 	.word	0x0800a7a4
 8007d74:	0800a7c4 	.word	0x0800a7c4

08007d78 <quorem>:
 8007d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	6903      	ldr	r3, [r0, #16]
 8007d7e:	690c      	ldr	r4, [r1, #16]
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	4680      	mov	r8, r0
 8007d84:	f2c0 8081 	blt.w	8007e8a <quorem+0x112>
 8007d88:	3c01      	subs	r4, #1
 8007d8a:	f101 0714 	add.w	r7, r1, #20
 8007d8e:	00a2      	lsls	r2, r4, #2
 8007d90:	f100 0514 	add.w	r5, r0, #20
 8007d94:	4691      	mov	r9, r2
 8007d96:	9200      	str	r2, [sp, #0]
 8007d98:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8007d9c:	442a      	add	r2, r5
 8007d9e:	9201      	str	r2, [sp, #4]
 8007da0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da4:	3601      	adds	r6, #1
 8007da6:	fbb2 f6f6 	udiv	r6, r2, r6
 8007daa:	44b9      	add	r9, r7
 8007dac:	2e00      	cmp	r6, #0
 8007dae:	d03a      	beq.n	8007e26 <quorem+0xae>
 8007db0:	f04f 0e00 	mov.w	lr, #0
 8007db4:	463a      	mov	r2, r7
 8007db6:	4628      	mov	r0, r5
 8007db8:	46f3      	mov	fp, lr
 8007dba:	f852 cb04 	ldr.w	ip, [r2], #4
 8007dbe:	6803      	ldr	r3, [r0, #0]
 8007dc0:	fa1f fa8c 	uxth.w	sl, ip
 8007dc4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007dc8:	fb0a ea06 	mla	sl, sl, r6, lr
 8007dcc:	fb0c fc06 	mul.w	ip, ip, r6
 8007dd0:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
 8007dd4:	fa1f fa8a 	uxth.w	sl, sl
 8007dd8:	ebca 0a0b 	rsb	sl, sl, fp
 8007ddc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8007de0:	fa1f fc8c 	uxth.w	ip, ip
 8007de4:	fa1a fa83 	uxtah	sl, sl, r3
 8007de8:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
 8007dec:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
 8007df0:	fa1f fa8a 	uxth.w	sl, sl
 8007df4:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
 8007df8:	454a      	cmp	r2, r9
 8007dfa:	ea4f 4b2c 	mov.w	fp, ip, asr #16
 8007dfe:	f840 ab04 	str.w	sl, [r0], #4
 8007e02:	d9da      	bls.n	8007dba <quorem+0x42>
 8007e04:	9a00      	ldr	r2, [sp, #0]
 8007e06:	58ab      	ldr	r3, [r5, r2]
 8007e08:	b96b      	cbnz	r3, 8007e26 <quorem+0xae>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	1f13      	subs	r3, r2, #4
 8007e0e:	42ab      	cmp	r3, r5
 8007e10:	461a      	mov	r2, r3
 8007e12:	d802      	bhi.n	8007e1a <quorem+0xa2>
 8007e14:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e18:	e005      	b.n	8007e26 <quorem+0xae>
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d1f8      	bne.n	8007e14 <quorem+0x9c>
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7f3      	b.n	8007e0e <quorem+0x96>
 8007e26:	4640      	mov	r0, r8
 8007e28:	f001 fec3 	bl	8009bb2 <__mcmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	db2a      	blt.n	8007e86 <quorem+0x10e>
 8007e30:	3601      	adds	r6, #1
 8007e32:	462b      	mov	r3, r5
 8007e34:	2000      	movs	r0, #0
 8007e36:	f857 cb04 	ldr.w	ip, [r7], #4
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	fa1f f18c 	uxth.w	r1, ip
 8007e40:	1a41      	subs	r1, r0, r1
 8007e42:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007e46:	fa11 f182 	uxtah	r1, r1, r2
 8007e4a:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
 8007e4e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8007e52:	b289      	uxth	r1, r1
 8007e54:	1410      	asrs	r0, r2, #16
 8007e56:	454f      	cmp	r7, r9
 8007e58:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8007e5c:	f843 2b04 	str.w	r2, [r3], #4
 8007e60:	d9e9      	bls.n	8007e36 <quorem+0xbe>
 8007e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e6a:	b962      	cbnz	r2, 8007e86 <quorem+0x10e>
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	461a      	mov	r2, r3
 8007e72:	d802      	bhi.n	8007e7a <quorem+0x102>
 8007e74:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e78:	e005      	b.n	8007e86 <quorem+0x10e>
 8007e7a:	6812      	ldr	r2, [r2, #0]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d1f8      	bne.n	8007e74 <quorem+0xfc>
 8007e82:	3c01      	subs	r4, #1
 8007e84:	e7f3      	b.n	8007e6e <quorem+0xf6>
 8007e86:	4630      	mov	r0, r6
 8007e88:	e000      	b.n	8007e8c <quorem+0x114>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	b003      	add	sp, #12
 8007e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e92:	0000      	movs	r0, r0
 8007e94:	0000      	movs	r0, r0
	...

08007e98 <_dtoa_r>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e9e:	b09b      	sub	sp, #108	; 0x6c
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	910d      	str	r1, [sp, #52]	; 0x34
 8007ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8007ea6:	9314      	str	r3, [sp, #80]	; 0x50
 8007ea8:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007eaa:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007eae:	b945      	cbnz	r5, 8007ec2 <_dtoa_r+0x2a>
 8007eb0:	2010      	movs	r0, #16
 8007eb2:	f001 fa23 	bl	80092fc <malloc>
 8007eb6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8007eba:	6045      	str	r5, [r0, #4]
 8007ebc:	6085      	str	r5, [r0, #8]
 8007ebe:	6005      	str	r5, [r0, #0]
 8007ec0:	60c5      	str	r5, [r0, #12]
 8007ec2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	b161      	cbz	r1, 8007ee4 <_dtoa_r+0x4c>
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	604b      	str	r3, [r1, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	608b      	str	r3, [r1, #8]
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	f001 fc8b 	bl	80097f2 <_Bfree>
 8007edc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	9903      	ldr	r1, [sp, #12]
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	da05      	bge.n	8007ef6 <_dtoa_r+0x5e>
 8007eea:	2301      	movs	r3, #1
 8007eec:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	9203      	str	r2, [sp, #12]
 8007ef4:	e001      	b.n	8007efa <_dtoa_r+0x62>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	9c03      	ldr	r4, [sp, #12]
 8007efc:	4a9a      	ldr	r2, [pc, #616]	; (8008168 <_dtoa_r+0x2d0>)
 8007efe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f02:	0d1b      	lsrs	r3, r3, #20
 8007f04:	051b      	lsls	r3, r3, #20
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d11d      	bne.n	8007f46 <_dtoa_r+0xae>
 8007f0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f0c:	9902      	ldr	r1, [sp, #8]
 8007f0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	b941      	cbnz	r1, 8007f28 <_dtoa_r+0x90>
 8007f16:	4b95      	ldr	r3, [pc, #596]	; (800816c <_dtoa_r+0x2d4>)
 8007f18:	4a95      	ldr	r2, [pc, #596]	; (8008170 <_dtoa_r+0x2d8>)
 8007f1a:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	bf0c      	ite	eq
 8007f22:	4610      	moveq	r0, r2
 8007f24:	4618      	movne	r0, r3
 8007f26:	e000      	b.n	8007f2a <_dtoa_r+0x92>
 8007f28:	4890      	ldr	r0, [pc, #576]	; (800816c <_dtoa_r+0x2d4>)
 8007f2a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007f2c:	2f00      	cmp	r7, #0
 8007f2e:	f000 8565 	beq.w	80089fc <_dtoa_r+0xb64>
 8007f32:	78c3      	ldrb	r3, [r0, #3]
 8007f34:	b113      	cbz	r3, 8007f3c <_dtoa_r+0xa4>
 8007f36:	f100 0308 	add.w	r3, r0, #8
 8007f3a:	e000      	b.n	8007f3e <_dtoa_r+0xa6>
 8007f3c:	1cc3      	adds	r3, r0, #3
 8007f3e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007f40:	603b      	str	r3, [r7, #0]
 8007f42:	f000 bd5b 	b.w	80089fc <_dtoa_r+0xb64>
 8007f46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4649      	mov	r1, r9
 8007f50:	2300      	movs	r3, #0
 8007f52:	f7f8 fd79 	bl	8000a48 <__aeabi_dcmpeq>
 8007f56:	4605      	mov	r5, r0
 8007f58:	b158      	cbz	r0, 8007f72 <_dtoa_r+0xda>
 8007f5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	f000 8547 	beq.w	80089f6 <_dtoa_r+0xb5e>
 8007f68:	4882      	ldr	r0, [pc, #520]	; (8008174 <_dtoa_r+0x2dc>)
 8007f6a:	6038      	str	r0, [r7, #0]
 8007f6c:	3801      	subs	r0, #1
 8007f6e:	f000 bd45 	b.w	80089fc <_dtoa_r+0xb64>
 8007f72:	4650      	mov	r0, sl
 8007f74:	ec49 8b10 	vmov	d0, r8, r9
 8007f78:	a919      	add	r1, sp, #100	; 0x64
 8007f7a:	aa18      	add	r2, sp, #96	; 0x60
 8007f7c:	f001 fe94 	bl	8009ca8 <__d2b>
 8007f80:	f3c4 560a 	ubfx	r6, r4, #20, #11
 8007f84:	4683      	mov	fp, r0
 8007f86:	b156      	cbz	r6, 8007f9e <_dtoa_r+0x106>
 8007f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f8c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007f90:	4640      	mov	r0, r8
 8007f92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007f96:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8007f9a:	9515      	str	r5, [sp, #84]	; 0x54
 8007f9c:	e01c      	b.n	8007fd8 <_dtoa_r+0x140>
 8007f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fa0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007fa2:	441e      	add	r6, r3
 8007fa4:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8007fa8:	429e      	cmp	r6, r3
 8007faa:	db09      	blt.n	8007fc0 <_dtoa_r+0x128>
 8007fac:	9902      	ldr	r1, [sp, #8]
 8007fae:	331f      	adds	r3, #31
 8007fb0:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	fa21 f000 	lsr.w	r0, r1, r0
 8007fba:	409c      	lsls	r4, r3
 8007fbc:	4320      	orrs	r0, r4
 8007fbe:	e004      	b.n	8007fca <_dtoa_r+0x132>
 8007fc0:	486d      	ldr	r0, [pc, #436]	; (8008178 <_dtoa_r+0x2e0>)
 8007fc2:	9a02      	ldr	r2, [sp, #8]
 8007fc4:	1b80      	subs	r0, r0, r6
 8007fc6:	fa02 f000 	lsl.w	r0, r2, r0
 8007fca:	f7f8 fa5f 	bl	800048c <__aeabi_ui2d>
 8007fce:	2701      	movs	r7, #1
 8007fd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007fd4:	3e01      	subs	r6, #1
 8007fd6:	9715      	str	r7, [sp, #84]	; 0x54
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4b68      	ldr	r3, [pc, #416]	; (800817c <_dtoa_r+0x2e4>)
 8007fdc:	f7f8 f918 	bl	8000210 <__aeabi_dsub>
 8007fe0:	a35b      	add	r3, pc, #364	; (adr r3, 8008150 <_dtoa_r+0x2b8>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 fac7 	bl	8000578 <__aeabi_dmul>
 8007fea:	a35b      	add	r3, pc, #364	; (adr r3, 8008158 <_dtoa_r+0x2c0>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 f910 	bl	8000214 <__adddf3>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	460d      	mov	r5, r1
 8007ffa:	f7f8 fa57 	bl	80004ac <__aeabi_i2d>
 8007ffe:	a358      	add	r3, pc, #352	; (adr r3, 8008160 <_dtoa_r+0x2c8>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 fab8 	bl	8000578 <__aeabi_dmul>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4620      	mov	r0, r4
 800800e:	4629      	mov	r1, r5
 8008010:	f7f8 f900 	bl	8000214 <__adddf3>
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	f7f8 fd48 	bl	8000aac <__aeabi_d2iz>
 800801c:	4629      	mov	r1, r5
 800801e:	4681      	mov	r9, r0
 8008020:	2200      	movs	r2, #0
 8008022:	4620      	mov	r0, r4
 8008024:	2300      	movs	r3, #0
 8008026:	f7f8 fd19 	bl	8000a5c <__aeabi_dcmplt>
 800802a:	b158      	cbz	r0, 8008044 <_dtoa_r+0x1ac>
 800802c:	4648      	mov	r0, r9
 800802e:	f7f8 fa3d 	bl	80004ac <__aeabi_i2d>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4620      	mov	r0, r4
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 fd05 	bl	8000a48 <__aeabi_dcmpeq>
 800803e:	b908      	cbnz	r0, 8008044 <_dtoa_r+0x1ac>
 8008040:	f109 39ff 	add.w	r9, r9, #4294967295
 8008044:	f1b9 0f16 	cmp.w	r9, #22
 8008048:	d80d      	bhi.n	8008066 <_dtoa_r+0x1ce>
 800804a:	4b4d      	ldr	r3, [pc, #308]	; (8008180 <_dtoa_r+0x2e8>)
 800804c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008058:	f7f8 fd1e 	bl	8000a98 <__aeabi_dcmpgt>
 800805c:	b130      	cbz	r0, 800806c <_dtoa_r+0x1d4>
 800805e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008062:	2700      	movs	r7, #0
 8008064:	e000      	b.n	8008068 <_dtoa_r+0x1d0>
 8008066:	2701      	movs	r7, #1
 8008068:	9711      	str	r7, [sp, #68]	; 0x44
 800806a:	e000      	b.n	800806e <_dtoa_r+0x1d6>
 800806c:	9011      	str	r0, [sp, #68]	; 0x44
 800806e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008070:	1b9e      	subs	r6, r3, r6
 8008072:	3e01      	subs	r6, #1
 8008074:	9606      	str	r6, [sp, #24]
 8008076:	d504      	bpl.n	8008082 <_dtoa_r+0x1ea>
 8008078:	4277      	negs	r7, r6
 800807a:	9705      	str	r7, [sp, #20]
 800807c:	2700      	movs	r7, #0
 800807e:	9706      	str	r7, [sp, #24]
 8008080:	e001      	b.n	8008086 <_dtoa_r+0x1ee>
 8008082:	2700      	movs	r7, #0
 8008084:	9705      	str	r7, [sp, #20]
 8008086:	f1b9 0f00 	cmp.w	r9, #0
 800808a:	db07      	blt.n	800809c <_dtoa_r+0x204>
 800808c:	9f06      	ldr	r7, [sp, #24]
 800808e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8008092:	444f      	add	r7, r9
 8008094:	9706      	str	r7, [sp, #24]
 8008096:	2700      	movs	r7, #0
 8008098:	970b      	str	r7, [sp, #44]	; 0x2c
 800809a:	e008      	b.n	80080ae <_dtoa_r+0x216>
 800809c:	9f05      	ldr	r7, [sp, #20]
 800809e:	ebc9 0707 	rsb	r7, r9, r7
 80080a2:	9705      	str	r7, [sp, #20]
 80080a4:	f1c9 0700 	rsb	r7, r9, #0
 80080a8:	970b      	str	r7, [sp, #44]	; 0x2c
 80080aa:	2700      	movs	r7, #0
 80080ac:	9710      	str	r7, [sp, #64]	; 0x40
 80080ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80080b0:	2f09      	cmp	r7, #9
 80080b2:	d828      	bhi.n	8008106 <_dtoa_r+0x26e>
 80080b4:	2f05      	cmp	r7, #5
 80080b6:	bfc4      	itt	gt
 80080b8:	3f04      	subgt	r7, #4
 80080ba:	970d      	strgt	r7, [sp, #52]	; 0x34
 80080bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80080be:	f1a7 0302 	sub.w	r3, r7, #2
 80080c2:	bfcc      	ite	gt
 80080c4:	2500      	movgt	r5, #0
 80080c6:	2501      	movle	r5, #1
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d821      	bhi.n	8008110 <_dtoa_r+0x278>
 80080cc:	e8df f003 	tbb	[pc, r3]
 80080d0:	04020f06 	.word	0x04020f06
 80080d4:	2701      	movs	r7, #1
 80080d6:	e002      	b.n	80080de <_dtoa_r+0x246>
 80080d8:	2701      	movs	r7, #1
 80080da:	e009      	b.n	80080f0 <_dtoa_r+0x258>
 80080dc:	2700      	movs	r7, #0
 80080de:	970c      	str	r7, [sp, #48]	; 0x30
 80080e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80080e2:	2f00      	cmp	r7, #0
 80080e4:	dd1e      	ble.n	8008124 <_dtoa_r+0x28c>
 80080e6:	970a      	str	r7, [sp, #40]	; 0x28
 80080e8:	9704      	str	r7, [sp, #16]
 80080ea:	463b      	mov	r3, r7
 80080ec:	e01f      	b.n	800812e <_dtoa_r+0x296>
 80080ee:	2700      	movs	r7, #0
 80080f0:	970c      	str	r7, [sp, #48]	; 0x30
 80080f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80080f4:	444f      	add	r7, r9
 80080f6:	970a      	str	r7, [sp, #40]	; 0x28
 80080f8:	3701      	adds	r7, #1
 80080fa:	463b      	mov	r3, r7
 80080fc:	9704      	str	r7, [sp, #16]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	bfb8      	it	lt
 8008102:	2301      	movlt	r3, #1
 8008104:	e013      	b.n	800812e <_dtoa_r+0x296>
 8008106:	2501      	movs	r5, #1
 8008108:	2700      	movs	r7, #0
 800810a:	970d      	str	r7, [sp, #52]	; 0x34
 800810c:	950c      	str	r5, [sp, #48]	; 0x30
 800810e:	e001      	b.n	8008114 <_dtoa_r+0x27c>
 8008110:	2701      	movs	r7, #1
 8008112:	970c      	str	r7, [sp, #48]	; 0x30
 8008114:	f04f 37ff 	mov.w	r7, #4294967295
 8008118:	970a      	str	r7, [sp, #40]	; 0x28
 800811a:	9704      	str	r7, [sp, #16]
 800811c:	2700      	movs	r7, #0
 800811e:	2312      	movs	r3, #18
 8008120:	970e      	str	r7, [sp, #56]	; 0x38
 8008122:	e004      	b.n	800812e <_dtoa_r+0x296>
 8008124:	2701      	movs	r7, #1
 8008126:	970a      	str	r7, [sp, #40]	; 0x28
 8008128:	9704      	str	r7, [sp, #16]
 800812a:	463b      	mov	r3, r7
 800812c:	970e      	str	r7, [sp, #56]	; 0x38
 800812e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8008132:	2200      	movs	r2, #0
 8008134:	6062      	str	r2, [r4, #4]
 8008136:	2104      	movs	r1, #4
 8008138:	f101 0214 	add.w	r2, r1, #20
 800813c:	429a      	cmp	r2, r3
 800813e:	d821      	bhi.n	8008184 <_dtoa_r+0x2ec>
 8008140:	6862      	ldr	r2, [r4, #4]
 8008142:	3201      	adds	r2, #1
 8008144:	6062      	str	r2, [r4, #4]
 8008146:	0049      	lsls	r1, r1, #1
 8008148:	e7f6      	b.n	8008138 <_dtoa_r+0x2a0>
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w
 8008150:	636f4361 	.word	0x636f4361
 8008154:	3fd287a7 	.word	0x3fd287a7
 8008158:	8b60c8b3 	.word	0x8b60c8b3
 800815c:	3fc68a28 	.word	0x3fc68a28
 8008160:	509f79fb 	.word	0x509f79fb
 8008164:	3fd34413 	.word	0x3fd34413
 8008168:	7ff00000 	.word	0x7ff00000
 800816c:	0800a77f 	.word	0x0800a77f
 8008170:	0800a776 	.word	0x0800a776
 8008174:	0800a765 	.word	0x0800a765
 8008178:	fffffbee 	.word	0xfffffbee
 800817c:	3ff80000 	.word	0x3ff80000
 8008180:	0800a7f0 	.word	0x0800a7f0
 8008184:	4650      	mov	r0, sl
 8008186:	6861      	ldr	r1, [r4, #4]
 8008188:	f001 fafe 	bl	8009788 <_Balloc>
 800818c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008190:	9f04      	ldr	r7, [sp, #16]
 8008192:	6020      	str	r0, [r4, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	9307      	str	r3, [sp, #28]
 8008198:	2f0e      	cmp	r7, #14
 800819a:	f200 8169 	bhi.w	8008470 <_dtoa_r+0x5d8>
 800819e:	2d00      	cmp	r5, #0
 80081a0:	f000 8166 	beq.w	8008470 <_dtoa_r+0x5d8>
 80081a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081a8:	f1b9 0f00 	cmp.w	r9, #0
 80081ac:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80081b0:	dd31      	ble.n	8008216 <_dtoa_r+0x37e>
 80081b2:	4a80      	ldr	r2, [pc, #512]	; (80083b4 <_dtoa_r+0x51c>)
 80081b4:	f009 030f 	and.w	r3, r9, #15
 80081b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081bc:	ed93 7b00 	vldr	d7, [r3]
 80081c0:	ea4f 1429 	mov.w	r4, r9, asr #4
 80081c4:	06e0      	lsls	r0, r4, #27
 80081c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081ca:	d50c      	bpl.n	80081e6 <_dtoa_r+0x34e>
 80081cc:	4b7a      	ldr	r3, [pc, #488]	; (80083b8 <_dtoa_r+0x520>)
 80081ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80081d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081d6:	f7f8 faf9 	bl	80007cc <__aeabi_ddiv>
 80081da:	f004 040f 	and.w	r4, r4, #15
 80081de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081e2:	2703      	movs	r7, #3
 80081e4:	e000      	b.n	80081e8 <_dtoa_r+0x350>
 80081e6:	2702      	movs	r7, #2
 80081e8:	4d73      	ldr	r5, [pc, #460]	; (80083b8 <_dtoa_r+0x520>)
 80081ea:	b16c      	cbz	r4, 8008208 <_dtoa_r+0x370>
 80081ec:	07e1      	lsls	r1, r4, #31
 80081ee:	d508      	bpl.n	8008202 <_dtoa_r+0x36a>
 80081f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081f8:	f7f8 f9be 	bl	8000578 <__aeabi_dmul>
 80081fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008200:	3701      	adds	r7, #1
 8008202:	1064      	asrs	r4, r4, #1
 8008204:	3508      	adds	r5, #8
 8008206:	e7f0      	b.n	80081ea <_dtoa_r+0x352>
 8008208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008210:	f7f8 fadc 	bl	80007cc <__aeabi_ddiv>
 8008214:	e01b      	b.n	800824e <_dtoa_r+0x3b6>
 8008216:	f1c9 0400 	rsb	r4, r9, #0
 800821a:	b1dc      	cbz	r4, 8008254 <_dtoa_r+0x3bc>
 800821c:	4b65      	ldr	r3, [pc, #404]	; (80083b4 <_dtoa_r+0x51c>)
 800821e:	4d66      	ldr	r5, [pc, #408]	; (80083b8 <_dtoa_r+0x520>)
 8008220:	f004 020f 	and.w	r2, r4, #15
 8008224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008228:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f9a2 	bl	8000578 <__aeabi_dmul>
 8008234:	1124      	asrs	r4, r4, #4
 8008236:	2702      	movs	r7, #2
 8008238:	b14c      	cbz	r4, 800824e <_dtoa_r+0x3b6>
 800823a:	07e2      	lsls	r2, r4, #31
 800823c:	d504      	bpl.n	8008248 <_dtoa_r+0x3b0>
 800823e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008242:	3701      	adds	r7, #1
 8008244:	f7f8 f998 	bl	8000578 <__aeabi_dmul>
 8008248:	1064      	asrs	r4, r4, #1
 800824a:	3508      	adds	r5, #8
 800824c:	e7f4      	b.n	8008238 <_dtoa_r+0x3a0>
 800824e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008252:	e000      	b.n	8008256 <_dtoa_r+0x3be>
 8008254:	2702      	movs	r7, #2
 8008256:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008258:	b1e1      	cbz	r1, 8008294 <_dtoa_r+0x3fc>
 800825a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	4b55      	ldr	r3, [pc, #340]	; (80083bc <_dtoa_r+0x524>)
 8008266:	f7f8 fbf9 	bl	8000a5c <__aeabi_dcmplt>
 800826a:	b1c0      	cbz	r0, 800829e <_dtoa_r+0x406>
 800826c:	9a04      	ldr	r2, [sp, #16]
 800826e:	b1da      	cbz	r2, 80082a8 <_dtoa_r+0x410>
 8008270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	f340 80f8 	ble.w	8008468 <_dtoa_r+0x5d0>
 8008278:	f109 31ff 	add.w	r1, r9, #4294967295
 800827c:	910f      	str	r1, [sp, #60]	; 0x3c
 800827e:	2200      	movs	r2, #0
 8008280:	4620      	mov	r0, r4
 8008282:	4629      	mov	r1, r5
 8008284:	4b4e      	ldr	r3, [pc, #312]	; (80083c0 <_dtoa_r+0x528>)
 8008286:	f7f8 f977 	bl	8000578 <__aeabi_dmul>
 800828a:	3701      	adds	r7, #1
 800828c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008292:	e00c      	b.n	80082ae <_dtoa_r+0x416>
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800829a:	9308      	str	r3, [sp, #32]
 800829c:	e008      	b.n	80082b0 <_dtoa_r+0x418>
 800829e:	9904      	ldr	r1, [sp, #16]
 80082a0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80082a4:	9108      	str	r1, [sp, #32]
 80082a6:	e003      	b.n	80082b0 <_dtoa_r+0x418>
 80082a8:	9a04      	ldr	r2, [sp, #16]
 80082aa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80082ae:	9208      	str	r2, [sp, #32]
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7f8 f8fb 	bl	80004ac <__aeabi_i2d>
 80082b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ba:	f7f8 f95d 	bl	8000578 <__aeabi_dmul>
 80082be:	2200      	movs	r2, #0
 80082c0:	4b40      	ldr	r3, [pc, #256]	; (80083c4 <_dtoa_r+0x52c>)
 80082c2:	f7f7 ffa7 	bl	8000214 <__adddf3>
 80082c6:	9f08      	ldr	r7, [sp, #32]
 80082c8:	4604      	mov	r4, r0
 80082ca:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80082ce:	b9cf      	cbnz	r7, 8008304 <_dtoa_r+0x46c>
 80082d0:	2200      	movs	r2, #0
 80082d2:	4b3d      	ldr	r3, [pc, #244]	; (80083c8 <_dtoa_r+0x530>)
 80082d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d8:	f7f7 ff9a 	bl	8000210 <__aeabi_dsub>
 80082dc:	4622      	mov	r2, r4
 80082de:	462b      	mov	r3, r5
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	f7f8 fbd8 	bl	8000a98 <__aeabi_dcmpgt>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f040 824b 	bne.w	8008784 <_dtoa_r+0x8ec>
 80082ee:	4622      	mov	r2, r4
 80082f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f8 fbb0 	bl	8000a5c <__aeabi_dcmplt>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f040 8237 	bne.w	8008770 <_dtoa_r+0x8d8>
 8008302:	e0b1      	b.n	8008468 <_dtoa_r+0x5d0>
 8008304:	9f08      	ldr	r7, [sp, #32]
 8008306:	4b2b      	ldr	r3, [pc, #172]	; (80083b4 <_dtoa_r+0x51c>)
 8008308:	1e7a      	subs	r2, r7, #1
 800830a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800830c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008310:	2f00      	cmp	r7, #0
 8008312:	d05d      	beq.n	80083d0 <_dtoa_r+0x538>
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	2000      	movs	r0, #0
 800831a:	492c      	ldr	r1, [pc, #176]	; (80083cc <_dtoa_r+0x534>)
 800831c:	f7f8 fa56 	bl	80007cc <__aeabi_ddiv>
 8008320:	4622      	mov	r2, r4
 8008322:	462b      	mov	r3, r5
 8008324:	f7f7 ff74 	bl	8000210 <__aeabi_dsub>
 8008328:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800832c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	4639      	mov	r1, r7
 8008336:	4630      	mov	r0, r6
 8008338:	f7f8 fbb8 	bl	8000aac <__aeabi_d2iz>
 800833c:	9000      	str	r0, [sp, #0]
 800833e:	f7f8 f8b5 	bl	80004ac <__aeabi_i2d>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	f7f7 ff61 	bl	8000210 <__aeabi_dsub>
 800834e:	f8dd c000 	ldr.w	ip, [sp]
 8008352:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 8008356:	f808 3b01 	strb.w	r3, [r8], #1
 800835a:	4622      	mov	r2, r4
 800835c:	462b      	mov	r3, r5
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	f7f8 fb7b 	bl	8000a5c <__aeabi_dcmplt>
 8008366:	2800      	cmp	r0, #0
 8008368:	f040 8333 	bne.w	80089d2 <_dtoa_r+0xb3a>
 800836c:	4632      	mov	r2, r6
 800836e:	463b      	mov	r3, r7
 8008370:	2000      	movs	r0, #0
 8008372:	4912      	ldr	r1, [pc, #72]	; (80083bc <_dtoa_r+0x524>)
 8008374:	f7f7 ff4c 	bl	8000210 <__aeabi_dsub>
 8008378:	4622      	mov	r2, r4
 800837a:	462b      	mov	r3, r5
 800837c:	f7f8 fb6e 	bl	8000a5c <__aeabi_dcmplt>
 8008380:	2800      	cmp	r0, #0
 8008382:	f040 80d4 	bne.w	800852e <_dtoa_r+0x696>
 8008386:	9907      	ldr	r1, [sp, #28]
 8008388:	9a08      	ldr	r2, [sp, #32]
 800838a:	ebc1 0308 	rsb	r3, r1, r8
 800838e:	4293      	cmp	r3, r2
 8008390:	da6a      	bge.n	8008468 <_dtoa_r+0x5d0>
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	2200      	movs	r2, #0
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <_dtoa_r+0x528>)
 800839a:	f7f8 f8ed 	bl	8000578 <__aeabi_dmul>
 800839e:	2200      	movs	r2, #0
 80083a0:	4604      	mov	r4, r0
 80083a2:	460d      	mov	r5, r1
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <_dtoa_r+0x528>)
 80083aa:	f7f8 f8e5 	bl	8000578 <__aeabi_dmul>
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	e7bf      	b.n	8008334 <_dtoa_r+0x49c>
 80083b4:	0800a7f0 	.word	0x0800a7f0
 80083b8:	0800a8b8 	.word	0x0800a8b8
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	40240000 	.word	0x40240000
 80083c4:	401c0000 	.word	0x401c0000
 80083c8:	40140000 	.word	0x40140000
 80083cc:	3fe00000 	.word	0x3fe00000
 80083d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083d4:	4622      	mov	r2, r4
 80083d6:	462b      	mov	r3, r5
 80083d8:	f7f8 f8ce 	bl	8000578 <__aeabi_dmul>
 80083dc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80083e0:	9b08      	ldr	r3, [sp, #32]
 80083e2:	9c07      	ldr	r4, [sp, #28]
 80083e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80083e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083ec:	4498      	add	r8, r3
 80083ee:	4639      	mov	r1, r7
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7f8 fb5b 	bl	8000aac <__aeabi_d2iz>
 80083f6:	4605      	mov	r5, r0
 80083f8:	f7f8 f858 	bl	80004ac <__aeabi_i2d>
 80083fc:	3530      	adds	r5, #48	; 0x30
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4630      	mov	r0, r6
 8008404:	4639      	mov	r1, r7
 8008406:	f7f7 ff03 	bl	8000210 <__aeabi_dsub>
 800840a:	f804 5b01 	strb.w	r5, [r4], #1
 800840e:	4544      	cmp	r4, r8
 8008410:	4606      	mov	r6, r0
 8008412:	460f      	mov	r7, r1
 8008414:	d121      	bne.n	800845a <_dtoa_r+0x5c2>
 8008416:	2200      	movs	r2, #0
 8008418:	4b87      	ldr	r3, [pc, #540]	; (8008638 <_dtoa_r+0x7a0>)
 800841a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800841e:	f7f7 fef9 	bl	8000214 <__adddf3>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4630      	mov	r0, r6
 8008428:	4639      	mov	r1, r7
 800842a:	f7f8 fb35 	bl	8000a98 <__aeabi_dcmpgt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d17d      	bne.n	800852e <_dtoa_r+0x696>
 8008432:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008436:	2000      	movs	r0, #0
 8008438:	497f      	ldr	r1, [pc, #508]	; (8008638 <_dtoa_r+0x7a0>)
 800843a:	f7f7 fee9 	bl	8000210 <__aeabi_dsub>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4630      	mov	r0, r6
 8008444:	4639      	mov	r1, r7
 8008446:	f7f8 fb09 	bl	8000a5c <__aeabi_dcmplt>
 800844a:	b168      	cbz	r0, 8008468 <_dtoa_r+0x5d0>
 800844c:	46a0      	mov	r8, r4
 800844e:	3c01      	subs	r4, #1
 8008450:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008454:	2b30      	cmp	r3, #48	; 0x30
 8008456:	d0f9      	beq.n	800844c <_dtoa_r+0x5b4>
 8008458:	e2bb      	b.n	80089d2 <_dtoa_r+0xb3a>
 800845a:	2200      	movs	r2, #0
 800845c:	4b77      	ldr	r3, [pc, #476]	; (800863c <_dtoa_r+0x7a4>)
 800845e:	f7f8 f88b 	bl	8000578 <__aeabi_dmul>
 8008462:	4606      	mov	r6, r0
 8008464:	460f      	mov	r7, r1
 8008466:	e7c2      	b.n	80083ee <_dtoa_r+0x556>
 8008468:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 800846c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008472:	2b00      	cmp	r3, #0
 8008474:	db7c      	blt.n	8008570 <_dtoa_r+0x6d8>
 8008476:	f1b9 0f0e 	cmp.w	r9, #14
 800847a:	dc79      	bgt.n	8008570 <_dtoa_r+0x6d8>
 800847c:	4b70      	ldr	r3, [pc, #448]	; (8008640 <_dtoa_r+0x7a8>)
 800847e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008480:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008484:	2f00      	cmp	r7, #0
 8008486:	e9d3 4500 	ldrd	r4, r5, [r3]
 800848a:	da14      	bge.n	80084b6 <_dtoa_r+0x61e>
 800848c:	9f04      	ldr	r7, [sp, #16]
 800848e:	2f00      	cmp	r7, #0
 8008490:	dc11      	bgt.n	80084b6 <_dtoa_r+0x61e>
 8008492:	f040 816f 	bne.w	8008774 <_dtoa_r+0x8dc>
 8008496:	4620      	mov	r0, r4
 8008498:	4629      	mov	r1, r5
 800849a:	2200      	movs	r2, #0
 800849c:	4b69      	ldr	r3, [pc, #420]	; (8008644 <_dtoa_r+0x7ac>)
 800849e:	f7f8 f86b 	bl	8000578 <__aeabi_dmul>
 80084a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084a6:	f7f8 faed 	bl	8000a84 <__aeabi_dcmpge>
 80084aa:	9d04      	ldr	r5, [sp, #16]
 80084ac:	462c      	mov	r4, r5
 80084ae:	2800      	cmp	r0, #0
 80084b0:	f040 8162 	bne.w	8008778 <_dtoa_r+0x8e0>
 80084b4:	e16a      	b.n	800878c <_dtoa_r+0x8f4>
 80084b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80084be:	4622      	mov	r2, r4
 80084c0:	462b      	mov	r3, r5
 80084c2:	4630      	mov	r0, r6
 80084c4:	4639      	mov	r1, r7
 80084c6:	f7f8 f981 	bl	80007cc <__aeabi_ddiv>
 80084ca:	f7f8 faef 	bl	8000aac <__aeabi_d2iz>
 80084ce:	9002      	str	r0, [sp, #8]
 80084d0:	f7f7 ffec 	bl	80004ac <__aeabi_i2d>
 80084d4:	4622      	mov	r2, r4
 80084d6:	462b      	mov	r3, r5
 80084d8:	f7f8 f84e 	bl	8000578 <__aeabi_dmul>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f7 fe94 	bl	8000210 <__aeabi_dsub>
 80084e8:	9f02      	ldr	r7, [sp, #8]
 80084ea:	f107 0630 	add.w	r6, r7, #48	; 0x30
 80084ee:	f808 6b01 	strb.w	r6, [r8], #1
 80084f2:	9f07      	ldr	r7, [sp, #28]
 80084f4:	ebc7 0608 	rsb	r6, r7, r8
 80084f8:	9f04      	ldr	r7, [sp, #16]
 80084fa:	42be      	cmp	r6, r7
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	d129      	bne.n	8008556 <_dtoa_r+0x6be>
 8008502:	f7f7 fe87 	bl	8000214 <__adddf3>
 8008506:	4622      	mov	r2, r4
 8008508:	462b      	mov	r3, r5
 800850a:	4606      	mov	r6, r0
 800850c:	460f      	mov	r7, r1
 800850e:	f7f8 fac3 	bl	8000a98 <__aeabi_dcmpgt>
 8008512:	b970      	cbnz	r0, 8008532 <_dtoa_r+0x69a>
 8008514:	4630      	mov	r0, r6
 8008516:	4639      	mov	r1, r7
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	f7f8 fa94 	bl	8000a48 <__aeabi_dcmpeq>
 8008520:	2800      	cmp	r0, #0
 8008522:	f000 8258 	beq.w	80089d6 <_dtoa_r+0xb3e>
 8008526:	9f02      	ldr	r7, [sp, #8]
 8008528:	07fb      	lsls	r3, r7, #31
 800852a:	d402      	bmi.n	8008532 <_dtoa_r+0x69a>
 800852c:	e253      	b.n	80089d6 <_dtoa_r+0xb3e>
 800852e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8008532:	4643      	mov	r3, r8
 8008534:	4698      	mov	r8, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800853c:	2a39      	cmp	r2, #57	; 0x39
 800853e:	d106      	bne.n	800854e <_dtoa_r+0x6b6>
 8008540:	9f07      	ldr	r7, [sp, #28]
 8008542:	429f      	cmp	r7, r3
 8008544:	d1f6      	bne.n	8008534 <_dtoa_r+0x69c>
 8008546:	2230      	movs	r2, #48	; 0x30
 8008548:	f109 0901 	add.w	r9, r9, #1
 800854c:	703a      	strb	r2, [r7, #0]
 800854e:	781a      	ldrb	r2, [r3, #0]
 8008550:	3201      	adds	r2, #1
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e23f      	b.n	80089d6 <_dtoa_r+0xb3e>
 8008556:	2200      	movs	r2, #0
 8008558:	4b38      	ldr	r3, [pc, #224]	; (800863c <_dtoa_r+0x7a4>)
 800855a:	f7f8 f80d 	bl	8000578 <__aeabi_dmul>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4606      	mov	r6, r0
 8008564:	460f      	mov	r7, r1
 8008566:	f7f8 fa6f 	bl	8000a48 <__aeabi_dcmpeq>
 800856a:	2800      	cmp	r0, #0
 800856c:	d0a7      	beq.n	80084be <_dtoa_r+0x626>
 800856e:	e232      	b.n	80089d6 <_dtoa_r+0xb3e>
 8008570:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008572:	2f00      	cmp	r7, #0
 8008574:	d030      	beq.n	80085d8 <_dtoa_r+0x740>
 8008576:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008578:	2f01      	cmp	r7, #1
 800857a:	dc0a      	bgt.n	8008592 <_dtoa_r+0x6fa>
 800857c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800857e:	b117      	cbz	r7, 8008586 <_dtoa_r+0x6ee>
 8008580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008584:	e002      	b.n	800858c <_dtoa_r+0x6f4>
 8008586:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008588:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800858c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800858e:	9e05      	ldr	r6, [sp, #20]
 8008590:	e016      	b.n	80085c0 <_dtoa_r+0x728>
 8008592:	9f04      	ldr	r7, [sp, #16]
 8008594:	1e7d      	subs	r5, r7, #1
 8008596:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008598:	42af      	cmp	r7, r5
 800859a:	db01      	blt.n	80085a0 <_dtoa_r+0x708>
 800859c:	1b7d      	subs	r5, r7, r5
 800859e:	e006      	b.n	80085ae <_dtoa_r+0x716>
 80085a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80085a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80085a4:	1beb      	subs	r3, r5, r7
 80085a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80085a8:	441f      	add	r7, r3
 80085aa:	9710      	str	r7, [sp, #64]	; 0x40
 80085ac:	2500      	movs	r5, #0
 80085ae:	9f04      	ldr	r7, [sp, #16]
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	da03      	bge.n	80085bc <_dtoa_r+0x724>
 80085b4:	9905      	ldr	r1, [sp, #20]
 80085b6:	2300      	movs	r3, #0
 80085b8:	1bce      	subs	r6, r1, r7
 80085ba:	e001      	b.n	80085c0 <_dtoa_r+0x728>
 80085bc:	9e05      	ldr	r6, [sp, #20]
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	9f05      	ldr	r7, [sp, #20]
 80085c2:	441f      	add	r7, r3
 80085c4:	9705      	str	r7, [sp, #20]
 80085c6:	9f06      	ldr	r7, [sp, #24]
 80085c8:	4650      	mov	r0, sl
 80085ca:	441f      	add	r7, r3
 80085cc:	2101      	movs	r1, #1
 80085ce:	9706      	str	r7, [sp, #24]
 80085d0:	f001 f9ad 	bl	800992e <__i2b>
 80085d4:	4604      	mov	r4, r0
 80085d6:	e002      	b.n	80085de <_dtoa_r+0x746>
 80085d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80085da:	9e05      	ldr	r6, [sp, #20]
 80085dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80085de:	b16e      	cbz	r6, 80085fc <_dtoa_r+0x764>
 80085e0:	9f06      	ldr	r7, [sp, #24]
 80085e2:	2f00      	cmp	r7, #0
 80085e4:	dd0a      	ble.n	80085fc <_dtoa_r+0x764>
 80085e6:	463b      	mov	r3, r7
 80085e8:	9f05      	ldr	r7, [sp, #20]
 80085ea:	42b3      	cmp	r3, r6
 80085ec:	bfa8      	it	ge
 80085ee:	4633      	movge	r3, r6
 80085f0:	1aff      	subs	r7, r7, r3
 80085f2:	9705      	str	r7, [sp, #20]
 80085f4:	9f06      	ldr	r7, [sp, #24]
 80085f6:	1aff      	subs	r7, r7, r3
 80085f8:	1af6      	subs	r6, r6, r3
 80085fa:	9706      	str	r7, [sp, #24]
 80085fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80085fe:	2f00      	cmp	r7, #0
 8008600:	dd28      	ble.n	8008654 <_dtoa_r+0x7bc>
 8008602:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008604:	b307      	cbz	r7, 8008648 <_dtoa_r+0x7b0>
 8008606:	2d00      	cmp	r5, #0
 8008608:	dd10      	ble.n	800862c <_dtoa_r+0x794>
 800860a:	4621      	mov	r1, r4
 800860c:	462a      	mov	r2, r5
 800860e:	4650      	mov	r0, sl
 8008610:	f001 fa2e 	bl	8009a70 <__pow5mult>
 8008614:	4604      	mov	r4, r0
 8008616:	465a      	mov	r2, fp
 8008618:	4621      	mov	r1, r4
 800861a:	4650      	mov	r0, sl
 800861c:	f001 f990 	bl	8009940 <__multiply>
 8008620:	4659      	mov	r1, fp
 8008622:	4607      	mov	r7, r0
 8008624:	4650      	mov	r0, sl
 8008626:	f001 f8e4 	bl	80097f2 <_Bfree>
 800862a:	46bb      	mov	fp, r7
 800862c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800862e:	1b7a      	subs	r2, r7, r5
 8008630:	d010      	beq.n	8008654 <_dtoa_r+0x7bc>
 8008632:	4650      	mov	r0, sl
 8008634:	4659      	mov	r1, fp
 8008636:	e00a      	b.n	800864e <_dtoa_r+0x7b6>
 8008638:	3fe00000 	.word	0x3fe00000
 800863c:	40240000 	.word	0x40240000
 8008640:	0800a7f0 	.word	0x0800a7f0
 8008644:	40140000 	.word	0x40140000
 8008648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800864a:	4650      	mov	r0, sl
 800864c:	4659      	mov	r1, fp
 800864e:	f001 fa0f 	bl	8009a70 <__pow5mult>
 8008652:	4683      	mov	fp, r0
 8008654:	4650      	mov	r0, sl
 8008656:	2101      	movs	r1, #1
 8008658:	f001 f969 	bl	800992e <__i2b>
 800865c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800865e:	2f00      	cmp	r7, #0
 8008660:	4605      	mov	r5, r0
 8008662:	dd05      	ble.n	8008670 <_dtoa_r+0x7d8>
 8008664:	4629      	mov	r1, r5
 8008666:	4650      	mov	r0, sl
 8008668:	463a      	mov	r2, r7
 800866a:	f001 fa01 	bl	8009a70 <__pow5mult>
 800866e:	4605      	mov	r5, r0
 8008670:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008672:	2f01      	cmp	r7, #1
 8008674:	dc12      	bgt.n	800869c <_dtoa_r+0x804>
 8008676:	9902      	ldr	r1, [sp, #8]
 8008678:	b981      	cbnz	r1, 800869c <_dtoa_r+0x804>
 800867a:	9a03      	ldr	r2, [sp, #12]
 800867c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8008680:	b973      	cbnz	r3, 80086a0 <_dtoa_r+0x808>
 8008682:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 8008686:	0d3f      	lsrs	r7, r7, #20
 8008688:	053f      	lsls	r7, r7, #20
 800868a:	b157      	cbz	r7, 80086a2 <_dtoa_r+0x80a>
 800868c:	9f05      	ldr	r7, [sp, #20]
 800868e:	3701      	adds	r7, #1
 8008690:	9705      	str	r7, [sp, #20]
 8008692:	9f06      	ldr	r7, [sp, #24]
 8008694:	3701      	adds	r7, #1
 8008696:	9706      	str	r7, [sp, #24]
 8008698:	2701      	movs	r7, #1
 800869a:	e002      	b.n	80086a2 <_dtoa_r+0x80a>
 800869c:	2700      	movs	r7, #0
 800869e:	e000      	b.n	80086a2 <_dtoa_r+0x80a>
 80086a0:	9f02      	ldr	r7, [sp, #8]
 80086a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80086a4:	b141      	cbz	r1, 80086b8 <_dtoa_r+0x820>
 80086a6:	692b      	ldr	r3, [r5, #16]
 80086a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80086ac:	6918      	ldr	r0, [r3, #16]
 80086ae:	f001 f8f1 	bl	8009894 <__hi0bits>
 80086b2:	f1c0 0020 	rsb	r0, r0, #32
 80086b6:	e000      	b.n	80086ba <_dtoa_r+0x822>
 80086b8:	2001      	movs	r0, #1
 80086ba:	9b06      	ldr	r3, [sp, #24]
 80086bc:	4403      	add	r3, r0
 80086be:	f013 031f 	ands.w	r3, r3, #31
 80086c2:	d008      	beq.n	80086d6 <_dtoa_r+0x83e>
 80086c4:	f1c3 0220 	rsb	r2, r3, #32
 80086c8:	2a04      	cmp	r2, #4
 80086ca:	dd02      	ble.n	80086d2 <_dtoa_r+0x83a>
 80086cc:	f1c3 031c 	rsb	r3, r3, #28
 80086d0:	e002      	b.n	80086d8 <_dtoa_r+0x840>
 80086d2:	d008      	beq.n	80086e6 <_dtoa_r+0x84e>
 80086d4:	4613      	mov	r3, r2
 80086d6:	331c      	adds	r3, #28
 80086d8:	9a05      	ldr	r2, [sp, #20]
 80086da:	9906      	ldr	r1, [sp, #24]
 80086dc:	441a      	add	r2, r3
 80086de:	4419      	add	r1, r3
 80086e0:	9205      	str	r2, [sp, #20]
 80086e2:	441e      	add	r6, r3
 80086e4:	9106      	str	r1, [sp, #24]
 80086e6:	9a05      	ldr	r2, [sp, #20]
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	dd04      	ble.n	80086f6 <_dtoa_r+0x85e>
 80086ec:	4659      	mov	r1, fp
 80086ee:	4650      	mov	r0, sl
 80086f0:	f001 fa0c 	bl	8009b0c <__lshift>
 80086f4:	4683      	mov	fp, r0
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dd05      	ble.n	8008708 <_dtoa_r+0x870>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4650      	mov	r0, sl
 8008700:	461a      	mov	r2, r3
 8008702:	f001 fa03 	bl	8009b0c <__lshift>
 8008706:	4605      	mov	r5, r0
 8008708:	9911      	ldr	r1, [sp, #68]	; 0x44
 800870a:	b1e1      	cbz	r1, 8008746 <_dtoa_r+0x8ae>
 800870c:	4658      	mov	r0, fp
 800870e:	4629      	mov	r1, r5
 8008710:	f001 fa4f 	bl	8009bb2 <__mcmp>
 8008714:	2800      	cmp	r0, #0
 8008716:	da16      	bge.n	8008746 <_dtoa_r+0x8ae>
 8008718:	4659      	mov	r1, fp
 800871a:	220a      	movs	r2, #10
 800871c:	4650      	mov	r0, sl
 800871e:	2300      	movs	r3, #0
 8008720:	f001 f87e 	bl	8009820 <__multadd>
 8008724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008726:	f109 39ff 	add.w	r9, r9, #4294967295
 800872a:	4683      	mov	fp, r0
 800872c:	b14a      	cbz	r2, 8008742 <_dtoa_r+0x8aa>
 800872e:	4621      	mov	r1, r4
 8008730:	2300      	movs	r3, #0
 8008732:	4650      	mov	r0, sl
 8008734:	220a      	movs	r2, #10
 8008736:	f001 f873 	bl	8009820 <__multadd>
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	4604      	mov	r4, r0
 8008740:	e001      	b.n	8008746 <_dtoa_r+0x8ae>
 8008742:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008744:	9104      	str	r1, [sp, #16]
 8008746:	9a04      	ldr	r2, [sp, #16]
 8008748:	2a00      	cmp	r2, #0
 800874a:	dc29      	bgt.n	80087a0 <_dtoa_r+0x908>
 800874c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800874e:	2b02      	cmp	r3, #2
 8008750:	dd26      	ble.n	80087a0 <_dtoa_r+0x908>
 8008752:	b98a      	cbnz	r2, 8008778 <_dtoa_r+0x8e0>
 8008754:	4629      	mov	r1, r5
 8008756:	2205      	movs	r2, #5
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	4650      	mov	r0, sl
 800875c:	f001 f860 	bl	8009820 <__multadd>
 8008760:	4605      	mov	r5, r0
 8008762:	4629      	mov	r1, r5
 8008764:	4658      	mov	r0, fp
 8008766:	f001 fa24 	bl	8009bb2 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	dc0e      	bgt.n	800878c <_dtoa_r+0x8f4>
 800876e:	e003      	b.n	8008778 <_dtoa_r+0x8e0>
 8008770:	9d08      	ldr	r5, [sp, #32]
 8008772:	e000      	b.n	8008776 <_dtoa_r+0x8de>
 8008774:	2500      	movs	r5, #0
 8008776:	462c      	mov	r4, r5
 8008778:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800877a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800877e:	ea6f 0907 	mvn.w	r9, r7
 8008782:	e00a      	b.n	800879a <_dtoa_r+0x902>
 8008784:	9d08      	ldr	r5, [sp, #32]
 8008786:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800878a:	462c      	mov	r4, r5
 800878c:	9f07      	ldr	r7, [sp, #28]
 800878e:	2331      	movs	r3, #49	; 0x31
 8008790:	f107 0801 	add.w	r8, r7, #1
 8008794:	703b      	strb	r3, [r7, #0]
 8008796:	f109 0901 	add.w	r9, r9, #1
 800879a:	4627      	mov	r7, r4
 800879c:	2400      	movs	r4, #0
 800879e:	e107      	b.n	80089b0 <_dtoa_r+0xb18>
 80087a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087a2:	2900      	cmp	r1, #0
 80087a4:	f000 80bb 	beq.w	800891e <_dtoa_r+0xa86>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	dd05      	ble.n	80087b8 <_dtoa_r+0x920>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4650      	mov	r0, sl
 80087b0:	4632      	mov	r2, r6
 80087b2:	f001 f9ab 	bl	8009b0c <__lshift>
 80087b6:	4604      	mov	r4, r0
 80087b8:	b19f      	cbz	r7, 80087e2 <_dtoa_r+0x94a>
 80087ba:	6861      	ldr	r1, [r4, #4]
 80087bc:	4650      	mov	r0, sl
 80087be:	f000 ffe3 	bl	8009788 <_Balloc>
 80087c2:	6922      	ldr	r2, [r4, #16]
 80087c4:	3202      	adds	r2, #2
 80087c6:	4606      	mov	r6, r0
 80087c8:	f104 010c 	add.w	r1, r4, #12
 80087cc:	0092      	lsls	r2, r2, #2
 80087ce:	300c      	adds	r0, #12
 80087d0:	f7fe f9ee 	bl	8006bb0 <memcpy>
 80087d4:	4650      	mov	r0, sl
 80087d6:	4631      	mov	r1, r6
 80087d8:	2201      	movs	r2, #1
 80087da:	f001 f997 	bl	8009b0c <__lshift>
 80087de:	4607      	mov	r7, r0
 80087e0:	e000      	b.n	80087e4 <_dtoa_r+0x94c>
 80087e2:	4627      	mov	r7, r4
 80087e4:	9e07      	ldr	r6, [sp, #28]
 80087e6:	4629      	mov	r1, r5
 80087e8:	4658      	mov	r0, fp
 80087ea:	f7ff fac5 	bl	8007d78 <quorem>
 80087ee:	4621      	mov	r1, r4
 80087f0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80087f4:	4680      	mov	r8, r0
 80087f6:	4658      	mov	r0, fp
 80087f8:	f8cd c000 	str.w	ip, [sp]
 80087fc:	f001 f9d9 	bl	8009bb2 <__mcmp>
 8008800:	463a      	mov	r2, r7
 8008802:	9005      	str	r0, [sp, #20]
 8008804:	4629      	mov	r1, r5
 8008806:	4650      	mov	r0, sl
 8008808:	f001 f9f0 	bl	8009bec <__mdiff>
 800880c:	68c3      	ldr	r3, [r0, #12]
 800880e:	f8dd c000 	ldr.w	ip, [sp]
 8008812:	4602      	mov	r2, r0
 8008814:	b94b      	cbnz	r3, 800882a <_dtoa_r+0x992>
 8008816:	4611      	mov	r1, r2
 8008818:	4658      	mov	r0, fp
 800881a:	9201      	str	r2, [sp, #4]
 800881c:	f001 f9c9 	bl	8009bb2 <__mcmp>
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	f8dd c000 	ldr.w	ip, [sp]
 8008826:	4603      	mov	r3, r0
 8008828:	e000      	b.n	800882c <_dtoa_r+0x994>
 800882a:	2301      	movs	r3, #1
 800882c:	4650      	mov	r0, sl
 800882e:	4611      	mov	r1, r2
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f8cd c000 	str.w	ip, [sp]
 8008836:	f000 ffdc 	bl	80097f2 <_Bfree>
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	f8dd c000 	ldr.w	ip, [sp]
 8008840:	b963      	cbnz	r3, 800885c <_dtoa_r+0x9c4>
 8008842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008844:	b952      	cbnz	r2, 800885c <_dtoa_r+0x9c4>
 8008846:	9902      	ldr	r1, [sp, #8]
 8008848:	f001 0201 	and.w	r2, r1, #1
 800884c:	b932      	cbnz	r2, 800885c <_dtoa_r+0x9c4>
 800884e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008852:	d035      	beq.n	80088c0 <_dtoa_r+0xa28>
 8008854:	9b05      	ldr	r3, [sp, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	dc24      	bgt.n	80088a4 <_dtoa_r+0xa0c>
 800885a:	e025      	b.n	80088a8 <_dtoa_r+0xa10>
 800885c:	9905      	ldr	r1, [sp, #20]
 800885e:	2900      	cmp	r1, #0
 8008860:	da02      	bge.n	8008868 <_dtoa_r+0x9d0>
 8008862:	2b00      	cmp	r3, #0
 8008864:	dc08      	bgt.n	8008878 <_dtoa_r+0x9e0>
 8008866:	e01f      	b.n	80088a8 <_dtoa_r+0xa10>
 8008868:	d123      	bne.n	80088b2 <_dtoa_r+0xa1a>
 800886a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800886c:	bb0a      	cbnz	r2, 80088b2 <_dtoa_r+0xa1a>
 800886e:	9902      	ldr	r1, [sp, #8]
 8008870:	f001 0201 	and.w	r2, r1, #1
 8008874:	b9ea      	cbnz	r2, 80088b2 <_dtoa_r+0xa1a>
 8008876:	e7f4      	b.n	8008862 <_dtoa_r+0x9ca>
 8008878:	4659      	mov	r1, fp
 800887a:	2201      	movs	r2, #1
 800887c:	4650      	mov	r0, sl
 800887e:	f8cd c000 	str.w	ip, [sp]
 8008882:	f001 f943 	bl	8009b0c <__lshift>
 8008886:	4629      	mov	r1, r5
 8008888:	4683      	mov	fp, r0
 800888a:	f001 f992 	bl	8009bb2 <__mcmp>
 800888e:	2800      	cmp	r0, #0
 8008890:	f8dd c000 	ldr.w	ip, [sp]
 8008894:	dc03      	bgt.n	800889e <_dtoa_r+0xa06>
 8008896:	d107      	bne.n	80088a8 <_dtoa_r+0xa10>
 8008898:	f01c 0f01 	tst.w	ip, #1
 800889c:	d004      	beq.n	80088a8 <_dtoa_r+0xa10>
 800889e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80088a2:	d00d      	beq.n	80088c0 <_dtoa_r+0xa28>
 80088a4:	f108 0c31 	add.w	ip, r8, #49	; 0x31
 80088a8:	f106 0801 	add.w	r8, r6, #1
 80088ac:	f886 c000 	strb.w	ip, [r6]
 80088b0:	e07e      	b.n	80089b0 <_dtoa_r+0xb18>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f106 0801 	add.w	r8, r6, #1
 80088b8:	dd09      	ble.n	80088ce <_dtoa_r+0xa36>
 80088ba:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80088be:	d103      	bne.n	80088c8 <_dtoa_r+0xa30>
 80088c0:	2339      	movs	r3, #57	; 0x39
 80088c2:	7033      	strb	r3, [r6, #0]
 80088c4:	3601      	adds	r6, #1
 80088c6:	e05b      	b.n	8008980 <_dtoa_r+0xae8>
 80088c8:	f10c 0301 	add.w	r3, ip, #1
 80088cc:	e068      	b.n	80089a0 <_dtoa_r+0xb08>
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	9904      	ldr	r1, [sp, #16]
 80088d2:	4646      	mov	r6, r8
 80088d4:	ebc2 0308 	rsb	r3, r2, r8
 80088d8:	428b      	cmp	r3, r1
 80088da:	f806 cc01 	strb.w	ip, [r6, #-1]
 80088de:	d03c      	beq.n	800895a <_dtoa_r+0xac2>
 80088e0:	4659      	mov	r1, fp
 80088e2:	220a      	movs	r2, #10
 80088e4:	2300      	movs	r3, #0
 80088e6:	4650      	mov	r0, sl
 80088e8:	f000 ff9a 	bl	8009820 <__multadd>
 80088ec:	42bc      	cmp	r4, r7
 80088ee:	4683      	mov	fp, r0
 80088f0:	4621      	mov	r1, r4
 80088f2:	4650      	mov	r0, sl
 80088f4:	f04f 020a 	mov.w	r2, #10
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	d104      	bne.n	8008908 <_dtoa_r+0xa70>
 80088fe:	f000 ff8f 	bl	8009820 <__multadd>
 8008902:	4604      	mov	r4, r0
 8008904:	4607      	mov	r7, r0
 8008906:	e76e      	b.n	80087e6 <_dtoa_r+0x94e>
 8008908:	f000 ff8a 	bl	8009820 <__multadd>
 800890c:	4639      	mov	r1, r7
 800890e:	4604      	mov	r4, r0
 8008910:	220a      	movs	r2, #10
 8008912:	4650      	mov	r0, sl
 8008914:	2300      	movs	r3, #0
 8008916:	f000 ff83 	bl	8009820 <__multadd>
 800891a:	4607      	mov	r7, r0
 800891c:	e763      	b.n	80087e6 <_dtoa_r+0x94e>
 800891e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008920:	4658      	mov	r0, fp
 8008922:	4629      	mov	r1, r5
 8008924:	f7ff fa28 	bl	8007d78 <quorem>
 8008928:	9f07      	ldr	r7, [sp, #28]
 800892a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800892e:	f807 c006 	strb.w	ip, [r7, r6]
 8008932:	9f04      	ldr	r7, [sp, #16]
 8008934:	3601      	adds	r6, #1
 8008936:	42be      	cmp	r6, r7
 8008938:	db07      	blt.n	800894a <_dtoa_r+0xab2>
 800893a:	9e07      	ldr	r6, [sp, #28]
 800893c:	2f01      	cmp	r7, #1
 800893e:	bfac      	ite	ge
 8008940:	19f6      	addge	r6, r6, r7
 8008942:	3601      	addlt	r6, #1
 8008944:	4627      	mov	r7, r4
 8008946:	2400      	movs	r4, #0
 8008948:	e007      	b.n	800895a <_dtoa_r+0xac2>
 800894a:	4659      	mov	r1, fp
 800894c:	4650      	mov	r0, sl
 800894e:	220a      	movs	r2, #10
 8008950:	2300      	movs	r3, #0
 8008952:	f000 ff65 	bl	8009820 <__multadd>
 8008956:	4683      	mov	fp, r0
 8008958:	e7e2      	b.n	8008920 <_dtoa_r+0xa88>
 800895a:	4659      	mov	r1, fp
 800895c:	2201      	movs	r2, #1
 800895e:	4650      	mov	r0, sl
 8008960:	f8cd c000 	str.w	ip, [sp]
 8008964:	f001 f8d2 	bl	8009b0c <__lshift>
 8008968:	4629      	mov	r1, r5
 800896a:	4683      	mov	fp, r0
 800896c:	f001 f921 	bl	8009bb2 <__mcmp>
 8008970:	2800      	cmp	r0, #0
 8008972:	f8dd c000 	ldr.w	ip, [sp]
 8008976:	dc03      	bgt.n	8008980 <_dtoa_r+0xae8>
 8008978:	d114      	bne.n	80089a4 <_dtoa_r+0xb0c>
 800897a:	f01c 0f01 	tst.w	ip, #1
 800897e:	d011      	beq.n	80089a4 <_dtoa_r+0xb0c>
 8008980:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008984:	2b39      	cmp	r3, #57	; 0x39
 8008986:	46b0      	mov	r8, r6
 8008988:	f106 36ff 	add.w	r6, r6, #4294967295
 800898c:	d107      	bne.n	800899e <_dtoa_r+0xb06>
 800898e:	9907      	ldr	r1, [sp, #28]
 8008990:	42b1      	cmp	r1, r6
 8008992:	d1f5      	bne.n	8008980 <_dtoa_r+0xae8>
 8008994:	2331      	movs	r3, #49	; 0x31
 8008996:	f109 0901 	add.w	r9, r9, #1
 800899a:	700b      	strb	r3, [r1, #0]
 800899c:	e008      	b.n	80089b0 <_dtoa_r+0xb18>
 800899e:	3301      	adds	r3, #1
 80089a0:	7033      	strb	r3, [r6, #0]
 80089a2:	e005      	b.n	80089b0 <_dtoa_r+0xb18>
 80089a4:	46b0      	mov	r8, r6
 80089a6:	3e01      	subs	r6, #1
 80089a8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80089ac:	2b30      	cmp	r3, #48	; 0x30
 80089ae:	d0f9      	beq.n	80089a4 <_dtoa_r+0xb0c>
 80089b0:	4650      	mov	r0, sl
 80089b2:	4629      	mov	r1, r5
 80089b4:	f000 ff1d 	bl	80097f2 <_Bfree>
 80089b8:	b16f      	cbz	r7, 80089d6 <_dtoa_r+0xb3e>
 80089ba:	b12c      	cbz	r4, 80089c8 <_dtoa_r+0xb30>
 80089bc:	42bc      	cmp	r4, r7
 80089be:	d003      	beq.n	80089c8 <_dtoa_r+0xb30>
 80089c0:	4650      	mov	r0, sl
 80089c2:	4621      	mov	r1, r4
 80089c4:	f000 ff15 	bl	80097f2 <_Bfree>
 80089c8:	4650      	mov	r0, sl
 80089ca:	4639      	mov	r1, r7
 80089cc:	f000 ff11 	bl	80097f2 <_Bfree>
 80089d0:	e001      	b.n	80089d6 <_dtoa_r+0xb3e>
 80089d2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80089d6:	4650      	mov	r0, sl
 80089d8:	4659      	mov	r1, fp
 80089da:	f000 ff0a 	bl	80097f2 <_Bfree>
 80089de:	2300      	movs	r3, #0
 80089e0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089e2:	f888 3000 	strb.w	r3, [r8]
 80089e6:	f109 0301 	add.w	r3, r9, #1
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80089ee:	b127      	cbz	r7, 80089fa <_dtoa_r+0xb62>
 80089f0:	f8c7 8000 	str.w	r8, [r7]
 80089f4:	e001      	b.n	80089fa <_dtoa_r+0xb62>
 80089f6:	4803      	ldr	r0, [pc, #12]	; (8008a04 <_dtoa_r+0xb6c>)
 80089f8:	e000      	b.n	80089fc <_dtoa_r+0xb64>
 80089fa:	9807      	ldr	r0, [sp, #28]
 80089fc:	b01b      	add	sp, #108	; 0x6c
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	bf00      	nop
 8008a04:	0800a764 	.word	0x0800a764

08008a08 <__sflush_r>:
 8008a08:	898a      	ldrh	r2, [r1, #12]
 8008a0a:	b293      	uxth	r3, r2
 8008a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a10:	4605      	mov	r5, r0
 8008a12:	0718      	lsls	r0, r3, #28
 8008a14:	460c      	mov	r4, r1
 8008a16:	d45e      	bmi.n	8008ad6 <__sflush_r+0xce>
 8008a18:	684b      	ldr	r3, [r1, #4]
 8008a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	818a      	strh	r2, [r1, #12]
 8008a22:	dc02      	bgt.n	8008a2a <__sflush_r+0x22>
 8008a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dd18      	ble.n	8008a5c <__sflush_r+0x54>
 8008a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a2c:	b1b6      	cbz	r6, 8008a5c <__sflush_r+0x54>
 8008a2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a32:	2300      	movs	r3, #0
 8008a34:	b292      	uxth	r2, r2
 8008a36:	682f      	ldr	r7, [r5, #0]
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	b10a      	cbz	r2, 8008a40 <__sflush_r+0x38>
 8008a3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a3e:	e010      	b.n	8008a62 <__sflush_r+0x5a>
 8008a40:	6a21      	ldr	r1, [r4, #32]
 8008a42:	4628      	mov	r0, r5
 8008a44:	2301      	movs	r3, #1
 8008a46:	47b0      	blx	r6
 8008a48:	1c41      	adds	r1, r0, #1
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	d109      	bne.n	8008a62 <__sflush_r+0x5a>
 8008a4e:	682b      	ldr	r3, [r5, #0]
 8008a50:	b13b      	cbz	r3, 8008a62 <__sflush_r+0x5a>
 8008a52:	2b1d      	cmp	r3, #29
 8008a54:	d001      	beq.n	8008a5a <__sflush_r+0x52>
 8008a56:	2b16      	cmp	r3, #22
 8008a58:	d14b      	bne.n	8008af2 <__sflush_r+0xea>
 8008a5a:	602f      	str	r7, [r5, #0]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	075b      	lsls	r3, r3, #29
 8008a66:	d505      	bpl.n	8008a74 <__sflush_r+0x6c>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a6e:	b10b      	cbz	r3, 8008a74 <__sflush_r+0x6c>
 8008a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a72:	1ad2      	subs	r2, r2, r3
 8008a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a76:	6a21      	ldr	r1, [r4, #32]
 8008a78:	4628      	mov	r0, r5
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	47b0      	blx	r6
 8008a7e:	1c46      	adds	r6, r0, #1
 8008a80:	89a2      	ldrh	r2, [r4, #12]
 8008a82:	d105      	bne.n	8008a90 <__sflush_r+0x88>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b11b      	cbz	r3, 8008a90 <__sflush_r+0x88>
 8008a88:	2b1d      	cmp	r3, #29
 8008a8a:	d001      	beq.n	8008a90 <__sflush_r+0x88>
 8008a8c:	2b16      	cmp	r3, #22
 8008a8e:	d11d      	bne.n	8008acc <__sflush_r+0xc4>
 8008a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a94:	b292      	uxth	r2, r2
 8008a96:	2300      	movs	r3, #0
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	04d1      	lsls	r1, r2, #19
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	81a2      	strh	r2, [r4, #12]
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	d504      	bpl.n	8008aae <__sflush_r+0xa6>
 8008aa4:	1c42      	adds	r2, r0, #1
 8008aa6:	d101      	bne.n	8008aac <__sflush_r+0xa4>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b903      	cbnz	r3, 8008aae <__sflush_r+0xa6>
 8008aac:	6560      	str	r0, [r4, #84]	; 0x54
 8008aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ab0:	602f      	str	r7, [r5, #0]
 8008ab2:	2900      	cmp	r1, #0
 8008ab4:	d0d2      	beq.n	8008a5c <__sflush_r+0x54>
 8008ab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aba:	4299      	cmp	r1, r3
 8008abc:	d002      	beq.n	8008ac4 <__sflush_r+0xbc>
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 f98a 	bl	8008dd8 <_free_r>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	6360      	str	r0, [r4, #52]	; 0x34
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ad0:	81a2      	strh	r2, [r4, #12]
 8008ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad6:	690e      	ldr	r6, [r1, #16]
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	d0bf      	beq.n	8008a5c <__sflush_r+0x54>
 8008adc:	079b      	lsls	r3, r3, #30
 8008ade:	680a      	ldr	r2, [r1, #0]
 8008ae0:	bf08      	it	eq
 8008ae2:	694b      	ldreq	r3, [r1, #20]
 8008ae4:	600e      	str	r6, [r1, #0]
 8008ae6:	bf18      	it	ne
 8008ae8:	2300      	movne	r3, #0
 8008aea:	ebc6 0802 	rsb	r8, r6, r2
 8008aee:	608b      	str	r3, [r1, #8]
 8008af0:	e012      	b.n	8008b18 <__sflush_r+0x110>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	f04f 30ff 	mov.w	r0, #4294967295
 8008afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b02:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008b04:	6a21      	ldr	r1, [r4, #32]
 8008b06:	4628      	mov	r0, r5
 8008b08:	4632      	mov	r2, r6
 8008b0a:	4643      	mov	r3, r8
 8008b0c:	47b8      	blx	r7
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	ddef      	ble.n	8008af2 <__sflush_r+0xea>
 8008b12:	4406      	add	r6, r0
 8008b14:	ebc0 0808 	rsb	r8, r0, r8
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	dcf1      	bgt.n	8008b02 <__sflush_r+0xfa>
 8008b1e:	e79d      	b.n	8008a5c <__sflush_r+0x54>

08008b20 <_fflush_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b1db      	cbz	r3, 8008b62 <_fflush_r+0x42>
 8008b2a:	b118      	cbz	r0, 8008b34 <_fflush_r+0x14>
 8008b2c:	6983      	ldr	r3, [r0, #24]
 8008b2e:	b90b      	cbnz	r3, 8008b34 <_fflush_r+0x14>
 8008b30:	f000 f83c 	bl	8008bac <__sinit>
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <_fflush_r+0x48>)
 8008b36:	429c      	cmp	r4, r3
 8008b38:	d101      	bne.n	8008b3e <_fflush_r+0x1e>
 8008b3a:	686c      	ldr	r4, [r5, #4]
 8008b3c:	e008      	b.n	8008b50 <_fflush_r+0x30>
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <_fflush_r+0x4c>)
 8008b40:	429c      	cmp	r4, r3
 8008b42:	d101      	bne.n	8008b48 <_fflush_r+0x28>
 8008b44:	68ac      	ldr	r4, [r5, #8]
 8008b46:	e003      	b.n	8008b50 <_fflush_r+0x30>
 8008b48:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <_fflush_r+0x50>)
 8008b4a:	429c      	cmp	r4, r3
 8008b4c:	bf08      	it	eq
 8008b4e:	68ec      	ldreq	r4, [r5, #12]
 8008b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b54:	b12b      	cbz	r3, 8008b62 <_fflush_r+0x42>
 8008b56:	4628      	mov	r0, r5
 8008b58:	4621      	mov	r1, r4
 8008b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5e:	f7ff bf53 	b.w	8008a08 <__sflush_r>
 8008b62:	2000      	movs	r0, #0
 8008b64:	bd38      	pop	{r3, r4, r5, pc}
 8008b66:	bf00      	nop
 8008b68:	0800a784 	.word	0x0800a784
 8008b6c:	0800a7a4 	.word	0x0800a7a4
 8008b70:	0800a7c4 	.word	0x0800a7c4

08008b74 <_cleanup_r>:
 8008b74:	4901      	ldr	r1, [pc, #4]	; (8008b7c <_cleanup_r+0x8>)
 8008b76:	f000 bb33 	b.w	80091e0 <_fwalk>
 8008b7a:	bf00      	nop
 8008b7c:	0800a331 	.word	0x0800a331

08008b80 <__sfmoreglue>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	1e4b      	subs	r3, r1, #1
 8008b84:	2568      	movs	r5, #104	; 0x68
 8008b86:	435d      	muls	r5, r3
 8008b88:	460e      	mov	r6, r1
 8008b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b8e:	f000 fbbd 	bl	800930c <_malloc_r>
 8008b92:	4604      	mov	r4, r0
 8008b94:	b140      	cbz	r0, 8008ba8 <__sfmoreglue+0x28>
 8008b96:	2100      	movs	r1, #0
 8008b98:	e880 0042 	stmia.w	r0, {r1, r6}
 8008b9c:	300c      	adds	r0, #12
 8008b9e:	60a0      	str	r0, [r4, #8]
 8008ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ba4:	f7fe f80d 	bl	8006bc2 <memset>
 8008ba8:	4620      	mov	r0, r4
 8008baa:	bd70      	pop	{r4, r5, r6, pc}

08008bac <__sinit>:
 8008bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	6983      	ldr	r3, [r0, #24]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d171      	bne.n	8008c9c <__sinit+0xf0>
 8008bb8:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8008bbc:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8008bc0:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8008bc4:	4b36      	ldr	r3, [pc, #216]	; (8008ca0 <__sinit+0xf4>)
 8008bc6:	4a37      	ldr	r2, [pc, #220]	; (8008ca4 <__sinit+0xf8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6282      	str	r2, [r0, #40]	; 0x28
 8008bcc:	4298      	cmp	r0, r3
 8008bce:	bf04      	itt	eq
 8008bd0:	2301      	moveq	r3, #1
 8008bd2:	6183      	streq	r3, [r0, #24]
 8008bd4:	f000 f870 	bl	8008cb8 <__sfp>
 8008bd8:	6068      	str	r0, [r5, #4]
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f000 f86c 	bl	8008cb8 <__sfp>
 8008be0:	60a8      	str	r0, [r5, #8]
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f868 	bl	8008cb8 <__sfp>
 8008be8:	686e      	ldr	r6, [r5, #4]
 8008bea:	60e8      	str	r0, [r5, #12]
 8008bec:	2400      	movs	r4, #0
 8008bee:	2304      	movs	r3, #4
 8008bf0:	81b3      	strh	r3, [r6, #12]
 8008bf2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008cac <__sinit+0x100>
 8008bf6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8008cb0 <__sinit+0x104>
 8008bfa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8008cb4 <__sinit+0x108>
 8008bfe:	4f2a      	ldr	r7, [pc, #168]	; (8008ca8 <__sinit+0xfc>)
 8008c00:	6034      	str	r4, [r6, #0]
 8008c02:	6074      	str	r4, [r6, #4]
 8008c04:	60b4      	str	r4, [r6, #8]
 8008c06:	6674      	str	r4, [r6, #100]	; 0x64
 8008c08:	81f4      	strh	r4, [r6, #14]
 8008c0a:	6134      	str	r4, [r6, #16]
 8008c0c:	6174      	str	r4, [r6, #20]
 8008c0e:	61b4      	str	r4, [r6, #24]
 8008c10:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008c14:	4621      	mov	r1, r4
 8008c16:	2208      	movs	r2, #8
 8008c18:	f7fd ffd3 	bl	8006bc2 <memset>
 8008c1c:	6236      	str	r6, [r6, #32]
 8008c1e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8008c22:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008c26:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008c2a:	6337      	str	r7, [r6, #48]	; 0x30
 8008c2c:	68ae      	ldr	r6, [r5, #8]
 8008c2e:	2309      	movs	r3, #9
 8008c30:	f04f 0b01 	mov.w	fp, #1
 8008c34:	81b3      	strh	r3, [r6, #12]
 8008c36:	6034      	str	r4, [r6, #0]
 8008c38:	6074      	str	r4, [r6, #4]
 8008c3a:	60b4      	str	r4, [r6, #8]
 8008c3c:	6674      	str	r4, [r6, #100]	; 0x64
 8008c3e:	f8a6 b00e 	strh.w	fp, [r6, #14]
 8008c42:	6134      	str	r4, [r6, #16]
 8008c44:	6174      	str	r4, [r6, #20]
 8008c46:	61b4      	str	r4, [r6, #24]
 8008c48:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	2208      	movs	r2, #8
 8008c50:	f7fd ffb7 	bl	8006bc2 <memset>
 8008c54:	6236      	str	r6, [r6, #32]
 8008c56:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8008c5a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008c5e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008c62:	6337      	str	r7, [r6, #48]	; 0x30
 8008c64:	68ee      	ldr	r6, [r5, #12]
 8008c66:	2312      	movs	r3, #18
 8008c68:	81b3      	strh	r3, [r6, #12]
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	6034      	str	r4, [r6, #0]
 8008c6e:	6074      	str	r4, [r6, #4]
 8008c70:	60b4      	str	r4, [r6, #8]
 8008c72:	6674      	str	r4, [r6, #100]	; 0x64
 8008c74:	81f3      	strh	r3, [r6, #14]
 8008c76:	6134      	str	r4, [r6, #16]
 8008c78:	6174      	str	r4, [r6, #20]
 8008c7a:	61b4      	str	r4, [r6, #24]
 8008c7c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008c80:	4621      	mov	r1, r4
 8008c82:	2208      	movs	r2, #8
 8008c84:	f7fd ff9d 	bl	8006bc2 <memset>
 8008c88:	6236      	str	r6, [r6, #32]
 8008c8a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8008c8e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008c92:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008c96:	6337      	str	r7, [r6, #48]	; 0x30
 8008c98:	f8c5 b018 	str.w	fp, [r5, #24]
 8008c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca0:	0800a71c 	.word	0x0800a71c
 8008ca4:	08008b75 	.word	0x08008b75
 8008ca8:	0800a17f 	.word	0x0800a17f
 8008cac:	0800a101 	.word	0x0800a101
 8008cb0:	0800a123 	.word	0x0800a123
 8008cb4:	0800a15b 	.word	0x0800a15b

08008cb8 <__sfp>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <__sfp+0x70>)
 8008cbc:	681e      	ldr	r6, [r3, #0]
 8008cbe:	69b3      	ldr	r3, [r6, #24]
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	b913      	cbnz	r3, 8008cca <__sfp+0x12>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff ff71 	bl	8008bac <__sinit>
 8008cca:	36d8      	adds	r6, #216	; 0xd8
 8008ccc:	68b4      	ldr	r4, [r6, #8]
 8008cce:	6873      	ldr	r3, [r6, #4]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	d404      	bmi.n	8008cde <__sfp+0x26>
 8008cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd8:	b175      	cbz	r5, 8008cf8 <__sfp+0x40>
 8008cda:	3468      	adds	r4, #104	; 0x68
 8008cdc:	e7f8      	b.n	8008cd0 <__sfp+0x18>
 8008cde:	6833      	ldr	r3, [r6, #0]
 8008ce0:	b92b      	cbnz	r3, 8008cee <__sfp+0x36>
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	2104      	movs	r1, #4
 8008ce6:	f7ff ff4b 	bl	8008b80 <__sfmoreglue>
 8008cea:	6030      	str	r0, [r6, #0]
 8008cec:	b108      	cbz	r0, 8008cf2 <__sfp+0x3a>
 8008cee:	6836      	ldr	r6, [r6, #0]
 8008cf0:	e7ec      	b.n	8008ccc <__sfp+0x14>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cfc:	81e3      	strh	r3, [r4, #14]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	6665      	str	r5, [r4, #100]	; 0x64
 8008d04:	6025      	str	r5, [r4, #0]
 8008d06:	60a5      	str	r5, [r4, #8]
 8008d08:	6065      	str	r5, [r4, #4]
 8008d0a:	6125      	str	r5, [r4, #16]
 8008d0c:	6165      	str	r5, [r4, #20]
 8008d0e:	61a5      	str	r5, [r4, #24]
 8008d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d14:	4629      	mov	r1, r5
 8008d16:	2208      	movs	r2, #8
 8008d18:	f7fd ff53 	bl	8006bc2 <memset>
 8008d1c:	6365      	str	r5, [r4, #52]	; 0x34
 8008d1e:	63a5      	str	r5, [r4, #56]	; 0x38
 8008d20:	64a5      	str	r5, [r4, #72]	; 0x48
 8008d22:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008d24:	4620      	mov	r0, r4
 8008d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d28:	0800a71c 	.word	0x0800a71c

08008d2c <__sfp_lock_acquire>:
 8008d2c:	4770      	bx	lr

08008d2e <__sfp_lock_release>:
 8008d2e:	4770      	bx	lr

08008d30 <_malloc_trim_r>:
 8008d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	4d24      	ldr	r5, [pc, #144]	; (8008dc8 <_malloc_trim_r+0x98>)
 8008d36:	4f25      	ldr	r7, [pc, #148]	; (8008dcc <_malloc_trim_r+0x9c>)
 8008d38:	460e      	mov	r6, r1
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	f000 fd22 	bl	8009784 <__malloc_lock>
 8008d40:	68ab      	ldr	r3, [r5, #8]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f023 0803 	bic.w	r8, r3, #3
 8008d48:	f1a7 0311 	sub.w	r3, r7, #17
 8008d4c:	4443      	add	r3, r8
 8008d4e:	1b9e      	subs	r6, r3, r6
 8008d50:	fbb6 f6f7 	udiv	r6, r6, r7
 8008d54:	3e01      	subs	r6, #1
 8008d56:	437e      	muls	r6, r7
 8008d58:	42be      	cmp	r6, r7
 8008d5a:	da05      	bge.n	8008d68 <_malloc_trim_r+0x38>
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fd12 	bl	8009786 <__malloc_unlock>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d68:	4620      	mov	r0, r4
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	f001 f9b8 	bl	800a0e0 <_sbrk_r>
 8008d70:	68ab      	ldr	r3, [r5, #8]
 8008d72:	4443      	add	r3, r8
 8008d74:	4298      	cmp	r0, r3
 8008d76:	d1f1      	bne.n	8008d5c <_malloc_trim_r+0x2c>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4271      	negs	r1, r6
 8008d7c:	f001 f9b0 	bl	800a0e0 <_sbrk_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d110      	bne.n	8008da6 <_malloc_trim_r+0x76>
 8008d84:	4620      	mov	r0, r4
 8008d86:	2100      	movs	r1, #0
 8008d88:	f001 f9aa 	bl	800a0e0 <_sbrk_r>
 8008d8c:	68ab      	ldr	r3, [r5, #8]
 8008d8e:	1ac2      	subs	r2, r0, r3
 8008d90:	2a0f      	cmp	r2, #15
 8008d92:	dde3      	ble.n	8008d5c <_malloc_trim_r+0x2c>
 8008d94:	490e      	ldr	r1, [pc, #56]	; (8008dd0 <_malloc_trim_r+0xa0>)
 8008d96:	6809      	ldr	r1, [r1, #0]
 8008d98:	1a40      	subs	r0, r0, r1
 8008d9a:	490e      	ldr	r1, [pc, #56]	; (8008dd4 <_malloc_trim_r+0xa4>)
 8008d9c:	f042 0201 	orr.w	r2, r2, #1
 8008da0:	6008      	str	r0, [r1, #0]
 8008da2:	605a      	str	r2, [r3, #4]
 8008da4:	e7da      	b.n	8008d5c <_malloc_trim_r+0x2c>
 8008da6:	68ab      	ldr	r3, [r5, #8]
 8008da8:	ebc6 0808 	rsb	r8, r6, r8
 8008dac:	f048 0201 	orr.w	r2, r8, #1
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <_malloc_trim_r+0xa4>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4620      	mov	r0, r4
 8008db8:	1b96      	subs	r6, r2, r6
 8008dba:	601e      	str	r6, [r3, #0]
 8008dbc:	f000 fce3 	bl	8009786 <__malloc_unlock>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20010164 	.word	0x20010164
 8008dcc:	00001000 	.word	0x00001000
 8008dd0:	20010570 	.word	0x20010570
 8008dd4:	20014314 	.word	0x20014314

08008dd8 <_free_r>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460d      	mov	r5, r1
 8008dde:	2900      	cmp	r1, #0
 8008de0:	f000 80a9 	beq.w	8008f36 <_free_r+0x15e>
 8008de4:	f000 fcce 	bl	8009784 <__malloc_lock>
 8008de8:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8008dec:	4c52      	ldr	r4, [pc, #328]	; (8008f38 <_free_r+0x160>)
 8008dee:	f1a5 0308 	sub.w	r3, r5, #8
 8008df2:	f02c 0201 	bic.w	r2, ip, #1
 8008df6:	1898      	adds	r0, r3, r2
 8008df8:	68a1      	ldr	r1, [r4, #8]
 8008dfa:	6847      	ldr	r7, [r0, #4]
 8008dfc:	4288      	cmp	r0, r1
 8008dfe:	f027 0703 	bic.w	r7, r7, #3
 8008e02:	f00c 0101 	and.w	r1, ip, #1
 8008e06:	d11b      	bne.n	8008e40 <_free_r+0x68>
 8008e08:	443a      	add	r2, r7
 8008e0a:	b939      	cbnz	r1, 8008e1c <_free_r+0x44>
 8008e0c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8008e10:	1a5b      	subs	r3, r3, r1
 8008e12:	440a      	add	r2, r1
 8008e14:	6898      	ldr	r0, [r3, #8]
 8008e16:	68d9      	ldr	r1, [r3, #12]
 8008e18:	60c1      	str	r1, [r0, #12]
 8008e1a:	6088      	str	r0, [r1, #8]
 8008e1c:	f042 0101 	orr.w	r1, r2, #1
 8008e20:	6059      	str	r1, [r3, #4]
 8008e22:	60a3      	str	r3, [r4, #8]
 8008e24:	4b45      	ldr	r3, [pc, #276]	; (8008f3c <_free_r+0x164>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d304      	bcc.n	8008e36 <_free_r+0x5e>
 8008e2c:	4b44      	ldr	r3, [pc, #272]	; (8008f40 <_free_r+0x168>)
 8008e2e:	4630      	mov	r0, r6
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	f7ff ff7d 	bl	8008d30 <_malloc_trim_r>
 8008e36:	4630      	mov	r0, r6
 8008e38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e3c:	f000 bca3 	b.w	8009786 <__malloc_unlock>
 8008e40:	6047      	str	r7, [r0, #4]
 8008e42:	b979      	cbnz	r1, 8008e64 <_free_r+0x8c>
 8008e44:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8008e48:	1b5b      	subs	r3, r3, r5
 8008e4a:	442a      	add	r2, r5
 8008e4c:	689d      	ldr	r5, [r3, #8]
 8008e4e:	f104 0c08 	add.w	ip, r4, #8
 8008e52:	4565      	cmp	r5, ip
 8008e54:	d008      	beq.n	8008e68 <_free_r+0x90>
 8008e56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008e5a:	f8c5 c00c 	str.w	ip, [r5, #12]
 8008e5e:	f8cc 5008 	str.w	r5, [ip, #8]
 8008e62:	e002      	b.n	8008e6a <_free_r+0x92>
 8008e64:	2100      	movs	r1, #0
 8008e66:	e000      	b.n	8008e6a <_free_r+0x92>
 8008e68:	2101      	movs	r1, #1
 8008e6a:	19c5      	adds	r5, r0, r7
 8008e6c:	686d      	ldr	r5, [r5, #4]
 8008e6e:	07ed      	lsls	r5, r5, #31
 8008e70:	d40e      	bmi.n	8008e90 <_free_r+0xb8>
 8008e72:	443a      	add	r2, r7
 8008e74:	6885      	ldr	r5, [r0, #8]
 8008e76:	b941      	cbnz	r1, 8008e8a <_free_r+0xb2>
 8008e78:	4f32      	ldr	r7, [pc, #200]	; (8008f44 <_free_r+0x16c>)
 8008e7a:	42bd      	cmp	r5, r7
 8008e7c:	d105      	bne.n	8008e8a <_free_r+0xb2>
 8008e7e:	6163      	str	r3, [r4, #20]
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	2101      	movs	r1, #1
 8008e84:	60dd      	str	r5, [r3, #12]
 8008e86:	609d      	str	r5, [r3, #8]
 8008e88:	e002      	b.n	8008e90 <_free_r+0xb8>
 8008e8a:	68c0      	ldr	r0, [r0, #12]
 8008e8c:	60e8      	str	r0, [r5, #12]
 8008e8e:	6085      	str	r5, [r0, #8]
 8008e90:	f042 0001 	orr.w	r0, r2, #1
 8008e94:	6058      	str	r0, [r3, #4]
 8008e96:	509a      	str	r2, [r3, r2]
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	d1cc      	bne.n	8008e36 <_free_r+0x5e>
 8008e9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008ea0:	d20e      	bcs.n	8008ec0 <_free_r+0xe8>
 8008ea2:	08d2      	lsrs	r2, r2, #3
 8008ea4:	1091      	asrs	r1, r2, #2
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	4088      	lsls	r0, r1
 8008eaa:	6861      	ldr	r1, [r4, #4]
 8008eac:	4301      	orrs	r1, r0
 8008eae:	6061      	str	r1, [r4, #4]
 8008eb0:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8008eb4:	68a2      	ldr	r2, [r4, #8]
 8008eb6:	609a      	str	r2, [r3, #8]
 8008eb8:	60dc      	str	r4, [r3, #12]
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	60d3      	str	r3, [r2, #12]
 8008ebe:	e7ba      	b.n	8008e36 <_free_r+0x5e>
 8008ec0:	0a51      	lsrs	r1, r2, #9
 8008ec2:	2904      	cmp	r1, #4
 8008ec4:	d802      	bhi.n	8008ecc <_free_r+0xf4>
 8008ec6:	0991      	lsrs	r1, r2, #6
 8008ec8:	3138      	adds	r1, #56	; 0x38
 8008eca:	e015      	b.n	8008ef8 <_free_r+0x120>
 8008ecc:	2914      	cmp	r1, #20
 8008ece:	d801      	bhi.n	8008ed4 <_free_r+0xfc>
 8008ed0:	315b      	adds	r1, #91	; 0x5b
 8008ed2:	e011      	b.n	8008ef8 <_free_r+0x120>
 8008ed4:	2954      	cmp	r1, #84	; 0x54
 8008ed6:	d802      	bhi.n	8008ede <_free_r+0x106>
 8008ed8:	0b11      	lsrs	r1, r2, #12
 8008eda:	316e      	adds	r1, #110	; 0x6e
 8008edc:	e00c      	b.n	8008ef8 <_free_r+0x120>
 8008ede:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 8008ee2:	d802      	bhi.n	8008eea <_free_r+0x112>
 8008ee4:	0bd1      	lsrs	r1, r2, #15
 8008ee6:	3177      	adds	r1, #119	; 0x77
 8008ee8:	e006      	b.n	8008ef8 <_free_r+0x120>
 8008eea:	f240 5054 	movw	r0, #1364	; 0x554
 8008eee:	4281      	cmp	r1, r0
 8008ef0:	bf9a      	itte	ls
 8008ef2:	0c91      	lsrls	r1, r2, #18
 8008ef4:	317c      	addls	r1, #124	; 0x7c
 8008ef6:	217e      	movhi	r1, #126	; 0x7e
 8008ef8:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 8008efc:	480e      	ldr	r0, [pc, #56]	; (8008f38 <_free_r+0x160>)
 8008efe:	68a5      	ldr	r5, [r4, #8]
 8008f00:	42a5      	cmp	r5, r4
 8008f02:	d001      	beq.n	8008f08 <_free_r+0x130>
 8008f04:	4629      	mov	r1, r5
 8008f06:	e00b      	b.n	8008f20 <_free_r+0x148>
 8008f08:	2201      	movs	r2, #1
 8008f0a:	1089      	asrs	r1, r1, #2
 8008f0c:	fa02 f101 	lsl.w	r1, r2, r1
 8008f10:	6842      	ldr	r2, [r0, #4]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	6042      	str	r2, [r0, #4]
 8008f16:	4629      	mov	r1, r5
 8008f18:	e008      	b.n	8008f2c <_free_r+0x154>
 8008f1a:	6889      	ldr	r1, [r1, #8]
 8008f1c:	42a1      	cmp	r1, r4
 8008f1e:	d004      	beq.n	8008f2a <_free_r+0x152>
 8008f20:	6848      	ldr	r0, [r1, #4]
 8008f22:	f020 0003 	bic.w	r0, r0, #3
 8008f26:	4282      	cmp	r2, r0
 8008f28:	d3f7      	bcc.n	8008f1a <_free_r+0x142>
 8008f2a:	68cd      	ldr	r5, [r1, #12]
 8008f2c:	60dd      	str	r5, [r3, #12]
 8008f2e:	6099      	str	r1, [r3, #8]
 8008f30:	60ab      	str	r3, [r5, #8]
 8008f32:	60cb      	str	r3, [r1, #12]
 8008f34:	e77f      	b.n	8008e36 <_free_r+0x5e>
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f38:	20010164 	.word	0x20010164
 8008f3c:	2001056c 	.word	0x2001056c
 8008f40:	20014310 	.word	0x20014310
 8008f44:	2001016c 	.word	0x2001016c

08008f48 <__sfvwrite_r>:
 8008f48:	6893      	ldr	r3, [r2, #8]
 8008f4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4e:	4680      	mov	r8, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4691      	mov	r9, r2
 8008f54:	b90b      	cbnz	r3, 8008f5a <__sfvwrite_r+0x12>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e13c      	b.n	80091d4 <__sfvwrite_r+0x28c>
 8008f5a:	898b      	ldrh	r3, [r1, #12]
 8008f5c:	0718      	lsls	r0, r3, #28
 8008f5e:	d50e      	bpl.n	8008f7e <__sfvwrite_r+0x36>
 8008f60:	690b      	ldr	r3, [r1, #16]
 8008f62:	b163      	cbz	r3, 8008f7e <__sfvwrite_r+0x36>
 8008f64:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8008f68:	f8d9 6000 	ldr.w	r6, [r9]
 8008f6c:	f00a 0c02 	and.w	ip, sl, #2
 8008f70:	fa1f f38c 	uxth.w	r3, ip
 8008f74:	b333      	cbz	r3, 8008fc4 <__sfvwrite_r+0x7c>
 8008f76:	f04f 0a00 	mov.w	sl, #0
 8008f7a:	4657      	mov	r7, sl
 8008f7c:	e01b      	b.n	8008fb6 <__sfvwrite_r+0x6e>
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4621      	mov	r1, r4
 8008f82:	f7fe fe8b 	bl	8007c9c <__swsetup_r>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0ec      	beq.n	8008f64 <__sfvwrite_r+0x1c>
 8008f8a:	e121      	b.n	80091d0 <__sfvwrite_r+0x288>
 8008f8c:	4b93      	ldr	r3, [pc, #588]	; (80091dc <__sfvwrite_r+0x294>)
 8008f8e:	6a21      	ldr	r1, [r4, #32]
 8008f90:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008f92:	429f      	cmp	r7, r3
 8008f94:	bf38      	it	cc
 8008f96:	463b      	movcc	r3, r7
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4652      	mov	r2, sl
 8008f9c:	47a8      	blx	r5
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f340 8112 	ble.w	80091c8 <__sfvwrite_r+0x280>
 8008fa4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008fa8:	4482      	add	sl, r0
 8008faa:	1a3f      	subs	r7, r7, r0
 8008fac:	1a18      	subs	r0, r3, r0
 8008fae:	f8c9 0008 	str.w	r0, [r9, #8]
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0cf      	beq.n	8008f56 <__sfvwrite_r+0xe>
 8008fb6:	2f00      	cmp	r7, #0
 8008fb8:	d1e8      	bne.n	8008f8c <__sfvwrite_r+0x44>
 8008fba:	f8d6 a000 	ldr.w	sl, [r6]
 8008fbe:	6877      	ldr	r7, [r6, #4]
 8008fc0:	3608      	adds	r6, #8
 8008fc2:	e7f8      	b.n	8008fb6 <__sfvwrite_r+0x6e>
 8008fc4:	f01a 0a01 	ands.w	sl, sl, #1
 8008fc8:	d004      	beq.n	8008fd4 <__sfvwrite_r+0x8c>
 8008fca:	469b      	mov	fp, r3
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	461f      	mov	r7, r3
 8008fd0:	469a      	mov	sl, r3
 8008fd2:	e0bf      	b.n	8009154 <__sfvwrite_r+0x20c>
 8008fd4:	4655      	mov	r5, sl
 8008fd6:	b925      	cbnz	r5, 8008fe2 <__sfvwrite_r+0x9a>
 8008fd8:	f8d6 a000 	ldr.w	sl, [r6]
 8008fdc:	6875      	ldr	r5, [r6, #4]
 8008fde:	3608      	adds	r6, #8
 8008fe0:	e7f9      	b.n	8008fd6 <__sfvwrite_r+0x8e>
 8008fe2:	89a2      	ldrh	r2, [r4, #12]
 8008fe4:	68a7      	ldr	r7, [r4, #8]
 8008fe6:	0591      	lsls	r1, r2, #22
 8008fe8:	d552      	bpl.n	8009090 <__sfvwrite_r+0x148>
 8008fea:	42bd      	cmp	r5, r7
 8008fec:	d342      	bcc.n	8009074 <__sfvwrite_r+0x12c>
 8008fee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ff2:	d03d      	beq.n	8009070 <__sfvwrite_r+0x128>
 8008ff4:	6921      	ldr	r1, [r4, #16]
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	1a5b      	subs	r3, r3, r1
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	6963      	ldr	r3, [r4, #20]
 8008ffe:	2002      	movs	r0, #2
 8009000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009004:	fb93 fbf0 	sdiv	fp, r3, r0
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	1c58      	adds	r0, r3, #1
 800900c:	4428      	add	r0, r5
 800900e:	4583      	cmp	fp, r0
 8009010:	bf38      	it	cc
 8009012:	4683      	movcc	fp, r0
 8009014:	0553      	lsls	r3, r2, #21
 8009016:	4640      	mov	r0, r8
 8009018:	d50f      	bpl.n	800903a <__sfvwrite_r+0xf2>
 800901a:	4659      	mov	r1, fp
 800901c:	f000 f976 	bl	800930c <_malloc_r>
 8009020:	4607      	mov	r7, r0
 8009022:	b1b8      	cbz	r0, 8009054 <__sfvwrite_r+0x10c>
 8009024:	9a01      	ldr	r2, [sp, #4]
 8009026:	6921      	ldr	r1, [r4, #16]
 8009028:	f7fd fdc2 	bl	8006bb0 <memcpy>
 800902c:	89a2      	ldrh	r2, [r4, #12]
 800902e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009032:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009036:	81a2      	strh	r2, [r4, #12]
 8009038:	e010      	b.n	800905c <__sfvwrite_r+0x114>
 800903a:	465a      	mov	r2, fp
 800903c:	f000 fe84 	bl	8009d48 <_realloc_r>
 8009040:	4607      	mov	r7, r0
 8009042:	b958      	cbnz	r0, 800905c <__sfvwrite_r+0x114>
 8009044:	4640      	mov	r0, r8
 8009046:	6921      	ldr	r1, [r4, #16]
 8009048:	f7ff fec6 	bl	8008dd8 <_free_r>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	230c      	movs	r3, #12
 8009056:	f8c8 3000 	str.w	r3, [r8]
 800905a:	e0b5      	b.n	80091c8 <__sfvwrite_r+0x280>
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	6127      	str	r7, [r4, #16]
 8009060:	441f      	add	r7, r3
 8009062:	ebc3 030b 	rsb	r3, r3, fp
 8009066:	6027      	str	r7, [r4, #0]
 8009068:	f8c4 b014 	str.w	fp, [r4, #20]
 800906c:	462f      	mov	r7, r5
 800906e:	60a3      	str	r3, [r4, #8]
 8009070:	42bd      	cmp	r5, r7
 8009072:	d200      	bcs.n	8009076 <__sfvwrite_r+0x12e>
 8009074:	462f      	mov	r7, r5
 8009076:	463a      	mov	r2, r7
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	4651      	mov	r1, sl
 800907c:	f000 fb67 	bl	800974e <memmove>
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	1bdb      	subs	r3, r3, r7
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	441f      	add	r7, r3
 800908a:	6027      	str	r7, [r4, #0]
 800908c:	462f      	mov	r7, r5
 800908e:	e02a      	b.n	80090e6 <__sfvwrite_r+0x19e>
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	4298      	cmp	r0, r3
 8009096:	d802      	bhi.n	800909e <__sfvwrite_r+0x156>
 8009098:	6963      	ldr	r3, [r4, #20]
 800909a:	429d      	cmp	r5, r3
 800909c:	d213      	bcs.n	80090c6 <__sfvwrite_r+0x17e>
 800909e:	42bd      	cmp	r5, r7
 80090a0:	bf38      	it	cc
 80090a2:	462f      	movcc	r7, r5
 80090a4:	463a      	mov	r2, r7
 80090a6:	4651      	mov	r1, sl
 80090a8:	f000 fb51 	bl	800974e <memmove>
 80090ac:	68a3      	ldr	r3, [r4, #8]
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	1bdb      	subs	r3, r3, r7
 80090b2:	443a      	add	r2, r7
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	6022      	str	r2, [r4, #0]
 80090b8:	b9ab      	cbnz	r3, 80090e6 <__sfvwrite_r+0x19e>
 80090ba:	4640      	mov	r0, r8
 80090bc:	4621      	mov	r1, r4
 80090be:	f7ff fd2f 	bl	8008b20 <_fflush_r>
 80090c2:	b180      	cbz	r0, 80090e6 <__sfvwrite_r+0x19e>
 80090c4:	e080      	b.n	80091c8 <__sfvwrite_r+0x280>
 80090c6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80090ca:	4575      	cmp	r5, lr
 80090cc:	bf38      	it	cc
 80090ce:	46ae      	movcc	lr, r5
 80090d0:	fb9e fef3 	sdiv	lr, lr, r3
 80090d4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80090d6:	6a21      	ldr	r1, [r4, #32]
 80090d8:	4640      	mov	r0, r8
 80090da:	4652      	mov	r2, sl
 80090dc:	fb03 f30e 	mul.w	r3, r3, lr
 80090e0:	47b8      	blx	r7
 80090e2:	1e07      	subs	r7, r0, #0
 80090e4:	dd70      	ble.n	80091c8 <__sfvwrite_r+0x280>
 80090e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80090ea:	44ba      	add	sl, r7
 80090ec:	1bed      	subs	r5, r5, r7
 80090ee:	1bdf      	subs	r7, r3, r7
 80090f0:	f8c9 7008 	str.w	r7, [r9, #8]
 80090f4:	2f00      	cmp	r7, #0
 80090f6:	f47f af6e 	bne.w	8008fd6 <__sfvwrite_r+0x8e>
 80090fa:	e72c      	b.n	8008f56 <__sfvwrite_r+0xe>
 80090fc:	9d01      	ldr	r5, [sp, #4]
 80090fe:	2d00      	cmp	r5, #0
 8009100:	d031      	beq.n	8009166 <__sfvwrite_r+0x21e>
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	68a5      	ldr	r5, [r4, #8]
 8009108:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800910c:	45d3      	cmp	fp, sl
 800910e:	bf34      	ite	cc
 8009110:	465b      	movcc	r3, fp
 8009112:	4653      	movcs	r3, sl
 8009114:	4290      	cmp	r0, r2
 8009116:	d936      	bls.n	8009186 <__sfvwrite_r+0x23e>
 8009118:	4475      	add	r5, lr
 800911a:	42ab      	cmp	r3, r5
 800911c:	dd33      	ble.n	8009186 <__sfvwrite_r+0x23e>
 800911e:	4639      	mov	r1, r7
 8009120:	462a      	mov	r2, r5
 8009122:	f000 fb14 	bl	800974e <memmove>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	442b      	add	r3, r5
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	4640      	mov	r0, r8
 800912e:	4621      	mov	r1, r4
 8009130:	f7ff fcf6 	bl	8008b20 <_fflush_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	d147      	bne.n	80091c8 <__sfvwrite_r+0x280>
 8009138:	ebbb 0b05 	subs.w	fp, fp, r5
 800913c:	d03c      	beq.n	80091b8 <__sfvwrite_r+0x270>
 800913e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009142:	442f      	add	r7, r5
 8009144:	ebc5 0a0a 	rsb	sl, r5, sl
 8009148:	1b5d      	subs	r5, r3, r5
 800914a:	f8c9 5008 	str.w	r5, [r9, #8]
 800914e:	2d00      	cmp	r5, #0
 8009150:	f43f af01 	beq.w	8008f56 <__sfvwrite_r+0xe>
 8009154:	f1ba 0f00 	cmp.w	sl, #0
 8009158:	d1d0      	bne.n	80090fc <__sfvwrite_r+0x1b4>
 800915a:	2500      	movs	r5, #0
 800915c:	e896 0480 	ldmia.w	r6, {r7, sl}
 8009160:	9501      	str	r5, [sp, #4]
 8009162:	3608      	adds	r6, #8
 8009164:	e7f6      	b.n	8009154 <__sfvwrite_r+0x20c>
 8009166:	4638      	mov	r0, r7
 8009168:	210a      	movs	r1, #10
 800916a:	4652      	mov	r2, sl
 800916c:	f000 fae0 	bl	8009730 <memchr>
 8009170:	b120      	cbz	r0, 800917c <__sfvwrite_r+0x234>
 8009172:	f100 0c01 	add.w	ip, r0, #1
 8009176:	ebc7 0b0c 	rsb	fp, r7, ip
 800917a:	e001      	b.n	8009180 <__sfvwrite_r+0x238>
 800917c:	f10a 0b01 	add.w	fp, sl, #1
 8009180:	2501      	movs	r5, #1
 8009182:	9501      	str	r5, [sp, #4]
 8009184:	e7bd      	b.n	8009102 <__sfvwrite_r+0x1ba>
 8009186:	4573      	cmp	r3, lr
 8009188:	db08      	blt.n	800919c <__sfvwrite_r+0x254>
 800918a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	4640      	mov	r0, r8
 8009190:	463a      	mov	r2, r7
 8009192:	4673      	mov	r3, lr
 8009194:	47a8      	blx	r5
 8009196:	1e05      	subs	r5, r0, #0
 8009198:	dcce      	bgt.n	8009138 <__sfvwrite_r+0x1f0>
 800919a:	e015      	b.n	80091c8 <__sfvwrite_r+0x280>
 800919c:	461a      	mov	r2, r3
 800919e:	4639      	mov	r1, r7
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	f000 fad4 	bl	800974e <memmove>
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	68a2      	ldr	r2, [r4, #8]
 80091aa:	1ad2      	subs	r2, r2, r3
 80091ac:	60a2      	str	r2, [r4, #8]
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	441a      	add	r2, r3
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	461d      	mov	r5, r3
 80091b6:	e7bf      	b.n	8009138 <__sfvwrite_r+0x1f0>
 80091b8:	4640      	mov	r0, r8
 80091ba:	4621      	mov	r1, r4
 80091bc:	f7ff fcb0 	bl	8008b20 <_fflush_r>
 80091c0:	b910      	cbnz	r0, 80091c8 <__sfvwrite_r+0x280>
 80091c2:	f8cd b004 	str.w	fp, [sp, #4]
 80091c6:	e7ba      	b.n	800913e <__sfvwrite_r+0x1f6>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	b003      	add	sp, #12
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	bf00      	nop
 80091dc:	7ffffc00 	.word	0x7ffffc00

080091e0 <_fwalk>:
 80091e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e4:	4688      	mov	r8, r1
 80091e6:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80091ea:	2600      	movs	r6, #0
 80091ec:	b18c      	cbz	r4, 8009212 <_fwalk+0x32>
 80091ee:	68a5      	ldr	r5, [r4, #8]
 80091f0:	6867      	ldr	r7, [r4, #4]
 80091f2:	3f01      	subs	r7, #1
 80091f4:	d40b      	bmi.n	800920e <_fwalk+0x2e>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d906      	bls.n	800920a <_fwalk+0x2a>
 80091fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009200:	3301      	adds	r3, #1
 8009202:	d002      	beq.n	800920a <_fwalk+0x2a>
 8009204:	4628      	mov	r0, r5
 8009206:	47c0      	blx	r8
 8009208:	4306      	orrs	r6, r0
 800920a:	3568      	adds	r5, #104	; 0x68
 800920c:	e7f1      	b.n	80091f2 <_fwalk+0x12>
 800920e:	6824      	ldr	r4, [r4, #0]
 8009210:	e7ec      	b.n	80091ec <_fwalk+0xc>
 8009212:	4630      	mov	r0, r6
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009218 <__locale_charset>:
 8009218:	4800      	ldr	r0, [pc, #0]	; (800921c <__locale_charset+0x4>)
 800921a:	4770      	bx	lr
 800921c:	20010140 	.word	0x20010140

08009220 <__locale_mb_cur_max>:
 8009220:	4b01      	ldr	r3, [pc, #4]	; (8009228 <__locale_mb_cur_max+0x8>)
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20010160 	.word	0x20010160

0800922c <_localeconv_r>:
 800922c:	4800      	ldr	r0, [pc, #0]	; (8009230 <_localeconv_r+0x4>)
 800922e:	4770      	bx	lr
 8009230:	20010108 	.word	0x20010108

08009234 <__smakebuf_r>:
 8009234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009236:	898b      	ldrh	r3, [r1, #12]
 8009238:	079d      	lsls	r5, r3, #30
 800923a:	b091      	sub	sp, #68	; 0x44
 800923c:	4606      	mov	r6, r0
 800923e:	460c      	mov	r4, r1
 8009240:	d43a      	bmi.n	80092b8 <__smakebuf_r+0x84>
 8009242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009246:	2900      	cmp	r1, #0
 8009248:	da0b      	bge.n	8009262 <__smakebuf_r+0x2e>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009254:	bf0c      	ite	eq
 8009256:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 800925a:	2540      	movne	r5, #64	; 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	2700      	movs	r7, #0
 8009260:	e01f      	b.n	80092a2 <__smakebuf_r+0x6e>
 8009262:	aa01      	add	r2, sp, #4
 8009264:	f001 f8c4 	bl	800a3f0 <_fstat_r>
 8009268:	2800      	cmp	r0, #0
 800926a:	dbee      	blt.n	800924a <__smakebuf_r+0x16>
 800926c:	9b02      	ldr	r3, [sp, #8]
 800926e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009272:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8009276:	424f      	negs	r7, r1
 8009278:	414f      	adcs	r7, r1
 800927a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	d10a      	bne.n	8009298 <__smakebuf_r+0x64>
 8009282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009284:	491b      	ldr	r1, [pc, #108]	; (80092f4 <__smakebuf_r+0xc0>)
 8009286:	428a      	cmp	r2, r1
 8009288:	d106      	bne.n	8009298 <__smakebuf_r+0x64>
 800928a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800928e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	6525      	str	r5, [r4, #80]	; 0x50
 8009296:	e004      	b.n	80092a2 <__smakebuf_r+0x6e>
 8009298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80092a2:	4630      	mov	r0, r6
 80092a4:	4629      	mov	r1, r5
 80092a6:	f000 f831 	bl	800930c <_malloc_r>
 80092aa:	b960      	cbnz	r0, 80092c6 <__smakebuf_r+0x92>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	059a      	lsls	r2, r3, #22
 80092b0:	d41d      	bmi.n	80092ee <__smakebuf_r+0xba>
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	2301      	movs	r3, #1
 80092c2:	6163      	str	r3, [r4, #20]
 80092c4:	e013      	b.n	80092ee <__smakebuf_r+0xba>
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <__smakebuf_r+0xc4>)
 80092c8:	62b3      	str	r3, [r6, #40]	; 0x28
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	6020      	str	r0, [r4, #0]
 80092ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d2:	81a3      	strh	r3, [r4, #12]
 80092d4:	6120      	str	r0, [r4, #16]
 80092d6:	6165      	str	r5, [r4, #20]
 80092d8:	b14f      	cbz	r7, 80092ee <__smakebuf_r+0xba>
 80092da:	4630      	mov	r0, r6
 80092dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e0:	f001 f898 	bl	800a414 <_isatty_r>
 80092e4:	b118      	cbz	r0, 80092ee <__smakebuf_r+0xba>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f043 0301 	orr.w	r3, r3, #1
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	b011      	add	sp, #68	; 0x44
 80092f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f2:	bf00      	nop
 80092f4:	0800a15b 	.word	0x0800a15b
 80092f8:	08008b75 	.word	0x08008b75

080092fc <malloc>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <malloc+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f000 b803 	b.w	800930c <_malloc_r>
 8009306:	bf00      	nop
 8009308:	20010104 	.word	0x20010104

0800930c <_malloc_r>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	f101 040b 	add.w	r4, r1, #11
 8009314:	2c16      	cmp	r4, #22
 8009316:	b085      	sub	sp, #20
 8009318:	4607      	mov	r7, r0
 800931a:	d903      	bls.n	8009324 <_malloc_r+0x18>
 800931c:	f034 0407 	bics.w	r4, r4, #7
 8009320:	d501      	bpl.n	8009326 <_malloc_r+0x1a>
 8009322:	e002      	b.n	800932a <_malloc_r+0x1e>
 8009324:	2410      	movs	r4, #16
 8009326:	428c      	cmp	r4, r1
 8009328:	d202      	bcs.n	8009330 <_malloc_r+0x24>
 800932a:	230c      	movs	r3, #12
 800932c:	603b      	str	r3, [r7, #0]
 800932e:	e1dd      	b.n	80096ec <_malloc_r+0x3e0>
 8009330:	4638      	mov	r0, r7
 8009332:	f000 fa27 	bl	8009784 <__malloc_lock>
 8009336:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800933a:	4d97      	ldr	r5, [pc, #604]	; (8009598 <_malloc_r+0x28c>)
 800933c:	d214      	bcs.n	8009368 <_malloc_r+0x5c>
 800933e:	08e2      	lsrs	r2, r4, #3
 8009340:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8009344:	68de      	ldr	r6, [r3, #12]
 8009346:	429e      	cmp	r6, r3
 8009348:	d106      	bne.n	8009358 <_malloc_r+0x4c>
 800934a:	f106 0308 	add.w	r3, r6, #8
 800934e:	6976      	ldr	r6, [r6, #20]
 8009350:	429e      	cmp	r6, r3
 8009352:	bf08      	it	eq
 8009354:	3202      	addeq	r2, #2
 8009356:	d043      	beq.n	80093e0 <_malloc_r+0xd4>
 8009358:	6873      	ldr	r3, [r6, #4]
 800935a:	68f2      	ldr	r2, [r6, #12]
 800935c:	68b1      	ldr	r1, [r6, #8]
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	60ca      	str	r2, [r1, #12]
 8009364:	6091      	str	r1, [r2, #8]
 8009366:	e05d      	b.n	8009424 <_malloc_r+0x118>
 8009368:	0a62      	lsrs	r2, r4, #9
 800936a:	d01a      	beq.n	80093a2 <_malloc_r+0x96>
 800936c:	2a04      	cmp	r2, #4
 800936e:	d802      	bhi.n	8009376 <_malloc_r+0x6a>
 8009370:	09a2      	lsrs	r2, r4, #6
 8009372:	3238      	adds	r2, #56	; 0x38
 8009374:	e018      	b.n	80093a8 <_malloc_r+0x9c>
 8009376:	2a14      	cmp	r2, #20
 8009378:	d801      	bhi.n	800937e <_malloc_r+0x72>
 800937a:	325b      	adds	r2, #91	; 0x5b
 800937c:	e014      	b.n	80093a8 <_malloc_r+0x9c>
 800937e:	2a54      	cmp	r2, #84	; 0x54
 8009380:	d802      	bhi.n	8009388 <_malloc_r+0x7c>
 8009382:	0b22      	lsrs	r2, r4, #12
 8009384:	326e      	adds	r2, #110	; 0x6e
 8009386:	e00f      	b.n	80093a8 <_malloc_r+0x9c>
 8009388:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800938c:	d802      	bhi.n	8009394 <_malloc_r+0x88>
 800938e:	0be2      	lsrs	r2, r4, #15
 8009390:	3277      	adds	r2, #119	; 0x77
 8009392:	e009      	b.n	80093a8 <_malloc_r+0x9c>
 8009394:	f240 5354 	movw	r3, #1364	; 0x554
 8009398:	429a      	cmp	r2, r3
 800939a:	d804      	bhi.n	80093a6 <_malloc_r+0x9a>
 800939c:	0ca2      	lsrs	r2, r4, #18
 800939e:	327c      	adds	r2, #124	; 0x7c
 80093a0:	e002      	b.n	80093a8 <_malloc_r+0x9c>
 80093a2:	223f      	movs	r2, #63	; 0x3f
 80093a4:	e000      	b.n	80093a8 <_malloc_r+0x9c>
 80093a6:	227e      	movs	r2, #126	; 0x7e
 80093a8:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 80093ac:	68de      	ldr	r6, [r3, #12]
 80093ae:	429e      	cmp	r6, r3
 80093b0:	d015      	beq.n	80093de <_malloc_r+0xd2>
 80093b2:	6871      	ldr	r1, [r6, #4]
 80093b4:	f021 0103 	bic.w	r1, r1, #3
 80093b8:	1b08      	subs	r0, r1, r4
 80093ba:	280f      	cmp	r0, #15
 80093bc:	dd01      	ble.n	80093c2 <_malloc_r+0xb6>
 80093be:	3a01      	subs	r2, #1
 80093c0:	e00d      	b.n	80093de <_malloc_r+0xd2>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	db09      	blt.n	80093da <_malloc_r+0xce>
 80093c6:	68f3      	ldr	r3, [r6, #12]
 80093c8:	68b2      	ldr	r2, [r6, #8]
 80093ca:	60d3      	str	r3, [r2, #12]
 80093cc:	609a      	str	r2, [r3, #8]
 80093ce:	1873      	adds	r3, r6, r1
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	f042 0201 	orr.w	r2, r2, #1
 80093d6:	605a      	str	r2, [r3, #4]
 80093d8:	e193      	b.n	8009702 <_malloc_r+0x3f6>
 80093da:	68f6      	ldr	r6, [r6, #12]
 80093dc:	e7e7      	b.n	80093ae <_malloc_r+0xa2>
 80093de:	3201      	adds	r2, #1
 80093e0:	496d      	ldr	r1, [pc, #436]	; (8009598 <_malloc_r+0x28c>)
 80093e2:	692e      	ldr	r6, [r5, #16]
 80093e4:	f101 0008 	add.w	r0, r1, #8
 80093e8:	4286      	cmp	r6, r0
 80093ea:	4686      	mov	lr, r0
 80093ec:	d06d      	beq.n	80094ca <_malloc_r+0x1be>
 80093ee:	6873      	ldr	r3, [r6, #4]
 80093f0:	f023 0303 	bic.w	r3, r3, #3
 80093f4:	ebc4 0c03 	rsb	ip, r4, r3
 80093f8:	f1bc 0f0f 	cmp.w	ip, #15
 80093fc:	dd0d      	ble.n	800941a <_malloc_r+0x10e>
 80093fe:	1933      	adds	r3, r6, r4
 8009400:	f04c 0201 	orr.w	r2, ip, #1
 8009404:	f044 0401 	orr.w	r4, r4, #1
 8009408:	6074      	str	r4, [r6, #4]
 800940a:	614b      	str	r3, [r1, #20]
 800940c:	610b      	str	r3, [r1, #16]
 800940e:	60d8      	str	r0, [r3, #12]
 8009410:	6098      	str	r0, [r3, #8]
 8009412:	605a      	str	r2, [r3, #4]
 8009414:	f843 c00c 	str.w	ip, [r3, ip]
 8009418:	e173      	b.n	8009702 <_malloc_r+0x3f6>
 800941a:	f1bc 0f00 	cmp.w	ip, #0
 800941e:	6148      	str	r0, [r1, #20]
 8009420:	6108      	str	r0, [r1, #16]
 8009422:	db01      	blt.n	8009428 <_malloc_r+0x11c>
 8009424:	4433      	add	r3, r6
 8009426:	e7d3      	b.n	80093d0 <_malloc_r+0xc4>
 8009428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800942c:	d211      	bcs.n	8009452 <_malloc_r+0x146>
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	1098      	asrs	r0, r3, #2
 8009432:	f04f 0c01 	mov.w	ip, #1
 8009436:	fa0c fc00 	lsl.w	ip, ip, r0
 800943a:	6848      	ldr	r0, [r1, #4]
 800943c:	ea4c 0000 	orr.w	r0, ip, r0
 8009440:	6048      	str	r0, [r1, #4]
 8009442:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009446:	688b      	ldr	r3, [r1, #8]
 8009448:	60b3      	str	r3, [r6, #8]
 800944a:	60f1      	str	r1, [r6, #12]
 800944c:	608e      	str	r6, [r1, #8]
 800944e:	60de      	str	r6, [r3, #12]
 8009450:	e03b      	b.n	80094ca <_malloc_r+0x1be>
 8009452:	0a58      	lsrs	r0, r3, #9
 8009454:	2804      	cmp	r0, #4
 8009456:	d802      	bhi.n	800945e <_malloc_r+0x152>
 8009458:	0998      	lsrs	r0, r3, #6
 800945a:	3038      	adds	r0, #56	; 0x38
 800945c:	e015      	b.n	800948a <_malloc_r+0x17e>
 800945e:	2814      	cmp	r0, #20
 8009460:	d801      	bhi.n	8009466 <_malloc_r+0x15a>
 8009462:	305b      	adds	r0, #91	; 0x5b
 8009464:	e011      	b.n	800948a <_malloc_r+0x17e>
 8009466:	2854      	cmp	r0, #84	; 0x54
 8009468:	d802      	bhi.n	8009470 <_malloc_r+0x164>
 800946a:	0b18      	lsrs	r0, r3, #12
 800946c:	306e      	adds	r0, #110	; 0x6e
 800946e:	e00c      	b.n	800948a <_malloc_r+0x17e>
 8009470:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8009474:	d802      	bhi.n	800947c <_malloc_r+0x170>
 8009476:	0bd8      	lsrs	r0, r3, #15
 8009478:	3077      	adds	r0, #119	; 0x77
 800947a:	e006      	b.n	800948a <_malloc_r+0x17e>
 800947c:	f240 5154 	movw	r1, #1364	; 0x554
 8009480:	4288      	cmp	r0, r1
 8009482:	bf9a      	itte	ls
 8009484:	0c98      	lsrls	r0, r3, #18
 8009486:	307c      	addls	r0, #124	; 0x7c
 8009488:	207e      	movhi	r0, #126	; 0x7e
 800948a:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 800948e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009598 <_malloc_r+0x28c>
 8009492:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009496:	4561      	cmp	r1, ip
 8009498:	d10d      	bne.n	80094b6 <_malloc_r+0x1aa>
 800949a:	2301      	movs	r3, #1
 800949c:	1080      	asrs	r0, r0, #2
 800949e:	fa03 f000 	lsl.w	r0, r3, r0
 80094a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094a6:	4303      	orrs	r3, r0
 80094a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	e008      	b.n	80094c2 <_malloc_r+0x1b6>
 80094b0:	6889      	ldr	r1, [r1, #8]
 80094b2:	4561      	cmp	r1, ip
 80094b4:	d004      	beq.n	80094c0 <_malloc_r+0x1b4>
 80094b6:	6848      	ldr	r0, [r1, #4]
 80094b8:	f020 0003 	bic.w	r0, r0, #3
 80094bc:	4283      	cmp	r3, r0
 80094be:	d3f7      	bcc.n	80094b0 <_malloc_r+0x1a4>
 80094c0:	68cb      	ldr	r3, [r1, #12]
 80094c2:	60f3      	str	r3, [r6, #12]
 80094c4:	60b1      	str	r1, [r6, #8]
 80094c6:	609e      	str	r6, [r3, #8]
 80094c8:	60ce      	str	r6, [r1, #12]
 80094ca:	2101      	movs	r1, #1
 80094cc:	1093      	asrs	r3, r2, #2
 80094ce:	fa01 f303 	lsl.w	r3, r1, r3
 80094d2:	6869      	ldr	r1, [r5, #4]
 80094d4:	428b      	cmp	r3, r1
 80094d6:	d861      	bhi.n	800959c <_malloc_r+0x290>
 80094d8:	420b      	tst	r3, r1
 80094da:	d106      	bne.n	80094ea <_malloc_r+0x1de>
 80094dc:	f022 0203 	bic.w	r2, r2, #3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	420b      	tst	r3, r1
 80094e4:	f102 0204 	add.w	r2, r2, #4
 80094e8:	d0fa      	beq.n	80094e0 <_malloc_r+0x1d4>
 80094ea:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 80094ee:	4680      	mov	r8, r0
 80094f0:	4694      	mov	ip, r2
 80094f2:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80094f6:	4546      	cmp	r6, r8
 80094f8:	d02d      	beq.n	8009556 <_malloc_r+0x24a>
 80094fa:	6871      	ldr	r1, [r6, #4]
 80094fc:	f021 0903 	bic.w	r9, r1, #3
 8009500:	ebc4 0109 	rsb	r1, r4, r9
 8009504:	290f      	cmp	r1, #15
 8009506:	dd13      	ble.n	8009530 <_malloc_r+0x224>
 8009508:	1933      	adds	r3, r6, r4
 800950a:	f044 0401 	orr.w	r4, r4, #1
 800950e:	68f2      	ldr	r2, [r6, #12]
 8009510:	6074      	str	r4, [r6, #4]
 8009512:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8009516:	60c2      	str	r2, [r0, #12]
 8009518:	6090      	str	r0, [r2, #8]
 800951a:	f041 0201 	orr.w	r2, r1, #1
 800951e:	616b      	str	r3, [r5, #20]
 8009520:	612b      	str	r3, [r5, #16]
 8009522:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009526:	f8c3 e008 	str.w	lr, [r3, #8]
 800952a:	605a      	str	r2, [r3, #4]
 800952c:	5059      	str	r1, [r3, r1]
 800952e:	e00c      	b.n	800954a <_malloc_r+0x23e>
 8009530:	2900      	cmp	r1, #0
 8009532:	db0e      	blt.n	8009552 <_malloc_r+0x246>
 8009534:	eb06 0109 	add.w	r1, r6, r9
 8009538:	684b      	ldr	r3, [r1, #4]
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	604b      	str	r3, [r1, #4]
 8009540:	68f3      	ldr	r3, [r6, #12]
 8009542:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8009546:	60d3      	str	r3, [r2, #12]
 8009548:	609a      	str	r2, [r3, #8]
 800954a:	4638      	mov	r0, r7
 800954c:	f000 f91b 	bl	8009786 <__malloc_unlock>
 8009550:	e0db      	b.n	800970a <_malloc_r+0x3fe>
 8009552:	68f6      	ldr	r6, [r6, #12]
 8009554:	e7cf      	b.n	80094f6 <_malloc_r+0x1ea>
 8009556:	f10c 0c01 	add.w	ip, ip, #1
 800955a:	f01c 0f03 	tst.w	ip, #3
 800955e:	f108 0808 	add.w	r8, r8, #8
 8009562:	d1c6      	bne.n	80094f2 <_malloc_r+0x1e6>
 8009564:	0791      	lsls	r1, r2, #30
 8009566:	d104      	bne.n	8009572 <_malloc_r+0x266>
 8009568:	686a      	ldr	r2, [r5, #4]
 800956a:	ea22 0203 	bic.w	r2, r2, r3
 800956e:	606a      	str	r2, [r5, #4]
 8009570:	e006      	b.n	8009580 <_malloc_r+0x274>
 8009572:	f1a0 0108 	sub.w	r1, r0, #8
 8009576:	6800      	ldr	r0, [r0, #0]
 8009578:	4288      	cmp	r0, r1
 800957a:	f102 32ff 	add.w	r2, r2, #4294967295
 800957e:	d0f1      	beq.n	8009564 <_malloc_r+0x258>
 8009580:	6869      	ldr	r1, [r5, #4]
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	428b      	cmp	r3, r1
 8009586:	d809      	bhi.n	800959c <_malloc_r+0x290>
 8009588:	b143      	cbz	r3, 800959c <_malloc_r+0x290>
 800958a:	4662      	mov	r2, ip
 800958c:	420b      	tst	r3, r1
 800958e:	d1ac      	bne.n	80094ea <_malloc_r+0x1de>
 8009590:	3204      	adds	r2, #4
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	e7fa      	b.n	800958c <_malloc_r+0x280>
 8009596:	bf00      	nop
 8009598:	20010164 	.word	0x20010164
 800959c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80095a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095a4:	f023 0903 	bic.w	r9, r3, #3
 80095a8:	45a1      	cmp	r9, r4
 80095aa:	d304      	bcc.n	80095b6 <_malloc_r+0x2aa>
 80095ac:	ebc4 0309 	rsb	r3, r4, r9
 80095b0:	2b0f      	cmp	r3, #15
 80095b2:	f300 809d 	bgt.w	80096f0 <_malloc_r+0x3e4>
 80095b6:	4b57      	ldr	r3, [pc, #348]	; (8009714 <_malloc_r+0x408>)
 80095b8:	4a57      	ldr	r2, [pc, #348]	; (8009718 <_malloc_r+0x40c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6811      	ldr	r1, [r2, #0]
 80095be:	f103 0a10 	add.w	sl, r3, #16
 80095c2:	3101      	adds	r1, #1
 80095c4:	eb08 0c09 	add.w	ip, r8, r9
 80095c8:	44a2      	add	sl, r4
 80095ca:	4b54      	ldr	r3, [pc, #336]	; (800971c <_malloc_r+0x410>)
 80095cc:	d004      	beq.n	80095d8 <_malloc_r+0x2cc>
 80095ce:	1e59      	subs	r1, r3, #1
 80095d0:	448a      	add	sl, r1
 80095d2:	4259      	negs	r1, r3
 80095d4:	ea0a 0a01 	and.w	sl, sl, r1
 80095d8:	4638      	mov	r0, r7
 80095da:	4651      	mov	r1, sl
 80095dc:	9201      	str	r2, [sp, #4]
 80095de:	9302      	str	r3, [sp, #8]
 80095e0:	f8cd c00c 	str.w	ip, [sp, #12]
 80095e4:	f000 fd7c 	bl	800a0e0 <_sbrk_r>
 80095e8:	1c42      	adds	r2, r0, #1
 80095ea:	aa01      	add	r2, sp, #4
 80095ec:	4606      	mov	r6, r0
 80095ee:	e892 100c 	ldmia.w	r2, {r2, r3, ip}
 80095f2:	d06e      	beq.n	80096d2 <_malloc_r+0x3c6>
 80095f4:	4560      	cmp	r0, ip
 80095f6:	d201      	bcs.n	80095fc <_malloc_r+0x2f0>
 80095f8:	45a8      	cmp	r8, r5
 80095fa:	d16a      	bne.n	80096d2 <_malloc_r+0x3c6>
 80095fc:	4948      	ldr	r1, [pc, #288]	; (8009720 <_malloc_r+0x414>)
 80095fe:	6808      	ldr	r0, [r1, #0]
 8009600:	4566      	cmp	r6, ip
 8009602:	eb0a 0e00 	add.w	lr, sl, r0
 8009606:	f8c1 e000 	str.w	lr, [r1]
 800960a:	4846      	ldr	r0, [pc, #280]	; (8009724 <_malloc_r+0x418>)
 800960c:	468b      	mov	fp, r1
 800960e:	d107      	bne.n	8009620 <_malloc_r+0x314>
 8009610:	4206      	tst	r6, r0
 8009612:	d105      	bne.n	8009620 <_malloc_r+0x314>
 8009614:	68ab      	ldr	r3, [r5, #8]
 8009616:	44d1      	add	r9, sl
 8009618:	f049 0201 	orr.w	r2, r9, #1
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	e04c      	b.n	80096ba <_malloc_r+0x3ae>
 8009620:	6812      	ldr	r2, [r2, #0]
 8009622:	3201      	adds	r2, #1
 8009624:	d102      	bne.n	800962c <_malloc_r+0x320>
 8009626:	4a3c      	ldr	r2, [pc, #240]	; (8009718 <_malloc_r+0x40c>)
 8009628:	6016      	str	r6, [r2, #0]
 800962a:	e005      	b.n	8009638 <_malloc_r+0x32c>
 800962c:	ebcc 0c06 	rsb	ip, ip, r6
 8009630:	eb0e 020c 	add.w	r2, lr, ip
 8009634:	f8cb 2000 	str.w	r2, [fp]
 8009638:	f016 0207 	ands.w	r2, r6, #7
 800963c:	bf1c      	itt	ne
 800963e:	f1c2 0208 	rsbne	r2, r2, #8
 8009642:	18b6      	addne	r6, r6, r2
 8009644:	44b2      	add	sl, r6
 8009646:	4413      	add	r3, r2
 8009648:	ea0a 0000 	and.w	r0, sl, r0
 800964c:	ebc0 0a03 	rsb	sl, r0, r3
 8009650:	4651      	mov	r1, sl
 8009652:	4638      	mov	r0, r7
 8009654:	f000 fd44 	bl	800a0e0 <_sbrk_r>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	bf04      	itt	eq
 800965c:	4630      	moveq	r0, r6
 800965e:	f04f 0a00 	moveq.w	sl, #0
 8009662:	f8db 3000 	ldr.w	r3, [fp]
 8009666:	60ae      	str	r6, [r5, #8]
 8009668:	1b80      	subs	r0, r0, r6
 800966a:	4450      	add	r0, sl
 800966c:	4453      	add	r3, sl
 800966e:	f040 0001 	orr.w	r0, r0, #1
 8009672:	45a8      	cmp	r8, r5
 8009674:	f8cb 3000 	str.w	r3, [fp]
 8009678:	6070      	str	r0, [r6, #4]
 800967a:	d01e      	beq.n	80096ba <_malloc_r+0x3ae>
 800967c:	f1b9 0f0f 	cmp.w	r9, #15
 8009680:	d802      	bhi.n	8009688 <_malloc_r+0x37c>
 8009682:	2301      	movs	r3, #1
 8009684:	6073      	str	r3, [r6, #4]
 8009686:	e024      	b.n	80096d2 <_malloc_r+0x3c6>
 8009688:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800968c:	f1a9 090c 	sub.w	r9, r9, #12
 8009690:	f029 0907 	bic.w	r9, r9, #7
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	ea49 0303 	orr.w	r3, r9, r3
 800969c:	f8c8 3004 	str.w	r3, [r8, #4]
 80096a0:	eb08 0309 	add.w	r3, r8, r9
 80096a4:	2205      	movs	r2, #5
 80096a6:	f1b9 0f0f 	cmp.w	r9, #15
 80096aa:	605a      	str	r2, [r3, #4]
 80096ac:	609a      	str	r2, [r3, #8]
 80096ae:	d904      	bls.n	80096ba <_malloc_r+0x3ae>
 80096b0:	4638      	mov	r0, r7
 80096b2:	f108 0108 	add.w	r1, r8, #8
 80096b6:	f7ff fb8f 	bl	8008dd8 <_free_r>
 80096ba:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <_malloc_r+0x41c>)
 80096bc:	f8db 3000 	ldr.w	r3, [fp]
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	428b      	cmp	r3, r1
 80096c4:	bf88      	it	hi
 80096c6:	6013      	strhi	r3, [r2, #0]
 80096c8:	4a18      	ldr	r2, [pc, #96]	; (800972c <_malloc_r+0x420>)
 80096ca:	6811      	ldr	r1, [r2, #0]
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf88      	it	hi
 80096d0:	6013      	strhi	r3, [r2, #0]
 80096d2:	68ab      	ldr	r3, [r5, #8]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	f022 0203 	bic.w	r2, r2, #3
 80096da:	42a2      	cmp	r2, r4
 80096dc:	ebc4 0302 	rsb	r3, r4, r2
 80096e0:	d301      	bcc.n	80096e6 <_malloc_r+0x3da>
 80096e2:	2b0f      	cmp	r3, #15
 80096e4:	dc04      	bgt.n	80096f0 <_malloc_r+0x3e4>
 80096e6:	4638      	mov	r0, r7
 80096e8:	f000 f84d 	bl	8009786 <__malloc_unlock>
 80096ec:	2600      	movs	r6, #0
 80096ee:	e00c      	b.n	800970a <_malloc_r+0x3fe>
 80096f0:	68ae      	ldr	r6, [r5, #8]
 80096f2:	f044 0201 	orr.w	r2, r4, #1
 80096f6:	4434      	add	r4, r6
 80096f8:	f043 0301 	orr.w	r3, r3, #1
 80096fc:	6072      	str	r2, [r6, #4]
 80096fe:	60ac      	str	r4, [r5, #8]
 8009700:	6063      	str	r3, [r4, #4]
 8009702:	4638      	mov	r0, r7
 8009704:	f000 f83f 	bl	8009786 <__malloc_unlock>
 8009708:	3608      	adds	r6, #8
 800970a:	4630      	mov	r0, r6
 800970c:	b005      	add	sp, #20
 800970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009712:	bf00      	nop
 8009714:	20014310 	.word	0x20014310
 8009718:	20010570 	.word	0x20010570
 800971c:	00001000 	.word	0x00001000
 8009720:	20014314 	.word	0x20014314
 8009724:	00000fff 	.word	0x00000fff
 8009728:	2001430c 	.word	0x2001430c
 800972c:	20014308 	.word	0x20014308

08009730 <memchr>:
 8009730:	b510      	push	{r4, lr}
 8009732:	b2c9      	uxtb	r1, r1
 8009734:	4402      	add	r2, r0
 8009736:	4290      	cmp	r0, r2
 8009738:	4603      	mov	r3, r0
 800973a:	d006      	beq.n	800974a <memchr+0x1a>
 800973c:	781c      	ldrb	r4, [r3, #0]
 800973e:	428c      	cmp	r4, r1
 8009740:	f100 0001 	add.w	r0, r0, #1
 8009744:	d1f7      	bne.n	8009736 <memchr+0x6>
 8009746:	4618      	mov	r0, r3
 8009748:	bd10      	pop	{r4, pc}
 800974a:	2000      	movs	r0, #0
 800974c:	bd10      	pop	{r4, pc}

0800974e <memmove>:
 800974e:	4281      	cmp	r1, r0
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	d301      	bcc.n	8009758 <memmove+0xa>
 8009754:	2300      	movs	r3, #0
 8009756:	e00e      	b.n	8009776 <memmove+0x28>
 8009758:	188c      	adds	r4, r1, r2
 800975a:	42a0      	cmp	r0, r4
 800975c:	d2fa      	bcs.n	8009754 <memmove+0x6>
 800975e:	1885      	adds	r5, r0, r2
 8009760:	4613      	mov	r3, r2
 8009762:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009766:	d305      	bcc.n	8009774 <memmove+0x26>
 8009768:	4251      	negs	r1, r2
 800976a:	1866      	adds	r6, r4, r1
 800976c:	4429      	add	r1, r5
 800976e:	5cf6      	ldrb	r6, [r6, r3]
 8009770:	54ce      	strb	r6, [r1, r3]
 8009772:	e7f6      	b.n	8009762 <memmove+0x14>
 8009774:	bd70      	pop	{r4, r5, r6, pc}
 8009776:	4293      	cmp	r3, r2
 8009778:	d003      	beq.n	8009782 <memmove+0x34>
 800977a:	5ccc      	ldrb	r4, [r1, r3]
 800977c:	54c4      	strb	r4, [r0, r3]
 800977e:	3301      	adds	r3, #1
 8009780:	e7f9      	b.n	8009776 <memmove+0x28>
 8009782:	bd70      	pop	{r4, r5, r6, pc}

08009784 <__malloc_lock>:
 8009784:	4770      	bx	lr

08009786 <__malloc_unlock>:
 8009786:	4770      	bx	lr

08009788 <_Balloc>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800978c:	4604      	mov	r4, r0
 800978e:	460e      	mov	r6, r1
 8009790:	b93d      	cbnz	r5, 80097a2 <_Balloc+0x1a>
 8009792:	2010      	movs	r0, #16
 8009794:	f7ff fdb2 	bl	80092fc <malloc>
 8009798:	6260      	str	r0, [r4, #36]	; 0x24
 800979a:	6045      	str	r5, [r0, #4]
 800979c:	6085      	str	r5, [r0, #8]
 800979e:	6005      	str	r5, [r0, #0]
 80097a0:	60c5      	str	r5, [r0, #12]
 80097a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097a4:	68eb      	ldr	r3, [r5, #12]
 80097a6:	b143      	cbz	r3, 80097ba <_Balloc+0x32>
 80097a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80097b0:	b178      	cbz	r0, 80097d2 <_Balloc+0x4a>
 80097b2:	6801      	ldr	r1, [r0, #0]
 80097b4:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 80097b8:	e017      	b.n	80097ea <_Balloc+0x62>
 80097ba:	4620      	mov	r0, r4
 80097bc:	2104      	movs	r1, #4
 80097be:	2221      	movs	r2, #33	; 0x21
 80097c0:	f000 fd26 	bl	800a210 <_calloc_r>
 80097c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c6:	60e8      	str	r0, [r5, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1ec      	bne.n	80097a8 <_Balloc+0x20>
 80097ce:	2000      	movs	r0, #0
 80097d0:	bd70      	pop	{r4, r5, r6, pc}
 80097d2:	2101      	movs	r1, #1
 80097d4:	fa01 f506 	lsl.w	r5, r1, r6
 80097d8:	1d6a      	adds	r2, r5, #5
 80097da:	4620      	mov	r0, r4
 80097dc:	0092      	lsls	r2, r2, #2
 80097de:	f000 fd17 	bl	800a210 <_calloc_r>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0f3      	beq.n	80097ce <_Balloc+0x46>
 80097e6:	6046      	str	r6, [r0, #4]
 80097e8:	6085      	str	r5, [r0, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	6102      	str	r2, [r0, #16]
 80097ee:	60c2      	str	r2, [r0, #12]
 80097f0:	bd70      	pop	{r4, r5, r6, pc}

080097f2 <_Bfree>:
 80097f2:	b570      	push	{r4, r5, r6, lr}
 80097f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097f6:	4606      	mov	r6, r0
 80097f8:	460d      	mov	r5, r1
 80097fa:	b93c      	cbnz	r4, 800980c <_Bfree+0x1a>
 80097fc:	2010      	movs	r0, #16
 80097fe:	f7ff fd7d 	bl	80092fc <malloc>
 8009802:	6270      	str	r0, [r6, #36]	; 0x24
 8009804:	6044      	str	r4, [r0, #4]
 8009806:	6084      	str	r4, [r0, #8]
 8009808:	6004      	str	r4, [r0, #0]
 800980a:	60c4      	str	r4, [r0, #12]
 800980c:	b13d      	cbz	r5, 800981e <_Bfree+0x2c>
 800980e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009810:	686a      	ldr	r2, [r5, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009818:	6029      	str	r1, [r5, #0]
 800981a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800981e:	bd70      	pop	{r4, r5, r6, pc}

08009820 <__multadd>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	460c      	mov	r4, r1
 8009826:	461e      	mov	r6, r3
 8009828:	690d      	ldr	r5, [r1, #16]
 800982a:	4607      	mov	r7, r0
 800982c:	3114      	adds	r1, #20
 800982e:	2300      	movs	r3, #0
 8009830:	6808      	ldr	r0, [r1, #0]
 8009832:	fa1f fc80 	uxth.w	ip, r0
 8009836:	0c00      	lsrs	r0, r0, #16
 8009838:	fb02 6c0c 	mla	ip, r2, ip, r6
 800983c:	4350      	muls	r0, r2
 800983e:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 8009842:	3301      	adds	r3, #1
 8009844:	fa1f fc8c 	uxth.w	ip, ip
 8009848:	0c06      	lsrs	r6, r0, #16
 800984a:	42ab      	cmp	r3, r5
 800984c:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
 8009850:	f841 0b04 	str.w	r0, [r1], #4
 8009854:	dbec      	blt.n	8009830 <__multadd+0x10>
 8009856:	b1d6      	cbz	r6, 800988e <__multadd+0x6e>
 8009858:	68a3      	ldr	r3, [r4, #8]
 800985a:	429d      	cmp	r5, r3
 800985c:	db12      	blt.n	8009884 <__multadd+0x64>
 800985e:	6861      	ldr	r1, [r4, #4]
 8009860:	4638      	mov	r0, r7
 8009862:	3101      	adds	r1, #1
 8009864:	f7ff ff90 	bl	8009788 <_Balloc>
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	3202      	adds	r2, #2
 800986c:	f104 010c 	add.w	r1, r4, #12
 8009870:	4680      	mov	r8, r0
 8009872:	0092      	lsls	r2, r2, #2
 8009874:	300c      	adds	r0, #12
 8009876:	f7fd f99b 	bl	8006bb0 <memcpy>
 800987a:	4621      	mov	r1, r4
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff ffb8 	bl	80097f2 <_Bfree>
 8009882:	4644      	mov	r4, r8
 8009884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009888:	3501      	adds	r5, #1
 800988a:	615e      	str	r6, [r3, #20]
 800988c:	6125      	str	r5, [r4, #16]
 800988e:	4620      	mov	r0, r4
 8009890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009894 <__hi0bits>:
 8009894:	0c03      	lsrs	r3, r0, #16
 8009896:	041b      	lsls	r3, r3, #16
 8009898:	b913      	cbnz	r3, 80098a0 <__hi0bits+0xc>
 800989a:	0400      	lsls	r0, r0, #16
 800989c:	2310      	movs	r3, #16
 800989e:	e000      	b.n	80098a2 <__hi0bits+0xe>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098a6:	bf04      	itt	eq
 80098a8:	0200      	lsleq	r0, r0, #8
 80098aa:	3308      	addeq	r3, #8
 80098ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098b0:	bf04      	itt	eq
 80098b2:	0100      	lsleq	r0, r0, #4
 80098b4:	3304      	addeq	r3, #4
 80098b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098ba:	bf04      	itt	eq
 80098bc:	0080      	lsleq	r0, r0, #2
 80098be:	3302      	addeq	r3, #2
 80098c0:	2800      	cmp	r0, #0
 80098c2:	db03      	blt.n	80098cc <__hi0bits+0x38>
 80098c4:	0042      	lsls	r2, r0, #1
 80098c6:	d503      	bpl.n	80098d0 <__hi0bits+0x3c>
 80098c8:	1c58      	adds	r0, r3, #1
 80098ca:	4770      	bx	lr
 80098cc:	4618      	mov	r0, r3
 80098ce:	4770      	bx	lr
 80098d0:	2020      	movs	r0, #32
 80098d2:	4770      	bx	lr

080098d4 <__lo0bits>:
 80098d4:	6803      	ldr	r3, [r0, #0]
 80098d6:	f013 0207 	ands.w	r2, r3, #7
 80098da:	d00b      	beq.n	80098f4 <__lo0bits+0x20>
 80098dc:	07d9      	lsls	r1, r3, #31
 80098de:	d422      	bmi.n	8009926 <__lo0bits+0x52>
 80098e0:	079a      	lsls	r2, r3, #30
 80098e2:	d503      	bpl.n	80098ec <__lo0bits+0x18>
 80098e4:	085b      	lsrs	r3, r3, #1
 80098e6:	6003      	str	r3, [r0, #0]
 80098e8:	2001      	movs	r0, #1
 80098ea:	4770      	bx	lr
 80098ec:	089b      	lsrs	r3, r3, #2
 80098ee:	6003      	str	r3, [r0, #0]
 80098f0:	2002      	movs	r0, #2
 80098f2:	4770      	bx	lr
 80098f4:	b299      	uxth	r1, r3
 80098f6:	b909      	cbnz	r1, 80098fc <__lo0bits+0x28>
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	2210      	movs	r2, #16
 80098fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009900:	bf04      	itt	eq
 8009902:	0a1b      	lsreq	r3, r3, #8
 8009904:	3208      	addeq	r2, #8
 8009906:	0719      	lsls	r1, r3, #28
 8009908:	bf04      	itt	eq
 800990a:	091b      	lsreq	r3, r3, #4
 800990c:	3204      	addeq	r2, #4
 800990e:	0799      	lsls	r1, r3, #30
 8009910:	bf04      	itt	eq
 8009912:	089b      	lsreq	r3, r3, #2
 8009914:	3202      	addeq	r2, #2
 8009916:	07d9      	lsls	r1, r3, #31
 8009918:	d402      	bmi.n	8009920 <__lo0bits+0x4c>
 800991a:	085b      	lsrs	r3, r3, #1
 800991c:	d005      	beq.n	800992a <__lo0bits+0x56>
 800991e:	3201      	adds	r2, #1
 8009920:	6003      	str	r3, [r0, #0]
 8009922:	4610      	mov	r0, r2
 8009924:	4770      	bx	lr
 8009926:	2000      	movs	r0, #0
 8009928:	4770      	bx	lr
 800992a:	2020      	movs	r0, #32
 800992c:	4770      	bx	lr

0800992e <__i2b>:
 800992e:	b510      	push	{r4, lr}
 8009930:	460c      	mov	r4, r1
 8009932:	2101      	movs	r1, #1
 8009934:	f7ff ff28 	bl	8009788 <_Balloc>
 8009938:	2201      	movs	r2, #1
 800993a:	6144      	str	r4, [r0, #20]
 800993c:	6102      	str	r2, [r0, #16]
 800993e:	bd10      	pop	{r4, pc}

08009940 <__multiply>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	4616      	mov	r6, r2
 8009946:	690a      	ldr	r2, [r1, #16]
 8009948:	6933      	ldr	r3, [r6, #16]
 800994a:	429a      	cmp	r2, r3
 800994c:	b085      	sub	sp, #20
 800994e:	460d      	mov	r5, r1
 8009950:	da01      	bge.n	8009956 <__multiply+0x16>
 8009952:	4635      	mov	r5, r6
 8009954:	460e      	mov	r6, r1
 8009956:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800995a:	6937      	ldr	r7, [r6, #16]
 800995c:	68ab      	ldr	r3, [r5, #8]
 800995e:	6869      	ldr	r1, [r5, #4]
 8009960:	eb08 0407 	add.w	r4, r8, r7
 8009964:	429c      	cmp	r4, r3
 8009966:	bfc8      	it	gt
 8009968:	3101      	addgt	r1, #1
 800996a:	f7ff ff0d 	bl	8009788 <_Balloc>
 800996e:	f100 0314 	add.w	r3, r0, #20
 8009972:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8009976:	9101      	str	r1, [sp, #4]
 8009978:	461a      	mov	r2, r3
 800997a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800997e:	4552      	cmp	r2, sl
 8009980:	d203      	bcs.n	800998a <__multiply+0x4a>
 8009982:	2100      	movs	r1, #0
 8009984:	f842 1b04 	str.w	r1, [r2], #4
 8009988:	e7f7      	b.n	800997a <__multiply+0x3a>
 800998a:	f105 0114 	add.w	r1, r5, #20
 800998e:	f106 0214 	add.w	r2, r6, #20
 8009992:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8009996:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800999a:	f8cd 8008 	str.w	r8, [sp, #8]
 800999e:	9703      	str	r7, [sp, #12]
 80099a0:	9e03      	ldr	r6, [sp, #12]
 80099a2:	42b2      	cmp	r2, r6
 80099a4:	4615      	mov	r5, r2
 80099a6:	d256      	bcs.n	8009a56 <__multiply+0x116>
 80099a8:	f8b5 c000 	ldrh.w	ip, [r5]
 80099ac:	3204      	adds	r2, #4
 80099ae:	f1bc 0f00 	cmp.w	ip, #0
 80099b2:	d025      	beq.n	8009a00 <__multiply+0xc0>
 80099b4:	460f      	mov	r7, r1
 80099b6:	461d      	mov	r5, r3
 80099b8:	2600      	movs	r6, #0
 80099ba:	f857 9b04 	ldr.w	r9, [r7], #4
 80099be:	f8d5 8000 	ldr.w	r8, [r5]
 80099c2:	fa1f fb89 	uxth.w	fp, r9
 80099c6:	fa1f fa88 	uxth.w	sl, r8
 80099ca:	fb0c aa0b 	mla	sl, ip, fp, sl
 80099ce:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80099d2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80099d6:	44b2      	add	sl, r6
 80099d8:	fb0c 8809 	mla	r8, ip, r9, r8
 80099dc:	eb08 481a 	add.w	r8, r8, sl, lsr #16
 80099e0:	fa1f fa8a 	uxth.w	sl, sl
 80099e4:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
 80099e8:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80099ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80099f0:	46ab      	mov	fp, r5
 80099f2:	45b8      	cmp	r8, r7
 80099f4:	f84b ab04 	str.w	sl, [fp], #4
 80099f8:	d901      	bls.n	80099fe <__multiply+0xbe>
 80099fa:	465d      	mov	r5, fp
 80099fc:	e7dd      	b.n	80099ba <__multiply+0x7a>
 80099fe:	606e      	str	r6, [r5, #4]
 8009a00:	f832 8c02 	ldrh.w	r8, [r2, #-2]
 8009a04:	f1b8 0f00 	cmp.w	r8, #0
 8009a08:	d023      	beq.n	8009a52 <__multiply+0x112>
 8009a0a:	681e      	ldr	r6, [r3, #0]
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	461d      	mov	r5, r3
 8009a10:	f04f 0900 	mov.w	r9, #0
 8009a14:	f8b7 a000 	ldrh.w	sl, [r7]
 8009a18:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8009a1c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8009a20:	44e1      	add	r9, ip
 8009a22:	b2b6      	uxth	r6, r6
 8009a24:	46ac      	mov	ip, r5
 8009a26:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8009a2a:	f84c 6b04 	str.w	r6, [ip], #4
 8009a2e:	f857 6b04 	ldr.w	r6, [r7], #4
 8009a32:	f8b5 a004 	ldrh.w	sl, [r5, #4]
 8009a36:	0c36      	lsrs	r6, r6, #16
 8009a38:	fb08 a606 	mla	r6, r8, r6, sl
 8009a3c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009a40:	eb06 4619 	add.w	r6, r6, r9, lsr #16
 8009a44:	4557      	cmp	r7, sl
 8009a46:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8009a4a:	d201      	bcs.n	8009a50 <__multiply+0x110>
 8009a4c:	4665      	mov	r5, ip
 8009a4e:	e7e1      	b.n	8009a14 <__multiply+0xd4>
 8009a50:	606e      	str	r6, [r5, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	e7a4      	b.n	80099a0 <__multiply+0x60>
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	2c00      	cmp	r4, #0
 8009a5a:	dc03      	bgt.n	8009a64 <__multiply+0x124>
 8009a5c:	6104      	str	r4, [r0, #16]
 8009a5e:	b005      	add	sp, #20
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	d1f7      	bne.n	8009a5c <__multiply+0x11c>
 8009a6c:	3c01      	subs	r4, #1
 8009a6e:	e7f3      	b.n	8009a58 <__multiply+0x118>

08009a70 <__pow5mult>:
 8009a70:	f012 0303 	ands.w	r3, r2, #3
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	4605      	mov	r5, r0
 8009a7a:	460e      	mov	r6, r1
 8009a7c:	4617      	mov	r7, r2
 8009a7e:	d007      	beq.n	8009a90 <__pow5mult+0x20>
 8009a80:	3b01      	subs	r3, #1
 8009a82:	4a21      	ldr	r2, [pc, #132]	; (8009b08 <__pow5mult+0x98>)
 8009a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f7ff fec9 	bl	8009820 <__multadd>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	10bf      	asrs	r7, r7, #2
 8009a92:	d035      	beq.n	8009b00 <__pow5mult+0x90>
 8009a94:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009a96:	b93c      	cbnz	r4, 8009aa8 <__pow5mult+0x38>
 8009a98:	2010      	movs	r0, #16
 8009a9a:	f7ff fc2f 	bl	80092fc <malloc>
 8009a9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009aa0:	6044      	str	r4, [r0, #4]
 8009aa2:	6084      	str	r4, [r0, #8]
 8009aa4:	6004      	str	r4, [r0, #0]
 8009aa6:	60c4      	str	r4, [r0, #12]
 8009aa8:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8009aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ab0:	b97c      	cbnz	r4, 8009ad2 <__pow5mult+0x62>
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f240 2171 	movw	r1, #625	; 0x271
 8009ab8:	f7ff ff39 	bl	800992e <__i2b>
 8009abc:	2300      	movs	r3, #0
 8009abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	e004      	b.n	8009ad2 <__pow5mult+0x62>
 8009ac8:	107f      	asrs	r7, r7, #1
 8009aca:	d019      	beq.n	8009b00 <__pow5mult+0x90>
 8009acc:	6820      	ldr	r0, [r4, #0]
 8009ace:	b170      	cbz	r0, 8009aee <__pow5mult+0x7e>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	07fb      	lsls	r3, r7, #31
 8009ad4:	d5f8      	bpl.n	8009ac8 <__pow5mult+0x58>
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4628      	mov	r0, r5
 8009adc:	f7ff ff30 	bl	8009940 <__multiply>
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f7ff fe84 	bl	80097f2 <_Bfree>
 8009aea:	4646      	mov	r6, r8
 8009aec:	e7ec      	b.n	8009ac8 <__pow5mult+0x58>
 8009aee:	4628      	mov	r0, r5
 8009af0:	4621      	mov	r1, r4
 8009af2:	4622      	mov	r2, r4
 8009af4:	f7ff ff24 	bl	8009940 <__multiply>
 8009af8:	2300      	movs	r3, #0
 8009afa:	6020      	str	r0, [r4, #0]
 8009afc:	6003      	str	r3, [r0, #0]
 8009afe:	e7e7      	b.n	8009ad0 <__pow5mult+0x60>
 8009b00:	4630      	mov	r0, r6
 8009b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b06:	bf00      	nop
 8009b08:	0800a8e0 	.word	0x0800a8e0

08009b0c <__lshift>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	460c      	mov	r4, r1
 8009b12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b16:	6923      	ldr	r3, [r4, #16]
 8009b18:	6849      	ldr	r1, [r1, #4]
 8009b1a:	eb0a 0903 	add.w	r9, sl, r3
 8009b1e:	68a3      	ldr	r3, [r4, #8]
 8009b20:	4680      	mov	r8, r0
 8009b22:	4615      	mov	r5, r2
 8009b24:	f109 0701 	add.w	r7, r9, #1
 8009b28:	429f      	cmp	r7, r3
 8009b2a:	dd02      	ble.n	8009b32 <__lshift+0x26>
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	e7fa      	b.n	8009b28 <__lshift+0x1c>
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7ff fe28 	bl	8009788 <_Balloc>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	f100 0214 	add.w	r2, r0, #20
 8009b40:	4553      	cmp	r3, sl
 8009b42:	da04      	bge.n	8009b4e <__lshift+0x42>
 8009b44:	2100      	movs	r1, #0
 8009b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	e7f8      	b.n	8009b40 <__lshift+0x34>
 8009b4e:	6920      	ldr	r0, [r4, #16]
 8009b50:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 8009b54:	f104 0314 	add.w	r3, r4, #20
 8009b58:	f015 0c1f 	ands.w	ip, r5, #31
 8009b5c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009b60:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8009b64:	d016      	beq.n	8009b94 <__lshift+0x88>
 8009b66:	f1cc 0a20 	rsb	sl, ip, #32
 8009b6a:	2500      	movs	r5, #0
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	460a      	mov	r2, r1
 8009b70:	fa00 f00c 	lsl.w	r0, r0, ip
 8009b74:	4305      	orrs	r5, r0
 8009b76:	f842 5b04 	str.w	r5, [r2], #4
 8009b7a:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b7e:	4573      	cmp	r3, lr
 8009b80:	fa25 f50a 	lsr.w	r5, r5, sl
 8009b84:	d201      	bcs.n	8009b8a <__lshift+0x7e>
 8009b86:	4611      	mov	r1, r2
 8009b88:	e7f0      	b.n	8009b6c <__lshift+0x60>
 8009b8a:	604d      	str	r5, [r1, #4]
 8009b8c:	b145      	cbz	r5, 8009ba0 <__lshift+0x94>
 8009b8e:	f109 0702 	add.w	r7, r9, #2
 8009b92:	e005      	b.n	8009ba0 <__lshift+0x94>
 8009b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b98:	f841 2b04 	str.w	r2, [r1], #4
 8009b9c:	4573      	cmp	r3, lr
 8009b9e:	d3f9      	bcc.n	8009b94 <__lshift+0x88>
 8009ba0:	3f01      	subs	r7, #1
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	6137      	str	r7, [r6, #16]
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	f7ff fe23 	bl	80097f2 <_Bfree>
 8009bac:	4630      	mov	r0, r6
 8009bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009bb2 <__mcmp>:
 8009bb2:	6902      	ldr	r2, [r0, #16]
 8009bb4:	690b      	ldr	r3, [r1, #16]
 8009bb6:	1ad2      	subs	r2, r2, r3
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	d113      	bne.n	8009be4 <__mcmp+0x32>
 8009bbc:	009c      	lsls	r4, r3, #2
 8009bbe:	3014      	adds	r0, #20
 8009bc0:	f101 0214 	add.w	r2, r1, #20
 8009bc4:	1903      	adds	r3, r0, r4
 8009bc6:	4422      	add	r2, r4
 8009bc8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009bcc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009bd0:	428c      	cmp	r4, r1
 8009bd2:	d003      	beq.n	8009bdc <__mcmp+0x2a>
 8009bd4:	d208      	bcs.n	8009be8 <__mcmp+0x36>
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	4298      	cmp	r0, r3
 8009bde:	d3f3      	bcc.n	8009bc8 <__mcmp+0x16>
 8009be0:	2000      	movs	r0, #0
 8009be2:	bd10      	pop	{r4, pc}
 8009be4:	4610      	mov	r0, r2
 8009be6:	bd10      	pop	{r4, pc}
 8009be8:	2001      	movs	r0, #1
 8009bea:	bd10      	pop	{r4, pc}

08009bec <__mdiff>:
 8009bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	f7ff ffda 	bl	8009bb2 <__mcmp>
 8009bfe:	1e07      	subs	r7, r0, #0
 8009c00:	d108      	bne.n	8009c14 <__mdiff+0x28>
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7ff fdbf 	bl	8009788 <_Balloc>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	6103      	str	r3, [r0, #16]
 8009c0e:	6147      	str	r7, [r0, #20]
 8009c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c14:	db01      	blt.n	8009c1a <__mdiff+0x2e>
 8009c16:	2700      	movs	r7, #0
 8009c18:	e003      	b.n	8009c22 <__mdiff+0x36>
 8009c1a:	4623      	mov	r3, r4
 8009c1c:	2701      	movs	r7, #1
 8009c1e:	462c      	mov	r4, r5
 8009c20:	461d      	mov	r5, r3
 8009c22:	6861      	ldr	r1, [r4, #4]
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff fdaf 	bl	8009788 <_Balloc>
 8009c2a:	6922      	ldr	r2, [r4, #16]
 8009c2c:	692b      	ldr	r3, [r5, #16]
 8009c2e:	60c7      	str	r7, [r0, #12]
 8009c30:	3414      	adds	r4, #20
 8009c32:	f105 0614 	add.w	r6, r5, #20
 8009c36:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 8009c3a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8009c3e:	f100 0314 	add.w	r3, r0, #20
 8009c42:	2100      	movs	r1, #0
 8009c44:	f854 7b04 	ldr.w	r7, [r4], #4
 8009c48:	f856 9b04 	ldr.w	r9, [r6], #4
 8009c4c:	fa11 f187 	uxtah	r1, r1, r7
 8009c50:	fa1f f589 	uxth.w	r5, r9
 8009c54:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009c58:	ebc5 0801 	rsb	r8, r5, r1
 8009c5c:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
 8009c60:	eb07 4728 	add.w	r7, r7, r8, asr #16
 8009c64:	fa1f f888 	uxth.w	r8, r8
 8009c68:	1439      	asrs	r1, r7, #16
 8009c6a:	45b2      	cmp	sl, r6
 8009c6c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8009c70:	4625      	mov	r5, r4
 8009c72:	f843 7b04 	str.w	r7, [r3], #4
 8009c76:	d8e5      	bhi.n	8009c44 <__mdiff+0x58>
 8009c78:	4565      	cmp	r5, ip
 8009c7a:	d20d      	bcs.n	8009c98 <__mdiff+0xac>
 8009c7c:	f855 4b04 	ldr.w	r4, [r5], #4
 8009c80:	fa11 f684 	uxtah	r6, r1, r4
 8009c84:	0c24      	lsrs	r4, r4, #16
 8009c86:	eb04 4426 	add.w	r4, r4, r6, asr #16
 8009c8a:	b2b6      	uxth	r6, r6
 8009c8c:	1421      	asrs	r1, r4, #16
 8009c8e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8009c92:	f843 4b04 	str.w	r4, [r3], #4
 8009c96:	e7ef      	b.n	8009c78 <__mdiff+0x8c>
 8009c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c9c:	b909      	cbnz	r1, 8009ca2 <__mdiff+0xb6>
 8009c9e:	3a01      	subs	r2, #1
 8009ca0:	e7fa      	b.n	8009c98 <__mdiff+0xac>
 8009ca2:	6102      	str	r2, [r0, #16]
 8009ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ca8 <__d2b>:
 8009ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4689      	mov	r9, r1
 8009cae:	2101      	movs	r1, #1
 8009cb0:	ec55 4b10 	vmov	r4, r5, d0
 8009cb4:	4690      	mov	r8, r2
 8009cb6:	f7ff fd67 	bl	8009788 <_Balloc>
 8009cba:	f3c5 570a 	ubfx	r7, r5, #20, #11
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009cc4:	b10f      	cbz	r7, 8009cca <__d2b+0x22>
 8009cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	b1d4      	cbz	r4, 8009d04 <__d2b+0x5c>
 8009cce:	a802      	add	r0, sp, #8
 8009cd0:	f840 4d08 	str.w	r4, [r0, #-8]!
 8009cd4:	4668      	mov	r0, sp
 8009cd6:	f7ff fdfd 	bl	80098d4 <__lo0bits>
 8009cda:	9b00      	ldr	r3, [sp, #0]
 8009cdc:	b148      	cbz	r0, 8009cf2 <__d2b+0x4a>
 8009cde:	9a01      	ldr	r2, [sp, #4]
 8009ce0:	f1c0 0120 	rsb	r1, r0, #32
 8009ce4:	fa02 f101 	lsl.w	r1, r2, r1
 8009ce8:	430b      	orrs	r3, r1
 8009cea:	40c2      	lsrs	r2, r0
 8009cec:	6173      	str	r3, [r6, #20]
 8009cee:	9201      	str	r2, [sp, #4]
 8009cf0:	e000      	b.n	8009cf4 <__d2b+0x4c>
 8009cf2:	6173      	str	r3, [r6, #20]
 8009cf4:	9b01      	ldr	r3, [sp, #4]
 8009cf6:	61b3      	str	r3, [r6, #24]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bf0c      	ite	eq
 8009cfc:	2401      	moveq	r4, #1
 8009cfe:	2402      	movne	r4, #2
 8009d00:	6134      	str	r4, [r6, #16]
 8009d02:	e007      	b.n	8009d14 <__d2b+0x6c>
 8009d04:	a801      	add	r0, sp, #4
 8009d06:	f7ff fde5 	bl	80098d4 <__lo0bits>
 8009d0a:	2401      	movs	r4, #1
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	6173      	str	r3, [r6, #20]
 8009d10:	6134      	str	r4, [r6, #16]
 8009d12:	3020      	adds	r0, #32
 8009d14:	b13f      	cbz	r7, 8009d26 <__d2b+0x7e>
 8009d16:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8009d1a:	4407      	add	r7, r0
 8009d1c:	f8c9 7000 	str.w	r7, [r9]
 8009d20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d24:	e00a      	b.n	8009d3c <__d2b+0x94>
 8009d26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d2e:	f8c9 0000 	str.w	r0, [r9]
 8009d32:	6918      	ldr	r0, [r3, #16]
 8009d34:	f7ff fdae 	bl	8009894 <__hi0bits>
 8009d38:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009d3c:	f8c8 0000 	str.w	r0, [r8]
 8009d40:	4630      	mov	r0, r6
 8009d42:	b003      	add	sp, #12
 8009d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009d48 <_realloc_r>:
 8009d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4681      	mov	r9, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	b929      	cbnz	r1, 8009d5e <_realloc_r+0x16>
 8009d52:	4611      	mov	r1, r2
 8009d54:	b003      	add	sp, #12
 8009d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	f7ff bad7 	b.w	800930c <_malloc_r>
 8009d5e:	9201      	str	r2, [sp, #4]
 8009d60:	f7ff fd10 	bl	8009784 <__malloc_lock>
 8009d64:	9a01      	ldr	r2, [sp, #4]
 8009d66:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009d6a:	f102 070b 	add.w	r7, r2, #11
 8009d6e:	2f16      	cmp	r7, #22
 8009d70:	f1a4 0808 	sub.w	r8, r4, #8
 8009d74:	f025 0603 	bic.w	r6, r5, #3
 8009d78:	d903      	bls.n	8009d82 <_realloc_r+0x3a>
 8009d7a:	f037 0707 	bics.w	r7, r7, #7
 8009d7e:	d501      	bpl.n	8009d84 <_realloc_r+0x3c>
 8009d80:	e002      	b.n	8009d88 <_realloc_r+0x40>
 8009d82:	2710      	movs	r7, #16
 8009d84:	4297      	cmp	r7, r2
 8009d86:	d204      	bcs.n	8009d92 <_realloc_r+0x4a>
 8009d88:	230c      	movs	r3, #12
 8009d8a:	f8c9 3000 	str.w	r3, [r9]
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e17e      	b.n	800a090 <_realloc_r+0x348>
 8009d92:	42be      	cmp	r6, r7
 8009d94:	f280 8154 	bge.w	800a040 <_realloc_r+0x2f8>
 8009d98:	49a2      	ldr	r1, [pc, #648]	; (800a024 <_realloc_r+0x2dc>)
 8009d9a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8009d9e:	eb08 0306 	add.w	r3, r8, r6
 8009da2:	4573      	cmp	r3, lr
 8009da4:	468b      	mov	fp, r1
 8009da6:	6858      	ldr	r0, [r3, #4]
 8009da8:	d005      	beq.n	8009db6 <_realloc_r+0x6e>
 8009daa:	f020 0101 	bic.w	r1, r0, #1
 8009dae:	4419      	add	r1, r3
 8009db0:	6849      	ldr	r1, [r1, #4]
 8009db2:	07c9      	lsls	r1, r1, #31
 8009db4:	d425      	bmi.n	8009e02 <_realloc_r+0xba>
 8009db6:	f020 0003 	bic.w	r0, r0, #3
 8009dba:	4573      	cmp	r3, lr
 8009dbc:	eb00 0106 	add.w	r1, r0, r6
 8009dc0:	d117      	bne.n	8009df2 <_realloc_r+0xaa>
 8009dc2:	f107 0c10 	add.w	ip, r7, #16
 8009dc6:	4561      	cmp	r1, ip
 8009dc8:	db1d      	blt.n	8009e06 <_realloc_r+0xbe>
 8009dca:	eb08 0507 	add.w	r5, r8, r7
 8009dce:	1bc9      	subs	r1, r1, r7
 8009dd0:	f041 0101 	orr.w	r1, r1, #1
 8009dd4:	f8cb 5008 	str.w	r5, [fp, #8]
 8009dd8:	6069      	str	r1, [r5, #4]
 8009dda:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	431f      	orrs	r7, r3
 8009de4:	4648      	mov	r0, r9
 8009de6:	f844 7c04 	str.w	r7, [r4, #-4]
 8009dea:	f7ff fccc 	bl	8009786 <__malloc_unlock>
 8009dee:	4620      	mov	r0, r4
 8009df0:	e14e      	b.n	800a090 <_realloc_r+0x348>
 8009df2:	42b9      	cmp	r1, r7
 8009df4:	db07      	blt.n	8009e06 <_realloc_r+0xbe>
 8009df6:	68da      	ldr	r2, [r3, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	460e      	mov	r6, r1
 8009dfc:	60da      	str	r2, [r3, #12]
 8009dfe:	6093      	str	r3, [r2, #8]
 8009e00:	e11e      	b.n	800a040 <_realloc_r+0x2f8>
 8009e02:	2000      	movs	r0, #0
 8009e04:	4603      	mov	r3, r0
 8009e06:	07e9      	lsls	r1, r5, #31
 8009e08:	f100 80c9 	bmi.w	8009f9e <_realloc_r+0x256>
 8009e0c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009e10:	ebc5 0508 	rsb	r5, r5, r8
 8009e14:	6869      	ldr	r1, [r5, #4]
 8009e16:	f021 0103 	bic.w	r1, r1, #3
 8009e1a:	eb01 0a06 	add.w	sl, r1, r6
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 8088 	beq.w	8009f34 <_realloc_r+0x1ec>
 8009e24:	4573      	cmp	r3, lr
 8009e26:	d14b      	bne.n	8009ec0 <_realloc_r+0x178>
 8009e28:	eb0a 0300 	add.w	r3, sl, r0
 8009e2c:	f107 0110 	add.w	r1, r7, #16
 8009e30:	428b      	cmp	r3, r1
 8009e32:	db7f      	blt.n	8009f34 <_realloc_r+0x1ec>
 8009e34:	46a8      	mov	r8, r5
 8009e36:	68ea      	ldr	r2, [r5, #12]
 8009e38:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8009e3c:	60ca      	str	r2, [r1, #12]
 8009e3e:	6091      	str	r1, [r2, #8]
 8009e40:	1f32      	subs	r2, r6, #4
 8009e42:	2a24      	cmp	r2, #36	; 0x24
 8009e44:	d825      	bhi.n	8009e92 <_realloc_r+0x14a>
 8009e46:	2a13      	cmp	r2, #19
 8009e48:	d91b      	bls.n	8009e82 <_realloc_r+0x13a>
 8009e4a:	6821      	ldr	r1, [r4, #0]
 8009e4c:	60a9      	str	r1, [r5, #8]
 8009e4e:	6861      	ldr	r1, [r4, #4]
 8009e50:	60e9      	str	r1, [r5, #12]
 8009e52:	2a1b      	cmp	r2, #27
 8009e54:	d803      	bhi.n	8009e5e <_realloc_r+0x116>
 8009e56:	f105 0210 	add.w	r2, r5, #16
 8009e5a:	3408      	adds	r4, #8
 8009e5c:	e012      	b.n	8009e84 <_realloc_r+0x13c>
 8009e5e:	68a1      	ldr	r1, [r4, #8]
 8009e60:	6129      	str	r1, [r5, #16]
 8009e62:	68e1      	ldr	r1, [r4, #12]
 8009e64:	6169      	str	r1, [r5, #20]
 8009e66:	2a24      	cmp	r2, #36	; 0x24
 8009e68:	d003      	beq.n	8009e72 <_realloc_r+0x12a>
 8009e6a:	f105 0218 	add.w	r2, r5, #24
 8009e6e:	3410      	adds	r4, #16
 8009e70:	e008      	b.n	8009e84 <_realloc_r+0x13c>
 8009e72:	6922      	ldr	r2, [r4, #16]
 8009e74:	61aa      	str	r2, [r5, #24]
 8009e76:	6961      	ldr	r1, [r4, #20]
 8009e78:	61e9      	str	r1, [r5, #28]
 8009e7a:	f105 0220 	add.w	r2, r5, #32
 8009e7e:	3418      	adds	r4, #24
 8009e80:	e000      	b.n	8009e84 <_realloc_r+0x13c>
 8009e82:	4642      	mov	r2, r8
 8009e84:	6821      	ldr	r1, [r4, #0]
 8009e86:	6011      	str	r1, [r2, #0]
 8009e88:	6861      	ldr	r1, [r4, #4]
 8009e8a:	6051      	str	r1, [r2, #4]
 8009e8c:	68a1      	ldr	r1, [r4, #8]
 8009e8e:	6091      	str	r1, [r2, #8]
 8009e90:	e005      	b.n	8009e9e <_realloc_r+0x156>
 8009e92:	4640      	mov	r0, r8
 8009e94:	4621      	mov	r1, r4
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	f7ff fc59 	bl	800974e <memmove>
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	19ea      	adds	r2, r5, r7
 8009ea0:	1bdb      	subs	r3, r3, r7
 8009ea2:	f043 0301 	orr.w	r3, r3, #1
 8009ea6:	f8cb 2008 	str.w	r2, [fp, #8]
 8009eaa:	6053      	str	r3, [r2, #4]
 8009eac:	686b      	ldr	r3, [r5, #4]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	431f      	orrs	r7, r3
 8009eb4:	4648      	mov	r0, r9
 8009eb6:	606f      	str	r7, [r5, #4]
 8009eb8:	f7ff fc65 	bl	8009786 <__malloc_unlock>
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	e0e7      	b.n	800a090 <_realloc_r+0x348>
 8009ec0:	eb0a 0b00 	add.w	fp, sl, r0
 8009ec4:	45bb      	cmp	fp, r7
 8009ec6:	db35      	blt.n	8009f34 <_realloc_r+0x1ec>
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	4628      	mov	r0, r5
 8009ece:	60da      	str	r2, [r3, #12]
 8009ed0:	6093      	str	r3, [r2, #8]
 8009ed2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009ed6:	68eb      	ldr	r3, [r5, #12]
 8009ed8:	60d3      	str	r3, [r2, #12]
 8009eda:	609a      	str	r2, [r3, #8]
 8009edc:	1f32      	subs	r2, r6, #4
 8009ede:	2a24      	cmp	r2, #36	; 0x24
 8009ee0:	d823      	bhi.n	8009f2a <_realloc_r+0x1e2>
 8009ee2:	2a13      	cmp	r2, #19
 8009ee4:	d91a      	bls.n	8009f1c <_realloc_r+0x1d4>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	60ab      	str	r3, [r5, #8]
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	60eb      	str	r3, [r5, #12]
 8009eee:	2a1b      	cmp	r2, #27
 8009ef0:	d803      	bhi.n	8009efa <_realloc_r+0x1b2>
 8009ef2:	f105 0010 	add.w	r0, r5, #16
 8009ef6:	3408      	adds	r4, #8
 8009ef8:	e010      	b.n	8009f1c <_realloc_r+0x1d4>
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	612b      	str	r3, [r5, #16]
 8009efe:	68e3      	ldr	r3, [r4, #12]
 8009f00:	616b      	str	r3, [r5, #20]
 8009f02:	2a24      	cmp	r2, #36	; 0x24
 8009f04:	d003      	beq.n	8009f0e <_realloc_r+0x1c6>
 8009f06:	f105 0018 	add.w	r0, r5, #24
 8009f0a:	3410      	adds	r4, #16
 8009f0c:	e006      	b.n	8009f1c <_realloc_r+0x1d4>
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	61ab      	str	r3, [r5, #24]
 8009f12:	6963      	ldr	r3, [r4, #20]
 8009f14:	61eb      	str	r3, [r5, #28]
 8009f16:	f105 0020 	add.w	r0, r5, #32
 8009f1a:	3418      	adds	r4, #24
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	6003      	str	r3, [r0, #0]
 8009f20:	6863      	ldr	r3, [r4, #4]
 8009f22:	6043      	str	r3, [r0, #4]
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	6083      	str	r3, [r0, #8]
 8009f28:	e002      	b.n	8009f30 <_realloc_r+0x1e8>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	f7ff fc0f 	bl	800974e <memmove>
 8009f30:	465e      	mov	r6, fp
 8009f32:	e02e      	b.n	8009f92 <_realloc_r+0x24a>
 8009f34:	45ba      	cmp	sl, r7
 8009f36:	db32      	blt.n	8009f9e <_realloc_r+0x256>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	68eb      	ldr	r3, [r5, #12]
 8009f3c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009f40:	60d3      	str	r3, [r2, #12]
 8009f42:	609a      	str	r2, [r3, #8]
 8009f44:	1f32      	subs	r2, r6, #4
 8009f46:	2a24      	cmp	r2, #36	; 0x24
 8009f48:	d825      	bhi.n	8009f96 <_realloc_r+0x24e>
 8009f4a:	2a13      	cmp	r2, #19
 8009f4c:	d91a      	bls.n	8009f84 <_realloc_r+0x23c>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	60ab      	str	r3, [r5, #8]
 8009f52:	6863      	ldr	r3, [r4, #4]
 8009f54:	60eb      	str	r3, [r5, #12]
 8009f56:	2a1b      	cmp	r2, #27
 8009f58:	d803      	bhi.n	8009f62 <_realloc_r+0x21a>
 8009f5a:	f105 0010 	add.w	r0, r5, #16
 8009f5e:	3408      	adds	r4, #8
 8009f60:	e010      	b.n	8009f84 <_realloc_r+0x23c>
 8009f62:	68a3      	ldr	r3, [r4, #8]
 8009f64:	612b      	str	r3, [r5, #16]
 8009f66:	68e3      	ldr	r3, [r4, #12]
 8009f68:	616b      	str	r3, [r5, #20]
 8009f6a:	2a24      	cmp	r2, #36	; 0x24
 8009f6c:	d003      	beq.n	8009f76 <_realloc_r+0x22e>
 8009f6e:	f105 0018 	add.w	r0, r5, #24
 8009f72:	3410      	adds	r4, #16
 8009f74:	e006      	b.n	8009f84 <_realloc_r+0x23c>
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	61ab      	str	r3, [r5, #24]
 8009f7a:	6963      	ldr	r3, [r4, #20]
 8009f7c:	61eb      	str	r3, [r5, #28]
 8009f7e:	f105 0020 	add.w	r0, r5, #32
 8009f82:	3418      	adds	r4, #24
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	6003      	str	r3, [r0, #0]
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	6043      	str	r3, [r0, #4]
 8009f8c:	68a3      	ldr	r3, [r4, #8]
 8009f8e:	6083      	str	r3, [r0, #8]
 8009f90:	4656      	mov	r6, sl
 8009f92:	46a8      	mov	r8, r5
 8009f94:	e054      	b.n	800a040 <_realloc_r+0x2f8>
 8009f96:	4621      	mov	r1, r4
 8009f98:	f7ff fbd9 	bl	800974e <memmove>
 8009f9c:	e7f8      	b.n	8009f90 <_realloc_r+0x248>
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	f7ff f9b3 	bl	800930c <_malloc_r>
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d044      	beq.n	800a036 <_realloc_r+0x2ee>
 8009fac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009fb0:	f023 0301 	bic.w	r3, r3, #1
 8009fb4:	f1a0 0208 	sub.w	r2, r0, #8
 8009fb8:	4443      	add	r3, r8
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d105      	bne.n	8009fca <_realloc_r+0x282>
 8009fbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	441e      	add	r6, r3
 8009fc8:	e03a      	b.n	800a040 <_realloc_r+0x2f8>
 8009fca:	1f32      	subs	r2, r6, #4
 8009fcc:	2a24      	cmp	r2, #36	; 0x24
 8009fce:	d82b      	bhi.n	800a028 <_realloc_r+0x2e0>
 8009fd0:	2a13      	cmp	r2, #19
 8009fd2:	d91e      	bls.n	800a012 <_realloc_r+0x2ca>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	6003      	str	r3, [r0, #0]
 8009fd8:	6863      	ldr	r3, [r4, #4]
 8009fda:	6043      	str	r3, [r0, #4]
 8009fdc:	2a1b      	cmp	r2, #27
 8009fde:	d804      	bhi.n	8009fea <_realloc_r+0x2a2>
 8009fe0:	f100 0308 	add.w	r3, r0, #8
 8009fe4:	f104 0208 	add.w	r2, r4, #8
 8009fe8:	e015      	b.n	800a016 <_realloc_r+0x2ce>
 8009fea:	68a3      	ldr	r3, [r4, #8]
 8009fec:	6083      	str	r3, [r0, #8]
 8009fee:	68e3      	ldr	r3, [r4, #12]
 8009ff0:	60c3      	str	r3, [r0, #12]
 8009ff2:	2a24      	cmp	r2, #36	; 0x24
 8009ff4:	d004      	beq.n	800a000 <_realloc_r+0x2b8>
 8009ff6:	f100 0310 	add.w	r3, r0, #16
 8009ffa:	f104 0210 	add.w	r2, r4, #16
 8009ffe:	e00a      	b.n	800a016 <_realloc_r+0x2ce>
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	6103      	str	r3, [r0, #16]
 800a004:	6961      	ldr	r1, [r4, #20]
 800a006:	6141      	str	r1, [r0, #20]
 800a008:	f100 0318 	add.w	r3, r0, #24
 800a00c:	f104 0218 	add.w	r2, r4, #24
 800a010:	e001      	b.n	800a016 <_realloc_r+0x2ce>
 800a012:	4603      	mov	r3, r0
 800a014:	4622      	mov	r2, r4
 800a016:	6811      	ldr	r1, [r2, #0]
 800a018:	6019      	str	r1, [r3, #0]
 800a01a:	6851      	ldr	r1, [r2, #4]
 800a01c:	6059      	str	r1, [r3, #4]
 800a01e:	6892      	ldr	r2, [r2, #8]
 800a020:	609a      	str	r2, [r3, #8]
 800a022:	e004      	b.n	800a02e <_realloc_r+0x2e6>
 800a024:	20010164 	.word	0x20010164
 800a028:	4621      	mov	r1, r4
 800a02a:	f7ff fb90 	bl	800974e <memmove>
 800a02e:	4648      	mov	r0, r9
 800a030:	4621      	mov	r1, r4
 800a032:	f7fe fed1 	bl	8008dd8 <_free_r>
 800a036:	4648      	mov	r0, r9
 800a038:	f7ff fba5 	bl	8009786 <__malloc_unlock>
 800a03c:	4628      	mov	r0, r5
 800a03e:	e027      	b.n	800a090 <_realloc_r+0x348>
 800a040:	1bf3      	subs	r3, r6, r7
 800a042:	2b0f      	cmp	r3, #15
 800a044:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a048:	d913      	bls.n	800a072 <_realloc_r+0x32a>
 800a04a:	eb08 0107 	add.w	r1, r8, r7
 800a04e:	f002 0201 	and.w	r2, r2, #1
 800a052:	4317      	orrs	r7, r2
 800a054:	f043 0201 	orr.w	r2, r3, #1
 800a058:	440b      	add	r3, r1
 800a05a:	f8c8 7004 	str.w	r7, [r8, #4]
 800a05e:	604a      	str	r2, [r1, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	f042 0201 	orr.w	r2, r2, #1
 800a066:	605a      	str	r2, [r3, #4]
 800a068:	4648      	mov	r0, r9
 800a06a:	3108      	adds	r1, #8
 800a06c:	f7fe feb4 	bl	8008dd8 <_free_r>
 800a070:	e009      	b.n	800a086 <_realloc_r+0x33e>
 800a072:	f002 0201 	and.w	r2, r2, #1
 800a076:	4332      	orrs	r2, r6
 800a078:	4446      	add	r6, r8
 800a07a:	f8c8 2004 	str.w	r2, [r8, #4]
 800a07e:	6873      	ldr	r3, [r6, #4]
 800a080:	f043 0301 	orr.w	r3, r3, #1
 800a084:	6073      	str	r3, [r6, #4]
 800a086:	4648      	mov	r0, r9
 800a088:	f7ff fb7d 	bl	8009786 <__malloc_unlock>
 800a08c:	f108 0008 	add.w	r0, r8, #8
 800a090:	b003      	add	sp, #12
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	bf00      	nop

0800a098 <__fpclassifyd>:
 800a098:	ec51 0b10 	vmov	r0, r1, d0
 800a09c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	d100      	bne.n	800a0a6 <__fpclassifyd+0xe>
 800a0a4:	b178      	cbz	r0, 800a0c6 <__fpclassifyd+0x2e>
 800a0a6:	4a0c      	ldr	r2, [pc, #48]	; (800a0d8 <__fpclassifyd+0x40>)
 800a0a8:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 800a0ac:	4294      	cmp	r4, r2
 800a0ae:	d90c      	bls.n	800a0ca <__fpclassifyd+0x32>
 800a0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0b4:	d30b      	bcc.n	800a0ce <__fpclassifyd+0x36>
 800a0b6:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <__fpclassifyd+0x44>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d10a      	bne.n	800a0d2 <__fpclassifyd+0x3a>
 800a0bc:	f1d0 0001 	rsbs	r0, r0, #1
 800a0c0:	bf38      	it	cc
 800a0c2:	2000      	movcc	r0, #0
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	2002      	movs	r0, #2
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	2004      	movs	r0, #4
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	2003      	movs	r0, #3
 800a0d0:	bd10      	pop	{r4, pc}
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	bf00      	nop
 800a0d8:	7fdfffff 	.word	0x7fdfffff
 800a0dc:	7ff00000 	.word	0x7ff00000

0800a0e0 <_sbrk_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4c06      	ldr	r4, [pc, #24]	; (800a0fc <_sbrk_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	f7fc fca6 	bl	8006a3c <_sbrk>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_sbrk_r+0x1a>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_sbrk_r+0x1a>
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	200145e8 	.word	0x200145e8

0800a100 <__sread>:
 800a100:	b510      	push	{r4, lr}
 800a102:	460c      	mov	r4, r1
 800a104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a108:	f000 f9a6 	bl	800a458 <_read_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	db03      	blt.n	800a118 <__sread+0x18>
 800a110:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a112:	4403      	add	r3, r0
 800a114:	6563      	str	r3, [r4, #84]	; 0x54
 800a116:	bd10      	pop	{r4, pc}
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	bd10      	pop	{r4, pc}

0800a122 <__swrite>:
 800a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	461d      	mov	r5, r3
 800a128:	898b      	ldrh	r3, [r1, #12]
 800a12a:	05db      	lsls	r3, r3, #23
 800a12c:	4607      	mov	r7, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	4616      	mov	r6, r2
 800a132:	d505      	bpl.n	800a140 <__swrite+0x1e>
 800a134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a138:	2200      	movs	r2, #0
 800a13a:	2302      	movs	r3, #2
 800a13c:	f000 f97a 	bl	800a434 <_lseek_r>
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	4638      	mov	r0, r7
 800a14e:	4632      	mov	r2, r6
 800a150:	462b      	mov	r3, r5
 800a152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a156:	f000 b849 	b.w	800a1ec <_write_r>

0800a15a <__sseek>:
 800a15a:	b510      	push	{r4, lr}
 800a15c:	460c      	mov	r4, r1
 800a15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a162:	f000 f967 	bl	800a434 <_lseek_r>
 800a166:	1c43      	adds	r3, r0, #1
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	d103      	bne.n	800a174 <__sseek+0x1a>
 800a16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	bd10      	pop	{r4, pc}
 800a174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	6560      	str	r0, [r4, #84]	; 0x54
 800a17c:	bd10      	pop	{r4, pc}

0800a17e <__sclose>:
 800a17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a182:	f000 b873 	b.w	800a26c <_close_r>

0800a186 <__sprint_r>:
 800a186:	6893      	ldr	r3, [r2, #8]
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	4681      	mov	r9, r0
 800a18e:	460f      	mov	r7, r1
 800a190:	4614      	mov	r4, r2
 800a192:	b91b      	cbnz	r3, 800a19c <__sprint_r+0x16>
 800a194:	6053      	str	r3, [r2, #4]
 800a196:	4618      	mov	r0, r3
 800a198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a19c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a19e:	049d      	lsls	r5, r3, #18
 800a1a0:	d51d      	bpl.n	800a1de <__sprint_r+0x58>
 800a1a2:	6815      	ldr	r5, [r2, #0]
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	3508      	adds	r5, #8
 800a1a8:	b1bb      	cbz	r3, 800a1da <__sprint_r+0x54>
 800a1aa:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a1ae:	f855 ac08 	ldr.w	sl, [r5, #-8]
 800a1b2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	4546      	cmp	r6, r8
 800a1ba:	da09      	bge.n	800a1d0 <__sprint_r+0x4a>
 800a1bc:	4648      	mov	r0, r9
 800a1be:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	f000 f8bc 	bl	800a340 <_fputwc_r>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d00a      	beq.n	800a1e2 <__sprint_r+0x5c>
 800a1cc:	3601      	adds	r6, #1
 800a1ce:	e7f3      	b.n	800a1b8 <__sprint_r+0x32>
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
 800a1d6:	60a3      	str	r3, [r4, #8]
 800a1d8:	e7e4      	b.n	800a1a4 <__sprint_r+0x1e>
 800a1da:	4618      	mov	r0, r3
 800a1dc:	e001      	b.n	800a1e2 <__sprint_r+0x5c>
 800a1de:	f7fe feb3 	bl	8008f48 <__sfvwrite_r>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a1ec <_write_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4c07      	ldr	r4, [pc, #28]	; (800a20c <_write_r+0x20>)
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	6020      	str	r0, [r4, #0]
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7fc fc02 	bl	8006a04 <_write>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_write_r+0x1e>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	b103      	cbz	r3, 800a20a <_write_r+0x1e>
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	200145e8 	.word	0x200145e8

0800a210 <_calloc_r>:
 800a210:	b510      	push	{r4, lr}
 800a212:	4351      	muls	r1, r2
 800a214:	f7ff f87a 	bl	800930c <_malloc_r>
 800a218:	4604      	mov	r4, r0
 800a21a:	b320      	cbz	r0, 800a266 <_calloc_r+0x56>
 800a21c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a220:	f022 0203 	bic.w	r2, r2, #3
 800a224:	3a04      	subs	r2, #4
 800a226:	2a24      	cmp	r2, #36	; 0x24
 800a228:	d81a      	bhi.n	800a260 <_calloc_r+0x50>
 800a22a:	2a13      	cmp	r2, #19
 800a22c:	d912      	bls.n	800a254 <_calloc_r+0x44>
 800a22e:	2100      	movs	r1, #0
 800a230:	2a1b      	cmp	r2, #27
 800a232:	6001      	str	r1, [r0, #0]
 800a234:	6041      	str	r1, [r0, #4]
 800a236:	d802      	bhi.n	800a23e <_calloc_r+0x2e>
 800a238:	f100 0308 	add.w	r3, r0, #8
 800a23c:	e00b      	b.n	800a256 <_calloc_r+0x46>
 800a23e:	2a24      	cmp	r2, #36	; 0x24
 800a240:	6081      	str	r1, [r0, #8]
 800a242:	60c1      	str	r1, [r0, #12]
 800a244:	bf11      	iteee	ne
 800a246:	f100 0310 	addne.w	r3, r0, #16
 800a24a:	6101      	streq	r1, [r0, #16]
 800a24c:	f100 0318 	addeq.w	r3, r0, #24
 800a250:	6141      	streq	r1, [r0, #20]
 800a252:	e000      	b.n	800a256 <_calloc_r+0x46>
 800a254:	4603      	mov	r3, r0
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	605a      	str	r2, [r3, #4]
 800a25c:	609a      	str	r2, [r3, #8]
 800a25e:	e002      	b.n	800a266 <_calloc_r+0x56>
 800a260:	2100      	movs	r1, #0
 800a262:	f7fc fcae 	bl	8006bc2 <memset>
 800a266:	4620      	mov	r0, r4
 800a268:	bd10      	pop	{r4, pc}
	...

0800a26c <_close_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4c06      	ldr	r4, [pc, #24]	; (800a288 <_close_r+0x1c>)
 800a270:	2300      	movs	r3, #0
 800a272:	4605      	mov	r5, r0
 800a274:	4608      	mov	r0, r1
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	f7fc fc0c 	bl	8006a94 <_close>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_close_r+0x1a>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	b103      	cbz	r3, 800a286 <_close_r+0x1a>
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	200145e8 	.word	0x200145e8

0800a28c <_fclose_r>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	4605      	mov	r5, r0
 800a290:	460c      	mov	r4, r1
 800a292:	b909      	cbnz	r1, 800a298 <_fclose_r+0xc>
 800a294:	2000      	movs	r0, #0
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	b118      	cbz	r0, 800a2a2 <_fclose_r+0x16>
 800a29a:	6983      	ldr	r3, [r0, #24]
 800a29c:	b90b      	cbnz	r3, 800a2a2 <_fclose_r+0x16>
 800a29e:	f7fe fc85 	bl	8008bac <__sinit>
 800a2a2:	4b20      	ldr	r3, [pc, #128]	; (800a324 <_fclose_r+0x98>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d101      	bne.n	800a2ac <_fclose_r+0x20>
 800a2a8:	686c      	ldr	r4, [r5, #4]
 800a2aa:	e008      	b.n	800a2be <_fclose_r+0x32>
 800a2ac:	4b1e      	ldr	r3, [pc, #120]	; (800a328 <_fclose_r+0x9c>)
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d101      	bne.n	800a2b6 <_fclose_r+0x2a>
 800a2b2:	68ac      	ldr	r4, [r5, #8]
 800a2b4:	e003      	b.n	800a2be <_fclose_r+0x32>
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <_fclose_r+0xa0>)
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	bf08      	it	eq
 800a2bc:	68ec      	ldreq	r4, [r5, #12]
 800a2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0e6      	beq.n	800a294 <_fclose_r+0x8>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f7fe fc29 	bl	8008b20 <_fflush_r>
 800a2ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	b133      	cbz	r3, 800a2e2 <_fclose_r+0x56>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	4798      	blx	r3
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	bfb8      	it	lt
 800a2de:	f04f 36ff 	movlt.w	r6, #4294967295
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	061b      	lsls	r3, r3, #24
 800a2e6:	d503      	bpl.n	800a2f0 <_fclose_r+0x64>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	6921      	ldr	r1, [r4, #16]
 800a2ec:	f7fe fd74 	bl	8008dd8 <_free_r>
 800a2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f2:	b141      	cbz	r1, 800a306 <_fclose_r+0x7a>
 800a2f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	d002      	beq.n	800a302 <_fclose_r+0x76>
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f7fe fd6b 	bl	8008dd8 <_free_r>
 800a302:	2300      	movs	r3, #0
 800a304:	6363      	str	r3, [r4, #52]	; 0x34
 800a306:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a308:	b121      	cbz	r1, 800a314 <_fclose_r+0x88>
 800a30a:	4628      	mov	r0, r5
 800a30c:	f7fe fd64 	bl	8008dd8 <_free_r>
 800a310:	2300      	movs	r3, #0
 800a312:	64a3      	str	r3, [r4, #72]	; 0x48
 800a314:	f7fe fd0a 	bl	8008d2c <__sfp_lock_acquire>
 800a318:	2300      	movs	r3, #0
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f7fe fd07 	bl	8008d2e <__sfp_lock_release>
 800a320:	4630      	mov	r0, r6
 800a322:	bd70      	pop	{r4, r5, r6, pc}
 800a324:	0800a784 	.word	0x0800a784
 800a328:	0800a7a4 	.word	0x0800a7a4
 800a32c:	0800a7c4 	.word	0x0800a7c4

0800a330 <fclose>:
 800a330:	4b02      	ldr	r3, [pc, #8]	; (800a33c <fclose+0xc>)
 800a332:	4601      	mov	r1, r0
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	f7ff bfa9 	b.w	800a28c <_fclose_r>
 800a33a:	bf00      	nop
 800a33c:	20010104 	.word	0x20010104

0800a340 <_fputwc_r>:
 800a340:	8993      	ldrh	r3, [r2, #12]
 800a342:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a346:	460e      	mov	r6, r1
 800a348:	0499      	lsls	r1, r3, #18
 800a34a:	4680      	mov	r8, r0
 800a34c:	4614      	mov	r4, r2
 800a34e:	d406      	bmi.n	800a35e <_fputwc_r+0x1e>
 800a350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a354:	8193      	strh	r3, [r2, #12]
 800a356:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a35c:	6653      	str	r3, [r2, #100]	; 0x64
 800a35e:	f7fe ff5f 	bl	8009220 <__locale_mb_cur_max>
 800a362:	2801      	cmp	r0, #1
 800a364:	d106      	bne.n	800a374 <_fputwc_r+0x34>
 800a366:	1e73      	subs	r3, r6, #1
 800a368:	2bfe      	cmp	r3, #254	; 0xfe
 800a36a:	d803      	bhi.n	800a374 <_fputwc_r+0x34>
 800a36c:	f88d 6004 	strb.w	r6, [sp, #4]
 800a370:	4607      	mov	r7, r0
 800a372:	e00e      	b.n	800a392 <_fputwc_r+0x52>
 800a374:	4632      	mov	r2, r6
 800a376:	4640      	mov	r0, r8
 800a378:	a901      	add	r1, sp, #4
 800a37a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a37e:	f000 f8db 	bl	800a538 <_wcrtomb_r>
 800a382:	1c42      	adds	r2, r0, #1
 800a384:	4607      	mov	r7, r0
 800a386:	d104      	bne.n	800a392 <_fputwc_r+0x52>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	e02b      	b.n	800a3ea <_fputwc_r+0xaa>
 800a392:	2500      	movs	r5, #0
 800a394:	42bd      	cmp	r5, r7
 800a396:	d024      	beq.n	800a3e2 <_fputwc_r+0xa2>
 800a398:	68a2      	ldr	r2, [r4, #8]
 800a39a:	3a01      	subs	r2, #1
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	60a2      	str	r2, [r4, #8]
 800a3a0:	ab01      	add	r3, sp, #4
 800a3a2:	da16      	bge.n	800a3d2 <_fputwc_r+0x92>
 800a3a4:	69a1      	ldr	r1, [r4, #24]
 800a3a6:	428a      	cmp	r2, r1
 800a3a8:	db08      	blt.n	800a3bc <_fputwc_r+0x7c>
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	5d5b      	ldrb	r3, [r3, r5]
 800a3ae:	7013      	strb	r3, [r2, #0]
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	7819      	ldrb	r1, [r3, #0]
 800a3b4:	290a      	cmp	r1, #10
 800a3b6:	d110      	bne.n	800a3da <_fputwc_r+0x9a>
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	e001      	b.n	800a3c0 <_fputwc_r+0x80>
 800a3bc:	5d59      	ldrb	r1, [r3, r5]
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	f000 f85b 	bl	800a47c <__swbuf_r>
 800a3c6:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 800a3ca:	4258      	negs	r0, r3
 800a3cc:	4158      	adcs	r0, r3
 800a3ce:	b130      	cbz	r0, 800a3de <_fputwc_r+0x9e>
 800a3d0:	e009      	b.n	800a3e6 <_fputwc_r+0xa6>
 800a3d2:	6822      	ldr	r2, [r4, #0]
 800a3d4:	5d5b      	ldrb	r3, [r3, r5]
 800a3d6:	7013      	strb	r3, [r2, #0]
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	3501      	adds	r5, #1
 800a3e0:	e7d8      	b.n	800a394 <_fputwc_r+0x54>
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	e001      	b.n	800a3ea <_fputwc_r+0xaa>
 800a3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ea:	b002      	add	sp, #8
 800a3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3f0 <_fstat_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4c07      	ldr	r4, [pc, #28]	; (800a410 <_fstat_r+0x20>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	f7fc fb55 	bl	8006aac <_fstat>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d102      	bne.n	800a40c <_fstat_r+0x1c>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	b103      	cbz	r3, 800a40c <_fstat_r+0x1c>
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	bd38      	pop	{r3, r4, r5, pc}
 800a40e:	bf00      	nop
 800a410:	200145e8 	.word	0x200145e8

0800a414 <_isatty_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4c06      	ldr	r4, [pc, #24]	; (800a430 <_isatty_r+0x1c>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4605      	mov	r5, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	f7fc fb54 	bl	8006acc <_isatty>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_isatty_r+0x1a>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_isatty_r+0x1a>
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	200145e8 	.word	0x200145e8

0800a434 <_lseek_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4c07      	ldr	r4, [pc, #28]	; (800a454 <_lseek_r+0x20>)
 800a438:	4605      	mov	r5, r0
 800a43a:	2000      	movs	r0, #0
 800a43c:	6020      	str	r0, [r4, #0]
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	461a      	mov	r2, r3
 800a444:	f7fc fb4e 	bl	8006ae4 <_lseek>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_lseek_r+0x1e>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_lseek_r+0x1e>
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	200145e8 	.word	0x200145e8

0800a458 <_read_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4c07      	ldr	r4, [pc, #28]	; (800a478 <_read_r+0x20>)
 800a45c:	4605      	mov	r5, r0
 800a45e:	2000      	movs	r0, #0
 800a460:	6020      	str	r0, [r4, #0]
 800a462:	4608      	mov	r0, r1
 800a464:	4611      	mov	r1, r2
 800a466:	461a      	mov	r2, r3
 800a468:	f7fc fab0 	bl	80069cc <_read>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_read_r+0x1e>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	b103      	cbz	r3, 800a476 <_read_r+0x1e>
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200145e8 	.word	0x200145e8

0800a47c <__swbuf_r>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	460e      	mov	r6, r1
 800a480:	4614      	mov	r4, r2
 800a482:	4605      	mov	r5, r0
 800a484:	b118      	cbz	r0, 800a48e <__swbuf_r+0x12>
 800a486:	6983      	ldr	r3, [r0, #24]
 800a488:	b90b      	cbnz	r3, 800a48e <__swbuf_r+0x12>
 800a48a:	f7fe fb8f 	bl	8008bac <__sinit>
 800a48e:	4b27      	ldr	r3, [pc, #156]	; (800a52c <__swbuf_r+0xb0>)
 800a490:	429c      	cmp	r4, r3
 800a492:	d101      	bne.n	800a498 <__swbuf_r+0x1c>
 800a494:	686c      	ldr	r4, [r5, #4]
 800a496:	e008      	b.n	800a4aa <__swbuf_r+0x2e>
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <__swbuf_r+0xb4>)
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d101      	bne.n	800a4a2 <__swbuf_r+0x26>
 800a49e:	68ac      	ldr	r4, [r5, #8]
 800a4a0:	e003      	b.n	800a4aa <__swbuf_r+0x2e>
 800a4a2:	4b24      	ldr	r3, [pc, #144]	; (800a534 <__swbuf_r+0xb8>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	bf08      	it	eq
 800a4a8:	68ec      	ldreq	r4, [r5, #12]
 800a4aa:	69a3      	ldr	r3, [r4, #24]
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	0719      	lsls	r1, r3, #28
 800a4b2:	d50d      	bpl.n	800a4d0 <__swbuf_r+0x54>
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	b15b      	cbz	r3, 800a4d0 <__swbuf_r+0x54>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	049a      	lsls	r2, r3, #18
 800a4bc:	b2f6      	uxtb	r6, r6
 800a4be:	d410      	bmi.n	800a4e2 <__swbuf_r+0x66>
 800a4c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4cc:	6663      	str	r3, [r4, #100]	; 0x64
 800a4ce:	e008      	b.n	800a4e2 <__swbuf_r+0x66>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	f7fd fbe2 	bl	8007c9c <__swsetup_r>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d0ed      	beq.n	800a4b8 <__swbuf_r+0x3c>
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	bd70      	pop	{r4, r5, r6, pc}
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	1ac0      	subs	r0, r0, r3
 800a4e8:	6963      	ldr	r3, [r4, #20]
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	db05      	blt.n	800a4fa <__swbuf_r+0x7e>
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f7fe fb15 	bl	8008b20 <_fflush_r>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d1f0      	bne.n	800a4dc <__swbuf_r+0x60>
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	60a3      	str	r3, [r4, #8]
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	6022      	str	r2, [r4, #0]
 800a506:	701e      	strb	r6, [r3, #0]
 800a508:	6963      	ldr	r3, [r4, #20]
 800a50a:	3001      	adds	r0, #1
 800a50c:	4298      	cmp	r0, r3
 800a50e:	d004      	beq.n	800a51a <__swbuf_r+0x9e>
 800a510:	89a3      	ldrh	r3, [r4, #12]
 800a512:	07db      	lsls	r3, r3, #31
 800a514:	d507      	bpl.n	800a526 <__swbuf_r+0xaa>
 800a516:	2e0a      	cmp	r6, #10
 800a518:	d105      	bne.n	800a526 <__swbuf_r+0xaa>
 800a51a:	4628      	mov	r0, r5
 800a51c:	4621      	mov	r1, r4
 800a51e:	f7fe faff 	bl	8008b20 <_fflush_r>
 800a522:	2800      	cmp	r0, #0
 800a524:	d1da      	bne.n	800a4dc <__swbuf_r+0x60>
 800a526:	4630      	mov	r0, r6
 800a528:	bd70      	pop	{r4, r5, r6, pc}
 800a52a:	bf00      	nop
 800a52c:	0800a784 	.word	0x0800a784
 800a530:	0800a7a4 	.word	0x0800a7a4
 800a534:	0800a7c4 	.word	0x0800a7c4

0800a538 <_wcrtomb_r>:
 800a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	461d      	mov	r5, r3
 800a53e:	4b10      	ldr	r3, [pc, #64]	; (800a580 <_wcrtomb_r+0x48>)
 800a540:	b086      	sub	sp, #24
 800a542:	4604      	mov	r4, r0
 800a544:	4690      	mov	r8, r2
 800a546:	460e      	mov	r6, r1
 800a548:	681f      	ldr	r7, [r3, #0]
 800a54a:	b939      	cbnz	r1, 800a55c <_wcrtomb_r+0x24>
 800a54c:	f7fe fe64 	bl	8009218 <__locale_charset>
 800a550:	9500      	str	r5, [sp, #0]
 800a552:	4603      	mov	r3, r0
 800a554:	a903      	add	r1, sp, #12
 800a556:	4620      	mov	r0, r4
 800a558:	4632      	mov	r2, r6
 800a55a:	e006      	b.n	800a56a <_wcrtomb_r+0x32>
 800a55c:	f7fe fe5c 	bl	8009218 <__locale_charset>
 800a560:	9500      	str	r5, [sp, #0]
 800a562:	4603      	mov	r3, r0
 800a564:	4631      	mov	r1, r6
 800a566:	4620      	mov	r0, r4
 800a568:	4642      	mov	r2, r8
 800a56a:	47b8      	blx	r7
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d103      	bne.n	800a578 <_wcrtomb_r+0x40>
 800a570:	2300      	movs	r3, #0
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	238a      	movs	r3, #138	; 0x8a
 800a576:	6023      	str	r3, [r4, #0]
 800a578:	b006      	add	sp, #24
 800a57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57e:	bf00      	nop
 800a580:	20010574 	.word	0x20010574

0800a584 <__ascii_wctomb>:
 800a584:	b149      	cbz	r1, 800a59a <__ascii_wctomb+0x16>
 800a586:	2aff      	cmp	r2, #255	; 0xff
 800a588:	d904      	bls.n	800a594 <__ascii_wctomb+0x10>
 800a58a:	238a      	movs	r3, #138	; 0x8a
 800a58c:	6003      	str	r3, [r0, #0]
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295
 800a592:	4770      	bx	lr
 800a594:	700a      	strb	r2, [r1, #0]
 800a596:	2001      	movs	r0, #1
 800a598:	4770      	bx	lr
 800a59a:	4608      	mov	r0, r1
 800a59c:	4770      	bx	lr
	...

0800a5a0 <_init>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr

0800a5ac <_fini>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	bf00      	nop
 800a5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b2:	bc08      	pop	{r3}
 800a5b4:	469e      	mov	lr, r3
 800a5b6:	4770      	bx	lr
