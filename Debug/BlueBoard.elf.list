
BlueBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010508  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001800  080106d8  080106d8  000206d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ed8  08011ed8  00021ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011ee0  08011ee0  00021ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011ee4  08011ee4  00021ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000574  20010000  08011ee8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  00030574  2**0
                  CONTENTS
  8 .sram2        00000000  2004c000  2004c000  00030574  2**0
                  CONTENTS
  9 .bss          00004434  20010578  20010578  00030578  2**3
                  ALLOC
 10 ._user_heap_stack 00001100  200149ac  200149ac  00030578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189b6  00000000  00000000  000305a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048f4  00000000  00000000  00048f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e80  00000000  00000000  0004d850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b70  00000000  00000000  0004f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d2b8  00000000  00000000  00051240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008756  00000000  00000000  0005e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00066c4e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008cf4  00000000  00000000  00066ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20010578 	.word	0x20010578
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080106c0 	.word	0x080106c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2001057c 	.word	0x2001057c
 800020c:	080106c0 	.word	0x080106c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97e 	b.w	8000f94 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460e      	mov	r6, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9d08      	ldr	r5, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d150      	bne.n	8000d62 <__udivmoddi4+0xb2>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96c      	bls.n	8000da0 <__udivmoddi4+0xf0>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0420 	rsb	r4, lr, #32
 8000cd4:	fa20 f404 	lsr.w	r4, r0, r4
 8000cd8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000cdc:	ea44 0c06 	orr.w	ip, r4, r6
 8000ce0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	fbbc f0f9 	udiv	r0, ip, r9
 8000cf2:	fa1f f887 	uxth.w	r8, r7
 8000cf6:	fb09 c610 	mls	r6, r9, r0, ip
 8000cfa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cfe:	fb00 f308 	mul.w	r3, r0, r8
 8000d02:	42b3      	cmp	r3, r6
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x6a>
 8000d06:	19f6      	adds	r6, r6, r7
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 8122 	bcs.w	8000f54 <__udivmoddi4+0x2a4>
 8000d10:	42b3      	cmp	r3, r6
 8000d12:	f240 811f 	bls.w	8000f54 <__udivmoddi4+0x2a4>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443e      	add	r6, r7
 8000d1a:	1af6      	subs	r6, r6, r3
 8000d1c:	b2a2      	uxth	r2, r4
 8000d1e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d22:	fb09 6613 	mls	r6, r9, r3, r6
 8000d26:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d2a:	fb03 f808 	mul.w	r8, r3, r8
 8000d2e:	45a0      	cmp	r8, r4
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x96>
 8000d32:	19e4      	adds	r4, r4, r7
 8000d34:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x2a0>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x2a0>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ebc8 0404 	rsb	r4, r8, r4
 8000d4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d062      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d54:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d58:	2300      	movs	r3, #0
 8000d5a:	602c      	str	r4, [r5, #0]
 8000d5c:	606b      	str	r3, [r5, #4]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0xc6>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d055      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d70:	4608      	mov	r0, r1
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	f040 8090 	bne.w	8000ea0 <__udivmoddi4+0x1f0>
 8000d80:	42b3      	cmp	r3, r6
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xda>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	46b4      	mov	ip, r6
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d040      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	b912      	cbnz	r2, 8000da8 <__udivmoddi4+0xf8>
 8000da2:	2701      	movs	r7, #1
 8000da4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000da8:	fab7 fe87 	clz	lr, r7
 8000dac:	f1be 0f00 	cmp.w	lr, #0
 8000db0:	d135      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db2:	1bf3      	subs	r3, r6, r7
 8000db4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc2:	0c22      	lsrs	r2, r4, #16
 8000dc4:	fb08 3610 	mls	r6, r8, r0, r3
 8000dc8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dcc:	fb0c f300 	mul.w	r3, ip, r0
 8000dd0:	42b3      	cmp	r3, r6
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19f6      	adds	r6, r6, r7
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42b3      	cmp	r3, r6
 8000dde:	f200 80ce 	bhi.w	8000f7e <__udivmoddi4+0x2ce>
 8000de2:	4610      	mov	r0, r2
 8000de4:	1af6      	subs	r6, r6, r3
 8000de6:	b2a2      	uxth	r2, r4
 8000de8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000dec:	fb08 6613 	mls	r6, r8, r3, r6
 8000df0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000df4:	fb0c fc03 	mul.w	ip, ip, r3
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b5 	bhi.w	8000f74 <__udivmoddi4+0x2c4>
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	ebcc 0404 	rsb	r4, ip, r4
 8000e10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e14:	e79c      	b.n	8000d50 <__udivmoddi4+0xa0>
 8000e16:	4629      	mov	r1, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0120 	rsb	r1, lr, #32
 8000e22:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e32:	40ce      	lsrs	r6, r1
 8000e34:	ea49 0903 	orr.w	r9, r9, r3
 8000e38:	fbb6 faf8 	udiv	sl, r6, r8
 8000e3c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e40:	fb08 661a 	mls	r6, r8, sl, r6
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e4c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e50:	429a      	cmp	r2, r3
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1be>
 8000e58:	19db      	adds	r3, r3, r7
 8000e5a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e5e:	f080 8087 	bcs.w	8000f70 <__udivmoddi4+0x2c0>
 8000e62:	429a      	cmp	r2, r3
 8000e64:	f240 8084 	bls.w	8000f70 <__udivmoddi4+0x2c0>
 8000e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e6c:	443b      	add	r3, r7
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	fa1f f989 	uxth.w	r9, r9
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000e80:	fb01 f60c 	mul.w	r6, r1, ip
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x1e8>
 8000e88:	19db      	adds	r3, r3, r7
 8000e8a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e8e:	d26b      	bcs.n	8000f68 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d969      	bls.n	8000f68 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	443b      	add	r3, r7
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000e9e:	e78e      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000ea0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ea4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	fa20 f70e 	lsr.w	r7, r0, lr
 8000eb0:	fa06 f401 	lsl.w	r4, r6, r1
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ebc:	433c      	orrs	r4, r7
 8000ebe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000ec2:	0c27      	lsrs	r7, r4, #16
 8000ec4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000ec8:	fa1f f883 	uxth.w	r8, r3
 8000ecc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000ed0:	fb09 f708 	mul.w	r7, r9, r8
 8000ed4:	42b7      	cmp	r7, r6
 8000ed6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eda:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x242>
 8000ee0:	18f6      	adds	r6, r6, r3
 8000ee2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee6:	d241      	bcs.n	8000f6c <__udivmoddi4+0x2bc>
 8000ee8:	42b7      	cmp	r7, r6
 8000eea:	d93f      	bls.n	8000f6c <__udivmoddi4+0x2bc>
 8000eec:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef0:	441e      	add	r6, r3
 8000ef2:	1bf6      	subs	r6, r6, r7
 8000ef4:	b2a0      	uxth	r0, r4
 8000ef6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000efa:	fb0c 6614 	mls	r6, ip, r4, r6
 8000efe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f02:	fb04 f808 	mul.w	r8, r4, r8
 8000f06:	45b8      	cmp	r8, r7
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x26a>
 8000f0a:	18ff      	adds	r7, r7, r3
 8000f0c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f10:	d228      	bcs.n	8000f64 <__udivmoddi4+0x2b4>
 8000f12:	45b8      	cmp	r8, r7
 8000f14:	d926      	bls.n	8000f64 <__udivmoddi4+0x2b4>
 8000f16:	3c02      	subs	r4, #2
 8000f18:	441f      	add	r7, r3
 8000f1a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f1e:	ebc8 0707 	rsb	r7, r8, r7
 8000f22:	fba0 8902 	umull	r8, r9, r0, r2
 8000f26:	454f      	cmp	r7, r9
 8000f28:	4644      	mov	r4, r8
 8000f2a:	464e      	mov	r6, r9
 8000f2c:	d314      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2e:	d029      	beq.n	8000f84 <__udivmoddi4+0x2d4>
 8000f30:	b365      	cbz	r5, 8000f8c <__udivmoddi4+0x2dc>
 8000f32:	ebba 0304 	subs.w	r3, sl, r4
 8000f36:	eb67 0706 	sbc.w	r7, r7, r6
 8000f3a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f3e:	40cb      	lsrs	r3, r1
 8000f40:	40cf      	lsrs	r7, r1
 8000f42:	ea4e 0303 	orr.w	r3, lr, r3
 8000f46:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f50:	4613      	mov	r3, r2
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x96>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e6e0      	b.n	8000d1a <__udivmoddi4+0x6a>
 8000f58:	ebb8 0402 	subs.w	r4, r8, r2
 8000f5c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7e5      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f64:	4604      	mov	r4, r0
 8000f66:	e7d8      	b.n	8000f1a <__udivmoddi4+0x26a>
 8000f68:	4611      	mov	r1, r2
 8000f6a:	e795      	b.n	8000e98 <__udivmoddi4+0x1e8>
 8000f6c:	4681      	mov	r9, r0
 8000f6e:	e7c0      	b.n	8000ef2 <__udivmoddi4+0x242>
 8000f70:	468a      	mov	sl, r1
 8000f72:	e77c      	b.n	8000e6e <__udivmoddi4+0x1be>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e748      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xe4>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	443e      	add	r6, r7
 8000f82:	e72f      	b.n	8000de4 <__udivmoddi4+0x134>
 8000f84:	45c2      	cmp	sl, r8
 8000f86:	d3e7      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f88:	463e      	mov	r6, r7
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fa0:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <NVIC_SystemReset+0x20>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <NVIC_SystemReset+0x24>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60cb      	str	r3, [r1, #12]
 8000fb0:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000fb4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 8000fb6:	e7fd      	b.n	8000fb4 <NVIC_SystemReset+0x1c>
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0004 	.word	0x05fa0004

08000fc0 <OS_SHL_RegisterCommands>:
 * -----------------------------------------------------------------------------
 */


void OS_SHL_RegisterCommands( void )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    FreeRTOS_CLIRegisterCommand( &xSys );
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <OS_SHL_RegisterCommands+0x64>)
 8000fc6:	f008 fac5 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xSet );
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <OS_SHL_RegisterCommands+0x68>)
 8000fcc:	f008 fac2 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xGet );
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <OS_SHL_RegisterCommands+0x6c>)
 8000fd2:	f008 fabf 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xSto );
 8000fd6:	4816      	ldr	r0, [pc, #88]	; (8001030 <OS_SHL_RegisterCommands+0x70>)
 8000fd8:	f008 fabc 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xPow );
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <OS_SHL_RegisterCommands+0x74>)
 8000fde:	f008 fab9 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xMot );
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <OS_SHL_RegisterCommands+0x78>)
 8000fe4:	f008 fab6 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xDsv );
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <OS_SHL_RegisterCommands+0x7c>)
 8000fea:	f008 fab3 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAsv );
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <OS_SHL_RegisterCommands+0x80>)
 8000ff0:	f008 fab0 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xMon );
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <OS_SHL_RegisterCommands+0x84>)
 8000ff6:	f008 faad 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xDio );
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <OS_SHL_RegisterCommands+0x88>)
 8000ffc:	f008 faaa 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xHmi );
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <OS_SHL_RegisterCommands+0x8c>)
 8001002:	f008 faa7 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xLed );
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <OS_SHL_RegisterCommands+0x90>)
 8001008:	f008 faa4 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAvs );
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <OS_SHL_RegisterCommands+0x94>)
 800100e:	f008 faa1 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAvd );
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <OS_SHL_RegisterCommands+0x98>)
 8001014:	f008 fa9e 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xStr );
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <OS_SHL_RegisterCommands+0x9c>)
 800101a:	f008 fa9b 	bl	8009554 <FreeRTOS_CLIRegisterCommand>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	080118b8 	.word	0x080118b8
 8001028:	080118c8 	.word	0x080118c8
 800102c:	080118d8 	.word	0x080118d8
 8001030:	080118e8 	.word	0x080118e8
 8001034:	080118f8 	.word	0x080118f8
 8001038:	08011908 	.word	0x08011908
 800103c:	08011918 	.word	0x08011918
 8001040:	08011928 	.word	0x08011928
 8001044:	08011938 	.word	0x08011938
 8001048:	08011948 	.word	0x08011948
 800104c:	08011958 	.word	0x08011958
 8001050:	08011968 	.word	0x08011968
 8001054:	08011978 	.word	0x08011978
 8001058:	08011988 	.word	0x08011988
 800105c:	08011998 	.word	0x08011998

08001060 <OS_SHL_SysCmd>:
 * Commands functions
 * -----------------------------------------------------------------------------
 */

static BaseType_t OS_SHL_SysCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
    const char *const pcHeader_list =
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <OS_SHL_SysCmd+0xe4>)
 800106e:	61bb      	str	r3, [r7, #24]

    char* pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	461a      	mov	r2, r3
 8001076:	2101      	movs	r1, #1
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f008 fb33 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 800107e:	6178      	str	r0, [r7, #20]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	461a      	mov	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

    /* 'RESET' Sub-command: reset the microcontroller */
    if(!strcasecmp(pcParameter1, "reset")) {
 800108c:	492e      	ldr	r1, [pc, #184]	; (8001148 <OS_SHL_SysCmd+0xe8>)
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f00a fb20 	bl	800b6d4 <strcasecmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d108      	bne.n	80010ac <OS_SHL_SysCmd+0x4c>
        snprintf( pcWriteBuffer, xWriteBufferLen, "Resetting..."SHELL_EOL);
 800109a:	4a2c      	ldr	r2, [pc, #176]	; (800114c <OS_SHL_SysCmd+0xec>)
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f00a fac2 	bl	800b628 <snprintf>
        NVIC_SystemReset(); /* Auto-kill */
 80010a4:	f7ff ff78 	bl	8000f98 <NVIC_SystemReset>
        return pdFALSE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e047      	b.n	800113c <OS_SHL_SysCmd+0xdc>

    /* 'TASKS-LIST' Sub-command: display tasks informations */
    } else if(!strcasecmp(pcParameter1, "tasks-list")) {
 80010ac:	4928      	ldr	r1, [pc, #160]	; (8001150 <OS_SHL_SysCmd+0xf0>)
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f00a fb10 	bl	800b6d4 <strcasecmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12d      	bne.n	8001116 <OS_SHL_SysCmd+0xb6>

        /* Generate a table of task stats. */
        strcpy( pcWriteBuffer, "Task" );
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <OS_SHL_SysCmd+0xf4>)
 80010be:	6810      	ldr	r0, [r2, #0]
 80010c0:	6018      	str	r0, [r3, #0]
 80010c2:	7912      	ldrb	r2, [r2, #4]
 80010c4:	711a      	strb	r2, [r3, #4]
        pcWriteBuffer += strlen( pcWriteBuffer );
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff f8a2 	bl	8000210 <strlen>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

        /* Minus three for the null terminator and half the number of characters in
        "Task" so the column lines up with the centre of the heading. */
        configASSERT( configMAX_TASK_NAME_LEN > 3 );
        for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80010d4:	2304      	movs	r3, #4
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	e00b      	b.n	80010f2 <OS_SHL_SysCmd+0x92>
        {
            /* Add a space to align columns after the task's name. */
            *pcWriteBuffer = ' ';
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2220      	movs	r2, #32
 80010de:	701a      	strb	r2, [r3, #0]
            pcWriteBuffer++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]

            /* Ensure always terminated. */
            *pcWriteBuffer = 0x00;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
        pcWriteBuffer += strlen( pcWriteBuffer );

        /* Minus three for the null terminator and half the number of characters in
        "Task" so the column lines up with the centre of the heading. */
        configASSERT( configMAX_TASK_NAME_LEN > 3 );
        for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	3301      	adds	r3, #1
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	2b0c      	cmp	r3, #12
 80010f6:	ddf0      	ble.n	80010da <OS_SHL_SysCmd+0x7a>
            pcWriteBuffer++;

            /* Ensure always terminated. */
            *pcWriteBuffer = 0x00;
        }
        strcpy( pcWriteBuffer, pcHeader_list );
 80010f8:	69b9      	ldr	r1, [r7, #24]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f00a fb08 	bl	800b710 <strcpy>
        vTaskList( pcWriteBuffer + strlen( pcHeader_list ) );
 8001100:	69b8      	ldr	r0, [r7, #24]
 8001102:	f7ff f885 	bl	8000210 <strlen>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f007 fe43 	bl	8008d98 <vTaskList>
        return pdFALSE;
 8001112:	2300      	movs	r3, #0
 8001114:	e012      	b.n	800113c <OS_SHL_SysCmd+0xdc>

    /* 'TASKS-STATS' Sub-command: display tasks statistics */
    } else if(!strcasecmp(pcParameter1, "tasks-stats")) {
 8001116:	4910      	ldr	r1, [pc, #64]	; (8001158 <OS_SHL_SysCmd+0xf8>)
 8001118:	6978      	ldr	r0, [r7, #20]
 800111a:	f00a fadb 	bl	800b6d4 <strcasecmp>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <OS_SHL_SysCmd+0xce>
        HW_SYS_GetRunTimeStats( pcWriteBuffer );
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f009 fe09 	bl	800ad3c <HW_SYS_GetRunTimeStats>
        return pdFALSE;
 800112a:	2300      	movs	r3, #0
 800112c:	e006      	b.n	800113c <OS_SHL_SysCmd+0xdc>

    /* Error case */
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: unknown system command %s"SHELL_EOL, pcParameter1);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <OS_SHL_SysCmd+0xfc>)
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f00a fa77 	bl	800b628 <snprintf>
        return pdFALSE;
 800113a:	2300      	movs	r3, #0
    }

}
 800113c:	4618      	mov	r0, r3
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	08010ec8 	.word	0x08010ec8
 8001148:	08010f14 	.word	0x08010f14
 800114c:	08010f1c 	.word	0x08010f1c
 8001150:	08010f2c 	.word	0x08010f2c
 8001154:	08010f38 	.word	0x08010f38
 8001158:	08010f40 	.word	0x08010f40
 800115c:	08010f4c 	.word	0x08010f4c

08001160 <OS_SHL_SetCmd>:

static BaseType_t OS_SHL_SetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	461a      	mov	r2, r3
 8001172:	2101      	movs	r1, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f008 fab5 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 800117a:	61f8      	str	r0, [r7, #28]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	461a      	mov	r2, r3
 8001182:	2102      	movs	r1, #2
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f008 faad 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 800118a:	61b8      	str	r0, [r7, #24]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	461a      	mov	r2, r3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	4413      	add	r3, r2
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	461a      	mov	r2, r3
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	4413      	add	r3, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

    /* Decode variable path */
    return OS_SHL_SetVariable(pcParameter1, pcParameter2, pcWriteBuffer, xWriteBufferLen);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	69b9      	ldr	r1, [r7, #24]
 80011aa:	69f8      	ldr	r0, [r7, #28]
 80011ac:	f000 fa94 	bl	80016d8 <OS_SHL_SetVariable>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop

080011bc <OS_SHL_GetCmd>:

static BaseType_t OS_SHL_GetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
    char* pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	461a      	mov	r2, r3
 80011ce:	2101      	movs	r1, #1
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f008 fa87 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 80011d6:	6178      	str	r0, [r7, #20]

    /* Terminate string */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	461a      	mov	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

    /* Decode variable path */
    return OS_SHL_GetVariable(pcParameter1, pcWriteBuffer, xWriteBufferLen);
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	68f9      	ldr	r1, [r7, #12]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f000 fadb 	bl	80017a4 <OS_SHL_GetVariable>
 80011ee:	4603      	mov	r3, r0

}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <OS_SHL_StoCmd>:

static BaseType_t OS_SHL_StoCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <OS_SHL_PowCmd>:

static BaseType_t OS_SHL_PowCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af02      	add	r7, sp, #8
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
    char* pcParameter1;
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;
    uint8_t allSupplies = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HW_PWR_TypeDef powerSupply;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	461a      	mov	r2, r3
 800122c:	2101      	movs	r1, #1
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f008 fa58 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 8001234:	6238      	str	r0, [r7, #32]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	461a      	mov	r2, r3
 800123c:	2102      	movs	r1, #2
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f008 fa50 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 8001244:	61f8      	str	r0, [r7, #28]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	461a      	mov	r2, r3
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	461a      	mov	r2, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	4413      	add	r3, r2
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

    /* Decode <no> argument */
    if(!strcasecmp(pcParameter1, "1")) {
 800125e:	493f      	ldr	r1, [pc, #252]	; (800135c <OS_SHL_PowCmd+0x148>)
 8001260:	6a38      	ldr	r0, [r7, #32]
 8001262:	f00a fa37 	bl	800b6d4 <strcasecmp>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <OS_SHL_PowCmd+0x60>
        powerSupply = HW_PWR_VP1;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001272:	e028      	b.n	80012c6 <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "2")) {
 8001274:	493a      	ldr	r1, [pc, #232]	; (8001360 <OS_SHL_PowCmd+0x14c>)
 8001276:	6a38      	ldr	r0, [r7, #32]
 8001278:	f00a fa2c 	bl	800b6d4 <strcasecmp>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <OS_SHL_PowCmd+0x76>
        powerSupply = HW_PWR_VP2;
 8001282:	2301      	movs	r3, #1
 8001284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001288:	e01d      	b.n	80012c6 <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "3")) {
 800128a:	4936      	ldr	r1, [pc, #216]	; (8001364 <OS_SHL_PowCmd+0x150>)
 800128c:	6a38      	ldr	r0, [r7, #32]
 800128e:	f00a fa21 	bl	800b6d4 <strcasecmp>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <OS_SHL_PowCmd+0x8c>
        powerSupply = HW_PWR_VP3;
 8001298:	2302      	movs	r3, #2
 800129a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800129e:	e012      	b.n	80012c6 <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "ALL")) {
 80012a0:	4931      	ldr	r1, [pc, #196]	; (8001368 <OS_SHL_PowCmd+0x154>)
 80012a2:	6a38      	ldr	r0, [r7, #32]
 80012a4:	f00a fa16 	bl	800b6d4 <strcasecmp>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <OS_SHL_PowCmd+0xa2>
        allSupplies = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012b4:	e007      	b.n	80012c6 <OS_SHL_PowCmd+0xb2>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not define power-supply no to %s"SHELL_EOL, pcParameter1);
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	4a2c      	ldr	r2, [pc, #176]	; (800136c <OS_SHL_PowCmd+0x158>)
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f00a f9b3 	bl	800b628 <snprintf>
        return pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e046      	b.n	8001354 <OS_SHL_PowCmd+0x140>
    }

    /* Decode <state> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 80012c6:	492a      	ldr	r1, [pc, #168]	; (8001370 <OS_SHL_PowCmd+0x15c>)
 80012c8:	69f8      	ldr	r0, [r7, #28]
 80012ca:	f00a fa03 	bl	800b6d4 <strcasecmp>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d113      	bne.n	80012fc <OS_SHL_PowCmd+0xe8>
        if(!allSupplies) {
 80012d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <OS_SHL_PowCmd+0xd4>
            HW_PWR_Disable(powerSupply);
 80012dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e0:	4618      	mov	r0, r3
 80012e2:	f009 fb7b 	bl	800a9dc <HW_PWR_Disable>
 80012e6:	e02c      	b.n	8001342 <OS_SHL_PowCmd+0x12e>
        } else {
            HW_PWR_Disable(HW_PWR_VP1);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f009 fb77 	bl	800a9dc <HW_PWR_Disable>
            HW_PWR_Disable(HW_PWR_VP2);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f009 fb74 	bl	800a9dc <HW_PWR_Disable>
            HW_PWR_Disable(HW_PWR_VP3);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f009 fb71 	bl	800a9dc <HW_PWR_Disable>
 80012fa:	e022      	b.n	8001342 <OS_SHL_PowCmd+0x12e>
        }
    } else if(!strcasecmp(pcParameter2, "ON")) {
 80012fc:	491d      	ldr	r1, [pc, #116]	; (8001374 <OS_SHL_PowCmd+0x160>)
 80012fe:	69f8      	ldr	r0, [r7, #28]
 8001300:	f00a f9e8 	bl	800b6d4 <strcasecmp>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d113      	bne.n	8001332 <OS_SHL_PowCmd+0x11e>
        if(!allSupplies) {
 800130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <OS_SHL_PowCmd+0x10a>
            HW_PWR_Enable(powerSupply);
 8001312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001316:	4618      	mov	r0, r3
 8001318:	f009 fb46 	bl	800a9a8 <HW_PWR_Enable>
 800131c:	e011      	b.n	8001342 <OS_SHL_PowCmd+0x12e>
        } else {
            HW_PWR_Enable(HW_PWR_VP1);
 800131e:	2000      	movs	r0, #0
 8001320:	f009 fb42 	bl	800a9a8 <HW_PWR_Enable>
            HW_PWR_Enable(HW_PWR_VP2);
 8001324:	2001      	movs	r0, #1
 8001326:	f009 fb3f 	bl	800a9a8 <HW_PWR_Enable>
            HW_PWR_Enable(HW_PWR_VP3);
 800132a:	2002      	movs	r0, #2
 800132c:	f009 fb3c 	bl	800a9a8 <HW_PWR_Enable>
 8001330:	e007      	b.n	8001342 <OS_SHL_PowCmd+0x12e>
        }
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not define power-supply state to %s"SHELL_EOL, pcParameter2);
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <OS_SHL_PowCmd+0x164>)
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f00a f975 	bl	800b628 <snprintf>
        return pdFALSE;
 800133e:	2300      	movs	r3, #0
 8001340:	e008      	b.n	8001354 <OS_SHL_PowCmd+0x140>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, "Defined power-supply %s to %s"SHELL_EOL, pcParameter1, pcParameter2);
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <OS_SHL_PowCmd+0x168>)
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f00a f96b 	bl	800b628 <snprintf>
    return pdFALSE;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	08010f70 	.word	0x08010f70
 8001360:	08010f74 	.word	0x08010f74
 8001364:	08010f78 	.word	0x08010f78
 8001368:	08010f7c 	.word	0x08010f7c
 800136c:	08010f80 	.word	0x08010f80
 8001370:	08010fb0 	.word	0x08010fb0
 8001374:	08010fb4 	.word	0x08010fb4
 8001378:	08010fb8 	.word	0x08010fb8
 800137c:	08010fec 	.word	0x08010fec

08001380 <OS_SHL_MotCmd>:

// Motor control. Not reentrant function
static BaseType_t OS_SHL_MotCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    /* Note that the use of the static parameter means this function is not reentrant. */
    static BaseType_t lParameterNumber = 0;

        if( lParameterNumber == 0 )
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d115      	bne.n	80013c0 <OS_SHL_MotCmd+0x40>
        {
            /* lParameterNumber is 0, so this is the first time the function has been
            called since the command was entered.  Return the string "The parameters
            were:" before returning any parameter strings. */
            sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <OS_SHL_MotCmd+0xc4>)
 8001398:	461c      	mov	r4, r3
 800139a:	4615      	mov	r5, r2
 800139c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139e:	6020      	str	r0, [r4, #0]
 80013a0:	6061      	str	r1, [r4, #4]
 80013a2:	60a2      	str	r2, [r4, #8]
 80013a4:	60e3      	str	r3, [r4, #12]
 80013a6:	6828      	ldr	r0, [r5, #0]
 80013a8:	6120      	str	r0, [r4, #16]
 80013aa:	88ab      	ldrh	r3, [r5, #4]
 80013ac:	79aa      	ldrb	r2, [r5, #6]
 80013ae:	82a3      	strh	r3, [r4, #20]
 80013b0:	4613      	mov	r3, r2
 80013b2:	75a3      	strb	r3, [r4, #22]

            /* Next time the function is called the first parameter will be echoed
            back. */
            lParameterNumber = 1L;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

            /* There is more data to be returned as no parameters have been echoed
            back yet, so set xReturn to pdPASS so the function will be called again. */
            xReturn = pdPASS;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e03a      	b.n	8001436 <OS_SHL_MotCmd+0xb6>
        }
        else
        {
            /* lParameter is not 0, so holds the number of the parameter that should
            be returned.  Obtain the complete parameter string. */
            pcParameter = FreeRTOS_CLIGetParameter
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	461a      	mov	r2, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f008 f989 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 80013d2:	61b8      	str	r0, [r7, #24]
                                lParameterNumber,
                                /* Store the parameter string length. */
                                &lParameterStringLength
                            );

            if( pcParameter != NULL )
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d025      	beq.n	8001426 <OS_SHL_MotCmd+0xa6>
            {
                /* There was another parameter to return.  Copy it into pcWriteBuffer.
                in the format "[number]: [Parameter String". */
                memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	2100      	movs	r1, #0
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f00a f8c5 	bl	800b56e <memset>
                sprintf( pcWriteBuffer, "%ld: ", lParameterNumber );
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4917      	ldr	r1, [pc, #92]	; (8001448 <OS_SHL_MotCmd+0xc8>)
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f00a f94d 	bl	800b68c <sprintf>
                strncat( pcWriteBuffer, pcParameter, lParameterStringLength );
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	461a      	mov	r2, r3
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f00a f991 	bl	800b720 <strncat>
                strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7fe ff06 	bl	8000210 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <OS_SHL_MotCmd+0xcc>)
 800140e:	8811      	ldrh	r1, [r2, #0]
 8001410:	7892      	ldrb	r2, [r2, #2]
 8001412:	8019      	strh	r1, [r3, #0]
 8001414:	709a      	strb	r2, [r3, #2]

                /* There might be more parameters to return after this one, so again
                set xReturn to pdTRUE. */
                xReturn = pdTRUE;
 8001416:	2301      	movs	r3, #1
 8001418:	61fb      	str	r3, [r7, #28]
                lParameterNumber++;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e007      	b.n	8001436 <OS_SHL_MotCmd+0xb6>
            }
            else
            {
                /* No more parameters were found.  Make sure the write buffer does
                not contain a valid string to prevent junk being printed out. */
                pcWriteBuffer[ 0 ] = 0x00;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

                /* There is no more data to return, so this time set xReturn to
                pdFALSE. */
                xReturn = pdFALSE;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]

                /* Start over the next time this command is executed. */
                lParameterNumber = 0;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <OS_SHL_MotCmd+0xc0>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
            }
        }

        return xReturn;
 8001436:	69fb      	ldr	r3, [r7, #28]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}
 8001440:	20010594 	.word	0x20010594
 8001444:	0801100c 	.word	0x0801100c
 8001448:	08011024 	.word	0x08011024
 800144c:	0801102c 	.word	0x0801102c

08001450 <OS_SHL_DsvCmd>:

static BaseType_t OS_SHL_DsvCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <OS_SHL_AsvCmd>:

static BaseType_t OS_SHL_AsvCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <OS_SHL_MonCmd>:

static BaseType_t OS_SHL_MonCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <OS_SHL_DioCmd>:

static BaseType_t OS_SHL_DioCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <OS_SHL_HmiCmd>:

static BaseType_t OS_SHL_HmiCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <OS_SHL_LedCmd>:


static BaseType_t OS_SHL_LedCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	461a      	mov	r2, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f008 f8f7 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 80014f6:	61f8      	str	r0, [r7, #28]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	461a      	mov	r2, r3
 80014fe:	2102      	movs	r1, #2
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f008 f8ef 	bl	80096e4 <FreeRTOS_CLIGetParameter>
 8001506:	61b8      	str	r0, [r7, #24]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	461a      	mov	r2, r3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	461a      	mov	r2, r3
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	4413      	add	r3, r2
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]

    /* Decode <mode> argument */
    if(!strcasecmp(pcParameter1, "STATIC")) {
 8001520:	494a      	ldr	r1, [pc, #296]	; (800164c <OS_SHL_LedCmd+0x170>)
 8001522:	69f8      	ldr	r0, [r7, #28]
 8001524:	f00a f8d6 	bl	800b6d4 <strcasecmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <OS_SHL_LedCmd+0x5a>
        LedSetMode(HW_LED_STATIC);
 800152e:	2000      	movs	r0, #0
 8001530:	f000 fce8 	bl	8001f04 <LedSetMode>
 8001534:	e01d      	b.n	8001572 <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_SLOW")) {
 8001536:	4946      	ldr	r1, [pc, #280]	; (8001650 <OS_SHL_LedCmd+0x174>)
 8001538:	69f8      	ldr	r0, [r7, #28]
 800153a:	f00a f8cb 	bl	800b6d4 <strcasecmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <OS_SHL_LedCmd+0x70>
        LedSetMode(HW_LED_BLINK_SLOW);
 8001544:	2001      	movs	r0, #1
 8001546:	f000 fcdd 	bl	8001f04 <LedSetMode>
 800154a:	e012      	b.n	8001572 <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_FAST")) {
 800154c:	4941      	ldr	r1, [pc, #260]	; (8001654 <OS_SHL_LedCmd+0x178>)
 800154e:	69f8      	ldr	r0, [r7, #28]
 8001550:	f00a f8c0 	bl	800b6d4 <strcasecmp>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <OS_SHL_LedCmd+0x86>
        LedSetMode(HW_LED_BLINK_FAST);
 800155a:	2002      	movs	r0, #2
 800155c:	f000 fcd2 	bl	8001f04 <LedSetMode>
 8001560:	e007      	b.n	8001572 <OS_SHL_LedCmd+0x96>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not set LED mode to %s"SHELL_EOL, pcParameter1);
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <OS_SHL_LedCmd+0x17c>)
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f00a f85d 	bl	800b628 <snprintf>
        return pdFALSE;
 800156e:	2300      	movs	r3, #0
 8001570:	e068      	b.n	8001644 <OS_SHL_LedCmd+0x168>
    }

    /* Decode <color> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 8001572:	493a      	ldr	r1, [pc, #232]	; (800165c <OS_SHL_LedCmd+0x180>)
 8001574:	69b8      	ldr	r0, [r7, #24]
 8001576:	f00a f8ad 	bl	800b6d4 <strcasecmp>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <OS_SHL_LedCmd+0xac>
        LedSetColor(HW_LED_OFF);
 8001580:	2000      	movs	r0, #0
 8001582:	f000 fca1 	bl	8001ec8 <LedSetColor>
 8001586:	e054      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "WHITE")) {
 8001588:	4935      	ldr	r1, [pc, #212]	; (8001660 <OS_SHL_LedCmd+0x184>)
 800158a:	69b8      	ldr	r0, [r7, #24]
 800158c:	f00a f8a2 	bl	800b6d4 <strcasecmp>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <OS_SHL_LedCmd+0xc2>
        LedSetColor(HW_LED_WHITE);
 8001596:	2008      	movs	r0, #8
 8001598:	f000 fc96 	bl	8001ec8 <LedSetColor>
 800159c:	e049      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "RED")) {
 800159e:	4931      	ldr	r1, [pc, #196]	; (8001664 <OS_SHL_LedCmd+0x188>)
 80015a0:	69b8      	ldr	r0, [r7, #24]
 80015a2:	f00a f897 	bl	800b6d4 <strcasecmp>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d103      	bne.n	80015b4 <OS_SHL_LedCmd+0xd8>
        LedSetColor(HW_LED_RED);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 fc8b 	bl	8001ec8 <LedSetColor>
 80015b2:	e03e      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "GREEN")) {
 80015b4:	492c      	ldr	r1, [pc, #176]	; (8001668 <OS_SHL_LedCmd+0x18c>)
 80015b6:	69b8      	ldr	r0, [r7, #24]
 80015b8:	f00a f88c 	bl	800b6d4 <strcasecmp>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <OS_SHL_LedCmd+0xee>
        LedSetColor(HW_LED_GREEN);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f000 fc80 	bl	8001ec8 <LedSetColor>
 80015c8:	e033      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "BLUE")) {
 80015ca:	4928      	ldr	r1, [pc, #160]	; (800166c <OS_SHL_LedCmd+0x190>)
 80015cc:	69b8      	ldr	r0, [r7, #24]
 80015ce:	f00a f881 	bl	800b6d4 <strcasecmp>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <OS_SHL_LedCmd+0x104>
        LedSetColor(HW_LED_BLUE);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 fc75 	bl	8001ec8 <LedSetColor>
 80015de:	e028      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "CYAN")) {
 80015e0:	4923      	ldr	r1, [pc, #140]	; (8001670 <OS_SHL_LedCmd+0x194>)
 80015e2:	69b8      	ldr	r0, [r7, #24]
 80015e4:	f00a f876 	bl	800b6d4 <strcasecmp>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <OS_SHL_LedCmd+0x11a>
        LedSetColor(HW_LED_CYAN);
 80015ee:	2004      	movs	r0, #4
 80015f0:	f000 fc6a 	bl	8001ec8 <LedSetColor>
 80015f4:	e01d      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "MAGENTA")) {
 80015f6:	491f      	ldr	r1, [pc, #124]	; (8001674 <OS_SHL_LedCmd+0x198>)
 80015f8:	69b8      	ldr	r0, [r7, #24]
 80015fa:	f00a f86b 	bl	800b6d4 <strcasecmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <OS_SHL_LedCmd+0x130>
        LedSetColor(HW_LED_MAGENTA);
 8001604:	2007      	movs	r0, #7
 8001606:	f000 fc5f 	bl	8001ec8 <LedSetColor>
 800160a:	e012      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "YELLOW")) {
 800160c:	491a      	ldr	r1, [pc, #104]	; (8001678 <OS_SHL_LedCmd+0x19c>)
 800160e:	69b8      	ldr	r0, [r7, #24]
 8001610:	f00a f860 	bl	800b6d4 <strcasecmp>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <OS_SHL_LedCmd+0x146>
        LedSetColor(HW_LED_YELLOW);
 800161a:	2005      	movs	r0, #5
 800161c:	f000 fc54 	bl	8001ec8 <LedSetColor>
 8001620:	e007      	b.n	8001632 <OS_SHL_LedCmd+0x156>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not set LED color to %s"SHELL_EOL, pcParameter2);
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <OS_SHL_LedCmd+0x1a0>)
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f009 fffd 	bl	800b628 <snprintf>
        return pdFALSE;
 800162e:	2300      	movs	r3, #0
 8001630:	e008      	b.n	8001644 <OS_SHL_LedCmd+0x168>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, "Defined LED to %s %s"SHELL_EOL, pcParameter1, pcParameter2);
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <OS_SHL_LedCmd+0x1a4>)
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f009 fff3 	bl	800b628 <snprintf>
    return pdFALSE;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	08011030 	.word	0x08011030
 8001650:	08011038 	.word	0x08011038
 8001654:	08011044 	.word	0x08011044
 8001658:	08011050 	.word	0x08011050
 800165c:	08010fb0 	.word	0x08010fb0
 8001660:	08011078 	.word	0x08011078
 8001664:	08011080 	.word	0x08011080
 8001668:	08011084 	.word	0x08011084
 800166c:	0801108c 	.word	0x0801108c
 8001670:	08011094 	.word	0x08011094
 8001674:	0801109c 	.word	0x0801109c
 8001678:	080110a4 	.word	0x080110a4
 800167c:	080110ac 	.word	0x080110ac
 8001680:	080110d4 	.word	0x080110d4

08001684 <OS_SHL_AvsCmd>:

static BaseType_t OS_SHL_AvsCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <OS_SHL_AvdCmd>:

static BaseType_t OS_SHL_AvdCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop

080016bc <OS_SHL_StrCmd>:

static BaseType_t OS_SHL_StrCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <OS_SHL_SetVariable>:

/*
 * Decode a variable path/name and update it with the provided value
 */
BaseType_t OS_SHL_SetVariable(char* path, char* value, char* ret, size_t retLength)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]

    char* item;

    /* 1st level decoding */
    item = strsep(&path, SHELL_PATH_DELIM);
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	4926      	ldr	r1, [pc, #152]	; (8001784 <OS_SHL_SetVariable+0xac>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00a f851 	bl	800b794 <strsep>
 80016f2:	6178      	str	r0, [r7, #20]

    if(!strcasecmp(item, "sys")) {
 80016f4:	4924      	ldr	r1, [pc, #144]	; (8001788 <OS_SHL_SetVariable+0xb0>)
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f009 ffec 	bl	800b6d4 <strcasecmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d136      	bne.n	8001770 <OS_SHL_SetVariable+0x98>
       if((item = strsep(&path, SHELL_PATH_DELIM))) {
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	491f      	ldr	r1, [pc, #124]	; (8001784 <OS_SHL_SetVariable+0xac>)
 8001708:	4618      	mov	r0, r3
 800170a:	f00a f843 	bl	800b794 <strsep>
 800170e:	6178      	str	r0, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02c      	beq.n	8001770 <OS_SHL_SetVariable+0x98>

           if(!strcasecmp(item, "shell")) {
 8001716:	491d      	ldr	r1, [pc, #116]	; (800178c <OS_SHL_SetVariable+0xb4>)
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f009 ffdb 	bl	800b6d4 <strcasecmp>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d125      	bne.n	8001770 <OS_SHL_SetVariable+0x98>
               if((item = strsep(&path, SHELL_PATH_DELIM))) {
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <OS_SHL_SetVariable+0xac>)
 800172a:	4618      	mov	r0, r3
 800172c:	f00a f832 	bl	800b794 <strsep>
 8001730:	6178      	str	r0, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <OS_SHL_SetVariable+0x98>

                   if(!strcasecmp(item, "echo")) {
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <OS_SHL_SetVariable+0xb8>)
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f009 ffca 	bl	800b6d4 <strcasecmp>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d114      	bne.n	8001770 <OS_SHL_SetVariable+0x98>
                       // TODO: bool fetcher
                       if(!strcasecmp(value, "1")) {
 8001746:	4913      	ldr	r1, [pc, #76]	; (8001794 <OS_SHL_SetVariable+0xbc>)
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f009 ffc3 	bl	800b6d4 <strcasecmp>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <OS_SHL_SetVariable+0x84>
                           OS_SHL_Config.echo = true;
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <OS_SHL_SetVariable+0xc0>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e009      	b.n	8001770 <OS_SHL_SetVariable+0x98>
                       }
                       else if(!strcasecmp(value, "0")) {
 800175c:	490f      	ldr	r1, [pc, #60]	; (800179c <OS_SHL_SetVariable+0xc4>)
 800175e:	68b8      	ldr	r0, [r7, #8]
 8001760:	f009 ffb8 	bl	800b6d4 <strcasecmp>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <OS_SHL_SetVariable+0x98>
                           OS_SHL_Config.echo = false;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <OS_SHL_SetVariable+0xc0>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
           } // shell
       }

   } // sys

    snprintf(ret, retLength, "");
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <OS_SHL_SetVariable+0xc8>)
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f009 ff57 	bl	800b628 <snprintf>
    return pdFALSE;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	080110ec 	.word	0x080110ec
 8001788:	080110f0 	.word	0x080110f0
 800178c:	080110f4 	.word	0x080110f4
 8001790:	080110fc 	.word	0x080110fc
 8001794:	08011104 	.word	0x08011104
 8001798:	20014950 	.word	0x20014950
 800179c:	08011108 	.word	0x08011108
 80017a0:	0801110c 	.word	0x0801110c

080017a4 <OS_SHL_GetVariable>:
/*
 * Decode a variable path/name and write its current value
 * into the result string.
 */
BaseType_t OS_SHL_GetVariable(char* path, char* ret, size_t retLength)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
                                        robot.cs.pos.pos_s16.x,
                                        robot.cs.pos.pos_s16.y,
                                        robot.cs.pos.pos_s16.a);*/

    /* 1st level decoding */
    item = strsep(&path, SHELL_PATH_DELIM);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4972      	ldr	r1, [pc, #456]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f009 ffec 	bl	800b794 <strsep>
 80017bc:	6178      	str	r0, [r7, #20]

    if(!strcasecmp(item, "robot")) {
 80017be:	4971      	ldr	r1, [pc, #452]	; (8001984 <OS_SHL_GetVariable+0x1e0>)
 80017c0:	6978      	ldr	r0, [r7, #20]
 80017c2:	f009 ff87 	bl	800b6d4 <strcasecmp>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 80a4 	bne.w	8001916 <OS_SHL_GetVariable+0x172>
        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	496b      	ldr	r1, [pc, #428]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f009 ffdd 	bl	800b794 <strsep>
 80017da:	6178      	str	r0, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80c9 	beq.w	8001976 <OS_SHL_GetVariable+0x1d2>

            if(!strcasecmp(item, "cs")) {
 80017e4:	4968      	ldr	r1, [pc, #416]	; (8001988 <OS_SHL_GetVariable+0x1e4>)
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f009 ff74 	bl	800b6d4 <strcasecmp>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 80c1 	bne.w	8001976 <OS_SHL_GetVariable+0x1d2>
                if((item = strsep(&path, SHELL_PATH_DELIM))) {
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4961      	ldr	r1, [pc, #388]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f009 ffca 	bl	800b794 <strsep>
 8001800:	6178      	str	r0, [r7, #20]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80b6 	beq.w	8001976 <OS_SHL_GetVariable+0x1d2>

                    if(!strcasecmp(item, "pos")) {
 800180a:	4960      	ldr	r1, [pc, #384]	; (800198c <OS_SHL_GetVariable+0x1e8>)
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f009 ff61 	bl	800b6d4 <strcasecmp>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14d      	bne.n	80018b4 <OS_SHL_GetVariable+0x110>
                        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4958      	ldr	r1, [pc, #352]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 800181e:	4618      	mov	r0, r3
 8001820:	f009 ffb8 	bl	800b794 <strsep>
 8001824:	6178      	str	r0, [r7, #20]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d02f      	beq.n	800188c <OS_SHL_GetVariable+0xe8>

                            if(!strcasecmp(item, "x")) {
 800182c:	4958      	ldr	r1, [pc, #352]	; (8001990 <OS_SHL_GetVariable+0x1ec>)
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f009 ff50 	bl	800b6d4 <strcasecmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <OS_SHL_GetVariable+0xa8>
                                snprintf(ret, retLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.x);
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 800183c:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <OS_SHL_GetVariable+0x1f4>)
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	68b8      	ldr	r0, [r7, #8]
 8001846:	f009 feef 	bl	800b628 <snprintf>
 800184a:	e094      	b.n	8001976 <OS_SHL_GetVariable+0x1d2>
                            }
                            else if(!strcasecmp(item, "y")) {
 800184c:	4953      	ldr	r1, [pc, #332]	; (800199c <OS_SHL_GetVariable+0x1f8>)
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f009 ff40 	bl	800b6d4 <strcasecmp>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <OS_SHL_GetVariable+0xc8>
                                snprintf(ret, retLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.y);
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 800185c:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <OS_SHL_GetVariable+0x1f4>)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68b8      	ldr	r0, [r7, #8]
 8001866:	f009 fedf 	bl	800b628 <snprintf>
 800186a:	e084      	b.n	8001976 <OS_SHL_GetVariable+0x1d2>
                            }
                            else if(!strcasecmp(item, "a")) {
 800186c:	494c      	ldr	r1, [pc, #304]	; (80019a0 <OS_SHL_GetVariable+0x1fc>)
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f009 ff30 	bl	800b6d4 <strcasecmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d17d      	bne.n	8001976 <OS_SHL_GetVariable+0x1d2>
                                snprintf(ret, retLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
 800187a:	4b46      	ldr	r3, [pc, #280]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 800187c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8001880:	4a45      	ldr	r2, [pc, #276]	; (8001998 <OS_SHL_GetVariable+0x1f4>)
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f009 fecf 	bl	800b628 <snprintf>
 800188a:	e074      	b.n	8001976 <OS_SHL_GetVariable+0x1d2>
                            }
                        } else {
                            snprintf(ret, retLength, "robot.cs.pos=%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
                                    robot.cs.pos.pos_s16.x,
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 800188e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
                            }
                            else if(!strcasecmp(item, "a")) {
                                snprintf(ret, retLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
                            }
                        } else {
                            snprintf(ret, retLength, "robot.cs.pos=%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
 8001892:	4619      	mov	r1, r3
                                    robot.cs.pos.pos_s16.x,
                                    robot.cs.pos.pos_s16.y,
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 8001896:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
                            }
                            else if(!strcasecmp(item, "a")) {
                                snprintf(ret, retLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
                            }
                        } else {
                            snprintf(ret, retLength, "robot.cs.pos=%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
 800189a:	461a      	mov	r2, r3
                                    robot.cs.pos.pos_s16.x,
                                    robot.cs.pos.pos_s16.y,
                                    robot.cs.pos.pos_s16.a);
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 800189e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
                            }
                            else if(!strcasecmp(item, "a")) {
                                snprintf(ret, retLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
                            }
                        } else {
                            snprintf(ret, retLength, "robot.cs.pos=%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9200      	str	r2, [sp, #0]
 80018a6:	460b      	mov	r3, r1
 80018a8:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <OS_SHL_GetVariable+0x200>)
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f009 febb 	bl	800b628 <snprintf>
 80018b2:	e060      	b.n	8001976 <OS_SHL_GetVariable+0x1d2>
                                    robot.cs.pos.pos_s16.y,
                                    robot.cs.pos.pos_s16.a);
                        }
                    }

                    else if(!strcasecmp(item, "cs_a")) {
 80018b4:	493c      	ldr	r1, [pc, #240]	; (80019a8 <OS_SHL_GetVariable+0x204>)
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f009 ff0c 	bl	800b6d4 <strcasecmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d159      	bne.n	8001976 <OS_SHL_GetVariable+0x1d2>
                        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	492e      	ldr	r1, [pc, #184]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f009 ff63 	bl	800b794 <strsep>
 80018ce:	6178      	str	r0, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d04f      	beq.n	8001976 <OS_SHL_GetVariable+0x1d2>

                            if(!strcasecmp(item, "consign"))
 80018d6:	4935      	ldr	r1, [pc, #212]	; (80019ac <OS_SHL_GetVariable+0x208>)
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f009 fefb 	bl	800b6d4 <strcasecmp>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d108      	bne.n	80018f6 <OS_SHL_GetVariable+0x152>
                            {
                                snprintf(ret, retLength, "%ld"SHELL_EOL, robot.cs.cs_a.consign_value);
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 80018e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018ea:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <OS_SHL_GetVariable+0x20c>)
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	68b8      	ldr	r0, [r7, #8]
 80018f0:	f009 fe9a 	bl	800b628 <snprintf>
 80018f4:	e03f      	b.n	8001976 <OS_SHL_GetVariable+0x1d2>
                            }
                            else if(!strcasecmp(item, "out"))
 80018f6:	492f      	ldr	r1, [pc, #188]	; (80019b4 <OS_SHL_GetVariable+0x210>)
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f009 feeb 	bl	800b6d4 <strcasecmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d138      	bne.n	8001976 <OS_SHL_GetVariable+0x1d2>
                            {
                                snprintf(ret, retLength, "%ld"SHELL_EOL, robot.cs.cs_a.out_value);
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <OS_SHL_GetVariable+0x1f0>)
 8001906:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <OS_SHL_GetVariable+0x20c>)
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f009 fe8a 	bl	800b628 <snprintf>
 8001914:	e02f      	b.n	8001976 <OS_SHL_GetVariable+0x1d2>
            }

        }

    } // robot
    else if(!strcasecmp(item, "sys")) {
 8001916:	4928      	ldr	r1, [pc, #160]	; (80019b8 <OS_SHL_GetVariable+0x214>)
 8001918:	6978      	ldr	r0, [r7, #20]
 800191a:	f009 fedb 	bl	800b6d4 <strcasecmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d128      	bne.n	8001976 <OS_SHL_GetVariable+0x1d2>
        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4915      	ldr	r1, [pc, #84]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 800192a:	4618      	mov	r0, r3
 800192c:	f009 ff32 	bl	800b794 <strsep>
 8001930:	6178      	str	r0, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01e      	beq.n	8001976 <OS_SHL_GetVariable+0x1d2>

            if(!strcasecmp(item, "shell")) {
 8001938:	4920      	ldr	r1, [pc, #128]	; (80019bc <OS_SHL_GetVariable+0x218>)
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f009 feca 	bl	800b6d4 <strcasecmp>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d117      	bne.n	8001976 <OS_SHL_GetVariable+0x1d2>
                if((item = strsep(&path, SHELL_PATH_DELIM))) {
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <OS_SHL_GetVariable+0x1dc>)
 800194c:	4618      	mov	r0, r3
 800194e:	f009 ff21 	bl	800b794 <strsep>
 8001952:	6178      	str	r0, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <OS_SHL_GetVariable+0x1d2>

                    if(!strcasecmp(item, "echo")) {
 800195a:	4919      	ldr	r1, [pc, #100]	; (80019c0 <OS_SHL_GetVariable+0x21c>)
 800195c:	6978      	ldr	r0, [r7, #20]
 800195e:	f009 feb9 	bl	800b6d4 <strcasecmp>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <OS_SHL_GetVariable+0x1d2>
                        snprintf(ret, retLength, "%u"SHELL_EOL, OS_SHL_Config.echo);
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <OS_SHL_GetVariable+0x220>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <OS_SHL_GetVariable+0x224>)
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f009 fe59 	bl	800b628 <snprintf>
        }

    } // sys

    // If this point is reached; there was an error
    return pdFALSE;
 8001976:	2300      	movs	r3, #0
    snprintf(ret, retLength, "Error: unrecognized value"SHELL_EOL);
    return pdFALSE;

   //printf("* %s"SHELL_EOL, item);

}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	080110ec 	.word	0x080110ec
 8001984:	08011110 	.word	0x08011110
 8001988:	08011118 	.word	0x08011118
 800198c:	0801111c 	.word	0x0801111c
 8001990:	08011120 	.word	0x08011120
 8001994:	200146f0 	.word	0x200146f0
 8001998:	08011124 	.word	0x08011124
 800199c:	0801112c 	.word	0x0801112c
 80019a0:	08011130 	.word	0x08011130
 80019a4:	08011134 	.word	0x08011134
 80019a8:	0801114c 	.word	0x0801114c
 80019ac:	08011154 	.word	0x08011154
 80019b0:	0801115c 	.word	0x0801115c
 80019b4:	08011164 	.word	0x08011164
 80019b8:	080110f0 	.word	0x080110f0
 80019bc:	080110f4 	.word	0x080110f4
 80019c0:	080110fc 	.word	0x080110fc
 80019c4:	20014950 	.word	0x20014950
 80019c8:	08011168 	.word	0x08011168

080019cc <vApplicationMallocFailedHook>:
 */

#include "blueboard.h"

void vApplicationMallocFailedHook( void )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 80019d0:	4902      	ldr	r1, [pc, #8]	; (80019dc <vApplicationMallocFailedHook+0x10>)
 80019d2:	2022      	movs	r0, #34	; 0x22
 80019d4:	f000 f814 	bl	8001a00 <vAssertCalled>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	08011170 	.word	0x08011170

080019e0 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    function is called if a stack overflow is detected. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 80019ea:	4904      	ldr	r1, [pc, #16]	; (80019fc <vApplicationStackOverflowHook+0x1c>)
 80019ec:	2030      	movs	r0, #48	; 0x30
 80019ee:	f000 f807 	bl	8001a00 <vAssertCalled>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	08011170 	.word	0x08011170

08001a00 <vAssertCalled>:
    ( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]

    ( void ) pcFile;
    ( void ) ulLine;

    taskENTER_CRITICAL();
 8001a0e:	f004 ff7b 	bl	8006908 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while( ul == 0 )
 8001a12:	e000      	b.n	8001a16 <vAssertCalled+0x16>
 8001a14:	bf00      	nop
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0fb      	beq.n	8001a14 <vAssertCalled+0x14>
        {
            __NOP();
        }
    }
    taskEXIT_CRITICAL();
 8001a1c:	f004 ffa0 	bl	8006960 <vPortExitCritical>
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_read>:
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e008      	b.n	8001a4c <_read+0x24>
    {
        //*ptr++ = __io_getchar();
        //*ptr++ = HW_DBG_Get();
        HW_DBG_Get((ptr++));
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f008 fa25 	bl	8009e90 <HW_DBG_Get>

int _read (int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf2      	blt.n	8001a3a <_read+0x12>
        //*ptr++ = __io_getchar();
        //*ptr++ = HW_DBG_Get();
        HW_DBG_Get((ptr++));
    }

return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop

08001a60 <_write>:

int _write(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e009      	b.n	8001a86 <_write+0x26>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f008 f9ae 	bl	8009ddc <HW_DBG_Put>

int _write(int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf1      	blt.n	8001a72 <_write+0x12>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
    }
    return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x50>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x16>
        heap_end = &end;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <_sbrk+0x50>)
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <_sbrk+0x54>)
 8001aac:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <_sbrk+0x50>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <_sbrk+0x50>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	466a      	mov	r2, sp
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d907      	bls.n	8001ad2 <_sbrk+0x3a>
    {
//      write(1, "Heap and stack collision\n", 25);
//      abort();
        errno = ENOMEM;
 8001ac2:	f009 fd1d 	bl	800b500 <__errno>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	230c      	movs	r3, #12
 8001aca:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	e006      	b.n	8001ae0 <_sbrk+0x48>
    }

    heap_end += incr;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <_sbrk+0x50>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <_sbrk+0x50>)
 8001adc:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20010598 	.word	0x20010598
 8001aec:	200149ac 	.word	0x200149ac

08001af0 <_close>:

int _close(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b18:	605a      	str	r2, [r3, #4]
    return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_isatty>:

int _isatty(int file)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
    return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <OS_CreateASVTask>:
static void OS_ASVTask(void *pvParameters);
void ASV_Create(ASV_ControlTypeDef* ASV, HW_ASV_ChannelTypeDef channel, uint16_t min_Position, uint16_t max_Position);


void OS_CreateASVTask(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af02      	add	r7, sp, #8
	xASVMsgQueue = xQueueCreate( MAX_ASV_IN_QUEUE, sizeof(ASV_ControlTypeDef));
 8001b62:	2200      	movs	r2, #0
 8001b64:	2108      	movs	r1, #8
 8001b66:	2005      	movs	r0, #5
 8001b68:	f005 f9f8 	bl	8006f5c <xQueueGenericCreate>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <OS_CreateASVTask+0x84>)
 8001b70:	601a      	str	r2, [r3, #0]
    if(xASVMsgQueue==NULL)
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <OS_CreateASVTask+0x84>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <OS_CreateASVTask+0x26>
    {
    	printf("insufficient heap RAM available for ASVMsgQueue\r\n");
 8001b7a:	481a      	ldr	r0, [pc, #104]	; (8001be4 <OS_CreateASVTask+0x88>)
 8001b7c:	f009 fd4c 	bl	800b618 <puts>
    	while(1);
 8001b80:	e7fe      	b.n	8001b80 <OS_CreateASVTask+0x24>
    }
    ASV_Create(&parasol, HW_ASV_CHANNEL1, 1400, 2300);
 8001b82:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8001b86:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4816      	ldr	r0, [pc, #88]	; (8001be8 <OS_CreateASVTask+0x8c>)
 8001b8e:	f000 f859 	bl	8001c44 <ASV_Create>
    ASV_Create(&centralIndex, HW_ASV_CHANNEL2, MIN_INDEX, MAX_INDEX);
 8001b92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4813      	ldr	r0, [pc, #76]	; (8001bec <OS_CreateASVTask+0x90>)
 8001b9e:	f000 f851 	bl	8001c44 <ASV_Create>
    ASV_Create(&leftArm, HW_ASV_CHANNEL4, 2000, 4000);
 8001ba2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001ba6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001baa:	2103      	movs	r1, #3
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <OS_CreateASVTask+0x94>)
 8001bae:	f000 f849 	bl	8001c44 <ASV_Create>
    ASV_Create(&rightArm, HW_ASV_CHANNEL2, 2000, 4000);
 8001bb2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001bb6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bba:	2101      	movs	r1, #1
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <OS_CreateASVTask+0x98>)
 8001bbe:	f000 f841 	bl	8001c44 <ASV_Create>



	xTaskCreate(OS_ASVTask, "ANALOG SERVO", 350, NULL, OS_TASK_PRIORITY_ASV, NULL );
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001bd0:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <OS_CreateASVTask+0x9c>)
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <OS_CreateASVTask+0xa0>)
 8001bd4:	f005 ff46 	bl	8007a64 <xTaskCreate>
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2001059c 	.word	0x2001059c
 8001be4:	08011194 	.word	0x08011194
 8001be8:	200105b8 	.word	0x200105b8
 8001bec:	200105b0 	.word	0x200105b0
 8001bf0:	200105a0 	.word	0x200105a0
 8001bf4:	200105a8 	.word	0x200105a8
 8001bf8:	080111c8 	.word	0x080111c8
 8001bfc:	08001c01 	.word	0x08001c01

08001c00 <OS_ASVTask>:

static void OS_ASVTask( void *pvParameters )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    ( void ) pvParameters;

    for( ;; )
    {
    	/* Block on the queue to wait for data to arrive */
    	xQueueReceive(xASVMsgQueue, &ASV_To_Manage, portMAX_DELAY);
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <OS_ASVTask+0x40>)
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	f107 0108 	add.w	r1, r7, #8
 8001c10:	2300      	movs	r3, #0
 8001c12:	f04f 32ff 	mov.w	r2, #4294967295
 8001c16:	f005 fbc5 	bl	80073a4 <xQueueGenericReceive>
    	if (ASV_To_Manage.current_Position > ASV_To_Manage.max_Position)
 8001c1a:	897a      	ldrh	r2, [r7, #10]
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d901      	bls.n	8001c26 <OS_ASVTask+0x26>
    		ASV_To_Manage.current_Position = ASV_To_Manage.max_Position;
 8001c22:	89fb      	ldrh	r3, [r7, #14]
 8001c24:	817b      	strh	r3, [r7, #10]
    	if (ASV_To_Manage.current_Position < ASV_To_Manage.min_Position)
 8001c26:	897a      	ldrh	r2, [r7, #10]
 8001c28:	89bb      	ldrh	r3, [r7, #12]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d201      	bcs.n	8001c32 <OS_ASVTask+0x32>
    		ASV_To_Manage.current_Position = ASV_To_Manage.min_Position;
 8001c2e:	89bb      	ldrh	r3, [r7, #12]
 8001c30:	817b      	strh	r3, [r7, #10]

    	HW_ASV_SetPwmPulseLength(ASV_To_Manage.channel,ASV_To_Manage.current_Position);
 8001c32:	7a3b      	ldrb	r3, [r7, #8]
 8001c34:	897a      	ldrh	r2, [r7, #10]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f007 ff9f 	bl	8009b7c <HW_ASV_SetPwmPulseLength>
    }
 8001c3e:	e7e3      	b.n	8001c08 <OS_ASVTask+0x8>
 8001c40:	2001059c 	.word	0x2001059c

08001c44 <ASV_Create>:
}

void ASV_Create(ASV_ControlTypeDef* ASV, HW_ASV_ChannelTypeDef channel, uint16_t min_Position, uint16_t max_Position)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	72fb      	strb	r3, [r7, #11]
 8001c56:	460b      	mov	r3, r1
 8001c58:	813b      	strh	r3, [r7, #8]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	80fb      	strh	r3, [r7, #6]
	ASV->channel = channel;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	7afa      	ldrb	r2, [r7, #11]
 8001c62:	701a      	strb	r2, [r3, #0]
	ASV->max_Position = max_Position;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	80da      	strh	r2, [r3, #6]
	ASV->min_Position = min_Position;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	893a      	ldrh	r2, [r7, #8]
 8001c6e:	809a      	strh	r2, [r3, #4]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <OS_CreateDSVTask>:
static void OS_DSVTask(void *pvParameters);
void DSV_Create(DSV_ControlTypeDef* DSV, uint8_t id, uint16_t min_Position, uint16_t max_Position);


void OS_CreateDSVTask(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af02      	add	r7, sp, #8
	xDSVMsgQueue = xQueueCreate( MAX_DSV_IN_QUEUE, sizeof(DSV_ControlTypeDef));
 8001c82:	2200      	movs	r2, #0
 8001c84:	2108      	movs	r1, #8
 8001c86:	2005      	movs	r0, #5
 8001c88:	f005 f968 	bl	8006f5c <xQueueGenericCreate>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <OS_CreateDSVTask+0x60>)
 8001c90:	601a      	str	r2, [r3, #0]
    if(xDSVMsgQueue==NULL)
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <OS_CreateDSVTask+0x60>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <OS_CreateDSVTask+0x26>
    {
    	printf("insufficient heap RAM available for DSVMsgQueue\r\n");
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <OS_CreateDSVTask+0x64>)
 8001c9c:	f009 fcbc 	bl	800b618 <puts>
    	while(1);
 8001ca0:	e7fe      	b.n	8001ca0 <OS_CreateDSVTask+0x24>
    }
	xTaskCreate(OS_DSVTask, "DIGITAL SERVO", 350, NULL, OS_TASK_PRIORITY_DSV, NULL );
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <OS_CreateDSVTask+0x68>)
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <OS_CreateDSVTask+0x6c>)
 8001cb4:	f005 fed6 	bl	8007a64 <xTaskCreate>

    DSV_Create(&servo1, 23, 0, 1023);
 8001cb8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2117      	movs	r1, #23
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <OS_CreateDSVTask+0x70>)
 8001cc2:	f000 f841 	bl	8001d48 <DSV_Create>
    DSV_Create(&servo2, 42, 0, 1023);
 8001cc6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001cca:	2200      	movs	r2, #0
 8001ccc:	212a      	movs	r1, #42	; 0x2a
 8001cce:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <OS_CreateDSVTask+0x74>)
 8001cd0:	f000 f83a 	bl	8001d48 <DSV_Create>
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200105c0 	.word	0x200105c0
 8001ce0:	080111d8 	.word	0x080111d8
 8001ce4:	0801120c 	.word	0x0801120c
 8001ce8:	08001cf5 	.word	0x08001cf5
 8001cec:	200105c4 	.word	0x200105c4
 8001cf0:	200105cc 	.word	0x200105cc

08001cf4 <OS_DSVTask>:

static void OS_DSVTask( void *pvParameters )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    ( void ) pvParameters;

    for( ;; )
    {
    	/* Block on the queue to wait for data to arrive */
    	xQueueReceive(xDSVMsgQueue, &DSV_To_Manage, portMAX_DELAY);
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <OS_DSVTask+0x50>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f107 0108 	add.w	r1, r7, #8
 8001d04:	2300      	movs	r3, #0
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	f005 fb4b 	bl	80073a4 <xQueueGenericReceive>
    	if (DSV_To_Manage.current_Position > DSV_To_Manage.max_Position)
 8001d0e:	897a      	ldrh	r2, [r7, #10]
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d901      	bls.n	8001d1a <OS_DSVTask+0x26>
    		DSV_To_Manage.current_Position = DSV_To_Manage.max_Position;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	817b      	strh	r3, [r7, #10]
    	if (DSV_To_Manage.current_Position < DSV_To_Manage.min_Position)
 8001d1a:	897a      	ldrh	r2, [r7, #10]
 8001d1c:	89bb      	ldrh	r3, [r7, #12]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d201      	bcs.n	8001d26 <OS_DSVTask+0x32>
    		DSV_To_Manage.current_Position = DSV_To_Manage.min_Position;
 8001d22:	89bb      	ldrh	r3, [r7, #12]
 8001d24:	817b      	strh	r3, [r7, #10]

    	xl_320_set_position(DSV_To_Manage.id, DSV_To_Manage.current_Position);
 8001d26:	7a3b      	ldrb	r3, [r7, #8]
 8001d28:	897a      	ldrh	r2, [r7, #10]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f009 fbc9 	bl	800b4c4 <xl_320_set_position>
    	vTaskDelay(5/portTICK_RATE_MS);
 8001d32:	2005      	movs	r0, #5
 8001d34:	f006 f8c6 	bl	8007ec4 <vTaskDelay>
    	xl_320_set_led(DSV_To_Manage.id, XL_320_LED_BLUE);
 8001d38:	7a3b      	ldrb	r3, [r7, #8]
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 fbad 	bl	800b49c <xl_320_set_led>
    }
 8001d42:	e7db      	b.n	8001cfc <OS_DSVTask+0x8>
 8001d44:	200105c0 	.word	0x200105c0

08001d48 <DSV_Create>:
}

void DSV_Create(DSV_ControlTypeDef* DSV, uint8_t id, uint16_t min_Position, uint16_t max_Position)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	72fb      	strb	r3, [r7, #11]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	813b      	strh	r3, [r7, #8]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
	DSV->id = id;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	7afa      	ldrb	r2, [r7, #11]
 8001d66:	701a      	strb	r2, [r3, #0]
	DSV->max_Position = max_Position;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	88fa      	ldrh	r2, [r7, #6]
 8001d6c:	80da      	strh	r2, [r3, #6]
	DSV->min_Position = min_Position;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	893a      	ldrh	r2, [r7, #8]
 8001d72:	809a      	strh	r2, [r3, #4]
	xl_320_set_control_mode(DSV->id, XL_320_JOIN_MODE);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f009 fb7a 	bl	800b474 <xl_320_set_control_mode>
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <OS_CreateAvoidanceTask>:
//bool av_compute_opponent_position(void);
//void do_avoidance(void);


void OS_CreateAvoidanceTask(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af02      	add	r7, sp, #8

    xTaskCreate(OS_AvoidanceTask, "AVOIDANCE", 250, NULL, OS_TASK_PRIORITY_AVOIDANCE, NULL );
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2304      	movs	r3, #4
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	22fa      	movs	r2, #250	; 0xfa
 8001d9a:	4903      	ldr	r1, [pc, #12]	; (8001da8 <OS_CreateAvoidanceTask+0x20>)
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <OS_CreateAvoidanceTask+0x24>)
 8001d9e:	f005 fe61 	bl	8007a64 <xTaskCreate>
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	0801121c 	.word	0x0801121c
 8001dac:	08001db1 	.word	0x08001db1

08001db0 <OS_AvoidanceTask>:

static void OS_AvoidanceTask( void *pvParameters )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    TickType_t xNextWakeTime;

    av_init();
 8001db8:	f000 f85e 	bl	8001e78 <av_init>

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8001dbc:	f006 f9fa 	bl	80081b4 <xTaskGetTickCount>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
    	av.det_front_left = IND4_VALUE;
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	4829      	ldr	r0, [pc, #164]	; (8001e70 <OS_AvoidanceTask+0xc0>)
 8001dca:	f002 ffcd 	bl	8004d68 <GPIO_ReadInputDataBit>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <OS_AvoidanceTask+0xc4>)
 8001ddc:	71da      	strb	r2, [r3, #7]
    	av.det_front_center = IND7_VALUE;
 8001dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de2:	4823      	ldr	r0, [pc, #140]	; (8001e70 <OS_AvoidanceTask+0xc0>)
 8001de4:	f002 ffc0 	bl	8004d68 <GPIO_ReadInputDataBit>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <OS_AvoidanceTask+0xc4>)
 8001df6:	721a      	strb	r2, [r3, #8]
    	av.det_front_right = IND6_VALUE;
 8001df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfc:	481c      	ldr	r0, [pc, #112]	; (8001e70 <OS_AvoidanceTask+0xc0>)
 8001dfe:	f002 ffb3 	bl	8004d68 <GPIO_ReadInputDataBit>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <OS_AvoidanceTask+0xc4>)
 8001e10:	725a      	strb	r2, [r3, #9]
    	av.det_back_left = IND1_VALUE;
 8001e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <OS_AvoidanceTask+0xc0>)
 8001e18:	f002 ffa6 	bl	8004d68 <GPIO_ReadInputDataBit>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <OS_AvoidanceTask+0xc4>)
 8001e2a:	729a      	strb	r2, [r3, #10]
    	av.det_back_center = IND2_VALUE;
 8001e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e30:	480f      	ldr	r0, [pc, #60]	; (8001e70 <OS_AvoidanceTask+0xc0>)
 8001e32:	f002 ff99 	bl	8004d68 <GPIO_ReadInputDataBit>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <OS_AvoidanceTask+0xc4>)
 8001e44:	72da      	strb	r2, [r3, #11]
    	av.det_back_right = IND3_VALUE;
 8001e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4a:	4809      	ldr	r0, [pc, #36]	; (8001e70 <OS_AvoidanceTask+0xc0>)
 8001e4c:	f002 ff8c 	bl	8004d68 <GPIO_ReadInputDataBit>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <OS_AvoidanceTask+0xc4>)
 8001e5e:	731a      	strb	r2, [r3, #12]
    	}*/


//    	do_avoidance();

    	vTaskDelayUntil( &xNextWakeTime, IND_SCAN_PERIOD_TICK);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2164      	movs	r1, #100	; 0x64
 8001e66:	4618      	mov	r0, r3
 8001e68:	f005 ffbe 	bl	8007de8 <vTaskDelayUntil>
    }
 8001e6c:	e7aa      	b.n	8001dc4 <OS_AvoidanceTask+0x14>
 8001e6e:	bf00      	nop
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	200146dc 	.word	0x200146dc

08001e78 <av_init>:
}

static void av_init(void) {
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
    av.state = AV_STATE_CLEAR;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <av_init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    av.action_done = 0;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <av_init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	749a      	strb	r2, [r3, #18]
    av.timer_ms = 0;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <av_init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	81da      	strh	r2, [r3, #14]
    av.timer_opp_validity_ms = 0;
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <av_init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	821a      	strh	r2, [r3, #16]

    av.mask_front_left = true;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <av_init+0x4c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
    av.mask_front_center = true;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <av_init+0x4c>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	709a      	strb	r2, [r3, #2]
    av.mask_front_right = true;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <av_init+0x4c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	70da      	strb	r2, [r3, #3]
    av.mask_back_left = true;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <av_init+0x4c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	711a      	strb	r2, [r3, #4]
    av.mask_back_center = true;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <av_init+0x4c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	715a      	strb	r2, [r3, #5]
    av.mask_back_right = true;
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <av_init+0x4c>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	719a      	strb	r2, [r3, #6]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200146dc 	.word	0x200146dc

08001ec8 <LedSetColor>:
        }
    }
}

void LedSetColor(HW_LED_ColorTypeDef color)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedColorMutex, 10);
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <LedSetColor+0x34>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	220a      	movs	r2, #10
 8001eda:	2100      	movs	r1, #0
 8001edc:	f005 fa62 	bl	80073a4 <xQueueGenericReceive>
	LedColor = color;
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <LedSetColor+0x38>)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedColorMutex);
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <LedSetColor+0x34>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f005 f8c2 	bl	8007078 <xQueueGenericSend>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200105d4 	.word	0x200105d4
 8001f00:	200105dc 	.word	0x200105dc

08001f04 <LedSetMode>:

void LedSetMode(HW_LED_ModeTypeDef mode)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedModeMutex, 10);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <LedSetMode+0x34>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	220a      	movs	r2, #10
 8001f16:	2100      	movs	r1, #0
 8001f18:	f005 fa44 	bl	80073a4 <xQueueGenericReceive>
	LedMode = mode;
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <LedSetMode+0x38>)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedModeMutex);
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LedSetMode+0x34>)
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	f005 f8a4 	bl	8007078 <xQueueGenericSend>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200105d8 	.word	0x200105d8
 8001f3c:	200105dd 	.word	0x200105dd

08001f40 <OS_CreateMotionTask>:
static void AVS_Init(void);
static void AVS_CsTask(void *pvParameters);
static bool motion_is_traj_done(wp_t *waypoint);

void OS_CreateMotionTask(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af02      	add	r7, sp, #8
    /* Initialize global variables */
    memset(&robot, 0, sizeof(RobotTypeDef));
 8001f46:	f44f 7218 	mov.w	r2, #608	; 0x260
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4817      	ldr	r0, [pc, #92]	; (8001fac <OS_CreateMotionTask+0x6c>)
 8001f4e:	f009 fb0e 	bl	800b56e <memset>
	vCreateAllMutex();
 8001f52:	f000 fb2f 	bl	80025b4 <vCreateAllMutex>
    AVS_Init();
 8001f56:	f000 f87b 	bl	8002050 <AVS_Init>
	xTaskCreate(AVS_CsTask, "AVERSIVE", 500, NULL, OS_TASK_PRIORITY_AVERSIVE, NULL );
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2304      	movs	r3, #4
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f68:	4911      	ldr	r1, [pc, #68]	; (8001fb0 <OS_CreateMotionTask+0x70>)
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <OS_CreateMotionTask+0x74>)
 8001f6c:	f005 fd7a 	bl	8007a64 <xTaskCreate>

	xWaypointQueue = xQueueCreate( MAX_WP_IN_QUEUE, sizeof(wp_t));
 8001f70:	2200      	movs	r2, #0
 8001f72:	2114      	movs	r1, #20
 8001f74:	2005      	movs	r0, #5
 8001f76:	f004 fff1 	bl	8006f5c <xQueueGenericCreate>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <OS_CreateMotionTask+0x78>)
 8001f7e:	601a      	str	r2, [r3, #0]
    if(xWaypointQueue==NULL)
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <OS_CreateMotionTask+0x78>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <OS_CreateMotionTask+0x50>
    {
    	printf("insufficient heap RAM available for xELTQueue\r\n");
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <OS_CreateMotionTask+0x7c>)
 8001f8a:	f009 fb45 	bl	800b618 <puts>
    	while(1);
 8001f8e:	e7fe      	b.n	8001f8e <OS_CreateMotionTask+0x4e>
    }
	xTaskCreate(OS_MotionTask, "MOTION", 500, NULL, OS_TASK_PRIORITY_MOTION, NULL );
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2303      	movs	r3, #3
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <OS_CreateMotionTask+0x80>)
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <OS_CreateMotionTask+0x84>)
 8001fa2:	f005 fd5f 	bl	8007a64 <xTaskCreate>

}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200146f0 	.word	0x200146f0
 8001fb0:	08011228 	.word	0x08011228
 8001fb4:	080022d1 	.word	0x080022d1
 8001fb8:	200105f4 	.word	0x200105f4
 8001fbc:	08011234 	.word	0x08011234
 8001fc0:	08011264 	.word	0x08011264
 8001fc4:	08001fc9 	.word	0x08001fc9

08001fc8 <OS_MotionTask>:

static void OS_MotionTask( void *pvParameters )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
    	xQueueReceive(xWaypointQueue, &current_waypoint, portMAX_DELAY);
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <OS_MotionTask+0x78>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fda:	491a      	ldr	r1, [pc, #104]	; (8002044 <OS_MotionTask+0x7c>)
 8001fdc:	f005 f9e2 	bl	80073a4 <xQueueGenericReceive>

    	// Handle avoidance blockage
        av.mask_back_left = true;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <OS_MotionTask+0x80>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	711a      	strb	r2, [r3, #4]
        av.mask_back_right = true;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <OS_MotionTask+0x80>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	719a      	strb	r2, [r3, #6]
        av.mask_front_center = true;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <OS_MotionTask+0x80>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	709a      	strb	r2, [r3, #2]
        av.mask_front_left = true;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <OS_MotionTask+0x80>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	705a      	strb	r2, [r3, #1]
        av.mask_front_right = true;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <OS_MotionTask+0x80>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	70da      	strb	r2, [r3, #3]

        motion_send_wp(&current_waypoint);
 8001ffe:	4811      	ldr	r0, [pc, #68]	; (8002044 <OS_MotionTask+0x7c>)
 8002000:	f000 fba4 	bl	800274c <motion_send_wp>

        while(!motion_is_traj_done(&current_waypoint))
 8002004:	e002      	b.n	800200c <OS_MotionTask+0x44>
        {
        	vTaskDelay(MOTION_CONTROL_PERIOD_TICKS);
 8002006:	2032      	movs	r0, #50	; 0x32
 8002008:	f005 ff5c 	bl	8007ec4 <vTaskDelay>
        av.mask_front_left = true;
        av.mask_front_right = true;

        motion_send_wp(&current_waypoint);

        while(!motion_is_traj_done(&current_waypoint))
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <OS_MotionTask+0x7c>)
 800200e:	f000 fb89 	bl	8002724 <motion_is_traj_done>
 8002012:	4603      	mov	r3, r0
 8002014:	f083 0301 	eor.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f3      	bne.n	8002006 <OS_MotionTask+0x3e>
        {
        	vTaskDelay(MOTION_CONTROL_PERIOD_TICKS);
        }

        av.mask_back_left = false;
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <OS_MotionTask+0x80>)
 8002020:	2200      	movs	r2, #0
 8002022:	711a      	strb	r2, [r3, #4]
        av.mask_back_right = false;
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <OS_MotionTask+0x80>)
 8002026:	2200      	movs	r2, #0
 8002028:	719a      	strb	r2, [r3, #6]
        av.mask_front_center = false;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <OS_MotionTask+0x80>)
 800202c:	2200      	movs	r2, #0
 800202e:	709a      	strb	r2, [r3, #2]
        av.mask_front_left = false;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <OS_MotionTask+0x80>)
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
        av.mask_front_right = false;
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <OS_MotionTask+0x80>)
 8002038:	2200      	movs	r2, #0
 800203a:	70da      	strb	r2, [r3, #3]
    } // traj done
 800203c:	e7c8      	b.n	8001fd0 <OS_MotionTask+0x8>
 800203e:	bf00      	nop
 8002040:	200105f4 	.word	0x200105f4
 8002044:	200105f8 	.word	0x200105f8
 8002048:	200146dc 	.word	0x200146dc
 800204c:	00000000 	.word	0x00000000

08002050 <AVS_Init>:
        //sprintf(cBuffer,"%ld\t%ld\t%lf\t%lf\t%lf\r\n", HW_ENC_GetChannel(HW_ENC_CHANNEL1),HW_ENC_GetChannel(HW_ENC_CHANNEL2),position_get_a_rad_double(&robot.cs.pos),position_get_x_double(&robot.cs.pos),position_get_y_double(&robot.cs.pos));
        //OS_DebugTaskPrint(cBuffer);
}

void AVS_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af02      	add	r7, sp, #8
    /* Robot System */
    rs_init(&robot.cs.rs);
 8002056:	488a      	ldr	r0, [pc, #552]	; (8002280 <AVS_Init+0x230>)
 8002058:	f001 fc0e 	bl	8003878 <rs_init>
    rs_set_left_pwm(&robot.cs.rs,  (void*) HW_MOT_SetMotorSpeedFastDecay, (void*) MOT_CHANNEL_LEFT);
 800205c:	2200      	movs	r2, #0
 800205e:	4989      	ldr	r1, [pc, #548]	; (8002284 <AVS_Init+0x234>)
 8002060:	4887      	ldr	r0, [pc, #540]	; (8002280 <AVS_Init+0x230>)
 8002062:	f001 fc17 	bl	8003894 <rs_set_left_pwm>
    rs_set_right_pwm(&robot.cs.rs, (void*) HW_MOT_SetMotorSpeedFastDecay, (void*) MOT_CHANNEL_RIGHT);
 8002066:	2201      	movs	r2, #1
 8002068:	4986      	ldr	r1, [pc, #536]	; (8002284 <AVS_Init+0x234>)
 800206a:	4885      	ldr	r0, [pc, #532]	; (8002280 <AVS_Init+0x230>)
 800206c:	f001 fc24 	bl	80038b8 <rs_set_right_pwm>

    /* External Encoders */
    rs_set_left_ext_encoder(&robot.cs.rs,  (void*) HW_ENC_GetChannel, (void*) ENC_CHANNEL_LEFT,  PHYS_ROBOT_ENCODER_LEFT_GAIN);
 8002070:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8002250 <AVS_Init+0x200>
 8002074:	2200      	movs	r2, #0
 8002076:	4984      	ldr	r1, [pc, #528]	; (8002288 <AVS_Init+0x238>)
 8002078:	4881      	ldr	r0, [pc, #516]	; (8002280 <AVS_Init+0x230>)
 800207a:	f001 fc2f 	bl	80038dc <rs_set_left_ext_encoder>
    rs_set_right_ext_encoder(&robot.cs.rs, (void*) HW_ENC_GetChannel, (void*) ENC_CHANNEL_RIGHT, PHYS_ROBOT_ENCODER_RIGHT_GAIN);
 800207e:	ed9f 0b76 	vldr	d0, [pc, #472]	; 8002258 <AVS_Init+0x208>
 8002082:	2201      	movs	r2, #1
 8002084:	4980      	ldr	r1, [pc, #512]	; (8002288 <AVS_Init+0x238>)
 8002086:	487e      	ldr	r0, [pc, #504]	; (8002280 <AVS_Init+0x230>)
 8002088:	f001 fc42 	bl	8003910 <rs_set_right_ext_encoder>
    rs_set_flags(&robot.cs.rs, RS_USE_EXT);
 800208c:	2101      	movs	r1, #1
 800208e:	487c      	ldr	r0, [pc, #496]	; (8002280 <AVS_Init+0x230>)
 8002090:	f001 fcf4 	bl	8003a7c <rs_set_flags>

    /* Position Manager */
    position_init(&robot.cs.pos);
 8002094:	487d      	ldr	r0, [pc, #500]	; (800228c <AVS_Init+0x23c>)
 8002096:	f001 f971 	bl	800337c <position_init>
    position_set_physical_params(&robot.cs.pos, PHYS_ROBOT_ENCODERS_TRACK_MM, PHYS_ROBOT_NB_IMP_PER_MM);
 800209a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002260 <AVS_Init+0x210>
 800209e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8002268 <AVS_Init+0x218>
 80020a2:	487a      	ldr	r0, [pc, #488]	; (800228c <AVS_Init+0x23c>)
 80020a4:	f001 f986 	bl	80033b4 <position_set_physical_params>
    position_set_related_robot_system(&robot.cs.pos, &robot.cs.rs);
 80020a8:	4975      	ldr	r1, [pc, #468]	; (8002280 <AVS_Init+0x230>)
 80020aa:	4878      	ldr	r0, [pc, #480]	; (800228c <AVS_Init+0x23c>)
 80020ac:	f001 f974 	bl	8003398 <position_set_related_robot_system>
    position_use_ext(&robot.cs.pos);
 80020b0:	4876      	ldr	r0, [pc, #472]	; (800228c <AVS_Init+0x23c>)
 80020b2:	f001 f997 	bl	80033e4 <position_use_ext>
//    position_set_centrifugal_coef(&robot.cs.pos, PHYS_ROBOT_CENTRIFUGAL_COEF);

    /* Control System filter in Distance */
    pid_init(&robot.cs.pid_d);
 80020b6:	4876      	ldr	r0, [pc, #472]	; (8002290 <AVS_Init+0x240>)
 80020b8:	f000 fe8c 	bl	8002dd4 <pid_init>
    pid_set_gains(&robot.cs.pid_d, PHYS_CS_D_PID_KP, PHYS_CS_D_PID_KI, PHYS_CS_D_PID_KD);
 80020bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c0:	2200      	movs	r2, #0
 80020c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80020c6:	4872      	ldr	r0, [pc, #456]	; (8002290 <AVS_Init+0x240>)
 80020c8:	f000 fe98 	bl	8002dfc <pid_set_gains>
    pid_set_maximums(&robot.cs.pid_d, PHYS_CS_D_PID_MAX_IN, PHYS_CS_D_PID_MAX_I, PHYS_CS_D_PID_MAX_OUT);
 80020cc:	2300      	movs	r3, #0
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	2100      	movs	r1, #0
 80020d4:	486e      	ldr	r0, [pc, #440]	; (8002290 <AVS_Init+0x240>)
 80020d6:	f000 fead 	bl	8002e34 <pid_set_maximums>
    pid_set_out_shift(&robot.cs.pid_d, PHYS_CS_D_PID_OUT_SHIFT);
 80020da:	210c      	movs	r1, #12
 80020dc:	486c      	ldr	r0, [pc, #432]	; (8002290 <AVS_Init+0x240>)
 80020de:	f000 febf 	bl	8002e60 <pid_set_out_shift>
    pid_set_derivate_filter(&robot.cs.pid_d, PHYS_CS_D_PID_DRV_FILTER);
 80020e2:	2104      	movs	r1, #4
 80020e4:	486a      	ldr	r0, [pc, #424]	; (8002290 <AVS_Init+0x240>)
 80020e6:	f000 fecb 	bl	8002e80 <pid_set_derivate_filter>
    quadramp_init(&robot.cs.qr_d);
 80020ea:	486a      	ldr	r0, [pc, #424]	; (8002294 <AVS_Init+0x244>)
 80020ec:	f000 ff92 	bl	8003014 <quadramp_init>
    quadramp_set_1st_order_vars(&robot.cs.qr_d, PHYS_CS_D_QUAD_POS_SPEED, PHYS_CS_D_QUAD_NEG_SPEED);
 80020f0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80020f4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80020f8:	4866      	ldr	r0, [pc, #408]	; (8002294 <AVS_Init+0x244>)
 80020fa:	f000 ffab 	bl	8003054 <quadramp_set_1st_order_vars>
    quadramp_set_2nd_order_vars(&robot.cs.qr_d, PHYS_CS_D_QUAD_POS_ACCEL, PHYS_CS_D_QUAD_NEG_ACCEL);
 80020fe:	2214      	movs	r2, #20
 8002100:	2114      	movs	r1, #20
 8002102:	4864      	ldr	r0, [pc, #400]	; (8002294 <AVS_Init+0x244>)
 8002104:	f000 ff94 	bl	8003030 <quadramp_set_2nd_order_vars>
    cs_init(&robot.cs.cs_d);
 8002108:	4863      	ldr	r0, [pc, #396]	; (8002298 <AVS_Init+0x248>)
 800210a:	f000 fd5f 	bl	8002bcc <cs_init>
    cs_set_consign_filter(&robot.cs.cs_d, quadramp_do_filter, &robot.cs.qr_d);
 800210e:	4a61      	ldr	r2, [pc, #388]	; (8002294 <AVS_Init+0x244>)
 8002110:	4962      	ldr	r1, [pc, #392]	; (800229c <AVS_Init+0x24c>)
 8002112:	4861      	ldr	r0, [pc, #388]	; (8002298 <AVS_Init+0x248>)
 8002114:	f000 fd8c 	bl	8002c30 <cs_set_consign_filter>
    cs_set_correct_filter(&robot.cs.cs_d, pid_do_filter, &robot.cs.pid_d);
 8002118:	4a5d      	ldr	r2, [pc, #372]	; (8002290 <AVS_Init+0x240>)
 800211a:	4961      	ldr	r1, [pc, #388]	; (80022a0 <AVS_Init+0x250>)
 800211c:	485e      	ldr	r0, [pc, #376]	; (8002298 <AVS_Init+0x248>)
 800211e:	f000 fd99 	bl	8002c54 <cs_set_correct_filter>
    cs_set_process_in(&robot.cs.cs_d, rs_set_distance, &robot.cs.rs);
 8002122:	4a57      	ldr	r2, [pc, #348]	; (8002280 <AVS_Init+0x230>)
 8002124:	495f      	ldr	r1, [pc, #380]	; (80022a4 <AVS_Init+0x254>)
 8002126:	485c      	ldr	r0, [pc, #368]	; (8002298 <AVS_Init+0x248>)
 8002128:	f000 fda6 	bl	8002c78 <cs_set_process_in>
    cs_set_process_out(&robot.cs.cs_d, rs_get_distance, &robot.cs.rs);
 800212c:	4a54      	ldr	r2, [pc, #336]	; (8002280 <AVS_Init+0x230>)
 800212e:	495e      	ldr	r1, [pc, #376]	; (80022a8 <AVS_Init+0x258>)
 8002130:	4859      	ldr	r0, [pc, #356]	; (8002298 <AVS_Init+0x248>)
 8002132:	f000 fdb3 	bl	8002c9c <cs_set_process_out>
    cs_set_consign(&robot.cs.cs_d, 0);
 8002136:	2100      	movs	r1, #0
 8002138:	4857      	ldr	r0, [pc, #348]	; (8002298 <AVS_Init+0x248>)
 800213a:	f000 fe3d 	bl	8002db8 <cs_set_consign>

    /* Control System filter in Angle */
    pid_init(&robot.cs.pid_a);
 800213e:	485b      	ldr	r0, [pc, #364]	; (80022ac <AVS_Init+0x25c>)
 8002140:	f000 fe48 	bl	8002dd4 <pid_init>
    pid_set_gains(&robot.cs.pid_a, PHYS_CS_A_PID_KP, PHYS_CS_A_PID_KI, PHYS_CS_A_PID_KD);
 8002144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002148:	2200      	movs	r2, #0
 800214a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800214e:	4857      	ldr	r0, [pc, #348]	; (80022ac <AVS_Init+0x25c>)
 8002150:	f000 fe54 	bl	8002dfc <pid_set_gains>
    pid_set_maximums(&robot.cs.pid_a, PHYS_CS_A_PID_MAX_IN, PHYS_CS_A_PID_MAX_I, PHYS_CS_A_PID_MAX_OUT);
 8002154:	2300      	movs	r3, #0
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	2100      	movs	r1, #0
 800215c:	4853      	ldr	r0, [pc, #332]	; (80022ac <AVS_Init+0x25c>)
 800215e:	f000 fe69 	bl	8002e34 <pid_set_maximums>
    pid_set_out_shift(&robot.cs.pid_a, PHYS_CS_A_PID_OUT_SHIFT);
 8002162:	210b      	movs	r1, #11
 8002164:	4851      	ldr	r0, [pc, #324]	; (80022ac <AVS_Init+0x25c>)
 8002166:	f000 fe7b 	bl	8002e60 <pid_set_out_shift>
    pid_set_derivate_filter(&robot.cs.pid_a, PHYS_CS_A_PID_DRV_FILTER);
 800216a:	2104      	movs	r1, #4
 800216c:	484f      	ldr	r0, [pc, #316]	; (80022ac <AVS_Init+0x25c>)
 800216e:	f000 fe87 	bl	8002e80 <pid_set_derivate_filter>
    quadramp_init(&robot.cs.qr_a);
 8002172:	484f      	ldr	r0, [pc, #316]	; (80022b0 <AVS_Init+0x260>)
 8002174:	f000 ff4e 	bl	8003014 <quadramp_init>
    quadramp_set_1st_order_vars(&robot.cs.qr_a, PHYS_CS_A_QUAD_POS_SPEED, PHYS_CS_A_QUAD_NEG_SPEED);
 8002178:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800217c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002180:	484b      	ldr	r0, [pc, #300]	; (80022b0 <AVS_Init+0x260>)
 8002182:	f000 ff67 	bl	8003054 <quadramp_set_1st_order_vars>
    quadramp_set_2nd_order_vars(&robot.cs.qr_a, PHYS_CS_A_QUAD_POS_ACCEL, PHYS_CS_A_QUAD_NEG_ACCEL);
 8002186:	2208      	movs	r2, #8
 8002188:	2108      	movs	r1, #8
 800218a:	4849      	ldr	r0, [pc, #292]	; (80022b0 <AVS_Init+0x260>)
 800218c:	f000 ff50 	bl	8003030 <quadramp_set_2nd_order_vars>
    cs_init(&robot.cs.cs_a);
 8002190:	4848      	ldr	r0, [pc, #288]	; (80022b4 <AVS_Init+0x264>)
 8002192:	f000 fd1b 	bl	8002bcc <cs_init>
    cs_set_consign_filter(&robot.cs.cs_a, quadramp_do_filter, &robot.cs.qr_a);
 8002196:	4a46      	ldr	r2, [pc, #280]	; (80022b0 <AVS_Init+0x260>)
 8002198:	4940      	ldr	r1, [pc, #256]	; (800229c <AVS_Init+0x24c>)
 800219a:	4846      	ldr	r0, [pc, #280]	; (80022b4 <AVS_Init+0x264>)
 800219c:	f000 fd48 	bl	8002c30 <cs_set_consign_filter>
    cs_set_correct_filter(&robot.cs.cs_a, pid_do_filter, &robot.cs.pid_a);
 80021a0:	4a42      	ldr	r2, [pc, #264]	; (80022ac <AVS_Init+0x25c>)
 80021a2:	493f      	ldr	r1, [pc, #252]	; (80022a0 <AVS_Init+0x250>)
 80021a4:	4843      	ldr	r0, [pc, #268]	; (80022b4 <AVS_Init+0x264>)
 80021a6:	f000 fd55 	bl	8002c54 <cs_set_correct_filter>
    cs_set_process_in(&robot.cs.cs_a, rs_set_angle, &robot.cs.rs);
 80021aa:	4a35      	ldr	r2, [pc, #212]	; (8002280 <AVS_Init+0x230>)
 80021ac:	4942      	ldr	r1, [pc, #264]	; (80022b8 <AVS_Init+0x268>)
 80021ae:	4841      	ldr	r0, [pc, #260]	; (80022b4 <AVS_Init+0x264>)
 80021b0:	f000 fd62 	bl	8002c78 <cs_set_process_in>
    cs_set_process_out(&robot.cs.cs_a, rs_get_angle, &robot.cs.rs);
 80021b4:	4a32      	ldr	r2, [pc, #200]	; (8002280 <AVS_Init+0x230>)
 80021b6:	4941      	ldr	r1, [pc, #260]	; (80022bc <AVS_Init+0x26c>)
 80021b8:	483e      	ldr	r0, [pc, #248]	; (80022b4 <AVS_Init+0x264>)
 80021ba:	f000 fd6f 	bl	8002c9c <cs_set_process_out>
    cs_set_consign(&robot.cs.cs_a, 0);
 80021be:	2100      	movs	r1, #0
 80021c0:	483c      	ldr	r0, [pc, #240]	; (80022b4 <AVS_Init+0x264>)
 80021c2:	f000 fdf9 	bl	8002db8 <cs_set_consign>

    /* Trajectory Manager */
    trajectory_init(&robot.cs.traj);
 80021c6:	483e      	ldr	r0, [pc, #248]	; (80022c0 <AVS_Init+0x270>)
 80021c8:	f001 fce0 	bl	8003b8c <trajectory_init>
    trajectory_set_cs(&robot.cs.traj, &robot.cs.cs_d, &robot.cs.cs_a);
 80021cc:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <AVS_Init+0x264>)
 80021ce:	4932      	ldr	r1, [pc, #200]	; (8002298 <AVS_Init+0x248>)
 80021d0:	483b      	ldr	r0, [pc, #236]	; (80022c0 <AVS_Init+0x270>)
 80021d2:	f001 fcef 	bl	8003bb4 <trajectory_set_cs>
    trajectory_set_robot_params(&robot.cs.traj, &robot.cs.rs, &robot.cs.pos);
 80021d6:	4a2d      	ldr	r2, [pc, #180]	; (800228c <AVS_Init+0x23c>)
 80021d8:	4929      	ldr	r1, [pc, #164]	; (8002280 <AVS_Init+0x230>)
 80021da:	4839      	ldr	r0, [pc, #228]	; (80022c0 <AVS_Init+0x270>)
 80021dc:	f001 fcfc 	bl	8003bd8 <trajectory_set_robot_params>
    trajectory_set_speed(&robot.cs.traj, PHYS_TRAJ_D_DEFAULT_SPEED, PHYS_TRAJ_A_DEFAULT_SPEED);
 80021e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80021e4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80021e8:	4835      	ldr	r0, [pc, #212]	; (80022c0 <AVS_Init+0x270>)
 80021ea:	f001 fd07 	bl	8003bfc <trajectory_set_speed>
    trajectory_set_windows(&robot.cs.traj, PHYS_TRAJ_DEFAULT_WIN_D, PHYS_TRAJ_DEFAULT_WIN_A_DEG, PHYS_TRAJ_DEFAULT_WIN_A_START_DEG);
 80021ee:	ed9f 2b20 	vldr	d2, [pc, #128]	; 8002270 <AVS_Init+0x220>
 80021f2:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002278 <AVS_Init+0x228>
 80021f6:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002270 <AVS_Init+0x220>
 80021fa:	4831      	ldr	r0, [pc, #196]	; (80022c0 <AVS_Init+0x270>)
 80021fc:	f001 fd14 	bl	8003c28 <trajectory_set_windows>

    /* Blocking detection */
    bd_init(&robot.cs.bd_l);
 8002200:	4830      	ldr	r0, [pc, #192]	; (80022c4 <AVS_Init+0x274>)
 8002202:	f000 fc65 	bl	8002ad0 <bd_init>
    bd_init(&robot.cs.bd_r);
 8002206:	4830      	ldr	r0, [pc, #192]	; (80022c8 <AVS_Init+0x278>)
 8002208:	f000 fc62 	bl	8002ad0 <bd_init>
    bd_set_current_thresholds(&robot.cs.bd_r, PHYS_BD_K1, PHYS_BD_K2, PHYS_BD_THR, PHYS_BD_CPT);
 800220c:	2364      	movs	r3, #100	; 0x64
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002214:	2228      	movs	r2, #40	; 0x28
 8002216:	2105      	movs	r1, #5
 8002218:	482b      	ldr	r0, [pc, #172]	; (80022c8 <AVS_Init+0x278>)
 800221a:	f000 fc67 	bl	8002aec <bd_set_current_thresholds>
    bd_set_current_thresholds(&robot.cs.bd_l, PHYS_BD_K1, PHYS_BD_K2, PHYS_BD_THR, PHYS_BD_CPT);
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002226:	2228      	movs	r2, #40	; 0x28
 8002228:	2105      	movs	r1, #5
 800222a:	4826      	ldr	r0, [pc, #152]	; (80022c4 <AVS_Init+0x274>)
 800222c:	f000 fc5e 	bl	8002aec <bd_set_current_thresholds>
    bd_set_speed_threshold(&robot.cs.bd_l, PHYS_BD_SPD);
 8002230:	2196      	movs	r1, #150	; 0x96
 8002232:	4824      	ldr	r0, [pc, #144]	; (80022c4 <AVS_Init+0x274>)
 8002234:	f000 fc76 	bl	8002b24 <bd_set_speed_threshold>
    bd_set_speed_threshold(&robot.cs.bd_r, PHYS_BD_SPD);
 8002238:	2196      	movs	r1, #150	; 0x96
 800223a:	4823      	ldr	r0, [pc, #140]	; (80022c8 <AVS_Init+0x278>)
 800223c:	f000 fc72 	bl	8002b24 <bd_set_speed_threshold>
    //scheduler_add_periodical_event_priority(sample_current, NULL, 25000 / SCHEDULER_UNIT, 200);  /* 25 ms */
    /* STATUS_EVENT */

    /* init struct robot */
    //robot.cs.cs_events = DO_CS | DO_RS | DO_POS | DO_BD | DO_POWER ;
    robot.cs.cs_events =  DO_RS | DO_POS | DO_BD | DO_STATUS;
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <AVS_Init+0x27c>)
 8002242:	224e      	movs	r2, #78	; 0x4e
 8002244:	701a      	strb	r2, [r3, #0]
        //right_current = 0;
        //left_current = 0;
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	f3af 8000 	nop.w
 8002250:	00000000 	.word	0x00000000
 8002254:	3ff00000 	.word	0x3ff00000
 8002258:	00000000 	.word	0x00000000
 800225c:	bff00000 	.word	0xbff00000
 8002260:	841bf7e1 	.word	0x841bf7e1
 8002264:	40361927 	.word	0x40361927
 8002268:	00000000 	.word	0x00000000
 800226c:	40693000 	.word	0x40693000
 8002270:	00000000 	.word	0x00000000
 8002274:	403e0000 	.word	0x403e0000
 8002278:	00000000 	.word	0x00000000
 800227c:	40140000 	.word	0x40140000
 8002280:	200146f4 	.word	0x200146f4
 8002284:	0800a905 	.word	0x0800a905
 8002288:	0800a2b5 	.word	0x0800a2b5
 800228c:	20014740 	.word	0x20014740
 8002290:	20014898 	.word	0x20014898
 8002294:	200148cc 	.word	0x200148cc
 8002298:	2001485c 	.word	0x2001485c
 800229c:	08003079 	.word	0x08003079
 80022a0:	08002eb5 	.word	0x08002eb5
 80022a4:	0800399d 	.word	0x0800399d
 80022a8:	08003a19 	.word	0x08003a19
 80022ac:	2001480c 	.word	0x2001480c
 80022b0:	20014840 	.word	0x20014840
 80022b4:	200147d0 	.word	0x200147d0
 80022b8:	08003945 	.word	0x08003945
 80022bc:	080039f5 	.word	0x080039f5
 80022c0:	20014788 	.word	0x20014788
 80022c4:	200148e8 	.word	0x200148e8
 80022c8:	20014914 	.word	0x20014914
 80022cc:	200146f0 	.word	0x200146f0

080022d0 <AVS_CsTask>:
/* Main CS Managment Task
 * TBC: might require a mutex for some variables
 * TODO: handle re-init of the task
 */
void AVS_CsTask(void *pvParameters)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    static int32_t old_speed_a  = 0;
    static int32_t old_speed_d  = 0;
    TickType_t xNextWakeTime;

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 80022d8:	f005 ff6c 	bl	80081b4 <xTaskGetTickCount>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
    ( void ) pvParameters;

    for( ;; )
    {

    	if(robot.cs.cs_events & DO_RS) {
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <AVS_CsTask+0x12c>)
 80022e2:	f993 3000 	ldrsb.w	r3, [r3]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d054      	beq.n	800239a <AVS_CsTask+0xca>
    		// Manage Robot System
    		rs_update(&robot.cs.rs);
 80022f0:	4843      	ldr	r0, [pc, #268]	; (8002400 <AVS_CsTask+0x130>)
 80022f2:	f001 fbd3 	bl	8003a9c <rs_update>

			robot.cs.speed_a = rs_get_angle(&robot.cs.rs) - old_a;
 80022f6:	4842      	ldr	r0, [pc, #264]	; (8002400 <AVS_CsTask+0x130>)
 80022f8:	f001 fb7c 	bl	80039f4 <rs_get_angle>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <AVS_CsTask+0x134>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	b29b      	uxth	r3, r3
 800230a:	b21a      	sxth	r2, r3
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <AVS_CsTask+0x12c>)
 800230e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			robot.cs.speed_d = rs_get_distance(&robot.cs.rs) - old_d;
 8002312:	483b      	ldr	r0, [pc, #236]	; (8002400 <AVS_CsTask+0x130>)
 8002314:	f001 fb80 	bl	8003a18 <rs_get_distance>
 8002318:	4603      	mov	r3, r0
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <AVS_CsTask+0x138>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b29b      	uxth	r3, r3
 8002326:	b21a      	sxth	r2, r3
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <AVS_CsTask+0x12c>)
 800232a:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			old_a = rs_get_angle(&robot.cs.rs);
 800232e:	4834      	ldr	r0, [pc, #208]	; (8002400 <AVS_CsTask+0x130>)
 8002330:	f001 fb60 	bl	80039f4 <rs_get_angle>
 8002334:	4602      	mov	r2, r0
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <AVS_CsTask+0x134>)
 8002338:	601a      	str	r2, [r3, #0]
			old_d = rs_get_distance(&robot.cs.rs);
 800233a:	4831      	ldr	r0, [pc, #196]	; (8002400 <AVS_CsTask+0x130>)
 800233c:	f001 fb6c 	bl	8003a18 <rs_get_distance>
 8002340:	4602      	mov	r2, r0
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <AVS_CsTask+0x138>)
 8002344:	601a      	str	r2, [r3, #0]

			robot.cs.acceleration_a = robot.cs.speed_a - old_speed_a;
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <AVS_CsTask+0x12c>)
 8002348:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 800234c:	b21b      	sxth	r3, r3
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b2e      	ldr	r3, [pc, #184]	; (800240c <AVS_CsTask+0x13c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	b29b      	uxth	r3, r3
 800235a:	b21a      	sxth	r2, r3
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <AVS_CsTask+0x12c>)
 800235e:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
			robot.cs.acceleration_d = robot.cs.speed_d - old_speed_d;
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <AVS_CsTask+0x12c>)
 8002364:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8002368:	b21b      	sxth	r3, r3
 800236a:	b29a      	uxth	r2, r3
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <AVS_CsTask+0x140>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	b29b      	uxth	r3, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <AVS_CsTask+0x12c>)
 800237a:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
			old_speed_a = robot.cs.speed_a;
 800237e:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <AVS_CsTask+0x12c>)
 8002380:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8002384:	b21b      	sxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <AVS_CsTask+0x13c>)
 800238a:	601a      	str	r2, [r3, #0]
			old_speed_d = robot.cs.speed_d;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <AVS_CsTask+0x12c>)
 800238e:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8002392:	b21b      	sxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <AVS_CsTask+0x140>)
 8002398:	601a      	str	r2, [r3, #0]
    	}

		if (robot.cs.cs_events & DO_POWER)
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <AVS_CsTask+0x12c>)
 800239c:	f993 3000 	ldrsb.w	r3, [r3]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <AVS_CsTask+0xf8>
		{
			// Main CS Management
			vLockDistanceConsign();
 80023aa:	f000 f959 	bl	8002660 <vLockDistanceConsign>
			cs_manage(&robot.cs.cs_d);
 80023ae:	4819      	ldr	r0, [pc, #100]	; (8002414 <AVS_CsTask+0x144>)
 80023b0:	f000 fcd6 	bl	8002d60 <cs_manage>
			vUnlockDistanceConsign();
 80023b4:	f000 f99a 	bl	80026ec <vUnlockDistanceConsign>
			vLockAngleConsign();
 80023b8:	f000 f944 	bl	8002644 <vLockAngleConsign>
			cs_manage(&robot.cs.cs_a);
 80023bc:	4816      	ldr	r0, [pc, #88]	; (8002418 <AVS_CsTask+0x148>)
 80023be:	f000 fccf 	bl	8002d60 <cs_manage>
			vUnlockAngleConsign();
 80023c2:	f000 f985 	bl	80026d0 <vUnlockAngleConsign>
 80023c6:	e007      	b.n	80023d8 <AVS_CsTask+0x108>
		}
		else
		{
			HW_MOT_SetMotorSpeedFastDecay(MOT_CHANNEL_LEFT, 0);
 80023c8:	2100      	movs	r1, #0
 80023ca:	2000      	movs	r0, #0
 80023cc:	f008 fa9a 	bl	800a904 <HW_MOT_SetMotorSpeedFastDecay>
			HW_MOT_SetMotorSpeedFastDecay(MOT_CHANNEL_RIGHT,0);
 80023d0:	2100      	movs	r1, #0
 80023d2:	2001      	movs	r0, #1
 80023d4:	f008 fa96 	bl	800a904 <HW_MOT_SetMotorSpeedFastDecay>
		}

		if(robot.cs.cs_events & DO_POS)
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <AVS_CsTask+0x12c>)
 80023da:	f993 3000 	ldrsb.w	r3, [r3]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <AVS_CsTask+0x11e>
		{
			position_manage(&robot.cs.pos);
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <AVS_CsTask+0x14c>)
 80023ea:	f001 f81d 	bl	8003428 <position_manage>

		/* Blocking-detection manager: TO BE ADDED */
		/* trajectory_hardstop(pRobot.traj);*/

        /* Wakes-up when required */
        vTaskDelayUntil( &xNextWakeTime, AVERSIVE_PERIOD_TICKS);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	2132      	movs	r1, #50	; 0x32
 80023f4:	4618      	mov	r0, r3
 80023f6:	f005 fcf7 	bl	8007de8 <vTaskDelayUntil>
    }
 80023fa:	e771      	b.n	80022e0 <AVS_CsTask+0x10>
 80023fc:	200146f0 	.word	0x200146f0
 8002400:	200146f4 	.word	0x200146f4
 8002404:	2001060c 	.word	0x2001060c
 8002408:	20010610 	.word	0x20010610
 800240c:	20010614 	.word	0x20010614
 8002410:	20010618 	.word	0x20010618
 8002414:	2001485c 	.word	0x2001485c
 8002418:	200147d0 	.word	0x200147d0
 800241c:	20014740 	.word	0x20014740

08002420 <Os_MotionTrajectoryNear>:
}

bool Os_MotionTrajectoryNear(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	return (bool)trajectory_in_window(&robot.cs.traj, traj_near_window_d, traj_near_window_a);
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <Os_MotionTrajectoryNear+0x38>)
 8002426:	ed93 7b00 	vldr	d7, [r3]
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <Os_MotionTrajectoryNear+0x3c>)
 800242c:	ed93 6b00 	vldr	d6, [r3]
 8002430:	eeb0 1a46 	vmov.f32	s2, s12
 8002434:	eef0 1a66 	vmov.f32	s3, s13
 8002438:	eeb0 0a47 	vmov.f32	s0, s14
 800243c:	eef0 0a67 	vmov.f32	s1, s15
 8002440:	4807      	ldr	r0, [pc, #28]	; (8002460 <Os_MotionTrajectoryNear+0x40>)
 8002442:	f002 f881 	bl	8004548 <trajectory_in_window>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20010000 	.word	0x20010000
 800245c:	20010008 	.word	0x20010008
 8002460:	20014788 	.word	0x20014788

08002464 <Os_MotionTrajectoryFinished>:

bool Os_MotionTrajectoryFinished(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	return (bool)(trajectory_finished(&robot.cs.traj)&&(robot.cs.traj.scheduler_task==NULL));
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <Os_MotionTrajectoryFinished+0x2c>)
 800246a:	f002 f845 	bl	80044f8 <trajectory_finished>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <Os_MotionTrajectoryFinished+0x1e>
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <Os_MotionTrajectoryFinished+0x30>)
 8002476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <Os_MotionTrajectoryFinished+0x1e>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <Os_MotionTrajectoryFinished+0x20>
 8002482:	2300      	movs	r3, #0
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20014788 	.word	0x20014788
 8002494:	200146f0 	.word	0x200146f0

08002498 <OS_MotionSetSpeed>:
	traj_near_window_d = (double) window_d;
    traj_near_window_a  = (double) window_a;
}

void OS_MotionSetSpeed(int16_t speed_d, int16_t speed_a)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	460a      	mov	r2, r1
 80024a2:	80fb      	strh	r3, [r7, #6]
 80024a4:	4613      	mov	r3, r2
 80024a6:	80bb      	strh	r3, [r7, #4]
	trajectory_set_speed(&robot.cs.traj, speed_d, speed_a);
 80024a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b0:	4619      	mov	r1, r3
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <OS_MotionSetSpeed+0x28>)
 80024b4:	f001 fba2 	bl	8003bfc <trajectory_set_speed>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20014788 	.word	0x20014788

080024c4 <OS_MotionMoveRelative>:
	robot.cs.cs_events &= ~ DO_POWER;
	robot.cs.cs_events &= ~ DO_CS;
}

void OS_MotionMoveRelative(double d_mm, double a_deg_rel)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	ed87 0b02 	vstr	d0, [r7, #8]
 80024ce:	ed87 1b00 	vstr	d1, [r7]
	trajectory_d_a_rel(&robot.cs.traj, d_mm, a_deg_rel);
 80024d2:	ed97 1b00 	vldr	d1, [r7]
 80024d6:	ed97 0b02 	vldr	d0, [r7, #8]
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <OS_MotionMoveRelative+0x24>)
 80024dc:	f001 ff84 	bl	80043e8 <trajectory_d_a_rel>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20014788 	.word	0x20014788

080024ec <OS_MotionGoToAuto>:

void OS_MotionGoToAuto(double pos_x, double pos_y)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80024f6:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_xy_abs(&robot.cs.traj, pos_x, pos_y);
 80024fa:	ed97 1b00 	vldr	d1, [r7]
 80024fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <OS_MotionGoToAuto+0x24>)
 8002504:	f001 ff98 	bl	8004438 <trajectory_goto_xy_abs>
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20014788 	.word	0x20014788

08002514 <OS_MotionGoToFwd>:

void OS_MotionGoToFwd(double pos_x, double pos_y)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	ed87 0b02 	vstr	d0, [r7, #8]
 800251e:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_forward_xy_abs(&robot.cs.traj, pos_x, pos_y);
 8002522:	ed97 1b00 	vldr	d1, [r7]
 8002526:	ed97 0b02 	vldr	d0, [r7, #8]
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <OS_MotionGoToFwd+0x24>)
 800252c:	f001 ffa4 	bl	8004478 <trajectory_goto_forward_xy_abs>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20014788 	.word	0x20014788

0800253c <OS_MotionGoToBwd>:

void OS_MotionGoToBwd(double pos_x, double pos_y)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	ed87 0b02 	vstr	d0, [r7, #8]
 8002546:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_backward_xy_abs(&robot.cs.traj, pos_x, pos_y);
 800254a:	ed97 1b00 	vldr	d1, [r7]
 800254e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <OS_MotionGoToBwd+0x24>)
 8002554:	f001 ffb0 	bl	80044b8 <trajectory_goto_backward_xy_abs>
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20014788 	.word	0x20014788

08002564 <OS_MotionTurnToFront>:

void OS_MotionTurnToFront(double pos_x, double pos_y)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	ed87 0b02 	vstr	d0, [r7, #8]
 800256e:	ed87 1b00 	vstr	d1, [r7]
	trajectory_turnto_xy(&robot.cs.traj, pos_x, pos_y);
 8002572:	ed97 1b00 	vldr	d1, [r7]
 8002576:	ed97 0b02 	vldr	d0, [r7, #8]
 800257a:	4803      	ldr	r0, [pc, #12]	; (8002588 <OS_MotionTurnToFront+0x24>)
 800257c:	f001 fe58 	bl	8004230 <trajectory_turnto_xy>
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20014788 	.word	0x20014788

0800258c <OS_MotionTurnToBehind>:

void OS_MotionTurnToBehind(double pos_x, double pos_y)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	ed87 0b02 	vstr	d0, [r7, #8]
 8002596:	ed87 1b00 	vstr	d1, [r7]
	trajectory_turnto_xy_behind(&robot.cs.traj, pos_x, pos_y);
 800259a:	ed97 1b00 	vldr	d1, [r7]
 800259e:	ed97 0b02 	vldr	d0, [r7, #8]
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <OS_MotionTurnToBehind+0x24>)
 80025a4:	f001 feac 	bl	8004300 <trajectory_turnto_xy_behind>
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20014788 	.word	0x20014788

080025b4 <vCreateAllMutex>:

void vCreateAllMutex(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	xEncoderAngleMutex = xSemaphoreCreateMutex();
 80025b8:	2001      	movs	r0, #1
 80025ba:	f004 fd45 	bl	8007048 <xQueueCreateMutex>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <vCreateAllMutex+0x44>)
 80025c2:	601a      	str	r2, [r3, #0]
	xEncoderDistanceMutex = xSemaphoreCreateMutex();
 80025c4:	2001      	movs	r0, #1
 80025c6:	f004 fd3f 	bl	8007048 <xQueueCreateMutex>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <vCreateAllMutex+0x48>)
 80025ce:	601a      	str	r2, [r3, #0]
	xAngleConsignMutex = xSemaphoreCreateMutex();
 80025d0:	2001      	movs	r0, #1
 80025d2:	f004 fd39 	bl	8007048 <xQueueCreateMutex>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <vCreateAllMutex+0x4c>)
 80025da:	601a      	str	r2, [r3, #0]
	xDistanceConsignMutex = xSemaphoreCreateMutex();
 80025dc:	2001      	movs	r0, #1
 80025de:	f004 fd33 	bl	8007048 <xQueueCreateMutex>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <vCreateAllMutex+0x50>)
 80025e6:	601a      	str	r2, [r3, #0]
	xRobotPositionMutex = xSemaphoreCreateMutex();
 80025e8:	2001      	movs	r0, #1
 80025ea:	f004 fd2d 	bl	8007048 <xQueueCreateMutex>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <vCreateAllMutex+0x54>)
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200105e0 	.word	0x200105e0
 80025fc:	200105e4 	.word	0x200105e4
 8002600:	200105e8 	.word	0x200105e8
 8002604:	200105ec 	.word	0x200105ec
 8002608:	200105f0 	.word	0x200105f0

0800260c <vLockEncoderAngle>:
void vLockEncoderAngle(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	xSemaphoreTake(xEncoderAngleMutex, portMAX_DELAY);
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <vLockEncoderAngle+0x18>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	2300      	movs	r3, #0
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	2100      	movs	r1, #0
 800261c:	f004 fec2 	bl	80073a4 <xQueueGenericReceive>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200105e0 	.word	0x200105e0

08002628 <vLockEncoderDistance>:
void vLockEncoderDistance(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	xSemaphoreTake(xEncoderDistanceMutex, portMAX_DELAY);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <vLockEncoderDistance+0x18>)
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	f04f 32ff 	mov.w	r2, #4294967295
 8002636:	2100      	movs	r1, #0
 8002638:	f004 feb4 	bl	80073a4 <xQueueGenericReceive>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200105e4 	.word	0x200105e4

08002644 <vLockAngleConsign>:
void vLockAngleConsign(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	xSemaphoreTake(xAngleConsignMutex, portMAX_DELAY);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <vLockAngleConsign+0x18>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	f04f 32ff 	mov.w	r2, #4294967295
 8002652:	2100      	movs	r1, #0
 8002654:	f004 fea6 	bl	80073a4 <xQueueGenericReceive>
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200105e8 	.word	0x200105e8

08002660 <vLockDistanceConsign>:
void vLockDistanceConsign(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	xSemaphoreTake(xDistanceConsignMutex, portMAX_DELAY);
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <vLockDistanceConsign+0x18>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	2100      	movs	r1, #0
 8002670:	f004 fe98 	bl	80073a4 <xQueueGenericReceive>
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200105ec 	.word	0x200105ec

0800267c <vLockRobotPosition>:
void vLockRobotPosition(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	xSemaphoreTake(xRobotPositionMutex, portMAX_DELAY);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <vLockRobotPosition+0x18>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	f04f 32ff 	mov.w	r2, #4294967295
 800268a:	2100      	movs	r1, #0
 800268c:	f004 fe8a 	bl	80073a4 <xQueueGenericReceive>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200105f0 	.word	0x200105f0

08002698 <vUnlockEncoderAngle>:
void vUnlockEncoderAngle(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	xSemaphoreGive(xEncoderAngleMutex);
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <vUnlockEncoderAngle+0x18>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	2300      	movs	r3, #0
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	f004 fce7 	bl	8007078 <xQueueGenericSend>
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200105e0 	.word	0x200105e0

080026b4 <vUnlockEncoderDistance>:
void vUnlockEncoderDistance(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	xSemaphoreGive(xEncoderDistanceMutex);
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <vUnlockEncoderDistance+0x18>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	2300      	movs	r3, #0
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	f004 fcd9 	bl	8007078 <xQueueGenericSend>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200105e4 	.word	0x200105e4

080026d0 <vUnlockAngleConsign>:
void vUnlockAngleConsign(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	xSemaphoreGive(xAngleConsignMutex);
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <vUnlockAngleConsign+0x18>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	f004 fccb 	bl	8007078 <xQueueGenericSend>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200105e8 	.word	0x200105e8

080026ec <vUnlockDistanceConsign>:
void vUnlockDistanceConsign(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	xSemaphoreGive(xDistanceConsignMutex);
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <vUnlockDistanceConsign+0x18>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	f004 fcbd 	bl	8007078 <xQueueGenericSend>
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200105ec 	.word	0x200105ec

08002708 <vUnlockRobotPosition>:
void vUnlockRobotPosition(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	xSemaphoreGive(xRobotPositionMutex);
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <vUnlockRobotPosition+0x18>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	f004 fcaf 	bl	8007078 <xQueueGenericSend>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200105f0 	.word	0x200105f0

08002724 <motion_is_traj_done>:

void motion_set_wp(wp_t *waypoint) {
	xQueueSend(xWaypointQueue, waypoint, 0);
}

bool motion_is_traj_done(wp_t *waypoint) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	if(waypoint->trajectory_must_finish)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7cdb      	ldrb	r3, [r3, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <motion_is_traj_done+0x18>
		return Os_MotionTrajectoryFinished();
 8002734:	f7ff fe96 	bl	8002464 <Os_MotionTrajectoryFinished>
 8002738:	4603      	mov	r3, r0
 800273a:	e002      	b.n	8002742 <motion_is_traj_done+0x1e>
	else
		return Os_MotionTrajectoryNear();
 800273c:	f7ff fe70 	bl	8002420 <Os_MotionTrajectoryNear>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop

0800274c <motion_send_wp>:
void motion_clear(void){
	wp_t lost;
	while(xQueueReceive(xWaypointQueue, &lost, 0));
}

void motion_send_wp(wp_t *waypoint) {
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    //		phys_apply_offset(&(robot.cs.pos), (waypoint->coord.abs), (waypoint->offset));
    //  }
 // }

    // Pop a waypoint and send the speed and position it
    switch(waypoint->speed) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7c9b      	ldrb	r3, [r3, #18]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d00a      	beq.n	8002772 <motion_send_wp+0x26>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d00f      	beq.n	8002780 <motion_send_wp+0x34>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d113      	bne.n	800278c <motion_send_wp+0x40>
    	case WP_SPEED_FAST:
    		OS_MotionSetSpeed(SPEED_FAST_D, SPEED_FAST_A);
 8002764:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002768:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800276c:	f7ff fe94 	bl	8002498 <OS_MotionSetSpeed>
    		break;
 8002770:	e011      	b.n	8002796 <motion_send_wp+0x4a>
    	case WP_SPEED_NORMAL:
    		OS_MotionSetSpeed(SPEED_NORMAL_D, SPEED_NORMAL_A);
 8002772:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002776:	f44f 7048 	mov.w	r0, #800	; 0x320
 800277a:	f7ff fe8d 	bl	8002498 <OS_MotionSetSpeed>
    		break;
 800277e:	e00a      	b.n	8002796 <motion_send_wp+0x4a>
    	case WP_SPEED_SLOW:
    		OS_MotionSetSpeed(SPEED_SLOW_D, SPEED_SLOW_A);
 8002780:	21c8      	movs	r1, #200	; 0xc8
 8002782:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002786:	f7ff fe87 	bl	8002498 <OS_MotionSetSpeed>
    		break;
 800278a:	e004      	b.n	8002796 <motion_send_wp+0x4a>
    	case WP_SPEED_VERY_SLOW:
    	default: // this is quite an error
    		OS_MotionSetSpeed(SPEED_VERY_SLOW_D, SPEED_VERY_SLOW_A);
 800278c:	2164      	movs	r1, #100	; 0x64
 800278e:	20c8      	movs	r0, #200	; 0xc8
 8002790:	f7ff fe82 	bl	8002498 <OS_MotionSetSpeed>
    		break;
 8002794:	bf00      	nop
    }

    switch(waypoint->type) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	2b05      	cmp	r3, #5
 800279e:	f200 8099 	bhi.w	80028d4 <motion_send_wp+0x188>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <motion_send_wp+0x5c>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027ef 	.word	0x080027ef
 80027b0:	0800281d 	.word	0x0800281d
 80027b4:	0800284b 	.word	0x0800284b
 80027b8:	080028a7 	.word	0x080028a7
 80027bc:	08002879 	.word	0x08002879
    	// "GOTO" motion (full-motions)
    	case WP_GOTO_AUTO:
    		OS_MotionGoToAuto(waypoint->coord.abs.x, waypoint->coord.abs.y);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fecc 	bl	8000564 <__aeabi_i2d>
 80027cc:	4604      	mov	r4, r0
 80027ce:	460d      	mov	r5, r1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fec4 	bl	8000564 <__aeabi_i2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	ec43 2b11 	vmov	d1, r2, r3
 80027e4:	ec45 4b10 	vmov	d0, r4, r5
 80027e8:	f7ff fe80 	bl	80024ec <OS_MotionGoToAuto>
    		break;
 80027ec:	e073      	b.n	80028d6 <motion_send_wp+0x18a>
    	case WP_GOTO_FWD:
    		OS_MotionGoToFwd(waypoint->coord.abs.x, waypoint->coord.abs.y);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd feb5 	bl	8000564 <__aeabi_i2d>
 80027fa:	4604      	mov	r4, r0
 80027fc:	460d      	mov	r5, r1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fead 	bl	8000564 <__aeabi_i2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	ec43 2b11 	vmov	d1, r2, r3
 8002812:	ec45 4b10 	vmov	d0, r4, r5
 8002816:	f7ff fe7d 	bl	8002514 <OS_MotionGoToFwd>
    		break;
 800281a:	e05c      	b.n	80028d6 <motion_send_wp+0x18a>
    	case WP_GOTO_BWD:
    		OS_MotionGoToBwd(waypoint->coord.abs.x, waypoint->coord.abs.y);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe9e 	bl	8000564 <__aeabi_i2d>
 8002828:	4604      	mov	r4, r0
 800282a:	460d      	mov	r5, r1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe96 	bl	8000564 <__aeabi_i2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	ec43 2b11 	vmov	d1, r2, r3
 8002840:	ec45 4b10 	vmov	d0, r4, r5
 8002844:	f7ff fe7a 	bl	800253c <OS_MotionGoToBwd>
    		break;
 8002848:	e045      	b.n	80028d6 <motion_send_wp+0x18a>

    	// Relative motion
    	case WP_MOVE_REL:
        // Depending on the sign of the "d", we will go forward or backward
    		OS_MotionMoveRelative(waypoint->coord.rel.d, waypoint->coord.rel.a);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe87 	bl	8000564 <__aeabi_i2d>
 8002856:	4604      	mov	r4, r0
 8002858:	460d      	mov	r5, r1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe7f 	bl	8000564 <__aeabi_i2d>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	ec43 2b11 	vmov	d1, r2, r3
 800286e:	ec45 4b10 	vmov	d0, r4, r5
 8002872:	f7ff fe27 	bl	80024c4 <OS_MotionMoveRelative>
    		break;
 8002876:	e02e      	b.n	80028d6 <motion_send_wp+0x18a>

  		// "ORIENT" motions (pure rotation)
    	case WP_ORIENT_BEHIND:
    		OS_MotionTurnToBehind(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe70 	bl	8000564 <__aeabi_i2d>
 8002884:	4604      	mov	r4, r0
 8002886:	460d      	mov	r5, r1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe68 	bl	8000564 <__aeabi_i2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	ec43 2b11 	vmov	d1, r2, r3
 800289c:	ec45 4b10 	vmov	d0, r4, r5
 80028a0:	f7ff fe74 	bl	800258c <OS_MotionTurnToBehind>
    		break;
 80028a4:	e017      	b.n	80028d6 <motion_send_wp+0x18a>
    	case WP_ORIENT_FRONT:
    		OS_MotionTurnToFront(waypoint->coord.abs.x, waypoint->coord.abs.y);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe59 	bl	8000564 <__aeabi_i2d>
 80028b2:	4604      	mov	r4, r0
 80028b4:	460d      	mov	r5, r1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe51 	bl	8000564 <__aeabi_i2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	ec43 2b11 	vmov	d1, r2, r3
 80028ca:	ec45 4b10 	vmov	d0, r4, r5
 80028ce:	f7ff fe49 	bl	8002564 <OS_MotionTurnToFront>
    		break;
 80028d2:	e000      	b.n	80028d6 <motion_send_wp+0x18a>

    	default:
    		// error
    		break;
 80028d4:	bf00      	nop
    } // switch
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bdb0      	pop	{r4, r5, r7, pc}
 80028de:	bf00      	nop

080028e0 <OS_SHL_Start>:
 * Shell creation
 * -----------------------------------------------------------------------------
 */

void OS_SHL_Start( void )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af02      	add	r7, sp, #8
	/* Create the semaphore used to access the UART Tx. */
	xTxMutex = xSemaphoreCreateMutex();
 80028e6:	2001      	movs	r0, #1
 80028e8:	f004 fbae 	bl	8007048 <xQueueCreateMutex>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <OS_SHL_Start+0x48>)
 80028f0:	601a      	str	r2, [r3, #0]
	configASSERT( xTxMutex );
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <OS_SHL_Start+0x48>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <OS_SHL_Start+0x22>
 80028fa:	490c      	ldr	r1, [pc, #48]	; (800292c <OS_SHL_Start+0x4c>)
 80028fc:	202b      	movs	r0, #43	; 0x2b
 80028fe:	f7ff f87f 	bl	8001a00 <vAssertCalled>

	/* Register Shell Commands */
	OS_SHL_RegisterCommands();
 8002902:	f7fe fb5d 	bl	8000fc0 <OS_SHL_RegisterCommands>

	/* Initialize configuration with default settings */
	OS_SHL_Config.echo = true;
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <OS_SHL_Start+0x50>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]

	/* Create that task that handles the console itself. */
	xTaskCreate( 	OS_SHL_Task,				/* The task that implements the command console. */
 800290c:	2300      	movs	r3, #0
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	2301      	movs	r3, #1
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2300      	movs	r3, #0
 8002916:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800291a:	4906      	ldr	r1, [pc, #24]	; (8002934 <OS_SHL_Start+0x54>)
 800291c:	4806      	ldr	r0, [pc, #24]	; (8002938 <OS_SHL_Start+0x58>)
 800291e:	f005 f8a1 	bl	8007a64 <xTaskCreate>
					"SHELL",	    			/* Text name assigned to the task.  This is just to assist debugging.  The kernel does not use this name itself. */
					500,						/* The size of the stack allocated to the task. */
					NULL,						/* The parameter is not used, so NULL is passed. */
					OS_TASK_PRIORITY_SHELL,		/* The priority allocated to the task. */
					NULL );						/* A handle is not required, so just pass NULL. */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2001061c 	.word	0x2001061c
 800292c:	080113f4 	.word	0x080113f4
 8002930:	20014950 	.word	0x20014950
 8002934:	08011414 	.word	0x08011414
 8002938:	0800293d 	.word	0x0800293d

0800293c <OS_SHL_Task>:
 * Shell Task
 * -----------------------------------------------------------------------------
 */

static void OS_SHL_Task( void *pvParameters )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	char cRxedChar;
	uint8_t ucInputIndex = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	75fb      	strb	r3, [r7, #23]
	( void ) pvParameters;

	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console interface
	will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8002948:	f006 fec2 	bl	80096d0 <FreeRTOS_CLIGetOutputBuffer>
 800294c:	6138      	str	r0, [r7, #16]

	/* Send the welcome message. */
	HW_DBG_Puts(pcWelcomeMessage);
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <OS_SHL_Task+0x100>)
 8002950:	4618      	mov	r0, r3
 8002952:	f007 fa81 	bl	8009e58 <HW_DBG_Puts>
	for( ;; )
	{
		/* Wait for the next character.  The while loop is used in case
		INCLUDE_vTaskSuspend is not set to 1 - in which case the RX Timeout will
		be a genuine block time rather than an infinite block time. */
		while( HW_DBG_Get(&cRxedChar) != pdPASS );
 8002956:	bf00      	nop
 8002958:	f107 030b 	add.w	r3, r7, #11
 800295c:	4618      	mov	r0, r3
 800295e:	f007 fa97 	bl	8009e90 <HW_DBG_Get>
 8002962:	4603      	mov	r3, r0
 8002964:	2b01      	cmp	r3, #1
 8002966:	d1f7      	bne.n	8002958 <OS_SHL_Task+0x1c>

		/* Ensure exclusive access to the UART Tx. */
		if( xSemaphoreTake( xTxMutex, SHELL_MAX_MUTEX_WAIT ) == pdPASS )
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <OS_SHL_Task+0x104>)
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002972:	2100      	movs	r1, #0
 8002974:	f004 fd16 	bl	80073a4 <xQueueGenericReceive>
 8002978:	4603      	mov	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	d1eb      	bne.n	8002956 <OS_SHL_Task+0x1a>
		{
			/* Echo the character back. */
			//if(OS_SHL_Config.echo) {
			    HW_DBG_Put(cRxedChar);
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	4618      	mov	r0, r3
 8002982:	f007 fa2b 	bl	8009ddc <HW_DBG_Put>
			//}

			/* Was it the end of the line? */
			if( cRxedChar == '\n' || cRxedChar == '\r' )
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	2b0a      	cmp	r3, #10
 800298a:	d002      	beq.n	8002992 <OS_SHL_Task+0x56>
 800298c:	7afb      	ldrb	r3, [r7, #11]
 800298e:	2b0d      	cmp	r3, #13
 8002990:	d127      	bne.n	80029e2 <OS_SHL_Task+0xa6>
			{
				/* Just to space the output from the input. */
			    //if(OS_SHL_Config.echo) {
			        HW_DBG_Puts(pcNewLine);
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <OS_SHL_Task+0x108>)
 8002994:	4618      	mov	r0, r3
 8002996:	f007 fa5f 	bl	8009e58 <HW_DBG_Puts>
			    //}

				/* See if the command is empty, indicating that the last command
				is to be executed again. */
				if( ucInputIndex == 0 )
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <OS_SHL_Task+0x6c>
				{
					/* Copy the last command back into the input string. */
					strcpy( cInputString, cLastInputString );
 80029a0:	4929      	ldr	r1, [pc, #164]	; (8002a48 <OS_SHL_Task+0x10c>)
 80029a2:	482a      	ldr	r0, [pc, #168]	; (8002a4c <OS_SHL_Task+0x110>)
 80029a4:	f008 feb4 	bl	800b710 <strcpy>
				pdFALSE	(indicating there is no more output) as it might
				generate more than one string. */
				do
				{
					/* Get the next output string from the command interpreter. */
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
 80029a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	4827      	ldr	r0, [pc, #156]	; (8002a4c <OS_SHL_Task+0x110>)
 80029b0:	f006 fe08 	bl	80095c4 <FreeRTOS_CLIProcessCommand>
 80029b4:	60f8      	str	r0, [r7, #12]

					/* Write the generated string to the UART. */
					HW_DBG_Puts(pcOutputString);
 80029b6:	6938      	ldr	r0, [r7, #16]
 80029b8:	f007 fa4e 	bl	8009e58 <HW_DBG_Puts>

				} while( xReturned != pdFALSE );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f2      	bne.n	80029a8 <OS_SHL_Task+0x6c>

				/* All the strings generated by the input command have been
				sent.  Clear the input string ready to receive the next command.
				Remember the command that was just processed first in case it is
				to be processed again. */
				strcpy( cLastInputString, cInputString );
 80029c2:	4922      	ldr	r1, [pc, #136]	; (8002a4c <OS_SHL_Task+0x110>)
 80029c4:	4820      	ldr	r0, [pc, #128]	; (8002a48 <OS_SHL_Task+0x10c>)
 80029c6:	f008 fea3 	bl	800b710 <strcpy>
				ucInputIndex = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
				memset( cInputString, 0x00, SHELL_MAX_INPUT_SIZE );
 80029ce:	2264      	movs	r2, #100	; 0x64
 80029d0:	2100      	movs	r1, #0
 80029d2:	481e      	ldr	r0, [pc, #120]	; (8002a4c <OS_SHL_Task+0x110>)
 80029d4:	f008 fdcb 	bl	800b56e <memset>

				//if(OS_SHL_Config.echo) {
				    HW_DBG_Puts(pcEndOfOutputMessage);
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <OS_SHL_Task+0x114>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f007 fa3c 	bl	8009e58 <HW_DBG_Puts>
 80029e0:	e023      	b.n	8002a2a <OS_SHL_Task+0xee>
				//}
			}
			else
			{
				if( cRxedChar == '\r' )
 80029e2:	7afb      	ldrb	r3, [r7, #11]
 80029e4:	2b0d      	cmp	r3, #13
 80029e6:	d020      	beq.n	8002a2a <OS_SHL_Task+0xee>
				{
					/* Ignore the character. */
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
 80029e8:	7afb      	ldrb	r3, [r7, #11]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d002      	beq.n	80029f4 <OS_SHL_Task+0xb8>
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	2b7f      	cmp	r3, #127	; 0x7f
 80029f2:	d10a      	bne.n	8002a0a <OS_SHL_Task+0xce>
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d017      	beq.n	8002a2a <OS_SHL_Task+0xee>
					{
						ucInputIndex--;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
						cInputString[ ucInputIndex ] = '\0';
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <OS_SHL_Task+0x110>)
 8002a04:	2100      	movs	r1, #0
 8002a06:	54d1      	strb	r1, [r2, r3]
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 8002a08:	e00f      	b.n	8002a2a <OS_SHL_Task+0xee>
				else
				{
					/* A character was entered.  Add it to the string entered so
					far.  When a \n is entered the complete	string will be
					passed to the command interpreter. */
					if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	2b1f      	cmp	r3, #31
 8002a0e:	d90c      	bls.n	8002a2a <OS_SHL_Task+0xee>
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	2b7e      	cmp	r3, #126	; 0x7e
 8002a14:	d809      	bhi.n	8002a2a <OS_SHL_Task+0xee>
					{
						if( ucInputIndex < SHELL_MAX_INPUT_SIZE )
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b63      	cmp	r3, #99	; 0x63
 8002a1a:	d806      	bhi.n	8002a2a <OS_SHL_Task+0xee>
						{
							cInputString[ ucInputIndex ] = cRxedChar;
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	7af9      	ldrb	r1, [r7, #11]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <OS_SHL_Task+0x110>)
 8002a22:	54d1      	strb	r1, [r2, r3]
							ucInputIndex++;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	3301      	adds	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
					}
				}
			}

			/* Must ensure to give the mutex back. */
			xSemaphoreGive( xTxMutex );
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <OS_SHL_Task+0x104>)
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	f004 fb20 	bl	8007078 <xQueueGenericSend>
		}
	}
 8002a38:	e78d      	b.n	8002956 <OS_SHL_Task+0x1a>
 8002a3a:	bf00      	nop
 8002a3c:	0801126c 	.word	0x0801126c
 8002a40:	2001061c 	.word	0x2001061c
 8002a44:	080113f0 	.word	0x080113f0
 8002a48:	20010684 	.word	0x20010684
 8002a4c:	20010620 	.word	0x20010620
 8002a50:	080113e8 	.word	0x080113e8

08002a54 <rs_get_polar_from_wheels>:
/**
 * convert the values of wheels encoders (left, right) into (distance,
 * angle)
 */
void rs_get_polar_from_wheels(struct rs_polar *p_dst, struct rs_wheels *w_src)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
	p_dst->distance = (w_src->right + w_src->left) / 2;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da00      	bge.n	8002a6e <rs_get_polar_from_wheels+0x1a>
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	105b      	asrs	r3, r3, #1
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
	p_dst->angle    = (w_src->right - w_src->left) / 2;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da00      	bge.n	8002a86 <rs_get_polar_from_wheels+0x32>
 8002a84:	3301      	adds	r3, #1
 8002a86:	105b      	asrs	r3, r3, #1
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	605a      	str	r2, [r3, #4]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <rs_get_wheels_from_polar>:

/**
 * convert (distance, angle) into (left, right)
 */
void rs_get_wheels_from_polar(struct rs_wheels *w_dst, struct rs_polar *p_src)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
	w_dst->left  = p_src->distance - p_src->angle;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
	w_dst->right = p_src->distance + p_src->angle;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	605a      	str	r2, [r3, #4]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <bd_init>:

#include <blocking_detection_manager.h>

/** init module, give the robot system to use as a parameter */
void bd_init(struct blocking_detection * bd)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	memset(bd, 0, sizeof(*bd));
 8002ad8:	222c      	movs	r2, #44	; 0x2c
 8002ada:	2100      	movs	r1, #0
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f008 fd46 	bl	800b56e <memset>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <bd_set_current_thresholds>:

/* thresholds */
void bd_set_current_thresholds(struct blocking_detection * bd, 
			       int32_t k1, int32_t k2, 
			       uint32_t i_thres, uint16_t cpt_thres)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
	bd->k1 = k1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
	bd->k2 = k2;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
	bd->i_thres = i_thres;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
	bd->cpt_thres = cpt_thres;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8b3a      	ldrh	r2, [r7, #24]
 8002b10:	821a      	strh	r2, [r3, #16]
	bd->cpt = 0;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	825a      	strh	r2, [r3, #18]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <bd_set_speed_threshold>:

/* speed threshold */
void bd_set_speed_threshold(struct blocking_detection * bd, 
			    uint16_t speed)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
	bd->speed_thres = speed;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	829a      	strh	r2, [r3, #20]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop

08002b44 <safe_filter>:
 * - if pointer is null, return the IN value
 * - else apply filter
 */
static inline uint32_t
safe_filter(int32_t (*f)(void *, int32_t), void * param, int32_t value)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
	int32_t (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <safe_filter+0x26>
		return f_tmp(param_tmp, value);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6938      	ldr	r0, [r7, #16]
 8002b64:	4798      	blx	r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	e000      	b.n	8002b6c <safe_filter+0x28>
	}
	return value;
 8002b6a:	687b      	ldr	r3, [r7, #4]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <safe_getprocessout>:
 * - if pointer is null, return 0
 * - else return the value processed by the function
 */
static inline uint32_t
safe_getprocessout(int32_t (*f)(void *), void * param)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	int32_t (*f_tmp)(void *);
	void * param_tmp;
	f_tmp = f;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
	param_tmp = param;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	60bb      	str	r3, [r7, #8]
	if (f_tmp) {
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <safe_getprocessout+0x22>
		return f_tmp(param_tmp);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68b8      	ldr	r0, [r7, #8]
 8002b90:	4798      	blx	r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	e000      	b.n	8002b98 <safe_getprocessout+0x24>
	}
	return 0;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <safe_setprocessin>:
 * - if pointer is null, don't do anything
 * - else call the processin with the parameters
 */
static inline void
safe_setprocessin(void (*f)(void *, int32_t), void * param, int32_t value)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	void (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <safe_setprocessin+0x22>
		f_tmp(param_tmp, value);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6938      	ldr	r0, [r7, #16]
 8002bc0:	4798      	blx	r3
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop

08002bcc <cs_init>:

/**********************************************/

void cs_init(struct cs* cs)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    cs->consign_filter = NULL;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    cs->consign_filter_params = NULL;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]

    cs->correct_filter = NULL;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
    cs->correct_filter_params = NULL;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	60da      	str	r2, [r3, #12]

    cs->feedback_filter = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
    cs->feedback_filter_params = NULL;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]

    cs->process_out = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
    cs->process_out_params = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	61da      	str	r2, [r3, #28]

    cs->process_in = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	621a      	str	r2, [r3, #32]
    cs->process_in_params = NULL;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

    cs->consign_value = 0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
    cs->error_value = 0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34
    cs->out_value = 0;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38

    return;
 8002c22:	bf00      	nop
}
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop

08002c30 <cs_set_consign_filter>:


void cs_set_consign_filter(struct cs* cs, int32_t (*consign_filter)(void*, int32_t), void* consign_filter_params)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
    cs->consign_filter = consign_filter;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	601a      	str	r2, [r3, #0]
    cs->consign_filter_params = consign_filter_params;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	605a      	str	r2, [r3, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <cs_set_correct_filter>:



void cs_set_correct_filter(struct cs* cs, int32_t (*correct_filter)(void*, int32_t), void* correct_filter_params)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
    cs->correct_filter = correct_filter;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
    cs->correct_filter_params = correct_filter_params;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <cs_set_process_in>:
    cs->feedback_filter_params = feedback_filter_params;
}


void cs_set_process_in(struct cs* cs, void (*process_in)(void*, int32_t), void* process_in_params)
{        
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
    cs->process_in = process_in;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	621a      	str	r2, [r3, #32]
    cs->process_in_params = process_in_params;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <cs_set_process_out>:



void cs_set_process_out(struct cs* cs, int32_t (*process_out)(void*), void* process_out_params)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
    cs->process_out = process_out;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	619a      	str	r2, [r3, #24]
    cs->process_out_params = process_out_params;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	61da      	str	r2, [r3, #28]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <cs_do_process>:



int32_t cs_do_process(struct cs* cs, int32_t consign)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]

    static int i=0;
    int32_t process_out_value = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]

    /* save the consign value into the structure */
    cs->consign_value = consign;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

    DEBUG("%d %ld ", i++, consign);

    /* if the consign filter exist */
    cs->filtered_consign_value = consign = safe_filter(cs->consign_filter, cs->consign_filter_params, consign);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7ff ff30 	bl	8002b44 <safe_filter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
	
    DEBUG("%ld ", cs->filtered_consign_value);

    /* read the process out if defined */
    process_out_value = safe_getprocessout(cs->process_out, cs->process_out_params);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f7ff ff3b 	bl	8002b74 <safe_getprocessout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	60fb      	str	r3, [r7, #12]

    DEBUG("%ld ", process_out_value);

    /* apply the feedback filter if defined */
    process_out_value = safe_filter(cs->feedback_filter, cs->feedback_filter_params, process_out_value);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6918      	ldr	r0, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7ff ff19 	bl	8002b44 <safe_filter>
 8002d12:	4603      	mov	r3, r0
 8002d14:	60fb      	str	r3, [r7, #12]
    cs->filtered_feedback_value = process_out_value;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    DEBUG("%ld ", process_out_value);

    /* substract consign and process out and put it into error */
    cs->error_value = cs->filtered_consign_value - process_out_value ;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	635a      	str	r2, [r3, #52]	; 0x34
    
    DEBUG("%ld ", cs->error_value);

    /* apply the correct filter to error_value and put it into out_value */
    cs->out_value = safe_filter(cs->correct_filter, cs->correct_filter_params, cs->error_value);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6898      	ldr	r0, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68d9      	ldr	r1, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	461a      	mov	r2, r3
 8002d36:	f7ff ff05 	bl	8002b44 <safe_filter>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
 
    DEBUG("%ld\n", cs->out_value);

    /* send out_value to process in*/
    safe_setprocessin (cs->process_in, cs->process_in_params, cs->out_value);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a18      	ldr	r0, [r3, #32]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f7ff ff26 	bl	8002ba0 <safe_setprocessin>

    /* return the out value */
    return (cs->out_value);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <cs_manage>:



void cs_manage(void * data)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    struct cs* cs = data;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]
    cs_do_process(cs, cs->consign_value);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	4619      	mov	r1, r3
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff ffa4 	bl	8002cc0 <cs_do_process>
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <cs_get_consign>:
}



int32_t cs_get_consign(struct cs* cs)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    int32_t tmp;
    tmp = cs->consign_value;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	60fb      	str	r3, [r7, #12]

    return tmp;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <cs_get_filtered_consign>:

int32_t cs_get_filtered_consign(struct cs* cs)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    int32_t tmp;
    tmp = cs->filtered_consign_value;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	60fb      	str	r3, [r7, #12]

    return tmp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <cs_set_consign>:
}



void cs_set_consign(struct cs* cs, int32_t v)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
    /* set the consign */
    cs->consign_value = v;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
}        
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <pid_init>:
#include <pid.h>


/** this function will initialize all fieds of pid structure to 0 */
void pid_init(struct pid_filter *p)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	memset(p, 0, sizeof(*p));
 8002ddc:	2234      	movs	r2, #52	; 0x34
 8002dde:	2100      	movs	r1, #0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f008 fbc4 	bl	800b56e <memset>
	p->gain_P = 1 ;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	801a      	strh	r2, [r3, #0]
	p->derivate_nb_samples = 1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	71da      	strb	r2, [r3, #7]
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop

08002dfc <pid_set_gains>:
	p->prev_D = 0;
	p->prev_out = 0;
}

void pid_set_gains(struct pid_filter *p, int16_t gp, int16_t gi, int16_t gd)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
	p->gain_P  = gp;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	897a      	ldrh	r2, [r7, #10]
 8002e1a:	801a      	strh	r2, [r3, #0]
	p->gain_I  = gi;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	893a      	ldrh	r2, [r7, #8]
 8002e20:	805a      	strh	r2, [r3, #2]
	p->gain_D  = gd;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	809a      	strh	r2, [r3, #4]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <pid_set_maximums>:

void pid_set_maximums(struct pid_filter *p, int32_t max_in, int32_t max_I, int32_t max_out)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
	p->max_in  = max_in;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	61da      	str	r2, [r3, #28]
	p->max_I   = max_I;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]
	p->max_out = max_out;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <pid_set_out_shift>:

void pid_set_out_shift(struct pid_filter *p, uint8_t out_shift)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
	p->out_shift=out_shift;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	719a      	strb	r2, [r3, #6]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <pid_set_derivate_filter>:

int8_t pid_set_derivate_filter(struct pid_filter *p, uint8_t nb_samples)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
	int8_t ret;
	if (nb_samples > PID_DERIVATE_FILTER_MAX_SIZE) {
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d902      	bls.n	8002e98 <pid_set_derivate_filter+0x18>
		ret = -1;
 8002e92:	23ff      	movs	r3, #255	; 0xff
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e004      	b.n	8002ea2 <pid_set_derivate_filter+0x22>
	}
	else {
		p->derivate_nb_samples = nb_samples;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	71da      	strb	r2, [r3, #7]
		ret = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop

08002eb4 <pid_do_filter>:
	return ret;
}

/* first parameter should be a (struct pid_filter *) */
int32_t pid_do_filter(void * data, int32_t in)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
	int32_t derivate ;
	int32_t command ;
	struct pid_filter * p = data;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
	*
	* We can apply a filter to reduce noise on the derivate term,
	* by using a bigger period.
	*/
	
	prev_index = p->index + 1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	7a1b      	ldrb	r3, [r3, #8]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	74fb      	strb	r3, [r7, #19]
	if (prev_index >= p->derivate_nb_samples)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	79db      	ldrb	r3, [r3, #7]
 8002ece:	7cfa      	ldrb	r2, [r7, #19]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d301      	bcc.n	8002ed8 <pid_do_filter+0x24>
		prev_index = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74fb      	strb	r3, [r7, #19]

	/* saturate input... it influences integral an derivate */
	if (p->max_in)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d012      	beq.n	8002f06 <pid_do_filter+0x52>
		S_MAX(in, p->max_in) ;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	da03      	bge.n	8002ef2 <pid_do_filter+0x3e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	e009      	b.n	8002f06 <pid_do_filter+0x52>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	425a      	negs	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dd03      	ble.n	8002f06 <pid_do_filter+0x52>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	425b      	negs	r3, r3
 8002f04:	603b      	str	r3, [r7, #0]

	derivate = in - p->prev_samples[prev_index];
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	60bb      	str	r3, [r7, #8]
	p->integral += in ;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	441a      	add	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

	if (p->max_I)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <pid_do_filter+0xa6>
		S_MAX(p->integral, p->max_I) ;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dd04      	ble.n	8002f42 <pid_do_filter+0x8e>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f40:	e00b      	b.n	8002f5a <pid_do_filter+0xa6>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	425b      	negs	r3, r3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	da04      	bge.n	8002f5a <pid_do_filter+0xa6>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	425a      	negs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	461a      	mov	r2, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	fb03 f202 	mul.w	r2, r3, r2
		p->integral * p->gain_I +
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8002f72:	fb01 f303 	mul.w	r3, r1, r3

	if (p->max_I)
		S_MAX(p->integral, p->max_I) ;

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8002f76:	441a      	add	r2, r3
		p->integral * p->gain_I +
		(derivate * p->gain_D) / p->derivate_nb_samples ;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	fb03 f301 	mul.w	r3, r3, r1
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	79c9      	ldrb	r1, [r1, #7]
 8002f8a:	fb93 f3f1 	sdiv	r3, r3, r1

	if (p->max_I)
		S_MAX(p->integral, p->max_I) ;

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8002f8e:	4413      	add	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
		p->integral * p->gain_I +
		(derivate * p->gain_D) / p->derivate_nb_samples ;

	if ( command < 0 )
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da07      	bge.n	8002fa8 <pid_do_filter+0xf4>
		command = -( -command >> p->out_shift );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	425b      	negs	r3, r3
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	7992      	ldrb	r2, [r2, #6]
 8002fa0:	4113      	asrs	r3, r2
 8002fa2:	425b      	negs	r3, r3
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e005      	b.n	8002fb4 <pid_do_filter+0x100>
	else
		command = command >> p->out_shift ;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	799b      	ldrb	r3, [r3, #6]
 8002fac:	461a      	mov	r2, r3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	4113      	asrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

	if (p->max_out)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <pid_do_filter+0x12e>
		S_MAX (command, p->max_out) ;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	da03      	bge.n	8002fce <pid_do_filter+0x11a>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e009      	b.n	8002fe2 <pid_do_filter+0x12e>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	425a      	negs	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dd03      	ble.n	8002fe2 <pid_do_filter+0x12e>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	425b      	negs	r3, r3
 8002fe0:	617b      	str	r3, [r7, #20]


	/* backup of current error value (for the next calcul of derivate value) */
	p->prev_samples[p->index] = in ;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	7a1b      	ldrb	r3, [r3, #8]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
	p->index = prev_index; /* next index is prev_index */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	7cfa      	ldrb	r2, [r7, #19]
 8002ff6:	721a      	strb	r2, [r3, #8]
	p->prev_D = derivate ;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	p->prev_out = command ;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
	
	return command;
 8003004:	697b      	ldr	r3, [r7, #20]
} 
 8003006:	4618      	mov	r0, r3
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <quadramp_init>:
#include <quadramp.h>

#define NEXT(n, i)  (((n) + (i)/(n)) >> 1)

void quadramp_init(struct quadramp_filter * q)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	memset(q, 0, sizeof(*q));
 800301c:	221c      	movs	r2, #28
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f008 faa4 	bl	800b56e <memset>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop

08003030 <quadramp_set_2nd_order_vars>:
}

void quadramp_set_2nd_order_vars(struct quadramp_filter * q, 
				 uint32_t var_2nd_ord_pos, 
				 uint32_t var_2nd_ord_neg)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
	q->var_2nd_ord_pos = var_2nd_ord_pos;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	601a      	str	r2, [r3, #0]
	q->var_2nd_ord_neg = var_2nd_ord_neg;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	605a      	str	r2, [r3, #4]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <quadramp_set_1st_order_vars>:

void quadramp_set_1st_order_vars(struct quadramp_filter * q, 
				 uint32_t var_1st_ord_pos, 
				 uint32_t var_1st_ord_neg)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
	q->var_1st_ord_pos = var_1st_ord_pos;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
	q->var_1st_ord_neg = var_1st_ord_neg;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <quadramp_do_filter>:
 * \param data should be a (struct quadramp_filter *) pointer
 * \param in is the input of the filter
 * 
 */
int32_t quadramp_do_filter(void * data, int32_t in)
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b08f      	sub	sp, #60	; 0x3c
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	struct quadramp_filter * q = data;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	61fb      	str	r3, [r7, #28]
	int32_t d ;
	int32_t pos_target;
	int32_t var_1st_ord_pos = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t var_1st_ord_neg = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t var_2nd_ord_pos = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t var_2nd_ord_neg = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t previous_var, previous_out ;

	if ( q->var_1st_ord_pos )
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <quadramp_do_filter+0x2c>
		var_1st_ord_pos = q->var_1st_ord_pos ;  
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30

	if ( q->var_1st_ord_neg )
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <quadramp_do_filter+0x3c>
		var_1st_ord_neg = -q->var_1st_ord_neg ;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	425b      	negs	r3, r3
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ( q->var_2nd_ord_pos )
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <quadramp_do_filter+0x4a>
		var_2nd_ord_pos = q->var_2nd_ord_pos ;  
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28

	if ( q->var_2nd_ord_neg )
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <quadramp_do_filter+0x5a>
		var_2nd_ord_neg = -q->var_2nd_ord_neg ;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	425b      	negs	r3, r3
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

	previous_var = q->previous_var;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	623b      	str	r3, [r7, #32]
	previous_out = q->previous_out;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	61bb      	str	r3, [r7, #24]

	d = in - previous_out ;
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dd3b      	ble.n	8003164 <quadramp_do_filter+0xec>
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d038      	beq.n	8003164 <quadramp_do_filter+0xec>
		int32_t ramp_pos;
		/* var_2nd_ord_neg < 0 */
		/* real EQ : sqrt( var_2nd_ord_neg^2/4 - 2.d.var_2nd_ord_neg ) + var_2nd_ord_neg/2 */
		ramp_pos = sqrt( (var_2nd_ord_neg*var_2nd_ord_neg)/4 - 2*d*var_2nd_ord_neg ) + var_2nd_ord_neg/2;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da00      	bge.n	8003100 <quadramp_do_filter+0x88>
 80030fe:	3303      	adds	r3, #3
 8003100:	109b      	asrs	r3, r3, #2
 8003102:	4619      	mov	r1, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	1acb      	subs	r3, r1, r3
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa27 	bl	8000564 <__aeabi_i2d>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	ec44 3b10 	vmov	d0, r3, r4
 800311e:	f00b ff2d 	bl	800ef7c <sqrt>
 8003122:	ec56 5b10 	vmov	r5, r6, d0
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	da00      	bge.n	800312e <quadramp_do_filter+0xb6>
 800312c:	3301      	adds	r3, #1
 800312e:	105b      	asrs	r3, r3, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fa17 	bl	8000564 <__aeabi_i2d>
 8003136:	4603      	mov	r3, r0
 8003138:	460c      	mov	r4, r1
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	4628      	mov	r0, r5
 8003140:	4631      	mov	r1, r6
 8003142:	f7fd f8c3 	bl	80002cc <__adddf3>
 8003146:	4603      	mov	r3, r0
 8003148:	460c      	mov	r4, r1
 800314a:	4618      	mov	r0, r3
 800314c:	4621      	mov	r1, r4
 800314e:	f7fd fd1f 	bl	8000b90 <__aeabi_d2iz>
 8003152:	4603      	mov	r3, r0
 8003154:	613b      	str	r3, [r7, #16]

		if(ramp_pos < var_1st_ord_pos)
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	429a      	cmp	r2, r3
 800315c:	da42      	bge.n	80031e4 <quadramp_do_filter+0x16c>
			var_1st_ord_pos = ramp_pos ;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
	previous_out = q->previous_out;

	d = in - previous_out ;

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 8003162:	e03f      	b.n	80031e4 <quadramp_do_filter+0x16c>

		if(ramp_pos < var_1st_ord_pos)
			var_1st_ord_pos = ramp_pos ;
	}

	else if (d < 0 && var_2nd_ord_pos) {
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da3d      	bge.n	80031e6 <quadramp_do_filter+0x16e>
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03a      	beq.n	80031e6 <quadramp_do_filter+0x16e>
		int32_t ramp_neg;
    
		/* var_2nd_ord_pos > 0 */
		/* real EQ : sqrt( var_2nd_ord_pos^2/4 - 2.d.var_2nd_ord_pos ) - var_2nd_ord_pos/2 */
		ramp_neg = -sqrt( (var_2nd_ord_pos*var_2nd_ord_pos)/4 - 2*d*var_2nd_ord_pos ) - var_2nd_ord_pos/2;
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	da00      	bge.n	800317e <quadramp_do_filter+0x106>
 800317c:	3303      	adds	r3, #3
 800317e:	109b      	asrs	r3, r3, #2
 8003180:	4619      	mov	r1, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	1acb      	subs	r3, r1, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f9e8 	bl	8000564 <__aeabi_i2d>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	ec43 2b10 	vmov	d0, r2, r3
 800319c:	f00b feee 	bl	800ef7c <sqrt>
 80031a0:	ec53 2b10 	vmov	r2, r3, d0
 80031a4:	4614      	mov	r4, r2
 80031a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da00      	bge.n	80031b2 <quadramp_do_filter+0x13a>
 80031b0:	3301      	adds	r3, #1
 80031b2:	105b      	asrs	r3, r3, #1
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f9d5 	bl	8000564 <__aeabi_i2d>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fd f881 	bl	80002c8 <__aeabi_dsub>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	4618      	mov	r0, r3
 80031cc:	4621      	mov	r1, r4
 80031ce:	f7fd fcdf 	bl	8000b90 <__aeabi_d2iz>
 80031d2:	4603      	mov	r3, r0
 80031d4:	60fb      	str	r3, [r7, #12]
	
		/* ramp_neg < 0 */
		if(ramp_neg > var_1st_ord_neg)
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	429a      	cmp	r2, r3
 80031dc:	dd03      	ble.n	80031e6 <quadramp_do_filter+0x16e>
			var_1st_ord_neg = ramp_neg ;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e2:	e000      	b.n	80031e6 <quadramp_do_filter+0x16e>
	previous_out = q->previous_out;

	d = in - previous_out ;

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 80031e4:	bf00      	nop
			var_1st_ord_neg = ramp_neg ;
	}
    
	/* try to set the speed : can we reach the speed with our acceleration ? */
	/* si on va moins vite que la Vmax */
	if ( previous_var < var_1st_ord_pos )  {
 80031e6:	6a3a      	ldr	r2, [r7, #32]
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	429a      	cmp	r2, r3
 80031ec:	da0d      	bge.n	800320a <quadramp_do_filter+0x192>
		/* acceleration would be to high, we reduce the speed */
		/* si rampe acceleration active ET qu'on ne peut pas atteindre Vmax,
		 * on sature Vmax a Vcourante + acceleration */
		if (var_2nd_ord_pos && ( var_1st_ord_pos - previous_var > var_2nd_ord_pos) )
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <quadramp_do_filter+0x1b4>
 80031f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	1ad2      	subs	r2, r2, r3
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dd15      	ble.n	800322c <quadramp_do_filter+0x1b4>
			var_1st_ord_pos = previous_var + var_2nd_ord_pos ;
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	4413      	add	r3, r2
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
 8003208:	e010      	b.n	800322c <quadramp_do_filter+0x1b4>
	}
	/* si on va plus vite que Vmax */
	else if ( previous_var > var_1st_ord_pos )  { 
 800320a:	6a3a      	ldr	r2, [r7, #32]
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	429a      	cmp	r2, r3
 8003210:	dd0c      	ble.n	800322c <quadramp_do_filter+0x1b4>
		/* deceleration would be to high, we increase the speed */
		/* si rampe deceleration active ET qu'on ne peut pas atteindre Vmax,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_neg && ( var_1st_ord_pos - previous_var < var_2nd_ord_neg) )
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <quadramp_do_filter+0x1b4>
 8003218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	429a      	cmp	r2, r3
 8003222:	da03      	bge.n	800322c <quadramp_do_filter+0x1b4>
			var_1st_ord_pos = previous_var + var_2nd_ord_neg;
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	4413      	add	r3, r2
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
	}
  
	/* same for the neg */
	/* si on va plus vite que la Vmin (en negatif : en vrai la vitesse absolue est inferieure) */
	if ( previous_var > var_1st_ord_neg )  {
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	dd0d      	ble.n	8003250 <quadramp_do_filter+0x1d8>
		/* acceleration would be to high, we reduce the speed */
		/* si rampe deceleration active ET qu'on ne peut pas atteindre Vmin,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_neg && ( var_1st_ord_neg - previous_var < var_2nd_ord_neg) )
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01b      	beq.n	8003272 <quadramp_do_filter+0x1fa>
 800323a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	429a      	cmp	r2, r3
 8003244:	da15      	bge.n	8003272 <quadramp_do_filter+0x1fa>
			var_1st_ord_neg = previous_var + var_2nd_ord_neg ;
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	4413      	add	r3, r2
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324e:	e010      	b.n	8003272 <quadramp_do_filter+0x1fa>
	}
	/* si on va moins vite que Vmin (mais vitesse absolue superieure) */
	else if ( previous_var < var_1st_ord_neg )  {
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	429a      	cmp	r2, r3
 8003256:	da0c      	bge.n	8003272 <quadramp_do_filter+0x1fa>
		/* deceleration would be to high, we increase the speed */
		/* si rampe acceleration active ET qu'on ne peut pas atteindre Vmin,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_pos && (var_1st_ord_neg - previous_var > var_2nd_ord_pos) )
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <quadramp_do_filter+0x1fa>
 800325e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	429a      	cmp	r2, r3
 8003268:	dd03      	ble.n	8003272 <quadramp_do_filter+0x1fa>
			var_1st_ord_neg = previous_var + var_2nd_ord_pos;
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	4413      	add	r3, r2
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/*
	 * Position consign : can we reach the position with our speed ?
	 */
	if ( /* var_1st_ord_pos &&  */d > var_1st_ord_pos ) {
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	429a      	cmp	r2, r3
 8003278:	dd06      	ble.n	8003288 <quadramp_do_filter+0x210>
		pos_target = previous_out + var_1st_ord_pos ;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	4413      	add	r3, r2
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = var_1st_ord_pos ;
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	e010      	b.n	80032aa <quadramp_do_filter+0x232>
	}
	else if ( /* var_1st_ord_neg &&  */d < var_1st_ord_neg ) {
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	da06      	bge.n	800329e <quadramp_do_filter+0x226>
		pos_target = previous_out + var_1st_ord_neg ;
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	4413      	add	r3, r2
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = var_1st_ord_neg ;
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	e005      	b.n	80032aa <quadramp_do_filter+0x232>
	}
	else {
		pos_target = previous_out + d ;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	4413      	add	r3, r2
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = d ;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	623b      	str	r3, [r7, #32]
	}

	// update previous_out and previous_var
	q->previous_var = previous_var;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	611a      	str	r2, [r3, #16]
	q->previous_out = pos_target;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b4:	615a      	str	r2, [r3, #20]
	q->previous_in = in;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	619a      	str	r2, [r3, #24]

	return pos_target ;
 80032bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032be:	4618      	mov	r0, r3
 80032c0:	373c      	adds	r7, #60	; 0x3c
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c6:	bf00      	nop

080032c8 <vect2_cart2pol>:
   return;
}

/* Convert a cartesian vector to a polar one */
void vect2_cart2pol(vect2_cart* vc, vect2_pol* vp)
{
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
   if(vc == NULL) return;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d04b      	beq.n	8003370 <vect2_cart2pol+0xa8>
   if(vp == NULL) return;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04a      	beq.n	8003374 <vect2_cart2pol+0xac>
   
   vp->r = (Real)( sqrt((vc->x)*(vc->x)+(vc->y)*(vc->y)) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	cb18      	ldmia	r3, {r3, r4}
 80032e8:	461a      	mov	r2, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	f7fd f9a0 	bl	8000630 <__aeabi_dmul>
 80032f0:	4603      	mov	r3, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	461d      	mov	r5, r3
 80032f6:	4626      	mov	r6, r4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003304:	461a      	mov	r2, r3
 8003306:	4623      	mov	r3, r4
 8003308:	f7fd f992 	bl	8000630 <__aeabi_dmul>
 800330c:	4603      	mov	r3, r0
 800330e:	460c      	mov	r4, r1
 8003310:	461a      	mov	r2, r3
 8003312:	4623      	mov	r3, r4
 8003314:	4628      	mov	r0, r5
 8003316:	4631      	mov	r1, r6
 8003318:	f7fc ffd8 	bl	80002cc <__adddf3>
 800331c:	4603      	mov	r3, r0
 800331e:	460c      	mov	r4, r1
 8003320:	ec44 3b17 	vmov	d7, r3, r4
 8003324:	eeb0 0a47 	vmov.f32	s0, s14
 8003328:	eef0 0a67 	vmov.f32	s1, s15
 800332c:	f00b fe26 	bl	800ef7c <sqrt>
 8003330:	eeb0 7a40 	vmov.f32	s14, s0
 8003334:	eef0 7a60 	vmov.f32	s15, s1
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	ed83 7b00 	vstr	d7, [r3]
   vp->theta = (Real)atan2(vc->y,vc->x);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	ed93 7b02 	vldr	d7, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	ed93 6b00 	vldr	d6, [r3]
 800334a:	eeb0 1a46 	vmov.f32	s2, s12
 800334e:	eef0 1a66 	vmov.f32	s3, s13
 8003352:	eeb0 0a47 	vmov.f32	s0, s14
 8003356:	eef0 0a67 	vmov.f32	s1, s15
 800335a:	f00b fe0d 	bl	800ef78 <atan2>
 800335e:	eeb0 7a40 	vmov.f32	s14, s0
 8003362:	eef0 7a60 	vmov.f32	s15, s1
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	ed83 7b02 	vstr	d7, [r3, #8]
   
   return;
 800336c:	bf00      	nop
 800336e:	e002      	b.n	8003376 <vect2_cart2pol+0xae>
}

/* Convert a cartesian vector to a polar one */
void vect2_cart2pol(vect2_cart* vc, vect2_pol* vp)
{
   if(vc == NULL) return;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <vect2_cart2pol+0xae>
   if(vp == NULL) return;
 8003374:	bf00      	nop
   
   vp->r = (Real)( sqrt((vc->x)*(vc->x)+(vc->y)*(vc->y)) );
   vp->theta = (Real)atan2(vc->y,vc->x);
   
   return;
}
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800337c <position_init>:
#include <position_manager.h>
#include "blueboard.h"

/** initialization of the robot_position pos, everthing is set to 0 */
void position_init(struct robot_position *pos)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	memset(pos, 0, sizeof(struct robot_position));
 8003384:	2248      	movs	r2, #72	; 0x48
 8003386:	2100      	movs	r1, #0
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f008 f8f0 	bl	800b56e <memset>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop

08003398 <position_set_related_robot_system>:
 * Save in pos structure the pointer to the associated robot_system. 
 * The robot_system structure is used to get values from virtual encoders
 * that return angle and distance.
 */
void position_set_related_robot_system(struct robot_position *pos, struct robot_system *rs)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	pos->rs = rs;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <position_set_physical_params>:
 *  - number of impulsions for 1 mm (distance)
 *  - number of impulsions for 1 degree (angle)
 */
void position_set_physical_params(struct robot_position *pos, double track_mm,
				  double distance_imp_per_mm)
{
 80033b4:	b490      	push	{r4, r7}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6178      	str	r0, [r7, #20]
 80033bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80033c0:	ed87 1b00 	vstr	d1, [r7]
	pos->phys.track_mm = track_mm;
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pos->phys.distance_imp_per_mm = distance_imp_per_mm;
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	e897 0018 	ldmia.w	r7, {r3, r4}
 80033d4:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc90      	pop	{r4, r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <position_use_ext>:

void position_use_ext(struct robot_position *pos)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	struct rs_polar encoders;
	encoders.distance = rs_get_ext_distance(pos->rs);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb33 	bl	8003a5c <rs_get_ext_distance>
 80033f6:	4603      	mov	r3, r0
 80033f8:	60bb      	str	r3, [r7, #8]
	encoders.angle = rs_get_ext_angle(pos->rs);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fb1c 	bl	8003a3c <rs_get_ext_angle>
 8003404:	4603      	mov	r3, r0
 8003406:	60fb      	str	r3, [r7, #12]
	pos->prev_encoders = encoders;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3338      	adds	r3, #56	; 0x38
 800340c:	f107 0208 	add.w	r2, r7, #8
 8003410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003414:	e883 0003 	stmia.w	r3, {r0, r1}
	pos->use_ext = 1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <position_manage>:
 * Process the absolute position (x,y,a) depending on the delta on
 * virtual encoders since last read, and depending on physical
 * parameters. The processed position is in mm.
 */
void position_manage(struct robot_position *pos)
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342a:	b099      	sub	sp, #100	; 0x64
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	double dx, dy;
	s16 x_s16, y_s16, a_s16;
	struct rs_polar encoders;
	struct rs_polar delta;
	struct robot_system * rs;
	rs = pos->rs;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	647b      	str	r3, [r7, #68]	; 0x44

	/* here we could raise an error */
	if (rs == NULL)
 8003436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8193 	beq.w	8003764 <position_manage+0x33c>
	else {
		encoders.distance = rs_get_mot_distance(rs);
		encoders.angle = rs_get_mot_angle(rs);
	}
#else
	encoders.distance = rs_get_ext_distance(rs);
 800343e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003440:	f000 fb0c 	bl	8003a5c <rs_get_ext_distance>
 8003444:	4603      	mov	r3, r0
 8003446:	613b      	str	r3, [r7, #16]
	encoders.angle = rs_get_ext_angle(rs);
 8003448:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800344a:	f000 faf7 	bl	8003a3c <rs_get_ext_angle>
 800344e:	4603      	mov	r3, r0
 8003450:	617b      	str	r3, [r7, #20]
#endif

	/* process difference between 2 measures.
	 * No lock for prev_encoders since we are the only one to use
	 * this var XXX that's wrong now, perhaps we should lock */
	delta.distance = encoders.distance - pos->prev_encoders.distance;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	60bb      	str	r3, [r7, #8]
	delta.angle = encoders.angle - pos->prev_encoders.angle;
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	60fb      	str	r3, [r7, #12]

	pos->prev_encoders = encoders;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3338      	adds	r3, #56	; 0x38
 800346a:	f107 0210 	add.w	r2, r7, #16
 800346e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003472:	e883 0003 	stmia.w	r3, {r0, r1}

	/* update double position */
	a = position_get_a_rad_double(pos);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9ba 	bl	80037f0 <position_get_a_rad_double>
 800347c:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	x = position_get_x_double(pos);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f985 	bl	8003790 <position_get_x_double>
 8003486:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
	y = position_get_y_double(pos);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f998 	bl	80037c0 <position_get_y_double>
 8003490:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

	if (delta.angle == 0) {
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d14e      	bne.n	8003538 <position_manage+0x110>
		/* we go straight */
		dx = cos(a) * ((double) delta.distance / (pos->phys.distance_imp_per_mm)) ;
 800349a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800349e:	f00b fcdf 	bl	800ee60 <cos>
 80034a2:	ec56 5b10 	vmov	r5, r6, d0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f85b 	bl	8000564 <__aeabi_i2d>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	f7fd f9e4 	bl	8000884 <__aeabi_ddiv>
 80034bc:	4603      	mov	r3, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	461a      	mov	r2, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	4631      	mov	r1, r6
 80034c8:	f7fd f8b2 	bl	8000630 <__aeabi_dmul>
 80034cc:	4603      	mov	r3, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		dy = sin(a) * ((double) delta.distance / (pos->phys.distance_imp_per_mm)) ;
 80034d4:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80034d8:	f00b fd06 	bl	800eee8 <sin>
 80034dc:	ec56 5b10 	vmov	r5, r6, d0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd f83e 	bl	8000564 <__aeabi_i2d>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4623      	mov	r3, r4
 80034f2:	f7fd f9c7 	bl	8000884 <__aeabi_ddiv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	461a      	mov	r2, r3
 80034fc:	4623      	mov	r3, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	4631      	mov	r1, r6
 8003502:	f7fd f895 	bl	8000630 <__aeabi_dmul>
 8003506:	4603      	mov	r3, r0
 8003508:	460c      	mov	r4, r1
 800350a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x += dx;
 800350e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003512:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003516:	f7fc fed9 	bl	80002cc <__adddf3>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		y += dy;
 8003522:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003526:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800352a:	f7fc fecf 	bl	80002cc <__adddf3>
 800352e:	4603      	mov	r3, r0
 8003530:	460c      	mov	r4, r1
 8003532:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8003536:	e0dd      	b.n	80036f4 <position_manage+0x2cc>
	}
	else {
		/* r the radius of the circle arc */
		r = (double)delta.distance * pos->phys.track_mm / ((double) delta.angle * 2);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f812 	bl	8000564 <__aeabi_i2d>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003546:	461a      	mov	r2, r3
 8003548:	4623      	mov	r3, r4
 800354a:	f7fd f871 	bl	8000630 <__aeabi_dmul>
 800354e:	4603      	mov	r3, r0
 8003550:	460c      	mov	r4, r1
 8003552:	4625      	mov	r5, r4
 8003554:	461c      	mov	r4, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd f803 	bl	8000564 <__aeabi_i2d>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	f7fc feb3 	bl	80002cc <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4620      	mov	r0, r4
 800356c:	4629      	mov	r1, r5
 800356e:	f7fd f989 	bl	8000884 <__aeabi_ddiv>
 8003572:	4603      	mov	r3, r0
 8003574:	460c      	mov	r4, r1
 8003576:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		arc_angle = 2 * (double) delta.angle / (pos->phys.track_mm * pos->phys.distance_imp_per_mm);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc fff1 	bl	8000564 <__aeabi_i2d>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	f7fc fea1 	bl	80002cc <__adddf3>
 800358a:	4603      	mov	r3, r0
 800358c:	460c      	mov	r4, r1
 800358e:	461d      	mov	r5, r3
 8003590:	4626      	mov	r6, r4
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800359e:	461a      	mov	r2, r3
 80035a0:	4623      	mov	r3, r4
 80035a2:	f7fd f845 	bl	8000630 <__aeabi_dmul>
 80035a6:	4603      	mov	r3, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	461a      	mov	r2, r3
 80035ac:	4623      	mov	r3, r4
 80035ae:	4628      	mov	r0, r5
 80035b0:	4631      	mov	r1, r6
 80035b2:	f7fd f967 	bl	8000884 <__aeabi_ddiv>
 80035b6:	4603      	mov	r3, r0
 80035b8:	460c      	mov	r4, r1
 80035ba:	e9c7 3408 	strd	r3, r4, [r7, #32]
		
		dx = r * (-sin(a) + sin(a+arc_angle));
 80035be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035c6:	f7fc fe81 	bl	80002cc <__adddf3>
 80035ca:	4603      	mov	r3, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	ec44 3b17 	vmov	d7, r3, r4
 80035d2:	eeb0 0a47 	vmov.f32	s0, s14
 80035d6:	eef0 0a67 	vmov.f32	s1, s15
 80035da:	f00b fc85 	bl	800eee8 <sin>
 80035de:	ec55 4b10 	vmov	r4, r5, d0
 80035e2:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80035e6:	f00b fc7f 	bl	800eee8 <sin>
 80035ea:	ec53 2b10 	vmov	r2, r3, d0
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	f7fc fe69 	bl	80002c8 <__aeabi_dsub>
 80035f6:	4603      	mov	r3, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	4618      	mov	r0, r3
 80035fc:	4621      	mov	r1, r4
 80035fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003602:	f7fd f815 	bl	8000630 <__aeabi_dmul>
 8003606:	4603      	mov	r3, r0
 8003608:	460c      	mov	r4, r1
 800360a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		dy = r * (cos(a) - cos(a+arc_angle));
 800360e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003612:	f00b fc25 	bl	800ee60 <cos>
 8003616:	ec56 5b10 	vmov	r5, r6, d0
 800361a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800361e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003622:	f7fc fe53 	bl	80002cc <__adddf3>
 8003626:	4603      	mov	r3, r0
 8003628:	460c      	mov	r4, r1
 800362a:	ec44 3b17 	vmov	d7, r3, r4
 800362e:	eeb0 0a47 	vmov.f32	s0, s14
 8003632:	eef0 0a67 	vmov.f32	s1, s15
 8003636:	f00b fc13 	bl	800ee60 <cos>
 800363a:	ec54 3b10 	vmov	r3, r4, d0
 800363e:	461a      	mov	r2, r3
 8003640:	4623      	mov	r3, r4
 8003642:	4628      	mov	r0, r5
 8003644:	4631      	mov	r1, r6
 8003646:	f7fc fe3f 	bl	80002c8 <__aeabi_dsub>
 800364a:	4603      	mov	r3, r0
 800364c:	460c      	mov	r4, r1
 800364e:	4618      	mov	r0, r3
 8003650:	4621      	mov	r1, r4
 8003652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003656:	f7fc ffeb 	bl	8000630 <__aeabi_dmul>
 800365a:	4603      	mov	r3, r0
 800365c:	460c      	mov	r4, r1
 800365e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		x += dx;
 8003662:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800366a:	f7fc fe2f 	bl	80002cc <__adddf3>
 800366e:	4603      	mov	r3, r0
 8003670:	460c      	mov	r4, r1
 8003672:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		y += dy;
 8003676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800367a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800367e:	f7fc fe25 	bl	80002cc <__adddf3>
 8003682:	4603      	mov	r3, r0
 8003684:	460c      	mov	r4, r1
 8003686:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		a += arc_angle;
 800368a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800368e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003692:	f7fc fe1b 	bl	80002cc <__adddf3>
 8003696:	4603      	mov	r3, r0
 8003698:	460c      	mov	r4, r1
 800369a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

		if (a < -M_PI)
 800369e:	a334      	add	r3, pc, #208	; (adr r3, 8003770 <position_manage+0x348>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036a8:	f7fd fa34 	bl	8000b14 <__aeabi_dcmplt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <position_manage+0x2a2>
			a += (M_PI*2);
 80036b2:	a331      	add	r3, pc, #196	; (adr r3, 8003778 <position_manage+0x350>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036bc:	f7fc fe06 	bl	80002cc <__adddf3>
 80036c0:	4603      	mov	r3, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80036c8:	e014      	b.n	80036f4 <position_manage+0x2cc>
		else if (a > (M_PI))
 80036ca:	a32d      	add	r3, pc, #180	; (adr r3, 8003780 <position_manage+0x358>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036d4:	f7fd fa3c 	bl	8000b50 <__aeabi_dcmpgt>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <position_manage+0x2cc>
			a -= (M_PI*2);
 80036de:	a326      	add	r3, pc, #152	; (adr r3, 8003778 <position_manage+0x350>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036e8:	f7fc fdee 	bl	80002c8 <__aeabi_dsub>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
#endif
	}

	/* update int position */
	x_s16 = (int16_t)x;
 80036f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036f8:	f7fd fa4a 	bl	8000b90 <__aeabi_d2iz>
 80036fc:	4603      	mov	r3, r0
 80036fe:	83fb      	strh	r3, [r7, #30]
	y_s16 = (int16_t)y;
 8003700:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003704:	f7fd fa44 	bl	8000b90 <__aeabi_d2iz>
 8003708:	4603      	mov	r3, r0
 800370a:	83bb      	strh	r3, [r7, #28]
	a_s16 = (int16_t)(a * (360.0/(M_PI*2)));
 800370c:	a31e      	add	r3, pc, #120	; (adr r3, 8003788 <position_manage+0x360>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003716:	f7fc ff8b 	bl	8000630 <__aeabi_dmul>
 800371a:	4603      	mov	r3, r0
 800371c:	460c      	mov	r4, r1
 800371e:	4618      	mov	r0, r3
 8003720:	4621      	mov	r1, r4
 8003722:	f7fd fa35 	bl	8000b90 <__aeabi_d2iz>
 8003726:	4603      	mov	r3, r0
 8003728:	837b      	strh	r3, [r7, #26]

	vLockRobotPosition();
 800372a:	f7fe ffa7 	bl	800267c <vLockRobotPosition>
	pos->pos_d.a = a;
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003734:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pos->pos_d.x = x;
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800373e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pos->pos_d.y = y;
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003748:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pos->pos_s16.x = x_s16;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8bfa      	ldrh	r2, [r7, #30]
 8003750:	861a      	strh	r2, [r3, #48]	; 0x30
	pos->pos_s16.y = y_s16;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8bba      	ldrh	r2, [r7, #28]
 8003756:	865a      	strh	r2, [r3, #50]	; 0x32
	pos->pos_s16.a = a_s16;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8b7a      	ldrh	r2, [r7, #26]
 800375c:	869a      	strh	r2, [r3, #52]	; 0x34
	vUnlockRobotPosition();
 800375e:	f7fe ffd3 	bl	8002708 <vUnlockRobotPosition>
 8003762:	e000      	b.n	8003766 <position_manage+0x33e>
	struct robot_system * rs;
	rs = pos->rs;

	/* here we could raise an error */
	if (rs == NULL)
		return;
 8003764:	bf00      	nop
	pos->pos_d.y = y;
	pos->pos_s16.x = x_s16;
	pos->pos_s16.y = y_s16;
	pos->pos_s16.a = a_s16;
	vUnlockRobotPosition();
}
 8003766:	3764      	adds	r7, #100	; 0x64
 8003768:	46bd      	mov	sp, r7
 800376a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376c:	f3af 8000 	nop.w
 8003770:	54442d18 	.word	0x54442d18
 8003774:	c00921fb 	.word	0xc00921fb
 8003778:	54442d18 	.word	0x54442d18
 800377c:	401921fb 	.word	0x401921fb
 8003780:	54442d18 	.word	0x54442d18
 8003784:	400921fb 	.word	0x400921fb
 8003788:	1a63c1f8 	.word	0x1a63c1f8
 800378c:	404ca5dc 	.word	0x404ca5dc

08003790 <position_get_x_double>:

/**
 * returns current x
 */
double position_get_x_double(struct robot_position *pos)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	double x;
	vLockRobotPosition();
 8003798:	f7fe ff70 	bl	800267c <vLockRobotPosition>
	x = pos->pos_d.x;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80037a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 80037a6:	f7fe ffaf 	bl	8002708 <vUnlockRobotPosition>
	return x;
 80037aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80037ae:	ec44 3b17 	vmov	d7, r3, r4
}
 80037b2:	eeb0 0a47 	vmov.f32	s0, s14
 80037b6:	eef0 0a67 	vmov.f32	s1, s15
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <position_get_y_double>:

/**
 * returns current y
 */
double position_get_y_double(struct robot_position *pos)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	double y;
	vLockRobotPosition();
 80037c8:	f7fe ff58 	bl	800267c <vLockRobotPosition>
	y = pos->pos_d.y;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80037d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 80037d6:	f7fe ff97 	bl	8002708 <vUnlockRobotPosition>
	return y;
 80037da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80037de:	ec44 3b17 	vmov	d7, r3, r4
}
 80037e2:	eeb0 0a47 	vmov.f32	s0, s14
 80037e6:	eef0 0a67 	vmov.f32	s1, s15
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}

080037f0 <position_get_a_rad_double>:

/**
 * returns current alpha
 */
double position_get_a_rad_double(struct robot_position *pos)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	double a;
	vLockRobotPosition();
 80037f8:	f7fe ff40 	bl	800267c <vLockRobotPosition>
	a = pos->pos_d.a;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003802:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 8003806:	f7fe ff7f 	bl	8002708 <vUnlockRobotPosition>
	return a;
 800380a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800380e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003812:	eeb0 0a47 	vmov.f32	s0, s14
 8003816:	eef0 0a67 	vmov.f32	s1, s15
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <safe_setpwm>:
 * - if pointer is null, don't do anything
 * - else call the pwm with the parameters
 */
static inline void
safe_setpwm(void (*f)(void *, int32_t), void * param, int32_t value)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	void (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <safe_setpwm+0x22>
		f_tmp(param_tmp, value);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	6938      	ldr	r0, [r7, #16]
 8003840:	4798      	blx	r3
	}
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop

0800384c <safe_getencoder>:
 * - if pointer is null, return 0
 * - else return the value processed by the function
 */
static inline uint32_t
safe_getencoder(int32_t (*f)(void *), void * param)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	int32_t (*f_tmp)(void *);
	void * param_tmp;
	f_tmp = f;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60fb      	str	r3, [r7, #12]
	param_tmp = param;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	60bb      	str	r3, [r7, #8]
	if (f_tmp) {
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <safe_getencoder+0x22>
		return f_tmp(param_tmp);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68b8      	ldr	r0, [r7, #8]
 8003868:	4798      	blx	r3
 800386a:	4603      	mov	r3, r0
 800386c:	e000      	b.n	8003870 <safe_getencoder+0x24>
	}
	return 0;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <rs_init>:

/** Set the structure to 0 */
void rs_init( struct robot_system * rs)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	memset(rs, 0, sizeof(struct robot_system));
 8003880:	224c      	movs	r2, #76	; 0x4c
 8003882:	2100      	movs	r1, #0
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f007 fe72 	bl	800b56e <memset>
#ifdef CONFIG_MODULE_ROBOT_SYSTEM_MOT_AND_EXT
	rs_set_ratio(rs, 1.0);
#endif
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop

08003894 <rs_set_left_pwm>:
}
#endif

/** define left PWM function and param */
void rs_set_left_pwm(struct robot_system * rs, void (*left_pwm)(void *, int32_t), void *left_pwm_param)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
	rs->left_pwm = left_pwm;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	63da      	str	r2, [r3, #60]	; 0x3c
	rs->left_pwm_param = left_pwm_param;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <rs_set_right_pwm>:

/** define right PWM function and param */
void rs_set_right_pwm(struct robot_system * rs, void (*right_pwm)(void *, int32_t), void *right_pwm_param)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
	rs->right_pwm = right_pwm;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
	rs->right_pwm_param = right_pwm_param;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <rs_set_left_ext_encoder>:
#endif

/** define left external encoder function and param */
void rs_set_left_ext_encoder(struct robot_system * rs, int32_t (*left_ext_encoder)(void *), 
			     void *left_ext_encoder_param, double gain)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6178      	str	r0, [r7, #20]
 80038e4:	6139      	str	r1, [r7, #16]
 80038e6:	60fa      	str	r2, [r7, #12]
 80038e8:	ed87 0b00 	vstr	d0, [r7]
	rs->left_ext_encoder = left_ext_encoder;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
	rs->left_ext_encoder_param = left_ext_encoder_param;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
	rs->left_ext_gain = gain;
 80038f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038fc:	f7fd f970 	bl	8000be0 <__aeabi_d2f>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <rs_set_right_ext_encoder>:

/** define right external encoder function and param */
void rs_set_right_ext_encoder(struct robot_system * rs, int32_t (*right_ext_encoder)(void *), 
			      void *right_ext_encoder_param, double gain)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6178      	str	r0, [r7, #20]
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	60fa      	str	r2, [r7, #12]
 800391c:	ed87 0b00 	vstr	d0, [r7]
	rs->right_ext_encoder = right_ext_encoder;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
	rs->right_ext_encoder_param = right_ext_encoder_param;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	635a      	str	r2, [r3, #52]	; 0x34
	rs->right_ext_gain = gain;
 800392c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003930:	f7fd f956 	bl	8000be0 <__aeabi_d2f>
 8003934:	4602      	mov	r2, r0
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop

08003944 <rs_set_angle>:
/** 
 * set the real pwms according to the specified angle (it also
 * depends on the last distance command sent) 
 */
void rs_set_angle(void * data, int32_t angle)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
	struct rs_polar p;
	struct rs_wheels w;
	struct robot_system * rs = data;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	61fb      	str	r3, [r7, #28]

	p.distance = rs->virtual_pwm.distance ;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	617b      	str	r3, [r7, #20]
	rs->virtual_pwm.angle = angle;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	609a      	str	r2, [r3, #8]

	p.angle = angle;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	61bb      	str	r3, [r7, #24]
	rs_get_wheels_from_polar(&w, &p);
 8003962:	f107 0214 	add.w	r2, r7, #20
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f895 	bl	8002a9c <rs_get_wheels_from_polar>
	
	safe_setpwm(rs->left_pwm, rs->left_pwm_param, w.left);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4619      	mov	r1, r3
 800397e:	f7ff ff4f 	bl	8003820 <safe_setpwm>
	safe_setpwm(rs->right_pwm, rs->right_pwm_param, w.right);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4619      	mov	r1, r3
 800398e:	f7ff ff47 	bl	8003820 <safe_setpwm>
}
 8003992:	bf00      	nop
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop

0800399c <rs_set_distance>:
/** 
 * set the real pwms according to the specified distance (it also
 * depends on the last angle command sent) 
 */
void rs_set_distance(void * data, int32_t distance)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	struct robot_system * rs = data;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	61fb      	str	r3, [r7, #28]
	struct rs_polar p;
	struct rs_wheels w;

	p.angle = rs->virtual_pwm.angle ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	61bb      	str	r3, [r7, #24]
	rs->virtual_pwm.distance = distance;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	605a      	str	r2, [r3, #4]

	p.distance = distance;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	617b      	str	r3, [r7, #20]
	rs_get_wheels_from_polar(&w, &p);
 80039ba:	f107 0214 	add.w	r2, r7, #20
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f869 	bl	8002a9c <rs_get_wheels_from_polar>
	
	safe_setpwm(rs->left_pwm, rs->left_pwm_param, w.left);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7ff ff23 	bl	8003820 <safe_setpwm>
	safe_setpwm(rs->right_pwm, rs->right_pwm_param, w.right);
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7ff ff1b 	bl	8003820 <safe_setpwm>
}
 80039ea:	bf00      	nop
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop

080039f4 <rs_get_angle>:

/** 
 * get the virtual angle according to real encoders value. 
 */
int32_t rs_get_angle(void * data)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60fb      	str	r3, [r7, #12]
	int32_t angle;
	
	vLockEncoderAngle();
 8003a00:	f7fe fe04 	bl	800260c <vLockEncoderAngle>
	angle = rs->virtual_encoders.angle ;	
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	60bb      	str	r3, [r7, #8]
	vUnlockEncoderAngle();
 8003a0a:	f7fe fe45 	bl	8002698 <vUnlockEncoderAngle>
	return angle;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <rs_get_distance>:

/** 
 * get the virtual distance according to real encoders value. 
 */
int32_t rs_get_distance(void * data)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60fb      	str	r3, [r7, #12]
	int32_t distance;
	
	vLockEncoderDistance();
 8003a24:	f7fe fe00 	bl	8002628 <vLockEncoderDistance>
	distance = rs->virtual_encoders.distance ;	
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
	vUnlockEncoderDistance();
 8003a2e:	f7fe fe41 	bl	80026b4 <vUnlockEncoderDistance>
	return distance;
 8003a32:	68bb      	ldr	r3, [r7, #8]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <rs_get_ext_angle>:

int32_t rs_get_ext_angle(void * data)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
	int32_t angle;
	
	angle = rs->pext_prev.angle ;	
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	60bb      	str	r3, [r7, #8]
	return angle;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <rs_get_ext_distance>:

int32_t rs_get_ext_distance(void * data)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60fb      	str	r3, [r7, #12]
	int32_t distance;
	
	distance = rs->pext_prev.distance ;	
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	60bb      	str	r3, [r7, #8]
	return distance;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <rs_set_flags>:
	return right;
}
#endif

void rs_set_flags(struct robot_system * rs, uint8_t flags)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
	rs->flags = flags;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	701a      	strb	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <rs_update>:
 * function is needed before reading the virtual encoders.The program
 * will decide if it the external encoders or the motor encoders are
 * taken in account (depending on flags, but not yet)
 */
void rs_update(void * data)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
	struct rs_polar pmot;
#endif
	int32_t delta_angle, delta_distance;
	
	/* read encoders */
	wext.left = safe_getencoder(rs->left_ext_encoder, rs->left_ext_encoder_param);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7ff feca 	bl	800384c <safe_getencoder>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	617b      	str	r3, [r7, #20]
	wext.right = safe_getencoder(rs->right_ext_encoder, rs->right_ext_encoder_param);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7ff fec0 	bl	800384c <safe_getencoder>
 8003acc:	4603      	mov	r3, r0
 8003ace:	61bb      	str	r3, [r7, #24]
	wmot.left = safe_getencoder(rs->left_mot_encoder, rs->left_mot_encoder_param);
	wmot.right = safe_getencoder(rs->right_mot_encoder, rs->right_mot_encoder_param);
#endif
	
	/* apply gains to each wheel */
	if (! (rs->flags & RS_IGNORE_EXT_GAIN )) {
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11d      	bne.n	8003b18 <rs_update+0x7c>
		wext.left = (int32_t)(wext.left*rs->left_ext_gain);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af4:	ee17 3a90 	vmov	r3, s15
 8003af8:	617b      	str	r3, [r7, #20]
		wext.right = (int32_t)(wext.right* rs->right_ext_gain);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b12:	ee17 3a90 	vmov	r3, s15
 8003b16:	61bb      	str	r3, [r7, #24]
		wmot.left = f64_msb_mul(f64_from_lsb(wmot.left), rs->left_mot_gain);
		wmot.right = f64_msb_mul(f64_from_lsb(wmot.right), rs->right_mot_gain);
	}
#endif

	rs_get_polar_from_wheels(&pext, &wext);
 8003b18:	f107 0214 	add.w	r2, r7, #20
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe ff96 	bl	8002a54 <rs_get_polar_from_wheels>
	else {
		delta_angle = pmot.angle - rs->pmot_prev.angle;
		delta_distance = pmot.distance - rs->pmot_prev.distance;
	}
#else
	delta_angle = pext.angle - rs->pext_prev.angle;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	623b      	str	r3, [r7, #32]
	delta_distance = pext.distance - rs->pext_prev.distance;
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	61fb      	str	r3, [r7, #28]
#endif

	vLockEncoderAngle();
 8003b3c:	f7fe fd66 	bl	800260c <vLockEncoderAngle>
	vLockEncoderDistance();
 8003b40:	f7fe fd72 	bl	8002628 <vLockEncoderDistance>
	rs->virtual_encoders.angle += delta_angle;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	441a      	add	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	611a      	str	r2, [r3, #16]
	rs->virtual_encoders.distance += delta_distance;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	441a      	add	r2, r3
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	60da      	str	r2, [r3, #12]
	vUnlockEncoderAngle();
 8003b5c:	f7fe fd9c 	bl	8002698 <vUnlockEncoderAngle>
	vUnlockEncoderDistance();
 8003b60:	f7fe fda8 	bl	80026b4 <vUnlockEncoderDistance>

	/* don't lock too much time */
	rs->pext_prev = pext;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	3314      	adds	r3, #20
 8003b68:	f107 020c 	add.w	r2, r7, #12
 8003b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b70:	e883 0003 	stmia.w	r3, {r0, r1}
	rs->wext_prev = wext;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	331c      	adds	r3, #28
 8003b78:	f107 0214 	add.w	r2, r7, #20
 8003b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b80:	e883 0003 	stmia.w	r3, {r0, r1}

#ifdef CONFIG_MODULE_ROBOT_SYSTEM_MOT_AND_EXT
	rs->pmot_prev = pmot;
	rs->wmot_prev = wmot;
#endif
}
 8003b84:	bf00      	nop
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <trajectory_init>:

/************ INIT FUNCS */

/** structure initialization */
void trajectory_init(struct trajectory *traj)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	memset(traj, 0, sizeof(struct trajectory));
 8003b94:	2248      	movs	r2, #72	; 0x48
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f007 fce8 	bl	800b56e <memset>
	traj->state = READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
	traj->scheduler_task = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop

08003bb4 <trajectory_set_cs>:

/** structure initialization */
void trajectory_set_cs(struct trajectory *traj, struct cs *cs_d, 
		       struct cs *cs_a)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
	traj->csm_distance = cs_d;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
	traj->csm_angle = cs_a;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <trajectory_set_robot_params>:

/** structure initialization */
void trajectory_set_robot_params(struct trajectory *traj, 
				 struct robot_system *rs, 
				 struct robot_position *pos) 
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
	traj->robot = rs;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
	traj->position = pos;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <trajectory_set_speed>:

/** set speed consign */
void trajectory_set_speed( struct trajectory *traj, int16_t d_speed, int16_t a_speed)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	803b      	strh	r3, [r7, #0]
	traj->d_speed = d_speed;
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	861a      	strh	r2, [r3, #48]	; 0x30
	traj->a_speed = a_speed;
 8003c12:	883a      	ldrh	r2, [r7, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	0000      	movs	r0, r0
	...

08003c28 <trajectory_set_windows>:

/** set windows for trajectory */
void trajectory_set_windows(struct trajectory *traj, double d_win,
			    double a_win_deg, double a_start_deg)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	61f8      	str	r0, [r7, #28]
 8003c30:	ed87 0b04 	vstr	d0, [r7, #16]
 8003c34:	ed87 1b02 	vstr	d1, [r7, #8]
 8003c38:	ed87 2b00 	vstr	d2, [r7]
	traj->d_win = d_win ;
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c42:	e9c2 3406 	strd	r3, r4, [r2, #24]
	traj->a_win_rad = RAD(a_win_deg);
 8003c46:	a30e      	add	r3, pc, #56	; (adr r3, 8003c80 <trajectory_set_windows+0x58>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c50:	f7fc fcee 	bl	8000630 <__aeabi_dmul>
 8003c54:	4603      	mov	r3, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	traj->a_start_rad = RAD(a_start_deg);
 8003c5e:	a308      	add	r3, pc, #32	; (adr r3, 8003c80 <trajectory_set_windows+0x58>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c68:	f7fc fce2 	bl	8000630 <__aeabi_dmul>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

}
 8003c76:	bf00      	nop
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	a2529d39 	.word	0xa2529d39
 8003c84:	3f91df46 	.word	0x3f91df46

08003c88 <set_quadramp_speed>:

/************ STATIC [ AND USEFUL ] FUNCS */

/** set speed consign in quadramp filter */
static void set_quadramp_speed(struct trajectory *traj, int16_t d_speed, int16_t a_speed)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
 8003c94:	4613      	mov	r3, r2
 8003c96:	803b      	strh	r3, [r7, #0]
	struct quadramp_filter * q_d, * q_a;
	q_d = traj->csm_distance->consign_filter_params;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]
	q_a = traj->csm_angle->consign_filter_params;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	60bb      	str	r3, [r7, #8]
	quadramp_set_1st_order_vars(q_d, ABS(d_speed), ABS(d_speed));
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	82fb      	strh	r3, [r7, #22]
 8003cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da03      	bge.n	8003cbc <set_quadramp_speed+0x34>
 8003cb4:	8afb      	ldrh	r3, [r7, #22]
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	82fb      	strh	r3, [r7, #22]
 8003cbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	82bb      	strh	r3, [r7, #20]
 8003cc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da03      	bge.n	8003cd6 <set_quadramp_speed+0x4e>
 8003cce:	8abb      	ldrh	r3, [r7, #20]
 8003cd0:	425b      	negs	r3, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	82bb      	strh	r3, [r7, #20]
 8003cd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff f9b9 	bl	8003054 <quadramp_set_1st_order_vars>
	quadramp_set_1st_order_vars(q_a, ABS(a_speed), ABS(a_speed));
 8003ce2:	883b      	ldrh	r3, [r7, #0]
 8003ce4:	827b      	strh	r3, [r7, #18]
 8003ce6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	da03      	bge.n	8003cf6 <set_quadramp_speed+0x6e>
 8003cee:	8a7b      	ldrh	r3, [r7, #18]
 8003cf0:	425b      	negs	r3, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	827b      	strh	r3, [r7, #18]
 8003cf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	883b      	ldrh	r3, [r7, #0]
 8003cfe:	823b      	strh	r3, [r7, #16]
 8003d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	da03      	bge.n	8003d10 <set_quadramp_speed+0x88>
 8003d08:	8a3b      	ldrh	r3, [r7, #16]
 8003d0a:	425b      	negs	r3, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	823b      	strh	r3, [r7, #16]
 8003d10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d14:	461a      	mov	r2, r3
 8003d16:	68b8      	ldr	r0, [r7, #8]
 8003d18:	f7ff f99c 	bl	8003054 <quadramp_set_1st_order_vars>
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <get_quadramp_distance_speed>:
	return q_a->var_1st_ord_pos;
}

/** get distance speed consign in quadramp filter */
static uint32_t get_quadramp_distance_speed(struct trajectory *traj)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	struct quadramp_filter *q_d;
	q_d = traj->csm_distance->consign_filter_params;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
	return q_d->var_1st_ord_pos;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <delete_event>:

/** remove event if any */
static void delete_event(struct trajectory *traj)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	set_quadramp_speed(traj, traj->d_speed, traj->a_speed);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d50:	b219      	sxth	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d56:	b21b      	sxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff94 	bl	8003c88 <set_quadramp_speed>
	if ( traj->scheduler_task != NULL) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <delete_event+0x34>
		vTaskDelete(traj->scheduler_task);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 ffaf 	bl	8007cd0 <vTaskDelete>
		traj->scheduler_task=NULL;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <schedule_event>:

/** schedule the trajectory event */
static void schedule_event(struct trajectory *traj)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
	if ( traj->scheduler_task != NULL) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <schedule_event+0x26>
		DEBUG(E_TRAJECTORY, "Schedule event, already scheduled");
	}
	else {
			xTaskCreate(trajectory_manager_event, "TRAJECTORY", configMINIMAL_STACK_SIZE, traj, OS_TASK_PRIORITY_TRAJ, &traj->scheduler_task );
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3344      	adds	r3, #68	; 0x44
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	2303      	movs	r3, #3
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2282      	movs	r2, #130	; 0x82
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <schedule_event+0x30>)
 8003da0:	4804      	ldr	r0, [pc, #16]	; (8003db4 <schedule_event+0x34>)
 8003da2:	f003 fe5f 	bl	8007a64 <xTaskCreate>
	}
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	0801141c 	.word	0x0801141c
 8003db4:	080045f9 	.word	0x080045f9

08003db8 <simple_modulo_2pi>:

/** do a modulo 2.pi -> [-Pi,+Pi], knowing that 'a' is in [-3Pi,+3Pi] */  
static double simple_modulo_2pi(double a)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	ed87 0b00 	vstr	d0, [r7]
	if (a < -M_PI) {
 8003dc2:	a31b      	add	r3, pc, #108	; (adr r3, 8003e30 <simple_modulo_2pi+0x78>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dcc:	f7fc fea2 	bl	8000b14 <__aeabi_dcmplt>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <simple_modulo_2pi+0x36>
		a += M_2PI;
 8003dd6:	a318      	add	r3, pc, #96	; (adr r3, 8003e38 <simple_modulo_2pi+0x80>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003de0:	f7fc fa74 	bl	80002cc <__adddf3>
 8003de4:	4603      	mov	r3, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	e887 0018 	stmia.w	r7, {r3, r4}
 8003dec:	e014      	b.n	8003e18 <simple_modulo_2pi+0x60>
	}
	else if (a > M_PI) {
 8003dee:	a314      	add	r3, pc, #80	; (adr r3, 8003e40 <simple_modulo_2pi+0x88>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003df8:	f7fc feaa 	bl	8000b50 <__aeabi_dcmpgt>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <simple_modulo_2pi+0x60>
		a -= M_2PI;
 8003e02:	a30d      	add	r3, pc, #52	; (adr r3, 8003e38 <simple_modulo_2pi+0x80>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e0c:	f7fc fa5c 	bl	80002c8 <__aeabi_dsub>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	e887 0018 	stmia.w	r7, {r3, r4}
	}
	return a;
 8003e18:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003e1c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e20:	eeb0 0a47 	vmov.f32	s0, s14
 8003e24:	eef0 0a67 	vmov.f32	s1, s15
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	54442d18 	.word	0x54442d18
 8003e34:	c00921fb 	.word	0xc00921fb
 8003e38:	54442d18 	.word	0x54442d18
 8003e3c:	401921fb 	.word	0x401921fb
 8003e40:	54442d18 	.word	0x54442d18
 8003e44:	400921fb 	.word	0x400921fb

08003e48 <modulo_2pi>:

/** do a modulo 2.pi -> [-Pi,+Pi] */  
static double modulo_2pi(double a)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	ed87 0b00 	vstr	d0, [r7]
        double res = a - (((int32_t) (a/M_2PI)) * M_2PI);
 8003e52:	a319      	add	r3, pc, #100	; (adr r3, 8003eb8 <modulo_2pi+0x70>)
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e5c:	f7fc fd12 	bl	8000884 <__aeabi_ddiv>
 8003e60:	4603      	mov	r3, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	4618      	mov	r0, r3
 8003e66:	4621      	mov	r1, r4
 8003e68:	f7fc fe92 	bl	8000b90 <__aeabi_d2iz>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fb78 	bl	8000564 <__aeabi_i2d>
 8003e74:	a310      	add	r3, pc, #64	; (adr r3, 8003eb8 <modulo_2pi+0x70>)
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f7fc fbd9 	bl	8000630 <__aeabi_dmul>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	461a      	mov	r2, r3
 8003e84:	4623      	mov	r3, r4
 8003e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e8a:	f7fc fa1d 	bl	80002c8 <__aeabi_dsub>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return simple_modulo_2pi(res);
 8003e96:	ed97 0b02 	vldr	d0, [r7, #8]
 8003e9a:	f7ff ff8d 	bl	8003db8 <simple_modulo_2pi>
 8003e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8003ea2:	eef0 7a60 	vmov.f32	s15, s1
}
 8003ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eaa:	eef0 0a67 	vmov.f32	s1, s15
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd90      	pop	{r4, r7, pc}
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	54442d18 	.word	0x54442d18
 8003ebc:	401921fb 	.word	0x401921fb

08003ec0 <is_robot_in_dist_window>:
}


/** near the target (dist) ? */
static uint8_t is_robot_in_dist_window(struct trajectory *traj, double d_win)
{
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	ed87 0b00 	vstr	d0, [r7]
	double d = traj->target.pol.distance - rs_get_distance(traj->robot);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689c      	ldr	r4, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fd9f 	bl	8003a18 <rs_get_distance>
 8003eda:	4603      	mov	r3, r0
 8003edc:	1ae3      	subs	r3, r4, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fb40 	bl	8000564 <__aeabi_i2d>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = ABS(d);
 8003eec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ef0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f00:	f7fc fe08 	bl	8000b14 <__aeabi_dcmplt>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <is_robot_in_dist_window+0x56>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003f1a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = d / traj->position->phys.distance_imp_per_mm;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4623      	mov	r3, r4
 8003f2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f2e:	f7fc fca9 	bl	8000884 <__aeabi_ddiv>
 8003f32:	4603      	mov	r3, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return (d < d_win);
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	461c      	mov	r4, r3
 8003f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f46:	f7fc fde5 	bl	8000b14 <__aeabi_dcmplt>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <is_robot_in_dist_window+0x94>
 8003f50:	2300      	movs	r3, #0
 8003f52:	461c      	mov	r4, r3
 8003f54:	b2e3      	uxtb	r3, r4
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	bf00      	nop

08003f60 <is_robot_in_xy_window>:

/** near the target (dist in x,y) ? */
static uint8_t is_robot_in_xy_window(struct trajectory *traj, double d_win)
{
 8003f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f64:	b08c      	sub	sp, #48	; 0x30
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	ed87 0b00 	vstr	d0, [r7]
	double x1 = traj->target.cart.x;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003f74:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double y1 = traj->target.cart.y;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003f7e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double x2 = position_get_x_double(traj->position);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fc02 	bl	8003790 <position_get_x_double>
 8003f8c:	ed87 0b06 	vstr	d0, [r7, #24]
	double y2 = position_get_y_double(traj->position);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fc13 	bl	80037c0 <position_get_y_double>
 8003f9a:	ed87 0b04 	vstr	d0, [r7, #16]
	return ( sqrt ((x2-x1) * (x2-x1) + (y2-y1) * (y2-y1)) < d_win );
 8003f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fa6:	f7fc f98f 	bl	80002c8 <__aeabi_dsub>
 8003faa:	4603      	mov	r3, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	4625      	mov	r5, r4
 8003fb0:	461c      	mov	r4, r3
 8003fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fba:	f7fc f985 	bl	80002c8 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f7fc fb33 	bl	8000630 <__aeabi_dmul>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	4625      	mov	r5, r4
 8003fd0:	461c      	mov	r4, r3
 8003fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fda:	f7fc f975 	bl	80002c8 <__aeabi_dsub>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4690      	mov	r8, r2
 8003fe4:	4699      	mov	r9, r3
 8003fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fee:	f7fc f96b 	bl	80002c8 <__aeabi_dsub>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	f7fc fb19 	bl	8000630 <__aeabi_dmul>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc f961 	bl	80002cc <__adddf3>
 800400a:	4603      	mov	r3, r0
 800400c:	460c      	mov	r4, r1
 800400e:	ec44 3b17 	vmov	d7, r3, r4
 8004012:	eeb0 0a47 	vmov.f32	s0, s14
 8004016:	eef0 0a67 	vmov.f32	s1, s15
 800401a:	f00a ffaf 	bl	800ef7c <sqrt>
 800401e:	ec51 0b10 	vmov	r0, r1, d0
 8004022:	2301      	movs	r3, #1
 8004024:	461c      	mov	r4, r3
 8004026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800402a:	f7fc fd73 	bl	8000b14 <__aeabi_dcmplt>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <is_robot_in_xy_window+0xd8>
 8004034:	2300      	movs	r3, #0
 8004036:	461c      	mov	r4, r3
 8004038:	b2e3      	uxtb	r3, r4
}
 800403a:	4618      	mov	r0, r3
 800403c:	3730      	adds	r7, #48	; 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004044 <is_robot_in_angle_window>:

/** near the angle target in radian ? Only valid if
 *  traj->target.pol.angle is set (i.e. an angle command, not an xy
 *  command) */
static uint8_t is_robot_in_angle_window(struct trajectory *traj, double a_win_rad)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b089      	sub	sp, #36	; 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	ed87 0b00 	vstr	d0, [r7]
	double a;
	
	/* convert relative angle from imp to rad */
	a = traj->target.pol.angle - rs_get_angle(traj->robot);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68dc      	ldr	r4, [r3, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fccb 	bl	80039f4 <rs_get_angle>
 800405e:	4603      	mov	r3, r0
 8004060:	1ae3      	subs	r3, r4, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fa7e 	bl	8000564 <__aeabi_i2d>
 8004068:	4603      	mov	r3, r0
 800406a:	460c      	mov	r4, r1
 800406c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a /= traj->position->phys.distance_imp_per_mm;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004078:	461a      	mov	r2, r3
 800407a:	4623      	mov	r3, r4
 800407c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004080:	f7fc fc00 	bl	8000884 <__aeabi_ddiv>
 8004084:	4603      	mov	r3, r0
 8004086:	460c      	mov	r4, r1
 8004088:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a /= traj->position->phys.track_mm;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004094:	461a      	mov	r2, r3
 8004096:	4623      	mov	r3, r4
 8004098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800409c:	f7fc fbf2 	bl	8000884 <__aeabi_ddiv>
 80040a0:	4603      	mov	r3, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a *= 2.;
 80040a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	f7fc f90c 	bl	80002cc <__adddf3>
 80040b4:	4603      	mov	r3, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return ABS(a) < a_win_rad;
 80040bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80040c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040d0:	f7fc fd20 	bl	8000b14 <__aeabi_dcmplt>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <is_robot_in_angle_window+0xa2>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040ea:	2301      	movs	r3, #1
 80040ec:	461c      	mov	r4, r3
 80040ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f2:	f7fc fd0f 	bl	8000b14 <__aeabi_dcmplt>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <is_robot_in_angle_window+0xbc>
 80040fc:	2300      	movs	r3, #0
 80040fe:	461c      	mov	r4, r3
 8004100:	b2e3      	uxtb	r3, r4
}
 8004102:	4618      	mov	r0, r3
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	bf00      	nop

0800410c <__trajectory_goto_d_a_rel>:
 *   a_rad : angle in radian
 *   flags : what to update (UPDATE_A, UPDATE_D)
 */
void __trajectory_goto_d_a_rel(struct trajectory *traj, double d_mm, 
			       double a_rad, uint8_t state, uint8_t flags)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6178      	str	r0, [r7, #20]
 8004114:	ed87 0b02 	vstr	d0, [r7, #8]
 8004118:	ed87 1b00 	vstr	d1, [r7]
 800411c:	460b      	mov	r3, r1
 800411e:	74fb      	strb	r3, [r7, #19]
 8004120:	4613      	mov	r3, r2
 8004122:	74bb      	strb	r3, [r7, #18]
	int32_t a_consign, d_consign;

	DEBUG(E_TRAJECTORY, "Goto DA/RS rel to d=%f a_rad=%f", d_mm, a_rad);
	delete_event(traj);
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f7ff fe0d 	bl	8003d44 <delete_event>
	traj->state = state;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	7cfa      	ldrb	r2, [r7, #19]
 800412e:	701a      	strb	r2, [r3, #0]
	if (flags & UPDATE_A) {
 8004130:	7cbb      	ldrb	r3, [r7, #18]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d043      	beq.n	80041c2 <__trajectory_goto_d_a_rel+0xb6>
		if (flags & RESET_A) {
 800413a:	7cbb      	ldrb	r3, [r7, #18]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <__trajectory_goto_d_a_rel+0x3e>
			a_consign = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e025      	b.n	8004196 <__trajectory_goto_d_a_rel+0x8a>
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004156:	f7fc fa6b 	bl	8000630 <__aeabi_dmul>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	4618      	mov	r0, r3
 8004160:	4621      	mov	r1, r4
					      (traj->position->phys.track_mm) / 2); 
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
	if (flags & UPDATE_A) {
		if (flags & RESET_A) {
			a_consign = 0;
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 800416a:	461a      	mov	r2, r3
 800416c:	4623      	mov	r3, r4
 800416e:	f7fc fa5f 	bl	8000630 <__aeabi_dmul>
 8004172:	4603      	mov	r3, r0
 8004174:	460c      	mov	r4, r1
 8004176:	4618      	mov	r0, r3
 8004178:	4621      	mov	r1, r4
					      (traj->position->phys.track_mm) / 2); 
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004182:	f7fc fb7f 	bl	8000884 <__aeabi_ddiv>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
	if (flags & UPDATE_A) {
		if (flags & RESET_A) {
			a_consign = 0;
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 800418a:	4618      	mov	r0, r3
 800418c:	4621      	mov	r1, r4
 800418e:	f7fc fcff 	bl	8000b90 <__aeabi_d2iz>
 8004192:	4603      	mov	r3, r0
 8004194:	61fb      	str	r3, [r7, #28]
					      (traj->position->phys.track_mm) / 2); 
		}
		a_consign +=  rs_get_angle(traj->robot);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fc2a 	bl	80039f4 <rs_get_angle>
 80041a0:	4602      	mov	r2, r0
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
		traj->target.pol.angle = a_consign;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	60da      	str	r2, [r3, #12]
		vLockAngleConsign();
 80041ae:	f7fe fa49 	bl	8002644 <vLockAngleConsign>
		cs_set_consign(traj->csm_angle, a_consign);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fdfd 	bl	8002db8 <cs_set_consign>
		vUnlockAngleConsign();
 80041be:	f7fe fa87 	bl	80026d0 <vUnlockAngleConsign>
	}
	if (flags & UPDATE_D) {
 80041c2:	7cbb      	ldrb	r3, [r7, #18]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02d      	beq.n	8004228 <__trajectory_goto_d_a_rel+0x11c>
		if (flags & RESET_D) {
 80041cc:	7cbb      	ldrb	r3, [r7, #18]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <__trajectory_goto_d_a_rel+0xd0>
			d_consign = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e00f      	b.n	80041fc <__trajectory_goto_d_a_rel+0xf0>
		}
		else {
			d_consign = (int32_t)((d_mm) * (traj->position->phys.distance_imp_per_mm));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80041e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e8:	f7fc fa22 	bl	8000630 <__aeabi_dmul>
 80041ec:	4603      	mov	r3, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	4618      	mov	r0, r3
 80041f2:	4621      	mov	r1, r4
 80041f4:	f7fc fccc 	bl	8000b90 <__aeabi_d2iz>
 80041f8:	4603      	mov	r3, r0
 80041fa:	61bb      	str	r3, [r7, #24]
		}
		d_consign += rs_get_distance(traj->robot);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fc09 	bl	8003a18 <rs_get_distance>
 8004206:	4602      	mov	r2, r0
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
		traj->target.pol.distance = d_consign;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	609a      	str	r2, [r3, #8]
		vLockDistanceConsign();
 8004214:	f7fe fa24 	bl	8002660 <vLockDistanceConsign>
		cs_set_consign(traj->csm_distance, d_consign);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	69b9      	ldr	r1, [r7, #24]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fdca 	bl	8002db8 <cs_set_consign>
		vUnlockDistanceConsign();
 8004224:	f7fe fa62 	bl	80026ec <vUnlockDistanceConsign>
	}
}
 8004228:	bf00      	nop
 800422a:	3724      	adds	r7, #36	; 0x24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd90      	pop	{r4, r7, pc}

08004230 <trajectory_turnto_xy>:
				  UPDATE_A | UPDATE_D | RESET_D);
}

/** turn the robot until the point x,y is in front of us */ 
void trajectory_turnto_xy(struct trajectory *traj, double x_abs_mm, double y_abs_mm)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	ed2d 8b02 	vpush	{d8}
 8004236:	b08d      	sub	sp, #52	; 0x34
 8004238:	af00      	add	r7, sp, #0
 800423a:	6178      	str	r0, [r7, #20]
 800423c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004240:	ed87 1b00 	vstr	d1, [r7]
	double posx = position_get_x_double(traj->position); 
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff faa1 	bl	8003790 <position_get_x_double>
 800424e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double posy = position_get_y_double(traj->position);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fab2 	bl	80037c0 <position_get_y_double>
 800425c:	ed87 0b08 	vstr	d0, [r7, #32]
	double posa = position_get_a_rad_double(traj->position);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fac3 	bl	80037f0 <position_get_a_rad_double>
 800426a:	ed87 0b06 	vstr	d0, [r7, #24]

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0,
			simple_modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa),
 800426e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004272:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004276:	f7fc f827 	bl	80002c8 <__aeabi_dsub>
 800427a:	4603      	mov	r3, r0
 800427c:	460c      	mov	r4, r1
 800427e:	ec44 3b18 	vmov	d8, r3, r4
 8004282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800428a:	f7fc f81d 	bl	80002c8 <__aeabi_dsub>
 800428e:	4603      	mov	r3, r0
 8004290:	460c      	mov	r4, r1
 8004292:	ec44 3b17 	vmov	d7, r3, r4
 8004296:	eeb0 1a47 	vmov.f32	s2, s14
 800429a:	eef0 1a67 	vmov.f32	s3, s15
 800429e:	eeb0 0a48 	vmov.f32	s0, s16
 80042a2:	eef0 0a68 	vmov.f32	s1, s17
 80042a6:	f00a fe67 	bl	800ef78 <atan2>
 80042aa:	ec51 0b10 	vmov	r0, r1, d0
	double posx = position_get_x_double(traj->position); 
	double posy = position_get_y_double(traj->position);
	double posa = position_get_a_rad_double(traj->position);

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0,
 80042ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b2:	f7fc f809 	bl	80002c8 <__aeabi_dsub>
 80042b6:	4603      	mov	r3, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	ec44 3b17 	vmov	d7, r3, r4
 80042be:	eeb0 0a47 	vmov.f32	s0, s14
 80042c2:	eef0 0a67 	vmov.f32	s1, s15
 80042c6:	f7ff fd77 	bl	8003db8 <simple_modulo_2pi>
 80042ca:	eeb0 7a40 	vmov.f32	s14, s0
 80042ce:	eef0 7a60 	vmov.f32	s15, s1
 80042d2:	2207      	movs	r2, #7
 80042d4:	2101      	movs	r1, #1
 80042d6:	eeb0 1a47 	vmov.f32	s2, s14
 80042da:	eef0 1a67 	vmov.f32	s3, s15
 80042de:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80042f8 <trajectory_turnto_xy+0xc8>
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f7ff ff12 	bl	800410c <__trajectory_goto_d_a_rel>
			simple_modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa),
				  RUNNING_A,
				  UPDATE_A | UPDATE_D | RESET_D);
}
 80042e8:	bf00      	nop
 80042ea:	3734      	adds	r7, #52	; 0x34
 80042ec:	46bd      	mov	sp, r7
 80042ee:	ecbd 8b02 	vpop	{d8}
 80042f2:	bd90      	pop	{r4, r7, pc}
 80042f4:	f3af 8000 	nop.w
	...

08004300 <trajectory_turnto_xy_behind>:

/** turn the robot until the point x,y is behind us */ 
void trajectory_turnto_xy_behind(struct trajectory *traj, double x_abs_mm, double y_abs_mm)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	ed2d 8b02 	vpush	{d8}
 8004306:	b08d      	sub	sp, #52	; 0x34
 8004308:	af00      	add	r7, sp, #0
 800430a:	6178      	str	r0, [r7, #20]
 800430c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004310:	ed87 1b00 	vstr	d1, [r7]
	double posx = position_get_x_double(traj->position); 
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fa39 	bl	8003790 <position_get_x_double>
 800431e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double posy = position_get_y_double(traj->position);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fa4a 	bl	80037c0 <position_get_y_double>
 800432c:	ed87 0b08 	vstr	d0, [r7, #32]
	double posa = position_get_a_rad_double(traj->position);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fa5b 	bl	80037f0 <position_get_a_rad_double>
 800433a:	ed87 0b06 	vstr	d0, [r7, #24]

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0, 
			modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa + M_PI),
 800433e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004346:	f7fb ffbf 	bl	80002c8 <__aeabi_dsub>
 800434a:	4603      	mov	r3, r0
 800434c:	460c      	mov	r4, r1
 800434e:	ec44 3b18 	vmov	d8, r3, r4
 8004352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800435a:	f7fb ffb5 	bl	80002c8 <__aeabi_dsub>
 800435e:	4603      	mov	r3, r0
 8004360:	460c      	mov	r4, r1
 8004362:	ec44 3b17 	vmov	d7, r3, r4
 8004366:	eeb0 1a47 	vmov.f32	s2, s14
 800436a:	eef0 1a67 	vmov.f32	s3, s15
 800436e:	eeb0 0a48 	vmov.f32	s0, s16
 8004372:	eef0 0a68 	vmov.f32	s1, s17
 8004376:	f00a fdff 	bl	800ef78 <atan2>
 800437a:	ec51 0b10 	vmov	r0, r1, d0
 800437e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004382:	f7fb ffa1 	bl	80002c8 <__aeabi_dsub>
 8004386:	4603      	mov	r3, r0
 8004388:	460c      	mov	r4, r1
 800438a:	4618      	mov	r0, r3
 800438c:	4621      	mov	r1, r4
	double posx = position_get_x_double(traj->position); 
	double posy = position_get_y_double(traj->position);
	double posa = position_get_a_rad_double(traj->position);

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0, 
 800438e:	a314      	add	r3, pc, #80	; (adr r3, 80043e0 <trajectory_turnto_xy_behind+0xe0>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fb ff9a 	bl	80002cc <__adddf3>
 8004398:	4603      	mov	r3, r0
 800439a:	460c      	mov	r4, r1
 800439c:	ec44 3b17 	vmov	d7, r3, r4
 80043a0:	eeb0 0a47 	vmov.f32	s0, s14
 80043a4:	eef0 0a67 	vmov.f32	s1, s15
 80043a8:	f7ff fd4e 	bl	8003e48 <modulo_2pi>
 80043ac:	eeb0 7a40 	vmov.f32	s14, s0
 80043b0:	eef0 7a60 	vmov.f32	s15, s1
 80043b4:	2207      	movs	r2, #7
 80043b6:	2101      	movs	r1, #1
 80043b8:	eeb0 1a47 	vmov.f32	s2, s14
 80043bc:	eef0 1a67 	vmov.f32	s3, s15
 80043c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80043d8 <trajectory_turnto_xy_behind+0xd8>
 80043c4:	6978      	ldr	r0, [r7, #20]
 80043c6:	f7ff fea1 	bl	800410c <__trajectory_goto_d_a_rel>
			modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa + M_PI),
				  RUNNING_A,
				  UPDATE_A | UPDATE_D | RESET_D);
}
 80043ca:	bf00      	nop
 80043cc:	3734      	adds	r7, #52	; 0x34
 80043ce:	46bd      	mov	sp, r7
 80043d0:	ecbd 8b02 	vpop	{d8}
 80043d4:	bd90      	pop	{r4, r7, pc}
 80043d6:	bf00      	nop
	...
 80043e0:	54442d18 	.word	0x54442d18
 80043e4:	400921fb 	.word	0x400921fb

080043e8 <trajectory_d_a_rel>:
	__trajectory_goto_d_a_rel(traj, 0, a, RUNNING_A, UPDATE_A);
}

/** turn by 'a' degrees */
void trajectory_d_a_rel(struct trajectory *traj, double d_mm, double a_deg)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6178      	str	r0, [r7, #20]
 80043f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80043f4:	ed87 1b00 	vstr	d1, [r7]
	__trajectory_goto_d_a_rel(traj, d_mm, RAD(a_deg),
 80043f8:	a30d      	add	r3, pc, #52	; (adr r3, 8004430 <trajectory_d_a_rel+0x48>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004402:	f7fc f915 	bl	8000630 <__aeabi_dmul>
 8004406:	4603      	mov	r3, r0
 8004408:	460c      	mov	r4, r1
 800440a:	ec44 3b17 	vmov	d7, r3, r4
 800440e:	2203      	movs	r2, #3
 8004410:	2103      	movs	r1, #3
 8004412:	eeb0 1a47 	vmov.f32	s2, s14
 8004416:	eef0 1a67 	vmov.f32	s3, s15
 800441a:	ed97 0b02 	vldr	d0, [r7, #8]
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff fe74 	bl	800410c <__trajectory_goto_d_a_rel>
				  RUNNING_AD, UPDATE_A | UPDATE_D);
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}
 800442c:	f3af 8000 	nop.w
 8004430:	a2529d39 	.word	0xa2529d39
 8004434:	3f91df46 	.word	0x3f91df46

08004438 <trajectory_goto_xy_abs>:

/************ GOTO XY, USE EVENTS */

/** goto a x,y point, using a trajectory event */
void trajectory_goto_xy_abs(struct trajectory *traj, double x, double y)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6178      	str	r0, [r7, #20]
 8004440:	ed87 0b02 	vstr	d0, [r7, #8]
 8004444:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f7ff fc7b 	bl	8003d44 <delete_event>
	traj->target.cart.x = x;
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004454:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800445e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_START;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2204      	movs	r2, #4
 8004466:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7ff fc89 	bl	8003d80 <schedule_event>
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd90      	pop	{r4, r7, pc}
 8004476:	bf00      	nop

08004478 <trajectory_goto_forward_xy_abs>:

/** go forward to a x,y point, using a trajectory event */
void trajectory_goto_forward_xy_abs(struct trajectory *traj, double x, double y)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6178      	str	r0, [r7, #20]
 8004480:	ed87 0b02 	vstr	d0, [r7, #8]
 8004484:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004488:	6978      	ldr	r0, [r7, #20]
 800448a:	f7ff fc5b 	bl	8003d44 <delete_event>
	traj->target.cart.x = x;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004494:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800449e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_F_START;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2207      	movs	r2, #7
 80044a6:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 80044a8:	6978      	ldr	r0, [r7, #20]
 80044aa:	f7ff fc69 	bl	8003d80 <schedule_event>
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd90      	pop	{r4, r7, pc}
 80044b6:	bf00      	nop

080044b8 <trajectory_goto_backward_xy_abs>:

/** go backward to a x,y point, using a trajectory event */
void trajectory_goto_backward_xy_abs(struct trajectory *traj, double x, double y)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6178      	str	r0, [r7, #20]
 80044c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80044c4:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	f7ff fc3b 	bl	8003d44 <delete_event>
	traj->target.cart.x = x;
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80044d4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	e897 0018 	ldmia.w	r7, {r3, r4}
 80044de:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_B_START;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	220a      	movs	r2, #10
 80044e6:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 80044e8:	6978      	ldr	r0, [r7, #20]
 80044ea:	f7ff fc49 	bl	8003d80 <schedule_event>
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}
 80044f6:	bf00      	nop

080044f8 <trajectory_finished>:

/** return true if the position consign is equal to the filtered
 * position consign (after quadramp filter), for angle and
 * distance. */
uint8_t trajectory_finished(struct trajectory *traj)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	return cs_get_consign(traj->csm_angle) == cs_get_filtered_consign(traj->csm_angle) &&
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fc3b 	bl	8002d80 <cs_get_consign>
 800450a:	4604      	mov	r4, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe fc43 	bl	8002d9c <cs_get_filtered_consign>
 8004516:	4603      	mov	r3, r0
 8004518:	429c      	cmp	r4, r3
 800451a:	d10f      	bne.n	800453c <trajectory_finished+0x44>
		cs_get_consign(traj->csm_distance) == cs_get_filtered_consign(traj->csm_distance) ;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe fc2d 	bl	8002d80 <cs_get_consign>
 8004526:	4604      	mov	r4, r0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fc35 	bl	8002d9c <cs_get_filtered_consign>
 8004532:	4603      	mov	r3, r0
/** return true if the position consign is equal to the filtered
 * position consign (after quadramp filter), for angle and
 * distance. */
uint8_t trajectory_finished(struct trajectory *traj)
{
	return cs_get_consign(traj->csm_angle) == cs_get_filtered_consign(traj->csm_angle) &&
 8004534:	429c      	cmp	r4, r3
 8004536:	d101      	bne.n	800453c <trajectory_finished+0x44>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <trajectory_finished+0x46>
 800453c:	2300      	movs	r3, #0
 800453e:	b2db      	uxtb	r3, r3
		cs_get_consign(traj->csm_distance) == cs_get_filtered_consign(traj->csm_distance) ;
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bd90      	pop	{r4, r7, pc}

08004548 <trajectory_in_window>:

/** return true if traj is nearly finished */
uint8_t trajectory_in_window(struct trajectory *traj, double d_win, double a_win_rad)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6178      	str	r0, [r7, #20]
 8004550:	ed87 0b02 	vstr	d0, [r7, #8]
 8004554:	ed87 1b00 	vstr	d1, [r7]
	switch(traj->state) {
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	2b0b      	cmp	r3, #11
 8004560:	d844      	bhi.n	80045ec <trajectory_in_window+0xa4>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <trajectory_in_window+0x20>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	080045a7 	.word	0x080045a7
 800456c:	080045b5 	.word	0x080045b5
 8004570:	080045c3 	.word	0x080045c3
 8004574:	080045ed 	.word	0x080045ed
 8004578:	080045ed 	.word	0x080045ed
 800457c:	08004599 	.word	0x08004599
 8004580:	080045ed 	.word	0x080045ed
 8004584:	080045ed 	.word	0x080045ed
 8004588:	08004599 	.word	0x08004599
 800458c:	080045ed 	.word	0x080045ed
 8004590:	080045ed 	.word	0x080045ed
 8004594:	08004599 	.word	0x08004599

	case RUNNING_XY_ANGLE_OK: 
	case RUNNING_XY_F_ANGLE_OK: 
	case RUNNING_XY_B_ANGLE_OK: 
		/* if robot coordinates are near the x,y target */
		return is_robot_in_xy_window(traj, d_win);
 8004598:	ed97 0b02 	vldr	d0, [r7, #8]
 800459c:	6978      	ldr	r0, [r7, #20]
 800459e:	f7ff fcdf 	bl	8003f60 <is_robot_in_xy_window>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e023      	b.n	80045ee <trajectory_in_window+0xa6>

	case RUNNING_A: 
		return is_robot_in_angle_window(traj, a_win_rad);
 80045a6:	ed97 0b00 	vldr	d0, [r7]
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff fd4a 	bl	8004044 <is_robot_in_angle_window>
 80045b0:	4603      	mov	r3, r0
 80045b2:	e01c      	b.n	80045ee <trajectory_in_window+0xa6>

	case RUNNING_D:
		return is_robot_in_dist_window(traj, d_win);
 80045b4:	ed97 0b02 	vldr	d0, [r7, #8]
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f7ff fc81 	bl	8003ec0 <is_robot_in_dist_window>
 80045be:	4603      	mov	r3, r0
 80045c0:	e015      	b.n	80045ee <trajectory_in_window+0xa6>

	case RUNNING_AD:
		return is_robot_in_dist_window(traj, d_win) && 
 80045c2:	ed97 0b02 	vldr	d0, [r7, #8]
 80045c6:	6978      	ldr	r0, [r7, #20]
 80045c8:	f7ff fc7a 	bl	8003ec0 <is_robot_in_dist_window>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <trajectory_in_window+0x9e>
			is_robot_in_angle_window(traj, a_win_rad);
 80045d2:	ed97 0b00 	vldr	d0, [r7]
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7ff fd34 	bl	8004044 <is_robot_in_angle_window>
 80045dc:	4603      	mov	r3, r0

	case RUNNING_D:
		return is_robot_in_dist_window(traj, d_win);

	case RUNNING_AD:
		return is_robot_in_dist_window(traj, d_win) && 
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <trajectory_in_window+0x9e>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <trajectory_in_window+0xa0>
 80045e6:	2300      	movs	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e000      	b.n	80045ee <trajectory_in_window+0xa6>
	case RUNNING_XY_B_START:
	case RUNNING_XY_ANGLE: 
	case RUNNING_XY_F_ANGLE:
	case RUNNING_XY_B_ANGLE:
	default:
		return 0;
 80045ec:	2300      	movs	r3, #0
	}
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop

080045f8 <trajectory_manager_event>:

/*********** *TRAJECTORY EVENT FUNC */

/** event called for xy trajectories */
static void trajectory_manager_event(void * param)
{
 80045f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045fc:	b09e      	sub	sp, #120	; 0x78
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
	struct trajectory *traj = (struct trajectory *)param;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	65fb      	str	r3, [r7, #92]	; 0x5c
	double coef=1.0;
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	4b7b      	ldr	r3, [pc, #492]	; (80047f8 <trajectory_manager_event+0x200>)
 800460c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double x,y,a;
	int32_t d_consign=0, a_consign=0;
 8004610:	2300      	movs	r3, #0
 8004612:	677b      	str	r3, [r7, #116]	; 0x74
 8004614:	2300      	movs	r3, #0
 8004616:	673b      	str	r3, [r7, #112]	; 0x70
	vect2_pol v2pol_target;

	TickType_t xNextWakeTime;

	/* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8004618:	f003 fdcc 	bl	80081b4 <xTaskGetTickCount>
 800461c:	4603      	mov	r3, r0
 800461e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
        vTaskDelayUntil( &xNextWakeTime, DO_TRAJECTORY_MSEC);
 8004620:	f107 030c 	add.w	r3, r7, #12
 8004624:	2164      	movs	r1, #100	; 0x64
 8004626:	4618      	mov	r0, r3
 8004628:	f003 fbde 	bl	8007de8 <vTaskDelayUntil>

		x = position_get_x_double(traj->position);
 800462c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f8ad 	bl	8003790 <position_get_x_double>
 8004636:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		y = position_get_y_double(traj->position);
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f8be 	bl	80037c0 <position_get_y_double>
 8004644:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		a = position_get_a_rad_double(traj->position);
 8004648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff f8cf 	bl	80037f0 <position_get_a_rad_double>
 8004652:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

		/* step 1 : process new commands to quadramps */

		switch (traj->state) {
 8004656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	3b04      	subs	r3, #4
 800465c:	2b08      	cmp	r3, #8
 800465e:	f200 8156 	bhi.w	800490e <trajectory_manager_event+0x316>
		case RUNNING_XY_B_ANGLE:
		case RUNNING_XY_B_ANGLE_OK:

			/* process the command vector from absolute target and
			 * current position */
			v2cart_pos.x = traj->target.cart.x - x;
 8004662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004664:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800466c:	f7fb fe2c 	bl	80002c8 <__aeabi_dsub>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	e9c7 2308 	strd	r2, r3, [r7, #32]
			v2cart_pos.y = traj->target.cart.y - y;
 8004678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800467e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004682:	f7fb fe21 	bl	80002c8 <__aeabi_dsub>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			vect2_cart2pol(&v2cart_pos, &v2pol_target);
 800468e:	f107 0210 	add.w	r2, r7, #16
 8004692:	f107 0320 	add.w	r3, r7, #32
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe fe15 	bl	80032c8 <vect2_cart2pol>
			v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta - a);
 800469e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046a6:	f7fb fe0f 	bl	80002c8 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	ec43 2b17 	vmov	d7, r2, r3
 80046b2:	eeb0 0a47 	vmov.f32	s0, s14
 80046b6:	eef0 0a67 	vmov.f32	s1, s15
 80046ba:	f7ff fb7d 	bl	8003db8 <simple_modulo_2pi>
 80046be:	eeb0 7a40 	vmov.f32	s14, s0
 80046c2:	eef0 7a60 	vmov.f32	s15, s1
 80046c6:	ed87 7b06 	vstr	d7, [r7, #24]

			/* asked to go backwards */
			if (traj->state >= RUNNING_XY_B_START &&
 80046ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b09      	cmp	r3, #9
 80046d0:	d921      	bls.n	8004716 <trajectory_manager_event+0x11e>
				traj->state <= RUNNING_XY_B_ANGLE_OK ) {
 80046d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d4:	781b      	ldrb	r3, [r3, #0]
			v2cart_pos.y = traj->target.cart.y - y;
			vect2_cart2pol(&v2cart_pos, &v2pol_target);
			v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta - a);

			/* asked to go backwards */
			if (traj->state >= RUNNING_XY_B_START &&
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d81d      	bhi.n	8004716 <trajectory_manager_event+0x11e>
				traj->state <= RUNNING_XY_B_ANGLE_OK ) {
				v2pol_target.r = -v2pol_target.r;
 80046da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046de:	4614      	mov	r4, r2
 80046e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80046e4:	e9c7 4504 	strd	r4, r5, [r7, #16]
				v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
 80046e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046ec:	a33c      	add	r3, pc, #240	; (adr r3, 80047e0 <trajectory_manager_event+0x1e8>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f7fb fdeb 	bl	80002cc <__adddf3>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	ec43 2b17 	vmov	d7, r2, r3
 80046fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004702:	eef0 0a67 	vmov.f32	s1, s15
 8004706:	f7ff fb57 	bl	8003db8 <simple_modulo_2pi>
 800470a:	eeb0 7a40 	vmov.f32	s14, s0
 800470e:	eef0 7a60 	vmov.f32	s15, s1
 8004712:	ed87 7b06 	vstr	d7, [r7, #24]
			}

			/* if we don't need to go forward */
			if (traj->state >= RUNNING_XY_START &&
 8004716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d935      	bls.n	800478a <trajectory_manager_event+0x192>
				traj->state <= RUNNING_XY_ANGLE_OK ) {
 800471e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004720:	781b      	ldrb	r3, [r3, #0]
				v2pol_target.r = -v2pol_target.r;
				v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
			}

			/* if we don't need to go forward */
			if (traj->state >= RUNNING_XY_START &&
 8004722:	2b06      	cmp	r3, #6
 8004724:	d831      	bhi.n	800478a <trajectory_manager_event+0x192>
				traj->state <= RUNNING_XY_ANGLE_OK ) {
				/* If the target is behind the robot, we need to go
				 * backwards. 0.52 instead of 0.5 because we prefer to
				 * go forward */
				if ((v2pol_target.theta > 0.52*M_PI) ||
 8004726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800472a:	a32f      	add	r3, pc, #188	; (adr r3, 80047e8 <trajectory_manager_event+0x1f0>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fc fa0e 	bl	8000b50 <__aeabi_dcmpgt>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <trajectory_manager_event+0x156>
					(v2pol_target.theta < -0.52*M_PI ) ) {
 800473a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			if (traj->state >= RUNNING_XY_START &&
				traj->state <= RUNNING_XY_ANGLE_OK ) {
				/* If the target is behind the robot, we need to go
				 * backwards. 0.52 instead of 0.5 because we prefer to
				 * go forward */
				if ((v2pol_target.theta > 0.52*M_PI) ||
 800473e:	a32c      	add	r3, pc, #176	; (adr r3, 80047f0 <trajectory_manager_event+0x1f8>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fc f9e6 	bl	8000b14 <__aeabi_dcmplt>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01d      	beq.n	800478a <trajectory_manager_event+0x192>
					(v2pol_target.theta < -0.52*M_PI ) ) {
					v2pol_target.r = -v2pol_target.r;
 800474e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004752:	4690      	mov	r8, r2
 8004754:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004758:	e9c7 8904 	strd	r8, r9, [r7, #16]
					v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
 800475c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004760:	a31f      	add	r3, pc, #124	; (adr r3, 80047e0 <trajectory_manager_event+0x1e8>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f7fb fdb1 	bl	80002cc <__adddf3>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	ec43 2b17 	vmov	d7, r2, r3
 8004772:	eeb0 0a47 	vmov.f32	s0, s14
 8004776:	eef0 0a67 	vmov.f32	s1, s15
 800477a:	f7ff fb1d 	bl	8003db8 <simple_modulo_2pi>
 800477e:	eeb0 7a40 	vmov.f32	s14, s0
 8004782:	eef0 7a60 	vmov.f32	s15, s1
 8004786:	ed87 7b06 	vstr	d7, [r7, #24]
				}
			}

			/* If the robot is correctly oriented to start moving in distance */
			/* here limit dist speed depending on v2pol_target.theta */
			if (ABS(v2pol_target.theta) > traj->a_start_rad) // || ABS(v2pol_target.r) < traj->d_win)
 800478a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800479e:	f7fc f9b9 	bl	8000b14 <__aeabi_dcmplt>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <trajectory_manager_event+0x1bc>
 80047a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80047be:	f7fc f9c7 	bl	8000b50 <__aeabi_dcmpgt>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d019      	beq.n	80047fc <trajectory_manager_event+0x204>
				set_quadramp_speed(traj, 0, traj->a_speed);
 80047c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	2100      	movs	r1, #0
 80047d2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80047d4:	f7ff fa58 	bl	8003c88 <set_quadramp_speed>
 80047d8:	e053      	b.n	8004882 <trajectory_manager_event+0x28a>
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w
 80047e0:	54442d18 	.word	0x54442d18
 80047e4:	400921fb 	.word	0x400921fb
 80047e8:	4d659f8a 	.word	0x4d659f8a
 80047ec:	3ffa2357 	.word	0x3ffa2357
 80047f0:	4d659f8a 	.word	0x4d659f8a
 80047f4:	bffa2357 	.word	0xbffa2357
 80047f8:	3ff00000 	.word	0x3ff00000
			else {
				coef = (traj->a_start_rad - ABS(v2pol_target.theta)) / traj->a_start_rad;
 80047fc:	6dfb      	ldral	r3, [r7, #92]	; 0x5c
 80047fe:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 8004802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004806:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004816:	f7fc f97d 	bl	8000b14 <__aeabi_dcmplt>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <trajectory_manager_event+0x234>
 8004820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004822:	663b      	str	r3, [r7, #96]	; 0x60
 8004824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004826:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800482a:	667b      	str	r3, [r7, #100]	; 0x64
 800482c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004830:	4650      	mov	r0, sl
 8004832:	4659      	mov	r1, fp
 8004834:	f7fb fd48 	bl	80002c8 <__aeabi_dsub>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004842:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004846:	f7fc f81d 	bl	8000884 <__aeabi_ddiv>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				set_quadramp_speed(traj, traj->d_speed * coef, traj->a_speed);
 8004852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004854:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004856:	4618      	mov	r0, r3
 8004858:	f7fb fe84 	bl	8000564 <__aeabi_i2d>
 800485c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004860:	f7fb fee6 	bl	8000630 <__aeabi_dmul>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f7fc f990 	bl	8000b90 <__aeabi_d2iz>
 8004870:	4603      	mov	r3, r0
 8004872:	b219      	sxth	r1, r3
 8004874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004878:	b21b      	sxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800487e:	f7ff fa03 	bl	8003c88 <set_quadramp_speed>
			}

			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
 8004882:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800488e:	f7fb fecf 	bl	8000630 <__aeabi_dmul>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	f7fc f979 	bl	8000b90 <__aeabi_d2iz>
 800489e:	4603      	mov	r3, r0
 80048a0:	677b      	str	r3, [r7, #116]	; 0x74
			d_consign += rs_get_distance(traj->robot);
 80048a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff f8b6 	bl	8003a18 <rs_get_distance>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b0:	4413      	add	r3, r2
 80048b2:	677b      	str	r3, [r7, #116]	; 0x74

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 80048b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
						  (traj->position->phys.distance_imp_per_mm) *
 80048b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 80048c0:	f7fb feb6 	bl	8000630 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
						  (traj->position->phys.distance_imp_per_mm) *
						  (traj->position->phys.track_mm) / 2.2);
 80048cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
						  (traj->position->phys.distance_imp_per_mm) *
 80048d4:	f7fb feac 	bl	8000630 <__aeabi_dmul>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
						  (traj->position->phys.track_mm) / 2.2);
 80048e0:	a34d      	add	r3, pc, #308	; (adr r3, 8004a18 <trajectory_manager_event+0x420>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f7fb ffcd 	bl	8000884 <__aeabi_ddiv>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7fc f94d 	bl	8000b90 <__aeabi_d2iz>
 80048f6:	4603      	mov	r3, r0
 80048f8:	673b      	str	r3, [r7, #112]	; 0x70
						  (traj->position->phys.distance_imp_per_mm) *
						  (traj->position->phys.track_mm) / 2.2);
			a_consign += rs_get_angle(traj->robot);
 80048fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff f878 	bl	80039f4 <rs_get_angle>
 8004904:	4602      	mov	r2, r0
 8004906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004908:	4413      	add	r3, r2
 800490a:	673b      	str	r3, [r7, #112]	; 0x70

			break;
 800490c:	e00a      	b.n	8004924 <trajectory_manager_event+0x32c>

		default:
			/* hmmm quite odd, delete the event */
			traj->scheduler_task=NULL;
 800490e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
			vTaskDelete(traj->scheduler_task);
 8004914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	4618      	mov	r0, r3
 800491a:	f003 f9d9 	bl	8007cd0 <vTaskDelete>
			traj->state = READY;
 800491e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
		/* step 2 : update state, or delete event if we reached the
		 * destination */

		/* XXX if target is our pos !! */

		switch (traj->state) {
 8004924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	3b04      	subs	r3, #4
 800492a:	2b08      	cmp	r3, #8
 800492c:	d857      	bhi.n	80049de <trajectory_manager_event+0x3e6>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <trajectory_manager_event+0x33c>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004959 	.word	0x08004959
 8004938:	08004967 	.word	0x08004967
 800493c:	080049b3 	.word	0x080049b3
 8004940:	08004959 	.word	0x08004959
 8004944:	08004967 	.word	0x08004967
 8004948:	080049b3 	.word	0x080049b3
 800494c:	08004959 	.word	0x08004959
 8004950:	08004967 	.word	0x08004967
 8004954:	080049b3 	.word	0x080049b3
		case RUNNING_XY_START:
		case RUNNING_XY_F_START:
		case RUNNING_XY_B_START:
			/* START -> ANGLE */
			traj->state ++;
 8004958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004962:	701a      	strb	r2, [r3, #0]
			break;
 8004964:	e040      	b.n	80049e8 <trajectory_manager_event+0x3f0>

		case RUNNING_XY_ANGLE:
		case RUNNING_XY_F_ANGLE:
		case RUNNING_XY_B_ANGLE: {
			struct quadramp_filter *q_a;
			q_a = traj->csm_angle->consign_filter_params;
 8004966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
			/* if d_speed is not 0, we are in start_angle_win */
			if (get_quadramp_distance_speed(traj)) {
 800496e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004970:	f7ff f9d8 	bl	8003d24 <get_quadramp_distance_speed>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d033      	beq.n	80049e2 <trajectory_manager_event+0x3ea>
				if(is_robot_in_xy_window(traj, traj->d_win)) {
 800497a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004980:	eeb0 0a47 	vmov.f32	s0, s14
 8004984:	eef0 0a67 	vmov.f32	s1, s15
 8004988:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800498a:	f7ff fae9 	bl	8003f60 <is_robot_in_xy_window>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <trajectory_manager_event+0x3ac>
					traj->scheduler_task=NULL;
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
					vTaskDelete(traj->scheduler_task);
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	4618      	mov	r0, r3
 80049a0:	f003 f996 	bl	8007cd0 <vTaskDelete>
				}
				/* ANGLE -> ANGLE_OK */
				traj->state ++;
 80049a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ae:	701a      	strb	r2, [r3, #0]
			}
			break;
 80049b0:	e017      	b.n	80049e2 <trajectory_manager_event+0x3ea>

		case RUNNING_XY_ANGLE_OK:
		case RUNNING_XY_F_ANGLE_OK:
		case RUNNING_XY_B_ANGLE_OK:
			/* If we reached the destination */
			if(is_robot_in_xy_window(traj, traj->d_win)) {
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	ed93 7b06 	vldr	d7, [r3, #24]
 80049b8:	eeb0 0a47 	vmov.f32	s0, s14
 80049bc:	eef0 0a67 	vmov.f32	s1, s15
 80049c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80049c2:	f7ff facd 	bl	8003f60 <is_robot_in_xy_window>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <trajectory_manager_event+0x3ee>
				traj->scheduler_task=NULL;
 80049cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ce:	2200      	movs	r2, #0
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
				vTaskDelete(traj->scheduler_task);
 80049d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	4618      	mov	r0, r3
 80049d8:	f003 f97a 	bl	8007cd0 <vTaskDelete>
			}
		break;
 80049dc:	e003      	b.n	80049e6 <trajectory_manager_event+0x3ee>

		default:
			break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <trajectory_manager_event+0x3f0>
					vTaskDelete(traj->scheduler_task);
				}
				/* ANGLE -> ANGLE_OK */
				traj->state ++;
			}
			break;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <trajectory_manager_event+0x3f0>
			/* If we reached the destination */
			if(is_robot_in_xy_window(traj, traj->d_win)) {
				traj->scheduler_task=NULL;
				vTaskDelete(traj->scheduler_task);
			}
		break;
 80049e6:	bf00      	nop
			break;
		}

		/* step 3 : send the processed commands to cs */

		vLockAngleConsign();
 80049e8:	f7fd fe2c 	bl	8002644 <vLockAngleConsign>
		cs_set_consign(traj->csm_angle, a_consign);
 80049ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe f9e0 	bl	8002db8 <cs_set_consign>
		vUnlockAngleConsign();
 80049f8:	f7fd fe6a 	bl	80026d0 <vUnlockAngleConsign>
		vLockDistanceConsign();
 80049fc:	f7fd fe30 	bl	8002660 <vLockDistanceConsign>
		cs_set_consign(traj->csm_distance, d_consign);
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe f9d6 	bl	8002db8 <cs_set_consign>
		vUnlockDistanceConsign();
 8004a0c:	f7fd fe6e 	bl	80026ec <vUnlockDistanceConsign>
	}
 8004a10:	e606      	b.n	8004620 <trajectory_manager_event+0x28>
 8004a12:	bf00      	nop
 8004a14:	f3af 8000 	nop.w
 8004a18:	9999999a 	.word	0x9999999a
 8004a1c:	40019999 	.word	0x40019999

08004a20 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004a28:	4905      	ldr	r1, [pc, #20]	; (8004a40 <NVIC_PriorityGroupConfig+0x20>)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <NVIC_PriorityGroupConfig+0x24>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60cb      	str	r3, [r1, #12]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000ed00 	.word	0xe000ed00
 8004a44:	05fa0000 	.word	0x05fa0000

08004a48 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <ADC_Init+0xa4>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004a72:	4313      	orrs	r3, r2
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <ADC_Init+0xa8>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004a96:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004a9c:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	795b      	ldrb	r3, [r3, #5]
 8004aa2:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004abe:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	7d1b      	ldrb	r3, [r3, #20]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	7afb      	ldrb	r3, [r7, #11]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	051b      	lsls	r3, r3, #20
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	fcfffeff 	.word	0xfcfffeff
 8004af0:	c0fff7fd 	.word	0xc0fff7fd

08004af4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	751a      	strb	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8004b40:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <ADC_CommonInit+0x48>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <ADC_CommonInit+0x4c>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8004b56:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8004b5c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8004b62:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8004b6a:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <ADC_CommonInit+0x48>)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6053      	str	r3, [r2, #4]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40012300 	.word	0x40012300
 8004b80:	fffc30e0 	.word	0xfffc30e0

08004b84 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60da      	str	r2, [r3, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d006      	beq.n	8004bd0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8004bce:	e005      	b.n	8004bdc <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 0201 	bic.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <ADC_TempSensorVrefintCmd+0x38>)
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <ADC_TempSensorVrefintCmd+0x38>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c02:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 8004c04:	e005      	b.n	8004c12 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <ADC_TempSensorVrefintCmd+0x38>)
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <ADC_TempSensorVrefintCmd+0x38>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c10:	6053      	str	r3, [r2, #4]
  }
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40012300 	.word	0x40012300

08004c24 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)FLASH_Latency);
 8004c2c:	4906      	ldr	r1, [pc, #24]	; (8004c48 <FLASH_SetLatency+0x24>)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <FLASH_SetLatency+0x24>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 020f 	bic.w	r2, r3, #15
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40023c00 	.word	0x40023c00

08004c4c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e076      	b.n	8004d56 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d165      	bne.n	8004d50 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2103      	movs	r1, #3
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	401a      	ands	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	791b      	ldrb	r3, [r3, #4]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	791b      	ldrb	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d003      	beq.n	8004cc2 <GPIO_Init+0x76>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	791b      	ldrb	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d12e      	bne.n	8004d20 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2103      	movs	r1, #3
 8004ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	795b      	ldrb	r3, [r3, #5]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	401a      	ands	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	799b      	ldrb	r3, [r3, #6]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	2103      	movs	r1, #3
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	401a      	ands	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	79db      	ldrb	r3, [r3, #7]
 8004d40:	4619      	mov	r1, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3301      	adds	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b0f      	cmp	r3, #15
 8004d5a:	d985      	bls.n	8004c68 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	e001      	b.n	8004d8e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
 8004da8:	4613      	mov	r3, r2
 8004daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8004dac:	787b      	ldrb	r3, [r7, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004db8:	e003      	b.n	8004dc2 <GPIO_WriteBit+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	041a      	lsls	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	619a      	str	r2, [r3, #24]
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop

08004dd0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF14_LTDC: Connect LTDC pins to AF14 for STM32F746xx/756xx devices.
  *            @arg GPIO_AF15_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004de8:	787a      	ldrb	r2, [r7, #1]
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	08db      	lsrs	r3, r3, #3
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	887b      	ldrh	r3, [r7, #2]
 8004e02:	08db      	lsrs	r3, r3, #3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	210f      	movs	r1, #15
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	ea02 0103 	and.w	r1, r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f100 0208 	add.w	r2, r0, #8
 8004e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3208      	adds	r2, #8
 8004e3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	08db      	lsrs	r3, r3, #3
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3208      	adds	r2, #8
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop

08004e64 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  if (NewState != DISABLE)
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <PWR_OverDriveCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODEN;
 8004e74:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <PWR_OverDriveCmd+0x38>)
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <PWR_OverDriveCmd+0x38>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
  }
}
 8004e80:	e005      	b.n	8004e8e <PWR_OverDriveCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
 8004e82:	4a06      	ldr	r2, [pc, #24]	; (8004e9c <PWR_OverDriveCmd+0x38>)
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <PWR_OverDriveCmd+0x38>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40007000 	.word	0x40007000

08004ea0 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  if (NewState != DISABLE)
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <PWR_OverDriveSWCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODSWEN;
 8004eb0:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <PWR_OverDriveSWCmd+0x38>)
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <PWR_OverDriveSWCmd+0x38>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eba:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
  }
}
 8004ebc:	e005      	b.n	8004eca <PWR_OverDriveSWCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODSWEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
 8004ebe:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <PWR_OverDriveSWCmd+0x38>)
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <PWR_OverDriveSWCmd+0x38>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ec8:	6013      	str	r3, [r2, #0]
  }
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40007000 	.word	0x40007000

08004edc <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if( PWR_FLAG & 0x80000000 )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da0f      	bge.n	8004f0e <PWR_GetFlagStatus+0x32>
  {
    PWR_FLAG &= PWR_WUPF_MASK;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef4:	607b      	str	r3, [r7, #4]
    if ((PWR->CSR2 & PWR_FLAG) != (uint32_t)RESET)
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <PWR_GetFlagStatus+0x58>)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <PWR_GetFlagStatus+0x2c>
    {
      bitstatus = SET;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	e00d      	b.n	8004f24 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e00a      	b.n	8004f24 <PWR_GetFlagStatus+0x48>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_FLAG) != (uint32_t)RESET)
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <PWR_GetFlagStatus+0x58>)
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <PWR_GetFlagStatus+0x44>
    {
      bitstatus = SET;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
 8004f1e:	e001      	b.n	8004f24 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the flag status */
  return bitstatus;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40007000 	.word	0x40007000

08004f38 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <RCC_HSEConfig+0x24>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <RCC_HSEConfig+0x24>)
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	7013      	strb	r3, [r2, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023802 	.word	0x40023802

08004f60 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8004f72:	2031      	movs	r0, #49	; 0x31
 8004f74:	f000 f9f6 	bl	8005364 <RCC_GetFlagStatus>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f88:	d002      	beq.n	8004f90 <RCC_WaitForHSEStartUp+0x30>
 8004f8a:	79bb      	ldrb	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8004f90:	2031      	movs	r0, #49	; 0x31
 8004f92:	f000 f9e7 	bl	8005364 <RCC_GetFlagStatus>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	71fb      	strb	r3, [r7, #7]
 8004fa0:	e001      	b.n	8004fa6 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b08b      	sub	sp, #44	; 0x2c
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8004fbe:	481c      	ldr	r0, [pc, #112]	; (8005030 <RCC_PLLConfig+0x80>)
 8004fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	fa93 f3a3 	rbit	r3, r3
 8004fcc:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004fce:	693b      	ldr	r3, [r7, #16]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	409a      	lsls	r2, r3
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	431a      	orrs	r2, r3
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	1e59      	subs	r1, r3, #1
 8004fe2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004fe6:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	fa93 f3a3 	rbit	r3, r3
 8004fee:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8004ffa:	431a      	orrs	r2, r3
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005004:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	fa93 f3a3 	rbit	r3, r3
 800500c:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8005010:	fab3 f383 	clz	r3, r3
 8005014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
 800501a:	4313      	orrs	r3, r2
 800501c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8005020:	6043      	str	r3, [r0, #4]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
}
 8005022:	bf00      	nop
 8005024:	372c      	adds	r7, #44	; 0x2c
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40023800 	.word	0x40023800

08005034 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if( NewState != DISABLE )
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <RCC_PLLCmd+0x1e>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005044:	4a09      	ldr	r2, [pc, #36]	; (800506c <RCC_PLLCmd+0x38>)
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <RCC_PLLCmd+0x38>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
  }
}
 8005050:	e005      	b.n	800505e <RCC_PLLCmd+0x2a>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005052:	4a06      	ldr	r2, [pc, #24]	; (800506c <RCC_PLLCmd+0x38>)
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <RCC_PLLCmd+0x38>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800505c:	6013      	str	r3, [r2, #0]
  }
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800

08005070 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <RCC_SYSCLKConfig+0x34>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005092:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <RCC_SYSCLKConfig+0x34>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6093      	str	r3, [r2, #8]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40023800 	.word	0x40023800

080050a8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <RCC_HCLKConfig+0x34>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80050ca:	4a04      	ldr	r2, [pc, #16]	; (80050dc <RCC_HCLKConfig+0x34>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6093      	str	r3, [r2, #8]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40023800 	.word	0x40023800

080050e0 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <RCC_PCLK1Config+0x34>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005102:	4a04      	ldr	r2, [pc, #16]	; (8005114 <RCC_PCLK1Config+0x34>)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6093      	str	r3, [r2, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40023800 	.word	0x40023800

08005118 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <RCC_PCLK2Config+0x38>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005130:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <RCC_PCLK2Config+0x38>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6093      	str	r3, [r2, #8]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	2302      	movs	r3, #2
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	2302      	movs	r3, #2
 8005172:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005174:	4b47      	ldr	r3, [pc, #284]	; (8005294 <RCC_GetClocksFreq+0x140>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 030c 	and.w	r3, r3, #12
 800517c:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d007      	beq.n	8005194 <RCC_GetClocksFreq+0x40>
 8005184:	2b08      	cmp	r3, #8
 8005186:	d009      	beq.n	800519c <RCC_GetClocksFreq+0x48>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d13f      	bne.n	800520c <RCC_GetClocksFreq+0xb8>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a42      	ldr	r2, [pc, #264]	; (8005298 <RCC_GetClocksFreq+0x144>)
 8005190:	601a      	str	r2, [r3, #0]
    break;
 8005192:	e03f      	b.n	8005214 <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a41      	ldr	r2, [pc, #260]	; (800529c <RCC_GetClocksFreq+0x148>)
 8005198:	601a      	str	r2, [r3, #0]
    break;
 800519a:	e03b      	b.n	8005214 <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_PLL:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800519c:	4b3d      	ldr	r3, [pc, #244]	; (8005294 <RCC_GetClocksFreq+0x140>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a4:	0d9b      	lsrs	r3, r3, #22
 80051a6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a8:	4b3a      	ldr	r3, [pc, #232]	; (8005294 <RCC_GetClocksFreq+0x140>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80051b8:	4a38      	ldr	r2, [pc, #224]	; (800529c <RCC_GetClocksFreq+0x148>)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	4b34      	ldr	r3, [pc, #208]	; (8005294 <RCC_GetClocksFreq+0x140>)
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051c8:	400b      	ands	r3, r1
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	fb03 f302 	mul.w	r3, r3, r2
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e00c      	b.n	80051ee <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80051d4:	4a30      	ldr	r2, [pc, #192]	; (8005298 <RCC_GetClocksFreq+0x144>)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <RCC_GetClocksFreq+0x140>)
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051e4:	400b      	ands	r3, r1
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	fb03 f302 	mul.w	r3, r3, r2
 80051ec:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80051ee:	4b29      	ldr	r3, [pc, #164]	; (8005294 <RCC_GetClocksFreq+0x140>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	3301      	adds	r3, #1
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	fbb2 f2f3 	udiv	r2, r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
    break;
 800520a:	e003      	b.n	8005214 <RCC_GetClocksFreq+0xc0>
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a22      	ldr	r2, [pc, #136]	; (8005298 <RCC_GetClocksFreq+0x144>)
 8005210:	601a      	str	r2, [r3, #0]
    break;
 8005212:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <RCC_GetClocksFreq+0x140>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005224:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <RCC_GetClocksFreq+0x14c>)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	4413      	add	r3, r2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	40da      	lsrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800523a:	4b16      	ldr	r3, [pc, #88]	; (8005294 <RCC_GetClocksFreq+0x140>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005242:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	0a9b      	lsrs	r3, r3, #10
 8005248:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <RCC_GetClocksFreq+0x14c>)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	4413      	add	r3, r2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	40da      	lsrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005260:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <RCC_GetClocksFreq+0x140>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005268:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	0b5b      	lsrs	r3, r3, #13
 800526e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <RCC_GetClocksFreq+0x14c>)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	40da      	lsrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60da      	str	r2, [r3, #12]
}
 8005286:	bf00      	nop
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
 8005298:	00f42400 	.word	0x00f42400
 800529c:	007a1200 	.word	0x007a1200
 80052a0:	080119a8 	.word	0x080119a8

080052a4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d006      	beq.n	80052c4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80052b6:	490a      	ldr	r1, [pc, #40]	; (80052e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80052ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80052c2:	e006      	b.n	80052d2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80052c4:	4906      	ldr	r1, [pc, #24]	; (80052e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80052c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	4013      	ands	r3, r2
 80052d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800

080052e4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80052f6:	490a      	ldr	r1, [pc, #40]	; (8005320 <RCC_APB1PeriphClockCmd+0x3c>)
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <RCC_APB1PeriphClockCmd+0x3c>)
 80052fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4313      	orrs	r3, r2
 8005300:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8005302:	e006      	b.n	8005312 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005304:	4906      	ldr	r1, [pc, #24]	; (8005320 <RCC_APB1PeriphClockCmd+0x3c>)
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <RCC_APB1PeriphClockCmd+0x3c>)
 8005308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	43db      	mvns	r3, r3
 800530e:	4013      	ands	r3, r2
 8005310:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800

08005324 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d006      	beq.n	8005344 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005336:	490a      	ldr	r1, [pc, #40]	; (8005360 <RCC_APB2PeriphClockCmd+0x3c>)
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <RCC_APB2PeriphClockCmd+0x3c>)
 800533a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4313      	orrs	r3, r2
 8005340:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8005342:	e006      	b.n	8005352 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005344:	4906      	ldr	r1, [pc, #24]	; (8005360 <RCC_APB2PeriphClockCmd+0x3c>)
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <RCC_APB2PeriphClockCmd+0x3c>)
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	43db      	mvns	r3, r3
 800534e:	4013      	ands	r3, r2
 8005350:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800

08005364 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	b2db      	uxtb	r3, r3
 8005380:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d103      	bne.n	8005390 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <RCC_GetFlagStatus+0x70>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e009      	b.n	80053a4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d103      	bne.n	800539e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <RCC_GetFlagStatus+0x70>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e002      	b.n	80053a4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <RCC_GetFlagStatus+0x70>)
 80053a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	74fb      	strb	r3, [r7, #19]
 80053c0:	e001      	b.n	80053c6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80053c2:	2300      	movs	r3, #0
 80053c4:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40023800 	.word	0x40023800

080053d8 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	605a      	str	r2, [r3, #4]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053f2:	609a      	str	r2, [r3, #8]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	60da      	str	r2, [r3, #12]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	611a      	str	r2, [r3, #16]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	615a      	str	r2, [r3, #20]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	619a      	str	r2, [r3, #24]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	61da      	str	r2, [r3, #28]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2207      	movs	r2, #7
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800543e:	60fb      	str	r3, [r7, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 800544e:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 800545a:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005460:	4313      	orrs	r3, r2
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	601a      	str	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	60fb      	str	r3, [r7, #12]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint32_t)~SPI_CR2_DS;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800547a:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint32_t)(SPI_InitStruct->SPI_DataSize);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint32_t)~((uint32_t)SPI_I2SCFGR_I2SMOD);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	61da      	str	r2, [r3, #28]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <SPI_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
  }
}
 80054ea:	e005      	b.n	80054f8 <SPI_Cmd+0x2c>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]
  }
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d006      	beq.n	8005524 <SPI_SSOutputCmd+0x20>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f043 0204 	orr.w	r2, r3, #4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
  }
}
 8005522:	e005      	b.n	8005530 <SPI_SSOutputCmd+0x2c>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f023 0204 	bic.w	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
  }
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <TIM_TimeBaseInit+0xb8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <TIM_TimeBaseInit+0x44>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a27      	ldr	r2, [pc, #156]	; (80055f8 <TIM_TimeBaseInit+0xbc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00f      	beq.n	8005580 <TIM_TimeBaseInit+0x44>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d00b      	beq.n	8005580 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a24      	ldr	r2, [pc, #144]	; (80055fc <TIM_TimeBaseInit+0xc0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d007      	beq.n	8005580 <TIM_TimeBaseInit+0x44>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a23      	ldr	r2, [pc, #140]	; (8005600 <TIM_TimeBaseInit+0xc4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a22      	ldr	r2, [pc, #136]	; (8005604 <TIM_TimeBaseInit+0xc8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d108      	bne.n	8005592 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint32_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <TIM_TimeBaseInit+0xcc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00c      	beq.n	80055b4 <TIM_TimeBaseInit+0x78>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <TIM_TimeBaseInit+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d008      	beq.n	80055b4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint32_t)(~TIM_CR1_CKD);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <TIM_TimeBaseInit+0xb8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_TimeBaseInit+0x9e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <TIM_TimeBaseInit+0xbc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d103      	bne.n	80055e2 <TIM_TimeBaseInit+0xa6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	615a      	str	r2, [r3, #20]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40001000 	.word	0x40001000
 800560c:	40001400 	.word	0x40001400

08005610 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <TIM_Cmd+0x20>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f043 0201 	orr.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
  }
}
 800567e:	e005      	b.n	800568c <TIM_Cmd+0x2c>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 0201 	bic.w	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]
  }
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f023 0201 	bic.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4b2c      	ldr	r3, [pc, #176]	; (8005780 <TIM_OC1Init+0xe8>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0302 	bic.w	r3, r3, #2
 80056ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <TIM_OC1Init+0xec>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC1Init+0x7a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <TIM_OC1Init+0xf0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d123      	bne.n	800575a <TIM_OC1Init+0xc2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 0308 	bic.w	r3, r3, #8
 8005718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	621a      	str	r2, [r3, #32]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	fffeff8f 	.word	0xfffeff8f
 8005784:	40010000 	.word	0x40010000
 8005788:	40010400 	.word	0x40010400

0800578c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f023 0210 	bic.w	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4b30      	ldr	r3, [pc, #192]	; (8005884 <TIM_OC2Init+0xf8>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ce:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0320 	bic.w	r3, r3, #32
 80057e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a22      	ldr	r2, [pc, #136]	; (8005888 <TIM_OC2Init+0xfc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC2Init+0x80>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a21      	ldr	r2, [pc, #132]	; (800588c <TIM_OC2Init+0x100>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d127      	bne.n	800585c <TIM_OC2Init+0xd0>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005826:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	feff8fff 	.word	0xfeff8fff
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <TIM_OC3Init+0xf4>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_OC3Init+0xf8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_OC3Init+0x7e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a20      	ldr	r2, [pc, #128]	; (800598c <TIM_OC3Init+0xfc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d127      	bne.n	800595e <TIM_OC3Init+0xce>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005928:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	621a      	str	r2, [r3, #32]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	fffeff8f 	.word	0xfffeff8f
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400

08005990 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <TIM_OC4Init+0xbc>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d2:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	031b      	lsls	r3, r3, #12
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <TIM_OC4Init+0xc0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC4Init+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a12      	ldr	r2, [pc, #72]	; (8005a54 <TIM_OC4Init+0xc4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d109      	bne.n	8005a24 <TIM_OC4Init+0x94>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	feff8fff 	.word	0xfeff8fff
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40010400 	.word	0x40010400

08005a58 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	605a      	str	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	60da      	str	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	611a      	str	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	615a      	str	r2, [r3, #20]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	619a      	str	r2, [r3, #24]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	61da      	str	r2, [r3, #28]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0308 	bic.w	r3, r3, #8
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	619a      	str	r2, [r3, #24]
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop

08005b44 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint32_t)(TIM_OCPreload << 8);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	619a      	str	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0308 	bic.w	r3, r3, #8
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	61da      	str	r2, [r3, #28]
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop

08005bb4 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint32_t)(TIM_OCPreload << 8);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	61da      	str	r2, [r3, #28]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d006      	beq.n	8005c0c <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
  }  
}
 8005c0a:	e005      	b.n	8005c18 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
  }  
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint32_t TIM_IT, FunctionalState NewState)
{  
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <TIM_ITConfig+0x22>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint32_t)~TIM_IT;
  }
}
 8005c44:	e006      	b.n	8005c54 <TIM_ITConfig+0x30>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint32_t)~TIM_IT;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	60da      	str	r2, [r3, #12]
  }
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint32_t TIM_IT)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint32_t)~TIM_IT;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	43da      	mvns	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	611a      	str	r2, [r3, #16]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop

08005c80 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint32_t TIM_EncoderMode,
                                uint32_t TIM_IC1Polarity, uint32_t TIM_IC2Polarity)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
  uint32_t tmpccmr1 = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
  uint32_t tmpccer = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	61fb      	str	r3, [r7, #28]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	61bb      	str	r3, [r7, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Set the encoder Mode */
  tmpsmcr &= (uint32_t)~TIM_SMCR_SMS;
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <TIM_EncoderInterfaceConfig+0x84>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61fb      	str	r3, [r7, #28]
  tmpsmcr |= TIM_EncoderMode;
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61fb      	str	r3, [r7, #28]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_CC2S);
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <TIM_EncoderInterfaceConfig+0x88>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	f240 1301 	movw	r3, #257	; 0x101
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint32_t)~TIM_CCER_CC1P) & ((uint32_t)~TIM_CCER_CC2P);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (uint32_t)(TIM_IC1Polarity | (uint32_t)(TIM_IC2Polarity << (uint32_t)4));
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	011a      	lsls	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	3724      	adds	r7, #36	; 0x24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	fffefff8 	.word	0xfffefff8
 8005d08:	fffffcfc 	.word	0xfffffcfc

08005d0c <USART_GetClockSource>:
  *                USART_CLOCKSOURCE_SYSCLK:    USARTx use SYSCLK clock source 
  *                USART_CLOCKSOURCE_LSE:       USARTx use LSE clock source
  *                USART_CLOCKSOURCE_UNDEFINED: Undefined clock source
  */
USART_ClockSourceTypeDef USART_GetClockSource(USART_TypeDef* USARTx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 8005d14:	2310      	movs	r3, #16
 8005d16:	73fb      	strb	r3, [r7, #15]
    
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4ac3      	ldr	r2, [pc, #780]	; (8006028 <USART_GetClockSource+0x31c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d145      	bne.n	8005dac <USART_GetClockSource+0xa0>
  {
    if( IS_USART1_CLKSOURCE_PCLK2() )
 8005d20:	4bc2      	ldr	r3, [pc, #776]	; (800602c <USART_GetClockSource+0x320>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <USART_GetClockSource+0x36>
 8005d2e:	4bbf      	ldr	r3, [pc, #764]	; (800602c <USART_GetClockSource+0x320>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <USART_GetClockSource+0x36>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e244      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_SYSCLK() )
 8005d42:	4bba      	ldr	r3, [pc, #744]	; (800602c <USART_GetClockSource+0x320>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <USART_GetClockSource+0x58>
 8005d50:	4bb6      	ldr	r3, [pc, #728]	; (800602c <USART_GetClockSource+0x320>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <USART_GetClockSource+0x58>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005d5e:	2304      	movs	r3, #4
 8005d60:	73fb      	strb	r3, [r7, #15]
 8005d62:	e233      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_HSI() )
 8005d64:	4bb1      	ldr	r3, [pc, #708]	; (800602c <USART_GetClockSource+0x320>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <USART_GetClockSource+0x7a>
 8005d72:	4bae      	ldr	r3, [pc, #696]	; (800602c <USART_GetClockSource+0x320>)
 8005d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <USART_GetClockSource+0x7a>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005d80:	2302      	movs	r3, #2
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	e222      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_LSE() )
 8005d86:	4ba9      	ldr	r3, [pc, #676]	; (800602c <USART_GetClockSource+0x320>)
 8005d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 821b 	beq.w	80061cc <USART_GetClockSource+0x4c0>
 8005d96:	4ba5      	ldr	r3, [pc, #660]	; (800602c <USART_GetClockSource+0x320>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8213 	beq.w	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005da6:	2308      	movs	r3, #8
 8005da8:	73fb      	strb	r3, [r7, #15]
 8005daa:	e20f      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART2)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4aa0      	ldr	r2, [pc, #640]	; (8006030 <USART_GetClockSource+0x324>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d145      	bne.n	8005e40 <USART_GetClockSource+0x134>
  {
    if( IS_USART2_CLKSOURCE_PCLK1() )
 8005db4:	4b9d      	ldr	r3, [pc, #628]	; (800602c <USART_GetClockSource+0x320>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <USART_GetClockSource+0xca>
 8005dc2:	4b9a      	ldr	r3, [pc, #616]	; (800602c <USART_GetClockSource+0x320>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d102      	bne.n	8005dd6 <USART_GetClockSource+0xca>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
 8005dd4:	e1fa      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_SYSCLK() )
 8005dd6:	4b95      	ldr	r3, [pc, #596]	; (800602c <USART_GetClockSource+0x320>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <USART_GetClockSource+0xec>
 8005de4:	4b91      	ldr	r3, [pc, #580]	; (800602c <USART_GetClockSource+0x320>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <USART_GetClockSource+0xec>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005df2:	2304      	movs	r3, #4
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	e1e9      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_HSI() )
 8005df8:	4b8c      	ldr	r3, [pc, #560]	; (800602c <USART_GetClockSource+0x320>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <USART_GetClockSource+0x10e>
 8005e06:	4b89      	ldr	r3, [pc, #548]	; (800602c <USART_GetClockSource+0x320>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <USART_GetClockSource+0x10e>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005e14:	2302      	movs	r3, #2
 8005e16:	73fb      	strb	r3, [r7, #15]
 8005e18:	e1d8      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_LSE() )
 8005e1a:	4b84      	ldr	r3, [pc, #528]	; (800602c <USART_GetClockSource+0x320>)
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 81d1 	beq.w	80061cc <USART_GetClockSource+0x4c0>
 8005e2a:	4b80      	ldr	r3, [pc, #512]	; (800602c <USART_GetClockSource+0x320>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 81c9 	beq.w	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	73fb      	strb	r3, [r7, #15]
 8005e3e:	e1c5      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART3)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a7c      	ldr	r2, [pc, #496]	; (8006034 <USART_GetClockSource+0x328>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d145      	bne.n	8005ed4 <USART_GetClockSource+0x1c8>
  {
    if( IS_USART3_CLKSOURCE_PCLK1() )
 8005e48:	4b78      	ldr	r3, [pc, #480]	; (800602c <USART_GetClockSource+0x320>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <USART_GetClockSource+0x15e>
 8005e56:	4b75      	ldr	r3, [pc, #468]	; (800602c <USART_GetClockSource+0x320>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <USART_GetClockSource+0x15e>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	e1b0      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_SYSCLK() )
 8005e6a:	4b70      	ldr	r3, [pc, #448]	; (800602c <USART_GetClockSource+0x320>)
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <USART_GetClockSource+0x180>
 8005e78:	4b6c      	ldr	r3, [pc, #432]	; (800602c <USART_GetClockSource+0x320>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <USART_GetClockSource+0x180>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005e86:	2304      	movs	r3, #4
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	e19f      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_HSI() )
 8005e8c:	4b67      	ldr	r3, [pc, #412]	; (800602c <USART_GetClockSource+0x320>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <USART_GetClockSource+0x1a2>
 8005e9a:	4b64      	ldr	r3, [pc, #400]	; (800602c <USART_GetClockSource+0x320>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <USART_GetClockSource+0x1a2>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	73fb      	strb	r3, [r7, #15]
 8005eac:	e18e      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_LSE() )
 8005eae:	4b5f      	ldr	r3, [pc, #380]	; (800602c <USART_GetClockSource+0x320>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8187 	beq.w	80061cc <USART_GetClockSource+0x4c0>
 8005ebe:	4b5b      	ldr	r3, [pc, #364]	; (800602c <USART_GetClockSource+0x320>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 817f 	beq.w	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	e17b      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART4)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a58      	ldr	r2, [pc, #352]	; (8006038 <USART_GetClockSource+0x32c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d145      	bne.n	8005f68 <USART_GetClockSource+0x25c>
  {
    if( IS_UART4_CLKSOURCE_PCLK1() )
 8005edc:	4b53      	ldr	r3, [pc, #332]	; (800602c <USART_GetClockSource+0x320>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <USART_GetClockSource+0x1f2>
 8005eea:	4b50      	ldr	r3, [pc, #320]	; (800602c <USART_GetClockSource+0x320>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <USART_GetClockSource+0x1f2>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e166      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_SYSCLK() )
 8005efe:	4b4b      	ldr	r3, [pc, #300]	; (800602c <USART_GetClockSource+0x320>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <USART_GetClockSource+0x214>
 8005f0c:	4b47      	ldr	r3, [pc, #284]	; (800602c <USART_GetClockSource+0x320>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <USART_GetClockSource+0x214>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	73fb      	strb	r3, [r7, #15]
 8005f1e:	e155      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_HSI() )
 8005f20:	4b42      	ldr	r3, [pc, #264]	; (800602c <USART_GetClockSource+0x320>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <USART_GetClockSource+0x236>
 8005f2e:	4b3f      	ldr	r3, [pc, #252]	; (800602c <USART_GetClockSource+0x320>)
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <USART_GetClockSource+0x236>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	73fb      	strb	r3, [r7, #15]
 8005f40:	e144      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_LSE() )
 8005f42:	4b3a      	ldr	r3, [pc, #232]	; (800602c <USART_GetClockSource+0x320>)
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 813d 	beq.w	80061cc <USART_GetClockSource+0x4c0>
 8005f52:	4b36      	ldr	r3, [pc, #216]	; (800602c <USART_GetClockSource+0x320>)
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8135 	beq.w	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005f62:	2308      	movs	r3, #8
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e131      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART5)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a34      	ldr	r2, [pc, #208]	; (800603c <USART_GetClockSource+0x330>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d145      	bne.n	8005ffc <USART_GetClockSource+0x2f0>
  {
    if( IS_UART5_CLKSOURCE_PCLK1() )
 8005f70:	4b2e      	ldr	r3, [pc, #184]	; (800602c <USART_GetClockSource+0x320>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <USART_GetClockSource+0x286>
 8005f7e:	4b2b      	ldr	r3, [pc, #172]	; (800602c <USART_GetClockSource+0x320>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <USART_GetClockSource+0x286>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	e11c      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_SYSCLK() )
 8005f92:	4b26      	ldr	r3, [pc, #152]	; (800602c <USART_GetClockSource+0x320>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <USART_GetClockSource+0x2a8>
 8005fa0:	4b22      	ldr	r3, [pc, #136]	; (800602c <USART_GetClockSource+0x320>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <USART_GetClockSource+0x2a8>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005fae:	2304      	movs	r3, #4
 8005fb0:	73fb      	strb	r3, [r7, #15]
 8005fb2:	e10b      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_HSI() )
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	; (800602c <USART_GetClockSource+0x320>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <USART_GetClockSource+0x2ca>
 8005fc2:	4b1a      	ldr	r3, [pc, #104]	; (800602c <USART_GetClockSource+0x320>)
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <USART_GetClockSource+0x2ca>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	73fb      	strb	r3, [r7, #15]
 8005fd4:	e0fa      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_LSE() )
 8005fd6:	4b15      	ldr	r3, [pc, #84]	; (800602c <USART_GetClockSource+0x320>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80f3 	beq.w	80061cc <USART_GetClockSource+0x4c0>
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <USART_GetClockSource+0x320>)
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80eb 	beq.w	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	73fb      	strb	r3, [r7, #15]
 8005ffa:	e0e7      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART6)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <USART_GetClockSource+0x334>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d154      	bne.n	80060ae <USART_GetClockSource+0x3a2>
  {
    if( IS_USART6_CLKSOURCE_PCLK2() )
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <USART_GetClockSource+0x320>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600e:	2b00      	cmp	r3, #0
 8006010:	d118      	bne.n	8006044 <USART_GetClockSource+0x338>
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <USART_GetClockSource+0x320>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800601c:	2b00      	cmp	r3, #0
 800601e:	d111      	bne.n	8006044 <USART_GetClockSource+0x338>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	e0d2      	b.n	80061cc <USART_GetClockSource+0x4c0>
 8006026:	bf00      	nop
 8006028:	40011000 	.word	0x40011000
 800602c:	40023800 	.word	0x40023800
 8006030:	40004400 	.word	0x40004400
 8006034:	40004800 	.word	0x40004800
 8006038:	40004c00 	.word	0x40004c00
 800603c:	40005000 	.word	0x40005000
 8006040:	40011400 	.word	0x40011400
    }
    else if( IS_USART6_CLKSOURCE_SYSCLK() )
 8006044:	4b65      	ldr	r3, [pc, #404]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <USART_GetClockSource+0x35a>
 8006052:	4b62      	ldr	r3, [pc, #392]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <USART_GetClockSource+0x35a>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8006060:	2304      	movs	r3, #4
 8006062:	73fb      	strb	r3, [r7, #15]
 8006064:	e0b2      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_HSI() )
 8006066:	4b5d      	ldr	r3, [pc, #372]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <USART_GetClockSource+0x37c>
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <USART_GetClockSource+0x37c>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8006082:	2302      	movs	r3, #2
 8006084:	73fb      	strb	r3, [r7, #15]
 8006086:	e0a1      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_LSE() )
 8006088:	4b54      	ldr	r3, [pc, #336]	; (80061dc <USART_GetClockSource+0x4d0>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 809a 	beq.w	80061cc <USART_GetClockSource+0x4c0>
 8006098:	4b50      	ldr	r3, [pc, #320]	; (80061dc <USART_GetClockSource+0x4d0>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8092 	beq.w	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80060a8:	2308      	movs	r3, #8
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e08e      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART7)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a4b      	ldr	r2, [pc, #300]	; (80061e0 <USART_GetClockSource+0x4d4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d143      	bne.n	800613e <USART_GetClockSource+0x432>
  {
    if( IS_UART7_CLKSOURCE_PCLK1() )
 80060b6:	4b49      	ldr	r3, [pc, #292]	; (80061dc <USART_GetClockSource+0x4d0>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <USART_GetClockSource+0x3cc>
 80060c4:	4b45      	ldr	r3, [pc, #276]	; (80061dc <USART_GetClockSource+0x4d0>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <USART_GetClockSource+0x3cc>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e079      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_SYSCLK() )
 80060d8:	4b40      	ldr	r3, [pc, #256]	; (80061dc <USART_GetClockSource+0x4d0>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <USART_GetClockSource+0x3ee>
 80060e6:	4b3d      	ldr	r3, [pc, #244]	; (80061dc <USART_GetClockSource+0x4d0>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <USART_GetClockSource+0x3ee>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80060f4:	2304      	movs	r3, #4
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e068      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_HSI() )
 80060fa:	4b38      	ldr	r3, [pc, #224]	; (80061dc <USART_GetClockSource+0x4d0>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <USART_GetClockSource+0x410>
 8006108:	4b34      	ldr	r3, [pc, #208]	; (80061dc <USART_GetClockSource+0x4d0>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <USART_GetClockSource+0x410>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8006116:	2302      	movs	r3, #2
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	e057      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_LSE() )
 800611c:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <USART_GetClockSource+0x4d0>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d050      	beq.n	80061cc <USART_GetClockSource+0x4c0>
 800612a:	4b2c      	ldr	r3, [pc, #176]	; (80061dc <USART_GetClockSource+0x4d0>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d049      	beq.n	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8006138:	2308      	movs	r3, #8
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e046      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a28      	ldr	r2, [pc, #160]	; (80061e4 <USART_GetClockSource+0x4d8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d142      	bne.n	80061cc <USART_GetClockSource+0x4c0>
  {
    if( IS_UART8_CLKSOURCE_PCLK1() )
 8006146:	4b25      	ldr	r3, [pc, #148]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <USART_GetClockSource+0x45c>
 8006154:	4b21      	ldr	r3, [pc, #132]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <USART_GetClockSource+0x45c>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
 8006166:	e031      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_SYSCLK() )
 8006168:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <USART_GetClockSource+0x4d0>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <USART_GetClockSource+0x47e>
 8006176:	4b19      	ldr	r3, [pc, #100]	; (80061dc <USART_GetClockSource+0x4d0>)
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <USART_GetClockSource+0x47e>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8006184:	2304      	movs	r3, #4
 8006186:	73fb      	strb	r3, [r7, #15]
 8006188:	e020      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_HSI() )
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <USART_GetClockSource+0x4d0>)
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USART_GetClockSource+0x4a0>
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <USART_GetClockSource+0x4d0>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <USART_GetClockSource+0x4a0>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 80061a6:	2302      	movs	r3, #2
 80061a8:	73fb      	strb	r3, [r7, #15]
 80061aa:	e00f      	b.n	80061cc <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_LSE() )
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <USART_GetClockSource+0x4d0>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <USART_GetClockSource+0x4c0>
 80061ba:	4b08      	ldr	r3, [pc, #32]	; (80061dc <USART_GetClockSource+0x4d0>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80061c8:	2308      	movs	r3, #8
 80061ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return clocksource;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40007800 	.word	0x40007800
 80061e4:	40007c00 	.word	0x40007c00

080061e8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 80061fe:	2310      	movs	r3, #16
 8006200:	76fb      	strb	r3, [r7, #27]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800621a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	4313      	orrs	r3, r2
 8006224:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	4b47      	ldr	r3, [pc, #284]	; (8006354 <USART_Init+0x16c>)
 8006236:	4013      	ands	r3, r2
 8006238:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006248:	4313      	orrs	r3, r2
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	4313      	orrs	r3, r2
 800624e:	61fb      	str	r3, [r7, #28]
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006262:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	4313      	orrs	r3, r2
 800626c:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe ff6b 	bl	8005154 <RCC_GetClocksFreq>
  clocksource = USART_GetClockSource(USARTx);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fd44 	bl	8005d0c <USART_GetClockSource>
 8006284:	4603      	mov	r3, r0
 8006286:	76fb      	strb	r3, [r7, #27]
  
  if( clocksource == USART_CLOCKSOURCE_PCLK1 )
 8006288:	7efb      	ldrb	r3, [r7, #27]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <USART_Init+0xac>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	e014      	b.n	80062be <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_PCLK2 )
 8006294:	7efb      	ldrb	r3, [r7, #27]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d102      	bne.n	80062a0 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	e00e      	b.n	80062be <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_SYSCLK )
 80062a0:	7efb      	ldrb	r3, [r7, #27]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d102      	bne.n	80062ac <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.SYSCLK_Frequency;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e008      	b.n	80062be <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_HSI )
 80062ac:	7efb      	ldrb	r3, [r7, #27]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d102      	bne.n	80062b8 <USART_Init+0xd0>
  {
    apbclock = HSI_VALUE;
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <USART_Init+0x170>)
 80062b4:	623b      	str	r3, [r7, #32]
 80062b6:	e002      	b.n	80062be <USART_Init+0xd6>
  }
  else
  {
    apbclock = LSE_VALUE;
 80062b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062bc:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	005a      	lsls	r2, r3, #1
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062e4:	fb02 f201 	mul.w	r2, r2, r1
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e00e      	b.n	800630c <USART_Init+0x124>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a3a      	ldr	r2, [r7, #32]
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	fbb3 f1f2 	udiv	r1, r3, r2
 8006304:	fb02 f201 	mul.w	r2, r2, r1
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	61fb      	str	r3, [r7, #28]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	085a      	lsrs	r2, r3, #1
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	429a      	cmp	r2, r3
 8006316:	d802      	bhi.n	800631e <USART_Init+0x136>
  {
    divider++;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	3301      	adds	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <USART_Init+0x15a>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	61fb      	str	r3, [r7, #28]
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8006334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006336:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800633a:	4013      	ands	r3, r2
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	4313      	orrs	r3, r2
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60da      	str	r2, [r3, #12]
}
 800634a:	bf00      	nop
 800634c:	3728      	adds	r7, #40	; 0x28
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	efffe9f3 	.word	0xefffe9f3
 8006358:	00f42400 	.word	0x00f42400

0800635c <USART_ClockInit>:
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006376:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8006386:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4313      	orrs	r3, r2
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	605a      	str	r2, [r3, #4]
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	60da      	str	r2, [r3, #12]
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d006      	beq.n	80063f4 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f043 0201 	orr.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80063f2:	e005      	b.n	8006400 <USART_Cmd+0x2c>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f023 0201 	bic.w	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
  }
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)USART_TDR_TDR);
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop

08006430 <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)USART_RDR_RDR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	b29b      	uxth	r3, r3
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	b29b      	uxth	r3, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8006450:	b480      	push	{r7}
 8006452:	b089      	sub	sp, #36	; 0x24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	2300      	movs	r3, #0
 8006468:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	121b      	asrs	r3, r3, #8
 8006476:	b2db      	uxtb	r3, r3
 8006478:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8006480:	2201      	movs	r2, #1
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d103      	bne.n	8006498 <USART_ITConfig+0x48>
  {
    usartxbase += 0x04;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3304      	adds	r3, #4
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e005      	b.n	80064a4 <USART_ITConfig+0x54>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d102      	bne.n	80064a4 <USART_ITConfig+0x54>
  {
    usartxbase += 0x08;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3308      	adds	r3, #8
 80064a2:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <USART_ITConfig+0x68>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	6811      	ldr	r1, [r2, #0]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80064b6:	e006      	b.n	80064c6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	6811      	ldr	r1, [r2, #0]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	43d2      	mvns	r2, r2
 80064c2:	400a      	ands	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
  }
}
 80064c6:	bf00      	nop
 80064c8:	3724      	adds	r7, #36	; 0x24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop

080064d4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80064ee:	2301      	movs	r3, #1
 80064f0:	73fb      	strb	r3, [r7, #15]
 80064f2:	e001      	b.n	80064f8 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop

08006508 <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800651e:	2300      	movs	r3, #0
 8006520:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	121b      	asrs	r3, r3, #8
 8006526:	b2db      	uxtb	r3, r3
 8006528:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8006530:	2201      	movs	r2, #1
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d105      	bne.n	800654c <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4013      	ands	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e00d      	b.n	8006568 <USART_GetITStatus+0x60>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d105      	bne.n	800655e <USART_GetITStatus+0x56>
  {
    itmask &= USARTx->CR2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4013      	ands	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e004      	b.n	8006568 <USART_GetITStatus+0x60>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4013      	ands	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800656e:	2201      	movs	r2, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4013      	ands	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <USART_GetITStatus+0x8c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <USART_GetITStatus+0x8c>
  {
    bitstatus = SET;
 800658e:	2301      	movs	r3, #1
 8006590:	74fb      	strb	r3, [r7, #19]
 8006592:	e001      	b.n	8006598 <USART_GetITStatus+0x90>
  }
  else
  {
    bitstatus = RESET;
 8006594:	2300      	movs	r3, #0
 8006596:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8006598:	7cfb      	ldrb	r3, [r7, #19]
}
 800659a:	4618      	mov	r0, r3
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <USART_ClearITPendingBit>:
  *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
  *           USART_RQR (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	2300      	movs	r3, #0
 80065b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80065c0:	2201      	movs	r2, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	621a      	str	r2, [r3, #32]
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f103 0208 	add.w	r2, r3, #8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295
 80065f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f103 0208 	add.w	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f103 0208 	add.w	r2, r3, #8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop

08006638 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d103      	bne.n	80066a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e00c      	b.n	80066ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3308      	adds	r3, #8
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	e002      	b.n	80066ae <vListInsert+0x2e>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d9f6      	bls.n	80066a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6892      	ldr	r2, [r2, #8]
 800670a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d103      	bne.n	8006728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3b04      	subs	r3, #4
 8006758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3b04      	subs	r3, #4
 8006766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f023 0201 	bic.w	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b04      	subs	r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006778:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <pxPortInitialiseStack+0x64>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3b14      	subs	r3, #20
 8006782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3b04      	subs	r3, #4
 800678e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f06f 0202 	mvn.w	r2, #2
 8006796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3b20      	subs	r3, #32
 800679c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	080067b1 	.word	0x080067b1

080067b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067b6:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <prvTaskExitError+0x34>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d004      	beq.n	80067ca <prvTaskExitError+0x1a>
 80067c0:	4909      	ldr	r1, [pc, #36]	; (80067e8 <prvTaskExitError+0x38>)
 80067c2:	f240 1005 	movw	r0, #261	; 0x105
 80067c6:	f7fb f91b 	bl	8001a00 <vAssertCalled>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80067ce:	b672      	cpsid	i
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	b662      	cpsie	i
 80067de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80067e0:	e7fe      	b.n	80067e0 <prvTaskExitError+0x30>
 80067e2:	bf00      	nop
 80067e4:	20010010 	.word	0x20010010
 80067e8:	08011428 	.word	0x08011428
 80067ec:	00000000 	.word	0x00000000

080067f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	20014308 	.word	0x20014308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006818:	4806      	ldr	r0, [pc, #24]	; (8006834 <prvPortStartFirstTask+0x1c>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	b662      	cpsie	i
 8006824:	b661      	cpsie	f
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	df00      	svc	0
 8006830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006832:	bf00      	nop
 8006834:	e000ed08 	.word	0xe000ed08

08006838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800683e:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <xPortStartScheduler+0xb8>)
 8006840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	22ff      	movs	r2, #255	; 0xff
 800684e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <xPortStartScheduler+0xbc>)
 8006864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006866:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <xPortStartScheduler+0xc0>)
 8006868:	2207      	movs	r2, #7
 800686a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800686c:	e009      	b.n	8006882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800686e:	4b22      	ldr	r3, [pc, #136]	; (80068f8 <xPortStartScheduler+0xc0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3b01      	subs	r3, #1
 8006874:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <xPortStartScheduler+0xc0>)
 8006876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	b25b      	sxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	dbf0      	blt.n	800686e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <xPortStartScheduler+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <xPortStartScheduler+0xc0>)
 8006894:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006896:	4b18      	ldr	r3, [pc, #96]	; (80068f8 <xPortStartScheduler+0xc0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800689e:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <xPortStartScheduler+0xc0>)
 80068a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068aa:	4a14      	ldr	r2, [pc, #80]	; (80068fc <xPortStartScheduler+0xc4>)
 80068ac:	4b13      	ldr	r3, [pc, #76]	; (80068fc <xPortStartScheduler+0xc4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068b6:	4a11      	ldr	r2, [pc, #68]	; (80068fc <xPortStartScheduler+0xc4>)
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <xPortStartScheduler+0xc4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068c2:	f000 f8cb 	bl	8006a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068c6:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <xPortStartScheduler+0xc8>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068cc:	f000 f8e2 	bl	8006a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068d0:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <xPortStartScheduler+0xcc>)
 80068d2:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <xPortStartScheduler+0xcc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068dc:	f7ff ff9c 	bl	8006818 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80068e0:	f7ff ff66 	bl	80067b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	e000e400 	.word	0xe000e400
 80068f4:	200106e8 	.word	0x200106e8
 80068f8:	200106ec 	.word	0x200106ec
 80068fc:	e000ed20 	.word	0xe000ed20
 8006900:	20010010 	.word	0x20010010
 8006904:	e000ef34 	.word	0xe000ef34

08006908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006912:	b672      	cpsid	i
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	b662      	cpsie	i
 8006922:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <vPortEnterCritical+0x4c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <vPortEnterCritical+0x4c>)
 800692c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <vPortEnterCritical+0x4c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d109      	bne.n	800694a <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <vPortEnterCritical+0x50>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <vPortEnterCritical+0x42>
 8006940:	4906      	ldr	r1, [pc, #24]	; (800695c <vPortEnterCritical+0x54>)
 8006942:	f240 1097 	movw	r0, #407	; 0x197
 8006946:	f7fb f85b 	bl	8001a00 <vAssertCalled>
	}
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20010010 	.word	0x20010010
 8006958:	e000ed04 	.word	0xe000ed04
 800695c:	08011428 	.word	0x08011428

08006960 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <vPortExitCritical+0x3c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <vPortExitCritical+0x18>
 800696e:	490c      	ldr	r1, [pc, #48]	; (80069a0 <vPortExitCritical+0x40>)
 8006970:	f44f 70cf 	mov.w	r0, #414	; 0x19e
 8006974:	f7fb f844 	bl	8001a00 <vAssertCalled>
	uxCriticalNesting--;
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <vPortExitCritical+0x3c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3b01      	subs	r3, #1
 800697e:	4a07      	ldr	r2, [pc, #28]	; (800699c <vPortExitCritical+0x3c>)
 8006980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <vPortExitCritical+0x3c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d104      	bne.n	8006994 <vPortExitCritical+0x34>
 800698a:	2300      	movs	r3, #0
 800698c:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20010010 	.word	0x20010010
 80069a0:	08011428 	.word	0x08011428
	...

080069b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069b0:	f3ef 8009 	mrs	r0, PSP
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <pxCurrentTCBConst>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f01e 0f10 	tst.w	lr, #16
 80069c0:	bf08      	it	eq
 80069c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80069d0:	f04f 0040 	mov.w	r0, #64	; 0x40
 80069d4:	b672      	cpsid	i
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	b662      	cpsie	i
 80069e4:	f001 fd4c 	bl	8008480 <vTaskSwitchContext>
 80069e8:	f04f 0000 	mov.w	r0, #0
 80069ec:	f380 8811 	msr	BASEPRI, r0
 80069f0:	bc08      	pop	{r3}
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	6808      	ldr	r0, [r1, #0]
 80069f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	f01e 0f10 	tst.w	lr, #16
 80069fe:	bf08      	it	eq
 8006a00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a04:	f380 8809 	msr	PSP, r0
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop

08006a10 <pxCurrentTCBConst>:
 8006a10:	20014308 	.word	0x20014308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006a22:	b672      	cpsid	i
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	b662      	cpsie	i
 8006a32:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a34:	f001 fc6a 	bl	800830c <xTaskIncrementTick>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <SysTick_Handler+0x40>)
 8006a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	2300      	movs	r3, #0
 8006a48:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <vPortSetupTimerInterrupt+0x28>)
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <vPortSetupTimerInterrupt+0x2c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4909      	ldr	r1, [pc, #36]	; (8006a8c <vPortSetupTimerInterrupt+0x30>)
 8006a68:	fba1 1303 	umull	r1, r3, r1, r3
 8006a6c:	099b      	lsrs	r3, r3, #6
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortSetupTimerInterrupt+0x34>)
 8006a74:	2207      	movs	r2, #7
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	e000e014 	.word	0xe000e014
 8006a88:	2001002c 	.word	0x2001002c
 8006a8c:	10624dd3 	.word	0x10624dd3
 8006a90:	e000e010 	.word	0xe000e010

08006a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006aa4 <vPortEnableVFP+0x10>
 8006a98:	6801      	ldr	r1, [r0, #0]
 8006a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a9e:	6001      	str	r1, [r0, #0]
 8006aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006aa2:	bf00      	nop
 8006aa4:	e000ed88 	.word	0xe000ed88

08006aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d90e      	bls.n	8006ad8 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aba:	4a10      	ldr	r2, [pc, #64]	; (8006afc <vPortValidateInterruptPriority+0x54>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <vPortValidateInterruptPriority+0x58>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d204      	bcs.n	8006ad8 <vPortValidateInterruptPriority+0x30>
 8006ace:	490d      	ldr	r1, [pc, #52]	; (8006b04 <vPortValidateInterruptPriority+0x5c>)
 8006ad0:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8006ad4:	f7fa ff94 	bl	8001a00 <vAssertCalled>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <vPortValidateInterruptPriority+0x60>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <vPortValidateInterruptPriority+0x64>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d904      	bls.n	8006af2 <vPortValidateInterruptPriority+0x4a>
 8006ae8:	4906      	ldr	r1, [pc, #24]	; (8006b04 <vPortValidateInterruptPriority+0x5c>)
 8006aea:	f44f 703b 	mov.w	r0, #748	; 0x2ec
 8006aee:	f7fa ff87 	bl	8001a00 <vAssertCalled>
	}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	e000e3f0 	.word	0xe000e3f0
 8006b00:	200106e8 	.word	0x200106e8
 8006b04:	08011428 	.word	0x08011428
 8006b08:	e000ed0c 	.word	0xe000ed0c
 8006b0c:	200106ec 	.word	0x200106ec

08006b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006b1c:	f001 faa4 	bl	8008068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b20:	4b50      	ldr	r3, [pc, #320]	; (8006c64 <pvPortMalloc+0x154>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b28:	f000 f8f8 	bl	8006d1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	; (8006c68 <pvPortMalloc+0x158>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d17f      	bne.n	8006c38 <pvPortMalloc+0x128>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8006b3e:	2208      	movs	r2, #8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4413      	add	r3, r2
 8006b44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f023 0307 	bic.w	r3, r3, #7
 8006b56:	3308      	adds	r3, #8
 8006b58:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <pvPortMalloc+0x5c>
 8006b64:	4941      	ldr	r1, [pc, #260]	; (8006c6c <pvPortMalloc+0x15c>)
 8006b66:	20bb      	movs	r0, #187	; 0xbb
 8006b68:	f7fa ff4a 	bl	8001a00 <vAssertCalled>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d062      	beq.n	8006c38 <pvPortMalloc+0x128>
 8006b72:	4b3f      	ldr	r3, [pc, #252]	; (8006c70 <pvPortMalloc+0x160>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d85d      	bhi.n	8006c38 <pvPortMalloc+0x128>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b7c:	4b3d      	ldr	r3, [pc, #244]	; (8006c74 <pvPortMalloc+0x164>)
 8006b7e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006b80:	4b3c      	ldr	r3, [pc, #240]	; (8006c74 <pvPortMalloc+0x164>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b86:	e004      	b.n	8006b92 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d203      	bcs.n	8006ba4 <pvPortMalloc+0x94>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1f1      	bne.n	8006b88 <pvPortMalloc+0x78>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ba4:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <pvPortMalloc+0x154>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d044      	beq.n	8006c38 <pvPortMalloc+0x128>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	2308      	movs	r3, #8
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d918      	bls.n	8006c02 <pvPortMalloc+0xf2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <pvPortMalloc+0xda>
 8006be2:	4922      	ldr	r1, [pc, #136]	; (8006c6c <pvPortMalloc+0x15c>)
 8006be4:	20e8      	movs	r0, #232	; 0xe8
 8006be6:	f7fa ff0b 	bl	8001a00 <vAssertCalled>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1ad2      	subs	r2, r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bfc:	68b8      	ldr	r0, [r7, #8]
 8006bfe:	f000 f8ef 	bl	8006de0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c02:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <pvPortMalloc+0x160>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <pvPortMalloc+0x160>)
 8006c0e:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c10:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <pvPortMalloc+0x160>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <pvPortMalloc+0x168>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d203      	bcs.n	8006c24 <pvPortMalloc+0x114>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c1c:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <pvPortMalloc+0x160>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a15      	ldr	r2, [pc, #84]	; (8006c78 <pvPortMalloc+0x168>)
 8006c22:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <pvPortMalloc+0x158>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c38:	f001 fa24 	bl	8008084 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <pvPortMalloc+0x136>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006c42:	f7fa fec3 	bl	80019cc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <pvPortMalloc+0x14a>
 8006c50:	4906      	ldr	r1, [pc, #24]	; (8006c6c <pvPortMalloc+0x15c>)
 8006c52:	f44f 7094 	mov.w	r0, #296	; 0x128
 8006c56:	f7fa fed3 	bl	8001a00 <vAssertCalled>
	return pvReturn;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	200142f8 	.word	0x200142f8
 8006c68:	20014304 	.word	0x20014304
 8006c6c:	0801145c 	.word	0x0801145c
 8006c70:	200142fc 	.word	0x200142fc
 8006c74:	200142f0 	.word	0x200142f0
 8006c78:	20014300 	.word	0x20014300

08006c7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03c      	beq.n	8006d08 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c8e:	2308      	movs	r3, #8
 8006c90:	425b      	negs	r3, r3
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <vPortFree+0x94>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <vPortFree+0x38>
 8006caa:	491a      	ldr	r1, [pc, #104]	; (8006d14 <vPortFree+0x98>)
 8006cac:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8006cb0:	f7fa fea6 	bl	8001a00 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <vPortFree+0x4a>
 8006cbc:	4915      	ldr	r1, [pc, #84]	; (8006d14 <vPortFree+0x98>)
 8006cbe:	f240 103d 	movw	r0, #317	; 0x13d
 8006cc2:	f7fa fe9d 	bl	8001a00 <vAssertCalled>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <vPortFree+0x94>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d019      	beq.n	8006d08 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d115      	bne.n	8006d08 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortFree+0x94>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	401a      	ands	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cec:	f001 f9bc 	bl	8008068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	4b08      	ldr	r3, [pc, #32]	; (8006d18 <vPortFree+0x9c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <vPortFree+0x9c>)
 8006cfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cfe:	68b8      	ldr	r0, [r7, #8]
 8006d00:	f000 f86e 	bl	8006de0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d04:	f001 f9be 	bl	8008084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20014304 	.word	0x20014304
 8006d14:	0801145c 	.word	0x0801145c
 8006d18:	200142fc 	.word	0x200142fc

08006d1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d22:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d28:	4b27      	ldr	r3, [pc, #156]	; (8006dc8 <prvHeapInit+0xac>)
 8006d2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00c      	beq.n	8006d50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3307      	adds	r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	; (8006dc8 <prvHeapInit+0xac>)
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d54:	4a1d      	ldr	r2, [pc, #116]	; (8006dcc <prvHeapInit+0xb0>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <prvHeapInit+0xb0>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4413      	add	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d68:	2208      	movs	r2, #8
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <prvHeapInit+0xb4>)
 8006d7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <prvHeapInit+0xb4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d86:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <prvHeapInit+0xb4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <prvHeapInit+0xb4>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <prvHeapInit+0xb8>)
 8006daa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <prvHeapInit+0xbc>)
 8006db2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006db4:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <prvHeapInit+0xc0>)
 8006db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dba:	601a      	str	r2, [r3, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	200106f0 	.word	0x200106f0
 8006dcc:	200142f0 	.word	0x200142f0
 8006dd0:	200142f8 	.word	0x200142f8
 8006dd4:	20014300 	.word	0x20014300
 8006dd8:	200142fc 	.word	0x200142fc
 8006ddc:	20014304 	.word	0x20014304

08006de0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de8:	4b28      	ldr	r3, [pc, #160]	; (8006e8c <prvInsertBlockIntoFreeList+0xac>)
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e002      	b.n	8006df4 <prvInsertBlockIntoFreeList+0x14>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d3f7      	bcc.n	8006dee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	441a      	add	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d108      	bne.n	8006e22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	441a      	add	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d118      	bne.n	8006e68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <prvInsertBlockIntoFreeList+0xb0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d00d      	beq.n	8006e5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e008      	b.n	8006e70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <prvInsertBlockIntoFreeList+0xb0>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e003      	b.n	8006e70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d002      	beq.n	8006e7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	200142f0 	.word	0x200142f0
 8006e90:	200142f8 	.word	0x200142f8

08006e94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d104      	bne.n	8006eb2 <xQueueGenericReset+0x1e>
 8006ea8:	492a      	ldr	r1, [pc, #168]	; (8006f54 <xQueueGenericReset+0xc0>)
 8006eaa:	f240 101b 	movw	r0, #283	; 0x11b
 8006eae:	f7fa fda7 	bl	8001a00 <vAssertCalled>

	taskENTER_CRITICAL();
 8006eb2:	f7ff fd29 	bl	8006908 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	441a      	add	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	22ff      	movs	r2, #255	; 0xff
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d114      	bne.n	8006f32 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01a      	beq.n	8006f46 <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3310      	adds	r3, #16
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fb95 	bl	8008644 <xTaskRemoveFromEventList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f20:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <xQueueGenericReset+0xc4>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e009      	b.n	8006f46 <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3310      	adds	r3, #16
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fb50 	bl	80065dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff fb4b 	bl	80065dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f7ff fd0b 	bl	8006960 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f4a:	2301      	movs	r3, #1
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	08011488 	.word	0x08011488
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <xQueueGenericCreate+0x1e>
 8006f70:	4914      	ldr	r1, [pc, #80]	; (8006fc4 <xQueueGenericCreate+0x68>)
 8006f72:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8006f76:	f7fa fd43 	bl	8001a00 <vAssertCalled>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e004      	b.n	8006f90 <xQueueGenericCreate+0x34>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	3354      	adds	r3, #84	; 0x54
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff fdbb 	bl	8006b10 <pvPortMalloc>
 8006f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <xQueueGenericCreate+0x5e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	3354      	adds	r3, #84	; 0x54
 8006fa6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fa8:	79fa      	ldrb	r2, [r7, #7]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f807 	bl	8006fc8 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8006fba:	69bb      	ldr	r3, [r7, #24]
	}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	08011488 	.word	0x08011488

08006fc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e002      	b.n	8006fea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	69b8      	ldr	r0, [r7, #24]
 8006ffa:	f7ff ff4b 	bl	8006e94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	78fa      	ldrb	r2, [r7, #3]
 8007002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2200      	movs	r2, #0
 800700a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00e      	beq.n	8007040 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f81c 	bl	8007078 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	461a      	mov	r2, r3
 800705e:	6939      	ldr	r1, [r7, #16]
 8007060:	6978      	ldr	r0, [r7, #20]
 8007062:	f7ff ff7b 	bl	8006f5c <xQueueGenericCreate>
 8007066:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7ff ffd3 	bl	8007014 <prvInitialiseMutex>

		return pxNewQueue;
 800706e:	68fb      	ldr	r3, [r7, #12]
	}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08a      	sub	sp, #40	; 0x28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007086:	2300      	movs	r3, #0
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <xQueueGenericSend+0x26>
 8007094:	4974      	ldr	r1, [pc, #464]	; (8007268 <xQueueGenericSend+0x1f0>)
 8007096:	f240 20d9 	movw	r0, #729	; 0x2d9
 800709a:	f7fa fcb1 	bl	8001a00 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <xQueueGenericSend+0x34>
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <xQueueGenericSend+0x38>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <xQueueGenericSend+0x3a>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <xQueueGenericSend+0x48>
 80070b6:	496c      	ldr	r1, [pc, #432]	; (8007268 <xQueueGenericSend+0x1f0>)
 80070b8:	f240 20da 	movw	r0, #730	; 0x2da
 80070bc:	f7fa fca0 	bl	8001a00 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d103      	bne.n	80070ce <xQueueGenericSend+0x56>
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <xQueueGenericSend+0x5a>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <xQueueGenericSend+0x5c>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <xQueueGenericSend+0x6a>
 80070d8:	4963      	ldr	r1, [pc, #396]	; (8007268 <xQueueGenericSend+0x1f0>)
 80070da:	f240 20db 	movw	r0, #731	; 0x2db
 80070de:	f7fa fc8f 	bl	8001a00 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e2:	f001 fd23 	bl	8008b2c <xTaskGetSchedulerState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <xQueueGenericSend+0x7a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <xQueueGenericSend+0x7e>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueGenericSend+0x80>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <xQueueGenericSend+0x8e>
 80070fc:	495a      	ldr	r1, [pc, #360]	; (8007268 <xQueueGenericSend+0x1f0>)
 80070fe:	f240 20de 	movw	r0, #734	; 0x2de
 8007102:	f7fa fc7d 	bl	8001a00 <vAssertCalled>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007106:	f7ff fbff 	bl	8006908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <xQueueGenericSend+0xa4>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d13d      	bne.n	8007198 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	6a38      	ldr	r0, [r7, #32]
 8007122:	f000 fad5 	bl	80076d0 <prvCopyDataToQueue>
 8007126:	61f8      	str	r0, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00f      	beq.n	8007150 <xQueueGenericSend+0xd8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6a38      	ldr	r0, [r7, #32]
 8007134:	f000 fc46 	bl	80079c4 <prvNotifyQueueSetContainer>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d028      	beq.n	8007190 <xQueueGenericSend+0x118>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800713e:	4b4b      	ldr	r3, [pc, #300]	; (800726c <xQueueGenericSend+0x1f4>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	e01f      	b.n	8007190 <xQueueGenericSend+0x118>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d010      	beq.n	800717a <xQueueGenericSend+0x102>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	3324      	adds	r3, #36	; 0x24
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fa71 	bl	8008644 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <xQueueGenericSend+0x118>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007168:	4b40      	ldr	r3, [pc, #256]	; (800726c <xQueueGenericSend+0x1f4>)
 800716a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	e00a      	b.n	8007190 <xQueueGenericSend+0x118>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <xQueueGenericSend+0x118>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8007180:	4b3a      	ldr	r3, [pc, #232]	; (800726c <xQueueGenericSend+0x1f4>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007190:	f7ff fbe6 	bl	8006960 <vPortExitCritical>
				return pdPASS;
 8007194:	2301      	movs	r3, #1
 8007196:	e063      	b.n	8007260 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800719e:	f7ff fbdf 	bl	8006960 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e05c      	b.n	8007260 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 faa5 	bl	8008700 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ba:	f7ff fbd1 	bl	8006960 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071be:	f000 ff53 	bl	8008068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071c2:	f7ff fba1 	bl	8006908 <vPortEnterCritical>
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071cc:	b25b      	sxtb	r3, r3
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d103      	bne.n	80071dc <xQueueGenericSend+0x164>
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e2:	b25b      	sxtb	r3, r3
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d103      	bne.n	80071f2 <xQueueGenericSend+0x17a>
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f2:	f7ff fbb5 	bl	8006960 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071f6:	1d3a      	adds	r2, r7, #4
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 fa9c 	bl	800873c <xTaskCheckForTimeOut>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d124      	bne.n	8007254 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800720a:	6a38      	ldr	r0, [r7, #32]
 800720c:	f000 fb66 	bl	80078dc <prvIsQueueFull>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d018      	beq.n	8007248 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	3310      	adds	r3, #16
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f9c8 	bl	80085b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007224:	6a38      	ldr	r0, [r7, #32]
 8007226:	f000 fae3 	bl	80077f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800722a:	f000 ff2b 	bl	8008084 <xTaskResumeAll>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	f47f af68 	bne.w	8007106 <xQueueGenericSend+0x8e>
				{
					portYIELD_WITHIN_API();
 8007236:	4b0d      	ldr	r3, [pc, #52]	; (800726c <xQueueGenericSend+0x1f4>)
 8007238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	e75e      	b.n	8007106 <xQueueGenericSend+0x8e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007248:	6a38      	ldr	r0, [r7, #32]
 800724a:	f000 fad1 	bl	80077f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800724e:	f000 ff19 	bl	8008084 <xTaskResumeAll>
 8007252:	e758      	b.n	8007106 <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007254:	6a38      	ldr	r0, [r7, #32]
 8007256:	f000 facb 	bl	80077f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800725a:	f000 ff13 	bl	8008084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800725e:	2300      	movs	r3, #0
		}
	}
}
 8007260:	4618      	mov	r0, r3
 8007262:	3728      	adds	r7, #40	; 0x28
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	08011488 	.word	0x08011488
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08c      	sub	sp, #48	; 0x30
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <xQueueGenericSendFromISR+0x22>
 8007288:	4945      	ldr	r1, [pc, #276]	; (80073a0 <xQueueGenericSendFromISR+0x130>)
 800728a:	f240 309f 	movw	r0, #927	; 0x39f
 800728e:	f7fa fbb7 	bl	8001a00 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <xQueueGenericSendFromISR+0x30>
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <xQueueGenericSendFromISR+0x34>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <xQueueGenericSendFromISR+0x36>
 80072a4:	2300      	movs	r3, #0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <xQueueGenericSendFromISR+0x44>
 80072aa:	493d      	ldr	r1, [pc, #244]	; (80073a0 <xQueueGenericSendFromISR+0x130>)
 80072ac:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 80072b0:	f7fa fba6 	bl	8001a00 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d103      	bne.n	80072c2 <xQueueGenericSendFromISR+0x52>
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <xQueueGenericSendFromISR+0x56>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <xQueueGenericSendFromISR+0x58>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <xQueueGenericSendFromISR+0x66>
 80072cc:	4934      	ldr	r1, [pc, #208]	; (80073a0 <xQueueGenericSendFromISR+0x130>)
 80072ce:	f240 30a1 	movw	r0, #929	; 0x3a1
 80072d2:	f7fa fb95 	bl	8001a00 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072d6:	f7ff fbe7 	bl	8006aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072da:	f3ef 8211 	mrs	r2, BASEPRI
 80072de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	61ba      	str	r2, [r7, #24]
 80072f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072f8:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <xQueueGenericSendFromISR+0x9c>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d13c      	bne.n	8007386 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007312:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800731a:	f000 f9d9 	bl	80076d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800731e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d124      	bne.n	8007372 <xQueueGenericSendFromISR+0x102>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00d      	beq.n	800734c <xQueueGenericSendFromISR+0xdc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007334:	f000 fb46 	bl	80079c4 <prvNotifyQueueSetContainer>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d020      	beq.n	8007380 <xQueueGenericSendFromISR+0x110>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01d      	beq.n	8007380 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e019      	b.n	8007380 <xQueueGenericSendFromISR+0x110>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d015      	beq.n	8007380 <xQueueGenericSendFromISR+0x110>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f973 	bl	8008644 <xTaskRemoveFromEventList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <xQueueGenericSendFromISR+0x110>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <xQueueGenericSendFromISR+0x110>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	e006      	b.n	8007380 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007372:	7ffb      	ldrb	r3, [r7, #31]
 8007374:	3301      	adds	r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	b25a      	sxtb	r2, r3
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007380:	2301      	movs	r3, #1
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8007384:	e001      	b.n	800738a <xQueueGenericSendFromISR+0x11a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007386:	2300      	movs	r3, #0
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007396:	4618      	mov	r0, r3
 8007398:	3730      	adds	r7, #48	; 0x30
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	08011488 	.word	0x08011488

080073a4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08a      	sub	sp, #40	; 0x28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <xQueueGenericReceive+0x26>
 80073c0:	4979      	ldr	r1, [pc, #484]	; (80075a8 <xQueueGenericReceive+0x204>)
 80073c2:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80073c6:	f7fa fb1b 	bl	8001a00 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d103      	bne.n	80073d8 <xQueueGenericReceive+0x34>
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <xQueueGenericReceive+0x38>
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <xQueueGenericReceive+0x3a>
 80073dc:	2300      	movs	r3, #0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d104      	bne.n	80073ec <xQueueGenericReceive+0x48>
 80073e2:	4971      	ldr	r1, [pc, #452]	; (80075a8 <xQueueGenericReceive+0x204>)
 80073e4:	f240 40dd 	movw	r0, #1245	; 0x4dd
 80073e8:	f7fa fb0a 	bl	8001a00 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ec:	f001 fb9e 	bl	8008b2c <xTaskGetSchedulerState>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <xQueueGenericReceive+0x58>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <xQueueGenericReceive+0x5c>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <xQueueGenericReceive+0x5e>
 8007400:	2300      	movs	r3, #0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d104      	bne.n	8007410 <xQueueGenericReceive+0x6c>
 8007406:	4968      	ldr	r1, [pc, #416]	; (80075a8 <xQueueGenericReceive+0x204>)
 8007408:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 800740c:	f7fa faf8 	bl	8001a00 <vAssertCalled>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007410:	f7ff fa7a 	bl	8006908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d046      	beq.n	80074ae <xQueueGenericReceive+0x10a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	6a38      	ldr	r0, [r7, #32]
 800742a:	f000 f9bb 	bl	80077a4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d121      	bne.n	8007478 <xQueueGenericReceive+0xd4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	1e5a      	subs	r2, r3, #1
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <xQueueGenericReceive+0xaa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007444:	f001 fd3e 	bl	8008ec4 <pvTaskIncrementMutexHeldCount>
 8007448:	4602      	mov	r2, r0
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d027      	beq.n	80074a6 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	3310      	adds	r3, #16
 800745a:	4618      	mov	r0, r3
 800745c:	f001 f8f2 	bl	8008644 <xTaskRemoveFromEventList>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d01f      	beq.n	80074a6 <xQueueGenericReceive+0x102>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8007466:	4b51      	ldr	r3, [pc, #324]	; (80075ac <xQueueGenericReceive+0x208>)
 8007468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	e016      	b.n	80074a6 <xQueueGenericReceive+0x102>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00f      	beq.n	80074a6 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	3324      	adds	r3, #36	; 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f8da 	bl	8008644 <xTaskRemoveFromEventList>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <xQueueGenericReceive+0x102>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8007496:	4b45      	ldr	r3, [pc, #276]	; (80075ac <xQueueGenericReceive+0x208>)
 8007498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80074a6:	f7ff fa5b 	bl	8006960 <vPortExitCritical>
				return pdPASS;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e077      	b.n	800759e <xQueueGenericReceive+0x1fa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d103      	bne.n	80074bc <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074b4:	f7ff fa54 	bl	8006960 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e070      	b.n	800759e <xQueueGenericReceive+0x1fa>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <xQueueGenericReceive+0x12c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 f91a 	bl	8008700 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074d0:	f7ff fa46 	bl	8006960 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074d4:	f000 fdc8 	bl	8008068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d8:	f7ff fa16 	bl	8006908 <vPortEnterCritical>
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d103      	bne.n	80074f2 <xQueueGenericReceive+0x14e>
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f8:	b25b      	sxtb	r3, r3
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d103      	bne.n	8007508 <xQueueGenericReceive+0x164>
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007508:	f7ff fa2a 	bl	8006960 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800750c:	1d3a      	adds	r2, r7, #4
 800750e:	f107 0310 	add.w	r3, r7, #16
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f001 f911 	bl	800873c <xTaskCheckForTimeOut>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d131      	bne.n	8007584 <xQueueGenericReceive+0x1e0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007520:	6a38      	ldr	r0, [r7, #32]
 8007522:	f000 f9c5 	bl	80078b0 <prvIsQueueEmpty>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d025      	beq.n	8007578 <xQueueGenericReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <xQueueGenericReceive+0x1a2>
					{
						taskENTER_CRITICAL();
 8007534:	f7ff f9e8 	bl	8006908 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fb13 	bl	8008b68 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8007542:	f7ff fa0d 	bl	8006960 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	3324      	adds	r3, #36	; 0x24
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f830 	bl	80085b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007554:	6a38      	ldr	r0, [r7, #32]
 8007556:	f000 f94b 	bl	80077f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800755a:	f000 fd93 	bl	8008084 <xTaskResumeAll>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	f47f af55 	bne.w	8007410 <xQueueGenericReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <xQueueGenericReceive+0x208>)
 8007568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	e74b      	b.n	8007410 <xQueueGenericReceive+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007578:	6a38      	ldr	r0, [r7, #32]
 800757a:	f000 f939 	bl	80077f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800757e:	f000 fd81 	bl	8008084 <xTaskResumeAll>
 8007582:	e745      	b.n	8007410 <xQueueGenericReceive+0x6c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8007584:	6a38      	ldr	r0, [r7, #32]
 8007586:	f000 f933 	bl	80077f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800758a:	f000 fd7b 	bl	8008084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800758e:	6a38      	ldr	r0, [r7, #32]
 8007590:	f000 f98e 	bl	80078b0 <prvIsQueueEmpty>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	f43f af3a 	beq.w	8007410 <xQueueGenericReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800759c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	08011488 	.word	0x08011488
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08c      	sub	sp, #48	; 0x30
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <xQueueReceiveFromISR+0x20>
 80075c6:	4934      	ldr	r1, [pc, #208]	; (8007698 <xQueueReceiveFromISR+0xe8>)
 80075c8:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 80075cc:	f7fa fa18 	bl	8001a00 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <xQueueReceiveFromISR+0x2e>
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <xQueueReceiveFromISR+0x32>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <xQueueReceiveFromISR+0x34>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <xQueueReceiveFromISR+0x42>
 80075e8:	492b      	ldr	r1, [pc, #172]	; (8007698 <xQueueReceiveFromISR+0xe8>)
 80075ea:	f240 50a1 	movw	r0, #1441	; 0x5a1
 80075ee:	f7fa fa07 	bl	8001a00 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075f2:	f7ff fa59 	bl	8006aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075f6:	f3ef 8211 	mrs	r2, BASEPRI
 80075fa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80075fe:	b672      	cpsid	i
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	b662      	cpsie	i
 800760e:	617a      	str	r2, [r7, #20]
 8007610:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007612:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007614:	623b      	str	r3, [r7, #32]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	61fb      	str	r3, [r7, #28]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02d      	beq.n	800767e <xQueueReceiveFromISR+0xce>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007628:	76fb      	strb	r3, [r7, #27]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762e:	f000 f8b9 	bl	80077a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800763a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d112      	bne.n	800766a <xQueueReceiveFromISR+0xba>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d015      	beq.n	8007678 <xQueueReceiveFromISR+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	3310      	adds	r3, #16
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fff7 	bl	8008644 <xTaskRemoveFromEventList>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00d      	beq.n	8007678 <xQueueReceiveFromISR+0xc8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <xQueueReceiveFromISR+0xc8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e006      	b.n	8007678 <xQueueReceiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800766a:	7efb      	ldrb	r3, [r7, #27]
 800766c:	3301      	adds	r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	b25a      	sxtb	r2, r3
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007678:	2301      	movs	r3, #1
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800767c:	e001      	b.n	8007682 <xQueueReceiveFromISR+0xd2>
		}
		else
		{
			xReturn = pdFAIL;
 800767e:	2300      	movs	r3, #0
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800768e:	4618      	mov	r0, r3
 8007690:	3730      	adds	r7, #48	; 0x30
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	08011488 	.word	0x08011488

0800769c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <uxQueueMessagesWaiting+0x18>
 80076aa:	4908      	ldr	r1, [pc, #32]	; (80076cc <uxQueueMessagesWaiting+0x30>)
 80076ac:	f240 602f 	movw	r0, #1583	; 0x62f
 80076b0:	f7fa f9a6 	bl	8001a00 <vAssertCalled>

	taskENTER_CRITICAL();
 80076b4:	f7ff f928 	bl	8006908 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80076be:	f7ff f94f 	bl	8006960 <vPortExitCritical>

	return uxReturn;
 80076c2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	08011488 	.word	0x08011488

080076d0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10d      	bne.n	800770a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d14d      	bne.n	8007792 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 faaa 	bl	8008c54 <xTaskPriorityDisinherit>
 8007700:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	605a      	str	r2, [r3, #4]
 8007708:	e043      	b.n	8007792 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d119      	bne.n	8007744 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6898      	ldr	r0, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	461a      	mov	r2, r3
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	f003 ff1c 	bl	800b558 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	441a      	add	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d32b      	bcc.n	8007792 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	609a      	str	r2, [r3, #8]
 8007742:	e026      	b.n	8007792 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	68d8      	ldr	r0, [r3, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	461a      	mov	r2, r3
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	f003 ff02 	bl	800b558 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	425b      	negs	r3, r3
 800775e:	441a      	add	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d207      	bcs.n	8007780 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	425b      	negs	r3, r3
 800777a:	441a      	add	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d105      	bne.n	8007792 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	3b01      	subs	r3, #1
 8007790:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800779a:	697b      	ldr	r3, [r7, #20]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d018      	beq.n	80077e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	441a      	add	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d303      	bcc.n	80077d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68d9      	ldr	r1, [r3, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	461a      	mov	r2, r3
 80077e2:	6838      	ldr	r0, [r7, #0]
 80077e4:	f003 feb8 	bl	800b558 <memcpy>
	}
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077f8:	f7ff f886 	bl	8006908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007802:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007804:	e01f      	b.n	8007846 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800780e:	2100      	movs	r1, #0
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f8d7 	bl	80079c4 <prvNotifyQueueSetContainer>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800781c:	f000 ffe4 	bl	80087e8 <vTaskMissedYield>
 8007820:	e00d      	b.n	800783e <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d012      	beq.n	8007850 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3324      	adds	r3, #36	; 0x24
 800782e:	4618      	mov	r0, r3
 8007830:	f000 ff08 	bl	8008644 <xTaskRemoveFromEventList>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800783a:	f000 ffd5 	bl	80087e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	3b01      	subs	r3, #1
 8007842:	b2db      	uxtb	r3, r3
 8007844:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	dcdb      	bgt.n	8007806 <prvUnlockQueue+0x16>
 800784e:	e000      	b.n	8007852 <prvUnlockQueue+0x62>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8007850:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800785a:	f7ff f881 	bl	8006960 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800785e:	f7ff f853 	bl	8006908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007868:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800786a:	e011      	b.n	8007890 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d012      	beq.n	800789a <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3310      	adds	r3, #16
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fee3 	bl	8008644 <xTaskRemoveFromEventList>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8007884:	f000 ffb0 	bl	80087e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	3b01      	subs	r3, #1
 800788c:	b2db      	uxtb	r3, r3
 800788e:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	dce9      	bgt.n	800786c <prvUnlockQueue+0x7c>
 8007898:	e000      	b.n	800789c <prvUnlockQueue+0xac>

				--cRxLock;
			}
			else
			{
				break;
 800789a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	22ff      	movs	r2, #255	; 0xff
 80078a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078a4:	f7ff f85c 	bl	8006960 <vPortExitCritical>
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078b8:	f7ff f826 	bl	8006908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e001      	b.n	80078ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ce:	f7ff f847 	bl	8006960 <vPortExitCritical>

	return xReturn;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078e4:	f7ff f810 	bl	8006908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d102      	bne.n	80078fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	e001      	b.n	80078fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078fe:	f7ff f82f 	bl	8006960 <vPortExitCritical>

	return xReturn;
 8007902:	68fb      	ldr	r3, [r7, #12]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	e014      	b.n	8007946 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800791c:	4a0e      	ldr	r2, [pc, #56]	; (8007958 <vQueueAddToRegistry+0x4c>)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10b      	bne.n	8007940 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007928:	490b      	ldr	r1, [pc, #44]	; (8007958 <vQueueAddToRegistry+0x4c>)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007932:	4a09      	ldr	r2, [pc, #36]	; (8007958 <vQueueAddToRegistry+0x4c>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	4413      	add	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800793e:	e005      	b.n	800794c <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b07      	cmp	r3, #7
 800794a:	d9e7      	bls.n	800791c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	20014954 	.word	0x20014954

0800795c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800796c:	f7fe ffcc 	bl	8006908 <vPortEnterCritical>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007976:	b25b      	sxtb	r3, r3
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d103      	bne.n	8007986 <vQueueWaitForMessageRestricted+0x2a>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800798c:	b25b      	sxtb	r3, r3
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007992:	d103      	bne.n	800799c <vQueueWaitForMessageRestricted+0x40>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800799c:	f7fe ffe0 	bl	8006960 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	3324      	adds	r3, #36	; 0x24
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fe1f 	bl	80085f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f7ff ff1a 	bl	80077f0 <prvUnlockQueue>
	}
 80079bc:	bf00      	nop
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <prvNotifyQueueSetContainer+0x24>
 80079de:	4920      	ldr	r1, [pc, #128]	; (8007a60 <prvNotifyQueueSetContainer+0x9c>)
 80079e0:	f640 10ce 	movw	r0, #2510	; 0x9ce
 80079e4:	f7fa f80c 	bl	8001a00 <vAssertCalled>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d304      	bcc.n	80079fe <prvNotifyQueueSetContainer+0x3a>
 80079f4:	491a      	ldr	r1, [pc, #104]	; (8007a60 <prvNotifyQueueSetContainer+0x9c>)
 80079f6:	f640 10cf 	movw	r0, #2511	; 0x9cf
 80079fa:	f7fa f801 	bl	8001a00 <vAssertCalled>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d225      	bcs.n	8007a56 <prvNotifyQueueSetContainer+0x92>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a10:	73fb      	strb	r3, [r7, #15]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6938      	ldr	r0, [r7, #16]
 8007a1a:	f7ff fe59 	bl	80076d0 <prvCopyDataToQueue>
 8007a1e:	6178      	str	r0, [r7, #20]

			if( cTxLock == queueUNLOCKED )
 8007a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d10e      	bne.n	8007a48 <prvNotifyQueueSetContainer+0x84>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d011      	beq.n	8007a56 <prvNotifyQueueSetContainer+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3324      	adds	r3, #36	; 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fe04 	bl	8008644 <xTaskRemoveFromEventList>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <prvNotifyQueueSetContainer+0x92>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8007a42:	2301      	movs	r3, #1
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e006      	b.n	8007a56 <prvNotifyQueueSetContainer+0x92>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	b25a      	sxtb	r2, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a56:	697b      	ldr	r3, [r7, #20]
	}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08011488 	.word	0x08011488

08007a64 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	; 0x30
 8007a68:	af04      	add	r7, sp, #16
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff f849 	bl	8006b10 <pvPortMalloc>
 8007a7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007a86:	2060      	movs	r0, #96	; 0x60
 8007a88:	f7ff f842 	bl	8006b10 <pvPortMalloc>
 8007a8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
 8007a9a:	e005      	b.n	8007aa8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a9c:	6978      	ldr	r0, [r7, #20]
 8007a9e:	f7ff f8ed 	bl	8006c7c <vPortFree>
 8007aa2:	e001      	b.n	8007aa8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aae:	88fa      	ldrh	r2, [r7, #6]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	9302      	str	r3, [sp, #8]
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f80f 	bl	8007ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aca:	69f8      	ldr	r0, [r7, #28]
 8007acc:	f000 f892 	bl	8007bf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e002      	b.n	8007adc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ada:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007adc:	69bb      	ldr	r3, [r7, #24]
	}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	461a      	mov	r2, r3
 8007b00:	21a5      	movs	r1, #165	; 0xa5
 8007b02:	f003 fd34 	bl	800b56e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007b10:	440b      	add	r3, r1
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <prvInitialiseNewTask+0x4c>
 8007b2a:	4931      	ldr	r1, [pc, #196]	; (8007bf0 <prvInitialiseNewTask+0x108>)
 8007b2c:	f240 302b 	movw	r0, #811	; 0x32b
 8007b30:	f7f9 ff66 	bl	8001a00 <vAssertCalled>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e012      	b.n	8007b60 <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	4413      	add	r3, r2
 8007b40:	7819      	ldrb	r1, [r3, #0]
 8007b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4413      	add	r3, r2
 8007b48:	3334      	adds	r3, #52	; 0x34
 8007b4a:	460a      	mov	r2, r1
 8007b4c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4413      	add	r3, r2
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d006      	beq.n	8007b68 <prvInitialiseNewTask+0x80>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	d9e9      	bls.n	8007b3a <prvInitialiseNewTask+0x52>
 8007b66:	e000      	b.n	8007b6a <prvInitialiseNewTask+0x82>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8007b68:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d901      	bls.n	8007b7c <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b78:	2305      	movs	r3, #5
 8007b7a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	6a3a      	ldr	r2, [r7, #32]
 8007b80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	6a3a      	ldr	r2, [r7, #32]
 8007b86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	3304      	adds	r3, #4
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fd42 	bl	800661c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fd3d 	bl	800661c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	f1c3 0206 	rsb	r2, r3, #6
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2200      	movs	r2, #0
 8007bbc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	6938      	ldr	r0, [r7, #16]
 8007bd2:	f7fe fdb9 	bl	8006748 <pxPortInitialiseStack>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <prvInitialiseNewTask+0x100>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	080114a0 	.word	0x080114a0

08007bf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bfc:	f7fe fe84 	bl	8006908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c00:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <prvAddNewTaskToReadyList+0xc0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <prvAddNewTaskToReadyList+0xc0>)
 8007c08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c0a:	4b2b      	ldr	r3, [pc, #172]	; (8007cb8 <prvAddNewTaskToReadyList+0xc4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c12:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <prvAddNewTaskToReadyList+0xc4>)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c18:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <prvAddNewTaskToReadyList+0xc0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d110      	bne.n	8007c42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c20:	f000 fe06 	bl	8008830 <prvInitialiseTaskLists>
 8007c24:	e00d      	b.n	8007c42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c26:	4b25      	ldr	r3, [pc, #148]	; (8007cbc <prvAddNewTaskToReadyList+0xc8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c2e:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <prvAddNewTaskToReadyList+0xc4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d802      	bhi.n	8007c42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c3c:	4a1e      	ldr	r2, [pc, #120]	; (8007cb8 <prvAddNewTaskToReadyList+0xc4>)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c42:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <prvAddNewTaskToReadyList+0xcc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <prvAddNewTaskToReadyList+0xcc>)
 8007c4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c4c:	4b1c      	ldr	r3, [pc, #112]	; (8007cc0 <prvAddNewTaskToReadyList+0xcc>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	2201      	movs	r2, #1
 8007c5a:	409a      	lsls	r2, r3
 8007c5c:	4b19      	ldr	r3, [pc, #100]	; (8007cc4 <prvAddNewTaskToReadyList+0xd0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <prvAddNewTaskToReadyList+0xd0>)
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <prvAddNewTaskToReadyList+0xd4>)
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fe fcdb 	bl	8006638 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c82:	f7fe fe6d 	bl	8006960 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c86:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <prvAddNewTaskToReadyList+0xc8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00e      	beq.n	8007cac <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <prvAddNewTaskToReadyList+0xc4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d207      	bcs.n	8007cac <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <prvAddNewTaskToReadyList+0xd8>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200143f4 	.word	0x200143f4
 8007cb8:	20014308 	.word	0x20014308
 8007cbc:	20014400 	.word	0x20014400
 8007cc0:	20014410 	.word	0x20014410
 8007cc4:	200143fc 	.word	0x200143fc
 8007cc8:	2001430c 	.word	0x2001430c
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007cd8:	f7fe fe16 	bl	8006908 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <vTaskDelete+0x18>
 8007ce2:	4b36      	ldr	r3, [pc, #216]	; (8007dbc <vTaskDelete+0xec>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	e000      	b.n	8007cea <vTaskDelete+0x1a>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fcff 	bl	80066f4 <uxListRemove>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d115      	bne.n	8007d28 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	492f      	ldr	r1, [pc, #188]	; (8007dc0 <vTaskDelete+0xf0>)
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <vTaskDelete+0x58>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	2201      	movs	r2, #1
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	43da      	mvns	r2, r3
 8007d1e:	4b29      	ldr	r3, [pc, #164]	; (8007dc4 <vTaskDelete+0xf4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4013      	ands	r3, r2
 8007d24:	4a27      	ldr	r2, [pc, #156]	; (8007dc4 <vTaskDelete+0xf4>)
 8007d26:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3318      	adds	r3, #24
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fcdd 	bl	80066f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007d3a:	4b23      	ldr	r3, [pc, #140]	; (8007dc8 <vTaskDelete+0xf8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a21      	ldr	r2, [pc, #132]	; (8007dc8 <vTaskDelete+0xf8>)
 8007d42:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007d44:	4b1d      	ldr	r3, [pc, #116]	; (8007dbc <vTaskDelete+0xec>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d10b      	bne.n	8007d66 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	481d      	ldr	r0, [pc, #116]	; (8007dcc <vTaskDelete+0xfc>)
 8007d56:	f7fe fc6f 	bl	8006638 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007d5a:	4b1d      	ldr	r3, [pc, #116]	; (8007dd0 <vTaskDelete+0x100>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <vTaskDelete+0x100>)
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	e009      	b.n	8007d7a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007d66:	4b1b      	ldr	r3, [pc, #108]	; (8007dd4 <vTaskDelete+0x104>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	4a19      	ldr	r2, [pc, #100]	; (8007dd4 <vTaskDelete+0x104>)
 8007d6e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fea5 	bl	8008ac0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007d76:	f000 feb3 	bl	8008ae0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007d7a:	f7fe fdf1 	bl	8006960 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <vTaskDelete+0x108>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d015      	beq.n	8007db2 <vTaskDelete+0xe2>
		{
			if( pxTCB == pxCurrentTCB )
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <vTaskDelete+0xec>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d110      	bne.n	8007db2 <vTaskDelete+0xe2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007d90:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <vTaskDelete+0x10c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <vTaskDelete+0xd2>
 8007d98:	4911      	ldr	r1, [pc, #68]	; (8007de0 <vTaskDelete+0x110>)
 8007d9a:	f240 4065 	movw	r0, #1125	; 0x465
 8007d9e:	f7f9 fe2f 	bl	8001a00 <vAssertCalled>
				portYIELD_WITHIN_API();
 8007da2:	4b10      	ldr	r3, [pc, #64]	; (8007de4 <vTaskDelete+0x114>)
 8007da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20014308 	.word	0x20014308
 8007dc0:	2001430c 	.word	0x2001430c
 8007dc4:	200143fc 	.word	0x200143fc
 8007dc8:	20014410 	.word	0x20014410
 8007dcc:	200143c8 	.word	0x200143c8
 8007dd0:	200143dc 	.word	0x200143dc
 8007dd4:	200143f4 	.word	0x200143f4
 8007dd8:	20014400 	.word	0x20014400
 8007ddc:	2001441c 	.word	0x2001441c
 8007de0:	080114a0 	.word	0x080114a0
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <vTaskDelayUntil+0x1e>
 8007dfc:	492d      	ldr	r1, [pc, #180]	; (8007eb4 <vTaskDelayUntil+0xcc>)
 8007dfe:	f240 4079 	movw	r0, #1145	; 0x479
 8007e02:	f7f9 fdfd 	bl	8001a00 <vAssertCalled>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <vTaskDelayUntil+0x2e>
 8007e0c:	4929      	ldr	r1, [pc, #164]	; (8007eb4 <vTaskDelayUntil+0xcc>)
 8007e0e:	f240 407a 	movw	r0, #1146	; 0x47a
 8007e12:	f7f9 fdf5 	bl	8001a00 <vAssertCalled>
		configASSERT( uxSchedulerSuspended == 0 );
 8007e16:	4b28      	ldr	r3, [pc, #160]	; (8007eb8 <vTaskDelayUntil+0xd0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <vTaskDelayUntil+0x40>
 8007e1e:	4925      	ldr	r1, [pc, #148]	; (8007eb4 <vTaskDelayUntil+0xcc>)
 8007e20:	f240 407b 	movw	r0, #1147	; 0x47b
 8007e24:	f7f9 fdec 	bl	8001a00 <vAssertCalled>

		vTaskSuspendAll();
 8007e28:	f000 f91e 	bl	8008068 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007e2c:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <vTaskDelayUntil+0xd4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	4413      	add	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d90b      	bls.n	8007e5e <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d911      	bls.n	8007e74 <vTaskDelayUntil+0x8c>
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d90d      	bls.n	8007e74 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e00a      	b.n	8007e74 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d803      	bhi.n	8007e70 <vTaskDelayUntil+0x88>
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d901      	bls.n	8007e74 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f82f 	bl	8008eec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007e8e:	f000 f8f9 	bl	8008084 <xTaskResumeAll>
 8007e92:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <vTaskDelayUntil+0xd8>)
 8007e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eaa:	bf00      	nop
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	080114a0 	.word	0x080114a0
 8007eb8:	2001441c 	.word	0x2001441c
 8007ebc:	200143f8 	.word	0x200143f8
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d011      	beq.n	8007efa <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ed6:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <vTaskDelay+0x54>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <vTaskDelay+0x24>
 8007ede:	490f      	ldr	r1, [pc, #60]	; (8007f1c <vTaskDelay+0x58>)
 8007ee0:	f240 40cf 	movw	r0, #1231	; 0x4cf
 8007ee4:	f7f9 fd8c 	bl	8001a00 <vAssertCalled>
			vTaskSuspendAll();
 8007ee8:	f000 f8be 	bl	8008068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007eec:	2100      	movs	r1, #0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fffc 	bl	8008eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ef4:	f000 f8c6 	bl	8008084 <xTaskResumeAll>
 8007ef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d107      	bne.n	8007f10 <vTaskDelay+0x4c>
		{
			portYIELD_WITHIN_API();
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <vTaskDelay+0x5c>)
 8007f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	2001441c 	.word	0x2001441c
 8007f1c:	080114a0 	.word	0x080114a0
 8007f20:	e000ed04 	.word	0xe000ed04

08007f24 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <eTaskGetState+0x1c>
 8007f36:	4920      	ldr	r1, [pc, #128]	; (8007fb8 <eTaskGetState+0x94>)
 8007f38:	f240 40fb 	movw	r0, #1275	; 0x4fb
 8007f3c:	f7f9 fd60 	bl	8001a00 <vAssertCalled>

		if( pxTCB == pxCurrentTCB )
 8007f40:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <eTaskGetState+0x98>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d102      	bne.n	8007f50 <eTaskGetState+0x2c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
 8007f4e:	e02d      	b.n	8007fac <eTaskGetState+0x88>
		}
		else
		{
			taskENTER_CRITICAL();
 8007f50:	f7fe fcda 	bl	8006908 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007f5a:	f7fe fd01 	bl	8006960 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8007f5e:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <eTaskGetState+0x9c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d004      	beq.n	8007f72 <eTaskGetState+0x4e>
 8007f68:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <eTaskGetState+0xa0>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d102      	bne.n	8007f78 <eTaskGetState+0x54>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007f72:	2302      	movs	r3, #2
 8007f74:	75fb      	strb	r3, [r7, #23]
 8007f76:	e019      	b.n	8007fac <eTaskGetState+0x88>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4a13      	ldr	r2, [pc, #76]	; (8007fc8 <eTaskGetState+0xa4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d109      	bne.n	8007f94 <eTaskGetState+0x70>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <eTaskGetState+0x6a>
					{
						eReturn = eSuspended;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	75fb      	strb	r3, [r7, #23]
 8007f8c:	e00e      	b.n	8007fac <eTaskGetState+0x88>
					}
					else
					{
						eReturn = eBlocked;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	75fb      	strb	r3, [r7, #23]
 8007f92:	e00b      	b.n	8007fac <eTaskGetState+0x88>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <eTaskGetState+0xa8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d002      	beq.n	8007fa2 <eTaskGetState+0x7e>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <eTaskGetState+0x84>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007fa2:	2304      	movs	r3, #4
 8007fa4:	75fb      	strb	r3, [r7, #23]
 8007fa6:	e001      	b.n	8007fac <eTaskGetState+0x88>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	080114a0 	.word	0x080114a0
 8007fbc:	20014308 	.word	0x20014308
 8007fc0:	200143ac 	.word	0x200143ac
 8007fc4:	200143b0 	.word	0x200143b0
 8007fc8:	200143e0 	.word	0x200143e0
 8007fcc:	200143c8 	.word	0x200143c8

08007fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <vTaskStartScheduler+0x7c>)
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2282      	movs	r2, #130	; 0x82
 8007fe2:	491b      	ldr	r1, [pc, #108]	; (8008050 <vTaskStartScheduler+0x80>)
 8007fe4:	481b      	ldr	r0, [pc, #108]	; (8008054 <vTaskStartScheduler+0x84>)
 8007fe6:	f7ff fd3d 	bl	8007a64 <xTaskCreate>
 8007fea:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d102      	bne.n	8007ff8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8007ff2:	f000 ffe1 	bl	8008fb8 <xTimerCreateTimerTask>
 8007ff6:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d119      	bne.n	8008032 <vTaskStartScheduler+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ffe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008002:	b672      	cpsid	i
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	b662      	cpsie	i
 8008012:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <vTaskStartScheduler+0x88>)
 8008016:	f04f 32ff 	mov.w	r2, #4294967295
 800801a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <vTaskStartScheduler+0x8c>)
 800801e:	2201      	movs	r2, #1
 8008020:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <vTaskStartScheduler+0x90>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008028:	f002 fe26 	bl	800ac78 <HW_SYS_TimerRunTime_Config>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800802c:	f7fe fc04 	bl	8006838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008030:	e008      	b.n	8008044 <vTaskStartScheduler+0x74>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d104      	bne.n	8008044 <vTaskStartScheduler+0x74>
 800803a:	490a      	ldr	r1, [pc, #40]	; (8008064 <vTaskStartScheduler+0x94>)
 800803c:	f240 7084 	movw	r0, #1924	; 0x784
 8008040:	f7f9 fcde 	bl	8001a00 <vAssertCalled>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20014418 	.word	0x20014418
 8008050:	080114b8 	.word	0x080114b8
 8008054:	08008801 	.word	0x08008801
 8008058:	20014414 	.word	0x20014414
 800805c:	20014400 	.word	0x20014400
 8008060:	200143f8 	.word	0x200143f8
 8008064:	080114a0 	.word	0x080114a0

08008068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <vTaskSuspendAll+0x18>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	4a03      	ldr	r2, [pc, #12]	; (8008080 <vTaskSuspendAll+0x18>)
 8008074:	6013      	str	r3, [r2, #0]
}
 8008076:	bf00      	nop
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	2001441c 	.word	0x2001441c

08008084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800808e:	2300      	movs	r3, #0
 8008090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008092:	4b3e      	ldr	r3, [pc, #248]	; (800818c <xTaskResumeAll+0x108>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <xTaskResumeAll+0x20>
 800809a:	493d      	ldr	r1, [pc, #244]	; (8008190 <xTaskResumeAll+0x10c>)
 800809c:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 80080a0:	f7f9 fcae 	bl	8001a00 <vAssertCalled>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080a4:	f7fe fc30 	bl	8006908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080a8:	4b38      	ldr	r3, [pc, #224]	; (800818c <xTaskResumeAll+0x108>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	4a37      	ldr	r2, [pc, #220]	; (800818c <xTaskResumeAll+0x108>)
 80080b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b2:	4b36      	ldr	r3, [pc, #216]	; (800818c <xTaskResumeAll+0x108>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d161      	bne.n	800817e <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080ba:	4b36      	ldr	r3, [pc, #216]	; (8008194 <xTaskResumeAll+0x110>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d05d      	beq.n	800817e <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080c2:	e02e      	b.n	8008122 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80080c4:	4b34      	ldr	r3, [pc, #208]	; (8008198 <xTaskResumeAll+0x114>)
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3318      	adds	r3, #24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fb0f 	bl	80066f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fb0a 	bl	80066f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	2201      	movs	r2, #1
 80080e6:	409a      	lsls	r2, r3
 80080e8:	4b2c      	ldr	r3, [pc, #176]	; (800819c <xTaskResumeAll+0x118>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	4a2b      	ldr	r2, [pc, #172]	; (800819c <xTaskResumeAll+0x118>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a28      	ldr	r2, [pc, #160]	; (80081a0 <xTaskResumeAll+0x11c>)
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe fa95 	bl	8006638 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <xTaskResumeAll+0x120>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 800811c:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <xTaskResumeAll+0x124>)
 800811e:	2201      	movs	r2, #1
 8008120:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008122:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <xTaskResumeAll+0x114>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1cc      	bne.n	80080c4 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008130:	f000 fcd6 	bl	8008ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008134:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <xTaskResumeAll+0x128>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008140:	f000 f8e4 	bl	800830c <xTaskIncrementTick>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800814a:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <xTaskResumeAll+0x124>)
 800814c:	2201      	movs	r2, #1
 800814e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3b01      	subs	r3, #1
 8008154:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f1      	bne.n	8008140 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 800815c:	4b13      	ldr	r3, [pc, #76]	; (80081ac <xTaskResumeAll+0x128>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008162:	4b11      	ldr	r3, [pc, #68]	; (80081a8 <xTaskResumeAll+0x124>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800816a:	2301      	movs	r3, #1
 800816c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <xTaskResumeAll+0x12c>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800817e:	f7fe fbef 	bl	8006960 <vPortExitCritical>

	return xAlreadyYielded;
 8008182:	68bb      	ldr	r3, [r7, #8]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	2001441c 	.word	0x2001441c
 8008190:	080114a0 	.word	0x080114a0
 8008194:	200143f4 	.word	0x200143f4
 8008198:	200143b4 	.word	0x200143b4
 800819c:	200143fc 	.word	0x200143fc
 80081a0:	2001430c 	.word	0x2001430c
 80081a4:	20014308 	.word	0x20014308
 80081a8:	20014408 	.word	0x20014408
 80081ac:	20014404 	.word	0x20014404
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <xTaskGetTickCount+0x1c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081c0:	687b      	ldr	r3, [r7, #4]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	200143f8 	.word	0x200143f8

080081d4 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80081d8:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <uxTaskGetNumberOfTasks+0x14>)
 80081da:	681b      	ldr	r3, [r3, #0]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	200143f4 	.word	0x200143f4

080081ec <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	2306      	movs	r3, #6
 80081fe:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8008200:	f7ff ff32 	bl	8008068 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8008204:	4b3b      	ldr	r3, [pc, #236]	; (80082f4 <uxTaskGetSystemState+0x108>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	429a      	cmp	r2, r3
 800820c:	d36b      	bcc.n	80082e6 <uxTaskGetSystemState+0xfa>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3b01      	subs	r3, #1
 8008212:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	461a      	mov	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	1898      	adds	r0, r3, r2
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4a32      	ldr	r2, [pc, #200]	; (80082f8 <uxTaskGetSystemState+0x10c>)
 8008230:	4413      	add	r3, r2
 8008232:	2201      	movs	r2, #1
 8008234:	4619      	mov	r1, r3
 8008236:	f000 fbd5 	bl	80089e4 <prvListTasksWithinSingleList>
 800823a:	4602      	mov	r2, r0
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e2      	bne.n	800820e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	1898      	adds	r0, r3, r2
 8008258:	4b28      	ldr	r3, [pc, #160]	; (80082fc <uxTaskGetSystemState+0x110>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2202      	movs	r2, #2
 800825e:	4619      	mov	r1, r3
 8008260:	f000 fbc0 	bl	80089e4 <prvListTasksWithinSingleList>
 8008264:	4602      	mov	r2, r0
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4613      	mov	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	461a      	mov	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	1898      	adds	r0, r3, r2
 800827c:	4b20      	ldr	r3, [pc, #128]	; (8008300 <uxTaskGetSystemState+0x114>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2202      	movs	r2, #2
 8008282:	4619      	mov	r1, r3
 8008284:	f000 fbae 	bl	80089e4 <prvListTasksWithinSingleList>
 8008288:	4602      	mov	r2, r0
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4613      	mov	r3, r2
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	461a      	mov	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	2204      	movs	r2, #4
 80082a2:	4918      	ldr	r1, [pc, #96]	; (8008304 <uxTaskGetSystemState+0x118>)
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fb9d 	bl	80089e4 <prvListTasksWithinSingleList>
 80082aa:	4602      	mov	r2, r0
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4413      	add	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	461a      	mov	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	2203      	movs	r2, #3
 80082c4:	4910      	ldr	r1, [pc, #64]	; (8008308 <uxTaskGetSystemState+0x11c>)
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fb8c 	bl	80089e4 <prvListTasksWithinSingleList>
 80082cc:	4602      	mov	r2, r0
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	4413      	add	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <uxTaskGetSystemState+0xfa>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80082da:	f002 fd03 	bl	800ace4 <HW_SYS_GetRunTimeTicks>
 80082de:	4603      	mov	r3, r0
 80082e0:	461a      	mov	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80082e6:	f7ff fecd 	bl	8008084 <xTaskResumeAll>

		return uxTask;
 80082ea:	697b      	ldr	r3, [r7, #20]
	}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200143f4 	.word	0x200143f4
 80082f8:	2001430c 	.word	0x2001430c
 80082fc:	200143ac 	.word	0x200143ac
 8008300:	200143b0 	.word	0x200143b0
 8008304:	200143c8 	.word	0x200143c8
 8008308:	200143e0 	.word	0x200143e0

0800830c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008316:	4b4e      	ldr	r3, [pc, #312]	; (8008450 <xTaskIncrementTick+0x144>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f040 8087 	bne.w	800842e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8008320:	4b4c      	ldr	r3, [pc, #304]	; (8008454 <xTaskIncrementTick+0x148>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008328:	4a4a      	ldr	r2, [pc, #296]	; (8008454 <xTaskIncrementTick+0x148>)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11a      	bne.n	800836a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008334:	4b48      	ldr	r3, [pc, #288]	; (8008458 <xTaskIncrementTick+0x14c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <xTaskIncrementTick+0x3c>
 800833e:	4947      	ldr	r1, [pc, #284]	; (800845c <xTaskIncrementTick+0x150>)
 8008340:	f640 10d9 	movw	r0, #2521	; 0x9d9
 8008344:	f7f9 fb5c 	bl	8001a00 <vAssertCalled>
 8008348:	4b43      	ldr	r3, [pc, #268]	; (8008458 <xTaskIncrementTick+0x14c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	4b44      	ldr	r3, [pc, #272]	; (8008460 <xTaskIncrementTick+0x154>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a41      	ldr	r2, [pc, #260]	; (8008458 <xTaskIncrementTick+0x14c>)
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4a42      	ldr	r2, [pc, #264]	; (8008460 <xTaskIncrementTick+0x154>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	4b41      	ldr	r3, [pc, #260]	; (8008464 <xTaskIncrementTick+0x158>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3301      	adds	r3, #1
 8008362:	4a40      	ldr	r2, [pc, #256]	; (8008464 <xTaskIncrementTick+0x158>)
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	f000 fbbb 	bl	8008ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800836a:	4b3f      	ldr	r3, [pc, #252]	; (8008468 <xTaskIncrementTick+0x15c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	429a      	cmp	r2, r3
 8008372:	d34d      	bcc.n	8008410 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008374:	4b38      	ldr	r3, [pc, #224]	; (8008458 <xTaskIncrementTick+0x14c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <xTaskIncrementTick+0x76>
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <xTaskIncrementTick+0x78>
 8008382:	2300      	movs	r3, #0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008388:	4b37      	ldr	r3, [pc, #220]	; (8008468 <xTaskIncrementTick+0x15c>)
 800838a:	f04f 32ff 	mov.w	r2, #4294967295
 800838e:	601a      	str	r2, [r3, #0]
					break;
 8008390:	e03e      	b.n	8008410 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008392:	4b31      	ldr	r3, [pc, #196]	; (8008458 <xTaskIncrementTick+0x14c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d203      	bcs.n	80083b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083aa:	4a2f      	ldr	r2, [pc, #188]	; (8008468 <xTaskIncrementTick+0x15c>)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6013      	str	r3, [r2, #0]
						break;
 80083b0:	e02e      	b.n	8008410 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe f99c 	bl	80066f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3318      	adds	r3, #24
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe f993 	bl	80066f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	2201      	movs	r2, #1
 80083d4:	409a      	lsls	r2, r3
 80083d6:	4b25      	ldr	r3, [pc, #148]	; (800846c <xTaskIncrementTick+0x160>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4313      	orrs	r3, r2
 80083dc:	4a23      	ldr	r2, [pc, #140]	; (800846c <xTaskIncrementTick+0x160>)
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4a20      	ldr	r2, [pc, #128]	; (8008470 <xTaskIncrementTick+0x164>)
 80083ee:	441a      	add	r2, r3
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f7fe f91e 	bl	8006638 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <xTaskIncrementTick+0x168>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	429a      	cmp	r2, r3
 8008408:	d3b4      	bcc.n	8008374 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 800840e:	e7b1      	b.n	8008374 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008410:	4b18      	ldr	r3, [pc, #96]	; (8008474 <xTaskIncrementTick+0x168>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	4916      	ldr	r1, [pc, #88]	; (8008470 <xTaskIncrementTick+0x164>)
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d907      	bls.n	8008438 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e004      	b.n	8008438 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <xTaskIncrementTick+0x16c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3301      	adds	r3, #1
 8008434:	4a10      	ldr	r2, [pc, #64]	; (8008478 <xTaskIncrementTick+0x16c>)
 8008436:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008438:	4b10      	ldr	r3, [pc, #64]	; (800847c <xTaskIncrementTick+0x170>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008444:	697b      	ldr	r3, [r7, #20]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2001441c 	.word	0x2001441c
 8008454:	200143f8 	.word	0x200143f8
 8008458:	200143ac 	.word	0x200143ac
 800845c:	080114a0 	.word	0x080114a0
 8008460:	200143b0 	.word	0x200143b0
 8008464:	2001440c 	.word	0x2001440c
 8008468:	20014414 	.word	0x20014414
 800846c:	200143fc 	.word	0x200143fc
 8008470:	2001430c 	.word	0x2001430c
 8008474:	20014308 	.word	0x20014308
 8008478:	20014404 	.word	0x20014404
 800847c:	20014408 	.word	0x20014408

08008480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008486:	4b43      	ldr	r3, [pc, #268]	; (8008594 <vTaskSwitchContext+0x114>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800848e:	4b42      	ldr	r3, [pc, #264]	; (8008598 <vTaskSwitchContext+0x118>)
 8008490:	2201      	movs	r2, #1
 8008492:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008494:	e07a      	b.n	800858c <vTaskSwitchContext+0x10c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8008496:	4b40      	ldr	r3, [pc, #256]	; (8008598 <vTaskSwitchContext+0x118>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800849c:	f002 fc22 	bl	800ace4 <HW_SYS_GetRunTimeTicks>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	4b3d      	ldr	r3, [pc, #244]	; (800859c <vTaskSwitchContext+0x11c>)
 80084a6:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80084a8:	4b3c      	ldr	r3, [pc, #240]	; (800859c <vTaskSwitchContext+0x11c>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b3c      	ldr	r3, [pc, #240]	; (80085a0 <vTaskSwitchContext+0x120>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d909      	bls.n	80084c8 <vTaskSwitchContext+0x48>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80084b4:	4b3b      	ldr	r3, [pc, #236]	; (80085a4 <vTaskSwitchContext+0x124>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084ba:	4a38      	ldr	r2, [pc, #224]	; (800859c <vTaskSwitchContext+0x11c>)
 80084bc:	6810      	ldr	r0, [r2, #0]
 80084be:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <vTaskSwitchContext+0x120>)
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	1a82      	subs	r2, r0, r2
 80084c4:	440a      	add	r2, r1
 80084c6:	655a      	str	r2, [r3, #84]	; 0x54
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
 80084c8:	4b34      	ldr	r3, [pc, #208]	; (800859c <vTaskSwitchContext+0x11c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a34      	ldr	r2, [pc, #208]	; (80085a0 <vTaskSwitchContext+0x120>)
 80084ce:	6013      	str	r3, [r2, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80084d0:	4b34      	ldr	r3, [pc, #208]	; (80085a4 <vTaskSwitchContext+0x124>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d111      	bne.n	800850c <vTaskSwitchContext+0x8c>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	3304      	adds	r3, #4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d10b      	bne.n	800850c <vTaskSwitchContext+0x8c>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3308      	adds	r3, #8
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d105      	bne.n	800850c <vTaskSwitchContext+0x8c>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	330c      	adds	r3, #12
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	d008      	beq.n	800851e <vTaskSwitchContext+0x9e>
 800850c:	4b25      	ldr	r3, [pc, #148]	; (80085a4 <vTaskSwitchContext+0x124>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b24      	ldr	r3, [pc, #144]	; (80085a4 <vTaskSwitchContext+0x124>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3334      	adds	r3, #52	; 0x34
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7f9 fa61 	bl	80019e0 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800851e:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <vTaskSwitchContext+0x128>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	fab3 f383 	clz	r3, r3
 800852a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	f1c3 031f 	rsb	r3, r3, #31
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	491d      	ldr	r1, [pc, #116]	; (80085ac <vTaskSwitchContext+0x12c>)
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <vTaskSwitchContext+0xd2>
 8008548:	4919      	ldr	r1, [pc, #100]	; (80085b0 <vTaskSwitchContext+0x130>)
 800854a:	f640 20f6 	movw	r0, #2806	; 0xaf6
 800854e:	f7f9 fa57 	bl	8001a00 <vAssertCalled>
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4a13      	ldr	r2, [pc, #76]	; (80085ac <vTaskSwitchContext+0x12c>)
 800855e:	4413      	add	r3, r2
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3308      	adds	r3, #8
 8008574:	429a      	cmp	r2, r3
 8008576:	d104      	bne.n	8008582 <vTaskSwitchContext+0x102>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	605a      	str	r2, [r3, #4]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	4a06      	ldr	r2, [pc, #24]	; (80085a4 <vTaskSwitchContext+0x124>)
 800858a:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800858c:	bf00      	nop
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	2001441c 	.word	0x2001441c
 8008598:	20014408 	.word	0x20014408
 800859c:	20014424 	.word	0x20014424
 80085a0:	20014420 	.word	0x20014420
 80085a4:	20014308 	.word	0x20014308
 80085a8:	200143fc 	.word	0x200143fc
 80085ac:	2001430c 	.word	0x2001430c
 80085b0:	080114a0 	.word	0x080114a0

080085b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <vTaskPlaceOnEventList+0x1a>
 80085c4:	4909      	ldr	r1, [pc, #36]	; (80085ec <vTaskPlaceOnEventList+0x38>)
 80085c6:	f640 3006 	movw	r0, #2822	; 0xb06
 80085ca:	f7f9 fa19 	bl	8001a00 <vAssertCalled>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085ce:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <vTaskPlaceOnEventList+0x3c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3318      	adds	r3, #24
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe f852 	bl	8006680 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085dc:	2101      	movs	r1, #1
 80085de:	6838      	ldr	r0, [r7, #0]
 80085e0:	f000 fc84 	bl	8008eec <prvAddCurrentTaskToDelayedList>
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	080114a0 	.word	0x080114a0
 80085f0:	20014308 	.word	0x20014308

080085f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <vTaskPlaceOnEventListRestricted+0x1c>
 8008606:	490d      	ldr	r1, [pc, #52]	; (800863c <vTaskPlaceOnEventListRestricted+0x48>)
 8008608:	f640 3031 	movw	r0, #2865	; 0xb31
 800860c:	f7f9 f9f8 	bl	8001a00 <vAssertCalled>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <vTaskPlaceOnEventListRestricted+0x4c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3318      	adds	r3, #24
 8008616:	4619      	mov	r1, r3
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7fe f80d 	bl	8006638 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
 8008628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	68b8      	ldr	r0, [r7, #8]
 800862e:	f000 fc5d 	bl	8008eec <prvAddCurrentTaskToDelayedList>
	}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	080114a0 	.word	0x080114a0
 8008640:	20014308 	.word	0x20014308

08008644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d104      	bne.n	8008664 <xTaskRemoveFromEventList+0x20>
 800865a:	4922      	ldr	r1, [pc, #136]	; (80086e4 <xTaskRemoveFromEventList+0xa0>)
 800865c:	f640 3061 	movw	r0, #2913	; 0xb61
 8008660:	f7f9 f9ce 	bl	8001a00 <vAssertCalled>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3318      	adds	r3, #24
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe f843 	bl	80066f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800866e:	4b1e      	ldr	r3, [pc, #120]	; (80086e8 <xTaskRemoveFromEventList+0xa4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11c      	bne.n	80086b0 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	3304      	adds	r3, #4
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe f83a 	bl	80066f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	2201      	movs	r2, #1
 8008686:	409a      	lsls	r2, r3
 8008688:	4b18      	ldr	r3, [pc, #96]	; (80086ec <xTaskRemoveFromEventList+0xa8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4313      	orrs	r3, r2
 800868e:	4a17      	ldr	r2, [pc, #92]	; (80086ec <xTaskRemoveFromEventList+0xa8>)
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4a14      	ldr	r2, [pc, #80]	; (80086f0 <xTaskRemoveFromEventList+0xac>)
 80086a0:	441a      	add	r2, r3
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3304      	adds	r3, #4
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f7fd ffc5 	bl	8006638 <vListInsertEnd>
 80086ae:	e005      	b.n	80086bc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	3318      	adds	r3, #24
 80086b4:	4619      	mov	r1, r3
 80086b6:	480f      	ldr	r0, [pc, #60]	; (80086f4 <xTaskRemoveFromEventList+0xb0>)
 80086b8:	f7fd ffbe 	bl	8006638 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <xTaskRemoveFromEventList+0xb4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d905      	bls.n	80086d6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086ca:	2301      	movs	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <xTaskRemoveFromEventList+0xb8>)
 80086d0:	2201      	movs	r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e001      	b.n	80086da <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80086da:	68fb      	ldr	r3, [r7, #12]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	080114a0 	.word	0x080114a0
 80086e8:	2001441c 	.word	0x2001441c
 80086ec:	200143fc 	.word	0x200143fc
 80086f0:	2001430c 	.word	0x2001430c
 80086f4:	200143b4 	.word	0x200143b4
 80086f8:	20014308 	.word	0x20014308
 80086fc:	20014408 	.word	0x20014408

08008700 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <vTaskSetTimeOutState+0x18>
 800870e:	4908      	ldr	r1, [pc, #32]	; (8008730 <vTaskSetTimeOutState+0x30>)
 8008710:	f640 30c1 	movw	r0, #3009	; 0xbc1
 8008714:	f7f9 f974 	bl	8001a00 <vAssertCalled>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <vTaskSetTimeOutState+0x34>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <vTaskSetTimeOutState+0x38>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	605a      	str	r2, [r3, #4]
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	080114a0 	.word	0x080114a0
 8008734:	2001440c 	.word	0x2001440c
 8008738:	200143f8 	.word	0x200143f8

0800873c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <xTaskCheckForTimeOut+0x1a>
 800874c:	4923      	ldr	r1, [pc, #140]	; (80087dc <xTaskCheckForTimeOut+0xa0>)
 800874e:	f640 30cb 	movw	r0, #3019	; 0xbcb
 8008752:	f7f9 f955 	bl	8001a00 <vAssertCalled>
	configASSERT( pxTicksToWait );
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <xTaskCheckForTimeOut+0x2a>
 800875c:	491f      	ldr	r1, [pc, #124]	; (80087dc <xTaskCheckForTimeOut+0xa0>)
 800875e:	f640 30cc 	movw	r0, #3020	; 0xbcc
 8008762:	f7f9 f94d 	bl	8001a00 <vAssertCalled>

	taskENTER_CRITICAL();
 8008766:	f7fe f8cf 	bl	8006908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800876a:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <xTaskCheckForTimeOut+0xa4>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d102      	bne.n	8008780 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e026      	b.n	80087ce <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <xTaskCheckForTimeOut+0xa8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d007      	beq.n	800879c <xTaskCheckForTimeOut+0x60>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	d802      	bhi.n	800879c <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008796:	2301      	movs	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	e018      	b.n	80087ce <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d20e      	bcs.n	80087ca <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6859      	ldr	r1, [r3, #4]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	1acb      	subs	r3, r1, r3
 80087b8:	441a      	add	r2, r3
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff ff9e 	bl	8008700 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e001      	b.n	80087ce <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ce:	f7fe f8c7 	bl	8006960 <vPortExitCritical>

	return xReturn;
 80087d2:	68fb      	ldr	r3, [r7, #12]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	080114a0 	.word	0x080114a0
 80087e0:	200143f8 	.word	0x200143f8
 80087e4:	2001440c 	.word	0x2001440c

080087e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087ec:	4b03      	ldr	r3, [pc, #12]	; (80087fc <vTaskMissedYield+0x14>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	601a      	str	r2, [r3, #0]
}
 80087f2:	bf00      	nop
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	20014408 	.word	0x20014408

08008800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008808:	f000 f852 	bl	80088b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <prvIdleTask+0x28>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d9f9      	bls.n	8008808 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <prvIdleTask+0x2c>)
 8008816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8008824:	e7f0      	b.n	8008808 <prvIdleTask+0x8>
 8008826:	bf00      	nop
 8008828:	2001430c 	.word	0x2001430c
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008836:	2300      	movs	r3, #0
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	e00c      	b.n	8008856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4a12      	ldr	r2, [pc, #72]	; (8008890 <prvInitialiseTaskLists+0x60>)
 8008848:	4413      	add	r3, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fd fec6 	bl	80065dc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3301      	adds	r3, #1
 8008854:	607b      	str	r3, [r7, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b05      	cmp	r3, #5
 800885a:	d9ef      	bls.n	800883c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800885c:	480d      	ldr	r0, [pc, #52]	; (8008894 <prvInitialiseTaskLists+0x64>)
 800885e:	f7fd febd 	bl	80065dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008862:	480d      	ldr	r0, [pc, #52]	; (8008898 <prvInitialiseTaskLists+0x68>)
 8008864:	f7fd feba 	bl	80065dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008868:	480c      	ldr	r0, [pc, #48]	; (800889c <prvInitialiseTaskLists+0x6c>)
 800886a:	f7fd feb7 	bl	80065dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800886e:	480c      	ldr	r0, [pc, #48]	; (80088a0 <prvInitialiseTaskLists+0x70>)
 8008870:	f7fd feb4 	bl	80065dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008874:	480b      	ldr	r0, [pc, #44]	; (80088a4 <prvInitialiseTaskLists+0x74>)
 8008876:	f7fd feb1 	bl	80065dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <prvInitialiseTaskLists+0x78>)
 800887c:	4a05      	ldr	r2, [pc, #20]	; (8008894 <prvInitialiseTaskLists+0x64>)
 800887e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <prvInitialiseTaskLists+0x7c>)
 8008882:	4a05      	ldr	r2, [pc, #20]	; (8008898 <prvInitialiseTaskLists+0x68>)
 8008884:	601a      	str	r2, [r3, #0]
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	2001430c 	.word	0x2001430c
 8008894:	20014384 	.word	0x20014384
 8008898:	20014398 	.word	0x20014398
 800889c:	200143b4 	.word	0x200143b4
 80088a0:	200143c8 	.word	0x200143c8
 80088a4:	200143e0 	.word	0x200143e0
 80088a8:	200143ac 	.word	0x200143ac
 80088ac:	200143b0 	.word	0x200143b0

080088b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088b6:	e028      	b.n	800890a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80088b8:	f7ff fbd6 	bl	8008068 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80088bc:	4b17      	ldr	r3, [pc, #92]	; (800891c <prvCheckTasksWaitingTermination+0x6c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bf0c      	ite	eq
 80088c4:	2301      	moveq	r3, #1
 80088c6:	2300      	movne	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80088cc:	f7ff fbda 	bl	8008084 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d119      	bne.n	800890a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80088d6:	f7fe f817 	bl	8006908 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <prvCheckTasksWaitingTermination+0x6c>)
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	3304      	adds	r3, #4
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fd ff04 	bl	80066f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <prvCheckTasksWaitingTermination+0x70>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <prvCheckTasksWaitingTermination+0x70>)
 80088f4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <prvCheckTasksWaitingTermination+0x74>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a09      	ldr	r2, [pc, #36]	; (8008924 <prvCheckTasksWaitingTermination+0x74>)
 80088fe:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8008900:	f7fe f82e 	bl	8006960 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8008904:	6838      	ldr	r0, [r7, #0]
 8008906:	f000 f8db 	bl	8008ac0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800890a:	4b06      	ldr	r3, [pc, #24]	; (8008924 <prvCheckTasksWaitingTermination+0x74>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1d2      	bne.n	80088b8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200143c8 	.word	0x200143c8
 8008920:	200143f4 	.word	0x200143f4
 8008924:	200143dc 	.word	0x200143dc

08008928 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <vTaskGetInfo+0x1a>
 800893c:	4b28      	ldr	r3, [pc, #160]	; (80089e0 <vTaskGetInfo+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	e000      	b.n	8008944 <vTaskGetInfo+0x1c>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	609a      	str	r2, [r3, #8]
		#if ( INCLUDE_vTaskSuspend == 1 )
		{
			/* If the task is in the suspended list then there is a chance it is
			actually just blocked indefinitely - so really it should be reported as
			being in the Blocked state. */
			if( pxTaskStatus->eCurrentState == eSuspended )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	7b1b      	ldrb	r3, [r3, #12]
 8008972:	2b03      	cmp	r3, #3
 8008974:	d10a      	bne.n	800898c <vTaskGetInfo+0x64>
			{
				vTaskSuspendAll();
 8008976:	f7ff fb77 	bl	8008068 <vTaskSuspendAll>
				{
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <vTaskGetInfo+0x60>
					{
						pxTaskStatus->eCurrentState = eBlocked;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2202      	movs	r2, #2
 8008986:	731a      	strb	r2, [r3, #12]
					}
				}
				xTaskResumeAll();
 8008988:	f7ff fb7c 	bl	8008084 <xTaskResumeAll>
		}
		#endif /* INCLUDE_vTaskSuspend */

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the value
		of eState passed into this function is eInvalid - otherwise the state is
		just set to whatever is passed in. */
		if( eState != eInvalid )
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d003      	beq.n	80089aa <vTaskGetInfo+0x82>
		{
			pxTaskStatus->eCurrentState = eState;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	78fa      	ldrb	r2, [r7, #3]
 80089a6:	731a      	strb	r2, [r3, #12]
 80089a8:	e006      	b.n	80089b8 <vTaskGetInfo+0x90>
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff faba 	bl	8007f24 <eTaskGetState>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d009      	beq.n	80089d2 <vTaskGetInfo+0xaa>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f860 	bl	8008a88 <prvTaskCheckFreeStackSpace>
 80089c8:	4603      	mov	r3, r0
 80089ca:	461a      	mov	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80089d0:	e002      	b.n	80089d8 <vTaskGetInfo+0xb0>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2200      	movs	r2, #0
 80089d6:	841a      	strh	r2, [r3, #32]
		}
	}
 80089d8:	bf00      	nop
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20014308 	.word	0x20014308

080089e4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	; 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	71fb      	strb	r3, [r7, #7]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d03f      	beq.n	8008a7e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	623b      	str	r3, [r7, #32]
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	605a      	str	r2, [r3, #4]
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	3308      	adds	r3, #8
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d104      	bne.n	8008a22 <prvListTasksWithinSingleList+0x3e>
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	605a      	str	r2, [r3, #4]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	61bb      	str	r3, [r7, #24]
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	605a      	str	r2, [r3, #4]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d104      	bne.n	8008a4e <prvListTasksWithinSingleList+0x6a>
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	605a      	str	r2, [r3, #4]
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8008a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a58:	4613      	mov	r3, r2
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	461a      	mov	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	1899      	adds	r1, r3, r2
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	6978      	ldr	r0, [r7, #20]
 8008a6c:	f7ff ff5c 	bl	8008928 <vTaskGetInfo>
				uxTask++;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	3301      	adds	r3, #1
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d1d5      	bne.n	8008a2a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3728      	adds	r7, #40	; 0x28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008a94:	e005      	b.n	8008aa2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2ba5      	cmp	r3, #165	; 0xa5
 8008aa8:	d0f5      	beq.n	8008a96 <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	089b      	lsrs	r3, r3, #2
 8008aae:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	b29b      	uxth	r3, r3
	}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe f8d5 	bl	8006c7c <vPortFree>
			vPortFree( pxTCB );
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fe f8d2 	bl	8006c7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <prvResetNextTaskUnblockTime+0x44>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <prvResetNextTaskUnblockTime+0x14>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <prvResetNextTaskUnblockTime+0x16>
 8008af4:	2300      	movs	r3, #0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <prvResetNextTaskUnblockTime+0x48>)
 8008afc:	f04f 32ff 	mov.w	r2, #4294967295
 8008b00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b02:	e008      	b.n	8008b16 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b04:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <prvResetNextTaskUnblockTime+0x44>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <prvResetNextTaskUnblockTime+0x48>)
 8008b14:	6013      	str	r3, [r2, #0]
	}
}
 8008b16:	bf00      	nop
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	200143ac 	.word	0x200143ac
 8008b28:	20014414 	.word	0x20014414

08008b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <xTaskGetSchedulerState+0x34>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	e008      	b.n	8008b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b40:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <xTaskGetSchedulerState+0x38>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	607b      	str	r3, [r7, #4]
 8008b4c:	e001      	b.n	8008b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b52:	687b      	ldr	r3, [r7, #4]
	}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20014400 	.word	0x20014400
 8008b64:	2001441c 	.word	0x2001441c

08008b68 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d062      	beq.n	8008c40 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	4b32      	ldr	r3, [pc, #200]	; (8008c48 <vTaskPriorityInherit+0xe0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d25b      	bcs.n	8008c40 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	db06      	blt.n	8008b9e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b90:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <vTaskPriorityInherit+0xe0>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	f1c3 0206 	rsb	r2, r3, #6
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6959      	ldr	r1, [r3, #20]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4a27      	ldr	r2, [pc, #156]	; (8008c4c <vTaskPriorityInherit+0xe4>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	d101      	bne.n	8008bba <vTaskPriorityInherit+0x52>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <vTaskPriorityInherit+0x54>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d03a      	beq.n	8008c36 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fd fd95 	bl	80066f4 <uxListRemove>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d115      	bne.n	8008bfc <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd4:	491d      	ldr	r1, [pc, #116]	; (8008c4c <vTaskPriorityInherit+0xe4>)
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <vTaskPriorityInherit+0x94>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	2201      	movs	r2, #1
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	43da      	mvns	r2, r3
 8008bf2:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <vTaskPriorityInherit+0xe8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <vTaskPriorityInherit+0xe8>)
 8008bfa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bfc:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <vTaskPriorityInherit+0xe0>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <vTaskPriorityInherit+0xe8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <vTaskPriorityInherit+0xe8>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <vTaskPriorityInherit+0xe4>)
 8008c26:	441a      	add	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fd fd02 	bl	8006638 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c34:	e004      	b.n	8008c40 <vTaskPriorityInherit+0xd8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c36:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <vTaskPriorityInherit+0xe0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20014308 	.word	0x20014308
 8008c4c:	2001430c 	.word	0x2001430c
 8008c50:	200143fc 	.word	0x200143fc

08008c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d062      	beq.n	8008d30 <xTaskPriorityDisinherit+0xdc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c6a:	4b34      	ldr	r3, [pc, #208]	; (8008d3c <xTaskPriorityDisinherit+0xe8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d004      	beq.n	8008c7e <xTaskPriorityDisinherit+0x2a>
 8008c74:	4932      	ldr	r1, [pc, #200]	; (8008d40 <xTaskPriorityDisinherit+0xec>)
 8008c76:	f640 60c7 	movw	r0, #3783	; 0xec7
 8008c7a:	f7f8 fec1 	bl	8001a00 <vAssertCalled>

			configASSERT( pxTCB->uxMutexesHeld );
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <xTaskPriorityDisinherit+0x3c>
 8008c86:	492e      	ldr	r1, [pc, #184]	; (8008d40 <xTaskPriorityDisinherit+0xec>)
 8008c88:	f640 60c9 	movw	r0, #3785	; 0xec9
 8008c8c:	f7f8 feb8 	bl	8001a00 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d044      	beq.n	8008d30 <xTaskPriorityDisinherit+0xdc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d140      	bne.n	8008d30 <xTaskPriorityDisinherit+0xdc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd fd1e 	bl	80066f4 <uxListRemove>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d115      	bne.n	8008cea <xTaskPriorityDisinherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	4920      	ldr	r1, [pc, #128]	; (8008d44 <xTaskPriorityDisinherit+0xf0>)
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xTaskPriorityDisinherit+0x96>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	2201      	movs	r2, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43da      	mvns	r2, r3
 8008ce0:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <xTaskPriorityDisinherit+0xf4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <xTaskPriorityDisinherit+0xf4>)
 8008ce8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	f1c3 0206 	rsb	r2, r3, #6
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	2201      	movs	r2, #1
 8008d04:	409a      	lsls	r2, r3
 8008d06:	4b10      	ldr	r3, [pc, #64]	; (8008d48 <xTaskPriorityDisinherit+0xf4>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	4a0e      	ldr	r2, [pc, #56]	; (8008d48 <xTaskPriorityDisinherit+0xf4>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <xTaskPriorityDisinherit+0xf0>)
 8008d1e:	441a      	add	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fd fc86 	bl	8006638 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d30:	68fb      	ldr	r3, [r7, #12]
	}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20014308 	.word	0x20014308
 8008d40:	080114a0 	.word	0x080114a0
 8008d44:	2001430c 	.word	0x2001430c
 8008d48:	200143fc 	.word	0x200143fc

08008d4c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f002 fcd9 	bl	800b710 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7f7 fa56 	bl	8000210 <strlen>
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	e007      	b.n	8008d78 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	2220      	movs	r2, #32
 8008d70:	701a      	strb	r2, [r3, #0]
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b0e      	cmp	r3, #14
 8008d7c:	d9f4      	bls.n	8008d68 <prvWriteNameToBuffer+0x1c>
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
	}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop

08008d98 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b089      	sub	sp, #36	; 0x24
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8008da6:	4b45      	ldr	r3, [pc, #276]	; (8008ebc <vTaskList+0x124>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8008dac:	4b43      	ldr	r3, [pc, #268]	; (8008ebc <vTaskList+0x124>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	4613      	mov	r3, r2
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fd fea9 	bl	8006b10 <pvPortMalloc>
 8008dbe:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d075      	beq.n	8008eb2 <vTaskList+0x11a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6938      	ldr	r0, [r7, #16]
 8008dce:	f7ff fa0d 	bl	80081ec <uxTaskGetSystemState>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	e063      	b.n	8008ea4 <vTaskList+0x10c>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	461a      	mov	r2, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4413      	add	r3, r2
 8008dec:	7b1b      	ldrb	r3, [r3, #12]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d817      	bhi.n	8008e24 <vTaskList+0x8c>
 8008df4:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <vTaskList+0x64>)
 8008df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfa:	bf00      	nop
 8008dfc:	08008e0d 	.word	0x08008e0d
 8008e00:	08008e13 	.word	0x08008e13
 8008e04:	08008e19 	.word	0x08008e19
 8008e08:	08008e1f 	.word	0x08008e1f
				{
					case eReady:		cStatus = tskREADY_CHAR;
 8008e0c:	2352      	movs	r3, #82	; 0x52
 8008e0e:	75fb      	strb	r3, [r7, #23]
										break;
 8008e10:	e00b      	b.n	8008e2a <vTaskList+0x92>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8008e12:	2342      	movs	r3, #66	; 0x42
 8008e14:	75fb      	strb	r3, [r7, #23]
										break;
 8008e16:	e008      	b.n	8008e2a <vTaskList+0x92>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8008e18:	2353      	movs	r3, #83	; 0x53
 8008e1a:	75fb      	strb	r3, [r7, #23]
										break;
 8008e1c:	e005      	b.n	8008e2a <vTaskList+0x92>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8008e1e:	2344      	movs	r3, #68	; 0x44
 8008e20:	75fb      	strb	r3, [r7, #23]
										break;
 8008e22:	e002      	b.n	8008e2a <vTaskList+0x92>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 8008e24:	2300      	movs	r3, #0
 8008e26:	75fb      	strb	r3, [r7, #23]
										break;
 8008e28:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	461a      	mov	r2, r3
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	4413      	add	r3, r2
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ff84 	bl	8008d4c <prvWriteNameToBuffer>
 8008e44:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8008e46:	7df9      	ldrb	r1, [r7, #23]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	461a      	mov	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	4413      	add	r3, r2
 8008e58:	6918      	ldr	r0, [r3, #16]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	461a      	mov	r2, r3
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	4413      	add	r3, r2
 8008e6a:	8c1b      	ldrh	r3, [r3, #32]
 8008e6c:	461c      	mov	r4, r3
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	4613      	mov	r3, r2
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	9400      	str	r4, [sp, #0]
 8008e84:	4603      	mov	r3, r0
 8008e86:	460a      	mov	r2, r1
 8008e88:	490d      	ldr	r1, [pc, #52]	; (8008ec0 <vTaskList+0x128>)
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f002 fbfe 	bl	800b68c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7f7 f9bd 	bl	8000210 <strlen>
 8008e96:	4602      	mov	r2, r0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	607b      	str	r3, [r7, #4]
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60bb      	str	r3, [r7, #8]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d397      	bcc.n	8008ddc <vTaskList+0x44>
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8008eac:	6938      	ldr	r0, [r7, #16]
 8008eae:	f7fd fee5 	bl	8006c7c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd90      	pop	{r4, r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	200143f4 	.word	0x200143f4
 8008ec0:	080114c0 	.word	0x080114c0

08008ec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ec8:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ed6:	3201      	adds	r2, #1
 8008ed8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008eda:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008edc:	681b      	ldr	r3, [r3, #0]
	}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	20014308 	.word	0x20014308

08008eec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ef6:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008efc:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fd fbf6 	bl	80066f4 <uxListRemove>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008f0e:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	2201      	movs	r2, #1
 8008f16:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1a:	43da      	mvns	r2, r3
 8008f1c:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4013      	ands	r3, r2
 8008f22:	4a20      	ldr	r2, [pc, #128]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2c:	d10a      	bne.n	8008f44 <prvAddCurrentTaskToDelayedList+0x58>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f34:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	481a      	ldr	r0, [pc, #104]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008f3e:	f7fd fb7b 	bl	8006638 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f42:	e026      	b.n	8008f92 <prvAddCurrentTaskToDelayedList+0xa6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f4c:	4b14      	ldr	r3, [pc, #80]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d209      	bcs.n	8008f70 <prvAddCurrentTaskToDelayedList+0x84>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5c:	4b13      	ldr	r3, [pc, #76]	; (8008fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fd fb89 	bl	8006680 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f6e:	e010      	b.n	8008f92 <prvAddCurrentTaskToDelayedList+0xa6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f7fd fb7f 	bl	8006680 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d202      	bcs.n	8008f92 <prvAddCurrentTaskToDelayedList+0xa6>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008f8c:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200143f8 	.word	0x200143f8
 8008fa0:	20014308 	.word	0x20014308
 8008fa4:	200143fc 	.word	0x200143fc
 8008fa8:	200143e0 	.word	0x200143e0
 8008fac:	200143b0 	.word	0x200143b0
 8008fb0:	200143ac 	.word	0x200143ac
 8008fb4:	20014414 	.word	0x20014414

08008fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fc2:	f000 fa91 	bl	80094e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fc6:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <xTimerCreateTimerTask+0x48>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <xTimerCreateTimerTask+0x4c>)
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2305      	movs	r3, #5
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fdc:	490a      	ldr	r1, [pc, #40]	; (8009008 <xTimerCreateTimerTask+0x50>)
 8008fde:	480b      	ldr	r0, [pc, #44]	; (800900c <xTimerCreateTimerTask+0x54>)
 8008fe0:	f7fe fd40 	bl	8007a64 <xTaskCreate>
 8008fe4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <xTimerCreateTimerTask+0x3e>
 8008fec:	4908      	ldr	r1, [pc, #32]	; (8009010 <xTimerCreateTimerTask+0x58>)
 8008fee:	f240 1033 	movw	r0, #307	; 0x133
 8008ff2:	f7f8 fd05 	bl	8001a00 <vAssertCalled>
	return xReturn;
 8008ff6:	687b      	ldr	r3, [r7, #4]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20014458 	.word	0x20014458
 8009004:	2001445c 	.word	0x2001445c
 8009008:	080114e8 	.word	0x080114e8
 800900c:	08009121 	.word	0x08009121
 8009010:	080114f0 	.word	0x080114f0

08009014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08a      	sub	sp, #40	; 0x28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009022:	2300      	movs	r3, #0
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <xTimerGenericCommand+0x22>
 800902c:	491c      	ldr	r1, [pc, #112]	; (80090a0 <xTimerGenericCommand+0x8c>)
 800902e:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8009032:	f7f8 fce5 	bl	8001a00 <vAssertCalled>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009036:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <xTimerGenericCommand+0x90>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d02a      	beq.n	8009094 <xTimerGenericCommand+0x80>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b05      	cmp	r3, #5
 800904e:	dc18      	bgt.n	8009082 <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009050:	f7ff fd6c 	bl	8008b2c <xTaskGetSchedulerState>
 8009054:	4603      	mov	r3, r0
 8009056:	2b02      	cmp	r3, #2
 8009058:	d109      	bne.n	800906e <xTimerGenericCommand+0x5a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <xTimerGenericCommand+0x90>)
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f107 0114 	add.w	r1, r7, #20
 8009062:	2300      	movs	r3, #0
 8009064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009066:	f7fe f807 	bl	8007078 <xQueueGenericSend>
 800906a:	6278      	str	r0, [r7, #36]	; 0x24
 800906c:	e012      	b.n	8009094 <xTimerGenericCommand+0x80>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800906e:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <xTimerGenericCommand+0x90>)
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	f107 0114 	add.w	r1, r7, #20
 8009076:	2300      	movs	r3, #0
 8009078:	2200      	movs	r2, #0
 800907a:	f7fd fffd 	bl	8007078 <xQueueGenericSend>
 800907e:	6278      	str	r0, [r7, #36]	; 0x24
 8009080:	e008      	b.n	8009094 <xTimerGenericCommand+0x80>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <xTimerGenericCommand+0x90>)
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	f107 0114 	add.w	r1, r7, #20
 800908a:	2300      	movs	r3, #0
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	f7fe f8ef 	bl	8007270 <xQueueGenericSendFromISR>
 8009092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009096:	4618      	mov	r0, r3
 8009098:	3728      	adds	r7, #40	; 0x28
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	080114f0 	.word	0x080114f0
 80090a4:	20014458 	.word	0x20014458

080090a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090b2:	4b19      	ldr	r3, [pc, #100]	; (8009118 <prvProcessExpiredTimer+0x70>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3304      	adds	r3, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fd fb17 	bl	80066f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d11c      	bne.n	8009108 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	18d1      	adds	r1, r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f8c4 	bl	8009268 <prvInsertTimerInActiveList>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d010      	beq.n	8009108 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090e6:	2300      	movs	r3, #0
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	2300      	movs	r3, #0
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	2100      	movs	r1, #0
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff ff8f 	bl	8009014 <xTimerGenericCommand>
 80090f6:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d104      	bne.n	8009108 <prvProcessExpiredTimer+0x60>
 80090fe:	4907      	ldr	r1, [pc, #28]	; (800911c <prvProcessExpiredTimer+0x74>)
 8009100:	f44f 7002 	mov.w	r0, #520	; 0x208
 8009104:	f7f8 fc7c 	bl	8001a00 <vAssertCalled>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
}
 8009110:	bf00      	nop
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20014450 	.word	0x20014450
 800911c:	080114f0 	.word	0x080114f0

08009120 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f857 	bl	80091e0 <prvGetNextExpireTime>
 8009132:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 f803 	bl	8009144 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800913e:	f000 f8d5 	bl	80092ec <prvProcessReceivedCommands>
	}
 8009142:	e7f1      	b.n	8009128 <prvTimerTask+0x8>

08009144 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800914e:	f7fe ff8b 	bl	8008068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f866 	bl	8009228 <prvSampleTimeNow>
 800915c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d130      	bne.n	80091c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <prvProcessTimerOrBlockTask+0x3c>
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	429a      	cmp	r2, r3
 8009170:	d806      	bhi.n	8009180 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009172:	f7fe ff87 	bl	8008084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff ff95 	bl	80090a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800917e:	e024      	b.n	80091ca <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d008      	beq.n	8009198 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009186:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <prvProcessTimerOrBlockTask+0x90>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	bf0c      	ite	eq
 8009190:	2301      	moveq	r3, #1
 8009192:	2300      	movne	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009198:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <prvProcessTimerOrBlockTask+0x94>)
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	f7fe fbd9 	bl	800795c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80091aa:	f7fe ff6b 	bl	8008084 <xTaskResumeAll>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80091b4:	4b09      	ldr	r3, [pc, #36]	; (80091dc <prvProcessTimerOrBlockTask+0x98>)
 80091b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091c4:	e001      	b.n	80091ca <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80091c6:	f7fe ff5d 	bl	8008084 <xTaskResumeAll>
		}
	}
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20014454 	.word	0x20014454
 80091d8:	20014458 	.word	0x20014458
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <prvGetNextExpireTime+0x44>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bf0c      	ite	eq
 80091f2:	2301      	moveq	r3, #1
 80091f4:	2300      	movne	r3, #0
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <prvGetNextExpireTime+0x44>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	e001      	b.n	8009216 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009216:	68fb      	ldr	r3, [r7, #12]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	20014450 	.word	0x20014450

08009228 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009230:	f7fe ffc0 	bl	80081b4 <xTaskGetTickCount>
 8009234:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <prvSampleTimeNow+0x3c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	429a      	cmp	r2, r3
 800923e:	d205      	bcs.n	800924c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009240:	f000 f8f4 	bl	800942c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e002      	b.n	8009252 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009252:	4a04      	ldr	r2, [pc, #16]	; (8009264 <prvSampleTimeNow+0x3c>)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009258:	68fb      	ldr	r3, [r7, #12]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20014460 	.word	0x20014460

08009268 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	429a      	cmp	r2, r3
 800928c:	d812      	bhi.n	80092b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	429a      	cmp	r2, r3
 800929a:	d302      	bcc.n	80092a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e01b      	b.n	80092da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <prvInsertTimerInActiveList+0x7c>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f7fd f9e7 	bl	8006680 <vListInsert>
 80092b2:	e012      	b.n	80092da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d206      	bcs.n	80092ca <prvInsertTimerInActiveList+0x62>
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d302      	bcc.n	80092ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092c4:	2301      	movs	r3, #1
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e007      	b.n	80092da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <prvInsertTimerInActiveList+0x80>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7fd f9d3 	bl	8006680 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092da:	697b      	ldr	r3, [r7, #20]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20014454 	.word	0x20014454
 80092e8:	20014450 	.word	0x20014450

080092ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092f2:	e087      	b.n	8009404 <prvProcessReceivedCommands+0x118>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da13      	bge.n	8009322 <prvProcessReceivedCommands+0x36>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092fa:	f107 0308 	add.w	r3, r7, #8
 80092fe:	3304      	adds	r3, #4
 8009300:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <prvProcessReceivedCommands+0x26>
 8009308:	4946      	ldr	r1, [pc, #280]	; (8009424 <prvProcessReceivedCommands+0x138>)
 800930a:	f240 20e7 	movw	r0, #743	; 0x2e7
 800930e:	f7f8 fb77 	bl	8001a00 <vAssertCalled>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009318:	6850      	ldr	r0, [r2, #4]
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	6892      	ldr	r2, [r2, #8]
 800931e:	4611      	mov	r1, r2
 8009320:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	db6d      	blt.n	8009404 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	3304      	adds	r3, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7fd f9db 	bl	80066f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800933e:	1d3b      	adds	r3, r7, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff ff71 	bl	8009228 <prvSampleTimeNow>
 8009346:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b09      	cmp	r3, #9
 800934c:	d859      	bhi.n	8009402 <prvProcessReceivedCommands+0x116>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <prvProcessReceivedCommands+0x68>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	0800937d 	.word	0x0800937d
 8009358:	0800937d 	.word	0x0800937d
 800935c:	0800937d 	.word	0x0800937d
 8009360:	08009405 	.word	0x08009405
 8009364:	080093cf 	.word	0x080093cf
 8009368:	080093fb 	.word	0x080093fb
 800936c:	0800937d 	.word	0x0800937d
 8009370:	0800937d 	.word	0x0800937d
 8009374:	08009405 	.word	0x08009405
 8009378:	080093cf 	.word	0x080093cf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	18d1      	adds	r1, r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	6a38      	ldr	r0, [r7, #32]
 800938a:	f7ff ff6d 	bl	8009268 <prvInsertTimerInActiveList>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d037      	beq.n	8009404 <prvProcessReceivedCommands+0x118>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	6a38      	ldr	r0, [r7, #32]
 800939a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d12f      	bne.n	8009404 <prvProcessReceivedCommands+0x118>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	441a      	add	r2, r3
 80093ac:	2300      	movs	r3, #0
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	2300      	movs	r3, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	6a38      	ldr	r0, [r7, #32]
 80093b6:	f7ff fe2d 	bl	8009014 <xTimerGenericCommand>
 80093ba:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d120      	bne.n	8009404 <prvProcessReceivedCommands+0x118>
 80093c2:	4918      	ldr	r1, [pc, #96]	; (8009424 <prvProcessReceivedCommands+0x138>)
 80093c4:	f240 3021 	movw	r0, #801	; 0x321
 80093c8:	f7f8 fb1a 	bl	8001a00 <vAssertCalled>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80093cc:	e01a      	b.n	8009404 <prvProcessReceivedCommands+0x118>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <prvProcessReceivedCommands+0xfa>
 80093dc:	4911      	ldr	r1, [pc, #68]	; (8009424 <prvProcessReceivedCommands+0x138>)
 80093de:	f44f 704e 	mov.w	r0, #824	; 0x338
 80093e2:	f7f8 fb0d 	bl	8001a00 <vAssertCalled>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	18d1      	adds	r1, r2, r3
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	6a38      	ldr	r0, [r7, #32]
 80093f4:	f7ff ff38 	bl	8009268 <prvInsertTimerInActiveList>
					break;
 80093f8:	e004      	b.n	8009404 <prvProcessReceivedCommands+0x118>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80093fa:	6a38      	ldr	r0, [r7, #32]
 80093fc:	f7fd fc3e 	bl	8006c7c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009400:	e000      	b.n	8009404 <prvProcessReceivedCommands+0x118>

				default	:
					/* Don't expect to get here. */
					break;
 8009402:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009404:	4b08      	ldr	r3, [pc, #32]	; (8009428 <prvProcessReceivedCommands+0x13c>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	f107 0108 	add.w	r1, r7, #8
 800940c:	2300      	movs	r3, #0
 800940e:	2200      	movs	r2, #0
 8009410:	f7fd ffc8 	bl	80073a4 <xQueueGenericReceive>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	f47f af6c 	bne.w	80092f4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800941c:	bf00      	nop
 800941e:	3728      	adds	r7, #40	; 0x28
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	080114f0 	.word	0x080114f0
 8009428:	20014458 	.word	0x20014458

0800942c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009432:	e03f      	b.n	80094b4 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009434:	4b29      	ldr	r3, [pc, #164]	; (80094dc <prvSwitchTimerLists+0xb0>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800943e:	4b27      	ldr	r3, [pc, #156]	; (80094dc <prvSwitchTimerLists+0xb0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd f951 	bl	80066f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	6938      	ldr	r0, [r7, #16]
 8009458:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d128      	bne.n	80094b4 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	4413      	add	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	429a      	cmp	r2, r3
 8009472:	d90e      	bls.n	8009492 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009480:	4b16      	ldr	r3, [pc, #88]	; (80094dc <prvSwitchTimerLists+0xb0>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3304      	adds	r3, #4
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7fd f8f8 	bl	8006680 <vListInsert>
 8009490:	e010      	b.n	80094b4 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009492:	2300      	movs	r3, #0
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	2300      	movs	r3, #0
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	2100      	movs	r1, #0
 800949c:	6938      	ldr	r0, [r7, #16]
 800949e:	f7ff fdb9 	bl	8009014 <xTimerGenericCommand>
 80094a2:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d104      	bne.n	80094b4 <prvSwitchTimerLists+0x88>
 80094aa:	490d      	ldr	r1, [pc, #52]	; (80094e0 <prvSwitchTimerLists+0xb4>)
 80094ac:	f240 3092 	movw	r0, #914	; 0x392
 80094b0:	f7f8 faa6 	bl	8001a00 <vAssertCalled>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094b4:	4b09      	ldr	r3, [pc, #36]	; (80094dc <prvSwitchTimerLists+0xb0>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1ba      	bne.n	8009434 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094be:	4b07      	ldr	r3, [pc, #28]	; (80094dc <prvSwitchTimerLists+0xb0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80094c4:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <prvSwitchTimerLists+0xb8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a04      	ldr	r2, [pc, #16]	; (80094dc <prvSwitchTimerLists+0xb0>)
 80094ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094cc:	4a05      	ldr	r2, [pc, #20]	; (80094e4 <prvSwitchTimerLists+0xb8>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6013      	str	r3, [r2, #0]
}
 80094d2:	bf00      	nop
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20014450 	.word	0x20014450
 80094e0:	080114f0 	.word	0x080114f0
 80094e4:	20014454 	.word	0x20014454

080094e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094ec:	f7fd fa0c 	bl	8006908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094f0:	4b12      	ldr	r3, [pc, #72]	; (800953c <prvCheckForValidListAndQueue+0x54>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11d      	bne.n	8009534 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80094f8:	4811      	ldr	r0, [pc, #68]	; (8009540 <prvCheckForValidListAndQueue+0x58>)
 80094fa:	f7fd f86f 	bl	80065dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094fe:	4811      	ldr	r0, [pc, #68]	; (8009544 <prvCheckForValidListAndQueue+0x5c>)
 8009500:	f7fd f86c 	bl	80065dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009504:	4b10      	ldr	r3, [pc, #64]	; (8009548 <prvCheckForValidListAndQueue+0x60>)
 8009506:	4a0e      	ldr	r2, [pc, #56]	; (8009540 <prvCheckForValidListAndQueue+0x58>)
 8009508:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800950a:	4b10      	ldr	r3, [pc, #64]	; (800954c <prvCheckForValidListAndQueue+0x64>)
 800950c:	4a0d      	ldr	r2, [pc, #52]	; (8009544 <prvCheckForValidListAndQueue+0x5c>)
 800950e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009510:	2200      	movs	r2, #0
 8009512:	2110      	movs	r1, #16
 8009514:	2005      	movs	r0, #5
 8009516:	f7fd fd21 	bl	8006f5c <xQueueGenericCreate>
 800951a:	4602      	mov	r2, r0
 800951c:	4b07      	ldr	r3, [pc, #28]	; (800953c <prvCheckForValidListAndQueue+0x54>)
 800951e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009520:	4b06      	ldr	r3, [pc, #24]	; (800953c <prvCheckForValidListAndQueue+0x54>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009528:	4b04      	ldr	r3, [pc, #16]	; (800953c <prvCheckForValidListAndQueue+0x54>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4908      	ldr	r1, [pc, #32]	; (8009550 <prvCheckForValidListAndQueue+0x68>)
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe f9ec 	bl	800790c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009534:	f7fd fa14 	bl	8006960 <vPortExitCritical>
}
 8009538:	bf00      	nop
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20014458 	.word	0x20014458
 8009540:	20014428 	.word	0x20014428
 8009544:	2001443c 	.word	0x2001443c
 8009548:	20014450 	.word	0x20014450
 800954c:	20014454 	.word	0x20014454
 8009550:	0801150c 	.word	0x0801150c

08009554 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d103      	bne.n	800956e <FreeRTOS_CLIRegisterCommand+0x1a>
 8009566:	4915      	ldr	r1, [pc, #84]	; (80095bc <FreeRTOS_CLIRegisterCommand+0x68>)
 8009568:	2080      	movs	r0, #128	; 0x80
 800956a:	f7f8 fa49 	bl	8001a00 <vAssertCalled>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800956e:	2008      	movs	r0, #8
 8009570:	f7fd face 	bl	8006b10 <pvPortMalloc>
 8009574:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d103      	bne.n	8009584 <FreeRTOS_CLIRegisterCommand+0x30>
 800957c:	490f      	ldr	r1, [pc, #60]	; (80095bc <FreeRTOS_CLIRegisterCommand+0x68>)
 800957e:	2084      	movs	r0, #132	; 0x84
 8009580:	f7f8 fa3e 	bl	8001a00 <vAssertCalled>

	if( pxNewListItem != NULL )
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d012      	beq.n	80095b0 <FreeRTOS_CLIRegisterCommand+0x5c>
	{
		taskENTER_CRITICAL();
 800958a:	f7fd f9bd 	bl	8006908 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2200      	movs	r2, #0
 8009598:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <FreeRTOS_CLIRegisterCommand+0x6c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80095a2:	4a07      	ldr	r2, [pc, #28]	; (80095c0 <FreeRTOS_CLIRegisterCommand+0x6c>)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 80095a8:	f7fd f9da 	bl	8006960 <vPortExitCritical>

		xReturn = pdPASS;
 80095ac:	2301      	movs	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80095b0:	68fb      	ldr	r3, [r7, #12]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08011548 	.word	0x08011548
 80095c0:	2001001c 	.word	0x2001001c

080095c4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80095d4:	4b3a      	ldr	r3, [pc, #232]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d141      	bne.n	8009660 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80095dc:	4b38      	ldr	r3, [pc, #224]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80095de:	4a39      	ldr	r2, [pc, #228]	; (80096c4 <FreeRTOS_CLIProcessCommand+0x100>)
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e037      	b.n	8009654 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80095e4:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 80095ee:	69b8      	ldr	r0, [r7, #24]
 80095f0:	f7f6 fe0e 	bl	8000210 <strlen>
 80095f4:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	4413      	add	r3, r2
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d005      	beq.n	800960e <FreeRTOS_CLIProcessCommand+0x4a>
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	4413      	add	r3, r2
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d11d      	bne.n	800964a <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	69b9      	ldr	r1, [r7, #24]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f002 f896 	bl	800b744 <strncmp>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d115      	bne.n	800964a <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800961e:	4b28      	ldr	r3, [pc, #160]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	db18      	blt.n	800965e <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 f8e1 	bl	80097f4 <prvGetNumberOfParameters>
 8009632:	4603      	mov	r3, r0
 8009634:	461a      	mov	r2, r3
 8009636:	4b22      	ldr	r3, [pc, #136]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009640:	429a      	cmp	r2, r3
 8009642:	d00c      	beq.n	800965e <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8009644:	2300      	movs	r3, #0
 8009646:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8009648:	e009      	b.n	800965e <FreeRTOS_CLIProcessCommand+0x9a>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4a1b      	ldr	r2, [pc, #108]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	4b1a      	ldr	r3, [pc, #104]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1c3      	bne.n	80095e4 <FreeRTOS_CLIProcessCommand+0x20>
 800965c:	e000      	b.n	8009660 <FreeRTOS_CLIProcessCommand+0x9c>
						{
							xReturn = pdFALSE;
						}
					}

					break;
 800965e:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8009660:	4b17      	ldr	r3, [pc, #92]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <FreeRTOS_CLIProcessCommand+0xbc>
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d108      	bne.n	8009680 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4915      	ldr	r1, [pc, #84]	; (80096c8 <FreeRTOS_CLIProcessCommand+0x104>)
 8009672:	68b8      	ldr	r0, [r7, #8]
 8009674:	f002 f87b 	bl	800b76e <strncpy>
		pxCommand = NULL;
 8009678:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e01a      	b.n	80096b6 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8009680:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00f      	beq.n	80096a8 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8009688:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	68b8      	ldr	r0, [r7, #8]
 8009696:	4798      	blx	r3
 8009698:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	e006      	b.n	80096b6 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4908      	ldr	r1, [pc, #32]	; (80096cc <FreeRTOS_CLIProcessCommand+0x108>)
 80096ac:	68b8      	ldr	r0, [r7, #8]
 80096ae:	f002 f85e 	bl	800b76e <strncpy>
		xReturn = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80096b6:	69fb      	ldr	r3, [r7, #28]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20014658 	.word	0x20014658
 80096c4:	20010014 	.word	0x20010014
 80096c8:	08011580 	.word	0x08011580
 80096cc:	080115d8 	.word	0x080115d8

080096d0 <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20014464 	.word	0x20014464

080096e4 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 80096fe:	e03b      	b.n	8009778 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <FreeRTOS_CLIGetParameter+0x3a>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b20      	cmp	r3, #32
 8009714:	d1f4      	bne.n	8009700 <FreeRTOS_CLIGetParameter+0x1c>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8009716:	e002      	b.n	800971e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <FreeRTOS_CLIGetParameter+0x4a>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b20      	cmp	r3, #32
 800972c:	d0f4      	beq.n	8009718 <FreeRTOS_CLIGetParameter+0x34>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d025      	beq.n	8009782 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	3301      	adds	r3, #1
 800973a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	429a      	cmp	r2, r3
 8009742:	d119      	bne.n	8009778 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8009748:	e007      	b.n	800975a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <FreeRTOS_CLIGetParameter+0x86>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b20      	cmp	r3, #32
 8009768:	d1ef      	bne.n	800974a <FreeRTOS_CLIGetParameter+0x66>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
				}

				break;
 8009776:	e006      	b.n	8009786 <FreeRTOS_CLIGetParameter+0xa2>
UBaseType_t uxParametersFound = 0;
const char *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	d3c2      	bcc.n	8009706 <FreeRTOS_CLIGetParameter+0x22>
 8009780:	e002      	b.n	8009788 <FreeRTOS_CLIGetParameter+0xa4>
				break;
			}
		}
		else
		{
			break;
 8009782:	bf00      	nop
 8009784:	e000      	b.n	8009788 <FreeRTOS_CLIGetParameter+0xa4>
				if( *pxParameterStringLength == 0 )
				{
					pcReturn = NULL;
				}

				break;
 8009786:	bf00      	nop
		{
			break;
		}
	}

	return pcReturn;
 8009788:	693b      	ldr	r3, [r7, #16]
}
 800978a:	4618      	mov	r0, r3
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop

08009798 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 80097a4:	4b11      	ldr	r3, [pc, #68]	; (80097ec <prvHelpCommand+0x54>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 80097ac:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <prvHelpCommand+0x54>)
 80097ae:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <prvHelpCommand+0x58>)
 80097b0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80097b2:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <prvHelpCommand+0x54>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	4619      	mov	r1, r3
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f001 ffd5 	bl	800b76e <strncpy>
	pxCommand = pxCommand->pxNext;
 80097c4:	4b09      	ldr	r3, [pc, #36]	; (80097ec <prvHelpCommand+0x54>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4a08      	ldr	r2, [pc, #32]	; (80097ec <prvHelpCommand+0x54>)
 80097cc:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <prvHelpCommand+0x54>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e001      	b.n	80097e0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 80097dc:	2301      	movs	r3, #1
 80097de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097e0:	697b      	ldr	r3, [r7, #20]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	2001465c 	.word	0x2001465c
 80097f0:	20010014 	.word	0x20010014

080097f4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8009800:	2300      	movs	r3, #0
 8009802:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8009804:	e014      	b.n	8009830 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b20      	cmp	r3, #32
 800980c:	d10b      	bne.n	8009826 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d00a      	beq.n	800982a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8009814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	3301      	adds	r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	60bb      	str	r3, [r7, #8]
 8009824:	e001      	b.n	800982a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	3301      	adds	r3, #1
 800982e:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e6      	bne.n	8009806 <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d105      	bne.n	800984a <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800983e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	3b01      	subs	r3, #1
 8009846:	b2db      	uxtb	r3, r3
 8009848:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 800984a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop

0800985c <HW_ConfigAll>:
  *         module.
  * @param  None
  * @retval None
  */
static void HW_ConfigAll(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
   /*
    * Configure the Debug UART init structure:
    *   8 bits length + 1 stop bit, no parity
    *   Baudrate 115200 kbps
    */
    Debug_Config.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8009860:	4b16      	ldr	r3, [pc, #88]	; (80098bc <HW_ConfigAll+0x60>)
 8009862:	220c      	movs	r2, #12
 8009864:	611a      	str	r2, [r3, #16]
    Debug_Config.USART_BaudRate            = 115200;
 8009866:	4b15      	ldr	r3, [pc, #84]	; (80098bc <HW_ConfigAll+0x60>)
 8009868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800986c:	601a      	str	r2, [r3, #0]
    Debug_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <HW_ConfigAll+0x60>)
 8009870:	2200      	movs	r2, #0
 8009872:	615a      	str	r2, [r3, #20]
    Debug_Config.USART_Parity              = USART_Parity_Even;
 8009874:	4b11      	ldr	r3, [pc, #68]	; (80098bc <HW_ConfigAll+0x60>)
 8009876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800987a:	60da      	str	r2, [r3, #12]
    Debug_Config.USART_StopBits            = USART_StopBits_1;
 800987c:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <HW_ConfigAll+0x60>)
 800987e:	2200      	movs	r2, #0
 8009880:	609a      	str	r2, [r3, #8]
    Debug_Config.USART_WordLength          = USART_WordLength_9b;
 8009882:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <HW_ConfigAll+0x60>)
 8009884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009888:	605a      	str	r2, [r3, #4]
    /*
     * Configure the Digital Servo UART init structure:
     *   8 bits length + 1 stop bit, no parity
     *   Baudrate 57600 kbps
     */
     Dsv_Config.USART_Mode                = USART_Mode_Tx;
 800988a:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <HW_ConfigAll+0x64>)
 800988c:	2208      	movs	r2, #8
 800988e:	611a      	str	r2, [r3, #16]
     Dsv_Config.USART_BaudRate            = 57600;
 8009890:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <HW_ConfigAll+0x64>)
 8009892:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8009896:	601a      	str	r2, [r3, #0]
     Dsv_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <HW_ConfigAll+0x64>)
 800989a:	2200      	movs	r2, #0
 800989c:	615a      	str	r2, [r3, #20]
     Dsv_Config.USART_Parity              = USART_Parity_No;
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <HW_ConfigAll+0x64>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	60da      	str	r2, [r3, #12]
     Dsv_Config.USART_StopBits            = USART_StopBits_1;
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <HW_ConfigAll+0x64>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	609a      	str	r2, [r3, #8]
     Dsv_Config.USART_WordLength          = USART_WordLength_8b;
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <HW_ConfigAll+0x64>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]
}
 80098b0:	bf00      	nop
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20014660 	.word	0x20014660
 80098c0:	20014678 	.word	0x20014678

080098c4 <HW_InitAll>:
  *         HW_ConfigAll() function.
  * @param  None
  * @retval None
  */
void HW_InitAll(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
    /* System Config */
    HW_CPU_CACHE_Enable();
 80098c8:	f001 f9c4 	bl	800ac54 <HW_CPU_CACHE_Enable>
    HW_SystemClock_Config();
 80098cc:	f001 f96a 	bl	800aba4 <HW_SystemClock_Config>

    /* HW Modules Configurations */
    HW_ConfigAll();
 80098d0:	f7ff ffc4 	bl	800985c <HW_ConfigAll>

    /* HW Modules Initializations */
    HW_PWR_Init();
 80098d4:	f001 f828 	bl	800a928 <HW_PWR_Init>
    HW_LED_Init();
 80098d8:	f000 fe08 	bl	800a4ec <HW_LED_Init>
    HW_ENC_Init();
 80098dc:	f000 fc6c 	bl	800a1b8 <HW_ENC_Init>
    HW_MOT_Init();
 80098e0:	f000 ff16 	bl	800a710 <HW_MOT_Init>
    HW_ASV_Init();
 80098e4:	f000 f824 	bl	8009930 <HW_ASV_Init>
    HW_MON_Init();
 80098e8:	f000 fe46 	bl	800a578 <HW_MON_Init>
    HW_HMI_Init();
 80098ec:	f000 fd42 	bl	800a374 <HW_HMI_Init>
    HW_Digital_Input_Init();
 80098f0:	f000 fb2a 	bl	8009f48 <HW_Digital_Input_Init>

    HW_DBG_Init(&Debug_Config);
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <HW_InitAll+0x48>)
 80098f6:	f000 f9dd 	bl	8009cb4 <HW_DBG_Init>
    HW_DSV_Init(&Dsv_Config);
 80098fa:	4805      	ldr	r0, [pc, #20]	; (8009910 <HW_InitAll+0x4c>)
 80098fc:	f000 fbfe 	bl	800a0fc <HW_DSV_Init>

    /* Set Interrupt group priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8009900:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009904:	f7fb f88c 	bl	8004a20 <NVIC_PriorityGroupConfig>
}
 8009908:	bf00      	nop
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20014660 	.word	0x20014660
 8009910:	20014678 	.word	0x20014678

08009914 <HW_PowerUp>:
  * @brief  Apply the power-up sequence
  * @param  None
  * @retval None
  */
void HW_PowerUp(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0

    //MOT_SLEEP_WRITE(MOT_SLEEP_OFF);
    //MOT_RESET_WRITE(MOT_RESET_ON);

    /* Enable powers */
    HW_PWR_Enable(HW_PWR_VP1);
 8009918:	2000      	movs	r0, #0
 800991a:	f001 f845 	bl	800a9a8 <HW_PWR_Enable>
    HW_PWR_Enable(HW_PWR_VP2);
 800991e:	2001      	movs	r0, #1
 8009920:	f001 f842 	bl	800a9a8 <HW_PWR_Enable>
    HW_PWR_Enable(HW_PWR_VP3);
 8009924:	2002      	movs	r0, #2
 8009926:	f001 f83f 	bl	800a9a8 <HW_PWR_Enable>

    /* Enable H-bridges power */
  //  MOT_RESET_WRITE(MOT_RESET_OFF);

}
 800992a:	bf00      	nop
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop

08009930 <HW_ASV_Init>:


#include "blueboard.h"

void HW_ASV_Init(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b090      	sub	sp, #64	; 0x40
 8009934:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    TIM_OCInitTypeDef TIM_OCStruct;

    /* Enable ASV GPIO Clocks */
    ASV1_PWM_GPIO_CLK_ENABLE();
 8009936:	2101      	movs	r1, #1
 8009938:	2004      	movs	r0, #4
 800993a:	f7fb fcb3 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV2_PWM_GPIO_CLK_ENABLE();
 800993e:	2101      	movs	r1, #1
 8009940:	2004      	movs	r0, #4
 8009942:	f7fb fcaf 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV3_PWM_GPIO_CLK_ENABLE();
 8009946:	2101      	movs	r1, #1
 8009948:	2004      	movs	r0, #4
 800994a:	f7fb fcab 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV4_PWM_GPIO_CLK_ENABLE();
 800994e:	2101      	movs	r1, #1
 8009950:	2004      	movs	r0, #4
 8009952:	f7fb fca7 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV5_PWM_GPIO_CLK_ENABLE();
 8009956:	2101      	movs	r1, #1
 8009958:	2001      	movs	r0, #1
 800995a:	f7fb fca3 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV6_PWM_GPIO_CLK_ENABLE();
 800995e:	2101      	movs	r1, #1
 8009960:	2001      	movs	r0, #1
 8009962:	f7fb fc9f 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV7_PWM_GPIO_CLK_ENABLE();
 8009966:	2101      	movs	r1, #1
 8009968:	2001      	movs	r0, #1
 800996a:	f7fb fc9b 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ASV8_PWM_GPIO_CLK_ENABLE();
 800996e:	2101      	movs	r1, #1
 8009970:	2001      	movs	r0, #1
 8009972:	f7fb fc97 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8009976:	2302      	movs	r3, #2
 8009978:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 8009982:	2300      	movs	r3, #0
 8009984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 8009988:	2302      	movs	r3, #2
 800998a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    GPIO_InitStruct.GPIO_Pin = ASV1_PWM_PIN;
 800998e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV1_PWM_GPIO_PORT, ASV1_PWM_PIN_SOURCE, ASV1_PWM_AF);
 8009994:	2203      	movs	r2, #3
 8009996:	2109      	movs	r1, #9
 8009998:	4874      	ldr	r0, [pc, #464]	; (8009b6c <HW_ASV_Init+0x23c>)
 800999a:	f7fb fa19 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ASV1_PWM_GPIO_PORT, &GPIO_InitStruct);
 800999e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099a2:	4619      	mov	r1, r3
 80099a4:	4871      	ldr	r0, [pc, #452]	; (8009b6c <HW_ASV_Init+0x23c>)
 80099a6:	f7fb f951 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV2_PWM_PIN;
 80099aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV2_PWM_GPIO_PORT, ASV2_PWM_PIN_SOURCE, ASV2_PWM_AF);
 80099b0:	2203      	movs	r2, #3
 80099b2:	2108      	movs	r1, #8
 80099b4:	486d      	ldr	r0, [pc, #436]	; (8009b6c <HW_ASV_Init+0x23c>)
 80099b6:	f7fb fa0b 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ASV2_PWM_GPIO_PORT, &GPIO_InitStruct);
 80099ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099be:	4619      	mov	r1, r3
 80099c0:	486a      	ldr	r0, [pc, #424]	; (8009b6c <HW_ASV_Init+0x23c>)
 80099c2:	f7fb f943 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80099c6:	2301      	movs	r3, #1
 80099c8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV3_PWM_PIN;
 80099cc:	2380      	movs	r3, #128	; 0x80
 80099ce:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV3_PWM_GPIO_PORT, ASV3_PWM_PIN_SOURCE, ASV3_PWM_AF);
    GPIO_Init(ASV3_PWM_GPIO_PORT, &GPIO_InitStruct);
 80099d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099d4:	4619      	mov	r1, r3
 80099d6:	4865      	ldr	r0, [pc, #404]	; (8009b6c <HW_ASV_Init+0x23c>)
 80099d8:	f7fb f938 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV4_PWM_PIN;
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV4_PWM_GPIO_PORT, ASV4_PWM_PIN_SOURCE, ASV4_PWM_AF);
    GPIO_Init(ASV4_PWM_GPIO_PORT, &GPIO_InitStruct);
 80099e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099e4:	4619      	mov	r1, r3
 80099e6:	4861      	ldr	r0, [pc, #388]	; (8009b6c <HW_ASV_Init+0x23c>)
 80099e8:	f7fb f930 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 80099ec:	2302      	movs	r3, #2
 80099ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV5_PWM_PIN;
 80099f2:	2301      	movs	r3, #1
 80099f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV5_PWM_GPIO_PORT, ASV5_PWM_PIN_SOURCE, ASV5_PWM_AF);
 80099f6:	2202      	movs	r2, #2
 80099f8:	2100      	movs	r1, #0
 80099fa:	485d      	ldr	r0, [pc, #372]	; (8009b70 <HW_ASV_Init+0x240>)
 80099fc:	f7fb f9e8 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ASV5_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009a00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a04:	4619      	mov	r1, r3
 8009a06:	485a      	ldr	r0, [pc, #360]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a08:	f7fb f920 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV6_PWM_PIN;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV6_PWM_GPIO_PORT, ASV6_PWM_PIN_SOURCE, ASV6_PWM_AF);
 8009a10:	2202      	movs	r2, #2
 8009a12:	2101      	movs	r1, #1
 8009a14:	4856      	ldr	r0, [pc, #344]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a16:	f7fb f9db 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ASV6_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4853      	ldr	r0, [pc, #332]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a22:	f7fb f913 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV7_PWM_PIN;
 8009a26:	2304      	movs	r3, #4
 8009a28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV7_PWM_GPIO_PORT, ASV7_PWM_PIN_SOURCE, ASV7_PWM_AF);
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	4850      	ldr	r0, [pc, #320]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a30:	f7fb f9ce 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ASV7_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009a34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a38:	4619      	mov	r1, r3
 8009a3a:	484d      	ldr	r0, [pc, #308]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a3c:	f7fb f906 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV8_PWM_PIN;
 8009a40:	2308      	movs	r3, #8
 8009a42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV8_PWM_GPIO_PORT, ASV8_PWM_PIN_SOURCE, ASV8_PWM_AF);
 8009a44:	2202      	movs	r2, #2
 8009a46:	2103      	movs	r1, #3
 8009a48:	4849      	ldr	r0, [pc, #292]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a4a:	f7fb f9c1 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ASV8_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a52:	4619      	mov	r1, r3
 8009a54:	4846      	ldr	r0, [pc, #280]	; (8009b70 <HW_ASV_Init+0x240>)
 8009a56:	f7fb f8f9 	bl	8004c4c <GPIO_Init>

    /* Enable Timers Clocks from RCC */
    ASV_1_TO_4_TIM_CLK_ENABLE();
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	2002      	movs	r0, #2
 8009a5e:	f7fb fc61 	bl	8005324 <RCC_APB2PeriphClockCmd>
    ASV_5_TO_8_TIM_CLK_ENABLE();
 8009a62:	2101      	movs	r1, #1
 8009a64:	2008      	movs	r0, #8
 8009a66:	f7fb fc3d 	bl	80052e4 <RCC_APB1PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = ASV_TIMER_PRESCALER;
 8009a72:	232f      	movs	r3, #47	; 0x2f
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = ASV_TIMER_PERIOD;
 8009a76:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(ASV_1_TO_4_TIM, &TIM_BaseStruct);
 8009a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a84:	4619      	mov	r1, r3
 8009a86:	483b      	ldr	r0, [pc, #236]	; (8009b74 <HW_ASV_Init+0x244>)
 8009a88:	f7fb fd58 	bl	800553c <TIM_TimeBaseInit>
    TIM_TimeBaseInit(ASV_5_TO_8_TIM, &TIM_BaseStruct);
 8009a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a90:	4619      	mov	r1, r3
 8009a92:	4839      	ldr	r0, [pc, #228]	; (8009b78 <HW_ASV_Init+0x248>)
 8009a94:	f7fb fd52 	bl	800553c <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(ASV_1_TO_4_TIM, ENABLE);
 8009a98:	2101      	movs	r1, #1
 8009a9a:	4836      	ldr	r0, [pc, #216]	; (8009b74 <HW_ASV_Init+0x244>)
 8009a9c:	f7fc f8a6 	bl	8005bec <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(ASV_5_TO_8_TIM, ENABLE);
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	4835      	ldr	r0, [pc, #212]	; (8009b78 <HW_ASV_Init+0x248>)
 8009aa4:	f7fc f8a2 	bl	8005bec <TIM_CtrlPWMOutputs>

    TIM_Cmd(ASV_1_TO_4_TIM, ENABLE);
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	4832      	ldr	r0, [pc, #200]	; (8009b74 <HW_ASV_Init+0x244>)
 8009aac:	f7fb fdd8 	bl	8005660 <TIM_Cmd>
    TIM_Cmd(ASV_5_TO_8_TIM, ENABLE);
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	4831      	ldr	r0, [pc, #196]	; (8009b78 <HW_ASV_Init+0x248>)
 8009ab4:	f7fb fdd4 	bl	8005660 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 8009ab8:	1d3b      	adds	r3, r7, #4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fb ffcc 	bl	8005a58 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 8009ac0:	2360      	movs	r3, #96	; 0x60
 8009ac2:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OCPolarity     = TIM_OCPolarity_Low;       /* Invert polarity since we have optocouplers */
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	617b      	str	r3, [r7, #20]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 8009acc:	2301      	movs	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009ad4:	1d3b      	adds	r3, r7, #4
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4826      	ldr	r0, [pc, #152]	; (8009b74 <HW_ASV_Init+0x244>)
 8009ada:	f7fb fddd 	bl	8005698 <TIM_OC1Init>
    TIM_OC2Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009ade:	1d3b      	adds	r3, r7, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4824      	ldr	r0, [pc, #144]	; (8009b74 <HW_ASV_Init+0x244>)
 8009ae4:	f7fb fe52 	bl	800578c <TIM_OC2Init>
    TIM_OC3Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009ae8:	1d3b      	adds	r3, r7, #4
 8009aea:	4619      	mov	r1, r3
 8009aec:	4821      	ldr	r0, [pc, #132]	; (8009b74 <HW_ASV_Init+0x244>)
 8009aee:	f7fb fecf 	bl	8005890 <TIM_OC3Init>
    TIM_OC4Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009af2:	1d3b      	adds	r3, r7, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	481f      	ldr	r0, [pc, #124]	; (8009b74 <HW_ASV_Init+0x244>)
 8009af8:	f7fb ff4a 	bl	8005990 <TIM_OC4Init>
    TIM_OC1Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009afc:	1d3b      	adds	r3, r7, #4
 8009afe:	4619      	mov	r1, r3
 8009b00:	481d      	ldr	r0, [pc, #116]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b02:	f7fb fdc9 	bl	8005698 <TIM_OC1Init>
    TIM_OC2Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009b06:	1d3b      	adds	r3, r7, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	481b      	ldr	r0, [pc, #108]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b0c:	f7fb fe3e 	bl	800578c <TIM_OC2Init>
    TIM_OC3Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009b10:	1d3b      	adds	r3, r7, #4
 8009b12:	4619      	mov	r1, r3
 8009b14:	4818      	ldr	r0, [pc, #96]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b16:	f7fb febb 	bl	8005890 <TIM_OC3Init>
    TIM_OC4Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009b1a:	1d3b      	adds	r3, r7, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4816      	ldr	r0, [pc, #88]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b20:	f7fb ff36 	bl	8005990 <TIM_OC4Init>

    TIM_OC1PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009b24:	2108      	movs	r1, #8
 8009b26:	4813      	ldr	r0, [pc, #76]	; (8009b74 <HW_ASV_Init+0x244>)
 8009b28:	f7fb fff0 	bl	8005b0c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009b2c:	2108      	movs	r1, #8
 8009b2e:	4811      	ldr	r0, [pc, #68]	; (8009b74 <HW_ASV_Init+0x244>)
 8009b30:	f7fc f808 	bl	8005b44 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009b34:	2108      	movs	r1, #8
 8009b36:	480f      	ldr	r0, [pc, #60]	; (8009b74 <HW_ASV_Init+0x244>)
 8009b38:	f7fc f820 	bl	8005b7c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009b3c:	2108      	movs	r1, #8
 8009b3e:	480d      	ldr	r0, [pc, #52]	; (8009b74 <HW_ASV_Init+0x244>)
 8009b40:	f7fc f838 	bl	8005bb4 <TIM_OC4PreloadConfig>
    TIM_OC1PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8009b44:	2108      	movs	r1, #8
 8009b46:	480c      	ldr	r0, [pc, #48]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b48:	f7fb ffe0 	bl	8005b0c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8009b4c:	2108      	movs	r1, #8
 8009b4e:	480a      	ldr	r0, [pc, #40]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b50:	f7fb fff8 	bl	8005b44 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8009b54:	2108      	movs	r1, #8
 8009b56:	4808      	ldr	r0, [pc, #32]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b58:	f7fc f810 	bl	8005b7c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8009b5c:	2108      	movs	r1, #8
 8009b5e:	4806      	ldr	r0, [pc, #24]	; (8009b78 <HW_ASV_Init+0x248>)
 8009b60:	f7fc f828 	bl	8005bb4 <TIM_OC4PreloadConfig>

}
 8009b64:	bf00      	nop
 8009b66:	3740      	adds	r7, #64	; 0x40
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	40020800 	.word	0x40020800
 8009b70:	40020000 	.word	0x40020000
 8009b74:	40010400 	.word	0x40010400
 8009b78:	40000c00 	.word	0x40000c00

08009b7c <HW_ASV_SetPwmPulseLength>:

void HW_ASV_SetPwmPulseLength(HW_ASV_ChannelTypeDef ASV_Channel, uint16_t pulseLength)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	460a      	mov	r2, r1
 8009b86:	71fb      	strb	r3, [r7, #7]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	80bb      	strh	r3, [r7, #4]

    /* Configure the correct OC depending on channel selection */
    switch(ASV_Channel)
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	2b07      	cmp	r3, #7
 8009b90:	d842      	bhi.n	8009c18 <HW_ASV_SetPwmPulseLength+0x9c>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <HW_ASV_SetPwmPulseLength+0x1c>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bc5 	.word	0x08009bc5
 8009ba0:	08009bd1 	.word	0x08009bd1
 8009ba4:	08009bdd 	.word	0x08009bdd
 8009ba8:	08009be9 	.word	0x08009be9
 8009bac:	08009bf5 	.word	0x08009bf5
 8009bb0:	08009c01 	.word	0x08009c01
 8009bb4:	08009c0d 	.word	0x08009c0d
    {
        case HW_ASV_CHANNEL1: ASV1_PWM_SET_PULSE(pulseLength); break;
 8009bb8:	88bb      	ldrh	r3, [r7, #4]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4819      	ldr	r0, [pc, #100]	; (8009c24 <HW_ASV_SetPwmPulseLength+0xa8>)
 8009bbe:	f7fb ff97 	bl	8005af0 <TIM_SetCompare4>
 8009bc2:	e02a      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL2: ASV2_PWM_SET_PULSE(pulseLength); break;
 8009bc4:	88bb      	ldrh	r3, [r7, #4]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4816      	ldr	r0, [pc, #88]	; (8009c24 <HW_ASV_SetPwmPulseLength+0xa8>)
 8009bca:	f7fb ff83 	bl	8005ad4 <TIM_SetCompare3>
 8009bce:	e024      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL3: ASV3_PWM_SET_PULSE(pulseLength); break;
 8009bd0:	88bb      	ldrh	r3, [r7, #4]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4813      	ldr	r0, [pc, #76]	; (8009c24 <HW_ASV_SetPwmPulseLength+0xa8>)
 8009bd6:	f7fb ff6f 	bl	8005ab8 <TIM_SetCompare2>
 8009bda:	e01e      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL4: ASV4_PWM_SET_PULSE(pulseLength); break;
 8009bdc:	88bb      	ldrh	r3, [r7, #4]
 8009bde:	4619      	mov	r1, r3
 8009be0:	4810      	ldr	r0, [pc, #64]	; (8009c24 <HW_ASV_SetPwmPulseLength+0xa8>)
 8009be2:	f7fb ff5b 	bl	8005a9c <TIM_SetCompare1>
 8009be6:	e018      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL5: ASV5_PWM_SET_PULSE(pulseLength); break;
 8009be8:	88bb      	ldrh	r3, [r7, #4]
 8009bea:	4619      	mov	r1, r3
 8009bec:	480e      	ldr	r0, [pc, #56]	; (8009c28 <HW_ASV_SetPwmPulseLength+0xac>)
 8009bee:	f7fb ff55 	bl	8005a9c <TIM_SetCompare1>
 8009bf2:	e012      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL6: ASV6_PWM_SET_PULSE(pulseLength); break;
 8009bf4:	88bb      	ldrh	r3, [r7, #4]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	480b      	ldr	r0, [pc, #44]	; (8009c28 <HW_ASV_SetPwmPulseLength+0xac>)
 8009bfa:	f7fb ff5d 	bl	8005ab8 <TIM_SetCompare2>
 8009bfe:	e00c      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL7: ASV7_PWM_SET_PULSE(pulseLength); break;
 8009c00:	88bb      	ldrh	r3, [r7, #4]
 8009c02:	4619      	mov	r1, r3
 8009c04:	4808      	ldr	r0, [pc, #32]	; (8009c28 <HW_ASV_SetPwmPulseLength+0xac>)
 8009c06:	f7fb ff65 	bl	8005ad4 <TIM_SetCompare3>
 8009c0a:	e006      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL8: ASV8_PWM_SET_PULSE(pulseLength); break;
 8009c0c:	88bb      	ldrh	r3, [r7, #4]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4805      	ldr	r0, [pc, #20]	; (8009c28 <HW_ASV_SetPwmPulseLength+0xac>)
 8009c12:	f7fb ff6d 	bl	8005af0 <TIM_SetCompare4>
 8009c16:	e000      	b.n	8009c1a <HW_ASV_SetPwmPulseLength+0x9e>

        default:
            /* Incorrect, Do nothing */
            break;
 8009c18:	bf00      	nop
    }

}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	40010400 	.word	0x40010400
 8009c28:	40000c00 	.word	0x40000c00

08009c2c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009c36:	4909      	ldr	r1, [pc, #36]	; (8009c5c <NVIC_EnableIRQ+0x30>)
 8009c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	79fa      	ldrb	r2, [r7, #7]
 8009c40:	f002 021f 	and.w	r2, r2, #31
 8009c44:	2001      	movs	r0, #1
 8009c46:	fa00 f202 	lsl.w	r2, r0, r2
 8009c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c4e:	bf00      	nop
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	e000e100 	.word	0xe000e100

08009c60 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8009c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da0b      	bge.n	8009c8c <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c74:	490d      	ldr	r1, [pc, #52]	; (8009cac <NVIC_SetPriority+0x4c>)
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	f003 030f 	and.w	r3, r3, #15
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	0112      	lsls	r2, r2, #4
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	440b      	add	r3, r1
 8009c88:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c8a:	e009      	b.n	8009ca0 <NVIC_SetPriority+0x40>
{
  if((int32_t)IRQn < 0) {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c8c:	4908      	ldr	r1, [pc, #32]	; (8009cb0 <NVIC_SetPriority+0x50>)
 8009c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	b2d2      	uxtb	r2, r2
 8009c96:	0112      	lsls	r2, r2, #4
 8009c98:	b2d2      	uxtb	r2, r2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	e000ed00 	.word	0xe000ed00
 8009cb0:	e000e100 	.word	0xe000e100

08009cb4 <HW_DBG_Init>:
  * @brief  Initialize the Debug UART
  * @param  None
  * @retval None
  */
void HW_DBG_Init(USART_InitTypeDef * USART_InitStruct)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable GPIOs Clock */
    DBG_TX_GPIO_CLK_ENABLE();
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	f7fb faf0 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    DBG_RX_GPIO_CLK_ENABLE();
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	f7fb faec 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    DBG_CTS_GPIO_CLK_ENABLE();
 8009ccc:	2101      	movs	r1, #1
 8009cce:	2001      	movs	r0, #1
 8009cd0:	f7fb fae8 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    DBG_RTS_GPIO_CLK_ENABLE();
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	f7fb fae4 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Enable Debug USART clock */
    DBG_CLK_ENABLE();
 8009cdc:	2101      	movs	r1, #1
 8009cde:	2010      	movs	r0, #16
 8009ce0:	f7fb fb20 	bl	8005324 <RCC_APB2PeriphClockCmd>

    /* Configure USART TX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_TX_PIN;
 8009ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009cea:	2302      	movs	r3, #2
 8009cec:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 8009cee:	2300      	movs	r3, #0
 8009cf0:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DBG_TX_GPIO_PORT, &GPIO_InitStructure);
 8009cf6:	f107 0318 	add.w	r3, r7, #24
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4832      	ldr	r0, [pc, #200]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009cfe:	f7fa ffa5 	bl	8004c4c <GPIO_Init>

    /* Configure USART RX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RX_PIN;
 8009d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d06:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RX_GPIO_PORT, &GPIO_InitStructure);
 8009d08:	f107 0318 	add.w	r3, r7, #24
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	482e      	ldr	r0, [pc, #184]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d10:	f7fa ff9c 	bl	8004c4c <GPIO_Init>

    /* Configure USART CTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_CTS_PIN;
 8009d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d18:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_CTS_GPIO_PORT, &GPIO_InitStructure);
 8009d1a:	f107 0318 	add.w	r3, r7, #24
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4829      	ldr	r0, [pc, #164]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d22:	f7fa ff93 	bl	8004c4c <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RTS_PIN;
 8009d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d2a:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RTS_GPIO_PORT, &GPIO_InitStructure);
 8009d2c:	f107 0318 	add.w	r3, r7, #24
 8009d30:	4619      	mov	r1, r3
 8009d32:	4825      	ldr	r0, [pc, #148]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d34:	f7fa ff8a 	bl	8004c4c <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(DBG_TX_GPIO_PORT,  DBG_TX_PIN_SOURCE,  DBG_TX_AF);
 8009d38:	2207      	movs	r2, #7
 8009d3a:	2109      	movs	r1, #9
 8009d3c:	4822      	ldr	r0, [pc, #136]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d3e:	f7fb f847 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RX_GPIO_PORT,  DBG_RX_PIN_SOURCE,  DBG_RX_AF);
 8009d42:	2207      	movs	r2, #7
 8009d44:	210a      	movs	r1, #10
 8009d46:	4820      	ldr	r0, [pc, #128]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d48:	f7fb f842 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_CTS_GPIO_PORT, DBG_CTS_PIN_SOURCE, DBG_CTS_AF);
 8009d4c:	2207      	movs	r2, #7
 8009d4e:	210b      	movs	r1, #11
 8009d50:	481d      	ldr	r0, [pc, #116]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d52:	f7fb f83d 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RTS_GPIO_PORT, DBG_RTS_PIN_SOURCE, DBG_RTS_AF);
 8009d56:	2207      	movs	r2, #7
 8009d58:	210c      	movs	r1, #12
 8009d5a:	481b      	ldr	r0, [pc, #108]	; (8009dc8 <HW_DBG_Init+0x114>)
 8009d5c:	f7fb f838 	bl	8004dd0 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DBG_COM, USART_InitStruct);
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	481a      	ldr	r0, [pc, #104]	; (8009dcc <HW_DBG_Init+0x118>)
 8009d64:	f7fc fa40 	bl	80061e8 <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 8009d68:	f107 0308 	add.w	r3, r7, #8
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fc fb1b 	bl	80063a8 <USART_ClockStructInit>
    USART_ClockInit(DBG_COM, &USART_ClockInitStruct);
 8009d72:	f107 0308 	add.w	r3, r7, #8
 8009d76:	4619      	mov	r1, r3
 8009d78:	4814      	ldr	r0, [pc, #80]	; (8009dcc <HW_DBG_Init+0x118>)
 8009d7a:	f7fc faef 	bl	800635c <USART_ClockInit>

    /* Create USART Queues */
    DBG_RxQueue = xQueueCreate(DBG_RX_QUEUE_LEN, sizeof(char));
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2101      	movs	r1, #1
 8009d82:	2040      	movs	r0, #64	; 0x40
 8009d84:	f7fd f8ea 	bl	8006f5c <xQueueGenericCreate>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <HW_DBG_Init+0x11c>)
 8009d8c:	601a      	str	r2, [r3, #0]
    DBG_TxQueue = xQueueCreate(DBG_TX_QUEUE_LEN, sizeof(char));
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2101      	movs	r1, #1
 8009d92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009d96:	f7fd f8e1 	bl	8006f5c <xQueueGenericCreate>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <HW_DBG_Init+0x120>)
 8009d9e:	601a      	str	r2, [r3, #0]

    /* Enable USART Interrupts */
    USART_ITConfig(DBG_COM, USART_IT_RXNE, ENABLE);
 8009da0:	2201      	movs	r2, #1
 8009da2:	490d      	ldr	r1, [pc, #52]	; (8009dd8 <HW_DBG_Init+0x124>)
 8009da4:	4809      	ldr	r0, [pc, #36]	; (8009dcc <HW_DBG_Init+0x118>)
 8009da6:	f7fc fb53 	bl	8006450 <USART_ITConfig>
    NVIC_SetPriority(DBG_IRQn, OS_ISR_PRIORITY_SER);
 8009daa:	2105      	movs	r1, #5
 8009dac:	2025      	movs	r0, #37	; 0x25
 8009dae:	f7ff ff57 	bl	8009c60 <NVIC_SetPriority>
    NVIC_EnableIRQ(DBG_IRQn);
 8009db2:	2025      	movs	r0, #37	; 0x25
 8009db4:	f7ff ff3a 	bl	8009c2c <NVIC_EnableIRQ>

    /* Enable USART */
    USART_Cmd(DBG_COM, ENABLE);
 8009db8:	2101      	movs	r1, #1
 8009dba:	4804      	ldr	r0, [pc, #16]	; (8009dcc <HW_DBG_Init+0x118>)
 8009dbc:	f7fc fb0a 	bl	80063d4 <USART_Cmd>

}
 8009dc0:	bf00      	nop
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40020000 	.word	0x40020000
 8009dcc:	40011000 	.word	0x40011000
 8009dd0:	20014690 	.word	0x20014690
 8009dd4:	20014694 	.word	0x20014694
 8009dd8:	00050105 	.word	0x00050105

08009ddc <HW_DBG_Put>:
  * @retval pdPASS if the character was sent or added to the TX Queue
  *         pdFAIL if the TX Queue is full
  */

BaseType_t HW_DBG_Put(char ch)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	71fb      	strb	r3, [r7, #7]

    /* If the queue is empty and no message is being transmitted,
     * the line is idle so we can initiate directly the transmission.
     */
    if((uxQueueMessagesWaiting(DBG_TxQueue) == 0) &&
 8009de6:	4b19      	ldr	r3, [pc, #100]	; (8009e4c <HW_DBG_Put+0x70>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd fc56 	bl	800769c <uxQueueMessagesWaiting>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d113      	bne.n	8009e1e <HW_DBG_Put+0x42>
       (USART_GetFlagStatus(DBG_COM, USART_FLAG_TXE) == SET)) {
 8009df6:	2180      	movs	r1, #128	; 0x80
 8009df8:	4815      	ldr	r0, [pc, #84]	; (8009e50 <HW_DBG_Put+0x74>)
 8009dfa:	f7fc fb6b 	bl	80064d4 <USART_GetFlagStatus>
 8009dfe:	4603      	mov	r3, r0
{

    /* If the queue is empty and no message is being transmitted,
     * the line is idle so we can initiate directly the transmission.
     */
    if((uxQueueMessagesWaiting(DBG_TxQueue) == 0) &&
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d10c      	bne.n	8009e1e <HW_DBG_Put+0x42>
       (USART_GetFlagStatus(DBG_COM, USART_FLAG_TXE) == SET)) {

        USART_ITConfig(DBG_COM, USART_IT_TC, ENABLE);
 8009e04:	2201      	movs	r2, #1
 8009e06:	4913      	ldr	r1, [pc, #76]	; (8009e54 <HW_DBG_Put+0x78>)
 8009e08:	4811      	ldr	r0, [pc, #68]	; (8009e50 <HW_DBG_Put+0x74>)
 8009e0a:	f7fc fb21 	bl	8006450 <USART_ITConfig>
        USART_SendData(DBG_COM, (uint16_t) ch);
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	4619      	mov	r1, r3
 8009e14:	480e      	ldr	r0, [pc, #56]	; (8009e50 <HW_DBG_Put+0x74>)
 8009e16:	f7fc faf9 	bl	800640c <USART_SendData>

        return pdPASS;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e011      	b.n	8009e42 <HW_DBG_Put+0x66>
    /* Otherwise, at least 1 transmission is pending,
     * so we add it the the transmit queue.
     */
    } else {

        if(xQueueSend(DBG_TxQueue, &ch, DBG_TX_TIMEOUT) == pdPASS)
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <HW_DBG_Put+0x70>)
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	1df9      	adds	r1, r7, #7
 8009e24:	2300      	movs	r3, #0
 8009e26:	220a      	movs	r2, #10
 8009e28:	f7fd f926 	bl	8007078 <xQueueGenericSend>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d106      	bne.n	8009e40 <HW_DBG_Put+0x64>
        {
            USART_ITConfig(DBG_COM, USART_IT_TC, ENABLE);
 8009e32:	2201      	movs	r2, #1
 8009e34:	4907      	ldr	r1, [pc, #28]	; (8009e54 <HW_DBG_Put+0x78>)
 8009e36:	4806      	ldr	r0, [pc, #24]	; (8009e50 <HW_DBG_Put+0x74>)
 8009e38:	f7fc fb0a 	bl	8006450 <USART_ITConfig>
            return pdPASS;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <HW_DBG_Put+0x66>
        } else {
            return pdFAIL;
 8009e40:	2300      	movs	r3, #0
        }
    }

}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20014694 	.word	0x20014694
 8009e50:	40011000 	.word	0x40011000
 8009e54:	00060106 	.word	0x00060106

08009e58 <HW_DBG_Puts>:
  * @brief  Send a string through Serial Interface
  * @param  str: string to send
  * @retval Pass/Fail status
  */
BaseType_t HW_DBG_Puts(const char *str)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
    while (*str)
 8009e60:	e00d      	b.n	8009e7e <HW_DBG_Puts+0x26>
    {
    	if((HW_DBG_Put(*str)) == pdPASS) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff ffb8 	bl	8009ddc <HW_DBG_Put>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d103      	bne.n	8009e7a <HW_DBG_Puts+0x22>
    	    str++;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3301      	adds	r3, #1
 8009e76:	607b      	str	r3, [r7, #4]
 8009e78:	e001      	b.n	8009e7e <HW_DBG_Puts+0x26>
    	} else {
    	    return pdFAIL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e004      	b.n	8009e88 <HW_DBG_Puts+0x30>
  * @param  str: string to send
  * @retval Pass/Fail status
  */
BaseType_t HW_DBG_Puts(const char *str)
{
    while (*str)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1ed      	bne.n	8009e62 <HW_DBG_Puts+0xa>
    	} else {
    	    return pdFAIL;
    	}
    }

    return pdPASS;
 8009e86:	2301      	movs	r3, #1
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HW_DBG_Get>:
  * @brief  Receive a byte from debug UART
  * @param  Const pointer to read value
  * @retval Pass/Fail status
  */
BaseType_t HW_DBG_Get(const char* str)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
    return(xQueueReceive(DBG_RxQueue, str, DBG_RX_TIMEOUT));
 8009e98:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <HW_DBG_Get+0x20>)
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	220a      	movs	r2, #10
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	f7fd fa7f 	bl	80073a4 <xQueueGenericReceive>
 8009ea6:	4603      	mov	r3, r0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20014690 	.word	0x20014690

08009eb4 <USART1_IRQHandler>:

/*
 * Serial Interface ISR
 */
void DBG_ISR (void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
    char rxChar;
    char txChar;

    // We have not woken a task at the start of the ISR.
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	603b      	str	r3, [r7, #0]

    // Hand RX Interrupt
    if(USART_GetITStatus(DBG_COM, USART_IT_RXNE) != RESET)
 8009ebe:	491d      	ldr	r1, [pc, #116]	; (8009f34 <USART1_IRQHandler+0x80>)
 8009ec0:	481d      	ldr	r0, [pc, #116]	; (8009f38 <USART1_IRQHandler+0x84>)
 8009ec2:	f7fc fb21 	bl	8006508 <USART_GetITStatus>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00d      	beq.n	8009ee8 <USART1_IRQHandler+0x34>
    {
        // RXNE Flag cleared with the USAR_ReceiveData() call
        rxChar = USART_ReceiveData(DBG_COM);
 8009ecc:	481a      	ldr	r0, [pc, #104]	; (8009f38 <USART1_IRQHandler+0x84>)
 8009ece:	f7fc faaf 	bl	8006430 <USART_ReceiveData>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	71fb      	strb	r3, [r7, #7]

        // Put the received char into the Rx Queue
        xQueueSendFromISR(DBG_RxQueue, &rxChar, &xHigherPriorityTaskWoken);
 8009ed8:	4b18      	ldr	r3, [pc, #96]	; (8009f3c <USART1_IRQHandler+0x88>)
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	463a      	mov	r2, r7
 8009ede:	1df9      	adds	r1, r7, #7
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f7fd f9c5 	bl	8007270 <xQueueGenericSendFromISR>
            // Nothing to send! Disable back the ISR
            USART_ITConfig(DBG_COM, USART_IT_TC, DISABLE);
        }

    }
}
 8009ee6:	e020      	b.n	8009f2a <USART1_IRQHandler+0x76>
        xQueueSendFromISR(DBG_RxQueue, &rxChar, &xHigherPriorityTaskWoken);

    }

    // Handle TX Interrupt
    else if(USART_GetITStatus(DBG_COM, USART_IT_TC) != RESET)
 8009ee8:	4915      	ldr	r1, [pc, #84]	; (8009f40 <USART1_IRQHandler+0x8c>)
 8009eea:	4813      	ldr	r0, [pc, #76]	; (8009f38 <USART1_IRQHandler+0x84>)
 8009eec:	f7fc fb0c 	bl	8006508 <USART_GetITStatus>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d019      	beq.n	8009f2a <USART1_IRQHandler+0x76>
    {
        // Clear IT
        USART_ClearITPendingBit(DBG_COM, USART_IT_TC);
 8009ef6:	4912      	ldr	r1, [pc, #72]	; (8009f40 <USART1_IRQHandler+0x8c>)
 8009ef8:	480f      	ldr	r0, [pc, #60]	; (8009f38 <USART1_IRQHandler+0x84>)
 8009efa:	f7fc fb55 	bl	80065a8 <USART_ClearITPendingBit>

        /* Check to see if there is more data to send.
         * The TC interrupt will be re-generated at the end of the transmission.
         * Therefore, this will auto-reload until the queue is empty.
         */
        if((xQueueReceiveFromISR(DBG_TxQueue, &txChar, &xHigherPriorityTaskWoken)) == pdPASS)
 8009efe:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <USART1_IRQHandler+0x90>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	463a      	mov	r2, r7
 8009f04:	1db9      	adds	r1, r7, #6
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fd fb52 	bl	80075b0 <xQueueReceiveFromISR>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d106      	bne.n	8009f20 <USART1_IRQHandler+0x6c>
        {
            USART_SendData(DBG_COM, (uint16_t) txChar);
 8009f12:	79bb      	ldrb	r3, [r7, #6]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	4619      	mov	r1, r3
 8009f18:	4807      	ldr	r0, [pc, #28]	; (8009f38 <USART1_IRQHandler+0x84>)
 8009f1a:	f7fc fa77 	bl	800640c <USART_SendData>
            // Nothing to send! Disable back the ISR
            USART_ITConfig(DBG_COM, USART_IT_TC, DISABLE);
        }

    }
}
 8009f1e:	e004      	b.n	8009f2a <USART1_IRQHandler+0x76>
            USART_SendData(DBG_COM, (uint16_t) txChar);
        }
        else
        {
            // Nothing to send! Disable back the ISR
            USART_ITConfig(DBG_COM, USART_IT_TC, DISABLE);
 8009f20:	2200      	movs	r2, #0
 8009f22:	4907      	ldr	r1, [pc, #28]	; (8009f40 <USART1_IRQHandler+0x8c>)
 8009f24:	4804      	ldr	r0, [pc, #16]	; (8009f38 <USART1_IRQHandler+0x84>)
 8009f26:	f7fc fa93 	bl	8006450 <USART_ITConfig>
        }

    }
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	00050105 	.word	0x00050105
 8009f38:	40011000 	.word	0x40011000
 8009f3c:	20014690 	.word	0x20014690
 8009f40:	00060106 	.word	0x00060106
 8009f44:	20014694 	.word	0x20014694

08009f48 <HW_Digital_Input_Init>:
  * @brief  Initialize the digital inputs
  * @param  None
  * @retval None
  */
void HW_Digital_Input_Init(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable Port Clock */
	SW1_GPIO_CLK_ENABLE();
 8009f4e:	2101      	movs	r1, #1
 8009f50:	2004      	movs	r0, #4
 8009f52:	f7fb f9a7 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
	SW2_GPIO_CLK_ENABLE();
 8009f56:	2101      	movs	r1, #1
 8009f58:	2004      	movs	r0, #4
 8009f5a:	f7fb f9a3 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
	SW3_GPIO_CLK_ENABLE();
 8009f5e:	2101      	movs	r1, #1
 8009f60:	2010      	movs	r0, #16
 8009f62:	f7fb f99f 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Configure switches as input */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 8009f66:	2300      	movs	r3, #0
 8009f68:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = SW1_PIN;
 8009f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f76:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW1_GPIO_PORT, &GPIO_InitStructure);
 8009f78:	463b      	mov	r3, r7
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	485a      	ldr	r0, [pc, #360]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 8009f7e:	f7fa fe65 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW2_PIN;
 8009f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f86:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW2_GPIO_PORT, &GPIO_InitStructure);
 8009f88:	463b      	mov	r3, r7
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4856      	ldr	r0, [pc, #344]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 8009f8e:	f7fa fe5d 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW3_PIN;
 8009f92:	2302      	movs	r3, #2
 8009f94:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW3_GPIO_PORT, &GPIO_InitStructure);
 8009f96:	463b      	mov	r3, r7
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4854      	ldr	r0, [pc, #336]	; (800a0ec <HW_Digital_Input_Init+0x1a4>)
 8009f9c:	f7fa fe56 	bl	8004c4c <GPIO_Init>

    /* Configure end stops as input */
    GPIO_InitStructure.GPIO_Pin = END1_PIN;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	603b      	str	r3, [r7, #0]
    GPIO_Init(END1_GPIO_PORT, &GPIO_InitStructure);
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	484f      	ldr	r0, [pc, #316]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 8009faa:	f7fa fe4f 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END2_PIN;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	603b      	str	r3, [r7, #0]
    GPIO_Init(END2_GPIO_PORT, &GPIO_InitStructure);
 8009fb2:	463b      	mov	r3, r7
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	484c      	ldr	r0, [pc, #304]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 8009fb8:	f7fa fe48 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END3_PIN;
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	603b      	str	r3, [r7, #0]
    GPIO_Init(END3_GPIO_PORT, &GPIO_InitStructure);
 8009fc0:	463b      	mov	r3, r7
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	484a      	ldr	r0, [pc, #296]	; (800a0f0 <HW_Digital_Input_Init+0x1a8>)
 8009fc6:	f7fa fe41 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END4_PIN;
 8009fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fce:	603b      	str	r3, [r7, #0]
    GPIO_Init(END4_GPIO_PORT, &GPIO_InitStructure);
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4846      	ldr	r0, [pc, #280]	; (800a0f0 <HW_Digital_Input_Init+0x1a8>)
 8009fd6:	f7fa fe39 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END5_PIN;
 8009fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fde:	603b      	str	r3, [r7, #0]
    GPIO_Init(END5_GPIO_PORT, &GPIO_InitStructure);
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4843      	ldr	r0, [pc, #268]	; (800a0f4 <HW_Digital_Input_Init+0x1ac>)
 8009fe6:	f7fa fe31 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8009fea:	2301      	movs	r3, #1
 8009fec:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Pin = END6_PIN;
 8009fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ff2:	603b      	str	r3, [r7, #0]
    GPIO_Init(END6_GPIO_PORT, &GPIO_InitStructure);
 8009ff4:	463b      	mov	r3, r7
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	483b      	ldr	r0, [pc, #236]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 8009ffa:	f7fa fe27 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END7_PIN;
 8009ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a002:	603b      	str	r3, [r7, #0]
    GPIO_Init(END7_GPIO_PORT, &GPIO_InitStructure);
 800a004:	463b      	mov	r3, r7
 800a006:	4619      	mov	r1, r3
 800a008:	4837      	ldr	r0, [pc, #220]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 800a00a:	f7fa fe1f 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 800a00e:	2300      	movs	r3, #0
 800a010:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800a012:	2302      	movs	r3, #2
 800a014:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = END8_PIN;
 800a016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a01a:	603b      	str	r3, [r7, #0]
    GPIO_Init(END8_GPIO_PORT, &GPIO_InitStructure);
 800a01c:	463b      	mov	r3, r7
 800a01e:	4619      	mov	r1, r3
 800a020:	4831      	ldr	r0, [pc, #196]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 800a022:	f7fa fe13 	bl	8004c4c <GPIO_Init>

    /* Configure end industrial sensors as input */
    GPIO_InitStructure.GPIO_Pin = IND1_PIN;
 800a026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a02a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND1_GPIO_PORT, &GPIO_InitStructure);
 800a02c:	463b      	mov	r3, r7
 800a02e:	4619      	mov	r1, r3
 800a030:	4831      	ldr	r0, [pc, #196]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a032:	f7fa fe0b 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND2_PIN;
 800a036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a03a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND2_GPIO_PORT, &GPIO_InitStructure);
 800a03c:	463b      	mov	r3, r7
 800a03e:	4619      	mov	r1, r3
 800a040:	482d      	ldr	r0, [pc, #180]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a042:	f7fa fe03 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND3_PIN;
 800a046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a04a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND3_GPIO_PORT, &GPIO_InitStructure);
 800a04c:	463b      	mov	r3, r7
 800a04e:	4619      	mov	r1, r3
 800a050:	4829      	ldr	r0, [pc, #164]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a052:	f7fa fdfb 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND4_PIN;
 800a056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a05a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND4_GPIO_PORT, &GPIO_InitStructure);
 800a05c:	463b      	mov	r3, r7
 800a05e:	4619      	mov	r1, r3
 800a060:	4825      	ldr	r0, [pc, #148]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a062:	f7fa fdf3 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND5_PIN;
 800a066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a06a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND5_GPIO_PORT, &GPIO_InitStructure);
 800a06c:	463b      	mov	r3, r7
 800a06e:	4619      	mov	r1, r3
 800a070:	4821      	ldr	r0, [pc, #132]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a072:	f7fa fdeb 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND6_PIN;
 800a076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a07a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND6_GPIO_PORT, &GPIO_InitStructure);
 800a07c:	463b      	mov	r3, r7
 800a07e:	4619      	mov	r1, r3
 800a080:	481d      	ldr	r0, [pc, #116]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a082:	f7fa fde3 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND7_PIN;
 800a086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a08a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND7_GPIO_PORT, &GPIO_InitStructure);
 800a08c:	463b      	mov	r3, r7
 800a08e:	4619      	mov	r1, r3
 800a090:	4819      	ldr	r0, [pc, #100]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a092:	f7fa fddb 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND8_PIN;
 800a096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a09a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND8_GPIO_PORT, &GPIO_InitStructure);
 800a09c:	463b      	mov	r3, r7
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4815      	ldr	r0, [pc, #84]	; (800a0f8 <HW_Digital_Input_Init+0x1b0>)
 800a0a2:	f7fa fdd3 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND9_PIN;
 800a0a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0aa:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND9_GPIO_PORT, &GPIO_InitStructure);
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	480f      	ldr	r0, [pc, #60]	; (800a0f0 <HW_Digital_Input_Init+0x1a8>)
 800a0b2:	f7fa fdcb 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND10_PIN;
 800a0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0ba:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND10_GPIO_PORT, &GPIO_InitStructure);
 800a0bc:	463b      	mov	r3, r7
 800a0be:	4619      	mov	r1, r3
 800a0c0:	480b      	ldr	r0, [pc, #44]	; (800a0f0 <HW_Digital_Input_Init+0x1a8>)
 800a0c2:	f7fa fdc3 	bl	8004c4c <GPIO_Init>

	GPIO_WriteBit((GPIO_TypeDef*) END6_GPIO_PORT, END6_PIN, Bit_SET);
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0cc:	4806      	ldr	r0, [pc, #24]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 800a0ce:	f7fa fe65 	bl	8004d9c <GPIO_WriteBit>
	GPIO_WriteBit((GPIO_TypeDef*) END7_GPIO_PORT, END7_PIN, Bit_SET);
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a0d8:	4803      	ldr	r0, [pc, #12]	; (800a0e8 <HW_Digital_Input_Init+0x1a0>)
 800a0da:	f7fa fe5f 	bl	8004d9c <GPIO_WriteBit>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	40020800 	.word	0x40020800
 800a0ec:	40021000 	.word	0x40021000
 800a0f0:	40020400 	.word	0x40020400
 800a0f4:	40020000 	.word	0x40020000
 800a0f8:	40020c00 	.word	0x40020c00

0800a0fc <HW_DSV_Init>:
  * @brief  Initialize the DSV UART
  * @param  None
  * @retval None
  */
void HW_DSV_Init(USART_InitTypeDef * USART_InitStruct)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable TXRX Clock */
    DSV_TXRX_GPIO_CLK_ENABLE();
 800a104:	2101      	movs	r1, #1
 800a106:	2002      	movs	r0, #2
 800a108:	f7fb f8cc 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Enable DSV USART clock */
    DSV_CLK_ENABLE();
 800a10c:	2101      	movs	r1, #1
 800a10e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a112:	f7fb f8e7 	bl	80052e4 <RCC_APB1PeriphClockCmd>

    /* Configure USART TXRX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DSV_TXRX_PIN;
 800a116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a11a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a11c:	2302      	movs	r3, #2
 800a11e:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 800a120:	2300      	movs	r3, #0
 800a122:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800a124:	2301      	movs	r3, #1
 800a126:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DSV_TXRX_GPIO_PORT, &GPIO_InitStructure);
 800a128:	f107 0318 	add.w	r3, r7, #24
 800a12c:	4619      	mov	r1, r3
 800a12e:	4812      	ldr	r0, [pc, #72]	; (800a178 <HW_DSV_Init+0x7c>)
 800a130:	f7fa fd8c 	bl	8004c4c <GPIO_Init>


    /* Connect Alternate functions */
    GPIO_PinAFConfig(DSV_TXRX_GPIO_PORT,  DSV_TXRX_PIN_SOURCE,  DSV_TXRX_AF);
 800a134:	2207      	movs	r2, #7
 800a136:	210a      	movs	r1, #10
 800a138:	480f      	ldr	r0, [pc, #60]	; (800a178 <HW_DSV_Init+0x7c>)
 800a13a:	f7fa fe49 	bl	8004dd0 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DSV_COM, USART_InitStruct);
 800a13e:	6879      	ldr	r1, [r7, #4]
 800a140:	480e      	ldr	r0, [pc, #56]	; (800a17c <HW_DSV_Init+0x80>)
 800a142:	f7fc f851 	bl	80061e8 <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 800a146:	f107 0308 	add.w	r3, r7, #8
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fc f92c 	bl	80063a8 <USART_ClockStructInit>
    USART_ClockInit(DSV_COM, &USART_ClockInitStruct);
 800a150:	f107 0308 	add.w	r3, r7, #8
 800a154:	4619      	mov	r1, r3
 800a156:	4809      	ldr	r0, [pc, #36]	; (800a17c <HW_DSV_Init+0x80>)
 800a158:	f7fc f900 	bl	800635c <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DSV_COM, ENABLE);
 800a15c:	2101      	movs	r1, #1
 800a15e:	4807      	ldr	r0, [pc, #28]	; (800a17c <HW_DSV_Init+0x80>)
 800a160:	f7fc f938 	bl	80063d4 <USART_Cmd>

	xl_320_init(XL_320_TX_ONLY);
 800a164:	2001      	movs	r0, #1
 800a166:	f000 ffa3 	bl	800b0b0 <xl_320_init>
	xl_320_set_hw_send(HW_DSV_Put);
 800a16a:	4805      	ldr	r0, [pc, #20]	; (800a180 <HW_DSV_Init+0x84>)
 800a16c:	f000 ffbe 	bl	800b0ec <xl_320_set_hw_send>
}
 800a170:	bf00      	nop
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	40020400 	.word	0x40020400
 800a17c:	40004800 	.word	0x40004800
 800a180:	0800a185 	.word	0x0800a185

0800a184 <HW_DSV_Put>:
  * @brief  Send a byte through DSV UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DSV_Put(uint8_t ch)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DSV_COM, (uint8_t) ch);
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	b29b      	uxth	r3, r3
 800a192:	4619      	mov	r1, r3
 800a194:	4807      	ldr	r0, [pc, #28]	; (800a1b4 <HW_DSV_Put+0x30>)
 800a196:	f7fc f939 	bl	800640c <USART_SendData>
      while(USART_GetFlagStatus(DSV_COM, USART_FLAG_TC) == RESET);
 800a19a:	bf00      	nop
 800a19c:	2140      	movs	r1, #64	; 0x40
 800a19e:	4805      	ldr	r0, [pc, #20]	; (800a1b4 <HW_DSV_Put+0x30>)
 800a1a0:	f7fc f998 	bl	80064d4 <USART_GetFlagStatus>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0f8      	beq.n	800a19c <HW_DSV_Put+0x18>
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40004800 	.word	0x40004800

0800a1b8 <HW_ENC_Init>:

static int32_t encoder1_Value, encoder2_Value;
static int16_t encoder1_Old, encoder2_Old;

void HW_ENC_Init(void)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Enable GPIO Clocks */
    ENC1_A_GPIO_CLK_ENABLE();
 800a1be:	2101      	movs	r1, #1
 800a1c0:	2002      	movs	r0, #2
 800a1c2:	f7fb f86f 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ENC1_B_GPIO_CLK_ENABLE();
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	2002      	movs	r0, #2
 800a1ca:	f7fb f86b 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ENC2_A_GPIO_CLK_ENABLE();
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	2002      	movs	r0, #2
 800a1d2:	f7fb f867 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ENC2_B_GPIO_CLK_ENABLE();
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	2002      	movs	r0, #2
 800a1da:	f7fb f863 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Configure GPIOs */
    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	717b      	strb	r3, [r7, #5]

    GPIO_InitStruct.GPIO_Pin = ENC1_A_PIN;
 800a1ee:	2310      	movs	r3, #16
 800a1f0:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_A_GPIO_PORT, ENC1_A_PIN_SOURCE, ENC1_A_AF);
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	2104      	movs	r1, #4
 800a1f6:	482c      	ldr	r0, [pc, #176]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a1f8:	f7fa fdea 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_A_GPIO_PORT, &GPIO_InitStruct);
 800a1fc:	463b      	mov	r3, r7
 800a1fe:	4619      	mov	r1, r3
 800a200:	4829      	ldr	r0, [pc, #164]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a202:	f7fa fd23 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC1_B_PIN;
 800a206:	2320      	movs	r3, #32
 800a208:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_B_GPIO_PORT, ENC1_B_PIN_SOURCE, ENC1_B_AF);
 800a20a:	2202      	movs	r2, #2
 800a20c:	2105      	movs	r1, #5
 800a20e:	4826      	ldr	r0, [pc, #152]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a210:	f7fa fdde 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_B_GPIO_PORT, &GPIO_InitStruct);
 800a214:	463b      	mov	r3, r7
 800a216:	4619      	mov	r1, r3
 800a218:	4823      	ldr	r0, [pc, #140]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a21a:	f7fa fd17 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_A_PIN;
 800a21e:	2340      	movs	r3, #64	; 0x40
 800a220:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_A_GPIO_PORT, ENC2_A_PIN_SOURCE, ENC2_A_AF);
 800a222:	2202      	movs	r2, #2
 800a224:	2106      	movs	r1, #6
 800a226:	4820      	ldr	r0, [pc, #128]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a228:	f7fa fdd2 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_A_GPIO_PORT, &GPIO_InitStruct);
 800a22c:	463b      	mov	r3, r7
 800a22e:	4619      	mov	r1, r3
 800a230:	481d      	ldr	r0, [pc, #116]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a232:	f7fa fd0b 	bl	8004c4c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_B_PIN;
 800a236:	2380      	movs	r3, #128	; 0x80
 800a238:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_B_GPIO_PORT, ENC2_B_PIN_SOURCE, ENC2_B_AF);
 800a23a:	2202      	movs	r2, #2
 800a23c:	2107      	movs	r1, #7
 800a23e:	481a      	ldr	r0, [pc, #104]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a240:	f7fa fdc6 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_B_GPIO_PORT, &GPIO_InitStruct);
 800a244:	463b      	mov	r3, r7
 800a246:	4619      	mov	r1, r3
 800a248:	4817      	ldr	r0, [pc, #92]	; (800a2a8 <HW_ENC_Init+0xf0>)
 800a24a:	f7fa fcff 	bl	8004c4c <GPIO_Init>

    /* Enable Quadrature Encoder timer clocks */
    ENC1_TIM_CLK_ENABLE();
 800a24e:	2101      	movs	r1, #1
 800a250:	2002      	movs	r0, #2
 800a252:	f7fb f847 	bl	80052e4 <RCC_APB1PeriphClockCmd>
    ENC2_TIM_CLK_ENABLE();
 800a256:	2101      	movs	r1, #1
 800a258:	2004      	movs	r0, #4
 800a25a:	f7fb f843 	bl	80052e4 <RCC_APB1PeriphClockCmd>

    /* Configure Quadrature Encoder Timers */
    TIM_EncoderInterfaceConfig(ENC1_TIM,
 800a25e:	2300      	movs	r3, #0
 800a260:	2200      	movs	r2, #0
 800a262:	2103      	movs	r1, #3
 800a264:	4811      	ldr	r0, [pc, #68]	; (800a2ac <HW_ENC_Init+0xf4>)
 800a266:	f7fb fd0b 	bl	8005c80 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC1_TIM, 0xFFFFFFFF);
 800a26a:	f04f 31ff 	mov.w	r1, #4294967295
 800a26e:	480f      	ldr	r0, [pc, #60]	; (800a2ac <HW_ENC_Init+0xf4>)
 800a270:	f7fb f9dc 	bl	800562c <TIM_SetAutoreload>

    TIM_EncoderInterfaceConfig(ENC2_TIM,
 800a274:	2300      	movs	r3, #0
 800a276:	2200      	movs	r2, #0
 800a278:	2103      	movs	r1, #3
 800a27a:	480d      	ldr	r0, [pc, #52]	; (800a2b0 <HW_ENC_Init+0xf8>)
 800a27c:	f7fb fd00 	bl	8005c80 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC2_TIM, 0xFFFFFFFF);
 800a280:	f04f 31ff 	mov.w	r1, #4294967295
 800a284:	480a      	ldr	r0, [pc, #40]	; (800a2b0 <HW_ENC_Init+0xf8>)
 800a286:	f7fb f9d1 	bl	800562c <TIM_SetAutoreload>

    /* Cleanup timers */
    HW_ENC_ResetChannels();
 800a28a:	f000 f861 	bl	800a350 <HW_ENC_ResetChannels>

    /* Enable Quadrature Encoders */
    TIM_Cmd(ENC1_TIM, ENABLE);
 800a28e:	2101      	movs	r1, #1
 800a290:	4806      	ldr	r0, [pc, #24]	; (800a2ac <HW_ENC_Init+0xf4>)
 800a292:	f7fb f9e5 	bl	8005660 <TIM_Cmd>
    TIM_Cmd(ENC2_TIM, ENABLE);
 800a296:	2101      	movs	r1, #1
 800a298:	4805      	ldr	r0, [pc, #20]	; (800a2b0 <HW_ENC_Init+0xf8>)
 800a29a:	f7fb f9e1 	bl	8005660 <TIM_Cmd>

}
 800a29e:	bf00      	nop
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	40020400 	.word	0x40020400
 800a2ac:	40000400 	.word	0x40000400
 800a2b0:	40000800 	.word	0x40000800

0800a2b4 <HW_ENC_GetChannel>:

int32_t HW_ENC_GetChannel(HW_ENC_ChannelTypeDef channel)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	71fb      	strb	r3, [r7, #7]
	int16_t encoder, delta;
    switch(channel)
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <HW_ENC_GetChannel+0x16>
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d018      	beq.n	800a2fa <HW_ENC_GetChannel+0x46>
 800a2c8:	e02f      	b.n	800a32a <HW_ENC_GetChannel+0x76>
    {
    case HW_ENC_CHANNEL1:
    	encoder = (int16_t)ENC1_TIM->CNT;
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <HW_ENC_GetChannel+0x84>)
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	81fb      	strh	r3, [r7, #14]
    	delta = encoder - encoder1_Old;
 800a2d0:	89fa      	ldrh	r2, [r7, #14]
 800a2d2:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <HW_ENC_GetChannel+0x88>)
 800a2d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	81bb      	strh	r3, [r7, #12]
    	encoder1_Old = encoder;
 800a2e0:	4a16      	ldr	r2, [pc, #88]	; (800a33c <HW_ENC_GetChannel+0x88>)
 800a2e2:	89fb      	ldrh	r3, [r7, #14]
 800a2e4:	8013      	strh	r3, [r2, #0]
    	encoder1_Value += (int32_t)delta;
 800a2e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a2ea:	4b15      	ldr	r3, [pc, #84]	; (800a340 <HW_ENC_GetChannel+0x8c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	4a13      	ldr	r2, [pc, #76]	; (800a340 <HW_ENC_GetChannel+0x8c>)
 800a2f2:	6013      	str	r3, [r2, #0]
        return  encoder1_Value;
 800a2f4:	4b12      	ldr	r3, [pc, #72]	; (800a340 <HW_ENC_GetChannel+0x8c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	e018      	b.n	800a32c <HW_ENC_GetChannel+0x78>
        break;

    case HW_ENC_CHANNEL2:
    	encoder = (int16_t)ENC2_TIM->CNT;
 800a2fa:	4b12      	ldr	r3, [pc, #72]	; (800a344 <HW_ENC_GetChannel+0x90>)
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	81fb      	strh	r3, [r7, #14]
    	delta = encoder - encoder2_Old;
 800a300:	89fa      	ldrh	r2, [r7, #14]
 800a302:	4b11      	ldr	r3, [pc, #68]	; (800a348 <HW_ENC_GetChannel+0x94>)
 800a304:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	81bb      	strh	r3, [r7, #12]
    	encoder2_Old = encoder;
 800a310:	4a0d      	ldr	r2, [pc, #52]	; (800a348 <HW_ENC_GetChannel+0x94>)
 800a312:	89fb      	ldrh	r3, [r7, #14]
 800a314:	8013      	strh	r3, [r2, #0]
    	encoder2_Value += (int32_t)delta;
 800a316:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a31a:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <HW_ENC_GetChannel+0x98>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4413      	add	r3, r2
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <HW_ENC_GetChannel+0x98>)
 800a322:	6013      	str	r3, [r2, #0]
        return  encoder2_Value;
 800a324:	4b09      	ldr	r3, [pc, #36]	; (800a34c <HW_ENC_GetChannel+0x98>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	e000      	b.n	800a32c <HW_ENC_GetChannel+0x78>
        break;

    default:
        /* Error */
        return 0;
 800a32a:	2300      	movs	r3, #0
        break;
    }

}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	40000400 	.word	0x40000400
 800a33c:	200146a0 	.word	0x200146a0
 800a340:	20014698 	.word	0x20014698
 800a344:	40000800 	.word	0x40000800
 800a348:	200146a2 	.word	0x200146a2
 800a34c:	2001469c 	.word	0x2001469c

0800a350 <HW_ENC_ResetChannels>:

void HW_ENC_ResetChannels(void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
    ENC1_TIM->CNT = 0x00000000 ;
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <HW_ENC_ResetChannels+0x1c>)
 800a356:	2200      	movs	r2, #0
 800a358:	625a      	str	r2, [r3, #36]	; 0x24
    ENC2_TIM->CNT = 0x00000000 ;
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <HW_ENC_ResetChannels+0x20>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a360:	bf00      	nop
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	40000400 	.word	0x40000400
 800a370:	40000800 	.word	0x40000800

0800a374 <HW_HMI_Init>:
 */

#include "blueboard.h"

void HW_HMI_Init(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b08c      	sub	sp, #48	; 0x30
 800a378:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef SPI_InitStruct;

    /* Enable GPIOs Clock */
    HMI_CSN_GPIO_CLK_ENABLE();
 800a37a:	2101      	movs	r1, #1
 800a37c:	2010      	movs	r0, #16
 800a37e:	f7fa ff91 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    HMI_SCK_GPIO_CLK_ENABLE();
 800a382:	2101      	movs	r1, #1
 800a384:	2010      	movs	r0, #16
 800a386:	f7fa ff8d 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    HMI_MOSI_GPIO_CLK_ENABLE();
 800a38a:	2101      	movs	r1, #1
 800a38c:	2010      	movs	r0, #16
 800a38e:	f7fa ff89 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    HMI_MISO_GPIO_CLK_ENABLE();
 800a392:	2101      	movs	r1, #1
 800a394:	2010      	movs	r0, #16
 800a396:	f7fa ff85 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_IN_GPIO_CLK_ENABLE();
 800a39a:	2101      	movs	r1, #1
 800a39c:	2010      	movs	r0, #16
 800a39e:	f7fa ff81 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_OUT_GPIO_CLK_ENABLE();
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	2004      	movs	r0, #4
 800a3a6:	f7fa ff7d 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Enable Control Interface SPI clock */
    HMI_CLK_ENABLE();
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a3b0:	f7fa ffb8 	bl	8005324 <RCC_APB2PeriphClockCmd>

    /* Configure HMI_CSN as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 800a3d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4842      	ldr	r0, [pc, #264]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a3d8:	f7fa fc38 	bl	8004c4c <GPIO_Init>

    /* Configure HMI_SCK as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_SCK_PIN;
 800a3dc:	2304      	movs	r3, #4
 800a3de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800a3e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	483e      	ldr	r0, [pc, #248]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a3e8:	f7fa fc30 	bl	8004c4c <GPIO_Init>

    /* Configure HMI_MOSI as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MOSI_PIN;
 800a3ec:	2340      	movs	r3, #64	; 0x40
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800a3f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	483a      	ldr	r0, [pc, #232]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a3f8:	f7fa fc28 	bl	8004c4c <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MISO_PIN;
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800a400:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a404:	4619      	mov	r1, r3
 800a406:	4836      	ldr	r0, [pc, #216]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a408:	f7fa fc20 	bl	8004c4c <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(HMI_SCK_GPIO_PORT,   HMI_SCK_PIN_SOURCE,   HMI_SCK_AF);
 800a40c:	2205      	movs	r2, #5
 800a40e:	2102      	movs	r1, #2
 800a410:	4833      	ldr	r0, [pc, #204]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a412:	f7fa fcdd 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MOSI_GPIO_PORT,  HMI_MOSI_PIN_SOURCE,  HMI_MOSI_AF);
 800a416:	2205      	movs	r2, #5
 800a418:	2106      	movs	r1, #6
 800a41a:	4831      	ldr	r0, [pc, #196]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a41c:	f7fa fcd8 	bl	8004dd0 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MISO_GPIO_PORT,  HMI_MISO_PIN_SOURCE,  HMI_MISO_AF);
 800a420:	2205      	movs	r2, #5
 800a422:	2105      	movs	r1, #5
 800a424:	482e      	ldr	r0, [pc, #184]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a426:	f7fa fcd3 	bl	8004dd0 <GPIO_PinAFConfig>

    /* Configure HMI_CSN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 800a42a:	2310      	movs	r3, #16
 800a42c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 800a434:	2303      	movs	r3, #3
 800a436:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800a43a:	2301      	movs	r3, #1
 800a43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 800a440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a444:	4619      	mov	r1, r3
 800a446:	4826      	ldr	r0, [pc, #152]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a448:	f7fa fc00 	bl	8004c4c <GPIO_Init>

    /* Configure HMI_IRQ_IN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_IN_PIN;
 800a44c:	2308      	movs	r3, #8
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a450:	2300      	movs	r3, #0
 800a452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; /* "IN" for HMI, "OUT" for master (us) */
 800a456:	2301      	movs	r3, #1
 800a458:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_IN_GPIO_PORT, &GPIO_InitStructure);
 800a45c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a460:	4619      	mov	r1, r3
 800a462:	481f      	ldr	r0, [pc, #124]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a464:	f7fa fbf2 	bl	8004c4c <GPIO_Init>

    /* Configure HMI_IRQ_OUT as Digital Input */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_OUT_PIN;
 800a468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a46c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; /* "OUT" for HMI, "IN" for master (us) */
 800a474:	2300      	movs	r3, #0
 800a476:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_OUT_GPIO_PORT, &GPIO_InitStructure);
 800a47a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a47e:	4619      	mov	r1, r3
 800a480:	4818      	ldr	r0, [pc, #96]	; (800a4e4 <HW_HMI_Init+0x170>)
 800a482:	f7fa fbe3 	bl	8004c4c <GPIO_Init>

    /* Default SPI Configuration */
    SPI_StructInit(&SPI_InitStruct);
 800a486:	1d3b      	adds	r3, r7, #4
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fa ffa5 	bl	80053d8 <SPI_StructInit>

    /* Configure custom fields */
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 800a48e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a492:	60bb      	str	r3, [r7, #8]
    SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800a494:	2300      	movs	r3, #0
 800a496:	607b      	str	r3, [r7, #4]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; /* TBC */
 800a498:	2320      	movs	r3, #32
 800a49a:	61fb      	str	r3, [r7, #28]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
 800a49c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a4a0:	60fb      	str	r3, [r7, #12]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	613b      	str	r3, [r7, #16]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // Internal NSS mgmt and pull internal NSS high;
 800a4aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4ae:	61bb      	str	r3, [r7, #24]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	623b      	str	r3, [r7, #32]

    /* Configure SPI module */
    SPI_Init(HMI_COM, &SPI_InitStruct);
 800a4b4:	1d3b      	adds	r3, r7, #4
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	480b      	ldr	r0, [pc, #44]	; (800a4e8 <HW_HMI_Init+0x174>)
 800a4ba:	f7fa ffb3 	bl	8005424 <SPI_Init>
    SPI_SSOutputCmd(HMI_COM, ENABLE);
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4809      	ldr	r0, [pc, #36]	; (800a4e8 <HW_HMI_Init+0x174>)
 800a4c2:	f7fb f81f 	bl	8005504 <SPI_SSOutputCmd>

    /* Enable SPI module */
    HMI_CSN_WRITE(HMI_FRAME_IDLE);
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	2110      	movs	r1, #16
 800a4ca:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <HW_HMI_Init+0x16c>)
 800a4cc:	f7fa fc66 	bl	8004d9c <GPIO_WriteBit>
    SPI_Cmd(HMI_COM, ENABLE);
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <HW_HMI_Init+0x174>)
 800a4d4:	f7fa fffa 	bl	80054cc <SPI_Cmd>

}
 800a4d8:	bf00      	nop
 800a4da:	3730      	adds	r7, #48	; 0x30
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	40021000 	.word	0x40021000
 800a4e4:	40020800 	.word	0x40020800
 800a4e8:	40013400 	.word	0x40013400

0800a4ec <HW_LED_Init>:
  * @brief  Configure LEDs GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_LED_Init(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    LEDR_GPIO_CLK_ENABLE();
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	f7fa fed5 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    LEDG_GPIO_CLK_ENABLE();
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	2008      	movs	r0, #8
 800a4fe:	f7fa fed1 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    LEDB_GPIO_CLK_ENABLE();
 800a502:	2101      	movs	r1, #1
 800a504:	2008      	movs	r0, #8
 800a506:	f7fa fecd 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all LEDs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800a50a:	2301      	movs	r3, #1
 800a50c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a50e:	2300      	movs	r3, #0
 800a510:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a512:	2300      	movs	r3, #0
 800a514:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 800a516:	2302      	movs	r3, #2
 800a518:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = LEDR_PIN;
 800a51a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a51e:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDR_GPIO_PORT, &GPIO_InitStructure);
 800a520:	463b      	mov	r3, r7
 800a522:	4619      	mov	r1, r3
 800a524:	4812      	ldr	r0, [pc, #72]	; (800a570 <HW_LED_Init+0x84>)
 800a526:	f7fa fb91 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDG_PIN;
 800a52a:	2304      	movs	r3, #4
 800a52c:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDG_GPIO_PORT, &GPIO_InitStructure);
 800a52e:	463b      	mov	r3, r7
 800a530:	4619      	mov	r1, r3
 800a532:	4810      	ldr	r0, [pc, #64]	; (800a574 <HW_LED_Init+0x88>)
 800a534:	f7fa fb8a 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDB_PIN;
 800a538:	2380      	movs	r3, #128	; 0x80
 800a53a:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDB_GPIO_PORT, &GPIO_InitStructure);
 800a53c:	463b      	mov	r3, r7
 800a53e:	4619      	mov	r1, r3
 800a540:	480c      	ldr	r0, [pc, #48]	; (800a574 <HW_LED_Init+0x88>)
 800a542:	f7fa fb83 	bl	8004c4c <GPIO_Init>

    /* Default state: LEDs OFF */
    LEDR_WRITE(LEDx_OFF);
 800a546:	2201      	movs	r2, #1
 800a548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a54c:	4808      	ldr	r0, [pc, #32]	; (800a570 <HW_LED_Init+0x84>)
 800a54e:	f7fa fc25 	bl	8004d9c <GPIO_WriteBit>
    LEDG_WRITE(LEDx_OFF);
 800a552:	2201      	movs	r2, #1
 800a554:	2104      	movs	r1, #4
 800a556:	4807      	ldr	r0, [pc, #28]	; (800a574 <HW_LED_Init+0x88>)
 800a558:	f7fa fc20 	bl	8004d9c <GPIO_WriteBit>
    LEDB_WRITE(LEDx_OFF);
 800a55c:	2201      	movs	r2, #1
 800a55e:	2180      	movs	r1, #128	; 0x80
 800a560:	4804      	ldr	r0, [pc, #16]	; (800a574 <HW_LED_Init+0x88>)
 800a562:	f7fa fc1b 	bl	8004d9c <GPIO_WriteBit>
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	40020000 	.word	0x40020000
 800a574:	40020c00 	.word	0x40020c00

0800a578 <HW_MON_Init>:
 */

#include "blueboard.h"

void HW_MON_Init(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08c      	sub	sp, #48	; 0x30
 800a57c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    ADC_InitTypeDef  ADC_InitStructure;

    /* Enable ADC clock so that we can talk to it */
    MON_CLK_ENABLE();
 800a57e:	2101      	movs	r1, #1
 800a580:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a584:	f7fa fece 	bl	8005324 <RCC_APB2PeriphClockCmd>

    /* Enable GPIO clocks */
    ADC_CEL1_GPIO_CLK_ENABLE();
 800a588:	2101      	movs	r1, #1
 800a58a:	2004      	movs	r0, #4
 800a58c:	f7fa fe8a 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_CEL2_GPIO_CLK_ENABLE();
 800a590:	2101      	movs	r1, #1
 800a592:	2004      	movs	r0, #4
 800a594:	f7fa fe86 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_CEL3_GPIO_CLK_ENABLE();
 800a598:	2101      	movs	r1, #1
 800a59a:	2002      	movs	r0, #2
 800a59c:	f7fa fe82 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_CEL4_GPIO_CLK_ENABLE();
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	2002      	movs	r0, #2
 800a5a4:	f7fa fe7e 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_IBAT_GPIO_CLK_ENABLE();
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	2004      	movs	r0, #4
 800a5ac:	f7fa fe7a 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_IP1_GPIO_CLK_ENABLE();
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	2004      	movs	r0, #4
 800a5b4:	f7fa fe76 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_IP2_GPIO_CLK_ENABLE();
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	f7fa fe72 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_IP3_GPIO_CLK_ENABLE();
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	f7fa fe6e 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT1_GPIO_CLK_ENABLE();
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	f7fa fe6a 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT2_GPIO_CLK_ENABLE();
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f7fa fe66 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all Analog channels */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    GPIO_InitStructure.GPIO_Pin = ADC_CEL1_PIN;
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL1_GPIO_PORT, &GPIO_InitStructure);
 800a5f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4840      	ldr	r0, [pc, #256]	; (800a6fc <HW_MON_Init+0x184>)
 800a5fc:	f7fa fb26 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL2_PIN;
 800a600:	2320      	movs	r3, #32
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL2_GPIO_PORT, &GPIO_InitStructure);
 800a604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a608:	4619      	mov	r1, r3
 800a60a:	483c      	ldr	r0, [pc, #240]	; (800a6fc <HW_MON_Init+0x184>)
 800a60c:	f7fa fb1e 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL3_PIN;
 800a610:	2301      	movs	r3, #1
 800a612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL3_GPIO_PORT, &GPIO_InitStructure);
 800a614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a618:	4619      	mov	r1, r3
 800a61a:	4839      	ldr	r0, [pc, #228]	; (800a700 <HW_MON_Init+0x188>)
 800a61c:	f7fa fb16 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL4_PIN;
 800a620:	2302      	movs	r3, #2
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL4_GPIO_PORT, &GPIO_InitStructure);
 800a624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a628:	4619      	mov	r1, r3
 800a62a:	4835      	ldr	r0, [pc, #212]	; (800a700 <HW_MON_Init+0x188>)
 800a62c:	f7fa fb0e 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IBAT_PIN;
 800a630:	2304      	movs	r3, #4
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IBAT_GPIO_PORT, &GPIO_InitStructure);
 800a634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a638:	4619      	mov	r1, r3
 800a63a:	4830      	ldr	r0, [pc, #192]	; (800a6fc <HW_MON_Init+0x184>)
 800a63c:	f7fa fb06 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP1_PIN;
 800a640:	2308      	movs	r3, #8
 800a642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP1_GPIO_PORT, &GPIO_InitStructure);
 800a644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a648:	4619      	mov	r1, r3
 800a64a:	482c      	ldr	r0, [pc, #176]	; (800a6fc <HW_MON_Init+0x184>)
 800a64c:	f7fa fafe 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP2_PIN;
 800a650:	2310      	movs	r3, #16
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP2_GPIO_PORT, &GPIO_InitStructure);
 800a654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a658:	4619      	mov	r1, r3
 800a65a:	482a      	ldr	r0, [pc, #168]	; (800a704 <HW_MON_Init+0x18c>)
 800a65c:	f7fa faf6 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP3_PIN;
 800a660:	2320      	movs	r3, #32
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP3_GPIO_PORT, &GPIO_InitStructure);
 800a664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a668:	4619      	mov	r1, r3
 800a66a:	4826      	ldr	r0, [pc, #152]	; (800a704 <HW_MON_Init+0x18c>)
 800a66c:	f7fa faee 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT1_PIN;
 800a670:	2340      	movs	r3, #64	; 0x40
 800a672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT1_GPIO_PORT, &GPIO_InitStructure);
 800a674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a678:	4619      	mov	r1, r3
 800a67a:	4822      	ldr	r0, [pc, #136]	; (800a704 <HW_MON_Init+0x18c>)
 800a67c:	f7fa fae6 	bl	8004c4c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT2_PIN;
 800a680:	2380      	movs	r3, #128	; 0x80
 800a682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT2_GPIO_PORT, &GPIO_InitStructure);
 800a684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a688:	4619      	mov	r1, r3
 800a68a:	481e      	ldr	r0, [pc, #120]	; (800a704 <HW_MON_Init+0x18c>)
 800a68c:	f7fa fade 	bl	8004c4c <GPIO_Init>

    /* IMPORTANT: populate default values before use */
    ADC_CommonStructInit(&ADC_CommonInitStruct);
 800a690:	f107 0318 	add.w	r3, r7, #24
 800a694:	4618      	mov	r0, r3
 800a696:	f7fa fa75 	bl	8004b84 <ADC_CommonStructInit>
    ADC_StructInit(&ADC_InitStructure);
 800a69a:	463b      	mov	r3, r7
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fa fa29 	bl	8004af4 <ADC_StructInit>

    /* PCLK2 is the APB2 clock (96 MHz)
     * ADCCLK = PCLK2/8 = 96/8 = 12 MHz */
    ADC_CommonInitStruct.ADC_Prescaler          = ADC_Prescaler_Div8;
 800a6a2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a6a6:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStruct.ADC_Mode               = ADC_Mode_Independent;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	61bb      	str	r3, [r7, #24]
    ADC_CommonInitStruct.ADC_DMAAccessMode      = ADC_DMAAccessMode_Disabled;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStruct.ADC_TwoSamplingDelay   = ADC_TwoSamplingDelay_5Cycles;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInit(&ADC_CommonInitStruct);
 800a6b4:	f107 0318 	add.w	r3, r7, #24
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fa fa3b 	bl	8004b34 <ADC_CommonInit>

    /* Actual ADC Configuration */
    ADC_InitStructure.ADC_Resolution            = ADC_Resolution_12b;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	603b      	str	r3, [r7, #0]
    ADC_InitStructure.ADC_ScanConvMode          = DISABLE;//DISABLE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	713b      	strb	r3, [r7, #4]
    ADC_InitStructure.ADC_ContinuousConvMode    = DISABLE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	717b      	strb	r3, [r7, #5]
    ADC_InitStructure.ADC_ExternalTrigConv      = ADC_Software_Start;//// //
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <HW_MON_Init+0x190>)
 800a6cc:	60fb      	str	r3, [r7, #12]
    ADC_InitStructure.ADC_ExternalTrigConvEdge  = ADC_ExternalTrigConvEdge_None;//// //
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60bb      	str	r3, [r7, #8]
    ADC_InitStructure.ADC_DataAlign             = ADC_DataAlign_Right;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_NbrOfConversion       = 1;//MONn;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	753b      	strb	r3, [r7, #20]
    ADC_Init(MON_ADC, &ADC_InitStructure);
 800a6da:	463b      	mov	r3, r7
 800a6dc:	4619      	mov	r1, r3
 800a6de:	480b      	ldr	r0, [pc, #44]	; (800a70c <HW_MON_Init+0x194>)
 800a6e0:	f7fa f9b2 	bl	8004a48 <ADC_Init>

    /* Enable Temperature and Internal VREF channels
     * VBAT Conversion cannot be activated at the same time (channel is shared)
     */
    ADC_TempSensorVrefintCmd(ENABLE);
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f7fa fa7f 	bl	8004be8 <ADC_TempSensorVrefintCmd>

    /* Switch ADC ON */
    ADC_Cmd(MON_ADC, ENABLE);
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	4807      	ldr	r0, [pc, #28]	; (800a70c <HW_MON_Init+0x194>)
 800a6ee:	f7fa fa5f 	bl	8004bb0 <ADC_Cmd>

}
 800a6f2:	bf00      	nop
 800a6f4:	3730      	adds	r7, #48	; 0x30
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	40020800 	.word	0x40020800
 800a700:	40020400 	.word	0x40020400
 800a704:	40020000 	.word	0x40020000
 800a708:	0f000001 	.word	0x0f000001
 800a70c:	40012000 	.word	0x40012000

0800a710 <HW_MOT_Init>:

#include "blueboard.h"


void HW_MOT_Init(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b090      	sub	sp, #64	; 0x40
 800a714:	af00      	add	r7, sp, #0

  //  MOT_SLEEP_GPIO_CLK_ENABLE();
  //  MOT_RESET_GPIO_CLK_ENABLE();
  //  MOT_I1_GPIO_CLK_ENABLE();
  //  MOT_I0_GPIO_CLK_ENABLE();
    MOT1_IN1_GPIO_CLK_ENABLE();
 800a716:	2101      	movs	r1, #1
 800a718:	2010      	movs	r0, #16
 800a71a:	f7fa fdc3 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    MOT1_IN2_GPIO_CLK_ENABLE();
 800a71e:	2101      	movs	r1, #1
 800a720:	2010      	movs	r0, #16
 800a722:	f7fa fdbf 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    MOT2_IN1_GPIO_CLK_ENABLE();
 800a726:	2101      	movs	r1, #1
 800a728:	2010      	movs	r0, #16
 800a72a:	f7fa fdbb 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    MOT2_IN2_GPIO_CLK_ENABLE();
 800a72e:	2101      	movs	r1, #1
 800a730:	2010      	movs	r0, #16
 800a732:	f7fa fdb7 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
  //  MOT_FAULT_GPIO_CLK_ENABLE();

    /* Common configuration for all General-Purpose Outputs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800a736:	2301      	movs	r3, #1
 800a738:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a73c:	2300      	movs	r3, #0
 800a73e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a742:	2300      	movs	r3, #0
 800a744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 800a748:	2302      	movs	r3, #2
 800a74a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    //    GPIO_Init(MOT_I1_GPIO_PORT, &GPIO_InitStructure);

    //    GPIO_InitStructure.GPIO_Pin = MOT_I0_PIN;
    //    GPIO_Init(MOT_I0_GPIO_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
 800a74e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a752:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
 800a754:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a758:	4619      	mov	r1, r3
 800a75a:	483e      	ldr	r0, [pc, #248]	; (800a854 <HW_MOT_Init+0x144>)
 800a75c:	f7fa fa76 	bl	8004c4c <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin = MOT2_IN2_PIN;
 800a760:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a764:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT2_IN2_GPIO_PORT, &GPIO_InitStructure);
 800a766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a76a:	4619      	mov	r1, r3
 800a76c:	4839      	ldr	r0, [pc, #228]	; (800a854 <HW_MOT_Init+0x144>)
 800a76e:	f7fa fa6d 	bl	8004c4c <GPIO_Init>

    /* Alternate function (PWM) */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a772:	2302      	movs	r3, #2
 800a774:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    GPIO_InitStructure.GPIO_Pin = MOT1_IN1_PIN;
 800a778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT1_IN1_GPIO_PORT, &GPIO_InitStructure);
 800a77e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a782:	4619      	mov	r1, r3
 800a784:	4833      	ldr	r0, [pc, #204]	; (800a854 <HW_MOT_Init+0x144>)
 800a786:	f7fa fa61 	bl	8004c4c <GPIO_Init>
    GPIO_PinAFConfig(MOT1_IN1_GPIO_PORT, MOT1_IN1_PIN_SOURCE, MOT1_IN1_AF);
 800a78a:	2201      	movs	r2, #1
 800a78c:	210d      	movs	r1, #13
 800a78e:	4831      	ldr	r0, [pc, #196]	; (800a854 <HW_MOT_Init+0x144>)
 800a790:	f7fa fb1e 	bl	8004dd0 <GPIO_PinAFConfig>

    //    GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
    //    GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
    //    GPIO_PinAFConfig(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN_SOURCE, MOT1_IN2_AF);

    GPIO_InitStructure.GPIO_Pin = MOT2_IN1_PIN;
 800a794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a798:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT2_IN1_GPIO_PORT, &GPIO_InitStructure);
 800a79a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a79e:	4619      	mov	r1, r3
 800a7a0:	482c      	ldr	r0, [pc, #176]	; (800a854 <HW_MOT_Init+0x144>)
 800a7a2:	f7fa fa53 	bl	8004c4c <GPIO_Init>
    GPIO_PinAFConfig(MOT2_IN1_GPIO_PORT, MOT2_IN1_PIN_SOURCE, MOT2_IN1_AF);
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	210b      	movs	r1, #11
 800a7aa:	482a      	ldr	r0, [pc, #168]	; (800a854 <HW_MOT_Init+0x144>)
 800a7ac:	f7fa fb10 	bl	8004dd0 <GPIO_PinAFConfig>
    //    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    //    GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    //    GPIO_Init(MOT_FAULT_GPIO_PORT, &GPIO_InitStructure);

    /* Enable Timers Clocks from RCC */
    MOT_TIM_CLK_ENABLE();
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	f7fa fdb6 	bl	8005324 <RCC_APB2PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = MOT_TIMER_PRESCALER;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = MOT_TIMER_PERIOD;
 800a7c4:	f640 739f 	movw	r3, #3999	; 0xf9f
 800a7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(MOT_TIM, &TIM_BaseStruct);
 800a7ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4820      	ldr	r0, [pc, #128]	; (800a858 <HW_MOT_Init+0x148>)
 800a7d6:	f7fa feb1 	bl	800553c <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(MOT_TIM, ENABLE);
 800a7da:	2101      	movs	r1, #1
 800a7dc:	481e      	ldr	r0, [pc, #120]	; (800a858 <HW_MOT_Init+0x148>)
 800a7de:	f7fb fa05 	bl	8005bec <TIM_CtrlPWMOutputs>

    /* Enable Motor Timer */
    TIM_Cmd(MOT_TIM, ENABLE);
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	481c      	ldr	r0, [pc, #112]	; (800a858 <HW_MOT_Init+0x148>)
 800a7e6:	f7fa ff3b 	bl	8005660 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 800a7ea:	1d3b      	adds	r3, r7, #4
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fb f933 	bl	8005a58 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 800a7f2:	2360      	movs	r3, #96	; 0x60
 800a7f4:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 800a7fe:	2300      	movs	r3, #0
 800a800:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(MOT_TIM, &TIM_OCStruct);
 800a802:	1d3b      	adds	r3, r7, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4814      	ldr	r0, [pc, #80]	; (800a858 <HW_MOT_Init+0x148>)
 800a808:	f7fa ff46 	bl	8005698 <TIM_OC1Init>
    TIM_OC2Init(MOT_TIM, &TIM_OCStruct);
 800a80c:	1d3b      	adds	r3, r7, #4
 800a80e:	4619      	mov	r1, r3
 800a810:	4811      	ldr	r0, [pc, #68]	; (800a858 <HW_MOT_Init+0x148>)
 800a812:	f7fa ffbb 	bl	800578c <TIM_OC2Init>
    TIM_OC3Init(MOT_TIM, &TIM_OCStruct);
 800a816:	1d3b      	adds	r3, r7, #4
 800a818:	4619      	mov	r1, r3
 800a81a:	480f      	ldr	r0, [pc, #60]	; (800a858 <HW_MOT_Init+0x148>)
 800a81c:	f7fb f838 	bl	8005890 <TIM_OC3Init>
    TIM_OC4Init(MOT_TIM, &TIM_OCStruct);
 800a820:	1d3b      	adds	r3, r7, #4
 800a822:	4619      	mov	r1, r3
 800a824:	480c      	ldr	r0, [pc, #48]	; (800a858 <HW_MOT_Init+0x148>)
 800a826:	f7fb f8b3 	bl	8005990 <TIM_OC4Init>

    TIM_OC1PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800a82a:	2108      	movs	r1, #8
 800a82c:	480a      	ldr	r0, [pc, #40]	; (800a858 <HW_MOT_Init+0x148>)
 800a82e:	f7fb f96d 	bl	8005b0c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800a832:	2108      	movs	r1, #8
 800a834:	4808      	ldr	r0, [pc, #32]	; (800a858 <HW_MOT_Init+0x148>)
 800a836:	f7fb f985 	bl	8005b44 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800a83a:	2108      	movs	r1, #8
 800a83c:	4806      	ldr	r0, [pc, #24]	; (800a858 <HW_MOT_Init+0x148>)
 800a83e:	f7fb f99d 	bl	8005b7c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800a842:	2108      	movs	r1, #8
 800a844:	4804      	ldr	r0, [pc, #16]	; (800a858 <HW_MOT_Init+0x148>)
 800a846:	f7fb f9b5 	bl	8005bb4 <TIM_OC4PreloadConfig>
    //    MOT_SLEEP_WRITE(MOT_SLEEP_ON);
    //    MOT_RESET_WRITE(MOT_RESET_ON);

    /* Setup default bridge current */
    //    HW_MOT_SetBridgeCurrent(HW_MOT_CURRENT_100);
}
 800a84a:	bf00      	nop
 800a84c:	3740      	adds	r7, #64	; 0x40
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	40021000 	.word	0x40021000
 800a858:	40010000 	.word	0x40010000

0800a85c <HW_MOT_SetMotorSpeed>:
  * @param  speed: Signed input value, the sign indicates backward or forward rotation
  * @param  fastDecay: If this param is enabled, fast decay mode is applied.
  * @retval None
  */
void HW_MOT_SetMotorSpeed(HW_MOT_ChannelTypeDef channel, int16_t speed, FunctionalState fastDecay)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	4603      	mov	r3, r0
 800a864:	71fb      	strb	r3, [r7, #7]
 800a866:	460b      	mov	r3, r1
 800a868:	80bb      	strh	r3, [r7, #4]
 800a86a:	4613      	mov	r3, r2
 800a86c:	71bb      	strb	r3, [r7, #6]
    uint16_t xIN1_PWM;
    uint16_t xIN2_PWM;

    /* Clamp speed value to 100% */
    if(speed > MOT_TIMER_PERIOD) {
 800a86e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a872:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800a876:	db03      	blt.n	800a880 <HW_MOT_SetMotorSpeed+0x24>
        speed = MOT_TIMER_PERIOD;
 800a878:	f640 739f 	movw	r3, #3999	; 0xf9f
 800a87c:	80bb      	strh	r3, [r7, #4]
 800a87e:	e007      	b.n	800a890 <HW_MOT_SetMotorSpeed+0x34>
    } else if(speed < -MOT_TIMER_PERIOD) {
 800a880:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a884:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 800a888:	dc02      	bgt.n	800a890 <HW_MOT_SetMotorSpeed+0x34>
        speed = -MOT_TIMER_PERIOD;
 800a88a:	f24f 0361 	movw	r3, #61537	; 0xf061
 800a88e:	80bb      	strh	r3, [r7, #4]
    }

    /* Forward rotation */
    if(speed > 0) {
 800a890:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	dd04      	ble.n	800a8a2 <HW_MOT_SetMotorSpeed+0x46>
 //       if(fastDecay == ENABLE) {
            xIN1_PWM = (uint16_t) speed;
 800a898:	88bb      	ldrh	r3, [r7, #4]
 800a89a:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = 0x0000;           /* Meaning constant 0 */
 800a89c:	2300      	movs	r3, #0
 800a89e:	81bb      	strh	r3, [r7, #12]
 800a8a0:	e005      	b.n	800a8ae <HW_MOT_SetMotorSpeed+0x52>
    } else {
//       if(fastDecay == ENABLE) {
//            xIN1_PWM = 0x0000;           /* Meaning constant 0 */
//            xIN2_PWM = (uint16_t) -speed;
//        } else {
            xIN1_PWM = (uint16_t) -speed;
 800a8a2:	88bb      	ldrh	r3, [r7, #4]
 800a8a4:	425b      	negs	r3, r3
 800a8a6:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = MOT_TIMER_PERIOD; /* Meaning constant 1 */
 800a8a8:	f640 739f 	movw	r3, #3999	; 0xf9f
 800a8ac:	81bb      	strh	r3, [r7, #12]
//        }

    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <HW_MOT_SetMotorSpeed+0x5e>
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d00e      	beq.n	800a8d6 <HW_MOT_SetMotorSpeed+0x7a>
            GPIO_WriteBit(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN, xIN2_PWM);
            break;

        default:
            /* Incorrect channel: do noting */
            break;
 800a8b8:	e01b      	b.n	800a8f2 <HW_MOT_SetMotorSpeed+0x96>
    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
        case HW_MOT_CHANNEL1:
            MOT1_IN1_SET_PULSE(xIN1_PWM);
 800a8ba:	89fb      	ldrh	r3, [r7, #14]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	480f      	ldr	r0, [pc, #60]	; (800a8fc <HW_MOT_SetMotorSpeed+0xa0>)
 800a8c0:	f7fb f908 	bl	8005ad4 <TIM_SetCompare3>
            //MOT1_IN2_SET_PULSE(xIN2_PWM);
            GPIO_WriteBit(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN, xIN2_PWM);
 800a8c4:	89bb      	ldrh	r3, [r7, #12]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a8ce:	480c      	ldr	r0, [pc, #48]	; (800a900 <HW_MOT_SetMotorSpeed+0xa4>)
 800a8d0:	f7fa fa64 	bl	8004d9c <GPIO_WriteBit>
            break;
 800a8d4:	e00d      	b.n	800a8f2 <HW_MOT_SetMotorSpeed+0x96>

        case HW_MOT_CHANNEL2:
            MOT2_IN1_SET_PULSE(xIN1_PWM);
 800a8d6:	89fb      	ldrh	r3, [r7, #14]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4808      	ldr	r0, [pc, #32]	; (800a8fc <HW_MOT_SetMotorSpeed+0xa0>)
 800a8dc:	f7fb f8ec 	bl	8005ab8 <TIM_SetCompare2>
            //MOT2_IN2_SET_PULSE(xIN2_PWM);
            GPIO_WriteBit(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN, xIN2_PWM);
 800a8e0:	89bb      	ldrh	r3, [r7, #12]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8ea:	4805      	ldr	r0, [pc, #20]	; (800a900 <HW_MOT_SetMotorSpeed+0xa4>)
 800a8ec:	f7fa fa56 	bl	8004d9c <GPIO_WriteBit>
            break;
 800a8f0:	bf00      	nop
        default:
            /* Incorrect channel: do noting */
            break;
    }

}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	40010000 	.word	0x40010000
 800a900:	40021000 	.word	0x40021000

0800a904 <HW_MOT_SetMotorSpeedFastDecay>:

/* Shorthand for fast-decay PWM */
void HW_MOT_SetMotorSpeedFastDecay(HW_MOT_ChannelTypeDef channel, int32_t speed)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
    HW_MOT_SetMotorSpeed(channel, (int16_t) speed, ENABLE);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	b219      	sxth	r1, r3
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2201      	movs	r2, #1
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff ff9f 	bl	800a85c <HW_MOT_SetMotorSpeed>
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop

0800a928 <HW_PWR_Init>:
  * @brief  Configure all VPn power GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_PWR_Init(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    VP1_EN_GPIO_CLK_ENABLE();
 800a92e:	2101      	movs	r1, #1
 800a930:	2002      	movs	r0, #2
 800a932:	f7fa fcb7 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    VP2_EN_GPIO_CLK_ENABLE();
 800a936:	2101      	movs	r1, #1
 800a938:	2002      	movs	r0, #2
 800a93a:	f7fa fcb3 	bl	80052a4 <RCC_AHB1PeriphClockCmd>
    VP3_EN_GPIO_CLK_ENABLE();
 800a93e:	2101      	movs	r1, #1
 800a940:	2010      	movs	r0, #16
 800a942:	f7fa fcaf 	bl	80052a4 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all VPn */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800a946:	2301      	movs	r3, #1
 800a948:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a94a:	2300      	movs	r3, #0
 800a94c:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 800a952:	2300      	movs	r3, #0
 800a954:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = VP1_EN_PIN;
 800a956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a95a:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP1_EN_GPIO_PORT, &GPIO_InitStructure);
 800a95c:	463b      	mov	r3, r7
 800a95e:	4619      	mov	r1, r3
 800a960:	480f      	ldr	r0, [pc, #60]	; (800a9a0 <HW_PWR_Init+0x78>)
 800a962:	f7fa f973 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP2_EN_PIN;
 800a966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a96a:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP2_EN_GPIO_PORT, &GPIO_InitStructure);
 800a96c:	463b      	mov	r3, r7
 800a96e:	4619      	mov	r1, r3
 800a970:	480b      	ldr	r0, [pc, #44]	; (800a9a0 <HW_PWR_Init+0x78>)
 800a972:	f7fa f96b 	bl	8004c4c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP3_EN_PIN;
 800a976:	2301      	movs	r3, #1
 800a978:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP3_EN_GPIO_PORT, &GPIO_InitStructure);
 800a97a:	463b      	mov	r3, r7
 800a97c:	4619      	mov	r1, r3
 800a97e:	4809      	ldr	r0, [pc, #36]	; (800a9a4 <HW_PWR_Init+0x7c>)
 800a980:	f7fa f964 	bl	8004c4c <GPIO_Init>

    /* Default state: Modules OFF */
    HW_PWR_Disable(HW_PWR_VP1);
 800a984:	2000      	movs	r0, #0
 800a986:	f000 f829 	bl	800a9dc <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP2);
 800a98a:	2001      	movs	r0, #1
 800a98c:	f000 f826 	bl	800a9dc <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP3);
 800a990:	2002      	movs	r0, #2
 800a992:	f000 f823 	bl	800a9dc <HW_PWR_Disable>

}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	40020400 	.word	0x40020400
 800a9a4:	40021000 	.word	0x40021000

0800a9a8 <HW_PWR_Enable>:
  * @brief  Enable a VPx power-supply
  * @param  power VPx channel to enable
  * @retval None
  */
void HW_PWR_Enable(HW_PWR_TypeDef power)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_ON);
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	4a07      	ldr	r2, [pc, #28]	; (800a9d4 <HW_PWR_Enable+0x2c>)
 800a9b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	4a06      	ldr	r2, [pc, #24]	; (800a9d8 <HW_PWR_Enable+0x30>)
 800a9be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	f7fa f9e9 	bl	8004d9c <GPIO_WriteBit>
}
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20010020 	.word	0x20010020
 800a9d8:	080119c8 	.word	0x080119c8

0800a9dc <HW_PWR_Disable>:
  * @brief  Disable a VPx power-supply
  * @param  power VPx channel to disable
  * @retval None
  */
void HW_PWR_Disable(HW_PWR_TypeDef power)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_OFF);
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	4a07      	ldr	r2, [pc, #28]	; (800aa08 <HW_PWR_Disable+0x2c>)
 800a9ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	4a06      	ldr	r2, [pc, #24]	; (800aa0c <HW_PWR_Disable+0x30>)
 800a9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f7fa f9cf 	bl	8004d9c <GPIO_WriteBit>
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20010020 	.word	0x20010020
 800aa0c:	080119c8 	.word	0x080119c8

0800aa10 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800aa1a:	4909      	ldr	r1, [pc, #36]	; (800aa40 <NVIC_EnableIRQ+0x30>)
 800aa1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa20:	095b      	lsrs	r3, r3, #5
 800aa22:	79fa      	ldrb	r2, [r7, #7]
 800aa24:	f002 021f 	and.w	r2, r2, #31
 800aa28:	2001      	movs	r0, #1
 800aa2a:	fa00 f202 	lsl.w	r2, r0, r2
 800aa2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	e000e100 	.word	0xe000e100

0800aa44 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800aa4e:	4909      	ldr	r1, [pc, #36]	; (800aa74 <NVIC_ClearPendingIRQ+0x30>)
 800aa50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa54:	095b      	lsrs	r3, r3, #5
 800aa56:	79fa      	ldrb	r2, [r7, #7]
 800aa58:	f002 021f 	and.w	r2, r2, #31
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	fa00 f202 	lsl.w	r2, r0, r2
 800aa62:	3360      	adds	r3, #96	; 0x60
 800aa64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	e000e100 	.word	0xe000e100

0800aa78 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800aa84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da0b      	bge.n	800aaa4 <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa8c:	490d      	ldr	r1, [pc, #52]	; (800aac4 <NVIC_SetPriority+0x4c>)
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	3b04      	subs	r3, #4
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	0112      	lsls	r2, r2, #4
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	440b      	add	r3, r1
 800aaa0:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aaa2:	e009      	b.n	800aab8 <NVIC_SetPriority+0x40>
{
  if((int32_t)IRQn < 0) {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aaa4:	4908      	ldr	r1, [pc, #32]	; (800aac8 <NVIC_SetPriority+0x50>)
 800aaa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	0112      	lsls	r2, r2, #4
 800aab0:	b2d2      	uxtb	r2, r2
 800aab2:	440b      	add	r3, r1
 800aab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	e000ed00 	.word	0xe000ed00
 800aac8:	e000e100 	.word	0xe000e100

0800aacc <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800aacc:	b480      	push	{r7}
 800aace:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800aad0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800aad4:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     // invalidate I-Cache
 800aad8:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <SCB_EnableICache+0x34>)
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  // enable I-Cache
 800aae0:	4a07      	ldr	r2, [pc, #28]	; (800ab00 <SCB_EnableICache+0x34>)
 800aae2:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <SCB_EnableICache+0x34>)
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaea:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800aaec:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800aaf0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800aaf4:	bf00      	nop
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	e000ed00 	.word	0xe000ed00

0800ab04 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b089      	sub	sp, #36	; 0x24
 800ab08:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    SCB->CSSELR = (0UL << 1) | 0UL;         // Level 1 data cache
 800ab0a:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <SCB_EnableDCache+0x9c>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ccsidr  = SCB->CCSIDR;
 800ab12:	4b23      	ldr	r3, [pc, #140]	; (800aba0 <SCB_EnableDCache+0x9c>)
 800ab14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab18:	617b      	str	r3, [r7, #20]
    sets    = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	0b5b      	lsrs	r3, r3, #13
 800ab1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ab22:	61fb      	str	r3, [r7, #28]
    sshift  = (uint32_t)(CCSIDR_LSSHIFT(ccsidr) + 4UL);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	613b      	str	r3, [r7, #16]
    ways    = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	08db      	lsrs	r3, r3, #3
 800ab32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab36:	60fb      	str	r3, [r7, #12]
    wshift  = (uint32_t)((uint32_t)__CLZ(ways) & 0x1FUL);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	fab3 f383 	clz	r3, r3
 800ab3e:	f003 031f 	and.w	r3, r3, #31
 800ab42:	60bb      	str	r3, [r7, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ab44:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                   // invalidate D-Cache
         uint32_t tmpways = ways;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	61bb      	str	r3, [r7, #24]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	409a      	lsls	r2, r3
 800ab52:	69f9      	ldr	r1, [r7, #28]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	fa01 f303 	lsl.w	r3, r1, r3
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	607b      	str	r3, [r7, #4]
              SCB->DCISW = sw;
 800ab5e:	4a10      	ldr	r2, [pc, #64]	; (800aba0 <SCB_EnableDCache+0x9c>)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	1e5a      	subs	r2, r3, #1
 800ab6a:	61ba      	str	r2, [r7, #24]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1ed      	bne.n	800ab4c <SCB_EnableDCache+0x48>
        } while(sets--);
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	1e5a      	subs	r2, r3, #1
 800ab74:	61fa      	str	r2, [r7, #28]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e6      	bne.n	800ab48 <SCB_EnableDCache+0x44>
 800ab7a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;   // enable D-Cache
 800ab7e:	4a08      	ldr	r2, [pc, #32]	; (800aba0 <SCB_EnableDCache+0x9c>)
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <SCB_EnableDCache+0x9c>)
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab88:	6153      	str	r3, [r2, #20]
 800ab8a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ab8e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800ab92:	bf00      	nop
 800ab94:	3724      	adds	r7, #36	; 0x24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	e000ed00 	.word	0xe000ed00

0800aba4 <HW_SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void HW_SystemClock_Config(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af02      	add	r7, sp, #8
  RCC_HSEConfig(RCC_HSE_ON);
 800abaa:	2001      	movs	r0, #1
 800abac:	f7fa f9c4 	bl	8004f38 <RCC_HSEConfig>

  if ( RCC_WaitForHSEStartUp() != SUCCESS )
 800abb0:	f7fa f9d6 	bl	8004f60 <RCC_WaitForHSEStartUp>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d000      	beq.n	800abbc <HW_SystemClock_Config+0x18>
  {
    while(1);
 800abba:	e7fe      	b.n	800abba <HW_SystemClock_Config+0x16>
  }

  RCC_PLLConfig(RCC_PLLSource_HSE, 8, 384, 2, 8);
 800abbc:	2308      	movs	r3, #8
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	2302      	movs	r3, #2
 800abc2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800abc6:	2108      	movs	r1, #8
 800abc8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800abcc:	f7fa f9f0 	bl	8004fb0 <RCC_PLLConfig>
  RCC_PLLCmd(ENABLE);
 800abd0:	2001      	movs	r0, #1
 800abd2:	f7fa fa2f 	bl	8005034 <RCC_PLLCmd>

  while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 800abd6:	bf00      	nop
 800abd8:	2039      	movs	r0, #57	; 0x39
 800abda:	f7fa fbc3 	bl	8005364 <RCC_GetFlagStatus>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0f9      	beq.n	800abd8 <HW_SystemClock_Config+0x34>

  /* Activate the OverDrive to reach the 196 MHz Frequency */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 800abe4:	2101      	movs	r1, #1
 800abe6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800abea:	f7fa fb7b 	bl	80052e4 <RCC_APB1PeriphClockCmd>

  PWR_OverDriveCmd( ENABLE );
 800abee:	2001      	movs	r0, #1
 800abf0:	f7fa f938 	bl	8004e64 <PWR_OverDriveCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODRDY ) == RESET );
 800abf4:	bf00      	nop
 800abf6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800abfa:	f7fa f96f 	bl	8004edc <PWR_GetFlagStatus>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0f8      	beq.n	800abf6 <HW_SystemClock_Config+0x52>

  while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 800ac04:	bf00      	nop
 800ac06:	2031      	movs	r0, #49	; 0x31
 800ac08:	f7fa fbac 	bl	8005364 <RCC_GetFlagStatus>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0f9      	beq.n	800ac06 <HW_SystemClock_Config+0x62>

  PWR_OverDriveSWCmd(ENABLE);
 800ac12:	2001      	movs	r0, #1
 800ac14:	f7fa f944 	bl	8004ea0 <PWR_OverDriveSWCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODSWRDY ) == RESET );
 800ac18:	bf00      	nop
 800ac1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ac1e:	f7fa f95d 	bl	8004edc <PWR_GetFlagStatus>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0f8      	beq.n	800ac1a <HW_SystemClock_Config+0x76>

  FLASH_SetLatency(FLASH_Latency_7);
 800ac28:	2007      	movs	r0, #7
 800ac2a:	f7f9 fffb 	bl	8004c24 <FLASH_SetLatency>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800ac2e:	2002      	movs	r0, #2
 800ac30:	f7fa fa1e 	bl	8005070 <RCC_SYSCLKConfig>

  RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800ac34:	2000      	movs	r0, #0
 800ac36:	f7fa fa37 	bl	80050a8 <RCC_HCLKConfig>
  RCC_PCLK1Config(RCC_HCLK_Div4);
 800ac3a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800ac3e:	f7fa fa4f 	bl	80050e0 <RCC_PCLK1Config>
  RCC_PCLK2Config(RCC_HCLK_Div4);
 800ac42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800ac46:	f7fa fa67 	bl	8005118 <RCC_PCLK2Config>

  SystemCoreClockUpdate();
 800ac4a:	f000 f9a1 	bl	800af90 <SystemCoreClockUpdate>
}
 800ac4e:	bf00      	nop
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <HW_CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
void HW_CPU_CACHE_Enable(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
  /* Enable branch prediction */
  SCB->CCR |= (1 <<18);
 800ac58:	4a06      	ldr	r2, [pc, #24]	; (800ac74 <HW_CPU_CACHE_Enable+0x20>)
 800ac5a:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <HW_CPU_CACHE_Enable+0x20>)
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac62:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ac64:	f3bf 8f4f 	dsb	sy
  __DSB();

  /* Enable I-Cache */
  SCB_EnableICache();
 800ac68:	f7ff ff30 	bl	800aacc <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 800ac6c:	f7ff ff4a 	bl	800ab04 <SCB_EnableDCache>
}
 800ac70:	bf00      	nop
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	e000ed00 	.word	0xe000ed00

0800ac78 <HW_SYS_TimerRunTime_Config>:

void HW_SYS_TimerRunTime_Config(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;

    /* Enable timer clock */
    SYS_RUNSTATS_TIM_CLK_ENABLE();
 800ac7e:	2101      	movs	r1, #1
 800ac80:	2010      	movs	r0, #16
 800ac82:	f7fa fb2f 	bl	80052e4 <RCC_APB1PeriphClockCmd>

    /* Setup timer */
    TIM_BaseStruct.TIM_ClockDivision        = SYS_RUNSTATS_CKDIV;
 800ac86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac8a:	613b      	str	r3, [r7, #16]
    TIM_BaseStruct.TIM_Prescaler            = SYS_RUNSTATS_PRESCALER;
 800ac8c:	f240 43af 	movw	r3, #1199	; 0x4af
 800ac90:	607b      	str	r3, [r7, #4]
    TIM_BaseStruct.TIM_Period               = 0xFFFF;
 800ac92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac96:	60fb      	str	r3, [r7, #12]
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
    TIM_TimeBaseInit(SYS_RUNSTATS_TIM, &TIM_BaseStruct);
 800ac9c:	1d3b      	adds	r3, r7, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	480e      	ldr	r0, [pc, #56]	; (800acdc <HW_SYS_TimerRunTime_Config+0x64>)
 800aca2:	f7fa fc4b 	bl	800553c <TIM_TimeBaseInit>

    /* Configure interrupt */
    TIM_ITConfig(SYS_RUNSTATS_TIM, TIM_IT_Update, ENABLE);
 800aca6:	2201      	movs	r2, #1
 800aca8:	2101      	movs	r1, #1
 800acaa:	480c      	ldr	r0, [pc, #48]	; (800acdc <HW_SYS_TimerRunTime_Config+0x64>)
 800acac:	f7fa ffba 	bl	8005c24 <TIM_ITConfig>
    NVIC_SetPriority(SYS_RUNSTATS_IRQn, OS_ISR_PRIORITY_SYS_RUNSTATS);
 800acb0:	210f      	movs	r1, #15
 800acb2:	2036      	movs	r0, #54	; 0x36
 800acb4:	f7ff fee0 	bl	800aa78 <NVIC_SetPriority>
    NVIC_EnableIRQ(SYS_RUNSTATS_IRQn);
 800acb8:	2036      	movs	r0, #54	; 0x36
 800acba:	f7ff fea9 	bl	800aa10 <NVIC_EnableIRQ>

    /* Clear and start timer */
    sysTimerCnt = 0;
 800acbe:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <HW_SYS_TimerRunTime_Config+0x68>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	801a      	strh	r2, [r3, #0]
    TIM_SetCounter(SYS_RUNSTATS_TIM, 0);
 800acc4:	2100      	movs	r1, #0
 800acc6:	4805      	ldr	r0, [pc, #20]	; (800acdc <HW_SYS_TimerRunTime_Config+0x64>)
 800acc8:	f7fa fca2 	bl	8005610 <TIM_SetCounter>
    TIM_Cmd(SYS_RUNSTATS_TIM, ENABLE);
 800accc:	2101      	movs	r1, #1
 800acce:	4803      	ldr	r0, [pc, #12]	; (800acdc <HW_SYS_TimerRunTime_Config+0x64>)
 800acd0:	f7fa fcc6 	bl	8005660 <TIM_Cmd>

}
 800acd4:	bf00      	nop
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	40001000 	.word	0x40001000
 800ace0:	200146a4 	.word	0x200146a4

0800ace4 <HW_SYS_GetRunTimeTicks>:

uint32_t HW_SYS_GetRunTimeTicks(void)
{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
    uint32_t ret;
    ret = (((uint32_t) sysTimerCnt) << 16UL) + TIM_GetCounter(SYS_RUNSTATS_TIM);
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <HW_SYS_GetRunTimeTicks+0x24>)
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	041c      	lsls	r4, r3, #16
 800acf0:	4806      	ldr	r0, [pc, #24]	; (800ad0c <HW_SYS_GetRunTimeTicks+0x28>)
 800acf2:	f7fa fca9 	bl	8005648 <TIM_GetCounter>
 800acf6:	4603      	mov	r3, r0
 800acf8:	4423      	add	r3, r4
 800acfa:	607b      	str	r3, [r7, #4]
    return ret;
 800acfc:	687b      	ldr	r3, [r7, #4]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd90      	pop	{r4, r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200146a4 	.word	0x200146a4
 800ad0c:	40001000 	.word	0x40001000

0800ad10 <TIM6_DAC_IRQHandler>:
 * Run-Time Timer Interrupt Sub-routine
 * Required to implement a 32bits timer.
 * sysTimerCnt is used as the 16 MSB of the timer.
 */
void SYS_RUNSTATS_ISR (void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
    NVIC_ClearPendingIRQ(SYS_RUNSTATS_IRQn);
 800ad14:	2036      	movs	r0, #54	; 0x36
 800ad16:	f7ff fe95 	bl	800aa44 <NVIC_ClearPendingIRQ>
    TIM_ClearITPendingBit(SYS_RUNSTATS_TIM, TIM_IT_Update);
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	4805      	ldr	r0, [pc, #20]	; (800ad34 <TIM6_DAC_IRQHandler+0x24>)
 800ad1e:	f7fa ff9f 	bl	8005c60 <TIM_ClearITPendingBit>
    sysTimerCnt++;
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <TIM6_DAC_IRQHandler+0x28>)
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	3301      	adds	r3, #1
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	4b03      	ldr	r3, [pc, #12]	; (800ad38 <TIM6_DAC_IRQHandler+0x28>)
 800ad2c:	801a      	strh	r2, [r3, #0]
}
 800ad2e:	bf00      	nop
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	40001000 	.word	0x40001000
 800ad38:	200146a4 	.word	0x200146a4

0800ad3c <HW_SYS_GetRunTimeStats>:
/* This example demonstrates how a human readable table of run time stats
information is generated from raw data provided by uxTaskGetSystemState().
The human readable table is written to pcWriteBuffer.  (see the vTaskList()
API function which actually does just this). */
void HW_SYS_GetRunTimeStats(char *pcWriteBuffer)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08c      	sub	sp, #48	; 0x30
 800ad40:	af02      	add	r7, sp, #8
 800ad42:	6078      	str	r0, [r7, #4]
    const char * const pcHeader =
 800ad44:	4b5c      	ldr	r3, [pc, #368]	; (800aeb8 <HW_SYS_GetRunTimeStats+0x17c>)
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
                "Task                  Abs. Time    % Time"SHELL_EOL;
    const char * const pcLineSeparator =
 800ad48:	4b5c      	ldr	r3, [pc, #368]	; (800aebc <HW_SYS_GetRunTimeStats+0x180>)
 800ad4a:	623b      	str	r3, [r7, #32]
    volatile UBaseType_t uxArraySize, x;
    uint32_t ulTotalRunTime;
    uint32_t ulStatsAsPercentage;

   /* Make sure the write buffer does not contain a string. */
   *pcWriteBuffer = 0x00;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	701a      	strb	r2, [r3, #0]

   /* Take a snapshot of the number of tasks in case it changes while this
   function is executing. */
   uxArraySize = uxTaskGetNumberOfTasks();
 800ad52:	f7fd fa3f 	bl	80081d4 <uxTaskGetNumberOfTasks>
 800ad56:	4603      	mov	r3, r0
 800ad58:	617b      	str	r3, [r7, #20]

   /* Allocate a TaskStatus_t structure for each task.  An array could be
   allocated statically at compile time. */
   pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4413      	add	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fb fed3 	bl	8006b10 <pvPortMalloc>
 800ad6a:	61f8      	str	r0, [r7, #28]

   if( pxTaskStatusArray != NULL )
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 809d 	beq.w	800aeae <HW_SYS_GetRunTimeStats+0x172>
   {
      /* Generate raw status information about each task. */
      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray,
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f107 020c 	add.w	r2, r7, #12
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	69f8      	ldr	r0, [r7, #28]
 800ad7e:	f7fd fa35 	bl	80081ec <uxTaskGetSystemState>
 800ad82:	4603      	mov	r3, r0
 800ad84:	617b      	str	r3, [r7, #20]
                                 uxArraySize,
                                 &ulTotalRunTime );

      /* For percentage calculations. */
      ulTotalRunTime /= 100UL;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4a4d      	ldr	r2, [pc, #308]	; (800aec0 <HW_SYS_GetRunTimeStats+0x184>)
 800ad8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8e:	095b      	lsrs	r3, r3, #5
 800ad90:	60fb      	str	r3, [r7, #12]

      /* Avoid divide by zero errors. */
      if( ulTotalRunTime > 0 )
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 8087 	beq.w	800aea8 <HW_SYS_GetRunTimeStats+0x16c>
      {
          /* Header */
          sprintf( pcWriteBuffer, pcHeader );
 800ad9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fc75 	bl	800b68c <sprintf>
          pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7f5 fa34 	bl	8000210 <strlen>
 800ada8:	4602      	mov	r2, r0
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	607b      	str	r3, [r7, #4]
          sprintf( pcWriteBuffer, pcLineSeparator );
 800adb0:	6a39      	ldr	r1, [r7, #32]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fc6a 	bl	800b68c <sprintf>
          pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7f5 fa29 	bl	8000210 <strlen>
 800adbe:	4602      	mov	r2, r0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4413      	add	r3, r2
 800adc4:	607b      	str	r3, [r7, #4]

          /* For each populated position in the pxTaskStatusArray array,
          format the raw data as human readable ASCII data. */
         for( x = 0; x < uxArraySize; x++ )
 800adc6:	2300      	movs	r3, #0
 800adc8:	613b      	str	r3, [r7, #16]
 800adca:	e04b      	b.n	800ae64 <HW_SYS_GetRunTimeStats+0x128>
         {
            /* What percentage of the total run time has the task used?
            This will always be rounded down to the nearest integer.
            ulTotalRunTimeDiv100 has already been divided by 100. */
            ulStatsAsPercentage =
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4613      	mov	r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	461a      	mov	r2, r3
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	68fb      	ldr	r3, [r7, #12]
         for( x = 0; x < uxArraySize; x++ )
         {
            /* What percentage of the total run time has the task used?
            This will always be rounded down to the nearest integer.
            ulTotalRunTimeDiv100 has already been divided by 100. */
            ulStatsAsPercentage =
 800ade0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade4:	61bb      	str	r3, [r7, #24]
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

            if( ulStatsAsPercentage > 0UL )
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d01a      	beq.n	800ae22 <HW_SYS_GetRunTimeStats+0xe6>
            {
               sprintf( pcWriteBuffer, "%-20s %10lu   %3lu%%"SHELL_EOL,
                                 pxTaskStatusArray[ x ].pcTaskName,
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4613      	mov	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	461a      	mov	r2, r3
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4413      	add	r3, r2
            ulStatsAsPercentage =
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

            if( ulStatsAsPercentage > 0UL )
            {
               sprintf( pcWriteBuffer, "%-20s %10lu   %3lu%%"SHELL_EOL,
 800adfc:	6859      	ldr	r1, [r3, #4]
                                 pxTaskStatusArray[ x ].pcTaskName,
                                 pxTaskStatusArray[ x ].ulRunTimeCounter,
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4613      	mov	r3, r2
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	461a      	mov	r2, r3
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	4413      	add	r3, r2
            ulStatsAsPercentage =
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

            if( ulStatsAsPercentage > 0UL )
            {
               sprintf( pcWriteBuffer, "%-20s %10lu   %3lu%%"SHELL_EOL,
 800ae0e:	699a      	ldr	r2, [r3, #24]
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	4613      	mov	r3, r2
 800ae16:	460a      	mov	r2, r1
 800ae18:	492a      	ldr	r1, [pc, #168]	; (800aec4 <HW_SYS_GetRunTimeStats+0x188>)
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fc36 	bl	800b68c <sprintf>
 800ae20:	e016      	b.n	800ae50 <HW_SYS_GetRunTimeStats+0x114>
            else
            {
               /* If the percentage is zero here then the task has
               consumed less than 1% of the total run time. */
               sprintf( pcWriteBuffer, "%-20s %10lu    <1%%"SHELL_EOL,
                                 pxTaskStatusArray[ x ].pcTaskName,
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4613      	mov	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	4413      	add	r3, r2
            }
            else
            {
               /* If the percentage is zero here then the task has
               consumed less than 1% of the total run time. */
               sprintf( pcWriteBuffer, "%-20s %10lu    <1%%"SHELL_EOL,
 800ae32:	6859      	ldr	r1, [r3, #4]
                                 pxTaskStatusArray[ x ].pcTaskName,
                                 pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	4613      	mov	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	4413      	add	r3, r2
            }
            else
            {
               /* If the percentage is zero here then the task has
               consumed less than 1% of the total run time. */
               sprintf( pcWriteBuffer, "%-20s %10lu    <1%%"SHELL_EOL,
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	460a      	mov	r2, r1
 800ae48:	491f      	ldr	r1, [pc, #124]	; (800aec8 <HW_SYS_GetRunTimeStats+0x18c>)
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fc1e 	bl	800b68c <sprintf>
                                 pxTaskStatusArray[ x ].pcTaskName,
                                 pxTaskStatusArray[ x ].ulRunTimeCounter );
            }

            pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7f5 f9dd 	bl	8000210 <strlen>
 800ae56:	4602      	mov	r2, r0
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	607b      	str	r3, [r7, #4]
          sprintf( pcWriteBuffer, pcLineSeparator );
          pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );

          /* For each populated position in the pxTaskStatusArray array,
          format the raw data as human readable ASCII data. */
         for( x = 0; x < uxArraySize; x++ )
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d3af      	bcc.n	800adcc <HW_SYS_GetRunTimeStats+0x90>

            pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
         }

         /* Footer */
         sprintf( pcWriteBuffer, pcLineSeparator );
 800ae6c:	6a39      	ldr	r1, [r7, #32]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fc0c 	bl	800b68c <sprintf>
         pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7f5 f9cb 	bl	8000210 <strlen>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4413      	add	r3, r2
 800ae80:	607b      	str	r3, [r7, #4]
         sprintf( pcWriteBuffer,"%-20s %10lu   %3lu%%"SHELL_EOL, "TOTAL", 100*ulTotalRunTime, 100UL);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2264      	movs	r2, #100	; 0x64
 800ae86:	fb02 f203 	mul.w	r2, r2, r3
 800ae8a:	2364      	movs	r3, #100	; 0x64
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	4a0e      	ldr	r2, [pc, #56]	; (800aecc <HW_SYS_GetRunTimeStats+0x190>)
 800ae92:	490c      	ldr	r1, [pc, #48]	; (800aec4 <HW_SYS_GetRunTimeStats+0x188>)
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fbf9 	bl	800b68c <sprintf>
         pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f7f5 f9b8 	bl	8000210 <strlen>
 800aea0:	4602      	mov	r2, r0
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4413      	add	r3, r2
 800aea6:	607b      	str	r3, [r7, #4]
      }

      /* The array is no longer needed, free the memory it consumes. */
      vPortFree( pxTaskStatusArray );
 800aea8:	69f8      	ldr	r0, [r7, #28]
 800aeaa:	f7fb fee7 	bl	8006c7c <vPortFree>
   }
}
 800aeae:	bf00      	nop
 800aeb0:	3728      	adds	r7, #40	; 0x28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	08011628 	.word	0x08011628
 800aebc:	08011654 	.word	0x08011654
 800aec0:	51eb851f 	.word	0x51eb851f
 800aec4:	08011680 	.word	0x08011680
 800aec8:	08011698 	.word	0x08011698
 800aecc:	080116b0 	.word	0x080116b0

0800aed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800aed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800aed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800aed6:	e003      	b.n	800aee0 <LoopCopyDataInit>

0800aed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800aeda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800aedc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800aede:	3104      	adds	r1, #4

0800aee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800aee0:	480b      	ldr	r0, [pc, #44]	; (800af10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800aee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800aee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800aee8:	d3f6      	bcc.n	800aed8 <CopyDataInit>
  ldr  r2, =_sbss
 800aeea:	4a0b      	ldr	r2, [pc, #44]	; (800af18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800aeec:	e002      	b.n	800aef4 <LoopFillZerobss>

0800aeee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800aeee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800aef0:	f842 3b04 	str.w	r3, [r2], #4

0800aef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800aef4:	4b09      	ldr	r3, [pc, #36]	; (800af1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800aef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800aef8:	d3f9      	bcc.n	800aeee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800aefa:	f000 f813 	bl	800af24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aefe:	f000 fb05 	bl	800b50c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af02:	f000 f8c1 	bl	800b088 <main>
  bx  lr    
 800af06:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800af08:	2004ff00 	.word	0x2004ff00
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800af0c:	08011ee8 	.word	0x08011ee8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800af10:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 800af14:	20010574 	.word	0x20010574
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800af18:	20010578 	.word	0x20010578
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800af1c:	200149ac 	.word	0x200149ac

0800af20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af20:	e7fe      	b.n	800af20 <ADC_IRQHandler>
	...

0800af24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af28:	4a15      	ldr	r2, [pc, #84]	; (800af80 <SystemInit+0x5c>)
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <SystemInit+0x5c>)
 800af2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800af38:	4a12      	ldr	r2, [pc, #72]	; (800af84 <SystemInit+0x60>)
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <SystemInit+0x60>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <SystemInit+0x60>)
 800af46:	2200      	movs	r2, #0
 800af48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800af4a:	490e      	ldr	r1, [pc, #56]	; (800af84 <SystemInit+0x60>)
 800af4c:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <SystemInit+0x60>)
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <SystemInit+0x64>)
 800af52:	4013      	ands	r3, r2
 800af54:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800af56:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <SystemInit+0x60>)
 800af58:	4a0c      	ldr	r2, [pc, #48]	; (800af8c <SystemInit+0x68>)
 800af5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800af5c:	4a09      	ldr	r2, [pc, #36]	; (800af84 <SystemInit+0x60>)
 800af5e:	4b09      	ldr	r3, [pc, #36]	; (800af84 <SystemInit+0x60>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800af68:	4b06      	ldr	r3, [pc, #24]	; (800af84 <SystemInit+0x60>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800af6e:	4b04      	ldr	r3, [pc, #16]	; (800af80 <SystemInit+0x5c>)
 800af70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af74:	609a      	str	r2, [r3, #8]
#endif
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	e000ed00 	.word	0xe000ed00
 800af84:	40023800 	.word	0x40023800
 800af88:	fef6ffff 	.word	0xfef6ffff
 800af8c:	24003010 	.word	0x24003010

0800af90 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800af96:	2300      	movs	r3, #0
 800af98:	613b      	str	r3, [r7, #16]
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
 800af9e:	2302      	movs	r3, #2
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	2300      	movs	r3, #0
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	2302      	movs	r3, #2
 800afa8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800afaa:	4b32      	ldr	r3, [pc, #200]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 030c 	and.w	r3, r3, #12
 800afb2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d007      	beq.n	800afca <SystemCoreClockUpdate+0x3a>
 800afba:	2b08      	cmp	r3, #8
 800afbc:	d009      	beq.n	800afd2 <SystemCoreClockUpdate+0x42>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d13f      	bne.n	800b042 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800afc2:	4b2d      	ldr	r3, [pc, #180]	; (800b078 <SystemCoreClockUpdate+0xe8>)
 800afc4:	4a2d      	ldr	r2, [pc, #180]	; (800b07c <SystemCoreClockUpdate+0xec>)
 800afc6:	601a      	str	r2, [r3, #0]
      break;
 800afc8:	e03f      	b.n	800b04a <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800afca:	4b2b      	ldr	r3, [pc, #172]	; (800b078 <SystemCoreClockUpdate+0xe8>)
 800afcc:	4a2c      	ldr	r2, [pc, #176]	; (800b080 <SystemCoreClockUpdate+0xf0>)
 800afce:	601a      	str	r2, [r3, #0]
      break;
 800afd0:	e03b      	b.n	800b04a <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800afd2:	4b28      	ldr	r3, [pc, #160]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afda:	0d9b      	lsrs	r3, r3, #22
 800afdc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800afde:	4b25      	ldr	r3, [pc, #148]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afe6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00d      	beq.n	800b00a <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800afee:	4a24      	ldr	r2, [pc, #144]	; (800b080 <SystemCoreClockUpdate+0xf0>)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	fbb2 f2f3 	udiv	r2, r2, r3
 800aff6:	4b1f      	ldr	r3, [pc, #124]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800aff8:	6859      	ldr	r1, [r3, #4]
 800affa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800affe:	400b      	ands	r3, r1
 800b000:	099b      	lsrs	r3, r3, #6
 800b002:	fb03 f302 	mul.w	r3, r3, r2
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	e00c      	b.n	800b024 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800b00a:	4a1c      	ldr	r2, [pc, #112]	; (800b07c <SystemCoreClockUpdate+0xec>)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b012:	4b18      	ldr	r3, [pc, #96]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800b014:	6859      	ldr	r1, [r3, #4]
 800b016:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b01a:	400b      	ands	r3, r1
 800b01c:	099b      	lsrs	r3, r3, #6
 800b01e:	fb03 f302 	mul.w	r3, r3, r2
 800b022:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800b024:	4b13      	ldr	r3, [pc, #76]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b02c:	0c1b      	lsrs	r3, r3, #16
 800b02e:	3301      	adds	r3, #1
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03c:	4a0e      	ldr	r2, [pc, #56]	; (800b078 <SystemCoreClockUpdate+0xe8>)
 800b03e:	6013      	str	r3, [r2, #0]
      break;
 800b040:	e003      	b.n	800b04a <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800b042:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <SystemCoreClockUpdate+0xe8>)
 800b044:	4a0d      	ldr	r2, [pc, #52]	; (800b07c <SystemCoreClockUpdate+0xec>)
 800b046:	601a      	str	r2, [r3, #0]
      break;
 800b048:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b04a:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <SystemCoreClockUpdate+0xe4>)
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b052:	091b      	lsrs	r3, r3, #4
 800b054:	4a0b      	ldr	r2, [pc, #44]	; (800b084 <SystemCoreClockUpdate+0xf4>)
 800b056:	5cd3      	ldrb	r3, [r2, r3]
 800b058:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <SystemCoreClockUpdate+0xe8>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	fa22 f303 	lsr.w	r3, r2, r3
 800b064:	4a04      	ldr	r2, [pc, #16]	; (800b078 <SystemCoreClockUpdate+0xe8>)
 800b066:	6013      	str	r3, [r2, #0]
}
 800b068:	bf00      	nop
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	40023800 	.word	0x40023800
 800b078:	2001002c 	.word	0x2001002c
 800b07c:	00f42400 	.word	0x00f42400
 800b080:	007a1200 	.word	0x007a1200
 800b084:	080119d0 	.word	0x080119d0

0800b088 <main>:
**
********************************************************************************
*/

int main( void )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
    /* Configure the hardware */
    HW_InitAll();
 800b08c:	f7fe fc1a 	bl	80098c4 <HW_InitAll>

    /* Apply the Power-Up sequence*/
    HW_PowerUp();
 800b090:	f7fe fc40 	bl	8009914 <HW_PowerUp>

    /* Start software tasks */

    //OS_CreateDebugTask();
    OS_SHL_Start();
 800b094:	f7f7 fc24 	bl	80028e0 <OS_SHL_Start>
    //OS_CreateLedTask();
    OS_CreateMotionTask();
 800b098:	f7f6 ff52 	bl	8001f40 <OS_CreateMotionTask>
    OS_CreateAvoidanceTask();
 800b09c:	f7f6 fe74 	bl	8001d88 <OS_CreateAvoidanceTask>
    OS_CreateASVTask();
 800b0a0:	f7f6 fd5c 	bl	8001b5c <OS_CreateASVTask>
    OS_CreateDSVTask();
 800b0a4:	f7f6 fdea 	bl	8001c7c <OS_CreateDSVTask>
    */



    /* Start FreeRTOS Scheduler */
    vTaskStartScheduler();
 800b0a8:	f7fc ff92 	bl	8007fd0 <vTaskStartScheduler>


    /* Infinite loop */
    for( ;; );
 800b0ac:	e7fe      	b.n	800b0ac <main+0x24>
 800b0ae:	bf00      	nop

0800b0b0 <xl_320_init>:

// -----------------------------------------------------------------------------
// First layer: handles UART data
// -----------------------------------------------------------------------------

void xl_320_init(XL_320_Com_Mode mode){
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
	xl_320_cfg.mode = mode;
 800b0ba:	4a0b      	ldr	r2, [pc, #44]	; (800b0e8 <xl_320_init+0x38>)
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	7013      	strb	r3, [r2, #0]
	{
		case XL_320_TX_ONLY:
		case XL_320_TXRX_ONE_PIN:
		case XL_320_TXRX_TWO_PINS:
		default:
			xl_320_cfg.hw_send_byte = NULL;
 800b0c0:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <xl_320_init+0x38>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	609a      	str	r2, [r3, #8]
			xl_320_cfg.hw_receive_byte = NULL;
 800b0c6:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <xl_320_init+0x38>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	60da      	str	r2, [r3, #12]
			xl_320_cfg.hw_flush = NULL;
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <xl_320_init+0x38>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	611a      	str	r2, [r3, #16]
			xl_320_cfg.hw_switch = NULL;
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <xl_320_init+0x38>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	605a      	str	r2, [r3, #4]
		break;
 800b0d8:	bf00      	nop
	}
}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20014994 	.word	0x20014994

0800b0ec <xl_320_set_hw_send>:
void xl_320_set_hw_send(void (*hw_send)(uint8_t))
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
	xl_320_cfg.hw_send_byte = hw_send;
 800b0f4:	4a04      	ldr	r2, [pc, #16]	; (800b108 <xl_320_set_hw_send+0x1c>)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6093      	str	r3, [r2, #8]
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20014994 	.word	0x20014994

0800b10c <update_crc>:
{
	xl_320_cfg.hw_switch = hw_switch;
}

// Write instruction
unsigned short update_crc(unsigned short crc_accum, uint8_t *data_blk_ptr, unsigned short data_blk_size){
 800b10c:	b580      	push	{r7, lr}
 800b10e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800b112:	af00      	add	r7, sp, #0
 800b114:	463b      	mov	r3, r7
 800b116:	6019      	str	r1, [r3, #0]
 800b118:	4611      	mov	r1, r2
 800b11a:	1dbb      	adds	r3, r7, #6
 800b11c:	4602      	mov	r2, r0
 800b11e:	801a      	strh	r2, [r3, #0]
 800b120:	1d3b      	adds	r3, r7, #4
 800b122:	460a      	mov	r2, r1
 800b124:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 800b126:	f107 030c 	add.w	r3, r7, #12
 800b12a:	4a1e      	ldr	r2, [pc, #120]	; (800b1a4 <update_crc+0x98>)
 800b12c:	4618      	mov	r0, r3
 800b12e:	4611      	mov	r1, r2
 800b130:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b134:	461a      	mov	r2, r3
 800b136:	f000 fa0f 	bl	800b558 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 800b13a:	2300      	movs	r3, #0
 800b13c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800b140:	e023      	b.n	800b18a <update_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 800b142:	1dbb      	adds	r3, r7, #6
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	0a1b      	lsrs	r3, r3, #8
 800b148:	b29a      	uxth	r2, r3
 800b14a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800b14e:	4639      	mov	r1, r7
 800b150:	6809      	ldr	r1, [r1, #0]
 800b152:	440b      	add	r3, r1
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	b29b      	uxth	r3, r3
 800b158:	4053      	eors	r3, r2
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 800b162:	1dbb      	adds	r3, r7, #6
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	b21a      	sxth	r2, r3
 800b16a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800b16e:	f107 030c 	add.w	r3, r7, #12
 800b172:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b176:	b21b      	sxth	r3, r3
 800b178:	4053      	eors	r3, r2
 800b17a:	b21a      	sxth	r2, r3
 800b17c:	1dbb      	adds	r3, r7, #6
 800b17e:	801a      	strh	r2, [r3, #0]
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 800b180:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800b184:	3301      	adds	r3, #1
 800b186:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800b18a:	1d3b      	adds	r3, r7, #4
 800b18c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	429a      	cmp	r2, r3
 800b194:	d3d5      	bcc.n	800b142 <update_crc+0x36>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    }

    return crc_accum;
 800b196:	1dbb      	adds	r3, r7, #6
 800b198:	881b      	ldrh	r3, [r3, #0]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	080116b8 	.word	0x080116b8

0800b1a8 <xl_320_write>:

void xl_320_write(uint8_t id, uint8_t address, uint8_t* parameters, uint8_t nb_param, uint8_t instruction){
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08c      	sub	sp, #48	; 0x30
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	603a      	str	r2, [r7, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	71fb      	strb	r3, [r7, #7]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	71bb      	strb	r3, [r7, #6]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	717b      	strb	r3, [r7, #5]
    unsigned char idx_param;
    xl_320_packet_t write_packet;

    // Build the packet
    write_packet.id            = id;
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	723b      	strb	r3, [r7, #8]
    write_packet.instruction   = instruction;
 800b1c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b1c6:	72bb      	strb	r3, [r7, #10]
    write_packet.parameter_nb  = nb_param + 2;
 800b1c8:	797b      	ldrb	r3, [r7, #5]
 800b1ca:	3302      	adds	r3, #2
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    write_packet.packet_length = write_packet.parameter_nb + 3;
 800b1d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1d6:	3303      	adds	r3, #3
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	727b      	strb	r3, [r7, #9]
    write_packet.parameters[0] = (uint8_t)(address&0xFF); // LSW
 800b1dc:	79bb      	ldrb	r3, [r7, #6]
 800b1de:	72fb      	strb	r3, [r7, #11]
    write_packet.parameters[1] = (uint8_t)((address>>8)&0xFF); // MSW
 800b1e0:	79bb      	ldrb	r3, [r7, #6]
 800b1e2:	121b      	asrs	r3, r3, #8
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	733b      	strb	r3, [r7, #12]

    for(idx_param=2; idx_param < write_packet.parameter_nb; idx_param++)
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b1ee:	e011      	b.n	800b214 <xl_320_write+0x6c>
    {
        write_packet.parameters[idx_param] = parameters[idx_param-2];
 800b1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b1f8:	3a02      	subs	r2, #2
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	440a      	add	r2, r1
 800b1fe:	7812      	ldrb	r2, [r2, #0]
 800b200:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b204:	440b      	add	r3, r1
 800b206:	f803 2c25 	strb.w	r2, [r3, #-37]
    write_packet.parameter_nb  = nb_param + 2;
    write_packet.packet_length = write_packet.parameter_nb + 3;
    write_packet.parameters[0] = (uint8_t)(address&0xFF); // LSW
    write_packet.parameters[1] = (uint8_t)((address>>8)&0xFF); // MSW

    for(idx_param=2; idx_param < write_packet.parameter_nb; idx_param++)
 800b20a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b20e:	3301      	adds	r3, #1
 800b210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b218:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d3e7      	bcc.n	800b1f0 <xl_320_write+0x48>
    {
        write_packet.parameters[idx_param] = parameters[idx_param-2];
    }

    // Send the instruction
    xl_320_send_packet(&write_packet);
 800b220:	f107 0308 	add.w	r3, r7, #8
 800b224:	4618      	mov	r0, r3
 800b226:	f000 f805 	bl	800b234 <xl_320_send_packet>
}
 800b22a:	bf00      	nop
 800b22c:	3730      	adds	r7, #48	; 0x30
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop

0800b234 <xl_320_send_packet>:

void xl_320_send_packet(xl_320_packet_t* packet){
 800b234:	b580      	push	{r7, lr}
 800b236:	b090      	sub	sp, #64	; 0x40
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
    unsigned short crc16;
    uint8_t buffer[XL_320_MAX_PACKET];
    uint8_t idx_buffer=0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t idx_param;
    uint8_t length;
    uint8_t stuffing=0;
 800b242:	2300      	movs	r3, #0
 800b244:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t ff = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    buffer[idx_buffer++]=XL_320_HEADER;
 800b24e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b258:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b25c:	4413      	add	r3, r2
 800b25e:	22ff      	movs	r2, #255	; 0xff
 800b260:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=XL_320_HEADER;
 800b264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b268:	1c5a      	adds	r2, r3, #1
 800b26a:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b26e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b272:	4413      	add	r3, r2
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=XL_320_HEADER_2;
 800b27a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b284:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b288:	4413      	add	r3, r2
 800b28a:	22fd      	movs	r2, #253	; 0xfd
 800b28c:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=0x00;          // Reserved
 800b290:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b29a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b29e:	4413      	add	r3, r2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=packet->id;
 800b2a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b2ba:	440b      	add	r3, r1
 800b2bc:	f803 2c34 	strb.w	r2, [r3, #-52]
    length = idx_buffer;
 800b2c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    idx_buffer +=2;
 800b2c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    buffer[idx_buffer++]=packet->instruction;
 800b2d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b2dc:	4619      	mov	r1, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	789a      	ldrb	r2, [r3, #2]
 800b2e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b2e6:	440b      	add	r3, r1
 800b2e8:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (idx_param=0; idx_param<packet->parameter_nb; idx_param++){
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b2f2:	e04e      	b.n	800b392 <xl_320_send_packet+0x15e>
        if (packet->parameters[idx_param] == 0xfd && ff>=2) {
 800b2f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	78db      	ldrb	r3, [r3, #3]
 800b2fe:	2bfd      	cmp	r3, #253	; 0xfd
 800b300:	d122      	bne.n	800b348 <xl_320_send_packet+0x114>
 800b302:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b306:	2b01      	cmp	r3, #1
 800b308:	d91e      	bls.n	800b348 <xl_320_send_packet+0x114>
            ff = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            buffer[idx_buffer++]=0xfd;
 800b310:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b31a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b31e:	4413      	add	r3, r2
 800b320:	22fd      	movs	r2, #253	; 0xfd
 800b322:	f803 2c34 	strb.w	r2, [r3, #-52]
            buffer[idx_buffer++]=0xfd;
 800b326:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b330:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b334:	4413      	add	r3, r2
 800b336:	22fd      	movs	r2, #253	; 0xfd
 800b338:	f803 2c34 	strb.w	r2, [r3, #-52]
            stuffing++;
 800b33c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b340:	3301      	adds	r3, #1
 800b342:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800b346:	e01f      	b.n	800b388 <xl_320_send_packet+0x154>
        } else {
            if (packet->parameters[idx_param] == 0xff) {
 800b348:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	4413      	add	r3, r2
 800b350:	78db      	ldrb	r3, [r3, #3]
 800b352:	2bff      	cmp	r3, #255	; 0xff
 800b354:	d105      	bne.n	800b362 <xl_320_send_packet+0x12e>
                ff++;
 800b356:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b35a:	3301      	adds	r3, #1
 800b35c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800b360:	e002      	b.n	800b368 <xl_320_send_packet+0x134>
            } else {
                ff = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            }
            buffer[idx_buffer++] = packet->parameters[idx_param];
 800b368:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b372:	4619      	mov	r1, r3
 800b374:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	4413      	add	r3, r2
 800b37c:	78da      	ldrb	r2, [r3, #3]
 800b37e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b382:	440b      	add	r3, r1
 800b384:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=0x00;          // Reserved
    buffer[idx_buffer++]=packet->id;
    length = idx_buffer;
    idx_buffer +=2;
    buffer[idx_buffer++]=packet->instruction;
    for (idx_param=0; idx_param<packet->parameter_nb; idx_param++){
 800b388:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b38c:	3301      	adds	r3, #1
 800b38e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b398:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d3a9      	bcc.n	800b2f4 <xl_320_send_packet+0xc0>
            }
            buffer[idx_buffer++] = packet->parameters[idx_param];
        }
    }

    buffer[length]=(uint8_t)((packet->packet_length+stuffing)&0xFF);
 800b3a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7851      	ldrb	r1, [r2, #1]
 800b3a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800b3ac:	440a      	add	r2, r1
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b3b4:	440b      	add	r3, r1
 800b3b6:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[length+1]=(uint8_t)(((packet->packet_length+stuffing)>>8)&0xFF);
 800b3ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3be:	3301      	adds	r3, #1
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7852      	ldrb	r2, [r2, #1]
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800b3ca:	440a      	add	r2, r1
 800b3cc:	1212      	asrs	r2, r2, #8
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b3d4:	440b      	add	r3, r1
 800b3d6:	f803 2c34 	strb.w	r2, [r3, #-52]

    crc16 = update_crc(0, buffer,idx_buffer);
 800b3da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	f107 030c 	add.w	r3, r7, #12
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	f7ff fe90 	bl	800b10c <update_crc>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	873b      	strh	r3, [r7, #56]	; 0x38
    length = idx_buffer;
 800b3f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if(xl_320_cfg.mode==XL_320_TXRX_ONE_PIN)
 800b3f8:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <xl_320_send_packet+0x23c>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d103      	bne.n	800b408 <xl_320_send_packet+0x1d4>
    	xl_320_cfg.hw_switch(XL_320_TX);
 800b400:	4b1b      	ldr	r3, [pc, #108]	; (800b470 <xl_320_send_packet+0x23c>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	2001      	movs	r0, #1
 800b406:	4798      	blx	r3
    for(idx_buffer = 0; idx_buffer<length; idx_buffer++)
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b40e:	e00f      	b.n	800b430 <xl_320_send_packet+0x1fc>
    {
        xl_320_cfg.hw_send_byte(buffer[idx_buffer]);
 800b410:	4b17      	ldr	r3, [pc, #92]	; (800b470 <xl_320_send_packet+0x23c>)
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b418:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b41c:	440a      	add	r2, r1
 800b41e:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 800b422:	4610      	mov	r0, r2
 800b424:	4798      	blx	r3
    crc16 = update_crc(0, buffer,idx_buffer);
    length = idx_buffer;

    if(xl_320_cfg.mode==XL_320_TXRX_ONE_PIN)
    	xl_320_cfg.hw_switch(XL_320_TX);
    for(idx_buffer = 0; idx_buffer<length; idx_buffer++)
 800b426:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b42a:	3301      	adds	r3, #1
 800b42c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b430:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b434:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b438:	429a      	cmp	r2, r3
 800b43a:	d3e9      	bcc.n	800b410 <xl_320_send_packet+0x1dc>
    {
        xl_320_cfg.hw_send_byte(buffer[idx_buffer]);
    }
    xl_320_cfg.hw_send_byte(crc16 & 0xFF); // CRC_L
 800b43c:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <xl_320_send_packet+0x23c>)
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
    xl_320_cfg.hw_send_byte((crc16>>8)&0xFF); // CRC_H
 800b448:	4b09      	ldr	r3, [pc, #36]	; (800b470 <xl_320_send_packet+0x23c>)
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b44e:	0a12      	lsrs	r2, r2, #8
 800b450:	b292      	uxth	r2, r2
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	4610      	mov	r0, r2
 800b456:	4798      	blx	r3
    if(xl_320_cfg.mode==XL_320_TXRX_ONE_PIN)
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <xl_320_send_packet+0x23c>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d103      	bne.n	800b468 <xl_320_send_packet+0x234>
    	xl_320_cfg.hw_switch(XL_320_RX);
 800b460:	4b03      	ldr	r3, [pc, #12]	; (800b470 <xl_320_send_packet+0x23c>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	2000      	movs	r0, #0
 800b466:	4798      	blx	r3
}
 800b468:	bf00      	nop
 800b46a:	3740      	adds	r7, #64	; 0x40
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20014994 	.word	0x20014994

0800b474 <xl_320_set_control_mode>:
void xl_320_set_ccw_limit(uint8_t id, uint16_t ccw_limit){
    uint8_t angle[2];
    angle[0]=(uint8_t)(ccw_limit&0xFF);
    angle[1]=(uint8_t)((ccw_limit>>8)&0xFF);
     xl_320_write(id, Xl_320_ADR_CCW_LIMIT, angle, 2, XL_320_INS_WRITE);}
void xl_320_set_control_mode(uint8_t id, uint8_t mode){
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af02      	add	r7, sp, #8
 800b47a:	4603      	mov	r3, r0
 800b47c:	460a      	mov	r2, r1
 800b47e:	71fb      	strb	r3, [r7, #7]
 800b480:	4613      	mov	r3, r2
 800b482:	71bb      	strb	r3, [r7, #6]
    xl_320_write(id, Xl_320_ADR_CONTROL_MODE, &mode, 1, XL_320_INS_WRITE);}
 800b484:	1dba      	adds	r2, r7, #6
 800b486:	79f8      	ldrb	r0, [r7, #7]
 800b488:	2303      	movs	r3, #3
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	2301      	movs	r3, #1
 800b48e:	210b      	movs	r1, #11
 800b490:	f7ff fe8a 	bl	800b1a8 <xl_320_write>
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop

0800b49c <xl_320_set_led>:
     xl_320_write(id, Xl_320_ADR_RET_LEVEL, &level, 1, XL_320_INS_WRITE);}                       //Tested
void xl_320_set_alarm_shutdown(uint8_t id, uint8_t shutdown){
     xl_320_write(id, Xl_320_ADR_ALARM_SHUTDOWN, &shutdown, 1, XL_320_INS_WRITE);}
void xl_320_set_torque_en(uint8_t id, uint8_t torque_en){
     xl_320_write(id, Xl_320_ADR_TORQUE_EN, &torque_en, 1, XL_320_INS_WRITE);}
void xl_320_set_led(uint8_t id , uint8_t led){
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	460a      	mov	r2, r1
 800b4a6:	71fb      	strb	r3, [r7, #7]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	71bb      	strb	r3, [r7, #6]
    xl_320_write(id, XL_320_ADR_LED, &led, 1, XL_320_INS_WRITE);}                                 //Tested
 800b4ac:	1dba      	adds	r2, r7, #6
 800b4ae:	79f8      	ldrb	r0, [r7, #7]
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	2119      	movs	r1, #25
 800b4b8:	f7ff fe76 	bl	800b1a8 <xl_320_write>
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop

0800b4c4 <xl_320_set_position>:
    xl_320_write(id, XL_320_ADR_D_GAIN, &D, 1, XL_320_INS_WRITE);}
void xl_320_set_I_gain(uint8_t id, uint8_t I){
    xl_320_write(id, XL_320_ADR_I_GAIN, &I, 1, XL_320_INS_WRITE);}
void xl_320_set_P_gain(uint8_t id, uint8_t P){
    xl_320_write(id, XL_320_ADR_P_GAIN, &P, 1, XL_320_INS_WRITE);}
void xl_320_set_position(uint8_t id, uint16_t position){
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	460a      	mov	r2, r1
 800b4ce:	71fb      	strb	r3, [r7, #7]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	80bb      	strh	r3, [r7, #4]
    uint8_t pos[2];
    pos[0]=(uint8_t)(position&0xFF);
 800b4d4:	88bb      	ldrh	r3, [r7, #4]
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	733b      	strb	r3, [r7, #12]
    pos[1]=(uint8_t)((position>>8)&0xFF);
 800b4da:	88bb      	ldrh	r3, [r7, #4]
 800b4dc:	0a1b      	lsrs	r3, r3, #8
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	737b      	strb	r3, [r7, #13]
     xl_320_write(id, XL_320_ADR_GOAL_POSITION, pos, 2, XL_320_INS_WRITE);
 800b4e4:	f107 020c 	add.w	r2, r7, #12
 800b4e8:	79f8      	ldrb	r0, [r7, #7]
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	211e      	movs	r1, #30
 800b4f2:	f7ff fe59 	bl	800b1a8 <xl_320_write>
}
 800b4f6:	bf00      	nop
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop

0800b500 <__errno>:
 800b500:	4b01      	ldr	r3, [pc, #4]	; (800b508 <__errno+0x8>)
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20010120 	.word	0x20010120

0800b50c <__libc_init_array>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <__libc_init_array+0x3c>)
 800b510:	4c0e      	ldr	r4, [pc, #56]	; (800b54c <__libc_init_array+0x40>)
 800b512:	1ae4      	subs	r4, r4, r3
 800b514:	10a4      	asrs	r4, r4, #2
 800b516:	2500      	movs	r5, #0
 800b518:	461e      	mov	r6, r3
 800b51a:	42a5      	cmp	r5, r4
 800b51c:	d004      	beq.n	800b528 <__libc_init_array+0x1c>
 800b51e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b522:	4798      	blx	r3
 800b524:	3501      	adds	r5, #1
 800b526:	e7f8      	b.n	800b51a <__libc_init_array+0xe>
 800b528:	f005 f8ca 	bl	80106c0 <_init>
 800b52c:	4c08      	ldr	r4, [pc, #32]	; (800b550 <__libc_init_array+0x44>)
 800b52e:	4b09      	ldr	r3, [pc, #36]	; (800b554 <__libc_init_array+0x48>)
 800b530:	1ae4      	subs	r4, r4, r3
 800b532:	10a4      	asrs	r4, r4, #2
 800b534:	2500      	movs	r5, #0
 800b536:	461e      	mov	r6, r3
 800b538:	42a5      	cmp	r5, r4
 800b53a:	d004      	beq.n	800b546 <__libc_init_array+0x3a>
 800b53c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b540:	4798      	blx	r3
 800b542:	3501      	adds	r5, #1
 800b544:	e7f8      	b.n	800b538 <__libc_init_array+0x2c>
 800b546:	bd70      	pop	{r4, r5, r6, pc}
 800b548:	08011ee0 	.word	0x08011ee0
 800b54c:	08011ee0 	.word	0x08011ee0
 800b550:	08011ee4 	.word	0x08011ee4
 800b554:	08011ee0 	.word	0x08011ee0

0800b558 <memcpy>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	1e43      	subs	r3, r0, #1
 800b55c:	440a      	add	r2, r1
 800b55e:	4291      	cmp	r1, r2
 800b560:	d004      	beq.n	800b56c <memcpy+0x14>
 800b562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b56a:	e7f8      	b.n	800b55e <memcpy+0x6>
 800b56c:	bd10      	pop	{r4, pc}

0800b56e <memset>:
 800b56e:	4402      	add	r2, r0
 800b570:	4603      	mov	r3, r0
 800b572:	4293      	cmp	r3, r2
 800b574:	d002      	beq.n	800b57c <memset+0xe>
 800b576:	f803 1b01 	strb.w	r1, [r3], #1
 800b57a:	e7fa      	b.n	800b572 <memset+0x4>
 800b57c:	4770      	bx	lr
	...

0800b580 <_puts_r>:
 800b580:	b530      	push	{r4, r5, lr}
 800b582:	4605      	mov	r5, r0
 800b584:	b089      	sub	sp, #36	; 0x24
 800b586:	4608      	mov	r0, r1
 800b588:	460c      	mov	r4, r1
 800b58a:	f7f4 fe41 	bl	8000210 <strlen>
 800b58e:	4b1e      	ldr	r3, [pc, #120]	; (800b608 <_puts_r+0x88>)
 800b590:	9306      	str	r3, [sp, #24]
 800b592:	2301      	movs	r3, #1
 800b594:	9005      	str	r0, [sp, #20]
 800b596:	9307      	str	r3, [sp, #28]
 800b598:	4418      	add	r0, r3
 800b59a:	ab04      	add	r3, sp, #16
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	2302      	movs	r3, #2
 800b5a0:	9404      	str	r4, [sp, #16]
 800b5a2:	9003      	str	r0, [sp, #12]
 800b5a4:	9302      	str	r3, [sp, #8]
 800b5a6:	b125      	cbz	r5, 800b5b2 <_puts_r+0x32>
 800b5a8:	69ab      	ldr	r3, [r5, #24]
 800b5aa:	b913      	cbnz	r3, 800b5b2 <_puts_r+0x32>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f002 f87d 	bl	800d6ac <__sinit>
 800b5b2:	69ab      	ldr	r3, [r5, #24]
 800b5b4:	68ac      	ldr	r4, [r5, #8]
 800b5b6:	b913      	cbnz	r3, 800b5be <_puts_r+0x3e>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f002 f877 	bl	800d6ac <__sinit>
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <_puts_r+0x8c>)
 800b5c0:	429c      	cmp	r4, r3
 800b5c2:	d101      	bne.n	800b5c8 <_puts_r+0x48>
 800b5c4:	686c      	ldr	r4, [r5, #4]
 800b5c6:	e008      	b.n	800b5da <_puts_r+0x5a>
 800b5c8:	4b11      	ldr	r3, [pc, #68]	; (800b610 <_puts_r+0x90>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d101      	bne.n	800b5d2 <_puts_r+0x52>
 800b5ce:	68ac      	ldr	r4, [r5, #8]
 800b5d0:	e003      	b.n	800b5da <_puts_r+0x5a>
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <_puts_r+0x94>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	bf08      	it	eq
 800b5d8:	68ec      	ldreq	r4, [r5, #12]
 800b5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5de:	049a      	lsls	r2, r3, #18
 800b5e0:	d406      	bmi.n	800b5f0 <_puts_r+0x70>
 800b5e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b5e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	6662      	str	r2, [r4, #100]	; 0x64
 800b5f0:	aa01      	add	r2, sp, #4
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f002 f9df 	bl	800d9b8 <__sfvwrite_r>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	bf14      	ite	ne
 800b5fe:	f04f 30ff 	movne.w	r0, #4294967295
 800b602:	200a      	moveq	r0, #10
 800b604:	b009      	add	sp, #36	; 0x24
 800b606:	bd30      	pop	{r4, r5, pc}
 800b608:	080119e8 	.word	0x080119e8
 800b60c:	08011b4c 	.word	0x08011b4c
 800b610:	08011b6c 	.word	0x08011b6c
 800b614:	08011b8c 	.word	0x08011b8c

0800b618 <puts>:
 800b618:	4b02      	ldr	r3, [pc, #8]	; (800b624 <puts+0xc>)
 800b61a:	4601      	mov	r1, r0
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	f7ff bfaf 	b.w	800b580 <_puts_r>
 800b622:	bf00      	nop
 800b624:	20010120 	.word	0x20010120

0800b628 <snprintf>:
 800b628:	b40c      	push	{r2, r3}
 800b62a:	b530      	push	{r4, r5, lr}
 800b62c:	4b16      	ldr	r3, [pc, #88]	; (800b688 <snprintf+0x60>)
 800b62e:	1e0c      	subs	r4, r1, #0
 800b630:	b09d      	sub	sp, #116	; 0x74
 800b632:	681d      	ldr	r5, [r3, #0]
 800b634:	da04      	bge.n	800b640 <snprintf+0x18>
 800b636:	238b      	movs	r3, #139	; 0x8b
 800b638:	602b      	str	r3, [r5, #0]
 800b63a:	f04f 30ff 	mov.w	r0, #4294967295
 800b63e:	e01e      	b.n	800b67e <snprintf+0x56>
 800b640:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b644:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b648:	bf14      	ite	ne
 800b64a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b64e:	4623      	moveq	r3, r4
 800b650:	9304      	str	r3, [sp, #16]
 800b652:	9307      	str	r3, [sp, #28]
 800b654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b658:	9002      	str	r0, [sp, #8]
 800b65a:	9006      	str	r0, [sp, #24]
 800b65c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b660:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b662:	ab21      	add	r3, sp, #132	; 0x84
 800b664:	a902      	add	r1, sp, #8
 800b666:	4628      	mov	r0, r5
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	f000 f8c5 	bl	800b7f8 <_svfprintf_r>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	bfbc      	itt	lt
 800b672:	238b      	movlt	r3, #139	; 0x8b
 800b674:	602b      	strlt	r3, [r5, #0]
 800b676:	b114      	cbz	r4, 800b67e <snprintf+0x56>
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
 800b67e:	b01d      	add	sp, #116	; 0x74
 800b680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b684:	b002      	add	sp, #8
 800b686:	4770      	bx	lr
 800b688:	20010120 	.word	0x20010120

0800b68c <sprintf>:
 800b68c:	b40e      	push	{r1, r2, r3}
 800b68e:	b500      	push	{lr}
 800b690:	b09c      	sub	sp, #112	; 0x70
 800b692:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b696:	ab1d      	add	r3, sp, #116	; 0x74
 800b698:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b69c:	9002      	str	r0, [sp, #8]
 800b69e:	9006      	str	r0, [sp, #24]
 800b6a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6a4:	480a      	ldr	r0, [pc, #40]	; (800b6d0 <sprintf+0x44>)
 800b6a6:	9104      	str	r1, [sp, #16]
 800b6a8:	9107      	str	r1, [sp, #28]
 800b6aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b6b6:	6800      	ldr	r0, [r0, #0]
 800b6b8:	9301      	str	r3, [sp, #4]
 800b6ba:	a902      	add	r1, sp, #8
 800b6bc:	f000 f89c 	bl	800b7f8 <_svfprintf_r>
 800b6c0:	9b02      	ldr	r3, [sp, #8]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	b01c      	add	sp, #112	; 0x70
 800b6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6cc:	b003      	add	sp, #12
 800b6ce:	4770      	bx	lr
 800b6d0:	20010120 	.word	0x20010120

0800b6d4 <strcasecmp>:
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <strcasecmp+0x38>)
 800b6d6:	b530      	push	{r4, r5, lr}
 800b6d8:	681d      	ldr	r5, [r3, #0]
 800b6da:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6de:	18ea      	adds	r2, r5, r3
 800b6e0:	7852      	ldrb	r2, [r2, #1]
 800b6e2:	f002 0203 	and.w	r2, r2, #3
 800b6e6:	2a01      	cmp	r2, #1
 800b6e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ec:	eb05 0402 	add.w	r4, r5, r2
 800b6f0:	bf08      	it	eq
 800b6f2:	3320      	addeq	r3, #32
 800b6f4:	7864      	ldrb	r4, [r4, #1]
 800b6f6:	f004 0403 	and.w	r4, r4, #3
 800b6fa:	2c01      	cmp	r4, #1
 800b6fc:	bf08      	it	eq
 800b6fe:	3220      	addeq	r2, #32
 800b700:	1a9b      	subs	r3, r3, r2
 800b702:	d101      	bne.n	800b708 <strcasecmp+0x34>
 800b704:	2a00      	cmp	r2, #0
 800b706:	d1e8      	bne.n	800b6da <strcasecmp+0x6>
 800b708:	4618      	mov	r0, r3
 800b70a:	bd30      	pop	{r4, r5, pc}
 800b70c:	20010124 	.word	0x20010124

0800b710 <strcpy>:
 800b710:	4603      	mov	r3, r0
 800b712:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b716:	f803 2b01 	strb.w	r2, [r3], #1
 800b71a:	2a00      	cmp	r2, #0
 800b71c:	d1f9      	bne.n	800b712 <strcpy+0x2>
 800b71e:	4770      	bx	lr

0800b720 <strncat>:
 800b720:	b530      	push	{r4, r5, lr}
 800b722:	4603      	mov	r3, r0
 800b724:	781c      	ldrb	r4, [r3, #0]
 800b726:	1c5d      	adds	r5, r3, #1
 800b728:	b144      	cbz	r4, 800b73c <strncat+0x1c>
 800b72a:	462b      	mov	r3, r5
 800b72c:	e7fa      	b.n	800b724 <strncat+0x4>
 800b72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b732:	f803 4b01 	strb.w	r4, [r3], #1
 800b736:	b124      	cbz	r4, 800b742 <strncat+0x22>
 800b738:	b902      	cbnz	r2, 800b73c <strncat+0x1c>
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	f112 32ff 	adds.w	r2, r2, #4294967295
 800b740:	d2f5      	bcs.n	800b72e <strncat+0xe>
 800b742:	bd30      	pop	{r4, r5, pc}

0800b744 <strncmp>:
 800b744:	b530      	push	{r4, r5, lr}
 800b746:	b182      	cbz	r2, 800b76a <strncmp+0x26>
 800b748:	1e45      	subs	r5, r0, #1
 800b74a:	3901      	subs	r1, #1
 800b74c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800b750:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b754:	42a3      	cmp	r3, r4
 800b756:	d106      	bne.n	800b766 <strncmp+0x22>
 800b758:	43ec      	mvns	r4, r5
 800b75a:	4414      	add	r4, r2
 800b75c:	42e0      	cmn	r0, r4
 800b75e:	d001      	beq.n	800b764 <strncmp+0x20>
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1f3      	bne.n	800b74c <strncmp+0x8>
 800b764:	461c      	mov	r4, r3
 800b766:	1b18      	subs	r0, r3, r4
 800b768:	bd30      	pop	{r4, r5, pc}
 800b76a:	4610      	mov	r0, r2
 800b76c:	bd30      	pop	{r4, r5, pc}

0800b76e <strncpy>:
 800b76e:	b510      	push	{r4, lr}
 800b770:	4603      	mov	r3, r0
 800b772:	b142      	cbz	r2, 800b786 <strncpy+0x18>
 800b774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b778:	f803 4b01 	strb.w	r4, [r3], #1
 800b77c:	3a01      	subs	r2, #1
 800b77e:	2c00      	cmp	r4, #0
 800b780:	d1f7      	bne.n	800b772 <strncpy+0x4>
 800b782:	441a      	add	r2, r3
 800b784:	e000      	b.n	800b788 <strncpy+0x1a>
 800b786:	bd10      	pop	{r4, pc}
 800b788:	4293      	cmp	r3, r2
 800b78a:	d002      	beq.n	800b792 <strncpy+0x24>
 800b78c:	f803 4b01 	strb.w	r4, [r3], #1
 800b790:	e7fa      	b.n	800b788 <strncpy+0x1a>
 800b792:	bd10      	pop	{r4, pc}

0800b794 <strsep>:
 800b794:	4602      	mov	r2, r0
 800b796:	2300      	movs	r3, #0
 800b798:	6800      	ldr	r0, [r0, #0]
 800b79a:	f000 b800 	b.w	800b79e <__strtok_r>

0800b79e <__strtok_r>:
 800b79e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7a0:	b948      	cbnz	r0, 800b7b6 <__strtok_r+0x18>
 800b7a2:	6810      	ldr	r0, [r2, #0]
 800b7a4:	b938      	cbnz	r0, 800b7b6 <__strtok_r+0x18>
 800b7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b7ac:	b15e      	cbz	r6, 800b7c6 <__strtok_r+0x28>
 800b7ae:	42b5      	cmp	r5, r6
 800b7b0:	d1fa      	bne.n	800b7a8 <__strtok_r+0xa>
 800b7b2:	b12b      	cbz	r3, 800b7c0 <__strtok_r+0x22>
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b7be:	e7f3      	b.n	800b7a8 <__strtok_r+0xa>
 800b7c0:	6014      	str	r4, [r2, #0]
 800b7c2:	7003      	strb	r3, [r0, #0]
 800b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c6:	b94d      	cbnz	r5, 800b7dc <__strtok_r+0x3e>
 800b7c8:	6015      	str	r5, [r2, #0]
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b7d2:	42b5      	cmp	r5, r6
 800b7d4:	d007      	beq.n	800b7e6 <__strtok_r+0x48>
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d1f9      	bne.n	800b7ce <__strtok_r+0x30>
 800b7da:	461c      	mov	r4, r3
 800b7dc:	4623      	mov	r3, r4
 800b7de:	460f      	mov	r7, r1
 800b7e0:	f813 5b01 	ldrb.w	r5, [r3], #1
 800b7e4:	e7f3      	b.n	800b7ce <__strtok_r+0x30>
 800b7e6:	b115      	cbz	r5, 800b7ee <__strtok_r+0x50>
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	7021      	strb	r1, [r4, #0]
 800b7ec:	e000      	b.n	800b7f0 <__strtok_r+0x52>
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	6013      	str	r3, [r2, #0]
 800b7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f4:	0000      	movs	r0, r0
	...

0800b7f8 <_svfprintf_r>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	b0bd      	sub	sp, #244	; 0xf4
 800b7fe:	468b      	mov	fp, r1
 800b800:	9205      	str	r2, [sp, #20]
 800b802:	461f      	mov	r7, r3
 800b804:	4682      	mov	sl, r0
 800b806:	f002 fa3f 	bl	800dc88 <_localeconv_r>
 800b80a:	6803      	ldr	r3, [r0, #0]
 800b80c:	930d      	str	r3, [sp, #52]	; 0x34
 800b80e:	4618      	mov	r0, r3
 800b810:	f7f4 fcfe 	bl	8000210 <strlen>
 800b814:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b818:	9008      	str	r0, [sp, #32]
 800b81a:	0619      	lsls	r1, r3, #24
 800b81c:	d515      	bpl.n	800b84a <_svfprintf_r+0x52>
 800b81e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b822:	b993      	cbnz	r3, 800b84a <_svfprintf_r+0x52>
 800b824:	2140      	movs	r1, #64	; 0x40
 800b826:	4650      	mov	r0, sl
 800b828:	f002 faa2 	bl	800dd70 <_malloc_r>
 800b82c:	f8cb 0000 	str.w	r0, [fp]
 800b830:	f8cb 0010 	str.w	r0, [fp, #16]
 800b834:	b930      	cbnz	r0, 800b844 <_svfprintf_r+0x4c>
 800b836:	230c      	movs	r3, #12
 800b838:	f8ca 3000 	str.w	r3, [sl]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	f000 bf95 	b.w	800c76e <_svfprintf_r+0xf76>
 800b844:	2340      	movs	r3, #64	; 0x40
 800b846:	f8cb 3014 	str.w	r3, [fp, #20]
 800b84a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800bab0 <_svfprintf_r+0x2b8>
 800b84e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b852:	2300      	movs	r3, #0
 800b854:	ac2c      	add	r4, sp, #176	; 0xb0
 800b856:	941f      	str	r4, [sp, #124]	; 0x7c
 800b858:	9321      	str	r3, [sp, #132]	; 0x84
 800b85a:	9320      	str	r3, [sp, #128]	; 0x80
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	9311      	str	r3, [sp, #68]	; 0x44
 800b860:	9310      	str	r3, [sp, #64]	; 0x40
 800b862:	930a      	str	r3, [sp, #40]	; 0x28
 800b864:	9d05      	ldr	r5, [sp, #20]
 800b866:	462b      	mov	r3, r5
 800b868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86c:	b11a      	cbz	r2, 800b876 <_svfprintf_r+0x7e>
 800b86e:	2a25      	cmp	r2, #37	; 0x25
 800b870:	d001      	beq.n	800b876 <_svfprintf_r+0x7e>
 800b872:	461d      	mov	r5, r3
 800b874:	e7f7      	b.n	800b866 <_svfprintf_r+0x6e>
 800b876:	9b05      	ldr	r3, [sp, #20]
 800b878:	1aee      	subs	r6, r5, r3
 800b87a:	d017      	beq.n	800b8ac <_svfprintf_r+0xb4>
 800b87c:	e884 0048 	stmia.w	r4, {r3, r6}
 800b880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b882:	4433      	add	r3, r6
 800b884:	9321      	str	r3, [sp, #132]	; 0x84
 800b886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b888:	3301      	adds	r3, #1
 800b88a:	2b07      	cmp	r3, #7
 800b88c:	9320      	str	r3, [sp, #128]	; 0x80
 800b88e:	dc01      	bgt.n	800b894 <_svfprintf_r+0x9c>
 800b890:	3408      	adds	r4, #8
 800b892:	e008      	b.n	800b8a6 <_svfprintf_r+0xae>
 800b894:	aa1f      	add	r2, sp, #124	; 0x7c
 800b896:	4659      	mov	r1, fp
 800b898:	4650      	mov	r0, sl
 800b89a:	f003 f978 	bl	800eb8e <__ssprint_r>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f040 862c 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800b8a4:	ac2c      	add	r4, sp, #176	; 0xb0
 800b8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8a8:	4433      	add	r3, r6
 800b8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b8ac:	782b      	ldrb	r3, [r5, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 861d 	beq.w	800c4ee <_svfprintf_r+0xcf6>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	1c6b      	adds	r3, r5, #1
 800b8b8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800b8bc:	4611      	mov	r1, r2
 800b8be:	f04f 39ff 	mov.w	r9, #4294967295
 800b8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8c4:	4615      	mov	r5, r2
 800b8c6:	200a      	movs	r0, #10
 800b8c8:	1c5e      	adds	r6, r3, #1
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	9605      	str	r6, [sp, #20]
 800b8ce:	9302      	str	r3, [sp, #8]
 800b8d0:	9b02      	ldr	r3, [sp, #8]
 800b8d2:	3b20      	subs	r3, #32
 800b8d4:	2b58      	cmp	r3, #88	; 0x58
 800b8d6:	f200 8263 	bhi.w	800bda0 <_svfprintf_r+0x5a8>
 800b8da:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b8de:	005c      	.short	0x005c
 800b8e0:	02610261 	.word	0x02610261
 800b8e4:	0261006b 	.word	0x0261006b
 800b8e8:	02610261 	.word	0x02610261
 800b8ec:	02610261 	.word	0x02610261
 800b8f0:	006e0261 	.word	0x006e0261
 800b8f4:	02610059 	.word	0x02610059
 800b8f8:	007c0079 	.word	0x007c0079
 800b8fc:	00a30261 	.word	0x00a30261
 800b900:	00a600a6 	.word	0x00a600a6
 800b904:	00a600a6 	.word	0x00a600a6
 800b908:	00a600a6 	.word	0x00a600a6
 800b90c:	00a600a6 	.word	0x00a600a6
 800b910:	026100a6 	.word	0x026100a6
 800b914:	02610261 	.word	0x02610261
 800b918:	02610261 	.word	0x02610261
 800b91c:	02610261 	.word	0x02610261
 800b920:	02610261 	.word	0x02610261
 800b924:	00d60261 	.word	0x00d60261
 800b928:	0261010b 	.word	0x0261010b
 800b92c:	0261010b 	.word	0x0261010b
 800b930:	02610261 	.word	0x02610261
 800b934:	00b90261 	.word	0x00b90261
 800b938:	02610261 	.word	0x02610261
 800b93c:	02610152 	.word	0x02610152
 800b940:	02610261 	.word	0x02610261
 800b944:	02610261 	.word	0x02610261
 800b948:	02610199 	.word	0x02610199
 800b94c:	00660261 	.word	0x00660261
 800b950:	02610261 	.word	0x02610261
 800b954:	02610261 	.word	0x02610261
 800b958:	02610261 	.word	0x02610261
 800b95c:	02610261 	.word	0x02610261
 800b960:	02610261 	.word	0x02610261
 800b964:	006100cd 	.word	0x006100cd
 800b968:	010b010b 	.word	0x010b010b
 800b96c:	00bc010b 	.word	0x00bc010b
 800b970:	02610061 	.word	0x02610061
 800b974:	00bf0261 	.word	0x00bf0261
 800b978:	01340261 	.word	0x01340261
 800b97c:	016f0154 	.word	0x016f0154
 800b980:	026100ca 	.word	0x026100ca
 800b984:	02610180 	.word	0x02610180
 800b988:	0261019b 	.word	0x0261019b
 800b98c:	01b30261 	.word	0x01b30261
 800b990:	2201      	movs	r2, #1
 800b992:	212b      	movs	r1, #43	; 0x2b
 800b994:	e002      	b.n	800b99c <_svfprintf_r+0x1a4>
 800b996:	b909      	cbnz	r1, 800b99c <_svfprintf_r+0x1a4>
 800b998:	2201      	movs	r2, #1
 800b99a:	2120      	movs	r1, #32
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	e793      	b.n	800b8c8 <_svfprintf_r+0xd0>
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d077      	beq.n	800ba94 <_svfprintf_r+0x29c>
 800b9a4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800b9a8:	e074      	b.n	800ba94 <_svfprintf_r+0x29c>
 800b9aa:	b10a      	cbz	r2, 800b9b0 <_svfprintf_r+0x1b8>
 800b9ac:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800b9b0:	4b41      	ldr	r3, [pc, #260]	; (800bab8 <_svfprintf_r+0x2c0>)
 800b9b2:	e14b      	b.n	800bc4c <_svfprintf_r+0x454>
 800b9b4:	f045 0501 	orr.w	r5, r5, #1
 800b9b8:	e7f0      	b.n	800b99c <_svfprintf_r+0x1a4>
 800b9ba:	683e      	ldr	r6, [r7, #0]
 800b9bc:	9609      	str	r6, [sp, #36]	; 0x24
 800b9be:	2e00      	cmp	r6, #0
 800b9c0:	f107 0304 	add.w	r3, r7, #4
 800b9c4:	db01      	blt.n	800b9ca <_svfprintf_r+0x1d2>
 800b9c6:	461f      	mov	r7, r3
 800b9c8:	e7e8      	b.n	800b99c <_svfprintf_r+0x1a4>
 800b9ca:	4276      	negs	r6, r6
 800b9cc:	9609      	str	r6, [sp, #36]	; 0x24
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	f045 0504 	orr.w	r5, r5, #4
 800b9d4:	e7e2      	b.n	800b99c <_svfprintf_r+0x1a4>
 800b9d6:	9e05      	ldr	r6, [sp, #20]
 800b9d8:	9b05      	ldr	r3, [sp, #20]
 800b9da:	7836      	ldrb	r6, [r6, #0]
 800b9dc:	9602      	str	r6, [sp, #8]
 800b9de:	2e2a      	cmp	r6, #42	; 0x2a
 800b9e0:	f103 0301 	add.w	r3, r3, #1
 800b9e4:	d002      	beq.n	800b9ec <_svfprintf_r+0x1f4>
 800b9e6:	f04f 0900 	mov.w	r9, #0
 800b9ea:	e00a      	b.n	800ba02 <_svfprintf_r+0x20a>
 800b9ec:	f8d7 9000 	ldr.w	r9, [r7]
 800b9f0:	9305      	str	r3, [sp, #20]
 800b9f2:	1d3e      	adds	r6, r7, #4
 800b9f4:	f1b9 0f00 	cmp.w	r9, #0
 800b9f8:	4637      	mov	r7, r6
 800b9fa:	dacf      	bge.n	800b99c <_svfprintf_r+0x1a4>
 800b9fc:	f04f 39ff 	mov.w	r9, #4294967295
 800ba00:	e7cc      	b.n	800b99c <_svfprintf_r+0x1a4>
 800ba02:	9305      	str	r3, [sp, #20]
 800ba04:	9b02      	ldr	r3, [sp, #8]
 800ba06:	3b30      	subs	r3, #48	; 0x30
 800ba08:	2b09      	cmp	r3, #9
 800ba0a:	d808      	bhi.n	800ba1e <_svfprintf_r+0x226>
 800ba0c:	fb00 3909 	mla	r9, r0, r9, r3
 800ba10:	9b05      	ldr	r3, [sp, #20]
 800ba12:	461e      	mov	r6, r3
 800ba14:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ba18:	9302      	str	r3, [sp, #8]
 800ba1a:	4633      	mov	r3, r6
 800ba1c:	e7f1      	b.n	800ba02 <_svfprintf_r+0x20a>
 800ba1e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800ba22:	e755      	b.n	800b8d0 <_svfprintf_r+0xd8>
 800ba24:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800ba28:	e7b8      	b.n	800b99c <_svfprintf_r+0x1a4>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba2e:	9b02      	ldr	r3, [sp, #8]
 800ba30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ba32:	3b30      	subs	r3, #48	; 0x30
 800ba34:	fb00 3306 	mla	r3, r0, r6, r3
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	9b05      	ldr	r3, [sp, #20]
 800ba3c:	461e      	mov	r6, r3
 800ba3e:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	9b02      	ldr	r3, [sp, #8]
 800ba46:	9605      	str	r6, [sp, #20]
 800ba48:	3b30      	subs	r3, #48	; 0x30
 800ba4a:	2b09      	cmp	r3, #9
 800ba4c:	d9ef      	bls.n	800ba2e <_svfprintf_r+0x236>
 800ba4e:	e73f      	b.n	800b8d0 <_svfprintf_r+0xd8>
 800ba50:	f045 0508 	orr.w	r5, r5, #8
 800ba54:	e7a2      	b.n	800b99c <_svfprintf_r+0x1a4>
 800ba56:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800ba5a:	e79f      	b.n	800b99c <_svfprintf_r+0x1a4>
 800ba5c:	9b05      	ldr	r3, [sp, #20]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	2b6c      	cmp	r3, #108	; 0x6c
 800ba62:	d103      	bne.n	800ba6c <_svfprintf_r+0x274>
 800ba64:	9b05      	ldr	r3, [sp, #20]
 800ba66:	3301      	adds	r3, #1
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	e002      	b.n	800ba72 <_svfprintf_r+0x27a>
 800ba6c:	f045 0510 	orr.w	r5, r5, #16
 800ba70:	e794      	b.n	800b99c <_svfprintf_r+0x1a4>
 800ba72:	f045 0520 	orr.w	r5, r5, #32
 800ba76:	e791      	b.n	800b99c <_svfprintf_r+0x1a4>
 800ba78:	1d3b      	adds	r3, r7, #4
 800ba7a:	9303      	str	r3, [sp, #12]
 800ba7c:	2600      	movs	r6, #0
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800ba84:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800ba88:	e199      	b.n	800bdbe <_svfprintf_r+0x5c6>
 800ba8a:	b10a      	cbz	r2, 800ba90 <_svfprintf_r+0x298>
 800ba8c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ba90:	f045 0510 	orr.w	r5, r5, #16
 800ba94:	06aa      	lsls	r2, r5, #26
 800ba96:	d511      	bpl.n	800babc <_svfprintf_r+0x2c4>
 800ba98:	3707      	adds	r7, #7
 800ba9a:	f027 0707 	bic.w	r7, r7, #7
 800ba9e:	f107 0308 	add.w	r3, r7, #8
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	e9d7 6700 	ldrd	r6, r7, [r7]
 800baa8:	e017      	b.n	800bada <_svfprintf_r+0x2e2>
 800baaa:	bf00      	nop
 800baac:	f3af 8000 	nop.w
	...
 800bab8:	08011a0a 	.word	0x08011a0a
 800babc:	f015 0f10 	tst.w	r5, #16
 800bac0:	f107 0304 	add.w	r3, r7, #4
 800bac4:	d002      	beq.n	800bacc <_svfprintf_r+0x2d4>
 800bac6:	9303      	str	r3, [sp, #12]
 800bac8:	683e      	ldr	r6, [r7, #0]
 800baca:	e005      	b.n	800bad8 <_svfprintf_r+0x2e0>
 800bacc:	683e      	ldr	r6, [r7, #0]
 800bace:	9303      	str	r3, [sp, #12]
 800bad0:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bad4:	bf18      	it	ne
 800bad6:	b236      	sxthne	r6, r6
 800bad8:	17f7      	asrs	r7, r6, #31
 800bada:	2e00      	cmp	r6, #0
 800badc:	f177 0300 	sbcs.w	r3, r7, #0
 800bae0:	f280 80de 	bge.w	800bca0 <_svfprintf_r+0x4a8>
 800bae4:	4276      	negs	r6, r6
 800bae6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800baea:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800baee:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800baf2:	e0d5      	b.n	800bca0 <_svfprintf_r+0x4a8>
 800baf4:	b10a      	cbz	r2, 800bafa <_svfprintf_r+0x302>
 800baf6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bafa:	3707      	adds	r7, #7
 800bafc:	f027 0707 	bic.w	r7, r7, #7
 800bb00:	f107 0308 	add.w	r3, r7, #8
 800bb04:	9303      	str	r3, [sp, #12]
 800bb06:	ed97 7b00 	vldr	d7, [r7]
 800bb0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	9312      	str	r3, [sp, #72]	; 0x48
 800bb12:	9b07      	ldr	r3, [sp, #28]
 800bb14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb18:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	4bab      	ldr	r3, [pc, #684]	; (800bdcc <_svfprintf_r+0x5d4>)
 800bb20:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bb24:	f7f5 f81e 	bl	8000b64 <__aeabi_dcmpun>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	f040 84f1 	bne.w	800c510 <_svfprintf_r+0xd18>
 800bb2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb32:	4ba6      	ldr	r3, [pc, #664]	; (800bdcc <_svfprintf_r+0x5d4>)
 800bb34:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bb38:	f7f4 fff6 	bl	8000b28 <__aeabi_dcmple>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f040 84e7 	bne.w	800c510 <_svfprintf_r+0xd18>
 800bb42:	f000 bdfd 	b.w	800c740 <_svfprintf_r+0xf48>
 800bb46:	b10a      	cbz	r2, 800bb4c <_svfprintf_r+0x354>
 800bb48:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bb4c:	f015 0f20 	tst.w	r5, #32
 800bb50:	f107 0304 	add.w	r3, r7, #4
 800bb54:	d007      	beq.n	800bb66 <_svfprintf_r+0x36e>
 800bb56:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	17ce      	asrs	r6, r1, #31
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	4631      	mov	r1, r6
 800bb60:	e9c2 0100 	strd	r0, r1, [r2]
 800bb64:	e00b      	b.n	800bb7e <_svfprintf_r+0x386>
 800bb66:	06e9      	lsls	r1, r5, #27
 800bb68:	d406      	bmi.n	800bb78 <_svfprintf_r+0x380>
 800bb6a:	066a      	lsls	r2, r5, #25
 800bb6c:	d504      	bpl.n	800bb78 <_svfprintf_r+0x380>
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800bb74:	8011      	strh	r1, [r2, #0]
 800bb76:	e002      	b.n	800bb7e <_svfprintf_r+0x386>
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	461f      	mov	r7, r3
 800bb80:	e670      	b.n	800b864 <_svfprintf_r+0x6c>
 800bb82:	f045 0510 	orr.w	r5, r5, #16
 800bb86:	f015 0320 	ands.w	r3, r5, #32
 800bb8a:	d009      	beq.n	800bba0 <_svfprintf_r+0x3a8>
 800bb8c:	3707      	adds	r7, #7
 800bb8e:	f027 0707 	bic.w	r7, r7, #7
 800bb92:	f107 0308 	add.w	r3, r7, #8
 800bb96:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bb9a:	9303      	str	r3, [sp, #12]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e07b      	b.n	800bc98 <_svfprintf_r+0x4a0>
 800bba0:	1d3a      	adds	r2, r7, #4
 800bba2:	f015 0110 	ands.w	r1, r5, #16
 800bba6:	9203      	str	r2, [sp, #12]
 800bba8:	d105      	bne.n	800bbb6 <_svfprintf_r+0x3be>
 800bbaa:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800bbae:	d002      	beq.n	800bbb6 <_svfprintf_r+0x3be>
 800bbb0:	883e      	ldrh	r6, [r7, #0]
 800bbb2:	2700      	movs	r7, #0
 800bbb4:	e7f2      	b.n	800bb9c <_svfprintf_r+0x3a4>
 800bbb6:	683e      	ldr	r6, [r7, #0]
 800bbb8:	2700      	movs	r7, #0
 800bbba:	e06d      	b.n	800bc98 <_svfprintf_r+0x4a0>
 800bbbc:	1d3b      	adds	r3, r7, #4
 800bbbe:	9303      	str	r3, [sp, #12]
 800bbc0:	2330      	movs	r3, #48	; 0x30
 800bbc2:	2278      	movs	r2, #120	; 0x78
 800bbc4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800bbc8:	4b81      	ldr	r3, [pc, #516]	; (800bdd0 <_svfprintf_r+0x5d8>)
 800bbca:	683e      	ldr	r6, [r7, #0]
 800bbcc:	9311      	str	r3, [sp, #68]	; 0x44
 800bbce:	2700      	movs	r7, #0
 800bbd0:	f045 0502 	orr.w	r5, r5, #2
 800bbd4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800bbd8:	2302      	movs	r3, #2
 800bbda:	9202      	str	r2, [sp, #8]
 800bbdc:	e05c      	b.n	800bc98 <_svfprintf_r+0x4a0>
 800bbde:	2600      	movs	r6, #0
 800bbe0:	1d3b      	adds	r3, r7, #4
 800bbe2:	45b1      	cmp	r9, r6
 800bbe4:	9303      	str	r3, [sp, #12]
 800bbe6:	f8d7 8000 	ldr.w	r8, [r7]
 800bbea:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800bbee:	db0a      	blt.n	800bc06 <_svfprintf_r+0x40e>
 800bbf0:	464a      	mov	r2, r9
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	f7f4 fb13 	bl	8000220 <memchr>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f000 80ea 	beq.w	800bdd4 <_svfprintf_r+0x5dc>
 800bc00:	ebc8 0900 	rsb	r9, r8, r0
 800bc04:	e0e7      	b.n	800bdd6 <_svfprintf_r+0x5de>
 800bc06:	4640      	mov	r0, r8
 800bc08:	f7f4 fb02 	bl	8000210 <strlen>
 800bc0c:	4681      	mov	r9, r0
 800bc0e:	e0e2      	b.n	800bdd6 <_svfprintf_r+0x5de>
 800bc10:	f045 0510 	orr.w	r5, r5, #16
 800bc14:	06ae      	lsls	r6, r5, #26
 800bc16:	d508      	bpl.n	800bc2a <_svfprintf_r+0x432>
 800bc18:	3707      	adds	r7, #7
 800bc1a:	f027 0707 	bic.w	r7, r7, #7
 800bc1e:	f107 0308 	add.w	r3, r7, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bc28:	e00a      	b.n	800bc40 <_svfprintf_r+0x448>
 800bc2a:	1d3b      	adds	r3, r7, #4
 800bc2c:	f015 0f10 	tst.w	r5, #16
 800bc30:	9303      	str	r3, [sp, #12]
 800bc32:	d103      	bne.n	800bc3c <_svfprintf_r+0x444>
 800bc34:	0668      	lsls	r0, r5, #25
 800bc36:	d501      	bpl.n	800bc3c <_svfprintf_r+0x444>
 800bc38:	883e      	ldrh	r6, [r7, #0]
 800bc3a:	e000      	b.n	800bc3e <_svfprintf_r+0x446>
 800bc3c:	683e      	ldr	r6, [r7, #0]
 800bc3e:	2700      	movs	r7, #0
 800bc40:	2301      	movs	r3, #1
 800bc42:	e029      	b.n	800bc98 <_svfprintf_r+0x4a0>
 800bc44:	b10a      	cbz	r2, 800bc4a <_svfprintf_r+0x452>
 800bc46:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bc4a:	4b61      	ldr	r3, [pc, #388]	; (800bdd0 <_svfprintf_r+0x5d8>)
 800bc4c:	9311      	str	r3, [sp, #68]	; 0x44
 800bc4e:	06a9      	lsls	r1, r5, #26
 800bc50:	d508      	bpl.n	800bc64 <_svfprintf_r+0x46c>
 800bc52:	3707      	adds	r7, #7
 800bc54:	f027 0707 	bic.w	r7, r7, #7
 800bc58:	f107 0308 	add.w	r3, r7, #8
 800bc5c:	9303      	str	r3, [sp, #12]
 800bc5e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bc62:	e00a      	b.n	800bc7a <_svfprintf_r+0x482>
 800bc64:	1d3b      	adds	r3, r7, #4
 800bc66:	f015 0f10 	tst.w	r5, #16
 800bc6a:	9303      	str	r3, [sp, #12]
 800bc6c:	d103      	bne.n	800bc76 <_svfprintf_r+0x47e>
 800bc6e:	066a      	lsls	r2, r5, #25
 800bc70:	d501      	bpl.n	800bc76 <_svfprintf_r+0x47e>
 800bc72:	883e      	ldrh	r6, [r7, #0]
 800bc74:	e000      	b.n	800bc78 <_svfprintf_r+0x480>
 800bc76:	683e      	ldr	r6, [r7, #0]
 800bc78:	2700      	movs	r7, #0
 800bc7a:	07eb      	lsls	r3, r5, #31
 800bc7c:	d50b      	bpl.n	800bc96 <_svfprintf_r+0x49e>
 800bc7e:	ea56 0307 	orrs.w	r3, r6, r7
 800bc82:	d008      	beq.n	800bc96 <_svfprintf_r+0x49e>
 800bc84:	2330      	movs	r3, #48	; 0x30
 800bc86:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800bc8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bc8e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800bc92:	f045 0502 	orr.w	r5, r5, #2
 800bc96:	2302      	movs	r3, #2
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800bc9e:	e000      	b.n	800bca2 <_svfprintf_r+0x4aa>
 800bca0:	2301      	movs	r3, #1
 800bca2:	f1b9 0f00 	cmp.w	r9, #0
 800bca6:	f2c0 855c 	blt.w	800c762 <_svfprintf_r+0xf6a>
 800bcaa:	ea56 0207 	orrs.w	r2, r6, r7
 800bcae:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800bcb2:	d103      	bne.n	800bcbc <_svfprintf_r+0x4c4>
 800bcb4:	f1b9 0f00 	cmp.w	r9, #0
 800bcb8:	d05f      	beq.n	800bd7a <_svfprintf_r+0x582>
 800bcba:	e006      	b.n	800bcca <_svfprintf_r+0x4d2>
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d025      	beq.n	800bd0e <_svfprintf_r+0x516>
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d046      	beq.n	800bd54 <_svfprintf_r+0x55c>
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	e007      	b.n	800bcda <_svfprintf_r+0x4e2>
 800bcca:	460d      	mov	r5, r1
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d022      	beq.n	800bd16 <_svfprintf_r+0x51e>
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d03d      	beq.n	800bd50 <_svfprintf_r+0x558>
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	2600      	movs	r6, #0
 800bcd8:	2700      	movs	r7, #0
 800bcda:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bcde:	08f2      	lsrs	r2, r6, #3
 800bce0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800bce4:	08f8      	lsrs	r0, r7, #3
 800bce6:	f006 0307 	and.w	r3, r6, #7
 800bcea:	4607      	mov	r7, r0
 800bcec:	4616      	mov	r6, r2
 800bcee:	3330      	adds	r3, #48	; 0x30
 800bcf0:	ea56 0207 	orrs.w	r2, r6, r7
 800bcf4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bcf8:	d1f1      	bne.n	800bcde <_svfprintf_r+0x4e6>
 800bcfa:	07e8      	lsls	r0, r5, #31
 800bcfc:	d548      	bpl.n	800bd90 <_svfprintf_r+0x598>
 800bcfe:	2b30      	cmp	r3, #48	; 0x30
 800bd00:	d046      	beq.n	800bd90 <_svfprintf_r+0x598>
 800bd02:	2330      	movs	r3, #48	; 0x30
 800bd04:	f808 3c01 	strb.w	r3, [r8, #-1]
 800bd08:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd0c:	e040      	b.n	800bd90 <_svfprintf_r+0x598>
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	bf08      	it	eq
 800bd12:	2e0a      	cmpeq	r6, #10
 800bd14:	d205      	bcs.n	800bd22 <_svfprintf_r+0x52a>
 800bd16:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800bd1a:	3630      	adds	r6, #48	; 0x30
 800bd1c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800bd20:	e029      	b.n	800bd76 <_svfprintf_r+0x57e>
 800bd22:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	220a      	movs	r2, #10
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f7f4 ffa7 	bl	8000c80 <__aeabi_uldivmod>
 800bd32:	3230      	adds	r2, #48	; 0x30
 800bd34:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	220a      	movs	r2, #10
 800bd40:	f7f4 ff9e 	bl	8000c80 <__aeabi_uldivmod>
 800bd44:	4606      	mov	r6, r0
 800bd46:	460f      	mov	r7, r1
 800bd48:	ea56 0307 	orrs.w	r3, r6, r7
 800bd4c:	d1eb      	bne.n	800bd26 <_svfprintf_r+0x52e>
 800bd4e:	e012      	b.n	800bd76 <_svfprintf_r+0x57e>
 800bd50:	2600      	movs	r6, #0
 800bd52:	2700      	movs	r7, #0
 800bd54:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bd58:	f006 030f 	and.w	r3, r6, #15
 800bd5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd5e:	5cd3      	ldrb	r3, [r2, r3]
 800bd60:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bd64:	0933      	lsrs	r3, r6, #4
 800bd66:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800bd6a:	093a      	lsrs	r2, r7, #4
 800bd6c:	461e      	mov	r6, r3
 800bd6e:	4617      	mov	r7, r2
 800bd70:	ea56 0307 	orrs.w	r3, r6, r7
 800bd74:	d1f0      	bne.n	800bd58 <_svfprintf_r+0x560>
 800bd76:	4629      	mov	r1, r5
 800bd78:	e00a      	b.n	800bd90 <_svfprintf_r+0x598>
 800bd7a:	b93b      	cbnz	r3, 800bd8c <_svfprintf_r+0x594>
 800bd7c:	07ea      	lsls	r2, r5, #31
 800bd7e:	d505      	bpl.n	800bd8c <_svfprintf_r+0x594>
 800bd80:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800bd84:	2330      	movs	r3, #48	; 0x30
 800bd86:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800bd8a:	e001      	b.n	800bd90 <_svfprintf_r+0x598>
 800bd8c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bd90:	464e      	mov	r6, r9
 800bd92:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800bd96:	ebc8 0909 	rsb	r9, r8, r9
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	2700      	movs	r7, #0
 800bd9e:	e01b      	b.n	800bdd8 <_svfprintf_r+0x5e0>
 800bda0:	b10a      	cbz	r2, 800bda6 <_svfprintf_r+0x5ae>
 800bda2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bda6:	9b02      	ldr	r3, [sp, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 83a0 	beq.w	800c4ee <_svfprintf_r+0xcf6>
 800bdae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bdb2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800bdb6:	2600      	movs	r6, #0
 800bdb8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800bdbc:	9703      	str	r7, [sp, #12]
 800bdbe:	f04f 0901 	mov.w	r9, #1
 800bdc2:	4637      	mov	r7, r6
 800bdc4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800bdc8:	e006      	b.n	800bdd8 <_svfprintf_r+0x5e0>
 800bdca:	bf00      	nop
 800bdcc:	7fefffff 	.word	0x7fefffff
 800bdd0:	08011a1b 	.word	0x08011a1b
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	4637      	mov	r7, r6
 800bdd8:	454e      	cmp	r6, r9
 800bdda:	4633      	mov	r3, r6
 800bddc:	bfb8      	it	lt
 800bdde:	464b      	movlt	r3, r9
 800bde0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bde2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800bde6:	b113      	cbz	r3, 800bdee <_svfprintf_r+0x5f6>
 800bde8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdea:	3301      	adds	r3, #1
 800bdec:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdee:	f015 0302 	ands.w	r3, r5, #2
 800bdf2:	9314      	str	r3, [sp, #80]	; 0x50
 800bdf4:	bf1e      	ittt	ne
 800bdf6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800bdf8:	3302      	addne	r3, #2
 800bdfa:	930b      	strne	r3, [sp, #44]	; 0x2c
 800bdfc:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800be00:	9315      	str	r3, [sp, #84]	; 0x54
 800be02:	d139      	bne.n	800be78 <_svfprintf_r+0x680>
 800be04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	930c      	str	r3, [sp, #48]	; 0x30
 800be0e:	dd33      	ble.n	800be78 <_svfprintf_r+0x680>
 800be10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be12:	2b10      	cmp	r3, #16
 800be14:	4ba6      	ldr	r3, [pc, #664]	; (800c0b0 <_svfprintf_r+0x8b8>)
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	dd18      	ble.n	800be4c <_svfprintf_r+0x654>
 800be1a:	2310      	movs	r3, #16
 800be1c:	6063      	str	r3, [r4, #4]
 800be1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be20:	3310      	adds	r3, #16
 800be22:	9321      	str	r3, [sp, #132]	; 0x84
 800be24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be26:	3301      	adds	r3, #1
 800be28:	2b07      	cmp	r3, #7
 800be2a:	9320      	str	r3, [sp, #128]	; 0x80
 800be2c:	dc01      	bgt.n	800be32 <_svfprintf_r+0x63a>
 800be2e:	3408      	adds	r4, #8
 800be30:	e008      	b.n	800be44 <_svfprintf_r+0x64c>
 800be32:	aa1f      	add	r2, sp, #124	; 0x7c
 800be34:	4659      	mov	r1, fp
 800be36:	4650      	mov	r0, sl
 800be38:	f002 fea9 	bl	800eb8e <__ssprint_r>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	f040 835d 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800be42:	ac2c      	add	r4, sp, #176	; 0xb0
 800be44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be46:	3b10      	subs	r3, #16
 800be48:	930c      	str	r3, [sp, #48]	; 0x30
 800be4a:	e7e1      	b.n	800be10 <_svfprintf_r+0x618>
 800be4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be4e:	6063      	str	r3, [r4, #4]
 800be50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be54:	4413      	add	r3, r2
 800be56:	9321      	str	r3, [sp, #132]	; 0x84
 800be58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be5a:	3301      	adds	r3, #1
 800be5c:	2b07      	cmp	r3, #7
 800be5e:	9320      	str	r3, [sp, #128]	; 0x80
 800be60:	dc01      	bgt.n	800be66 <_svfprintf_r+0x66e>
 800be62:	3408      	adds	r4, #8
 800be64:	e008      	b.n	800be78 <_svfprintf_r+0x680>
 800be66:	aa1f      	add	r2, sp, #124	; 0x7c
 800be68:	4659      	mov	r1, fp
 800be6a:	4650      	mov	r0, sl
 800be6c:	f002 fe8f 	bl	800eb8e <__ssprint_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	f040 8343 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800be76:	ac2c      	add	r4, sp, #176	; 0xb0
 800be78:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800be7c:	b1bb      	cbz	r3, 800beae <_svfprintf_r+0x6b6>
 800be7e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	2301      	movs	r3, #1
 800be86:	6063      	str	r3, [r4, #4]
 800be88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be8a:	3301      	adds	r3, #1
 800be8c:	9321      	str	r3, [sp, #132]	; 0x84
 800be8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be90:	3301      	adds	r3, #1
 800be92:	2b07      	cmp	r3, #7
 800be94:	9320      	str	r3, [sp, #128]	; 0x80
 800be96:	dc01      	bgt.n	800be9c <_svfprintf_r+0x6a4>
 800be98:	3408      	adds	r4, #8
 800be9a:	e008      	b.n	800beae <_svfprintf_r+0x6b6>
 800be9c:	aa1f      	add	r2, sp, #124	; 0x7c
 800be9e:	4659      	mov	r1, fp
 800bea0:	4650      	mov	r0, sl
 800bea2:	f002 fe74 	bl	800eb8e <__ssprint_r>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f040 8328 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800beac:	ac2c      	add	r4, sp, #176	; 0xb0
 800beae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800beb0:	b1b3      	cbz	r3, 800bee0 <_svfprintf_r+0x6e8>
 800beb2:	ab18      	add	r3, sp, #96	; 0x60
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	2302      	movs	r3, #2
 800beb8:	6063      	str	r3, [r4, #4]
 800beba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bebc:	3302      	adds	r3, #2
 800bebe:	9321      	str	r3, [sp, #132]	; 0x84
 800bec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bec2:	3301      	adds	r3, #1
 800bec4:	2b07      	cmp	r3, #7
 800bec6:	9320      	str	r3, [sp, #128]	; 0x80
 800bec8:	dc01      	bgt.n	800bece <_svfprintf_r+0x6d6>
 800beca:	3408      	adds	r4, #8
 800becc:	e008      	b.n	800bee0 <_svfprintf_r+0x6e8>
 800bece:	aa1f      	add	r2, sp, #124	; 0x7c
 800bed0:	4659      	mov	r1, fp
 800bed2:	4650      	mov	r0, sl
 800bed4:	f002 fe5b 	bl	800eb8e <__ssprint_r>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f040 830f 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800bede:	ac2c      	add	r4, sp, #176	; 0xb0
 800bee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee2:	2b80      	cmp	r3, #128	; 0x80
 800bee4:	d135      	bne.n	800bf52 <_svfprintf_r+0x75a>
 800bee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800beea:	1a9b      	subs	r3, r3, r2
 800beec:	2b00      	cmp	r3, #0
 800beee:	dd30      	ble.n	800bf52 <_svfprintf_r+0x75a>
 800bef0:	4a70      	ldr	r2, [pc, #448]	; (800c0b4 <_svfprintf_r+0x8bc>)
 800bef2:	6022      	str	r2, [r4, #0]
 800bef4:	2b10      	cmp	r3, #16
 800bef6:	dd18      	ble.n	800bf2a <_svfprintf_r+0x732>
 800bef8:	2210      	movs	r2, #16
 800befa:	6062      	str	r2, [r4, #4]
 800befc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800befe:	3210      	adds	r2, #16
 800bf00:	9221      	str	r2, [sp, #132]	; 0x84
 800bf02:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf04:	3201      	adds	r2, #1
 800bf06:	2a07      	cmp	r2, #7
 800bf08:	9220      	str	r2, [sp, #128]	; 0x80
 800bf0a:	dc01      	bgt.n	800bf10 <_svfprintf_r+0x718>
 800bf0c:	3408      	adds	r4, #8
 800bf0e:	e00a      	b.n	800bf26 <_svfprintf_r+0x72e>
 800bf10:	aa1f      	add	r2, sp, #124	; 0x7c
 800bf12:	4659      	mov	r1, fp
 800bf14:	4650      	mov	r0, sl
 800bf16:	930c      	str	r3, [sp, #48]	; 0x30
 800bf18:	f002 fe39 	bl	800eb8e <__ssprint_r>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f040 82ed 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800bf22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf24:	ac2c      	add	r4, sp, #176	; 0xb0
 800bf26:	3b10      	subs	r3, #16
 800bf28:	e7e2      	b.n	800bef0 <_svfprintf_r+0x6f8>
 800bf2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf2c:	6063      	str	r3, [r4, #4]
 800bf2e:	4413      	add	r3, r2
 800bf30:	9321      	str	r3, [sp, #132]	; 0x84
 800bf32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf34:	3301      	adds	r3, #1
 800bf36:	2b07      	cmp	r3, #7
 800bf38:	9320      	str	r3, [sp, #128]	; 0x80
 800bf3a:	dc01      	bgt.n	800bf40 <_svfprintf_r+0x748>
 800bf3c:	3408      	adds	r4, #8
 800bf3e:	e008      	b.n	800bf52 <_svfprintf_r+0x75a>
 800bf40:	aa1f      	add	r2, sp, #124	; 0x7c
 800bf42:	4659      	mov	r1, fp
 800bf44:	4650      	mov	r0, sl
 800bf46:	f002 fe22 	bl	800eb8e <__ssprint_r>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f040 82d6 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800bf50:	ac2c      	add	r4, sp, #176	; 0xb0
 800bf52:	ebc9 0606 	rsb	r6, r9, r6
 800bf56:	2e00      	cmp	r6, #0
 800bf58:	dd2e      	ble.n	800bfb8 <_svfprintf_r+0x7c0>
 800bf5a:	4b56      	ldr	r3, [pc, #344]	; (800c0b4 <_svfprintf_r+0x8bc>)
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	2e10      	cmp	r6, #16
 800bf60:	dd16      	ble.n	800bf90 <_svfprintf_r+0x798>
 800bf62:	2310      	movs	r3, #16
 800bf64:	6063      	str	r3, [r4, #4]
 800bf66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf68:	3310      	adds	r3, #16
 800bf6a:	9321      	str	r3, [sp, #132]	; 0x84
 800bf6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf6e:	3301      	adds	r3, #1
 800bf70:	2b07      	cmp	r3, #7
 800bf72:	9320      	str	r3, [sp, #128]	; 0x80
 800bf74:	dc01      	bgt.n	800bf7a <_svfprintf_r+0x782>
 800bf76:	3408      	adds	r4, #8
 800bf78:	e008      	b.n	800bf8c <_svfprintf_r+0x794>
 800bf7a:	aa1f      	add	r2, sp, #124	; 0x7c
 800bf7c:	4659      	mov	r1, fp
 800bf7e:	4650      	mov	r0, sl
 800bf80:	f002 fe05 	bl	800eb8e <__ssprint_r>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	f040 82b9 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800bf8a:	ac2c      	add	r4, sp, #176	; 0xb0
 800bf8c:	3e10      	subs	r6, #16
 800bf8e:	e7e4      	b.n	800bf5a <_svfprintf_r+0x762>
 800bf90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf92:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bf94:	6066      	str	r6, [r4, #4]
 800bf96:	3301      	adds	r3, #1
 800bf98:	4406      	add	r6, r0
 800bf9a:	2b07      	cmp	r3, #7
 800bf9c:	9621      	str	r6, [sp, #132]	; 0x84
 800bf9e:	9320      	str	r3, [sp, #128]	; 0x80
 800bfa0:	dc01      	bgt.n	800bfa6 <_svfprintf_r+0x7ae>
 800bfa2:	3408      	adds	r4, #8
 800bfa4:	e008      	b.n	800bfb8 <_svfprintf_r+0x7c0>
 800bfa6:	aa1f      	add	r2, sp, #124	; 0x7c
 800bfa8:	4659      	mov	r1, fp
 800bfaa:	4650      	mov	r0, sl
 800bfac:	f002 fdef 	bl	800eb8e <__ssprint_r>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	f040 82a3 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800bfb6:	ac2c      	add	r4, sp, #176	; 0xb0
 800bfb8:	05eb      	lsls	r3, r5, #23
 800bfba:	d414      	bmi.n	800bfe6 <_svfprintf_r+0x7ee>
 800bfbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfbe:	e884 0300 	stmia.w	r4, {r8, r9}
 800bfc2:	444b      	add	r3, r9
 800bfc4:	9321      	str	r3, [sp, #132]	; 0x84
 800bfc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bfc8:	3301      	adds	r3, #1
 800bfca:	2b07      	cmp	r3, #7
 800bfcc:	9320      	str	r3, [sp, #128]	; 0x80
 800bfce:	f340 8244 	ble.w	800c45a <_svfprintf_r+0xc62>
 800bfd2:	aa1f      	add	r2, sp, #124	; 0x7c
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	f002 fdd9 	bl	800eb8e <__ssprint_r>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f040 828d 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800bfe2:	ac2c      	add	r4, sp, #176	; 0xb0
 800bfe4:	e23a      	b.n	800c45c <_svfprintf_r+0xc64>
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	2b65      	cmp	r3, #101	; 0x65
 800bfea:	f340 81ad 	ble.w	800c348 <_svfprintf_r+0xb50>
 800bfee:	2200      	movs	r2, #0
 800bff0:	2300      	movs	r3, #0
 800bff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bff6:	f7f4 fd83 	bl	8000b00 <__aeabi_dcmpeq>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d05e      	beq.n	800c0bc <_svfprintf_r+0x8c4>
 800bffe:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <_svfprintf_r+0x8c0>)
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	2301      	movs	r3, #1
 800c004:	6063      	str	r3, [r4, #4]
 800c006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c008:	3301      	adds	r3, #1
 800c00a:	9321      	str	r3, [sp, #132]	; 0x84
 800c00c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c00e:	3301      	adds	r3, #1
 800c010:	2b07      	cmp	r3, #7
 800c012:	9320      	str	r3, [sp, #128]	; 0x80
 800c014:	dc01      	bgt.n	800c01a <_svfprintf_r+0x822>
 800c016:	3408      	adds	r4, #8
 800c018:	e008      	b.n	800c02c <_svfprintf_r+0x834>
 800c01a:	aa1f      	add	r2, sp, #124	; 0x7c
 800c01c:	4659      	mov	r1, fp
 800c01e:	4650      	mov	r0, sl
 800c020:	f002 fdb5 	bl	800eb8e <__ssprint_r>
 800c024:	2800      	cmp	r0, #0
 800c026:	f040 8269 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c02a:	ac2c      	add	r4, sp, #176	; 0xb0
 800c02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c02e:	9a04      	ldr	r2, [sp, #16]
 800c030:	4293      	cmp	r3, r2
 800c032:	db02      	blt.n	800c03a <_svfprintf_r+0x842>
 800c034:	07ee      	lsls	r6, r5, #31
 800c036:	f140 8211 	bpl.w	800c45c <_svfprintf_r+0xc64>
 800c03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	9b08      	ldr	r3, [sp, #32]
 800c040:	6063      	str	r3, [r4, #4]
 800c042:	9a08      	ldr	r2, [sp, #32]
 800c044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c046:	4413      	add	r3, r2
 800c048:	9321      	str	r3, [sp, #132]	; 0x84
 800c04a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c04c:	3301      	adds	r3, #1
 800c04e:	2b07      	cmp	r3, #7
 800c050:	9320      	str	r3, [sp, #128]	; 0x80
 800c052:	dc01      	bgt.n	800c058 <_svfprintf_r+0x860>
 800c054:	3408      	adds	r4, #8
 800c056:	e008      	b.n	800c06a <_svfprintf_r+0x872>
 800c058:	aa1f      	add	r2, sp, #124	; 0x7c
 800c05a:	4659      	mov	r1, fp
 800c05c:	4650      	mov	r0, sl
 800c05e:	f002 fd96 	bl	800eb8e <__ssprint_r>
 800c062:	2800      	cmp	r0, #0
 800c064:	f040 824a 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c068:	ac2c      	add	r4, sp, #176	; 0xb0
 800c06a:	9b04      	ldr	r3, [sp, #16]
 800c06c:	1e5e      	subs	r6, r3, #1
 800c06e:	2e00      	cmp	r6, #0
 800c070:	f340 81f4 	ble.w	800c45c <_svfprintf_r+0xc64>
 800c074:	4f0f      	ldr	r7, [pc, #60]	; (800c0b4 <_svfprintf_r+0x8bc>)
 800c076:	f04f 0810 	mov.w	r8, #16
 800c07a:	2e10      	cmp	r6, #16
 800c07c:	f340 8159 	ble.w	800c332 <_svfprintf_r+0xb3a>
 800c080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c082:	3310      	adds	r3, #16
 800c084:	9321      	str	r3, [sp, #132]	; 0x84
 800c086:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c088:	3301      	adds	r3, #1
 800c08a:	2b07      	cmp	r3, #7
 800c08c:	e884 0180 	stmia.w	r4, {r7, r8}
 800c090:	9320      	str	r3, [sp, #128]	; 0x80
 800c092:	dc01      	bgt.n	800c098 <_svfprintf_r+0x8a0>
 800c094:	3408      	adds	r4, #8
 800c096:	e008      	b.n	800c0aa <_svfprintf_r+0x8b2>
 800c098:	aa1f      	add	r2, sp, #124	; 0x7c
 800c09a:	4659      	mov	r1, fp
 800c09c:	4650      	mov	r0, sl
 800c09e:	f002 fd76 	bl	800eb8e <__ssprint_r>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	f040 822a 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c0a8:	ac2c      	add	r4, sp, #176	; 0xb0
 800c0aa:	3e10      	subs	r6, #16
 800c0ac:	e7e5      	b.n	800c07a <_svfprintf_r+0x882>
 800c0ae:	bf00      	nop
 800c0b0:	08011a2e 	.word	0x08011a2e
 800c0b4:	080119ea 	.word	0x080119ea
 800c0b8:	08011a2c 	.word	0x08011a2c
 800c0bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dc7c      	bgt.n	800c1bc <_svfprintf_r+0x9c4>
 800c0c2:	4b9f      	ldr	r3, [pc, #636]	; (800c340 <_svfprintf_r+0xb48>)
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	6063      	str	r3, [r4, #4]
 800c0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	9321      	str	r3, [sp, #132]	; 0x84
 800c0d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	2b07      	cmp	r3, #7
 800c0d6:	9320      	str	r3, [sp, #128]	; 0x80
 800c0d8:	dc01      	bgt.n	800c0de <_svfprintf_r+0x8e6>
 800c0da:	3408      	adds	r4, #8
 800c0dc:	e008      	b.n	800c0f0 <_svfprintf_r+0x8f8>
 800c0de:	aa1f      	add	r2, sp, #124	; 0x7c
 800c0e0:	4659      	mov	r1, fp
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	f002 fd53 	bl	800eb8e <__ssprint_r>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	f040 8207 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c0ee:	ac2c      	add	r4, sp, #176	; 0xb0
 800c0f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0f2:	b923      	cbnz	r3, 800c0fe <_svfprintf_r+0x906>
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	b913      	cbnz	r3, 800c0fe <_svfprintf_r+0x906>
 800c0f8:	07e8      	lsls	r0, r5, #31
 800c0fa:	f140 81af 	bpl.w	800c45c <_svfprintf_r+0xc64>
 800c0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	6063      	str	r3, [r4, #4]
 800c106:	9a08      	ldr	r2, [sp, #32]
 800c108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c10a:	4413      	add	r3, r2
 800c10c:	9321      	str	r3, [sp, #132]	; 0x84
 800c10e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c110:	3301      	adds	r3, #1
 800c112:	2b07      	cmp	r3, #7
 800c114:	9320      	str	r3, [sp, #128]	; 0x80
 800c116:	dc02      	bgt.n	800c11e <_svfprintf_r+0x926>
 800c118:	f104 0308 	add.w	r3, r4, #8
 800c11c:	e008      	b.n	800c130 <_svfprintf_r+0x938>
 800c11e:	aa1f      	add	r2, sp, #124	; 0x7c
 800c120:	4659      	mov	r1, fp
 800c122:	4650      	mov	r0, sl
 800c124:	f002 fd33 	bl	800eb8e <__ssprint_r>
 800c128:	2800      	cmp	r0, #0
 800c12a:	f040 81e7 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c12e:	ab2c      	add	r3, sp, #176	; 0xb0
 800c130:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c132:	4276      	negs	r6, r6
 800c134:	2e00      	cmp	r6, #0
 800c136:	dd30      	ble.n	800c19a <_svfprintf_r+0x9a2>
 800c138:	4f82      	ldr	r7, [pc, #520]	; (800c344 <_svfprintf_r+0xb4c>)
 800c13a:	2410      	movs	r4, #16
 800c13c:	2e10      	cmp	r6, #16
 800c13e:	dd16      	ble.n	800c16e <_svfprintf_r+0x976>
 800c140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c142:	601f      	str	r7, [r3, #0]
 800c144:	3210      	adds	r2, #16
 800c146:	9221      	str	r2, [sp, #132]	; 0x84
 800c148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c14a:	605c      	str	r4, [r3, #4]
 800c14c:	3201      	adds	r2, #1
 800c14e:	2a07      	cmp	r2, #7
 800c150:	9220      	str	r2, [sp, #128]	; 0x80
 800c152:	dc01      	bgt.n	800c158 <_svfprintf_r+0x960>
 800c154:	3308      	adds	r3, #8
 800c156:	e008      	b.n	800c16a <_svfprintf_r+0x972>
 800c158:	aa1f      	add	r2, sp, #124	; 0x7c
 800c15a:	4659      	mov	r1, fp
 800c15c:	4650      	mov	r0, sl
 800c15e:	f002 fd16 	bl	800eb8e <__ssprint_r>
 800c162:	2800      	cmp	r0, #0
 800c164:	f040 81ca 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c168:	ab2c      	add	r3, sp, #176	; 0xb0
 800c16a:	3e10      	subs	r6, #16
 800c16c:	e7e6      	b.n	800c13c <_svfprintf_r+0x944>
 800c16e:	4a75      	ldr	r2, [pc, #468]	; (800c344 <_svfprintf_r+0xb4c>)
 800c170:	e883 0044 	stmia.w	r3, {r2, r6}
 800c174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c176:	4416      	add	r6, r2
 800c178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c17a:	9621      	str	r6, [sp, #132]	; 0x84
 800c17c:	3201      	adds	r2, #1
 800c17e:	2a07      	cmp	r2, #7
 800c180:	9220      	str	r2, [sp, #128]	; 0x80
 800c182:	dc01      	bgt.n	800c188 <_svfprintf_r+0x990>
 800c184:	3308      	adds	r3, #8
 800c186:	e008      	b.n	800c19a <_svfprintf_r+0x9a2>
 800c188:	aa1f      	add	r2, sp, #124	; 0x7c
 800c18a:	4659      	mov	r1, fp
 800c18c:	4650      	mov	r0, sl
 800c18e:	f002 fcfe 	bl	800eb8e <__ssprint_r>
 800c192:	2800      	cmp	r0, #0
 800c194:	f040 81b2 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c198:	ab2c      	add	r3, sp, #176	; 0xb0
 800c19a:	9a04      	ldr	r2, [sp, #16]
 800c19c:	605a      	str	r2, [r3, #4]
 800c19e:	9904      	ldr	r1, [sp, #16]
 800c1a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1a2:	f8c3 8000 	str.w	r8, [r3]
 800c1a6:	440a      	add	r2, r1
 800c1a8:	9221      	str	r2, [sp, #132]	; 0x84
 800c1aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1ac:	3201      	adds	r2, #1
 800c1ae:	2a07      	cmp	r2, #7
 800c1b0:	9220      	str	r2, [sp, #128]	; 0x80
 800c1b2:	f73f af0e 	bgt.w	800bfd2 <_svfprintf_r+0x7da>
 800c1b6:	f103 0408 	add.w	r4, r3, #8
 800c1ba:	e14f      	b.n	800c45c <_svfprintf_r+0xc64>
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	42bb      	cmp	r3, r7
 800c1c0:	bfa8      	it	ge
 800c1c2:	463b      	movge	r3, r7
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	461e      	mov	r6, r3
 800c1c8:	dd15      	ble.n	800c1f6 <_svfprintf_r+0x9fe>
 800c1ca:	6063      	str	r3, [r4, #4]
 800c1cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1ce:	f8c4 8000 	str.w	r8, [r4]
 800c1d2:	4433      	add	r3, r6
 800c1d4:	9321      	str	r3, [sp, #132]	; 0x84
 800c1d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c1d8:	3301      	adds	r3, #1
 800c1da:	2b07      	cmp	r3, #7
 800c1dc:	9320      	str	r3, [sp, #128]	; 0x80
 800c1de:	dc01      	bgt.n	800c1e4 <_svfprintf_r+0x9ec>
 800c1e0:	3408      	adds	r4, #8
 800c1e2:	e008      	b.n	800c1f6 <_svfprintf_r+0x9fe>
 800c1e4:	aa1f      	add	r2, sp, #124	; 0x7c
 800c1e6:	4659      	mov	r1, fp
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	f002 fcd0 	bl	800eb8e <__ssprint_r>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f040 8184 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c1f4:	ac2c      	add	r4, sp, #176	; 0xb0
 800c1f6:	2e00      	cmp	r6, #0
 800c1f8:	bfac      	ite	ge
 800c1fa:	1bbe      	subge	r6, r7, r6
 800c1fc:	463e      	movlt	r6, r7
 800c1fe:	2e00      	cmp	r6, #0
 800c200:	dd30      	ble.n	800c264 <_svfprintf_r+0xa6c>
 800c202:	f04f 0910 	mov.w	r9, #16
 800c206:	4b4f      	ldr	r3, [pc, #316]	; (800c344 <_svfprintf_r+0xb4c>)
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	2e10      	cmp	r6, #16
 800c20c:	dd16      	ble.n	800c23c <_svfprintf_r+0xa44>
 800c20e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c210:	f8c4 9004 	str.w	r9, [r4, #4]
 800c214:	3310      	adds	r3, #16
 800c216:	9321      	str	r3, [sp, #132]	; 0x84
 800c218:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c21a:	3301      	adds	r3, #1
 800c21c:	2b07      	cmp	r3, #7
 800c21e:	9320      	str	r3, [sp, #128]	; 0x80
 800c220:	dc01      	bgt.n	800c226 <_svfprintf_r+0xa2e>
 800c222:	3408      	adds	r4, #8
 800c224:	e008      	b.n	800c238 <_svfprintf_r+0xa40>
 800c226:	aa1f      	add	r2, sp, #124	; 0x7c
 800c228:	4659      	mov	r1, fp
 800c22a:	4650      	mov	r0, sl
 800c22c:	f002 fcaf 	bl	800eb8e <__ssprint_r>
 800c230:	2800      	cmp	r0, #0
 800c232:	f040 8163 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c236:	ac2c      	add	r4, sp, #176	; 0xb0
 800c238:	3e10      	subs	r6, #16
 800c23a:	e7e4      	b.n	800c206 <_svfprintf_r+0xa0e>
 800c23c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c23e:	6066      	str	r6, [r4, #4]
 800c240:	441e      	add	r6, r3
 800c242:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c244:	9621      	str	r6, [sp, #132]	; 0x84
 800c246:	3301      	adds	r3, #1
 800c248:	2b07      	cmp	r3, #7
 800c24a:	9320      	str	r3, [sp, #128]	; 0x80
 800c24c:	dc01      	bgt.n	800c252 <_svfprintf_r+0xa5a>
 800c24e:	3408      	adds	r4, #8
 800c250:	e008      	b.n	800c264 <_svfprintf_r+0xa6c>
 800c252:	aa1f      	add	r2, sp, #124	; 0x7c
 800c254:	4659      	mov	r1, fp
 800c256:	4650      	mov	r0, sl
 800c258:	f002 fc99 	bl	800eb8e <__ssprint_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	f040 814d 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c262:	ac2c      	add	r4, sp, #176	; 0xb0
 800c264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c266:	9a04      	ldr	r2, [sp, #16]
 800c268:	4293      	cmp	r3, r2
 800c26a:	4447      	add	r7, r8
 800c26c:	db01      	blt.n	800c272 <_svfprintf_r+0xa7a>
 800c26e:	07e9      	lsls	r1, r5, #31
 800c270:	d517      	bpl.n	800c2a2 <_svfprintf_r+0xaaa>
 800c272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	9b08      	ldr	r3, [sp, #32]
 800c278:	6063      	str	r3, [r4, #4]
 800c27a:	9a08      	ldr	r2, [sp, #32]
 800c27c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c27e:	4413      	add	r3, r2
 800c280:	9321      	str	r3, [sp, #132]	; 0x84
 800c282:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c284:	3301      	adds	r3, #1
 800c286:	2b07      	cmp	r3, #7
 800c288:	9320      	str	r3, [sp, #128]	; 0x80
 800c28a:	dc01      	bgt.n	800c290 <_svfprintf_r+0xa98>
 800c28c:	3408      	adds	r4, #8
 800c28e:	e008      	b.n	800c2a2 <_svfprintf_r+0xaaa>
 800c290:	aa1f      	add	r2, sp, #124	; 0x7c
 800c292:	4659      	mov	r1, fp
 800c294:	4650      	mov	r0, sl
 800c296:	f002 fc7a 	bl	800eb8e <__ssprint_r>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f040 812e 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c2a0:	ac2c      	add	r4, sp, #176	; 0xb0
 800c2a2:	9b04      	ldr	r3, [sp, #16]
 800c2a4:	9a04      	ldr	r2, [sp, #16]
 800c2a6:	eb08 0603 	add.w	r6, r8, r3
 800c2aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2ac:	1bf6      	subs	r6, r6, r7
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	429e      	cmp	r6, r3
 800c2b2:	bfa8      	it	ge
 800c2b4:	461e      	movge	r6, r3
 800c2b6:	2e00      	cmp	r6, #0
 800c2b8:	dd14      	ble.n	800c2e4 <_svfprintf_r+0xaec>
 800c2ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2bc:	6027      	str	r7, [r4, #0]
 800c2be:	4433      	add	r3, r6
 800c2c0:	9321      	str	r3, [sp, #132]	; 0x84
 800c2c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c2c4:	6066      	str	r6, [r4, #4]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	2b07      	cmp	r3, #7
 800c2ca:	9320      	str	r3, [sp, #128]	; 0x80
 800c2cc:	dc01      	bgt.n	800c2d2 <_svfprintf_r+0xada>
 800c2ce:	3408      	adds	r4, #8
 800c2d0:	e008      	b.n	800c2e4 <_svfprintf_r+0xaec>
 800c2d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800c2d4:	4659      	mov	r1, fp
 800c2d6:	4650      	mov	r0, sl
 800c2d8:	f002 fc59 	bl	800eb8e <__ssprint_r>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f040 810d 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c2e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800c2e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2e6:	9a04      	ldr	r2, [sp, #16]
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	eba2 0303 	sub.w	r3, r2, r3
 800c2ee:	bfac      	ite	ge
 800c2f0:	1b9e      	subge	r6, r3, r6
 800c2f2:	461e      	movlt	r6, r3
 800c2f4:	2e00      	cmp	r6, #0
 800c2f6:	f340 80b1 	ble.w	800c45c <_svfprintf_r+0xc64>
 800c2fa:	4f12      	ldr	r7, [pc, #72]	; (800c344 <_svfprintf_r+0xb4c>)
 800c2fc:	f04f 0810 	mov.w	r8, #16
 800c300:	2e10      	cmp	r6, #16
 800c302:	dd16      	ble.n	800c332 <_svfprintf_r+0xb3a>
 800c304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c306:	3310      	adds	r3, #16
 800c308:	9321      	str	r3, [sp, #132]	; 0x84
 800c30a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c30c:	3301      	adds	r3, #1
 800c30e:	2b07      	cmp	r3, #7
 800c310:	e884 0180 	stmia.w	r4, {r7, r8}
 800c314:	9320      	str	r3, [sp, #128]	; 0x80
 800c316:	dc01      	bgt.n	800c31c <_svfprintf_r+0xb24>
 800c318:	3408      	adds	r4, #8
 800c31a:	e008      	b.n	800c32e <_svfprintf_r+0xb36>
 800c31c:	aa1f      	add	r2, sp, #124	; 0x7c
 800c31e:	4659      	mov	r1, fp
 800c320:	4650      	mov	r0, sl
 800c322:	f002 fc34 	bl	800eb8e <__ssprint_r>
 800c326:	2800      	cmp	r0, #0
 800c328:	f040 80e8 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c32c:	ac2c      	add	r4, sp, #176	; 0xb0
 800c32e:	3e10      	subs	r6, #16
 800c330:	e7e6      	b.n	800c300 <_svfprintf_r+0xb08>
 800c332:	4b04      	ldr	r3, [pc, #16]	; (800c344 <_svfprintf_r+0xb4c>)
 800c334:	e884 0048 	stmia.w	r4, {r3, r6}
 800c338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c33a:	441e      	add	r6, r3
 800c33c:	9621      	str	r6, [sp, #132]	; 0x84
 800c33e:	e642      	b.n	800bfc6 <_svfprintf_r+0x7ce>
 800c340:	08011a2c 	.word	0x08011a2c
 800c344:	080119ea 	.word	0x080119ea
 800c348:	9b04      	ldr	r3, [sp, #16]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	dc01      	bgt.n	800c352 <_svfprintf_r+0xb5a>
 800c34e:	07ea      	lsls	r2, r5, #31
 800c350:	d573      	bpl.n	800c43a <_svfprintf_r+0xc42>
 800c352:	2301      	movs	r3, #1
 800c354:	6063      	str	r3, [r4, #4]
 800c356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c358:	f8c4 8000 	str.w	r8, [r4]
 800c35c:	3301      	adds	r3, #1
 800c35e:	9321      	str	r3, [sp, #132]	; 0x84
 800c360:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c362:	3301      	adds	r3, #1
 800c364:	2b07      	cmp	r3, #7
 800c366:	9320      	str	r3, [sp, #128]	; 0x80
 800c368:	dc01      	bgt.n	800c36e <_svfprintf_r+0xb76>
 800c36a:	3408      	adds	r4, #8
 800c36c:	e008      	b.n	800c380 <_svfprintf_r+0xb88>
 800c36e:	aa1f      	add	r2, sp, #124	; 0x7c
 800c370:	4659      	mov	r1, fp
 800c372:	4650      	mov	r0, sl
 800c374:	f002 fc0b 	bl	800eb8e <__ssprint_r>
 800c378:	2800      	cmp	r0, #0
 800c37a:	f040 80bf 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c37e:	ac2c      	add	r4, sp, #176	; 0xb0
 800c380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c382:	6023      	str	r3, [r4, #0]
 800c384:	9b08      	ldr	r3, [sp, #32]
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	9a08      	ldr	r2, [sp, #32]
 800c38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38c:	4413      	add	r3, r2
 800c38e:	9321      	str	r3, [sp, #132]	; 0x84
 800c390:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c392:	3301      	adds	r3, #1
 800c394:	2b07      	cmp	r3, #7
 800c396:	9320      	str	r3, [sp, #128]	; 0x80
 800c398:	dc01      	bgt.n	800c39e <_svfprintf_r+0xba6>
 800c39a:	3408      	adds	r4, #8
 800c39c:	e008      	b.n	800c3b0 <_svfprintf_r+0xbb8>
 800c39e:	aa1f      	add	r2, sp, #124	; 0x7c
 800c3a0:	4659      	mov	r1, fp
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	f002 fbf3 	bl	800eb8e <__ssprint_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	f040 80a7 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c3ae:	ac2c      	add	r4, sp, #176	; 0xb0
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3b8:	f7f4 fba2 	bl	8000b00 <__aeabi_dcmpeq>
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	1e5e      	subs	r6, r3, #1
 800c3c0:	b9b8      	cbnz	r0, 800c3f2 <_svfprintf_r+0xbfa>
 800c3c2:	f108 0301 	add.w	r3, r8, #1
 800c3c6:	e884 0048 	stmia.w	r4, {r3, r6}
 800c3ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3cc:	9a04      	ldr	r2, [sp, #16]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	4413      	add	r3, r2
 800c3d2:	9321      	str	r3, [sp, #132]	; 0x84
 800c3d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	2b07      	cmp	r3, #7
 800c3da:	9320      	str	r3, [sp, #128]	; 0x80
 800c3dc:	dd34      	ble.n	800c448 <_svfprintf_r+0xc50>
 800c3de:	aa1f      	add	r2, sp, #124	; 0x7c
 800c3e0:	4659      	mov	r1, fp
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	f002 fbd3 	bl	800eb8e <__ssprint_r>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f040 8087 	bne.w	800c4fc <_svfprintf_r+0xd04>
 800c3ee:	ac2c      	add	r4, sp, #176	; 0xb0
 800c3f0:	e02b      	b.n	800c44a <_svfprintf_r+0xc52>
 800c3f2:	2e00      	cmp	r6, #0
 800c3f4:	dd29      	ble.n	800c44a <_svfprintf_r+0xc52>
 800c3f6:	4fa7      	ldr	r7, [pc, #668]	; (800c694 <_svfprintf_r+0xe9c>)
 800c3f8:	f04f 0810 	mov.w	r8, #16
 800c3fc:	2e10      	cmp	r6, #16
 800c3fe:	dd15      	ble.n	800c42c <_svfprintf_r+0xc34>
 800c400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c402:	3310      	adds	r3, #16
 800c404:	9321      	str	r3, [sp, #132]	; 0x84
 800c406:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c408:	3301      	adds	r3, #1
 800c40a:	2b07      	cmp	r3, #7
 800c40c:	e884 0180 	stmia.w	r4, {r7, r8}
 800c410:	9320      	str	r3, [sp, #128]	; 0x80
 800c412:	dc01      	bgt.n	800c418 <_svfprintf_r+0xc20>
 800c414:	3408      	adds	r4, #8
 800c416:	e007      	b.n	800c428 <_svfprintf_r+0xc30>
 800c418:	aa1f      	add	r2, sp, #124	; 0x7c
 800c41a:	4659      	mov	r1, fp
 800c41c:	4650      	mov	r0, sl
 800c41e:	f002 fbb6 	bl	800eb8e <__ssprint_r>
 800c422:	2800      	cmp	r0, #0
 800c424:	d16a      	bne.n	800c4fc <_svfprintf_r+0xd04>
 800c426:	ac2c      	add	r4, sp, #176	; 0xb0
 800c428:	3e10      	subs	r6, #16
 800c42a:	e7e7      	b.n	800c3fc <_svfprintf_r+0xc04>
 800c42c:	4b99      	ldr	r3, [pc, #612]	; (800c694 <_svfprintf_r+0xe9c>)
 800c42e:	e884 0048 	stmia.w	r4, {r3, r6}
 800c432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c434:	441e      	add	r6, r3
 800c436:	9621      	str	r6, [sp, #132]	; 0x84
 800c438:	e7cc      	b.n	800c3d4 <_svfprintf_r+0xbdc>
 800c43a:	2301      	movs	r3, #1
 800c43c:	6063      	str	r3, [r4, #4]
 800c43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c440:	f8c4 8000 	str.w	r8, [r4]
 800c444:	3301      	adds	r3, #1
 800c446:	e7c4      	b.n	800c3d2 <_svfprintf_r+0xbda>
 800c448:	3408      	adds	r4, #8
 800c44a:	ab1b      	add	r3, sp, #108	; 0x6c
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c450:	6063      	str	r3, [r4, #4]
 800c452:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c456:	4413      	add	r3, r2
 800c458:	e5b4      	b.n	800bfc4 <_svfprintf_r+0x7cc>
 800c45a:	3408      	adds	r4, #8
 800c45c:	076b      	lsls	r3, r5, #29
 800c45e:	d40b      	bmi.n	800c478 <_svfprintf_r+0xc80>
 800c460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c466:	428a      	cmp	r2, r1
 800c468:	bfac      	ite	ge
 800c46a:	189b      	addge	r3, r3, r2
 800c46c:	185b      	addlt	r3, r3, r1
 800c46e:	930a      	str	r3, [sp, #40]	; 0x28
 800c470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c472:	2b00      	cmp	r3, #0
 800c474:	d035      	beq.n	800c4e2 <_svfprintf_r+0xcea>
 800c476:	e02e      	b.n	800c4d6 <_svfprintf_r+0xcde>
 800c478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c47a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c47c:	1a9d      	subs	r5, r3, r2
 800c47e:	2d00      	cmp	r5, #0
 800c480:	ddee      	ble.n	800c460 <_svfprintf_r+0xc68>
 800c482:	2610      	movs	r6, #16
 800c484:	4b84      	ldr	r3, [pc, #528]	; (800c698 <_svfprintf_r+0xea0>)
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	2d10      	cmp	r5, #16
 800c48a:	dd13      	ble.n	800c4b4 <_svfprintf_r+0xcbc>
 800c48c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c48e:	6066      	str	r6, [r4, #4]
 800c490:	3310      	adds	r3, #16
 800c492:	9321      	str	r3, [sp, #132]	; 0x84
 800c494:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c496:	3301      	adds	r3, #1
 800c498:	2b07      	cmp	r3, #7
 800c49a:	9320      	str	r3, [sp, #128]	; 0x80
 800c49c:	dc01      	bgt.n	800c4a2 <_svfprintf_r+0xcaa>
 800c49e:	3408      	adds	r4, #8
 800c4a0:	e006      	b.n	800c4b0 <_svfprintf_r+0xcb8>
 800c4a2:	aa1f      	add	r2, sp, #124	; 0x7c
 800c4a4:	4659      	mov	r1, fp
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	f002 fb71 	bl	800eb8e <__ssprint_r>
 800c4ac:	bb30      	cbnz	r0, 800c4fc <_svfprintf_r+0xd04>
 800c4ae:	ac2c      	add	r4, sp, #176	; 0xb0
 800c4b0:	3d10      	subs	r5, #16
 800c4b2:	e7e7      	b.n	800c484 <_svfprintf_r+0xc8c>
 800c4b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4b6:	6065      	str	r5, [r4, #4]
 800c4b8:	441d      	add	r5, r3
 800c4ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4bc:	9521      	str	r5, [sp, #132]	; 0x84
 800c4be:	3301      	adds	r3, #1
 800c4c0:	2b07      	cmp	r3, #7
 800c4c2:	9320      	str	r3, [sp, #128]	; 0x80
 800c4c4:	ddcc      	ble.n	800c460 <_svfprintf_r+0xc68>
 800c4c6:	aa1f      	add	r2, sp, #124	; 0x7c
 800c4c8:	4659      	mov	r1, fp
 800c4ca:	4650      	mov	r0, sl
 800c4cc:	f002 fb5f 	bl	800eb8e <__ssprint_r>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d0c5      	beq.n	800c460 <_svfprintf_r+0xc68>
 800c4d4:	e012      	b.n	800c4fc <_svfprintf_r+0xd04>
 800c4d6:	aa1f      	add	r2, sp, #124	; 0x7c
 800c4d8:	4659      	mov	r1, fp
 800c4da:	4650      	mov	r0, sl
 800c4dc:	f002 fb57 	bl	800eb8e <__ssprint_r>
 800c4e0:	b960      	cbnz	r0, 800c4fc <_svfprintf_r+0xd04>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9320      	str	r3, [sp, #128]	; 0x80
 800c4e6:	9f03      	ldr	r7, [sp, #12]
 800c4e8:	ac2c      	add	r4, sp, #176	; 0xb0
 800c4ea:	f7ff b9bb 	b.w	800b864 <_svfprintf_r+0x6c>
 800c4ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4f0:	b123      	cbz	r3, 800c4fc <_svfprintf_r+0xd04>
 800c4f2:	aa1f      	add	r2, sp, #124	; 0x7c
 800c4f4:	4659      	mov	r1, fp
 800c4f6:	4650      	mov	r0, sl
 800c4f8:	f002 fb49 	bl	800eb8e <__ssprint_r>
 800c4fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c500:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c506:	bf18      	it	ne
 800c508:	f04f 33ff 	movne.w	r3, #4294967295
 800c50c:	4618      	mov	r0, r3
 800c50e:	e12e      	b.n	800c76e <_svfprintf_r+0xf76>
 800c510:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c514:	4610      	mov	r0, r2
 800c516:	4619      	mov	r1, r3
 800c518:	f7f4 fb24 	bl	8000b64 <__aeabi_dcmpun>
 800c51c:	b160      	cbz	r0, 800c538 <_svfprintf_r+0xd40>
 800c51e:	4b5f      	ldr	r3, [pc, #380]	; (800c69c <_svfprintf_r+0xea4>)
 800c520:	4a5f      	ldr	r2, [pc, #380]	; (800c6a0 <_svfprintf_r+0xea8>)
 800c522:	9902      	ldr	r1, [sp, #8]
 800c524:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800c528:	2947      	cmp	r1, #71	; 0x47
 800c52a:	bfcc      	ite	gt
 800c52c:	4690      	movgt	r8, r2
 800c52e:	4698      	movle	r8, r3
 800c530:	f04f 0903 	mov.w	r9, #3
 800c534:	2600      	movs	r6, #0
 800c536:	e44e      	b.n	800bdd6 <_svfprintf_r+0x5de>
 800c538:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c53c:	d00a      	beq.n	800c554 <_svfprintf_r+0xd5c>
 800c53e:	9b02      	ldr	r3, [sp, #8]
 800c540:	f023 0320 	bic.w	r3, r3, #32
 800c544:	2b47      	cmp	r3, #71	; 0x47
 800c546:	d107      	bne.n	800c558 <_svfprintf_r+0xd60>
 800c548:	f1b9 0f00 	cmp.w	r9, #0
 800c54c:	bf08      	it	eq
 800c54e:	f04f 0901 	moveq.w	r9, #1
 800c552:	e001      	b.n	800c558 <_svfprintf_r+0xd60>
 800c554:	f04f 0906 	mov.w	r9, #6
 800c558:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800c55c:	930c      	str	r3, [sp, #48]	; 0x30
 800c55e:	9b07      	ldr	r3, [sp, #28]
 800c560:	2b00      	cmp	r3, #0
 800c562:	da07      	bge.n	800c574 <_svfprintf_r+0xd7c>
 800c564:	9b06      	ldr	r3, [sp, #24]
 800c566:	930e      	str	r3, [sp, #56]	; 0x38
 800c568:	9b07      	ldr	r3, [sp, #28]
 800c56a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c570:	232d      	movs	r3, #45	; 0x2d
 800c572:	e004      	b.n	800c57e <_svfprintf_r+0xd86>
 800c574:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c578:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800c57c:	2300      	movs	r3, #0
 800c57e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	f023 0720 	bic.w	r7, r3, #32
 800c586:	2f46      	cmp	r7, #70	; 0x46
 800c588:	d004      	beq.n	800c594 <_svfprintf_r+0xd9c>
 800c58a:	2f45      	cmp	r7, #69	; 0x45
 800c58c:	d105      	bne.n	800c59a <_svfprintf_r+0xda2>
 800c58e:	f109 0601 	add.w	r6, r9, #1
 800c592:	e003      	b.n	800c59c <_svfprintf_r+0xda4>
 800c594:	464e      	mov	r6, r9
 800c596:	2103      	movs	r1, #3
 800c598:	e001      	b.n	800c59e <_svfprintf_r+0xda6>
 800c59a:	464e      	mov	r6, r9
 800c59c:	2102      	movs	r1, #2
 800c59e:	ab1d      	add	r3, sp, #116	; 0x74
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	ab1a      	add	r3, sp, #104	; 0x68
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	ab19      	add	r3, sp, #100	; 0x64
 800c5aa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	f000 f9e2 	bl	800c978 <_dtoa_r>
 800c5b4:	2f47      	cmp	r7, #71	; 0x47
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	d102      	bne.n	800c5c0 <_svfprintf_r+0xdc8>
 800c5ba:	07eb      	lsls	r3, r5, #31
 800c5bc:	f140 80cd 	bpl.w	800c75a <_svfprintf_r+0xf62>
 800c5c0:	eb08 0306 	add.w	r3, r8, r6
 800c5c4:	2f46      	cmp	r7, #70	; 0x46
 800c5c6:	9304      	str	r3, [sp, #16]
 800c5c8:	d111      	bne.n	800c5ee <_svfprintf_r+0xdf6>
 800c5ca:	f898 3000 	ldrb.w	r3, [r8]
 800c5ce:	2b30      	cmp	r3, #48	; 0x30
 800c5d0:	d109      	bne.n	800c5e6 <_svfprintf_r+0xdee>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c5da:	f7f4 fa91 	bl	8000b00 <__aeabi_dcmpeq>
 800c5de:	b910      	cbnz	r0, 800c5e6 <_svfprintf_r+0xdee>
 800c5e0:	f1c6 0601 	rsb	r6, r6, #1
 800c5e4:	9619      	str	r6, [sp, #100]	; 0x64
 800c5e6:	9a04      	ldr	r2, [sp, #16]
 800c5e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5ea:	441a      	add	r2, r3
 800c5ec:	9204      	str	r2, [sp, #16]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c5f6:	f7f4 fa83 	bl	8000b00 <__aeabi_dcmpeq>
 800c5fa:	b908      	cbnz	r0, 800c600 <_svfprintf_r+0xe08>
 800c5fc:	2230      	movs	r2, #48	; 0x30
 800c5fe:	e002      	b.n	800c606 <_svfprintf_r+0xe0e>
 800c600:	9b04      	ldr	r3, [sp, #16]
 800c602:	931d      	str	r3, [sp, #116]	; 0x74
 800c604:	e007      	b.n	800c616 <_svfprintf_r+0xe1e>
 800c606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c608:	9904      	ldr	r1, [sp, #16]
 800c60a:	4299      	cmp	r1, r3
 800c60c:	d903      	bls.n	800c616 <_svfprintf_r+0xe1e>
 800c60e:	1c59      	adds	r1, r3, #1
 800c610:	911d      	str	r1, [sp, #116]	; 0x74
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	e7f7      	b.n	800c606 <_svfprintf_r+0xe0e>
 800c616:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c618:	2f47      	cmp	r7, #71	; 0x47
 800c61a:	ebc8 0303 	rsb	r3, r8, r3
 800c61e:	9304      	str	r3, [sp, #16]
 800c620:	d108      	bne.n	800c634 <_svfprintf_r+0xe3c>
 800c622:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c624:	1cdf      	adds	r7, r3, #3
 800c626:	db01      	blt.n	800c62c <_svfprintf_r+0xe34>
 800c628:	4599      	cmp	r9, r3
 800c62a:	da68      	bge.n	800c6fe <_svfprintf_r+0xf06>
 800c62c:	9b02      	ldr	r3, [sp, #8]
 800c62e:	3b02      	subs	r3, #2
 800c630:	9302      	str	r3, [sp, #8]
 800c632:	e002      	b.n	800c63a <_svfprintf_r+0xe42>
 800c634:	9b02      	ldr	r3, [sp, #8]
 800c636:	2b65      	cmp	r3, #101	; 0x65
 800c638:	dc4a      	bgt.n	800c6d0 <_svfprintf_r+0xed8>
 800c63a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c63c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c640:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800c644:	3b01      	subs	r3, #1
 800c646:	2b00      	cmp	r3, #0
 800c648:	9319      	str	r3, [sp, #100]	; 0x64
 800c64a:	bfba      	itte	lt
 800c64c:	425b      	neglt	r3, r3
 800c64e:	222d      	movlt	r2, #45	; 0x2d
 800c650:	222b      	movge	r2, #43	; 0x2b
 800c652:	2b09      	cmp	r3, #9
 800c654:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800c658:	dd24      	ble.n	800c6a4 <_svfprintf_r+0xeac>
 800c65a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800c65e:	200a      	movs	r0, #10
 800c660:	fb93 f1f0 	sdiv	r1, r3, r0
 800c664:	fb00 3311 	mls	r3, r0, r1, r3
 800c668:	3330      	adds	r3, #48	; 0x30
 800c66a:	2909      	cmp	r1, #9
 800c66c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800c670:	460b      	mov	r3, r1
 800c672:	dcf5      	bgt.n	800c660 <_svfprintf_r+0xe68>
 800c674:	3330      	adds	r3, #48	; 0x30
 800c676:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c67a:	1e51      	subs	r1, r2, #1
 800c67c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800c680:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800c684:	4281      	cmp	r1, r0
 800c686:	461a      	mov	r2, r3
 800c688:	d213      	bcs.n	800c6b2 <_svfprintf_r+0xeba>
 800c68a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c68e:	f803 2b01 	strb.w	r2, [r3], #1
 800c692:	e7f7      	b.n	800c684 <_svfprintf_r+0xe8c>
 800c694:	080119ea 	.word	0x080119ea
 800c698:	08011a2e 	.word	0x08011a2e
 800c69c:	08011a02 	.word	0x08011a02
 800c6a0:	08011a06 	.word	0x08011a06
 800c6a4:	2230      	movs	r2, #48	; 0x30
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800c6ac:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c6b0:	aa1c      	add	r2, sp, #112	; 0x70
 800c6b2:	ab1b      	add	r3, sp, #108	; 0x6c
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	9a04      	ldr	r2, [sp, #16]
 800c6b8:	9310      	str	r3, [sp, #64]	; 0x40
 800c6ba:	2a01      	cmp	r2, #1
 800c6bc:	eb03 0902 	add.w	r9, r3, r2
 800c6c0:	dc02      	bgt.n	800c6c8 <_svfprintf_r+0xed0>
 800c6c2:	f015 0701 	ands.w	r7, r5, #1
 800c6c6:	d032      	beq.n	800c72e <_svfprintf_r+0xf36>
 800c6c8:	9b08      	ldr	r3, [sp, #32]
 800c6ca:	2700      	movs	r7, #0
 800c6cc:	4499      	add	r9, r3
 800c6ce:	e02e      	b.n	800c72e <_svfprintf_r+0xf36>
 800c6d0:	9b02      	ldr	r3, [sp, #8]
 800c6d2:	2b66      	cmp	r3, #102	; 0x66
 800c6d4:	d113      	bne.n	800c6fe <_svfprintf_r+0xf06>
 800c6d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dd07      	ble.n	800c6ec <_svfprintf_r+0xef4>
 800c6dc:	f1b9 0f00 	cmp.w	r9, #0
 800c6e0:	d101      	bne.n	800c6e6 <_svfprintf_r+0xeee>
 800c6e2:	07ee      	lsls	r6, r5, #31
 800c6e4:	d521      	bpl.n	800c72a <_svfprintf_r+0xf32>
 800c6e6:	9a08      	ldr	r2, [sp, #32]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	e006      	b.n	800c6fa <_svfprintf_r+0xf02>
 800c6ec:	f1b9 0f00 	cmp.w	r9, #0
 800c6f0:	d101      	bne.n	800c6f6 <_svfprintf_r+0xefe>
 800c6f2:	07ed      	lsls	r5, r5, #31
 800c6f4:	d514      	bpl.n	800c720 <_svfprintf_r+0xf28>
 800c6f6:	9b08      	ldr	r3, [sp, #32]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	444b      	add	r3, r9
 800c6fc:	e015      	b.n	800c72a <_svfprintf_r+0xf32>
 800c6fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c700:	9a04      	ldr	r2, [sp, #16]
 800c702:	4293      	cmp	r3, r2
 800c704:	db03      	blt.n	800c70e <_svfprintf_r+0xf16>
 800c706:	07e8      	lsls	r0, r5, #31
 800c708:	d50d      	bpl.n	800c726 <_svfprintf_r+0xf2e>
 800c70a:	9a08      	ldr	r2, [sp, #32]
 800c70c:	e006      	b.n	800c71c <_svfprintf_r+0xf24>
 800c70e:	9a04      	ldr	r2, [sp, #16]
 800c710:	9908      	ldr	r1, [sp, #32]
 800c712:	2b00      	cmp	r3, #0
 800c714:	440a      	add	r2, r1
 800c716:	dc05      	bgt.n	800c724 <_svfprintf_r+0xf2c>
 800c718:	f1c3 0301 	rsb	r3, r3, #1
 800c71c:	4413      	add	r3, r2
 800c71e:	e002      	b.n	800c726 <_svfprintf_r+0xf2e>
 800c720:	2301      	movs	r3, #1
 800c722:	e002      	b.n	800c72a <_svfprintf_r+0xf32>
 800c724:	4613      	mov	r3, r2
 800c726:	2267      	movs	r2, #103	; 0x67
 800c728:	9202      	str	r2, [sp, #8]
 800c72a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800c72c:	4699      	mov	r9, r3
 800c72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c730:	b113      	cbz	r3, 800c738 <_svfprintf_r+0xf40>
 800c732:	232d      	movs	r3, #45	; 0x2d
 800c734:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c738:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c73a:	2600      	movs	r6, #0
 800c73c:	f7ff bb4c 	b.w	800bdd8 <_svfprintf_r+0x5e0>
 800c740:	2200      	movs	r2, #0
 800c742:	2300      	movs	r3, #0
 800c744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c748:	f7f4 f9e4 	bl	8000b14 <__aeabi_dcmplt>
 800c74c:	b110      	cbz	r0, 800c754 <_svfprintf_r+0xf5c>
 800c74e:	232d      	movs	r3, #45	; 0x2d
 800c750:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c754:	4b07      	ldr	r3, [pc, #28]	; (800c774 <_svfprintf_r+0xf7c>)
 800c756:	4a08      	ldr	r2, [pc, #32]	; (800c778 <_svfprintf_r+0xf80>)
 800c758:	e6e3      	b.n	800c522 <_svfprintf_r+0xd2a>
 800c75a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c75c:	1a1b      	subs	r3, r3, r0
 800c75e:	9304      	str	r3, [sp, #16]
 800c760:	e75f      	b.n	800c622 <_svfprintf_r+0xe2a>
 800c762:	ea56 0207 	orrs.w	r2, r6, r7
 800c766:	f47f aaaa 	bne.w	800bcbe <_svfprintf_r+0x4c6>
 800c76a:	f7ff baaf 	b.w	800bccc <_svfprintf_r+0x4d4>
 800c76e:	b03d      	add	sp, #244	; 0xf4
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	080119fa 	.word	0x080119fa
 800c778:	080119fe 	.word	0x080119fe

0800c77c <__swsetup_r>:
 800c77c:	4b32      	ldr	r3, [pc, #200]	; (800c848 <__swsetup_r+0xcc>)
 800c77e:	b570      	push	{r4, r5, r6, lr}
 800c780:	681d      	ldr	r5, [r3, #0]
 800c782:	4606      	mov	r6, r0
 800c784:	460c      	mov	r4, r1
 800c786:	b125      	cbz	r5, 800c792 <__swsetup_r+0x16>
 800c788:	69ab      	ldr	r3, [r5, #24]
 800c78a:	b913      	cbnz	r3, 800c792 <__swsetup_r+0x16>
 800c78c:	4628      	mov	r0, r5
 800c78e:	f000 ff8d 	bl	800d6ac <__sinit>
 800c792:	4b2e      	ldr	r3, [pc, #184]	; (800c84c <__swsetup_r+0xd0>)
 800c794:	429c      	cmp	r4, r3
 800c796:	d101      	bne.n	800c79c <__swsetup_r+0x20>
 800c798:	686c      	ldr	r4, [r5, #4]
 800c79a:	e008      	b.n	800c7ae <__swsetup_r+0x32>
 800c79c:	4b2c      	ldr	r3, [pc, #176]	; (800c850 <__swsetup_r+0xd4>)
 800c79e:	429c      	cmp	r4, r3
 800c7a0:	d101      	bne.n	800c7a6 <__swsetup_r+0x2a>
 800c7a2:	68ac      	ldr	r4, [r5, #8]
 800c7a4:	e003      	b.n	800c7ae <__swsetup_r+0x32>
 800c7a6:	4b2b      	ldr	r3, [pc, #172]	; (800c854 <__swsetup_r+0xd8>)
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	bf08      	it	eq
 800c7ac:	68ec      	ldreq	r4, [r5, #12]
 800c7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	0715      	lsls	r5, r2, #28
 800c7b6:	d41d      	bmi.n	800c7f4 <__swsetup_r+0x78>
 800c7b8:	06d0      	lsls	r0, r2, #27
 800c7ba:	d402      	bmi.n	800c7c2 <__swsetup_r+0x46>
 800c7bc:	2209      	movs	r2, #9
 800c7be:	6032      	str	r2, [r6, #0]
 800c7c0:	e03a      	b.n	800c838 <__swsetup_r+0xbc>
 800c7c2:	0751      	lsls	r1, r2, #29
 800c7c4:	d512      	bpl.n	800c7ec <__swsetup_r+0x70>
 800c7c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7c8:	b141      	cbz	r1, 800c7dc <__swsetup_r+0x60>
 800c7ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7ce:	4299      	cmp	r1, r3
 800c7d0:	d002      	beq.n	800c7d8 <__swsetup_r+0x5c>
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f001 f832 	bl	800d83c <_free_r>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	6363      	str	r3, [r4, #52]	; 0x34
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7e2:	81a3      	strh	r3, [r4, #12]
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	6063      	str	r3, [r4, #4]
 800c7e8:	6923      	ldr	r3, [r4, #16]
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	f043 0308 	orr.w	r3, r3, #8
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	6923      	ldr	r3, [r4, #16]
 800c7f6:	b94b      	cbnz	r3, 800c80c <__swsetup_r+0x90>
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c802:	d003      	beq.n	800c80c <__swsetup_r+0x90>
 800c804:	4621      	mov	r1, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f001 fa6e 	bl	800dce8 <__smakebuf_r>
 800c80c:	89a2      	ldrh	r2, [r4, #12]
 800c80e:	f012 0301 	ands.w	r3, r2, #1
 800c812:	d005      	beq.n	800c820 <__swsetup_r+0xa4>
 800c814:	2300      	movs	r3, #0
 800c816:	60a3      	str	r3, [r4, #8]
 800c818:	6963      	ldr	r3, [r4, #20]
 800c81a:	425b      	negs	r3, r3
 800c81c:	61a3      	str	r3, [r4, #24]
 800c81e:	e003      	b.n	800c828 <__swsetup_r+0xac>
 800c820:	0792      	lsls	r2, r2, #30
 800c822:	bf58      	it	pl
 800c824:	6963      	ldrpl	r3, [r4, #20]
 800c826:	60a3      	str	r3, [r4, #8]
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	b95b      	cbnz	r3, 800c844 <__swsetup_r+0xc8>
 800c82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c830:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800c834:	b280      	uxth	r0, r0
 800c836:	b130      	cbz	r0, 800c846 <__swsetup_r+0xca>
 800c838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	2000      	movs	r0, #0
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	20010120 	.word	0x20010120
 800c84c:	08011b4c 	.word	0x08011b4c
 800c850:	08011b6c 	.word	0x08011b6c
 800c854:	08011b8c 	.word	0x08011b8c

0800c858 <quorem>:
 800c858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	6903      	ldr	r3, [r0, #16]
 800c85e:	690c      	ldr	r4, [r1, #16]
 800c860:	429c      	cmp	r4, r3
 800c862:	4680      	mov	r8, r0
 800c864:	f300 8083 	bgt.w	800c96e <quorem+0x116>
 800c868:	3c01      	subs	r4, #1
 800c86a:	f101 0714 	add.w	r7, r1, #20
 800c86e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800c872:	f100 0614 	add.w	r6, r0, #20
 800c876:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c87a:	eb06 030e 	add.w	r3, r6, lr
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	3501      	adds	r5, #1
 800c882:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c886:	fbb3 f5f5 	udiv	r5, r3, r5
 800c88a:	eb07 090e 	add.w	r9, r7, lr
 800c88e:	2d00      	cmp	r5, #0
 800c890:	d039      	beq.n	800c906 <quorem+0xae>
 800c892:	f04f 0a00 	mov.w	sl, #0
 800c896:	4638      	mov	r0, r7
 800c898:	46b4      	mov	ip, r6
 800c89a:	46d3      	mov	fp, sl
 800c89c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8a0:	b293      	uxth	r3, r2
 800c8a2:	fb05 a303 	mla	r3, r5, r3, sl
 800c8a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	ebc3 030b 	rsb	r3, r3, fp
 800c8b0:	0c12      	lsrs	r2, r2, #16
 800c8b2:	f8bc b000 	ldrh.w	fp, [ip]
 800c8b6:	fb05 a202 	mla	r2, r5, r2, sl
 800c8ba:	fa13 f38b 	uxtah	r3, r3, fp
 800c8be:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c8c2:	fa1f fb82 	uxth.w	fp, r2
 800c8c6:	f8dc 2000 	ldr.w	r2, [ip]
 800c8ca:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c8ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8d8:	4581      	cmp	r9, r0
 800c8da:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c8de:	f84c 3b04 	str.w	r3, [ip], #4
 800c8e2:	d2db      	bcs.n	800c89c <quorem+0x44>
 800c8e4:	f856 300e 	ldr.w	r3, [r6, lr]
 800c8e8:	b96b      	cbnz	r3, 800c906 <quorem+0xae>
 800c8ea:	9b01      	ldr	r3, [sp, #4]
 800c8ec:	3b04      	subs	r3, #4
 800c8ee:	429e      	cmp	r6, r3
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	d302      	bcc.n	800c8fa <quorem+0xa2>
 800c8f4:	f8c8 4010 	str.w	r4, [r8, #16]
 800c8f8:	e005      	b.n	800c906 <quorem+0xae>
 800c8fa:	6812      	ldr	r2, [r2, #0]
 800c8fc:	3b04      	subs	r3, #4
 800c8fe:	2a00      	cmp	r2, #0
 800c900:	d1f8      	bne.n	800c8f4 <quorem+0x9c>
 800c902:	3c01      	subs	r4, #1
 800c904:	e7f3      	b.n	800c8ee <quorem+0x96>
 800c906:	4640      	mov	r0, r8
 800c908:	f001 fe7d 	bl	800e606 <__mcmp>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	db2c      	blt.n	800c96a <quorem+0x112>
 800c910:	3501      	adds	r5, #1
 800c912:	4630      	mov	r0, r6
 800c914:	f04f 0e00 	mov.w	lr, #0
 800c918:	f857 1b04 	ldr.w	r1, [r7], #4
 800c91c:	f8d0 c000 	ldr.w	ip, [r0]
 800c920:	b28a      	uxth	r2, r1
 800c922:	ebc2 030e 	rsb	r3, r2, lr
 800c926:	0c09      	lsrs	r1, r1, #16
 800c928:	fa13 f38c 	uxtah	r3, r3, ip
 800c92c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800c930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c934:	b29b      	uxth	r3, r3
 800c936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c93a:	45b9      	cmp	r9, r7
 800c93c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c940:	f840 3b04 	str.w	r3, [r0], #4
 800c944:	d2e8      	bcs.n	800c918 <quorem+0xc0>
 800c946:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c94a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c94e:	b962      	cbnz	r2, 800c96a <quorem+0x112>
 800c950:	3b04      	subs	r3, #4
 800c952:	429e      	cmp	r6, r3
 800c954:	461a      	mov	r2, r3
 800c956:	d302      	bcc.n	800c95e <quorem+0x106>
 800c958:	f8c8 4010 	str.w	r4, [r8, #16]
 800c95c:	e005      	b.n	800c96a <quorem+0x112>
 800c95e:	6812      	ldr	r2, [r2, #0]
 800c960:	3b04      	subs	r3, #4
 800c962:	2a00      	cmp	r2, #0
 800c964:	d1f8      	bne.n	800c958 <quorem+0x100>
 800c966:	3c01      	subs	r4, #1
 800c968:	e7f3      	b.n	800c952 <quorem+0xfa>
 800c96a:	4628      	mov	r0, r5
 800c96c:	e000      	b.n	800c970 <quorem+0x118>
 800c96e:	2000      	movs	r0, #0
 800c970:	b003      	add	sp, #12
 800c972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c978 <_dtoa_r>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	ec59 8b10 	vmov	r8, r9, d0
 800c980:	b097      	sub	sp, #92	; 0x5c
 800c982:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c984:	9106      	str	r1, [sp, #24]
 800c986:	4682      	mov	sl, r0
 800c988:	9209      	str	r2, [sp, #36]	; 0x24
 800c98a:	9310      	str	r3, [sp, #64]	; 0x40
 800c98c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800c98e:	e9cd 8900 	strd	r8, r9, [sp]
 800c992:	b945      	cbnz	r5, 800c9a6 <_dtoa_r+0x2e>
 800c994:	2010      	movs	r0, #16
 800c996:	f001 f9e3 	bl	800dd60 <malloc>
 800c99a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800c99e:	6045      	str	r5, [r0, #4]
 800c9a0:	6085      	str	r5, [r0, #8]
 800c9a2:	6005      	str	r5, [r0, #0]
 800c9a4:	60c5      	str	r5, [r0, #12]
 800c9a6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800c9aa:	6819      	ldr	r1, [r3, #0]
 800c9ac:	b159      	cbz	r1, 800c9c6 <_dtoa_r+0x4e>
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	604a      	str	r2, [r1, #4]
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4093      	lsls	r3, r2
 800c9b6:	608b      	str	r3, [r1, #8]
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	f001 fc4b 	bl	800e254 <_Bfree>
 800c9be:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	4a9f      	ldr	r2, [pc, #636]	; (800cc48 <_dtoa_r+0x2d0>)
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bfbf      	itttt	lt
 800c9ce:	2301      	movlt	r3, #1
 800c9d0:	6023      	strlt	r3, [r4, #0]
 800c9d2:	9b01      	ldrlt	r3, [sp, #4]
 800c9d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9d8:	bfb8      	it	lt
 800c9da:	9301      	strlt	r3, [sp, #4]
 800c9dc:	9f01      	ldr	r7, [sp, #4]
 800c9de:	bfa4      	itt	ge
 800c9e0:	2300      	movge	r3, #0
 800c9e2:	6023      	strge	r3, [r4, #0]
 800c9e4:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800c9e8:	0d1b      	lsrs	r3, r3, #20
 800c9ea:	051b      	lsls	r3, r3, #20
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d11d      	bne.n	800ca2c <_dtoa_r+0xb4>
 800c9f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	9b00      	ldr	r3, [sp, #0]
 800c9fa:	b943      	cbnz	r3, 800ca0e <_dtoa_r+0x96>
 800c9fc:	4a93      	ldr	r2, [pc, #588]	; (800cc4c <_dtoa_r+0x2d4>)
 800c9fe:	4b94      	ldr	r3, [pc, #592]	; (800cc50 <_dtoa_r+0x2d8>)
 800ca00:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800ca04:	2800      	cmp	r0, #0
 800ca06:	bf14      	ite	ne
 800ca08:	4618      	movne	r0, r3
 800ca0a:	4610      	moveq	r0, r2
 800ca0c:	e000      	b.n	800ca10 <_dtoa_r+0x98>
 800ca0e:	4890      	ldr	r0, [pc, #576]	; (800cc50 <_dtoa_r+0x2d8>)
 800ca10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 854a 	beq.w	800d4ac <_dtoa_r+0xb34>
 800ca18:	78c3      	ldrb	r3, [r0, #3]
 800ca1a:	b113      	cbz	r3, 800ca22 <_dtoa_r+0xaa>
 800ca1c:	f100 0308 	add.w	r3, r0, #8
 800ca20:	e000      	b.n	800ca24 <_dtoa_r+0xac>
 800ca22:	1cc3      	adds	r3, r0, #3
 800ca24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	f000 bd40 	b.w	800d4ac <_dtoa_r+0xb34>
 800ca2c:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ca30:	2200      	movs	r2, #0
 800ca32:	2300      	movs	r3, #0
 800ca34:	4620      	mov	r0, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	f7f4 f862 	bl	8000b00 <__aeabi_dcmpeq>
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	b158      	cbz	r0, 800ca58 <_dtoa_r+0xe0>
 800ca40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca42:	2301      	movs	r3, #1
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 8522 	beq.w	800d492 <_dtoa_r+0xb1a>
 800ca4e:	4881      	ldr	r0, [pc, #516]	; (800cc54 <_dtoa_r+0x2dc>)
 800ca50:	6018      	str	r0, [r3, #0]
 800ca52:	3801      	subs	r0, #1
 800ca54:	f000 bd2a 	b.w	800d4ac <_dtoa_r+0xb34>
 800ca58:	aa14      	add	r2, sp, #80	; 0x50
 800ca5a:	a915      	add	r1, sp, #84	; 0x54
 800ca5c:	ec45 4b10 	vmov	d0, r4, r5
 800ca60:	4650      	mov	r0, sl
 800ca62:	f001 fe4b 	bl	800e6fc <__d2b>
 800ca66:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca6a:	9002      	str	r0, [sp, #8]
 800ca6c:	b15e      	cbz	r6, 800ca86 <_dtoa_r+0x10e>
 800ca6e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ca72:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ca76:	4620      	mov	r0, r4
 800ca78:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ca7c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800ca80:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800ca84:	e01d      	b.n	800cac2 <_dtoa_r+0x14a>
 800ca86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca88:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ca8a:	441e      	add	r6, r3
 800ca8c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800ca90:	2b20      	cmp	r3, #32
 800ca92:	dd0a      	ble.n	800caaa <_dtoa_r+0x132>
 800ca94:	9a00      	ldr	r2, [sp, #0]
 800ca96:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800ca9a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ca9e:	fa22 f000 	lsr.w	r0, r2, r0
 800caa2:	fa07 f303 	lsl.w	r3, r7, r3
 800caa6:	4318      	orrs	r0, r3
 800caa8:	e004      	b.n	800cab4 <_dtoa_r+0x13c>
 800caaa:	f1c3 0020 	rsb	r0, r3, #32
 800caae:	9b00      	ldr	r3, [sp, #0]
 800cab0:	fa03 f000 	lsl.w	r0, r3, r0
 800cab4:	f7f3 fd46 	bl	8000544 <__aeabi_ui2d>
 800cab8:	2301      	movs	r3, #1
 800caba:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cabe:	3e01      	subs	r6, #1
 800cac0:	9311      	str	r3, [sp, #68]	; 0x44
 800cac2:	2200      	movs	r2, #0
 800cac4:	4b64      	ldr	r3, [pc, #400]	; (800cc58 <_dtoa_r+0x2e0>)
 800cac6:	f7f3 fbff 	bl	80002c8 <__aeabi_dsub>
 800caca:	a359      	add	r3, pc, #356	; (adr r3, 800cc30 <_dtoa_r+0x2b8>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f7f3 fdae 	bl	8000630 <__aeabi_dmul>
 800cad4:	a358      	add	r3, pc, #352	; (adr r3, 800cc38 <_dtoa_r+0x2c0>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7f3 fbf7 	bl	80002cc <__adddf3>
 800cade:	4604      	mov	r4, r0
 800cae0:	4630      	mov	r0, r6
 800cae2:	460d      	mov	r5, r1
 800cae4:	f7f3 fd3e 	bl	8000564 <__aeabi_i2d>
 800cae8:	a355      	add	r3, pc, #340	; (adr r3, 800cc40 <_dtoa_r+0x2c8>)
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	f7f3 fd9f 	bl	8000630 <__aeabi_dmul>
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	4620      	mov	r0, r4
 800caf8:	4629      	mov	r1, r5
 800cafa:	f7f3 fbe7 	bl	80002cc <__adddf3>
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	f7f4 f845 	bl	8000b90 <__aeabi_d2iz>
 800cb06:	2200      	movs	r2, #0
 800cb08:	4683      	mov	fp, r0
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f7f4 f800 	bl	8000b14 <__aeabi_dcmplt>
 800cb14:	b158      	cbz	r0, 800cb2e <_dtoa_r+0x1b6>
 800cb16:	4658      	mov	r0, fp
 800cb18:	f7f3 fd24 	bl	8000564 <__aeabi_i2d>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4620      	mov	r0, r4
 800cb22:	4629      	mov	r1, r5
 800cb24:	f7f3 ffec 	bl	8000b00 <__aeabi_dcmpeq>
 800cb28:	b908      	cbnz	r0, 800cb2e <_dtoa_r+0x1b6>
 800cb2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb2e:	f1bb 0f16 	cmp.w	fp, #22
 800cb32:	d80d      	bhi.n	800cb50 <_dtoa_r+0x1d8>
 800cb34:	4949      	ldr	r1, [pc, #292]	; (800cc5c <_dtoa_r+0x2e4>)
 800cb36:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cb3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb42:	f7f4 f805 	bl	8000b50 <__aeabi_dcmpgt>
 800cb46:	b130      	cbz	r0, 800cb56 <_dtoa_r+0x1de>
 800cb48:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e000      	b.n	800cb52 <_dtoa_r+0x1da>
 800cb50:	2301      	movs	r3, #1
 800cb52:	930d      	str	r3, [sp, #52]	; 0x34
 800cb54:	e000      	b.n	800cb58 <_dtoa_r+0x1e0>
 800cb56:	900d      	str	r0, [sp, #52]	; 0x34
 800cb58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb5a:	1b9e      	subs	r6, r3, r6
 800cb5c:	1e73      	subs	r3, r6, #1
 800cb5e:	9305      	str	r3, [sp, #20]
 800cb60:	bf43      	ittte	mi
 800cb62:	f1c3 0900 	rsbmi	r9, r3, #0
 800cb66:	2300      	movmi	r3, #0
 800cb68:	9305      	strmi	r3, [sp, #20]
 800cb6a:	f04f 0900 	movpl.w	r9, #0
 800cb6e:	f1bb 0f00 	cmp.w	fp, #0
 800cb72:	db07      	blt.n	800cb84 <_dtoa_r+0x20c>
 800cb74:	9b05      	ldr	r3, [sp, #20]
 800cb76:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800cb7a:	445b      	add	r3, fp
 800cb7c:	9305      	str	r3, [sp, #20]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9307      	str	r3, [sp, #28]
 800cb82:	e006      	b.n	800cb92 <_dtoa_r+0x21a>
 800cb84:	f1cb 0300 	rsb	r3, fp, #0
 800cb88:	9307      	str	r3, [sp, #28]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	ebcb 0909 	rsb	r9, fp, r9
 800cb90:	930c      	str	r3, [sp, #48]	; 0x30
 800cb92:	9b06      	ldr	r3, [sp, #24]
 800cb94:	2b09      	cmp	r3, #9
 800cb96:	d827      	bhi.n	800cbe8 <_dtoa_r+0x270>
 800cb98:	2b05      	cmp	r3, #5
 800cb9a:	bfc4      	itt	gt
 800cb9c:	3b04      	subgt	r3, #4
 800cb9e:	9306      	strgt	r3, [sp, #24]
 800cba0:	9b06      	ldr	r3, [sp, #24]
 800cba2:	f1a3 0302 	sub.w	r3, r3, #2
 800cba6:	bfcc      	ite	gt
 800cba8:	2500      	movgt	r5, #0
 800cbaa:	2501      	movle	r5, #1
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d820      	bhi.n	800cbf2 <_dtoa_r+0x27a>
 800cbb0:	e8df f003 	tbb	[pc, r3]
 800cbb4:	04020e06 	.word	0x04020e06
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e002      	b.n	800cbc2 <_dtoa_r+0x24a>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e008      	b.n	800cbd2 <_dtoa_r+0x25a>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	9308      	str	r3, [sp, #32]
 800cbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	dd1c      	ble.n	800cc04 <_dtoa_r+0x28c>
 800cbca:	9303      	str	r3, [sp, #12]
 800cbcc:	4698      	mov	r8, r3
 800cbce:	e01e      	b.n	800cc0e <_dtoa_r+0x296>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	9308      	str	r3, [sp, #32]
 800cbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd6:	445b      	add	r3, fp
 800cbd8:	f103 0801 	add.w	r8, r3, #1
 800cbdc:	9303      	str	r3, [sp, #12]
 800cbde:	4643      	mov	r3, r8
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	bfb8      	it	lt
 800cbe4:	2301      	movlt	r3, #1
 800cbe6:	e012      	b.n	800cc0e <_dtoa_r+0x296>
 800cbe8:	2501      	movs	r5, #1
 800cbea:	2300      	movs	r3, #0
 800cbec:	9306      	str	r3, [sp, #24]
 800cbee:	9508      	str	r5, [sp, #32]
 800cbf0:	e001      	b.n	800cbf6 <_dtoa_r+0x27e>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	9308      	str	r3, [sp, #32]
 800cbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfa:	9303      	str	r3, [sp, #12]
 800cbfc:	4698      	mov	r8, r3
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2312      	movs	r3, #18
 800cc02:	e003      	b.n	800cc0c <_dtoa_r+0x294>
 800cc04:	2301      	movs	r3, #1
 800cc06:	9303      	str	r3, [sp, #12]
 800cc08:	4698      	mov	r8, r3
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc0e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800cc12:	2200      	movs	r2, #0
 800cc14:	6062      	str	r2, [r4, #4]
 800cc16:	2104      	movs	r1, #4
 800cc18:	f101 0214 	add.w	r2, r1, #20
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d81f      	bhi.n	800cc60 <_dtoa_r+0x2e8>
 800cc20:	6862      	ldr	r2, [r4, #4]
 800cc22:	3201      	adds	r2, #1
 800cc24:	6062      	str	r2, [r4, #4]
 800cc26:	0049      	lsls	r1, r1, #1
 800cc28:	e7f6      	b.n	800cc18 <_dtoa_r+0x2a0>
 800cc2a:	bf00      	nop
 800cc2c:	f3af 8000 	nop.w
 800cc30:	636f4361 	.word	0x636f4361
 800cc34:	3fd287a7 	.word	0x3fd287a7
 800cc38:	8b60c8b3 	.word	0x8b60c8b3
 800cc3c:	3fc68a28 	.word	0x3fc68a28
 800cc40:	509f79fb 	.word	0x509f79fb
 800cc44:	3fd34413 	.word	0x3fd34413
 800cc48:	7ff00000 	.word	0x7ff00000
 800cc4c:	08011b3f 	.word	0x08011b3f
 800cc50:	08011b48 	.word	0x08011b48
 800cc54:	08011a2d 	.word	0x08011a2d
 800cc58:	3ff80000 	.word	0x3ff80000
 800cc5c:	08011bb8 	.word	0x08011bb8
 800cc60:	6861      	ldr	r1, [r4, #4]
 800cc62:	4650      	mov	r0, sl
 800cc64:	f001 fac1 	bl	800e1ea <_Balloc>
 800cc68:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800cc6c:	6020      	str	r0, [r4, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	f1b8 0f0e 	cmp.w	r8, #14
 800cc76:	f200 815d 	bhi.w	800cf34 <_dtoa_r+0x5bc>
 800cc7a:	2d00      	cmp	r5, #0
 800cc7c:	f000 815a 	beq.w	800cf34 <_dtoa_r+0x5bc>
 800cc80:	ed9d 7b00 	vldr	d7, [sp]
 800cc84:	f1bb 0f00 	cmp.w	fp, #0
 800cc88:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800cc8c:	dd31      	ble.n	800ccf2 <_dtoa_r+0x37a>
 800cc8e:	4aa0      	ldr	r2, [pc, #640]	; (800cf10 <_dtoa_r+0x598>)
 800cc90:	f00b 030f 	and.w	r3, fp, #15
 800cc94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc98:	ed93 7b00 	vldr	d7, [r3]
 800cc9c:	ea4f 142b 	mov.w	r4, fp, asr #4
 800cca0:	06e2      	lsls	r2, r4, #27
 800cca2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cca6:	d50c      	bpl.n	800ccc2 <_dtoa_r+0x34a>
 800cca8:	4b9a      	ldr	r3, [pc, #616]	; (800cf14 <_dtoa_r+0x59c>)
 800ccaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ccae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ccb2:	f7f3 fde7 	bl	8000884 <__aeabi_ddiv>
 800ccb6:	f004 040f 	and.w	r4, r4, #15
 800ccba:	e9cd 0100 	strd	r0, r1, [sp]
 800ccbe:	2603      	movs	r6, #3
 800ccc0:	e000      	b.n	800ccc4 <_dtoa_r+0x34c>
 800ccc2:	2602      	movs	r6, #2
 800ccc4:	4d93      	ldr	r5, [pc, #588]	; (800cf14 <_dtoa_r+0x59c>)
 800ccc6:	b16c      	cbz	r4, 800cce4 <_dtoa_r+0x36c>
 800ccc8:	07e3      	lsls	r3, r4, #31
 800ccca:	d508      	bpl.n	800ccde <_dtoa_r+0x366>
 800cccc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccd4:	f7f3 fcac 	bl	8000630 <__aeabi_dmul>
 800ccd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ccdc:	3601      	adds	r6, #1
 800ccde:	1064      	asrs	r4, r4, #1
 800cce0:	3508      	adds	r5, #8
 800cce2:	e7f0      	b.n	800ccc6 <_dtoa_r+0x34e>
 800cce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccec:	f7f3 fdca 	bl	8000884 <__aeabi_ddiv>
 800ccf0:	e020      	b.n	800cd34 <_dtoa_r+0x3bc>
 800ccf2:	f1cb 0400 	rsb	r4, fp, #0
 800ccf6:	b304      	cbz	r4, 800cd3a <_dtoa_r+0x3c2>
 800ccf8:	4b85      	ldr	r3, [pc, #532]	; (800cf10 <_dtoa_r+0x598>)
 800ccfa:	4d86      	ldr	r5, [pc, #536]	; (800cf14 <_dtoa_r+0x59c>)
 800ccfc:	f004 020f 	and.w	r2, r4, #15
 800cd00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd0c:	f7f3 fc90 	bl	8000630 <__aeabi_dmul>
 800cd10:	e9cd 0100 	strd	r0, r1, [sp]
 800cd14:	1124      	asrs	r4, r4, #4
 800cd16:	2300      	movs	r3, #0
 800cd18:	2602      	movs	r6, #2
 800cd1a:	b154      	cbz	r4, 800cd32 <_dtoa_r+0x3ba>
 800cd1c:	07e7      	lsls	r7, r4, #31
 800cd1e:	d505      	bpl.n	800cd2c <_dtoa_r+0x3b4>
 800cd20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd24:	f7f3 fc84 	bl	8000630 <__aeabi_dmul>
 800cd28:	3601      	adds	r6, #1
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	1064      	asrs	r4, r4, #1
 800cd2e:	3508      	adds	r5, #8
 800cd30:	e7f3      	b.n	800cd1a <_dtoa_r+0x3a2>
 800cd32:	b11b      	cbz	r3, 800cd3c <_dtoa_r+0x3c4>
 800cd34:	e9cd 0100 	strd	r0, r1, [sp]
 800cd38:	e000      	b.n	800cd3c <_dtoa_r+0x3c4>
 800cd3a:	2602      	movs	r6, #2
 800cd3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd3e:	b1eb      	cbz	r3, 800cd7c <_dtoa_r+0x404>
 800cd40:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cd44:	2200      	movs	r2, #0
 800cd46:	4b74      	ldr	r3, [pc, #464]	; (800cf18 <_dtoa_r+0x5a0>)
 800cd48:	4620      	mov	r0, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	f7f3 fee2 	bl	8000b14 <__aeabi_dcmplt>
 800cd50:	b1a0      	cbz	r0, 800cd7c <_dtoa_r+0x404>
 800cd52:	f1b8 0f00 	cmp.w	r8, #0
 800cd56:	d011      	beq.n	800cd7c <_dtoa_r+0x404>
 800cd58:	9b03      	ldr	r3, [sp, #12]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f340 80e6 	ble.w	800cf2c <_dtoa_r+0x5b4>
 800cd60:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cd64:	930a      	str	r3, [sp, #40]	; 0x28
 800cd66:	2200      	movs	r2, #0
 800cd68:	4b6c      	ldr	r3, [pc, #432]	; (800cf1c <_dtoa_r+0x5a4>)
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f7f3 fc5f 	bl	8000630 <__aeabi_dmul>
 800cd72:	3601      	adds	r6, #1
 800cd74:	e9cd 0100 	strd	r0, r1, [sp]
 800cd78:	9f03      	ldr	r7, [sp, #12]
 800cd7a:	e002      	b.n	800cd82 <_dtoa_r+0x40a>
 800cd7c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cd80:	4647      	mov	r7, r8
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7f3 fbee 	bl	8000564 <__aeabi_i2d>
 800cd88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd8c:	f7f3 fc50 	bl	8000630 <__aeabi_dmul>
 800cd90:	2200      	movs	r2, #0
 800cd92:	4b63      	ldr	r3, [pc, #396]	; (800cf20 <_dtoa_r+0x5a8>)
 800cd94:	f7f3 fa9a 	bl	80002cc <__adddf3>
 800cd98:	4604      	mov	r4, r0
 800cd9a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800cd9e:	b9cf      	cbnz	r7, 800cdd4 <_dtoa_r+0x45c>
 800cda0:	2200      	movs	r2, #0
 800cda2:	4b60      	ldr	r3, [pc, #384]	; (800cf24 <_dtoa_r+0x5ac>)
 800cda4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cda8:	f7f3 fa8e 	bl	80002c8 <__aeabi_dsub>
 800cdac:	4622      	mov	r2, r4
 800cdae:	462b      	mov	r3, r5
 800cdb0:	e9cd 0100 	strd	r0, r1, [sp]
 800cdb4:	f7f3 fecc 	bl	8000b50 <__aeabi_dcmpgt>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	f040 8241 	bne.w	800d240 <_dtoa_r+0x8c8>
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cdc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc8:	f7f3 fea4 	bl	8000b14 <__aeabi_dcmplt>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f040 822e 	bne.w	800d22e <_dtoa_r+0x8b6>
 800cdd2:	e0ab      	b.n	800cf2c <_dtoa_r+0x5b4>
 800cdd4:	9a08      	ldr	r2, [sp, #32]
 800cdd6:	4b4e      	ldr	r3, [pc, #312]	; (800cf10 <_dtoa_r+0x598>)
 800cdd8:	1e79      	subs	r1, r7, #1
 800cdda:	2a00      	cmp	r2, #0
 800cddc:	d04a      	beq.n	800ce74 <_dtoa_r+0x4fc>
 800cdde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	2000      	movs	r0, #0
 800cde8:	494f      	ldr	r1, [pc, #316]	; (800cf28 <_dtoa_r+0x5b0>)
 800cdea:	f7f3 fd4b 	bl	8000884 <__aeabi_ddiv>
 800cdee:	4622      	mov	r2, r4
 800cdf0:	462b      	mov	r3, r5
 800cdf2:	f7f3 fa69 	bl	80002c8 <__aeabi_dsub>
 800cdf6:	9c04      	ldr	r4, [sp, #16]
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	460e      	mov	r6, r1
 800cdfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce00:	f7f3 fec6 	bl	8000b90 <__aeabi_d2iz>
 800ce04:	9012      	str	r0, [sp, #72]	; 0x48
 800ce06:	f7f3 fbad 	bl	8000564 <__aeabi_i2d>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce12:	f7f3 fa59 	bl	80002c8 <__aeabi_dsub>
 800ce16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce18:	3330      	adds	r3, #48	; 0x30
 800ce1a:	f804 3b01 	strb.w	r3, [r4], #1
 800ce1e:	462a      	mov	r2, r5
 800ce20:	4633      	mov	r3, r6
 800ce22:	e9cd 0100 	strd	r0, r1, [sp]
 800ce26:	f7f3 fe75 	bl	8000b14 <__aeabi_dcmplt>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f040 8321 	bne.w	800d472 <_dtoa_r+0xafa>
 800ce30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce34:	2000      	movs	r0, #0
 800ce36:	4938      	ldr	r1, [pc, #224]	; (800cf18 <_dtoa_r+0x5a0>)
 800ce38:	f7f3 fa46 	bl	80002c8 <__aeabi_dsub>
 800ce3c:	462a      	mov	r2, r5
 800ce3e:	4633      	mov	r3, r6
 800ce40:	f7f3 fe68 	bl	8000b14 <__aeabi_dcmplt>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f040 80d2 	bne.w	800cfee <_dtoa_r+0x676>
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	1ae3      	subs	r3, r4, r3
 800ce4e:	42bb      	cmp	r3, r7
 800ce50:	da6c      	bge.n	800cf2c <_dtoa_r+0x5b4>
 800ce52:	2200      	movs	r2, #0
 800ce54:	4b31      	ldr	r3, [pc, #196]	; (800cf1c <_dtoa_r+0x5a4>)
 800ce56:	4628      	mov	r0, r5
 800ce58:	4631      	mov	r1, r6
 800ce5a:	f7f3 fbe9 	bl	8000630 <__aeabi_dmul>
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4605      	mov	r5, r0
 800ce62:	460e      	mov	r6, r1
 800ce64:	4b2d      	ldr	r3, [pc, #180]	; (800cf1c <_dtoa_r+0x5a4>)
 800ce66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce6a:	f7f3 fbe1 	bl	8000630 <__aeabi_dmul>
 800ce6e:	e9cd 0100 	strd	r0, r1, [sp]
 800ce72:	e7c3      	b.n	800cdfc <_dtoa_r+0x484>
 800ce74:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ce78:	4622      	mov	r2, r4
 800ce7a:	462b      	mov	r3, r5
 800ce7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce80:	f7f3 fbd6 	bl	8000630 <__aeabi_dmul>
 800ce84:	9b04      	ldr	r3, [sp, #16]
 800ce86:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800ce8a:	19dc      	adds	r4, r3, r7
 800ce8c:	461d      	mov	r5, r3
 800ce8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce92:	f7f3 fe7d 	bl	8000b90 <__aeabi_d2iz>
 800ce96:	4606      	mov	r6, r0
 800ce98:	f7f3 fb64 	bl	8000564 <__aeabi_i2d>
 800ce9c:	3630      	adds	r6, #48	; 0x30
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea6:	f7f3 fa0f 	bl	80002c8 <__aeabi_dsub>
 800ceaa:	f805 6b01 	strb.w	r6, [r5], #1
 800ceae:	42ac      	cmp	r4, r5
 800ceb0:	e9cd 0100 	strd	r0, r1, [sp]
 800ceb4:	f04f 0200 	mov.w	r2, #0
 800ceb8:	d123      	bne.n	800cf02 <_dtoa_r+0x58a>
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <_dtoa_r+0x5b0>)
 800cebc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800cec0:	f7f3 fa04 	bl	80002cc <__adddf3>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cecc:	f7f3 fe40 	bl	8000b50 <__aeabi_dcmpgt>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	f040 808c 	bne.w	800cfee <_dtoa_r+0x676>
 800ced6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ceda:	2000      	movs	r0, #0
 800cedc:	4912      	ldr	r1, [pc, #72]	; (800cf28 <_dtoa_r+0x5b0>)
 800cede:	f7f3 f9f3 	bl	80002c8 <__aeabi_dsub>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceea:	f7f3 fe13 	bl	8000b14 <__aeabi_dcmplt>
 800ceee:	b1e8      	cbz	r0, 800cf2c <_dtoa_r+0x5b4>
 800cef0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800cef4:	2b30      	cmp	r3, #48	; 0x30
 800cef6:	f104 32ff 	add.w	r2, r4, #4294967295
 800cefa:	f040 82ba 	bne.w	800d472 <_dtoa_r+0xafa>
 800cefe:	4614      	mov	r4, r2
 800cf00:	e7f6      	b.n	800cef0 <_dtoa_r+0x578>
 800cf02:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <_dtoa_r+0x5a4>)
 800cf04:	f7f3 fb94 	bl	8000630 <__aeabi_dmul>
 800cf08:	e9cd 0100 	strd	r0, r1, [sp]
 800cf0c:	e7bf      	b.n	800ce8e <_dtoa_r+0x516>
 800cf0e:	bf00      	nop
 800cf10:	08011bb8 	.word	0x08011bb8
 800cf14:	08011c80 	.word	0x08011c80
 800cf18:	3ff00000 	.word	0x3ff00000
 800cf1c:	40240000 	.word	0x40240000
 800cf20:	401c0000 	.word	0x401c0000
 800cf24:	40140000 	.word	0x40140000
 800cf28:	3fe00000 	.word	0x3fe00000
 800cf2c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800cf30:	e88d 0018 	stmia.w	sp, {r3, r4}
 800cf34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	db7c      	blt.n	800d034 <_dtoa_r+0x6bc>
 800cf3a:	f1bb 0f0e 	cmp.w	fp, #14
 800cf3e:	dc79      	bgt.n	800d034 <_dtoa_r+0x6bc>
 800cf40:	4b8f      	ldr	r3, [pc, #572]	; (800d180 <_dtoa_r+0x808>)
 800cf42:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf46:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	da14      	bge.n	800cf7a <_dtoa_r+0x602>
 800cf50:	f1b8 0f00 	cmp.w	r8, #0
 800cf54:	dc11      	bgt.n	800cf7a <_dtoa_r+0x602>
 800cf56:	f040 816c 	bne.w	800d232 <_dtoa_r+0x8ba>
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4b89      	ldr	r3, [pc, #548]	; (800d184 <_dtoa_r+0x80c>)
 800cf5e:	4630      	mov	r0, r6
 800cf60:	4639      	mov	r1, r7
 800cf62:	f7f3 fb65 	bl	8000630 <__aeabi_dmul>
 800cf66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf6a:	f7f3 fde7 	bl	8000b3c <__aeabi_dcmpge>
 800cf6e:	4645      	mov	r5, r8
 800cf70:	4646      	mov	r6, r8
 800cf72:	2800      	cmp	r0, #0
 800cf74:	f040 815f 	bne.w	800d236 <_dtoa_r+0x8be>
 800cf78:	e166      	b.n	800d248 <_dtoa_r+0x8d0>
 800cf7a:	9c04      	ldr	r4, [sp, #16]
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	463b      	mov	r3, r7
 800cf80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf84:	f7f3 fc7e 	bl	8000884 <__aeabi_ddiv>
 800cf88:	f7f3 fe02 	bl	8000b90 <__aeabi_d2iz>
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	f7f3 fae9 	bl	8000564 <__aeabi_i2d>
 800cf92:	4632      	mov	r2, r6
 800cf94:	463b      	mov	r3, r7
 800cf96:	f7f3 fb4b 	bl	8000630 <__aeabi_dmul>
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfa2:	f7f3 f991 	bl	80002c8 <__aeabi_dsub>
 800cfa6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800cfaa:	f804 eb01 	strb.w	lr, [r4], #1
 800cfae:	9b04      	ldr	r3, [sp, #16]
 800cfb0:	ebc3 0e04 	rsb	lr, r3, r4
 800cfb4:	45f0      	cmp	r8, lr
 800cfb6:	e9cd 0100 	strd	r0, r1, [sp]
 800cfba:	d12e      	bne.n	800d01a <_dtoa_r+0x6a2>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	f7f3 f984 	bl	80002cc <__adddf3>
 800cfc4:	4680      	mov	r8, r0
 800cfc6:	4689      	mov	r9, r1
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 fda0 	bl	8000b14 <__aeabi_dcmplt>
 800cfd4:	b978      	cbnz	r0, 800cff6 <_dtoa_r+0x67e>
 800cfd6:	4642      	mov	r2, r8
 800cfd8:	464b      	mov	r3, r9
 800cfda:	4630      	mov	r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	f7f3 fd8f 	bl	8000b00 <__aeabi_dcmpeq>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	f000 8247 	beq.w	800d476 <_dtoa_r+0xafe>
 800cfe8:	07e9      	lsls	r1, r5, #31
 800cfea:	d404      	bmi.n	800cff6 <_dtoa_r+0x67e>
 800cfec:	e243      	b.n	800d476 <_dtoa_r+0xafe>
 800cfee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800cff2:	e000      	b.n	800cff6 <_dtoa_r+0x67e>
 800cff4:	461c      	mov	r4, r3
 800cff6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800cffa:	2a39      	cmp	r2, #57	; 0x39
 800cffc:	f104 33ff 	add.w	r3, r4, #4294967295
 800d000:	d107      	bne.n	800d012 <_dtoa_r+0x69a>
 800d002:	9a04      	ldr	r2, [sp, #16]
 800d004:	429a      	cmp	r2, r3
 800d006:	d1f5      	bne.n	800cff4 <_dtoa_r+0x67c>
 800d008:	9904      	ldr	r1, [sp, #16]
 800d00a:	2230      	movs	r2, #48	; 0x30
 800d00c:	f10b 0b01 	add.w	fp, fp, #1
 800d010:	700a      	strb	r2, [r1, #0]
 800d012:	781a      	ldrb	r2, [r3, #0]
 800d014:	3201      	adds	r2, #1
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	e22d      	b.n	800d476 <_dtoa_r+0xafe>
 800d01a:	2200      	movs	r2, #0
 800d01c:	4b5a      	ldr	r3, [pc, #360]	; (800d188 <_dtoa_r+0x810>)
 800d01e:	f7f3 fb07 	bl	8000630 <__aeabi_dmul>
 800d022:	2200      	movs	r2, #0
 800d024:	2300      	movs	r3, #0
 800d026:	e9cd 0100 	strd	r0, r1, [sp]
 800d02a:	f7f3 fd69 	bl	8000b00 <__aeabi_dcmpeq>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d0a4      	beq.n	800cf7c <_dtoa_r+0x604>
 800d032:	e220      	b.n	800d476 <_dtoa_r+0xafe>
 800d034:	9a08      	ldr	r2, [sp, #32]
 800d036:	2a00      	cmp	r2, #0
 800d038:	d02d      	beq.n	800d096 <_dtoa_r+0x71e>
 800d03a:	9a06      	ldr	r2, [sp, #24]
 800d03c:	2a01      	cmp	r2, #1
 800d03e:	dc0a      	bgt.n	800d056 <_dtoa_r+0x6de>
 800d040:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d042:	b112      	cbz	r2, 800d04a <_dtoa_r+0x6d2>
 800d044:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d048:	e002      	b.n	800d050 <_dtoa_r+0x6d8>
 800d04a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d04c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d050:	9d07      	ldr	r5, [sp, #28]
 800d052:	464c      	mov	r4, r9
 800d054:	e015      	b.n	800d082 <_dtoa_r+0x70a>
 800d056:	9b07      	ldr	r3, [sp, #28]
 800d058:	f108 35ff 	add.w	r5, r8, #4294967295
 800d05c:	42ab      	cmp	r3, r5
 800d05e:	bfbf      	itttt	lt
 800d060:	9b07      	ldrlt	r3, [sp, #28]
 800d062:	9507      	strlt	r5, [sp, #28]
 800d064:	1aea      	sublt	r2, r5, r3
 800d066:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d068:	bfb7      	itett	lt
 800d06a:	189b      	addlt	r3, r3, r2
 800d06c:	1b5d      	subge	r5, r3, r5
 800d06e:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d070:	2500      	movlt	r5, #0
 800d072:	f1b8 0f00 	cmp.w	r8, #0
 800d076:	bfb9      	ittee	lt
 800d078:	ebc8 0409 	rsblt	r4, r8, r9
 800d07c:	2300      	movlt	r3, #0
 800d07e:	464c      	movge	r4, r9
 800d080:	4643      	movge	r3, r8
 800d082:	9a05      	ldr	r2, [sp, #20]
 800d084:	2101      	movs	r1, #1
 800d086:	441a      	add	r2, r3
 800d088:	4650      	mov	r0, sl
 800d08a:	4499      	add	r9, r3
 800d08c:	9205      	str	r2, [sp, #20]
 800d08e:	f001 f980 	bl	800e392 <__i2b>
 800d092:	4606      	mov	r6, r0
 800d094:	e002      	b.n	800d09c <_dtoa_r+0x724>
 800d096:	9d07      	ldr	r5, [sp, #28]
 800d098:	9e08      	ldr	r6, [sp, #32]
 800d09a:	464c      	mov	r4, r9
 800d09c:	b15c      	cbz	r4, 800d0b6 <_dtoa_r+0x73e>
 800d09e:	9b05      	ldr	r3, [sp, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	dd08      	ble.n	800d0b6 <_dtoa_r+0x73e>
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	9a05      	ldr	r2, [sp, #20]
 800d0a8:	bfa8      	it	ge
 800d0aa:	4623      	movge	r3, r4
 800d0ac:	ebc3 0909 	rsb	r9, r3, r9
 800d0b0:	1ae4      	subs	r4, r4, r3
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	9305      	str	r3, [sp, #20]
 800d0b6:	9b07      	ldr	r3, [sp, #28]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dd1d      	ble.n	800d0f8 <_dtoa_r+0x780>
 800d0bc:	9b08      	ldr	r3, [sp, #32]
 800d0be:	b1ab      	cbz	r3, 800d0ec <_dtoa_r+0x774>
 800d0c0:	b185      	cbz	r5, 800d0e4 <_dtoa_r+0x76c>
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	f001 f9fe 	bl	800e4c8 <__pow5mult>
 800d0cc:	9a02      	ldr	r2, [sp, #8]
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	4650      	mov	r0, sl
 800d0d4:	f001 f966 	bl	800e3a4 <__multiply>
 800d0d8:	9902      	ldr	r1, [sp, #8]
 800d0da:	4607      	mov	r7, r0
 800d0dc:	4650      	mov	r0, sl
 800d0de:	f001 f8b9 	bl	800e254 <_Bfree>
 800d0e2:	9702      	str	r7, [sp, #8]
 800d0e4:	9b07      	ldr	r3, [sp, #28]
 800d0e6:	1b5a      	subs	r2, r3, r5
 800d0e8:	d006      	beq.n	800d0f8 <_dtoa_r+0x780>
 800d0ea:	e000      	b.n	800d0ee <_dtoa_r+0x776>
 800d0ec:	9a07      	ldr	r2, [sp, #28]
 800d0ee:	9902      	ldr	r1, [sp, #8]
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	f001 f9e9 	bl	800e4c8 <__pow5mult>
 800d0f6:	9002      	str	r0, [sp, #8]
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	f001 f949 	bl	800e392 <__i2b>
 800d100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d102:	4605      	mov	r5, r0
 800d104:	b35b      	cbz	r3, 800d15e <_dtoa_r+0x7e6>
 800d106:	461a      	mov	r2, r3
 800d108:	4601      	mov	r1, r0
 800d10a:	4650      	mov	r0, sl
 800d10c:	f001 f9dc 	bl	800e4c8 <__pow5mult>
 800d110:	9b06      	ldr	r3, [sp, #24]
 800d112:	2b01      	cmp	r3, #1
 800d114:	4605      	mov	r5, r0
 800d116:	dc18      	bgt.n	800d14a <_dtoa_r+0x7d2>
 800d118:	9b00      	ldr	r3, [sp, #0]
 800d11a:	b983      	cbnz	r3, 800d13e <_dtoa_r+0x7c6>
 800d11c:	9b01      	ldr	r3, [sp, #4]
 800d11e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d122:	b973      	cbnz	r3, 800d142 <_dtoa_r+0x7ca>
 800d124:	9b01      	ldr	r3, [sp, #4]
 800d126:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800d12a:	0d3f      	lsrs	r7, r7, #20
 800d12c:	053f      	lsls	r7, r7, #20
 800d12e:	b14f      	cbz	r7, 800d144 <_dtoa_r+0x7cc>
 800d130:	9b05      	ldr	r3, [sp, #20]
 800d132:	3301      	adds	r3, #1
 800d134:	f109 0901 	add.w	r9, r9, #1
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	2701      	movs	r7, #1
 800d13c:	e002      	b.n	800d144 <_dtoa_r+0x7cc>
 800d13e:	2700      	movs	r7, #0
 800d140:	e000      	b.n	800d144 <_dtoa_r+0x7cc>
 800d142:	9f00      	ldr	r7, [sp, #0]
 800d144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d146:	b173      	cbz	r3, 800d166 <_dtoa_r+0x7ee>
 800d148:	e000      	b.n	800d14c <_dtoa_r+0x7d4>
 800d14a:	2700      	movs	r7, #0
 800d14c:	692b      	ldr	r3, [r5, #16]
 800d14e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d152:	6918      	ldr	r0, [r3, #16]
 800d154:	f001 f8d0 	bl	800e2f8 <__hi0bits>
 800d158:	f1c0 0020 	rsb	r0, r0, #32
 800d15c:	e004      	b.n	800d168 <_dtoa_r+0x7f0>
 800d15e:	9b06      	ldr	r3, [sp, #24]
 800d160:	2b01      	cmp	r3, #1
 800d162:	ddd9      	ble.n	800d118 <_dtoa_r+0x7a0>
 800d164:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d166:	2001      	movs	r0, #1
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	4418      	add	r0, r3
 800d16c:	f010 001f 	ands.w	r0, r0, #31
 800d170:	d00e      	beq.n	800d190 <_dtoa_r+0x818>
 800d172:	f1c0 0320 	rsb	r3, r0, #32
 800d176:	2b04      	cmp	r3, #4
 800d178:	dd08      	ble.n	800d18c <_dtoa_r+0x814>
 800d17a:	f1c0 001c 	rsb	r0, r0, #28
 800d17e:	e008      	b.n	800d192 <_dtoa_r+0x81a>
 800d180:	08011bb8 	.word	0x08011bb8
 800d184:	40140000 	.word	0x40140000
 800d188:	40240000 	.word	0x40240000
 800d18c:	d006      	beq.n	800d19c <_dtoa_r+0x824>
 800d18e:	4618      	mov	r0, r3
 800d190:	301c      	adds	r0, #28
 800d192:	9b05      	ldr	r3, [sp, #20]
 800d194:	4403      	add	r3, r0
 800d196:	4481      	add	r9, r0
 800d198:	4404      	add	r4, r0
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	f1b9 0f00 	cmp.w	r9, #0
 800d1a0:	dd05      	ble.n	800d1ae <_dtoa_r+0x836>
 800d1a2:	464a      	mov	r2, r9
 800d1a4:	9902      	ldr	r1, [sp, #8]
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	f001 f9dc 	bl	800e564 <__lshift>
 800d1ac:	9002      	str	r0, [sp, #8]
 800d1ae:	9b05      	ldr	r3, [sp, #20]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dd05      	ble.n	800d1c0 <_dtoa_r+0x848>
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	f001 f9d3 	bl	800e564 <__lshift>
 800d1be:	4605      	mov	r5, r0
 800d1c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1c2:	b1eb      	cbz	r3, 800d200 <_dtoa_r+0x888>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	9802      	ldr	r0, [sp, #8]
 800d1c8:	f001 fa1d 	bl	800e606 <__mcmp>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	da17      	bge.n	800d200 <_dtoa_r+0x888>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	220a      	movs	r2, #10
 800d1d4:	9902      	ldr	r1, [sp, #8]
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	f001 f853 	bl	800e282 <__multadd>
 800d1dc:	9b08      	ldr	r3, [sp, #32]
 800d1de:	9002      	str	r0, [sp, #8]
 800d1e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 8158 	beq.w	800d49a <_dtoa_r+0xb22>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	220a      	movs	r2, #10
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	f001 f846 	bl	800e282 <__multadd>
 800d1f6:	9b03      	ldr	r3, [sp, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	dc37      	bgt.n	800d26e <_dtoa_r+0x8f6>
 800d1fe:	e033      	b.n	800d268 <_dtoa_r+0x8f0>
 800d200:	f1b8 0f00 	cmp.w	r8, #0
 800d204:	dc2a      	bgt.n	800d25c <_dtoa_r+0x8e4>
 800d206:	9b06      	ldr	r3, [sp, #24]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	dd27      	ble.n	800d25c <_dtoa_r+0x8e4>
 800d20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d210:	9b03      	ldr	r3, [sp, #12]
 800d212:	b983      	cbnz	r3, 800d236 <_dtoa_r+0x8be>
 800d214:	4629      	mov	r1, r5
 800d216:	2205      	movs	r2, #5
 800d218:	4650      	mov	r0, sl
 800d21a:	f001 f832 	bl	800e282 <__multadd>
 800d21e:	4601      	mov	r1, r0
 800d220:	4605      	mov	r5, r0
 800d222:	9802      	ldr	r0, [sp, #8]
 800d224:	f001 f9ef 	bl	800e606 <__mcmp>
 800d228:	2800      	cmp	r0, #0
 800d22a:	dc0d      	bgt.n	800d248 <_dtoa_r+0x8d0>
 800d22c:	e003      	b.n	800d236 <_dtoa_r+0x8be>
 800d22e:	463d      	mov	r5, r7
 800d230:	e000      	b.n	800d234 <_dtoa_r+0x8bc>
 800d232:	2500      	movs	r5, #0
 800d234:	462e      	mov	r6, r5
 800d236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d238:	9c04      	ldr	r4, [sp, #16]
 800d23a:	ea6f 0b03 	mvn.w	fp, r3
 800d23e:	e00a      	b.n	800d256 <_dtoa_r+0x8de>
 800d240:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d244:	463d      	mov	r5, r7
 800d246:	463e      	mov	r6, r7
 800d248:	9b04      	ldr	r3, [sp, #16]
 800d24a:	9a04      	ldr	r2, [sp, #16]
 800d24c:	1c5c      	adds	r4, r3, #1
 800d24e:	2331      	movs	r3, #49	; 0x31
 800d250:	7013      	strb	r3, [r2, #0]
 800d252:	f10b 0b01 	add.w	fp, fp, #1
 800d256:	46b0      	mov	r8, r6
 800d258:	2600      	movs	r6, #0
 800d25a:	e0f7      	b.n	800d44c <_dtoa_r+0xad4>
 800d25c:	9b08      	ldr	r3, [sp, #32]
 800d25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d262:	b923      	cbnz	r3, 800d26e <_dtoa_r+0x8f6>
 800d264:	9c04      	ldr	r4, [sp, #16]
 800d266:	e0b1      	b.n	800d3cc <_dtoa_r+0xa54>
 800d268:	9b06      	ldr	r3, [sp, #24]
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	dcd0      	bgt.n	800d210 <_dtoa_r+0x898>
 800d26e:	2c00      	cmp	r4, #0
 800d270:	dd05      	ble.n	800d27e <_dtoa_r+0x906>
 800d272:	4631      	mov	r1, r6
 800d274:	4622      	mov	r2, r4
 800d276:	4650      	mov	r0, sl
 800d278:	f001 f974 	bl	800e564 <__lshift>
 800d27c:	4606      	mov	r6, r0
 800d27e:	b19f      	cbz	r7, 800d2a8 <_dtoa_r+0x930>
 800d280:	6871      	ldr	r1, [r6, #4]
 800d282:	4650      	mov	r0, sl
 800d284:	f000 ffb1 	bl	800e1ea <_Balloc>
 800d288:	6932      	ldr	r2, [r6, #16]
 800d28a:	3202      	adds	r2, #2
 800d28c:	4604      	mov	r4, r0
 800d28e:	0092      	lsls	r2, r2, #2
 800d290:	f106 010c 	add.w	r1, r6, #12
 800d294:	300c      	adds	r0, #12
 800d296:	f7fe f95f 	bl	800b558 <memcpy>
 800d29a:	2201      	movs	r2, #1
 800d29c:	4621      	mov	r1, r4
 800d29e:	4650      	mov	r0, sl
 800d2a0:	f001 f960 	bl	800e564 <__lshift>
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	e000      	b.n	800d2aa <_dtoa_r+0x932>
 800d2a8:	46b0      	mov	r8, r6
 800d2aa:	9b00      	ldr	r3, [sp, #0]
 800d2ac:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	9305      	str	r3, [sp, #20]
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	9802      	ldr	r0, [sp, #8]
 800d2ba:	f7ff facd 	bl	800c858 <quorem>
 800d2be:	4631      	mov	r1, r6
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800d2c6:	9802      	ldr	r0, [sp, #8]
 800d2c8:	f001 f99d 	bl	800e606 <__mcmp>
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	9000      	str	r0, [sp, #0]
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	f001 f9b3 	bl	800e63e <__mdiff>
 800d2d8:	68c3      	ldr	r3, [r0, #12]
 800d2da:	4602      	mov	r2, r0
 800d2dc:	b93b      	cbnz	r3, 800d2ee <_dtoa_r+0x976>
 800d2de:	4601      	mov	r1, r0
 800d2e0:	9007      	str	r0, [sp, #28]
 800d2e2:	9802      	ldr	r0, [sp, #8]
 800d2e4:	f001 f98f 	bl	800e606 <__mcmp>
 800d2e8:	9a07      	ldr	r2, [sp, #28]
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	e000      	b.n	800d2f0 <_dtoa_r+0x978>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	4650      	mov	r0, sl
 800d2f4:	9307      	str	r3, [sp, #28]
 800d2f6:	f000 ffad 	bl	800e254 <_Bfree>
 800d2fa:	9b07      	ldr	r3, [sp, #28]
 800d2fc:	b94b      	cbnz	r3, 800d312 <_dtoa_r+0x99a>
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	b93a      	cbnz	r2, 800d312 <_dtoa_r+0x99a>
 800d302:	9a05      	ldr	r2, [sp, #20]
 800d304:	b92a      	cbnz	r2, 800d312 <_dtoa_r+0x99a>
 800d306:	2f39      	cmp	r7, #57	; 0x39
 800d308:	d028      	beq.n	800d35c <_dtoa_r+0x9e4>
 800d30a:	9b00      	ldr	r3, [sp, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	dc1a      	bgt.n	800d346 <_dtoa_r+0x9ce>
 800d310:	e01b      	b.n	800d34a <_dtoa_r+0x9d2>
 800d312:	9a00      	ldr	r2, [sp, #0]
 800d314:	2a00      	cmp	r2, #0
 800d316:	db04      	blt.n	800d322 <_dtoa_r+0x9aa>
 800d318:	d11a      	bne.n	800d350 <_dtoa_r+0x9d8>
 800d31a:	9a06      	ldr	r2, [sp, #24]
 800d31c:	b9c2      	cbnz	r2, 800d350 <_dtoa_r+0x9d8>
 800d31e:	9a05      	ldr	r2, [sp, #20]
 800d320:	b9b2      	cbnz	r2, 800d350 <_dtoa_r+0x9d8>
 800d322:	2b00      	cmp	r3, #0
 800d324:	dd11      	ble.n	800d34a <_dtoa_r+0x9d2>
 800d326:	2201      	movs	r2, #1
 800d328:	9902      	ldr	r1, [sp, #8]
 800d32a:	4650      	mov	r0, sl
 800d32c:	f001 f91a 	bl	800e564 <__lshift>
 800d330:	4629      	mov	r1, r5
 800d332:	9002      	str	r0, [sp, #8]
 800d334:	f001 f967 	bl	800e606 <__mcmp>
 800d338:	2800      	cmp	r0, #0
 800d33a:	dc02      	bgt.n	800d342 <_dtoa_r+0x9ca>
 800d33c:	d105      	bne.n	800d34a <_dtoa_r+0x9d2>
 800d33e:	07fa      	lsls	r2, r7, #31
 800d340:	d503      	bpl.n	800d34a <_dtoa_r+0x9d2>
 800d342:	2f39      	cmp	r7, #57	; 0x39
 800d344:	d00a      	beq.n	800d35c <_dtoa_r+0x9e4>
 800d346:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800d34a:	f109 0401 	add.w	r4, r9, #1
 800d34e:	e00c      	b.n	800d36a <_dtoa_r+0x9f2>
 800d350:	2b00      	cmp	r3, #0
 800d352:	f109 0401 	add.w	r4, r9, #1
 800d356:	dd0b      	ble.n	800d370 <_dtoa_r+0x9f8>
 800d358:	2f39      	cmp	r7, #57	; 0x39
 800d35a:	d105      	bne.n	800d368 <_dtoa_r+0x9f0>
 800d35c:	2339      	movs	r3, #57	; 0x39
 800d35e:	f889 3000 	strb.w	r3, [r9]
 800d362:	f109 0901 	add.w	r9, r9, #1
 800d366:	e054      	b.n	800d412 <_dtoa_r+0xa9a>
 800d368:	3701      	adds	r7, #1
 800d36a:	f889 7000 	strb.w	r7, [r9]
 800d36e:	e06d      	b.n	800d44c <_dtoa_r+0xad4>
 800d370:	9b04      	ldr	r3, [sp, #16]
 800d372:	9a03      	ldr	r2, [sp, #12]
 800d374:	f804 7c01 	strb.w	r7, [r4, #-1]
 800d378:	1ae3      	subs	r3, r4, r3
 800d37a:	4293      	cmp	r3, r2
 800d37c:	46a1      	mov	r9, r4
 800d37e:	d03a      	beq.n	800d3f6 <_dtoa_r+0xa7e>
 800d380:	2300      	movs	r3, #0
 800d382:	220a      	movs	r2, #10
 800d384:	9902      	ldr	r1, [sp, #8]
 800d386:	4650      	mov	r0, sl
 800d388:	f000 ff7b 	bl	800e282 <__multadd>
 800d38c:	4546      	cmp	r6, r8
 800d38e:	9002      	str	r0, [sp, #8]
 800d390:	f04f 0300 	mov.w	r3, #0
 800d394:	f04f 020a 	mov.w	r2, #10
 800d398:	4631      	mov	r1, r6
 800d39a:	4650      	mov	r0, sl
 800d39c:	d104      	bne.n	800d3a8 <_dtoa_r+0xa30>
 800d39e:	f000 ff70 	bl	800e282 <__multadd>
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	e786      	b.n	800d2b6 <_dtoa_r+0x93e>
 800d3a8:	f000 ff6b 	bl	800e282 <__multadd>
 800d3ac:	4641      	mov	r1, r8
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	220a      	movs	r2, #10
 800d3b4:	4650      	mov	r0, sl
 800d3b6:	f000 ff64 	bl	800e282 <__multadd>
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	e77b      	b.n	800d2b6 <_dtoa_r+0x93e>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	220a      	movs	r2, #10
 800d3c2:	9902      	ldr	r1, [sp, #8]
 800d3c4:	4650      	mov	r0, sl
 800d3c6:	f000 ff5c 	bl	800e282 <__multadd>
 800d3ca:	9002      	str	r0, [sp, #8]
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	9802      	ldr	r0, [sp, #8]
 800d3d0:	f7ff fa42 	bl	800c858 <quorem>
 800d3d4:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800d3d8:	f804 7b01 	strb.w	r7, [r4], #1
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	9a03      	ldr	r2, [sp, #12]
 800d3e0:	1ae3      	subs	r3, r4, r3
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	dbeb      	blt.n	800d3be <_dtoa_r+0xa46>
 800d3e6:	9b04      	ldr	r3, [sp, #16]
 800d3e8:	2a01      	cmp	r2, #1
 800d3ea:	bfac      	ite	ge
 800d3ec:	189b      	addge	r3, r3, r2
 800d3ee:	3301      	addlt	r3, #1
 800d3f0:	46b0      	mov	r8, r6
 800d3f2:	4699      	mov	r9, r3
 800d3f4:	2600      	movs	r6, #0
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	9902      	ldr	r1, [sp, #8]
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	f001 f8b2 	bl	800e564 <__lshift>
 800d400:	4629      	mov	r1, r5
 800d402:	9002      	str	r0, [sp, #8]
 800d404:	f001 f8ff 	bl	800e606 <__mcmp>
 800d408:	2800      	cmp	r0, #0
 800d40a:	dc02      	bgt.n	800d412 <_dtoa_r+0xa9a>
 800d40c:	d115      	bne.n	800d43a <_dtoa_r+0xac2>
 800d40e:	07fb      	lsls	r3, r7, #31
 800d410:	d513      	bpl.n	800d43a <_dtoa_r+0xac2>
 800d412:	464c      	mov	r4, r9
 800d414:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d418:	2b39      	cmp	r3, #57	; 0x39
 800d41a:	f104 32ff 	add.w	r2, r4, #4294967295
 800d41e:	d109      	bne.n	800d434 <_dtoa_r+0xabc>
 800d420:	9b04      	ldr	r3, [sp, #16]
 800d422:	4293      	cmp	r3, r2
 800d424:	d104      	bne.n	800d430 <_dtoa_r+0xab8>
 800d426:	f10b 0b01 	add.w	fp, fp, #1
 800d42a:	2331      	movs	r3, #49	; 0x31
 800d42c:	9a04      	ldr	r2, [sp, #16]
 800d42e:	e002      	b.n	800d436 <_dtoa_r+0xabe>
 800d430:	4614      	mov	r4, r2
 800d432:	e7ef      	b.n	800d414 <_dtoa_r+0xa9c>
 800d434:	3301      	adds	r3, #1
 800d436:	7013      	strb	r3, [r2, #0]
 800d438:	e008      	b.n	800d44c <_dtoa_r+0xad4>
 800d43a:	464c      	mov	r4, r9
 800d43c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d440:	2b30      	cmp	r3, #48	; 0x30
 800d442:	f104 32ff 	add.w	r2, r4, #4294967295
 800d446:	d101      	bne.n	800d44c <_dtoa_r+0xad4>
 800d448:	4614      	mov	r4, r2
 800d44a:	e7f7      	b.n	800d43c <_dtoa_r+0xac4>
 800d44c:	4629      	mov	r1, r5
 800d44e:	4650      	mov	r0, sl
 800d450:	f000 ff00 	bl	800e254 <_Bfree>
 800d454:	f1b8 0f00 	cmp.w	r8, #0
 800d458:	d00d      	beq.n	800d476 <_dtoa_r+0xafe>
 800d45a:	b12e      	cbz	r6, 800d468 <_dtoa_r+0xaf0>
 800d45c:	4546      	cmp	r6, r8
 800d45e:	d003      	beq.n	800d468 <_dtoa_r+0xaf0>
 800d460:	4631      	mov	r1, r6
 800d462:	4650      	mov	r0, sl
 800d464:	f000 fef6 	bl	800e254 <_Bfree>
 800d468:	4641      	mov	r1, r8
 800d46a:	4650      	mov	r0, sl
 800d46c:	f000 fef2 	bl	800e254 <_Bfree>
 800d470:	e001      	b.n	800d476 <_dtoa_r+0xafe>
 800d472:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d476:	9902      	ldr	r1, [sp, #8]
 800d478:	4650      	mov	r0, sl
 800d47a:	f000 feeb 	bl	800e254 <_Bfree>
 800d47e:	2300      	movs	r3, #0
 800d480:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d482:	7023      	strb	r3, [r4, #0]
 800d484:	f10b 0301 	add.w	r3, fp, #1
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d48c:	b11b      	cbz	r3, 800d496 <_dtoa_r+0xb1e>
 800d48e:	601c      	str	r4, [r3, #0]
 800d490:	e001      	b.n	800d496 <_dtoa_r+0xb1e>
 800d492:	4808      	ldr	r0, [pc, #32]	; (800d4b4 <_dtoa_r+0xb3c>)
 800d494:	e00a      	b.n	800d4ac <_dtoa_r+0xb34>
 800d496:	9804      	ldr	r0, [sp, #16]
 800d498:	e008      	b.n	800d4ac <_dtoa_r+0xb34>
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f73f aee1 	bgt.w	800d264 <_dtoa_r+0x8ec>
 800d4a2:	9b06      	ldr	r3, [sp, #24]
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	f77f aedd 	ble.w	800d264 <_dtoa_r+0x8ec>
 800d4aa:	e6b1      	b.n	800d210 <_dtoa_r+0x898>
 800d4ac:	b017      	add	sp, #92	; 0x5c
 800d4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b2:	bf00      	nop
 800d4b4:	08011a2c 	.word	0x08011a2c

0800d4b8 <__sflush_r>:
 800d4b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4bc:	b293      	uxth	r3, r2
 800d4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	0718      	lsls	r0, r3, #28
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	d460      	bmi.n	800d58c <__sflush_r+0xd4>
 800d4ca:	684b      	ldr	r3, [r1, #4]
 800d4cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	818a      	strh	r2, [r1, #12]
 800d4d4:	dc02      	bgt.n	800d4dc <__sflush_r+0x24>
 800d4d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dd17      	ble.n	800d50c <__sflush_r+0x54>
 800d4dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4de:	b1ae      	cbz	r6, 800d50c <__sflush_r+0x54>
 800d4e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	b292      	uxth	r2, r2
 800d4e8:	682f      	ldr	r7, [r5, #0]
 800d4ea:	602b      	str	r3, [r5, #0]
 800d4ec:	b10a      	cbz	r2, 800d4f2 <__sflush_r+0x3a>
 800d4ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4f0:	e015      	b.n	800d51e <__sflush_r+0x66>
 800d4f2:	6a21      	ldr	r1, [r4, #32]
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	47b0      	blx	r6
 800d4fa:	1c41      	adds	r1, r0, #1
 800d4fc:	d10f      	bne.n	800d51e <__sflush_r+0x66>
 800d4fe:	682b      	ldr	r3, [r5, #0]
 800d500:	b16b      	cbz	r3, 800d51e <__sflush_r+0x66>
 800d502:	2b1d      	cmp	r3, #29
 800d504:	d001      	beq.n	800d50a <__sflush_r+0x52>
 800d506:	2b16      	cmp	r3, #22
 800d508:	d103      	bne.n	800d512 <__sflush_r+0x5a>
 800d50a:	602f      	str	r7, [r5, #0]
 800d50c:	2000      	movs	r0, #0
 800d50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d518:	81a3      	strh	r3, [r4, #12]
 800d51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	075a      	lsls	r2, r3, #29
 800d522:	d505      	bpl.n	800d530 <__sflush_r+0x78>
 800d524:	6863      	ldr	r3, [r4, #4]
 800d526:	1ac0      	subs	r0, r0, r3
 800d528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d52a:	b10b      	cbz	r3, 800d530 <__sflush_r+0x78>
 800d52c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d52e:	1ac0      	subs	r0, r0, r3
 800d530:	2300      	movs	r3, #0
 800d532:	4602      	mov	r2, r0
 800d534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d536:	6a21      	ldr	r1, [r4, #32]
 800d538:	4628      	mov	r0, r5
 800d53a:	47b0      	blx	r6
 800d53c:	1c43      	adds	r3, r0, #1
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	d106      	bne.n	800d550 <__sflush_r+0x98>
 800d542:	6829      	ldr	r1, [r5, #0]
 800d544:	291d      	cmp	r1, #29
 800d546:	d83e      	bhi.n	800d5c6 <__sflush_r+0x10e>
 800d548:	4a22      	ldr	r2, [pc, #136]	; (800d5d4 <__sflush_r+0x11c>)
 800d54a:	40ca      	lsrs	r2, r1
 800d54c:	07d6      	lsls	r6, r2, #31
 800d54e:	d53a      	bpl.n	800d5c6 <__sflush_r+0x10e>
 800d550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d554:	b21b      	sxth	r3, r3
 800d556:	2200      	movs	r2, #0
 800d558:	6062      	str	r2, [r4, #4]
 800d55a:	04d9      	lsls	r1, r3, #19
 800d55c:	6922      	ldr	r2, [r4, #16]
 800d55e:	81a3      	strh	r3, [r4, #12]
 800d560:	6022      	str	r2, [r4, #0]
 800d562:	d504      	bpl.n	800d56e <__sflush_r+0xb6>
 800d564:	1c42      	adds	r2, r0, #1
 800d566:	d101      	bne.n	800d56c <__sflush_r+0xb4>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	b903      	cbnz	r3, 800d56e <__sflush_r+0xb6>
 800d56c:	6560      	str	r0, [r4, #84]	; 0x54
 800d56e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d570:	602f      	str	r7, [r5, #0]
 800d572:	2900      	cmp	r1, #0
 800d574:	d0ca      	beq.n	800d50c <__sflush_r+0x54>
 800d576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57a:	4299      	cmp	r1, r3
 800d57c:	d002      	beq.n	800d584 <__sflush_r+0xcc>
 800d57e:	4628      	mov	r0, r5
 800d580:	f000 f95c 	bl	800d83c <_free_r>
 800d584:	2000      	movs	r0, #0
 800d586:	6360      	str	r0, [r4, #52]	; 0x34
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58c:	690f      	ldr	r7, [r1, #16]
 800d58e:	2f00      	cmp	r7, #0
 800d590:	d0bc      	beq.n	800d50c <__sflush_r+0x54>
 800d592:	079b      	lsls	r3, r3, #30
 800d594:	680e      	ldr	r6, [r1, #0]
 800d596:	bf08      	it	eq
 800d598:	694b      	ldreq	r3, [r1, #20]
 800d59a:	600f      	str	r7, [r1, #0]
 800d59c:	bf18      	it	ne
 800d59e:	2300      	movne	r3, #0
 800d5a0:	ebc7 0806 	rsb	r8, r7, r6
 800d5a4:	608b      	str	r3, [r1, #8]
 800d5a6:	e002      	b.n	800d5ae <__sflush_r+0xf6>
 800d5a8:	4407      	add	r7, r0
 800d5aa:	ebc0 0808 	rsb	r8, r0, r8
 800d5ae:	f1b8 0f00 	cmp.w	r8, #0
 800d5b2:	ddab      	ble.n	800d50c <__sflush_r+0x54>
 800d5b4:	4643      	mov	r3, r8
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	6a21      	ldr	r1, [r4, #32]
 800d5ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5bc:	4628      	mov	r0, r5
 800d5be:	47b0      	blx	r6
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	dcf1      	bgt.n	800d5a8 <__sflush_r+0xf0>
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d4:	20400001 	.word	0x20400001

0800d5d8 <_fflush_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	690b      	ldr	r3, [r1, #16]
 800d5dc:	4605      	mov	r5, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	b1db      	cbz	r3, 800d61a <_fflush_r+0x42>
 800d5e2:	b118      	cbz	r0, 800d5ec <_fflush_r+0x14>
 800d5e4:	6983      	ldr	r3, [r0, #24]
 800d5e6:	b90b      	cbnz	r3, 800d5ec <_fflush_r+0x14>
 800d5e8:	f000 f860 	bl	800d6ac <__sinit>
 800d5ec:	4b0c      	ldr	r3, [pc, #48]	; (800d620 <_fflush_r+0x48>)
 800d5ee:	429c      	cmp	r4, r3
 800d5f0:	d101      	bne.n	800d5f6 <_fflush_r+0x1e>
 800d5f2:	686c      	ldr	r4, [r5, #4]
 800d5f4:	e008      	b.n	800d608 <_fflush_r+0x30>
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <_fflush_r+0x4c>)
 800d5f8:	429c      	cmp	r4, r3
 800d5fa:	d101      	bne.n	800d600 <_fflush_r+0x28>
 800d5fc:	68ac      	ldr	r4, [r5, #8]
 800d5fe:	e003      	b.n	800d608 <_fflush_r+0x30>
 800d600:	4b09      	ldr	r3, [pc, #36]	; (800d628 <_fflush_r+0x50>)
 800d602:	429c      	cmp	r4, r3
 800d604:	bf08      	it	eq
 800d606:	68ec      	ldreq	r4, [r5, #12]
 800d608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d60c:	b12b      	cbz	r3, 800d61a <_fflush_r+0x42>
 800d60e:	4621      	mov	r1, r4
 800d610:	4628      	mov	r0, r5
 800d612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d616:	f7ff bf4f 	b.w	800d4b8 <__sflush_r>
 800d61a:	2000      	movs	r0, #0
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
 800d61e:	bf00      	nop
 800d620:	08011b4c 	.word	0x08011b4c
 800d624:	08011b6c 	.word	0x08011b6c
 800d628:	08011b8c 	.word	0x08011b8c

0800d62c <_cleanup_r>:
 800d62c:	4901      	ldr	r1, [pc, #4]	; (800d634 <_cleanup_r+0x8>)
 800d62e:	f000 bb0d 	b.w	800dc4c <_fwalk_reent>
 800d632:	bf00      	nop
 800d634:	0800ed2d 	.word	0x0800ed2d

0800d638 <std.isra.0>:
 800d638:	2300      	movs	r3, #0
 800d63a:	b510      	push	{r4, lr}
 800d63c:	4604      	mov	r4, r0
 800d63e:	6003      	str	r3, [r0, #0]
 800d640:	6043      	str	r3, [r0, #4]
 800d642:	6083      	str	r3, [r0, #8]
 800d644:	8181      	strh	r1, [r0, #12]
 800d646:	6643      	str	r3, [r0, #100]	; 0x64
 800d648:	81c2      	strh	r2, [r0, #14]
 800d64a:	6103      	str	r3, [r0, #16]
 800d64c:	6143      	str	r3, [r0, #20]
 800d64e:	6183      	str	r3, [r0, #24]
 800d650:	4619      	mov	r1, r3
 800d652:	2208      	movs	r2, #8
 800d654:	305c      	adds	r0, #92	; 0x5c
 800d656:	f7fd ff8a 	bl	800b56e <memset>
 800d65a:	4b05      	ldr	r3, [pc, #20]	; (800d670 <std.isra.0+0x38>)
 800d65c:	6263      	str	r3, [r4, #36]	; 0x24
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <std.isra.0+0x3c>)
 800d660:	62a3      	str	r3, [r4, #40]	; 0x28
 800d662:	4b05      	ldr	r3, [pc, #20]	; (800d678 <std.isra.0+0x40>)
 800d664:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d666:	4b05      	ldr	r3, [pc, #20]	; (800d67c <std.isra.0+0x44>)
 800d668:	6224      	str	r4, [r4, #32]
 800d66a:	6323      	str	r3, [r4, #48]	; 0x30
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	bf00      	nop
 800d670:	0800eb09 	.word	0x0800eb09
 800d674:	0800eb2b 	.word	0x0800eb2b
 800d678:	0800eb63 	.word	0x0800eb63
 800d67c:	0800eb87 	.word	0x0800eb87

0800d680 <__sfmoreglue>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	2368      	movs	r3, #104	; 0x68
 800d684:	1e4d      	subs	r5, r1, #1
 800d686:	435d      	muls	r5, r3
 800d688:	460e      	mov	r6, r1
 800d68a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d68e:	f000 fb6f 	bl	800dd70 <_malloc_r>
 800d692:	4604      	mov	r4, r0
 800d694:	b140      	cbz	r0, 800d6a8 <__sfmoreglue+0x28>
 800d696:	2100      	movs	r1, #0
 800d698:	e880 0042 	stmia.w	r0, {r1, r6}
 800d69c:	300c      	adds	r0, #12
 800d69e:	60a0      	str	r0, [r4, #8]
 800d6a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6a4:	f7fd ff63 	bl	800b56e <memset>
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}

0800d6ac <__sinit>:
 800d6ac:	6983      	ldr	r3, [r0, #24]
 800d6ae:	b510      	push	{r4, lr}
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	bb4b      	cbnz	r3, 800d708 <__sinit+0x5c>
 800d6b4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 800d6b8:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 800d6bc:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800d6c0:	4b12      	ldr	r3, [pc, #72]	; (800d70c <__sinit+0x60>)
 800d6c2:	4a13      	ldr	r2, [pc, #76]	; (800d710 <__sinit+0x64>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6282      	str	r2, [r0, #40]	; 0x28
 800d6c8:	4298      	cmp	r0, r3
 800d6ca:	bf04      	itt	eq
 800d6cc:	2301      	moveq	r3, #1
 800d6ce:	6183      	streq	r3, [r0, #24]
 800d6d0:	f000 f820 	bl	800d714 <__sfp>
 800d6d4:	6060      	str	r0, [r4, #4]
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 f81c 	bl	800d714 <__sfp>
 800d6dc:	60a0      	str	r0, [r4, #8]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f000 f818 	bl	800d714 <__sfp>
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	60e0      	str	r0, [r4, #12]
 800d6e8:	2104      	movs	r1, #4
 800d6ea:	6860      	ldr	r0, [r4, #4]
 800d6ec:	f7ff ffa4 	bl	800d638 <std.isra.0>
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	2109      	movs	r1, #9
 800d6f4:	68a0      	ldr	r0, [r4, #8]
 800d6f6:	f7ff ff9f 	bl	800d638 <std.isra.0>
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	2112      	movs	r1, #18
 800d6fe:	68e0      	ldr	r0, [r4, #12]
 800d700:	f7ff ff9a 	bl	800d638 <std.isra.0>
 800d704:	2301      	movs	r3, #1
 800d706:	61a3      	str	r3, [r4, #24]
 800d708:	bd10      	pop	{r4, pc}
 800d70a:	bf00      	nop
 800d70c:	080119e4 	.word	0x080119e4
 800d710:	0800d62d 	.word	0x0800d62d

0800d714 <__sfp>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	4b1c      	ldr	r3, [pc, #112]	; (800d788 <__sfp+0x74>)
 800d718:	681e      	ldr	r6, [r3, #0]
 800d71a:	69b3      	ldr	r3, [r6, #24]
 800d71c:	4607      	mov	r7, r0
 800d71e:	b913      	cbnz	r3, 800d726 <__sfp+0x12>
 800d720:	4630      	mov	r0, r6
 800d722:	f7ff ffc3 	bl	800d6ac <__sinit>
 800d726:	36d8      	adds	r6, #216	; 0xd8
 800d728:	68b4      	ldr	r4, [r6, #8]
 800d72a:	6873      	ldr	r3, [r6, #4]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	d404      	bmi.n	800d73a <__sfp+0x26>
 800d730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d734:	b17d      	cbz	r5, 800d756 <__sfp+0x42>
 800d736:	3468      	adds	r4, #104	; 0x68
 800d738:	e7f8      	b.n	800d72c <__sfp+0x18>
 800d73a:	6833      	ldr	r3, [r6, #0]
 800d73c:	b10b      	cbz	r3, 800d742 <__sfp+0x2e>
 800d73e:	6836      	ldr	r6, [r6, #0]
 800d740:	e7f2      	b.n	800d728 <__sfp+0x14>
 800d742:	2104      	movs	r1, #4
 800d744:	4638      	mov	r0, r7
 800d746:	f7ff ff9b 	bl	800d680 <__sfmoreglue>
 800d74a:	6030      	str	r0, [r6, #0]
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d1f6      	bne.n	800d73e <__sfp+0x2a>
 800d750:	230c      	movs	r3, #12
 800d752:	603b      	str	r3, [r7, #0]
 800d754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d75a:	81e3      	strh	r3, [r4, #14]
 800d75c:	2301      	movs	r3, #1
 800d75e:	81a3      	strh	r3, [r4, #12]
 800d760:	6665      	str	r5, [r4, #100]	; 0x64
 800d762:	6025      	str	r5, [r4, #0]
 800d764:	60a5      	str	r5, [r4, #8]
 800d766:	6065      	str	r5, [r4, #4]
 800d768:	6125      	str	r5, [r4, #16]
 800d76a:	6165      	str	r5, [r4, #20]
 800d76c:	61a5      	str	r5, [r4, #24]
 800d76e:	2208      	movs	r2, #8
 800d770:	4629      	mov	r1, r5
 800d772:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d776:	f7fd fefa 	bl	800b56e <memset>
 800d77a:	6365      	str	r5, [r4, #52]	; 0x34
 800d77c:	63a5      	str	r5, [r4, #56]	; 0x38
 800d77e:	64a5      	str	r5, [r4, #72]	; 0x48
 800d780:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d782:	4620      	mov	r0, r4
 800d784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d786:	bf00      	nop
 800d788:	080119e4 	.word	0x080119e4

0800d78c <__sfp_lock_acquire>:
 800d78c:	4770      	bx	lr

0800d78e <__sfp_lock_release>:
 800d78e:	4770      	bx	lr

0800d790 <_malloc_trim_r>:
 800d790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d794:	4f25      	ldr	r7, [pc, #148]	; (800d82c <_malloc_trim_r+0x9c>)
 800d796:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d838 <_malloc_trim_r+0xa8>
 800d79a:	4689      	mov	r9, r1
 800d79c:	4606      	mov	r6, r0
 800d79e:	f000 fd22 	bl	800e1e6 <__malloc_lock>
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	685d      	ldr	r5, [r3, #4]
 800d7a6:	f1a8 0411 	sub.w	r4, r8, #17
 800d7aa:	f025 0503 	bic.w	r5, r5, #3
 800d7ae:	442c      	add	r4, r5
 800d7b0:	ebc9 0404 	rsb	r4, r9, r4
 800d7b4:	fbb4 f4f8 	udiv	r4, r4, r8
 800d7b8:	3c01      	subs	r4, #1
 800d7ba:	fb08 f404 	mul.w	r4, r8, r4
 800d7be:	4544      	cmp	r4, r8
 800d7c0:	da05      	bge.n	800d7ce <_malloc_trim_r+0x3e>
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	f000 fd10 	bl	800e1e8 <__malloc_unlock>
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f001 f989 	bl	800eae8 <_sbrk_r>
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	442b      	add	r3, r5
 800d7da:	4298      	cmp	r0, r3
 800d7dc:	d1f1      	bne.n	800d7c2 <_malloc_trim_r+0x32>
 800d7de:	4261      	negs	r1, r4
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f001 f981 	bl	800eae8 <_sbrk_r>
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	d110      	bne.n	800d80c <_malloc_trim_r+0x7c>
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	f001 f97b 	bl	800eae8 <_sbrk_r>
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	1a83      	subs	r3, r0, r2
 800d7f6:	2b0f      	cmp	r3, #15
 800d7f8:	dde3      	ble.n	800d7c2 <_malloc_trim_r+0x32>
 800d7fa:	490d      	ldr	r1, [pc, #52]	; (800d830 <_malloc_trim_r+0xa0>)
 800d7fc:	6809      	ldr	r1, [r1, #0]
 800d7fe:	1a40      	subs	r0, r0, r1
 800d800:	490c      	ldr	r1, [pc, #48]	; (800d834 <_malloc_trim_r+0xa4>)
 800d802:	f043 0301 	orr.w	r3, r3, #1
 800d806:	6008      	str	r0, [r1, #0]
 800d808:	6053      	str	r3, [r2, #4]
 800d80a:	e7da      	b.n	800d7c2 <_malloc_trim_r+0x32>
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	4a09      	ldr	r2, [pc, #36]	; (800d834 <_malloc_trim_r+0xa4>)
 800d810:	1b2d      	subs	r5, r5, r4
 800d812:	f045 0501 	orr.w	r5, r5, #1
 800d816:	605d      	str	r5, [r3, #4]
 800d818:	6813      	ldr	r3, [r2, #0]
 800d81a:	4630      	mov	r0, r6
 800d81c:	1b1c      	subs	r4, r3, r4
 800d81e:	6014      	str	r4, [r2, #0]
 800d820:	f000 fce2 	bl	800e1e8 <__malloc_unlock>
 800d824:	2001      	movs	r0, #1
 800d826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82a:	bf00      	nop
 800d82c:	20010160 	.word	0x20010160
 800d830:	2001056c 	.word	0x2001056c
 800d834:	200146b4 	.word	0x200146b4
 800d838:	00000080 	.word	0x00000080

0800d83c <_free_r>:
 800d83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d840:	4604      	mov	r4, r0
 800d842:	4688      	mov	r8, r1
 800d844:	2900      	cmp	r1, #0
 800d846:	f000 80ad 	beq.w	800d9a4 <_free_r+0x168>
 800d84a:	f000 fccc 	bl	800e1e6 <__malloc_lock>
 800d84e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800d852:	4d55      	ldr	r5, [pc, #340]	; (800d9a8 <_free_r+0x16c>)
 800d854:	f022 0001 	bic.w	r0, r2, #1
 800d858:	f1a8 0308 	sub.w	r3, r8, #8
 800d85c:	181f      	adds	r7, r3, r0
 800d85e:	68a9      	ldr	r1, [r5, #8]
 800d860:	687e      	ldr	r6, [r7, #4]
 800d862:	428f      	cmp	r7, r1
 800d864:	f026 0603 	bic.w	r6, r6, #3
 800d868:	f002 0201 	and.w	r2, r2, #1
 800d86c:	d11b      	bne.n	800d8a6 <_free_r+0x6a>
 800d86e:	4430      	add	r0, r6
 800d870:	b93a      	cbnz	r2, 800d882 <_free_r+0x46>
 800d872:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800d876:	1a9b      	subs	r3, r3, r2
 800d878:	4410      	add	r0, r2
 800d87a:	6899      	ldr	r1, [r3, #8]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	60ca      	str	r2, [r1, #12]
 800d880:	6091      	str	r1, [r2, #8]
 800d882:	f040 0201 	orr.w	r2, r0, #1
 800d886:	605a      	str	r2, [r3, #4]
 800d888:	60ab      	str	r3, [r5, #8]
 800d88a:	4b48      	ldr	r3, [pc, #288]	; (800d9ac <_free_r+0x170>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4298      	cmp	r0, r3
 800d890:	d304      	bcc.n	800d89c <_free_r+0x60>
 800d892:	4b47      	ldr	r3, [pc, #284]	; (800d9b0 <_free_r+0x174>)
 800d894:	4620      	mov	r0, r4
 800d896:	6819      	ldr	r1, [r3, #0]
 800d898:	f7ff ff7a 	bl	800d790 <_malloc_trim_r>
 800d89c:	4620      	mov	r0, r4
 800d89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a2:	f000 bca1 	b.w	800e1e8 <__malloc_unlock>
 800d8a6:	607e      	str	r6, [r7, #4]
 800d8a8:	b97a      	cbnz	r2, 800d8ca <_free_r+0x8e>
 800d8aa:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800d8ae:	1a5b      	subs	r3, r3, r1
 800d8b0:	4408      	add	r0, r1
 800d8b2:	6899      	ldr	r1, [r3, #8]
 800d8b4:	f105 0e08 	add.w	lr, r5, #8
 800d8b8:	4571      	cmp	r1, lr
 800d8ba:	d008      	beq.n	800d8ce <_free_r+0x92>
 800d8bc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d8c0:	f8c1 e00c 	str.w	lr, [r1, #12]
 800d8c4:	f8ce 1008 	str.w	r1, [lr, #8]
 800d8c8:	e002      	b.n	800d8d0 <_free_r+0x94>
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	e000      	b.n	800d8d0 <_free_r+0x94>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	19b9      	adds	r1, r7, r6
 800d8d2:	6849      	ldr	r1, [r1, #4]
 800d8d4:	07c9      	lsls	r1, r1, #31
 800d8d6:	d40e      	bmi.n	800d8f6 <_free_r+0xba>
 800d8d8:	4430      	add	r0, r6
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	b942      	cbnz	r2, 800d8f0 <_free_r+0xb4>
 800d8de:	4e35      	ldr	r6, [pc, #212]	; (800d9b4 <_free_r+0x178>)
 800d8e0:	42b1      	cmp	r1, r6
 800d8e2:	d105      	bne.n	800d8f0 <_free_r+0xb4>
 800d8e4:	616b      	str	r3, [r5, #20]
 800d8e6:	612b      	str	r3, [r5, #16]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	60d9      	str	r1, [r3, #12]
 800d8ec:	6099      	str	r1, [r3, #8]
 800d8ee:	e002      	b.n	800d8f6 <_free_r+0xba>
 800d8f0:	68fe      	ldr	r6, [r7, #12]
 800d8f2:	60ce      	str	r6, [r1, #12]
 800d8f4:	60b1      	str	r1, [r6, #8]
 800d8f6:	f040 0101 	orr.w	r1, r0, #1
 800d8fa:	6059      	str	r1, [r3, #4]
 800d8fc:	5018      	str	r0, [r3, r0]
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	d1cc      	bne.n	800d89c <_free_r+0x60>
 800d902:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d906:	d212      	bcs.n	800d92e <_free_r+0xf2>
 800d908:	08c0      	lsrs	r0, r0, #3
 800d90a:	1081      	asrs	r1, r0, #2
 800d90c:	2201      	movs	r2, #1
 800d90e:	fa02 f101 	lsl.w	r1, r2, r1
 800d912:	686a      	ldr	r2, [r5, #4]
 800d914:	3001      	adds	r0, #1
 800d916:	430a      	orrs	r2, r1
 800d918:	606a      	str	r2, [r5, #4]
 800d91a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800d91e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800d922:	6099      	str	r1, [r3, #8]
 800d924:	3a08      	subs	r2, #8
 800d926:	60da      	str	r2, [r3, #12]
 800d928:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800d92c:	e038      	b.n	800d9a0 <_free_r+0x164>
 800d92e:	0a42      	lsrs	r2, r0, #9
 800d930:	2a04      	cmp	r2, #4
 800d932:	d802      	bhi.n	800d93a <_free_r+0xfe>
 800d934:	0982      	lsrs	r2, r0, #6
 800d936:	3238      	adds	r2, #56	; 0x38
 800d938:	e015      	b.n	800d966 <_free_r+0x12a>
 800d93a:	2a14      	cmp	r2, #20
 800d93c:	d801      	bhi.n	800d942 <_free_r+0x106>
 800d93e:	325b      	adds	r2, #91	; 0x5b
 800d940:	e011      	b.n	800d966 <_free_r+0x12a>
 800d942:	2a54      	cmp	r2, #84	; 0x54
 800d944:	d802      	bhi.n	800d94c <_free_r+0x110>
 800d946:	0b02      	lsrs	r2, r0, #12
 800d948:	326e      	adds	r2, #110	; 0x6e
 800d94a:	e00c      	b.n	800d966 <_free_r+0x12a>
 800d94c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d950:	d802      	bhi.n	800d958 <_free_r+0x11c>
 800d952:	0bc2      	lsrs	r2, r0, #15
 800d954:	3277      	adds	r2, #119	; 0x77
 800d956:	e006      	b.n	800d966 <_free_r+0x12a>
 800d958:	f240 5154 	movw	r1, #1364	; 0x554
 800d95c:	428a      	cmp	r2, r1
 800d95e:	bf9a      	itte	ls
 800d960:	0c82      	lsrls	r2, r0, #18
 800d962:	327c      	addls	r2, #124	; 0x7c
 800d964:	227e      	movhi	r2, #126	; 0x7e
 800d966:	1c51      	adds	r1, r2, #1
 800d968:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800d96c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800d970:	4f0d      	ldr	r7, [pc, #52]	; (800d9a8 <_free_r+0x16c>)
 800d972:	428e      	cmp	r6, r1
 800d974:	d10b      	bne.n	800d98e <_free_r+0x152>
 800d976:	2101      	movs	r1, #1
 800d978:	1092      	asrs	r2, r2, #2
 800d97a:	fa01 f202 	lsl.w	r2, r1, r2
 800d97e:	6879      	ldr	r1, [r7, #4]
 800d980:	4311      	orrs	r1, r2
 800d982:	6079      	str	r1, [r7, #4]
 800d984:	4631      	mov	r1, r6
 800d986:	e008      	b.n	800d99a <_free_r+0x15e>
 800d988:	6889      	ldr	r1, [r1, #8]
 800d98a:	428e      	cmp	r6, r1
 800d98c:	d004      	beq.n	800d998 <_free_r+0x15c>
 800d98e:	684a      	ldr	r2, [r1, #4]
 800d990:	f022 0203 	bic.w	r2, r2, #3
 800d994:	4290      	cmp	r0, r2
 800d996:	d3f7      	bcc.n	800d988 <_free_r+0x14c>
 800d998:	68ce      	ldr	r6, [r1, #12]
 800d99a:	60de      	str	r6, [r3, #12]
 800d99c:	6099      	str	r1, [r3, #8]
 800d99e:	60b3      	str	r3, [r6, #8]
 800d9a0:	60cb      	str	r3, [r1, #12]
 800d9a2:	e77b      	b.n	800d89c <_free_r+0x60>
 800d9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a8:	20010160 	.word	0x20010160
 800d9ac:	20010568 	.word	0x20010568
 800d9b0:	200146b0 	.word	0x200146b0
 800d9b4:	20010168 	.word	0x20010168

0800d9b8 <__sfvwrite_r>:
 800d9b8:	6893      	ldr	r3, [r2, #8]
 800d9ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	4690      	mov	r8, r2
 800d9c4:	b90b      	cbnz	r3, 800d9ca <__sfvwrite_r+0x12>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	e13b      	b.n	800dc42 <__sfvwrite_r+0x28a>
 800d9ca:	898b      	ldrh	r3, [r1, #12]
 800d9cc:	0718      	lsls	r0, r3, #28
 800d9ce:	d50f      	bpl.n	800d9f0 <__sfvwrite_r+0x38>
 800d9d0:	690b      	ldr	r3, [r1, #16]
 800d9d2:	b16b      	cbz	r3, 800d9f0 <__sfvwrite_r+0x38>
 800d9d4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 800d9d8:	f8d8 b000 	ldr.w	fp, [r8]
 800d9dc:	f009 0502 	and.w	r5, r9, #2
 800d9e0:	b2ad      	uxth	r5, r5
 800d9e2:	b355      	cbz	r5, 800da3a <__sfvwrite_r+0x82>
 800d9e4:	f04f 0900 	mov.w	r9, #0
 800d9e8:	464f      	mov	r7, r9
 800d9ea:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800dc48 <__sfvwrite_r+0x290>
 800d9ee:	e01b      	b.n	800da28 <__sfvwrite_r+0x70>
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7fe fec2 	bl	800c77c <__swsetup_r>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d0eb      	beq.n	800d9d4 <__sfvwrite_r+0x1c>
 800d9fc:	e11f      	b.n	800dc3e <__sfvwrite_r+0x286>
 800d9fe:	4557      	cmp	r7, sl
 800da00:	463b      	mov	r3, r7
 800da02:	464a      	mov	r2, r9
 800da04:	bf28      	it	cs
 800da06:	4653      	movcs	r3, sl
 800da08:	6a21      	ldr	r1, [r4, #32]
 800da0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800da0c:	4630      	mov	r0, r6
 800da0e:	47a8      	blx	r5
 800da10:	2800      	cmp	r0, #0
 800da12:	f340 8110 	ble.w	800dc36 <__sfvwrite_r+0x27e>
 800da16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da1a:	4481      	add	r9, r0
 800da1c:	1a3f      	subs	r7, r7, r0
 800da1e:	1a18      	subs	r0, r3, r0
 800da20:	f8c8 0008 	str.w	r0, [r8, #8]
 800da24:	2800      	cmp	r0, #0
 800da26:	d0ce      	beq.n	800d9c6 <__sfvwrite_r+0xe>
 800da28:	2f00      	cmp	r7, #0
 800da2a:	d1e8      	bne.n	800d9fe <__sfvwrite_r+0x46>
 800da2c:	f8db 9000 	ldr.w	r9, [fp]
 800da30:	f8db 7004 	ldr.w	r7, [fp, #4]
 800da34:	f10b 0b08 	add.w	fp, fp, #8
 800da38:	e7f6      	b.n	800da28 <__sfvwrite_r+0x70>
 800da3a:	f019 0901 	ands.w	r9, r9, #1
 800da3e:	d003      	beq.n	800da48 <__sfvwrite_r+0x90>
 800da40:	9500      	str	r5, [sp, #0]
 800da42:	46a9      	mov	r9, r5
 800da44:	46aa      	mov	sl, r5
 800da46:	e0bd      	b.n	800dbc4 <__sfvwrite_r+0x20c>
 800da48:	464f      	mov	r7, r9
 800da4a:	b937      	cbnz	r7, 800da5a <__sfvwrite_r+0xa2>
 800da4c:	f8db 9000 	ldr.w	r9, [fp]
 800da50:	f8db 7004 	ldr.w	r7, [fp, #4]
 800da54:	f10b 0b08 	add.w	fp, fp, #8
 800da58:	e7f7      	b.n	800da4a <__sfvwrite_r+0x92>
 800da5a:	89a2      	ldrh	r2, [r4, #12]
 800da5c:	68a5      	ldr	r5, [r4, #8]
 800da5e:	0591      	lsls	r1, r2, #22
 800da60:	d552      	bpl.n	800db08 <__sfvwrite_r+0x150>
 800da62:	42af      	cmp	r7, r5
 800da64:	d342      	bcc.n	800daec <__sfvwrite_r+0x134>
 800da66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da6a:	d03d      	beq.n	800dae8 <__sfvwrite_r+0x130>
 800da6c:	6921      	ldr	r1, [r4, #16]
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	1a5b      	subs	r3, r3, r1
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	6963      	ldr	r3, [r4, #20]
 800da76:	2002      	movs	r0, #2
 800da78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800da7c:	fb93 faf0 	sdiv	sl, r3, r0
 800da80:	9b00      	ldr	r3, [sp, #0]
 800da82:	3301      	adds	r3, #1
 800da84:	443b      	add	r3, r7
 800da86:	459a      	cmp	sl, r3
 800da88:	bf38      	it	cc
 800da8a:	469a      	movcc	sl, r3
 800da8c:	0553      	lsls	r3, r2, #21
 800da8e:	d510      	bpl.n	800dab2 <__sfvwrite_r+0xfa>
 800da90:	4651      	mov	r1, sl
 800da92:	4630      	mov	r0, r6
 800da94:	f000 f96c 	bl	800dd70 <_malloc_r>
 800da98:	4605      	mov	r5, r0
 800da9a:	b1c0      	cbz	r0, 800dace <__sfvwrite_r+0x116>
 800da9c:	9a00      	ldr	r2, [sp, #0]
 800da9e:	6921      	ldr	r1, [r4, #16]
 800daa0:	f7fd fd5a 	bl	800b558 <memcpy>
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800daaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	e010      	b.n	800dad4 <__sfvwrite_r+0x11c>
 800dab2:	4652      	mov	r2, sl
 800dab4:	4630      	mov	r0, r6
 800dab6:	f000 fe6f 	bl	800e798 <_realloc_r>
 800daba:	4605      	mov	r5, r0
 800dabc:	b950      	cbnz	r0, 800dad4 <__sfvwrite_r+0x11c>
 800dabe:	6921      	ldr	r1, [r4, #16]
 800dac0:	4630      	mov	r0, r6
 800dac2:	f7ff febb 	bl	800d83c <_free_r>
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dacc:	81a3      	strh	r3, [r4, #12]
 800dace:	230c      	movs	r3, #12
 800dad0:	6033      	str	r3, [r6, #0]
 800dad2:	e0b0      	b.n	800dc36 <__sfvwrite_r+0x27e>
 800dad4:	9b00      	ldr	r3, [sp, #0]
 800dad6:	6125      	str	r5, [r4, #16]
 800dad8:	441d      	add	r5, r3
 800dada:	ebc3 030a 	rsb	r3, r3, sl
 800dade:	6025      	str	r5, [r4, #0]
 800dae0:	f8c4 a014 	str.w	sl, [r4, #20]
 800dae4:	463d      	mov	r5, r7
 800dae6:	60a3      	str	r3, [r4, #8]
 800dae8:	42af      	cmp	r7, r5
 800daea:	d200      	bcs.n	800daee <__sfvwrite_r+0x136>
 800daec:	463d      	mov	r5, r7
 800daee:	462a      	mov	r2, r5
 800daf0:	4649      	mov	r1, r9
 800daf2:	6820      	ldr	r0, [r4, #0]
 800daf4:	f000 fb5c 	bl	800e1b0 <memmove>
 800daf8:	68a3      	ldr	r3, [r4, #8]
 800dafa:	1b5b      	subs	r3, r3, r5
 800dafc:	60a3      	str	r3, [r4, #8]
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	441d      	add	r5, r3
 800db02:	6025      	str	r5, [r4, #0]
 800db04:	463d      	mov	r5, r7
 800db06:	e029      	b.n	800db5c <__sfvwrite_r+0x1a4>
 800db08:	6820      	ldr	r0, [r4, #0]
 800db0a:	6923      	ldr	r3, [r4, #16]
 800db0c:	4298      	cmp	r0, r3
 800db0e:	d802      	bhi.n	800db16 <__sfvwrite_r+0x15e>
 800db10:	6962      	ldr	r2, [r4, #20]
 800db12:	4297      	cmp	r7, r2
 800db14:	d213      	bcs.n	800db3e <__sfvwrite_r+0x186>
 800db16:	42bd      	cmp	r5, r7
 800db18:	bf28      	it	cs
 800db1a:	463d      	movcs	r5, r7
 800db1c:	462a      	mov	r2, r5
 800db1e:	4649      	mov	r1, r9
 800db20:	f000 fb46 	bl	800e1b0 <memmove>
 800db24:	68a3      	ldr	r3, [r4, #8]
 800db26:	6822      	ldr	r2, [r4, #0]
 800db28:	1b5b      	subs	r3, r3, r5
 800db2a:	442a      	add	r2, r5
 800db2c:	60a3      	str	r3, [r4, #8]
 800db2e:	6022      	str	r2, [r4, #0]
 800db30:	b9a3      	cbnz	r3, 800db5c <__sfvwrite_r+0x1a4>
 800db32:	4621      	mov	r1, r4
 800db34:	4630      	mov	r0, r6
 800db36:	f7ff fd4f 	bl	800d5d8 <_fflush_r>
 800db3a:	b178      	cbz	r0, 800db5c <__sfvwrite_r+0x1a4>
 800db3c:	e07b      	b.n	800dc36 <__sfvwrite_r+0x27e>
 800db3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db42:	42bb      	cmp	r3, r7
 800db44:	bf28      	it	cs
 800db46:	463b      	movcs	r3, r7
 800db48:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800db4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800db4e:	6a21      	ldr	r1, [r4, #32]
 800db50:	4353      	muls	r3, r2
 800db52:	4630      	mov	r0, r6
 800db54:	464a      	mov	r2, r9
 800db56:	47a8      	blx	r5
 800db58:	1e05      	subs	r5, r0, #0
 800db5a:	dd6c      	ble.n	800dc36 <__sfvwrite_r+0x27e>
 800db5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db60:	44a9      	add	r9, r5
 800db62:	1b7f      	subs	r7, r7, r5
 800db64:	1b5d      	subs	r5, r3, r5
 800db66:	f8c8 5008 	str.w	r5, [r8, #8]
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	f47f af6d 	bne.w	800da4a <__sfvwrite_r+0x92>
 800db70:	e729      	b.n	800d9c6 <__sfvwrite_r+0xe>
 800db72:	9b00      	ldr	r3, [sp, #0]
 800db74:	b383      	cbz	r3, 800dbd8 <__sfvwrite_r+0x220>
 800db76:	6820      	ldr	r0, [r4, #0]
 800db78:	6921      	ldr	r1, [r4, #16]
 800db7a:	6962      	ldr	r2, [r4, #20]
 800db7c:	4555      	cmp	r5, sl
 800db7e:	462b      	mov	r3, r5
 800db80:	bf28      	it	cs
 800db82:	4653      	movcs	r3, sl
 800db84:	4288      	cmp	r0, r1
 800db86:	d936      	bls.n	800dbf6 <__sfvwrite_r+0x23e>
 800db88:	68a7      	ldr	r7, [r4, #8]
 800db8a:	4417      	add	r7, r2
 800db8c:	42bb      	cmp	r3, r7
 800db8e:	dd32      	ble.n	800dbf6 <__sfvwrite_r+0x23e>
 800db90:	4649      	mov	r1, r9
 800db92:	463a      	mov	r2, r7
 800db94:	f000 fb0c 	bl	800e1b0 <memmove>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	443b      	add	r3, r7
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	4621      	mov	r1, r4
 800dba0:	4630      	mov	r0, r6
 800dba2:	f7ff fd19 	bl	800d5d8 <_fflush_r>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d145      	bne.n	800dc36 <__sfvwrite_r+0x27e>
 800dbaa:	1bed      	subs	r5, r5, r7
 800dbac:	d03c      	beq.n	800dc28 <__sfvwrite_r+0x270>
 800dbae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbb2:	44b9      	add	r9, r7
 800dbb4:	ebc7 0a0a 	rsb	sl, r7, sl
 800dbb8:	1bdf      	subs	r7, r3, r7
 800dbba:	f8c8 7008 	str.w	r7, [r8, #8]
 800dbbe:	2f00      	cmp	r7, #0
 800dbc0:	f43f af01 	beq.w	800d9c6 <__sfvwrite_r+0xe>
 800dbc4:	f1ba 0f00 	cmp.w	sl, #0
 800dbc8:	d1d3      	bne.n	800db72 <__sfvwrite_r+0x1ba>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e89b 0600 	ldmia.w	fp, {r9, sl}
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	f10b 0b08 	add.w	fp, fp, #8
 800dbd6:	e7f5      	b.n	800dbc4 <__sfvwrite_r+0x20c>
 800dbd8:	4652      	mov	r2, sl
 800dbda:	210a      	movs	r1, #10
 800dbdc:	4648      	mov	r0, r9
 800dbde:	f7f2 fb1f 	bl	8000220 <memchr>
 800dbe2:	b118      	cbz	r0, 800dbec <__sfvwrite_r+0x234>
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	ebc9 0500 	rsb	r5, r9, r0
 800dbea:	e001      	b.n	800dbf0 <__sfvwrite_r+0x238>
 800dbec:	f10a 0501 	add.w	r5, sl, #1
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	e7bf      	b.n	800db76 <__sfvwrite_r+0x1be>
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	db08      	blt.n	800dc0c <__sfvwrite_r+0x254>
 800dbfa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800dbfc:	6a21      	ldr	r1, [r4, #32]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	4630      	mov	r0, r6
 800dc02:	464a      	mov	r2, r9
 800dc04:	47b8      	blx	r7
 800dc06:	1e07      	subs	r7, r0, #0
 800dc08:	dccf      	bgt.n	800dbaa <__sfvwrite_r+0x1f2>
 800dc0a:	e014      	b.n	800dc36 <__sfvwrite_r+0x27e>
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4649      	mov	r1, r9
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	f000 facd 	bl	800e1b0 <memmove>
 800dc16:	9b01      	ldr	r3, [sp, #4]
 800dc18:	68a2      	ldr	r2, [r4, #8]
 800dc1a:	1ad2      	subs	r2, r2, r3
 800dc1c:	60a2      	str	r2, [r4, #8]
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	441a      	add	r2, r3
 800dc22:	6022      	str	r2, [r4, #0]
 800dc24:	461f      	mov	r7, r3
 800dc26:	e7c0      	b.n	800dbaa <__sfvwrite_r+0x1f2>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f7ff fcd4 	bl	800d5d8 <_fflush_r>
 800dc30:	b908      	cbnz	r0, 800dc36 <__sfvwrite_r+0x27e>
 800dc32:	9500      	str	r5, [sp, #0]
 800dc34:	e7bb      	b.n	800dbae <__sfvwrite_r+0x1f6>
 800dc36:	89a3      	ldrh	r3, [r4, #12]
 800dc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	b003      	add	sp, #12
 800dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc48:	7ffffc00 	.word	0x7ffffc00

0800dc4c <_fwalk_reent>:
 800dc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc50:	4680      	mov	r8, r0
 800dc52:	4689      	mov	r9, r1
 800dc54:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800dc58:	2600      	movs	r6, #0
 800dc5a:	b194      	cbz	r4, 800dc82 <_fwalk_reent+0x36>
 800dc5c:	68a5      	ldr	r5, [r4, #8]
 800dc5e:	6867      	ldr	r7, [r4, #4]
 800dc60:	3f01      	subs	r7, #1
 800dc62:	d40c      	bmi.n	800dc7e <_fwalk_reent+0x32>
 800dc64:	89ab      	ldrh	r3, [r5, #12]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d907      	bls.n	800dc7a <_fwalk_reent+0x2e>
 800dc6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	d003      	beq.n	800dc7a <_fwalk_reent+0x2e>
 800dc72:	4629      	mov	r1, r5
 800dc74:	4640      	mov	r0, r8
 800dc76:	47c8      	blx	r9
 800dc78:	4306      	orrs	r6, r0
 800dc7a:	3568      	adds	r5, #104	; 0x68
 800dc7c:	e7f0      	b.n	800dc60 <_fwalk_reent+0x14>
 800dc7e:	6824      	ldr	r4, [r4, #0]
 800dc80:	e7eb      	b.n	800dc5a <_fwalk_reent+0xe>
 800dc82:	4630      	mov	r0, r6
 800dc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dc88 <_localeconv_r>:
 800dc88:	4800      	ldr	r0, [pc, #0]	; (800dc8c <_localeconv_r+0x4>)
 800dc8a:	4770      	bx	lr
 800dc8c:	20010128 	.word	0x20010128

0800dc90 <__swhatbuf_r>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	460e      	mov	r6, r1
 800dc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc98:	2900      	cmp	r1, #0
 800dc9a:	b090      	sub	sp, #64	; 0x40
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	461d      	mov	r5, r3
 800dca0:	da0a      	bge.n	800dcb8 <__swhatbuf_r+0x28>
 800dca2:	89b3      	ldrh	r3, [r6, #12]
 800dca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dca8:	2200      	movs	r2, #0
 800dcaa:	b298      	uxth	r0, r3
 800dcac:	602a      	str	r2, [r5, #0]
 800dcae:	b1b0      	cbz	r0, 800dcde <__swhatbuf_r+0x4e>
 800dcb0:	2340      	movs	r3, #64	; 0x40
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	e015      	b.n	800dce4 <__swhatbuf_r+0x54>
 800dcb8:	aa01      	add	r2, sp, #4
 800dcba:	f001 f889 	bl	800edd0 <_fstat_r>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	dbef      	blt.n	800dca2 <__swhatbuf_r+0x12>
 800dcc2:	9a02      	ldr	r2, [sp, #8]
 800dcc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dccc:	425a      	negs	r2, r3
 800dcce:	415a      	adcs	r2, r3
 800dcd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcd4:	602a      	str	r2, [r5, #0]
 800dcd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dcda:	6023      	str	r3, [r4, #0]
 800dcdc:	e002      	b.n	800dce4 <__swhatbuf_r+0x54>
 800dcde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dce2:	6023      	str	r3, [r4, #0]
 800dce4:	b010      	add	sp, #64	; 0x40
 800dce6:	bd70      	pop	{r4, r5, r6, pc}

0800dce8 <__smakebuf_r>:
 800dce8:	898b      	ldrh	r3, [r1, #12]
 800dcea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcec:	079e      	lsls	r6, r3, #30
 800dcee:	4605      	mov	r5, r0
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	d410      	bmi.n	800dd16 <__smakebuf_r+0x2e>
 800dcf4:	ab01      	add	r3, sp, #4
 800dcf6:	466a      	mov	r2, sp
 800dcf8:	f7ff ffca 	bl	800dc90 <__swhatbuf_r>
 800dcfc:	9900      	ldr	r1, [sp, #0]
 800dcfe:	4606      	mov	r6, r0
 800dd00:	4628      	mov	r0, r5
 800dd02:	f000 f835 	bl	800dd70 <_malloc_r>
 800dd06:	b968      	cbnz	r0, 800dd24 <__smakebuf_r+0x3c>
 800dd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0c:	059a      	lsls	r2, r3, #22
 800dd0e:	d422      	bmi.n	800dd56 <__smakebuf_r+0x6e>
 800dd10:	f043 0302 	orr.w	r3, r3, #2
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd1a:	6023      	str	r3, [r4, #0]
 800dd1c:	6123      	str	r3, [r4, #16]
 800dd1e:	2301      	movs	r3, #1
 800dd20:	6163      	str	r3, [r4, #20]
 800dd22:	e018      	b.n	800dd56 <__smakebuf_r+0x6e>
 800dd24:	4b0d      	ldr	r3, [pc, #52]	; (800dd5c <__smakebuf_r+0x74>)
 800dd26:	62ab      	str	r3, [r5, #40]	; 0x28
 800dd28:	89a3      	ldrh	r3, [r4, #12]
 800dd2a:	6020      	str	r0, [r4, #0]
 800dd2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd30:	81a3      	strh	r3, [r4, #12]
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	6163      	str	r3, [r4, #20]
 800dd36:	9b01      	ldr	r3, [sp, #4]
 800dd38:	6120      	str	r0, [r4, #16]
 800dd3a:	b14b      	cbz	r3, 800dd50 <__smakebuf_r+0x68>
 800dd3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd40:	4628      	mov	r0, r5
 800dd42:	f001 f857 	bl	800edf4 <_isatty_r>
 800dd46:	b118      	cbz	r0, 800dd50 <__smakebuf_r+0x68>
 800dd48:	89a3      	ldrh	r3, [r4, #12]
 800dd4a:	f043 0301 	orr.w	r3, r3, #1
 800dd4e:	81a3      	strh	r3, [r4, #12]
 800dd50:	89a0      	ldrh	r0, [r4, #12]
 800dd52:	4330      	orrs	r0, r6
 800dd54:	81a0      	strh	r0, [r4, #12]
 800dd56:	b002      	add	sp, #8
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	bf00      	nop
 800dd5c:	0800d62d 	.word	0x0800d62d

0800dd60 <malloc>:
 800dd60:	4b02      	ldr	r3, [pc, #8]	; (800dd6c <malloc+0xc>)
 800dd62:	4601      	mov	r1, r0
 800dd64:	6818      	ldr	r0, [r3, #0]
 800dd66:	f000 b803 	b.w	800dd70 <_malloc_r>
 800dd6a:	bf00      	nop
 800dd6c:	20010120 	.word	0x20010120

0800dd70 <_malloc_r>:
 800dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd74:	f101 040b 	add.w	r4, r1, #11
 800dd78:	2c16      	cmp	r4, #22
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	4681      	mov	r9, r0
 800dd7e:	d903      	bls.n	800dd88 <_malloc_r+0x18>
 800dd80:	f034 0407 	bics.w	r4, r4, #7
 800dd84:	d501      	bpl.n	800dd8a <_malloc_r+0x1a>
 800dd86:	e002      	b.n	800dd8e <_malloc_r+0x1e>
 800dd88:	2410      	movs	r4, #16
 800dd8a:	428c      	cmp	r4, r1
 800dd8c:	d203      	bcs.n	800dd96 <_malloc_r+0x26>
 800dd8e:	230c      	movs	r3, #12
 800dd90:	f8c9 3000 	str.w	r3, [r9]
 800dd94:	e1ea      	b.n	800e16c <_malloc_r+0x3fc>
 800dd96:	4648      	mov	r0, r9
 800dd98:	f000 fa25 	bl	800e1e6 <__malloc_lock>
 800dd9c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800dda0:	4d9e      	ldr	r5, [pc, #632]	; (800e01c <_malloc_r+0x2ac>)
 800dda2:	d217      	bcs.n	800ddd4 <_malloc_r+0x64>
 800dda4:	f104 0208 	add.w	r2, r4, #8
 800dda8:	442a      	add	r2, r5
 800ddaa:	f1a2 0108 	sub.w	r1, r2, #8
 800ddae:	6856      	ldr	r6, [r2, #4]
 800ddb0:	428e      	cmp	r6, r1
 800ddb2:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800ddb6:	d102      	bne.n	800ddbe <_malloc_r+0x4e>
 800ddb8:	68d6      	ldr	r6, [r2, #12]
 800ddba:	42b2      	cmp	r2, r6
 800ddbc:	d008      	beq.n	800ddd0 <_malloc_r+0x60>
 800ddbe:	6873      	ldr	r3, [r6, #4]
 800ddc0:	68f2      	ldr	r2, [r6, #12]
 800ddc2:	68b1      	ldr	r1, [r6, #8]
 800ddc4:	f023 0303 	bic.w	r3, r3, #3
 800ddc8:	60ca      	str	r2, [r1, #12]
 800ddca:	4433      	add	r3, r6
 800ddcc:	6091      	str	r1, [r2, #8]
 800ddce:	e02f      	b.n	800de30 <_malloc_r+0xc0>
 800ddd0:	3302      	adds	r3, #2
 800ddd2:	e03d      	b.n	800de50 <_malloc_r+0xe0>
 800ddd4:	0a63      	lsrs	r3, r4, #9
 800ddd6:	d01a      	beq.n	800de0e <_malloc_r+0x9e>
 800ddd8:	2b04      	cmp	r3, #4
 800ddda:	d802      	bhi.n	800dde2 <_malloc_r+0x72>
 800dddc:	09a3      	lsrs	r3, r4, #6
 800ddde:	3338      	adds	r3, #56	; 0x38
 800dde0:	e018      	b.n	800de14 <_malloc_r+0xa4>
 800dde2:	2b14      	cmp	r3, #20
 800dde4:	d801      	bhi.n	800ddea <_malloc_r+0x7a>
 800dde6:	335b      	adds	r3, #91	; 0x5b
 800dde8:	e014      	b.n	800de14 <_malloc_r+0xa4>
 800ddea:	2b54      	cmp	r3, #84	; 0x54
 800ddec:	d802      	bhi.n	800ddf4 <_malloc_r+0x84>
 800ddee:	0b23      	lsrs	r3, r4, #12
 800ddf0:	336e      	adds	r3, #110	; 0x6e
 800ddf2:	e00f      	b.n	800de14 <_malloc_r+0xa4>
 800ddf4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800ddf8:	d802      	bhi.n	800de00 <_malloc_r+0x90>
 800ddfa:	0be3      	lsrs	r3, r4, #15
 800ddfc:	3377      	adds	r3, #119	; 0x77
 800ddfe:	e009      	b.n	800de14 <_malloc_r+0xa4>
 800de00:	f240 5254 	movw	r2, #1364	; 0x554
 800de04:	4293      	cmp	r3, r2
 800de06:	d804      	bhi.n	800de12 <_malloc_r+0xa2>
 800de08:	0ca3      	lsrs	r3, r4, #18
 800de0a:	337c      	adds	r3, #124	; 0x7c
 800de0c:	e002      	b.n	800de14 <_malloc_r+0xa4>
 800de0e:	233f      	movs	r3, #63	; 0x3f
 800de10:	e000      	b.n	800de14 <_malloc_r+0xa4>
 800de12:	237e      	movs	r3, #126	; 0x7e
 800de14:	1c5a      	adds	r2, r3, #1
 800de16:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800de1a:	f1a2 0008 	sub.w	r0, r2, #8
 800de1e:	6856      	ldr	r6, [r2, #4]
 800de20:	e00c      	b.n	800de3c <_malloc_r+0xcc>
 800de22:	2900      	cmp	r1, #0
 800de24:	68f1      	ldr	r1, [r6, #12]
 800de26:	db08      	blt.n	800de3a <_malloc_r+0xca>
 800de28:	68b3      	ldr	r3, [r6, #8]
 800de2a:	60d9      	str	r1, [r3, #12]
 800de2c:	608b      	str	r3, [r1, #8]
 800de2e:	18b3      	adds	r3, r6, r2
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	f042 0201 	orr.w	r2, r2, #1
 800de36:	605a      	str	r2, [r3, #4]
 800de38:	e1a3      	b.n	800e182 <_malloc_r+0x412>
 800de3a:	460e      	mov	r6, r1
 800de3c:	4286      	cmp	r6, r0
 800de3e:	d006      	beq.n	800de4e <_malloc_r+0xde>
 800de40:	6872      	ldr	r2, [r6, #4]
 800de42:	f022 0203 	bic.w	r2, r2, #3
 800de46:	1b11      	subs	r1, r2, r4
 800de48:	290f      	cmp	r1, #15
 800de4a:	ddea      	ble.n	800de22 <_malloc_r+0xb2>
 800de4c:	3b01      	subs	r3, #1
 800de4e:	3301      	adds	r3, #1
 800de50:	4a72      	ldr	r2, [pc, #456]	; (800e01c <_malloc_r+0x2ac>)
 800de52:	692e      	ldr	r6, [r5, #16]
 800de54:	f102 0708 	add.w	r7, r2, #8
 800de58:	42be      	cmp	r6, r7
 800de5a:	4639      	mov	r1, r7
 800de5c:	d079      	beq.n	800df52 <_malloc_r+0x1e2>
 800de5e:	6870      	ldr	r0, [r6, #4]
 800de60:	f020 0003 	bic.w	r0, r0, #3
 800de64:	ebc4 0e00 	rsb	lr, r4, r0
 800de68:	f1be 0f0f 	cmp.w	lr, #15
 800de6c:	dd0d      	ble.n	800de8a <_malloc_r+0x11a>
 800de6e:	1933      	adds	r3, r6, r4
 800de70:	f044 0401 	orr.w	r4, r4, #1
 800de74:	6074      	str	r4, [r6, #4]
 800de76:	6153      	str	r3, [r2, #20]
 800de78:	6113      	str	r3, [r2, #16]
 800de7a:	f04e 0201 	orr.w	r2, lr, #1
 800de7e:	60df      	str	r7, [r3, #12]
 800de80:	609f      	str	r7, [r3, #8]
 800de82:	605a      	str	r2, [r3, #4]
 800de84:	f843 e00e 	str.w	lr, [r3, lr]
 800de88:	e17b      	b.n	800e182 <_malloc_r+0x412>
 800de8a:	f1be 0f00 	cmp.w	lr, #0
 800de8e:	6157      	str	r7, [r2, #20]
 800de90:	6117      	str	r7, [r2, #16]
 800de92:	db05      	blt.n	800dea0 <_malloc_r+0x130>
 800de94:	4430      	add	r0, r6
 800de96:	6843      	ldr	r3, [r0, #4]
 800de98:	f043 0301 	orr.w	r3, r3, #1
 800de9c:	6043      	str	r3, [r0, #4]
 800de9e:	e170      	b.n	800e182 <_malloc_r+0x412>
 800dea0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800dea4:	d215      	bcs.n	800ded2 <_malloc_r+0x162>
 800dea6:	08c0      	lsrs	r0, r0, #3
 800dea8:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800deac:	2701      	movs	r7, #1
 800deae:	fa07 fe0e 	lsl.w	lr, r7, lr
 800deb2:	6857      	ldr	r7, [r2, #4]
 800deb4:	3001      	adds	r0, #1
 800deb6:	ea4e 0707 	orr.w	r7, lr, r7
 800deba:	6057      	str	r7, [r2, #4]
 800debc:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 800dec0:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800dec4:	f8c6 e008 	str.w	lr, [r6, #8]
 800dec8:	3f08      	subs	r7, #8
 800deca:	60f7      	str	r7, [r6, #12]
 800decc:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 800ded0:	e03d      	b.n	800df4e <_malloc_r+0x1de>
 800ded2:	0a42      	lsrs	r2, r0, #9
 800ded4:	2a04      	cmp	r2, #4
 800ded6:	d802      	bhi.n	800dede <_malloc_r+0x16e>
 800ded8:	0982      	lsrs	r2, r0, #6
 800deda:	3238      	adds	r2, #56	; 0x38
 800dedc:	e015      	b.n	800df0a <_malloc_r+0x19a>
 800dede:	2a14      	cmp	r2, #20
 800dee0:	d801      	bhi.n	800dee6 <_malloc_r+0x176>
 800dee2:	325b      	adds	r2, #91	; 0x5b
 800dee4:	e011      	b.n	800df0a <_malloc_r+0x19a>
 800dee6:	2a54      	cmp	r2, #84	; 0x54
 800dee8:	d802      	bhi.n	800def0 <_malloc_r+0x180>
 800deea:	0b02      	lsrs	r2, r0, #12
 800deec:	326e      	adds	r2, #110	; 0x6e
 800deee:	e00c      	b.n	800df0a <_malloc_r+0x19a>
 800def0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800def4:	d802      	bhi.n	800defc <_malloc_r+0x18c>
 800def6:	0bc2      	lsrs	r2, r0, #15
 800def8:	3277      	adds	r2, #119	; 0x77
 800defa:	e006      	b.n	800df0a <_malloc_r+0x19a>
 800defc:	f240 5754 	movw	r7, #1364	; 0x554
 800df00:	42ba      	cmp	r2, r7
 800df02:	bf9a      	itte	ls
 800df04:	0c82      	lsrls	r2, r0, #18
 800df06:	327c      	addls	r2, #124	; 0x7c
 800df08:	227e      	movhi	r2, #126	; 0x7e
 800df0a:	1c57      	adds	r7, r2, #1
 800df0c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800df10:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800df14:	f8df c104 	ldr.w	ip, [pc, #260]	; 800e01c <_malloc_r+0x2ac>
 800df18:	45be      	cmp	lr, r7
 800df1a:	d10d      	bne.n	800df38 <_malloc_r+0x1c8>
 800df1c:	2001      	movs	r0, #1
 800df1e:	1092      	asrs	r2, r2, #2
 800df20:	fa00 f202 	lsl.w	r2, r0, r2
 800df24:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800df28:	4310      	orrs	r0, r2
 800df2a:	f8cc 0004 	str.w	r0, [ip, #4]
 800df2e:	4672      	mov	r2, lr
 800df30:	e009      	b.n	800df46 <_malloc_r+0x1d6>
 800df32:	68bf      	ldr	r7, [r7, #8]
 800df34:	45be      	cmp	lr, r7
 800df36:	d004      	beq.n	800df42 <_malloc_r+0x1d2>
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	f022 0203 	bic.w	r2, r2, #3
 800df3e:	4290      	cmp	r0, r2
 800df40:	d3f7      	bcc.n	800df32 <_malloc_r+0x1c2>
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	46be      	mov	lr, r7
 800df46:	60f2      	str	r2, [r6, #12]
 800df48:	f8c6 e008 	str.w	lr, [r6, #8]
 800df4c:	6096      	str	r6, [r2, #8]
 800df4e:	f8ce 600c 	str.w	r6, [lr, #12]
 800df52:	2001      	movs	r0, #1
 800df54:	109a      	asrs	r2, r3, #2
 800df56:	fa00 f202 	lsl.w	r2, r0, r2
 800df5a:	6868      	ldr	r0, [r5, #4]
 800df5c:	4282      	cmp	r2, r0
 800df5e:	d85f      	bhi.n	800e020 <_malloc_r+0x2b0>
 800df60:	4202      	tst	r2, r0
 800df62:	d106      	bne.n	800df72 <_malloc_r+0x202>
 800df64:	f023 0303 	bic.w	r3, r3, #3
 800df68:	0052      	lsls	r2, r2, #1
 800df6a:	4202      	tst	r2, r0
 800df6c:	f103 0304 	add.w	r3, r3, #4
 800df70:	d0fa      	beq.n	800df68 <_malloc_r+0x1f8>
 800df72:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800df76:	46c2      	mov	sl, r8
 800df78:	469c      	mov	ip, r3
 800df7a:	f8da 600c 	ldr.w	r6, [sl, #12]
 800df7e:	4556      	cmp	r6, sl
 800df80:	d02c      	beq.n	800dfdc <_malloc_r+0x26c>
 800df82:	6870      	ldr	r0, [r6, #4]
 800df84:	68f7      	ldr	r7, [r6, #12]
 800df86:	f020 0003 	bic.w	r0, r0, #3
 800df8a:	ebc4 0e00 	rsb	lr, r4, r0
 800df8e:	f1be 0f0f 	cmp.w	lr, #15
 800df92:	dd11      	ble.n	800dfb8 <_malloc_r+0x248>
 800df94:	1933      	adds	r3, r6, r4
 800df96:	f044 0401 	orr.w	r4, r4, #1
 800df9a:	6074      	str	r4, [r6, #4]
 800df9c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800dfa0:	60d7      	str	r7, [r2, #12]
 800dfa2:	60ba      	str	r2, [r7, #8]
 800dfa4:	f04e 0201 	orr.w	r2, lr, #1
 800dfa8:	616b      	str	r3, [r5, #20]
 800dfaa:	612b      	str	r3, [r5, #16]
 800dfac:	60d9      	str	r1, [r3, #12]
 800dfae:	6099      	str	r1, [r3, #8]
 800dfb0:	605a      	str	r2, [r3, #4]
 800dfb2:	f843 e00e 	str.w	lr, [r3, lr]
 800dfb6:	e00b      	b.n	800dfd0 <_malloc_r+0x260>
 800dfb8:	f1be 0f00 	cmp.w	lr, #0
 800dfbc:	db0c      	blt.n	800dfd8 <_malloc_r+0x268>
 800dfbe:	1833      	adds	r3, r6, r0
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	f042 0201 	orr.w	r2, r2, #1
 800dfc6:	605a      	str	r2, [r3, #4]
 800dfc8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800dfcc:	60df      	str	r7, [r3, #12]
 800dfce:	60bb      	str	r3, [r7, #8]
 800dfd0:	4648      	mov	r0, r9
 800dfd2:	f000 f909 	bl	800e1e8 <__malloc_unlock>
 800dfd6:	e0d8      	b.n	800e18a <_malloc_r+0x41a>
 800dfd8:	463e      	mov	r6, r7
 800dfda:	e7d0      	b.n	800df7e <_malloc_r+0x20e>
 800dfdc:	f10c 0c01 	add.w	ip, ip, #1
 800dfe0:	f01c 0f03 	tst.w	ip, #3
 800dfe4:	f10a 0a08 	add.w	sl, sl, #8
 800dfe8:	d1c7      	bne.n	800df7a <_malloc_r+0x20a>
 800dfea:	0798      	lsls	r0, r3, #30
 800dfec:	d104      	bne.n	800dff8 <_malloc_r+0x288>
 800dfee:	686b      	ldr	r3, [r5, #4]
 800dff0:	ea23 0302 	bic.w	r3, r3, r2
 800dff4:	606b      	str	r3, [r5, #4]
 800dff6:	e005      	b.n	800e004 <_malloc_r+0x294>
 800dff8:	f858 0908 	ldr.w	r0, [r8], #-8
 800dffc:	4580      	cmp	r8, r0
 800dffe:	f103 33ff 	add.w	r3, r3, #4294967295
 800e002:	d0f2      	beq.n	800dfea <_malloc_r+0x27a>
 800e004:	6868      	ldr	r0, [r5, #4]
 800e006:	0052      	lsls	r2, r2, #1
 800e008:	4282      	cmp	r2, r0
 800e00a:	d809      	bhi.n	800e020 <_malloc_r+0x2b0>
 800e00c:	b142      	cbz	r2, 800e020 <_malloc_r+0x2b0>
 800e00e:	4663      	mov	r3, ip
 800e010:	4202      	tst	r2, r0
 800e012:	d1ae      	bne.n	800df72 <_malloc_r+0x202>
 800e014:	3304      	adds	r3, #4
 800e016:	0052      	lsls	r2, r2, #1
 800e018:	e7fa      	b.n	800e010 <_malloc_r+0x2a0>
 800e01a:	bf00      	nop
 800e01c:	20010160 	.word	0x20010160
 800e020:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800e024:	f8db 6004 	ldr.w	r6, [fp, #4]
 800e028:	f026 0603 	bic.w	r6, r6, #3
 800e02c:	42b4      	cmp	r4, r6
 800e02e:	d803      	bhi.n	800e038 <_malloc_r+0x2c8>
 800e030:	1b33      	subs	r3, r6, r4
 800e032:	2b0f      	cmp	r3, #15
 800e034:	f300 809c 	bgt.w	800e170 <_malloc_r+0x400>
 800e038:	4a56      	ldr	r2, [pc, #344]	; (800e194 <_malloc_r+0x424>)
 800e03a:	4957      	ldr	r1, [pc, #348]	; (800e198 <_malloc_r+0x428>)
 800e03c:	6812      	ldr	r2, [r2, #0]
 800e03e:	6808      	ldr	r0, [r1, #0]
 800e040:	9101      	str	r1, [sp, #4]
 800e042:	f102 0810 	add.w	r8, r2, #16
 800e046:	4a55      	ldr	r2, [pc, #340]	; (800e19c <_malloc_r+0x42c>)
 800e048:	9203      	str	r2, [sp, #12]
 800e04a:	3001      	adds	r0, #1
 800e04c:	bf18      	it	ne
 800e04e:	f102 31ff 	addne.w	r1, r2, #4294967295
 800e052:	44a0      	add	r8, r4
 800e054:	bf1e      	ittt	ne
 800e056:	4488      	addne	r8, r1
 800e058:	4251      	negne	r1, r2
 800e05a:	ea01 0808 	andne.w	r8, r1, r8
 800e05e:	eb0b 0306 	add.w	r3, fp, r6
 800e062:	4641      	mov	r1, r8
 800e064:	4648      	mov	r0, r9
 800e066:	9302      	str	r3, [sp, #8]
 800e068:	f000 fd3e 	bl	800eae8 <_sbrk_r>
 800e06c:	1c42      	adds	r2, r0, #1
 800e06e:	4607      	mov	r7, r0
 800e070:	d06f      	beq.n	800e152 <_malloc_r+0x3e2>
 800e072:	9b02      	ldr	r3, [sp, #8]
 800e074:	9a03      	ldr	r2, [sp, #12]
 800e076:	4283      	cmp	r3, r0
 800e078:	d901      	bls.n	800e07e <_malloc_r+0x30e>
 800e07a:	45ab      	cmp	fp, r5
 800e07c:	d169      	bne.n	800e152 <_malloc_r+0x3e2>
 800e07e:	f8df a128 	ldr.w	sl, [pc, #296]	; 800e1a8 <_malloc_r+0x438>
 800e082:	f8df c128 	ldr.w	ip, [pc, #296]	; 800e1ac <_malloc_r+0x43c>
 800e086:	f8da 0000 	ldr.w	r0, [sl]
 800e08a:	42bb      	cmp	r3, r7
 800e08c:	4440      	add	r0, r8
 800e08e:	f8ca 0000 	str.w	r0, [sl]
 800e092:	d108      	bne.n	800e0a6 <_malloc_r+0x336>
 800e094:	ea13 0f0c 	tst.w	r3, ip
 800e098:	d105      	bne.n	800e0a6 <_malloc_r+0x336>
 800e09a:	68ab      	ldr	r3, [r5, #8]
 800e09c:	4446      	add	r6, r8
 800e09e:	f046 0601 	orr.w	r6, r6, #1
 800e0a2:	605e      	str	r6, [r3, #4]
 800e0a4:	e049      	b.n	800e13a <_malloc_r+0x3ca>
 800e0a6:	9901      	ldr	r1, [sp, #4]
 800e0a8:	f8d1 e000 	ldr.w	lr, [r1]
 800e0ac:	f1be 3fff 	cmp.w	lr, #4294967295
 800e0b0:	bf15      	itete	ne
 800e0b2:	1afb      	subne	r3, r7, r3
 800e0b4:	4b38      	ldreq	r3, [pc, #224]	; (800e198 <_malloc_r+0x428>)
 800e0b6:	181b      	addne	r3, r3, r0
 800e0b8:	601f      	streq	r7, [r3, #0]
 800e0ba:	bf18      	it	ne
 800e0bc:	f8ca 3000 	strne.w	r3, [sl]
 800e0c0:	f017 0307 	ands.w	r3, r7, #7
 800e0c4:	bf1c      	itt	ne
 800e0c6:	f1c3 0308 	rsbne	r3, r3, #8
 800e0ca:	18ff      	addne	r7, r7, r3
 800e0cc:	44b8      	add	r8, r7
 800e0ce:	441a      	add	r2, r3
 800e0d0:	ea08 080c 	and.w	r8, r8, ip
 800e0d4:	ebc8 0802 	rsb	r8, r8, r2
 800e0d8:	4641      	mov	r1, r8
 800e0da:	4648      	mov	r0, r9
 800e0dc:	f000 fd04 	bl	800eae8 <_sbrk_r>
 800e0e0:	1c43      	adds	r3, r0, #1
 800e0e2:	bf04      	itt	eq
 800e0e4:	4638      	moveq	r0, r7
 800e0e6:	f04f 0800 	moveq.w	r8, #0
 800e0ea:	f8da 3000 	ldr.w	r3, [sl]
 800e0ee:	60af      	str	r7, [r5, #8]
 800e0f0:	1bc2      	subs	r2, r0, r7
 800e0f2:	4442      	add	r2, r8
 800e0f4:	4443      	add	r3, r8
 800e0f6:	f042 0201 	orr.w	r2, r2, #1
 800e0fa:	45ab      	cmp	fp, r5
 800e0fc:	f8ca 3000 	str.w	r3, [sl]
 800e100:	607a      	str	r2, [r7, #4]
 800e102:	d01a      	beq.n	800e13a <_malloc_r+0x3ca>
 800e104:	2e0f      	cmp	r6, #15
 800e106:	d802      	bhi.n	800e10e <_malloc_r+0x39e>
 800e108:	2301      	movs	r3, #1
 800e10a:	607b      	str	r3, [r7, #4]
 800e10c:	e021      	b.n	800e152 <_malloc_r+0x3e2>
 800e10e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e112:	3e0c      	subs	r6, #12
 800e114:	f026 0607 	bic.w	r6, r6, #7
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	4333      	orrs	r3, r6
 800e11e:	f8cb 3004 	str.w	r3, [fp, #4]
 800e122:	eb0b 0306 	add.w	r3, fp, r6
 800e126:	2205      	movs	r2, #5
 800e128:	2e0f      	cmp	r6, #15
 800e12a:	605a      	str	r2, [r3, #4]
 800e12c:	609a      	str	r2, [r3, #8]
 800e12e:	d904      	bls.n	800e13a <_malloc_r+0x3ca>
 800e130:	f10b 0108 	add.w	r1, fp, #8
 800e134:	4648      	mov	r0, r9
 800e136:	f7ff fb81 	bl	800d83c <_free_r>
 800e13a:	4a19      	ldr	r2, [pc, #100]	; (800e1a0 <_malloc_r+0x430>)
 800e13c:	f8da 3000 	ldr.w	r3, [sl]
 800e140:	6811      	ldr	r1, [r2, #0]
 800e142:	428b      	cmp	r3, r1
 800e144:	bf88      	it	hi
 800e146:	6013      	strhi	r3, [r2, #0]
 800e148:	4a16      	ldr	r2, [pc, #88]	; (800e1a4 <_malloc_r+0x434>)
 800e14a:	6811      	ldr	r1, [r2, #0]
 800e14c:	428b      	cmp	r3, r1
 800e14e:	bf88      	it	hi
 800e150:	6013      	strhi	r3, [r2, #0]
 800e152:	68ab      	ldr	r3, [r5, #8]
 800e154:	685a      	ldr	r2, [r3, #4]
 800e156:	f022 0203 	bic.w	r2, r2, #3
 800e15a:	4294      	cmp	r4, r2
 800e15c:	eba2 0304 	sub.w	r3, r2, r4
 800e160:	d801      	bhi.n	800e166 <_malloc_r+0x3f6>
 800e162:	2b0f      	cmp	r3, #15
 800e164:	dc04      	bgt.n	800e170 <_malloc_r+0x400>
 800e166:	4648      	mov	r0, r9
 800e168:	f000 f83e 	bl	800e1e8 <__malloc_unlock>
 800e16c:	2600      	movs	r6, #0
 800e16e:	e00c      	b.n	800e18a <_malloc_r+0x41a>
 800e170:	68ae      	ldr	r6, [r5, #8]
 800e172:	f044 0201 	orr.w	r2, r4, #1
 800e176:	4434      	add	r4, r6
 800e178:	f043 0301 	orr.w	r3, r3, #1
 800e17c:	6072      	str	r2, [r6, #4]
 800e17e:	60ac      	str	r4, [r5, #8]
 800e180:	6063      	str	r3, [r4, #4]
 800e182:	4648      	mov	r0, r9
 800e184:	f000 f830 	bl	800e1e8 <__malloc_unlock>
 800e188:	3608      	adds	r6, #8
 800e18a:	4630      	mov	r0, r6
 800e18c:	b005      	add	sp, #20
 800e18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e192:	bf00      	nop
 800e194:	200146b0 	.word	0x200146b0
 800e198:	2001056c 	.word	0x2001056c
 800e19c:	00000080 	.word	0x00000080
 800e1a0:	200146ac 	.word	0x200146ac
 800e1a4:	200146a8 	.word	0x200146a8
 800e1a8:	200146b4 	.word	0x200146b4
 800e1ac:	0000007f 	.word	0x0000007f

0800e1b0 <memmove>:
 800e1b0:	4288      	cmp	r0, r1
 800e1b2:	b510      	push	{r4, lr}
 800e1b4:	eb01 0302 	add.w	r3, r1, r2
 800e1b8:	d801      	bhi.n	800e1be <memmove+0xe>
 800e1ba:	1e42      	subs	r2, r0, #1
 800e1bc:	e00b      	b.n	800e1d6 <memmove+0x26>
 800e1be:	4298      	cmp	r0, r3
 800e1c0:	d2fb      	bcs.n	800e1ba <memmove+0xa>
 800e1c2:	1881      	adds	r1, r0, r2
 800e1c4:	1ad2      	subs	r2, r2, r3
 800e1c6:	42d3      	cmn	r3, r2
 800e1c8:	d004      	beq.n	800e1d4 <memmove+0x24>
 800e1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e1d2:	e7f8      	b.n	800e1c6 <memmove+0x16>
 800e1d4:	bd10      	pop	{r4, pc}
 800e1d6:	4299      	cmp	r1, r3
 800e1d8:	d004      	beq.n	800e1e4 <memmove+0x34>
 800e1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e1e2:	e7f8      	b.n	800e1d6 <memmove+0x26>
 800e1e4:	bd10      	pop	{r4, pc}

0800e1e6 <__malloc_lock>:
 800e1e6:	4770      	bx	lr

0800e1e8 <__malloc_unlock>:
 800e1e8:	4770      	bx	lr

0800e1ea <_Balloc>:
 800e1ea:	b570      	push	{r4, r5, r6, lr}
 800e1ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	460e      	mov	r6, r1
 800e1f2:	b93d      	cbnz	r5, 800e204 <_Balloc+0x1a>
 800e1f4:	2010      	movs	r0, #16
 800e1f6:	f7ff fdb3 	bl	800dd60 <malloc>
 800e1fa:	6260      	str	r0, [r4, #36]	; 0x24
 800e1fc:	6045      	str	r5, [r0, #4]
 800e1fe:	6085      	str	r5, [r0, #8]
 800e200:	6005      	str	r5, [r0, #0]
 800e202:	60c5      	str	r5, [r0, #12]
 800e204:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e206:	68eb      	ldr	r3, [r5, #12]
 800e208:	b143      	cbz	r3, 800e21c <_Balloc+0x32>
 800e20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e212:	b178      	cbz	r0, 800e234 <_Balloc+0x4a>
 800e214:	6802      	ldr	r2, [r0, #0]
 800e216:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e21a:	e017      	b.n	800e24c <_Balloc+0x62>
 800e21c:	2221      	movs	r2, #33	; 0x21
 800e21e:	2104      	movs	r1, #4
 800e220:	4620      	mov	r0, r4
 800e222:	f000 fd45 	bl	800ecb0 <_calloc_r>
 800e226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e228:	60e8      	str	r0, [r5, #12]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1ec      	bne.n	800e20a <_Balloc+0x20>
 800e230:	2000      	movs	r0, #0
 800e232:	bd70      	pop	{r4, r5, r6, pc}
 800e234:	2101      	movs	r1, #1
 800e236:	fa01 f506 	lsl.w	r5, r1, r6
 800e23a:	1d6a      	adds	r2, r5, #5
 800e23c:	0092      	lsls	r2, r2, #2
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 fd36 	bl	800ecb0 <_calloc_r>
 800e244:	2800      	cmp	r0, #0
 800e246:	d0f3      	beq.n	800e230 <_Balloc+0x46>
 800e248:	6046      	str	r6, [r0, #4]
 800e24a:	6085      	str	r5, [r0, #8]
 800e24c:	2300      	movs	r3, #0
 800e24e:	6103      	str	r3, [r0, #16]
 800e250:	60c3      	str	r3, [r0, #12]
 800e252:	bd70      	pop	{r4, r5, r6, pc}

0800e254 <_Bfree>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e258:	4606      	mov	r6, r0
 800e25a:	460d      	mov	r5, r1
 800e25c:	b93c      	cbnz	r4, 800e26e <_Bfree+0x1a>
 800e25e:	2010      	movs	r0, #16
 800e260:	f7ff fd7e 	bl	800dd60 <malloc>
 800e264:	6270      	str	r0, [r6, #36]	; 0x24
 800e266:	6044      	str	r4, [r0, #4]
 800e268:	6084      	str	r4, [r0, #8]
 800e26a:	6004      	str	r4, [r0, #0]
 800e26c:	60c4      	str	r4, [r0, #12]
 800e26e:	b13d      	cbz	r5, 800e280 <_Bfree+0x2c>
 800e270:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e272:	686a      	ldr	r2, [r5, #4]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e27a:	6029      	str	r1, [r5, #0]
 800e27c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e280:	bd70      	pop	{r4, r5, r6, pc}

0800e282 <__multadd>:
 800e282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e286:	690d      	ldr	r5, [r1, #16]
 800e288:	461f      	mov	r7, r3
 800e28a:	4606      	mov	r6, r0
 800e28c:	460c      	mov	r4, r1
 800e28e:	f101 0e14 	add.w	lr, r1, #20
 800e292:	2300      	movs	r3, #0
 800e294:	f8de 0000 	ldr.w	r0, [lr]
 800e298:	b281      	uxth	r1, r0
 800e29a:	fb02 7101 	mla	r1, r2, r1, r7
 800e29e:	0c0f      	lsrs	r7, r1, #16
 800e2a0:	0c00      	lsrs	r0, r0, #16
 800e2a2:	fb02 7000 	mla	r0, r2, r0, r7
 800e2a6:	b289      	uxth	r1, r1
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e2ae:	429d      	cmp	r5, r3
 800e2b0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e2b4:	f84e 1b04 	str.w	r1, [lr], #4
 800e2b8:	dcec      	bgt.n	800e294 <__multadd+0x12>
 800e2ba:	b1d7      	cbz	r7, 800e2f2 <__multadd+0x70>
 800e2bc:	68a3      	ldr	r3, [r4, #8]
 800e2be:	429d      	cmp	r5, r3
 800e2c0:	db12      	blt.n	800e2e8 <__multadd+0x66>
 800e2c2:	6861      	ldr	r1, [r4, #4]
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	3101      	adds	r1, #1
 800e2c8:	f7ff ff8f 	bl	800e1ea <_Balloc>
 800e2cc:	6922      	ldr	r2, [r4, #16]
 800e2ce:	3202      	adds	r2, #2
 800e2d0:	f104 010c 	add.w	r1, r4, #12
 800e2d4:	4680      	mov	r8, r0
 800e2d6:	0092      	lsls	r2, r2, #2
 800e2d8:	300c      	adds	r0, #12
 800e2da:	f7fd f93d 	bl	800b558 <memcpy>
 800e2de:	4621      	mov	r1, r4
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f7ff ffb7 	bl	800e254 <_Bfree>
 800e2e6:	4644      	mov	r4, r8
 800e2e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2ec:	3501      	adds	r5, #1
 800e2ee:	615f      	str	r7, [r3, #20]
 800e2f0:	6125      	str	r5, [r4, #16]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2f8 <__hi0bits>:
 800e2f8:	0c03      	lsrs	r3, r0, #16
 800e2fa:	041b      	lsls	r3, r3, #16
 800e2fc:	b913      	cbnz	r3, 800e304 <__hi0bits+0xc>
 800e2fe:	0400      	lsls	r0, r0, #16
 800e300:	2310      	movs	r3, #16
 800e302:	e000      	b.n	800e306 <__hi0bits+0xe>
 800e304:	2300      	movs	r3, #0
 800e306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e30a:	bf04      	itt	eq
 800e30c:	0200      	lsleq	r0, r0, #8
 800e30e:	3308      	addeq	r3, #8
 800e310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e314:	bf04      	itt	eq
 800e316:	0100      	lsleq	r0, r0, #4
 800e318:	3304      	addeq	r3, #4
 800e31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e31e:	bf04      	itt	eq
 800e320:	0080      	lsleq	r0, r0, #2
 800e322:	3302      	addeq	r3, #2
 800e324:	2800      	cmp	r0, #0
 800e326:	db03      	blt.n	800e330 <__hi0bits+0x38>
 800e328:	0042      	lsls	r2, r0, #1
 800e32a:	d503      	bpl.n	800e334 <__hi0bits+0x3c>
 800e32c:	1c58      	adds	r0, r3, #1
 800e32e:	4770      	bx	lr
 800e330:	4618      	mov	r0, r3
 800e332:	4770      	bx	lr
 800e334:	2020      	movs	r0, #32
 800e336:	4770      	bx	lr

0800e338 <__lo0bits>:
 800e338:	6803      	ldr	r3, [r0, #0]
 800e33a:	f013 0207 	ands.w	r2, r3, #7
 800e33e:	d00b      	beq.n	800e358 <__lo0bits+0x20>
 800e340:	07d9      	lsls	r1, r3, #31
 800e342:	d422      	bmi.n	800e38a <__lo0bits+0x52>
 800e344:	079a      	lsls	r2, r3, #30
 800e346:	bf4b      	itete	mi
 800e348:	085b      	lsrmi	r3, r3, #1
 800e34a:	089b      	lsrpl	r3, r3, #2
 800e34c:	6003      	strmi	r3, [r0, #0]
 800e34e:	6003      	strpl	r3, [r0, #0]
 800e350:	bf4c      	ite	mi
 800e352:	2001      	movmi	r0, #1
 800e354:	2002      	movpl	r0, #2
 800e356:	4770      	bx	lr
 800e358:	b299      	uxth	r1, r3
 800e35a:	b909      	cbnz	r1, 800e360 <__lo0bits+0x28>
 800e35c:	0c1b      	lsrs	r3, r3, #16
 800e35e:	2210      	movs	r2, #16
 800e360:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e364:	bf04      	itt	eq
 800e366:	0a1b      	lsreq	r3, r3, #8
 800e368:	3208      	addeq	r2, #8
 800e36a:	0719      	lsls	r1, r3, #28
 800e36c:	bf04      	itt	eq
 800e36e:	091b      	lsreq	r3, r3, #4
 800e370:	3204      	addeq	r2, #4
 800e372:	0799      	lsls	r1, r3, #30
 800e374:	bf04      	itt	eq
 800e376:	089b      	lsreq	r3, r3, #2
 800e378:	3202      	addeq	r2, #2
 800e37a:	07d9      	lsls	r1, r3, #31
 800e37c:	d402      	bmi.n	800e384 <__lo0bits+0x4c>
 800e37e:	085b      	lsrs	r3, r3, #1
 800e380:	d005      	beq.n	800e38e <__lo0bits+0x56>
 800e382:	3201      	adds	r2, #1
 800e384:	6003      	str	r3, [r0, #0]
 800e386:	4610      	mov	r0, r2
 800e388:	4770      	bx	lr
 800e38a:	2000      	movs	r0, #0
 800e38c:	4770      	bx	lr
 800e38e:	2020      	movs	r0, #32
 800e390:	4770      	bx	lr

0800e392 <__i2b>:
 800e392:	b510      	push	{r4, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	2101      	movs	r1, #1
 800e398:	f7ff ff27 	bl	800e1ea <_Balloc>
 800e39c:	2201      	movs	r2, #1
 800e39e:	6144      	str	r4, [r0, #20]
 800e3a0:	6102      	str	r2, [r0, #16]
 800e3a2:	bd10      	pop	{r4, pc}

0800e3a4 <__multiply>:
 800e3a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	4614      	mov	r4, r2
 800e3aa:	690a      	ldr	r2, [r1, #16]
 800e3ac:	6923      	ldr	r3, [r4, #16]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	bfb8      	it	lt
 800e3b2:	460b      	movlt	r3, r1
 800e3b4:	4688      	mov	r8, r1
 800e3b6:	bfbc      	itt	lt
 800e3b8:	46a0      	movlt	r8, r4
 800e3ba:	461c      	movlt	r4, r3
 800e3bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e3c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e3c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e3cc:	eb07 0609 	add.w	r6, r7, r9
 800e3d0:	429e      	cmp	r6, r3
 800e3d2:	bfc8      	it	gt
 800e3d4:	3101      	addgt	r1, #1
 800e3d6:	f7ff ff08 	bl	800e1ea <_Balloc>
 800e3da:	f100 0514 	add.w	r5, r0, #20
 800e3de:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800e3e2:	462b      	mov	r3, r5
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	4563      	cmp	r3, ip
 800e3e8:	d202      	bcs.n	800e3f0 <__multiply+0x4c>
 800e3ea:	f843 2b04 	str.w	r2, [r3], #4
 800e3ee:	e7fa      	b.n	800e3e6 <__multiply+0x42>
 800e3f0:	f104 0214 	add.w	r2, r4, #20
 800e3f4:	f108 0114 	add.w	r1, r8, #20
 800e3f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e3fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	9b00      	ldr	r3, [sp, #0]
 800e404:	9201      	str	r2, [sp, #4]
 800e406:	4293      	cmp	r3, r2
 800e408:	d957      	bls.n	800e4ba <__multiply+0x116>
 800e40a:	f8b2 b000 	ldrh.w	fp, [r2]
 800e40e:	f1bb 0f00 	cmp.w	fp, #0
 800e412:	d023      	beq.n	800e45c <__multiply+0xb8>
 800e414:	4689      	mov	r9, r1
 800e416:	46ae      	mov	lr, r5
 800e418:	f04f 0800 	mov.w	r8, #0
 800e41c:	f859 4b04 	ldr.w	r4, [r9], #4
 800e420:	f8be a000 	ldrh.w	sl, [lr]
 800e424:	b2a3      	uxth	r3, r4
 800e426:	fb0b a303 	mla	r3, fp, r3, sl
 800e42a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e42e:	f8de 4000 	ldr.w	r4, [lr]
 800e432:	4443      	add	r3, r8
 800e434:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e438:	fb0b 840a 	mla	r4, fp, sl, r8
 800e43c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e440:	46f2      	mov	sl, lr
 800e442:	b29b      	uxth	r3, r3
 800e444:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e448:	454f      	cmp	r7, r9
 800e44a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e44e:	f84a 3b04 	str.w	r3, [sl], #4
 800e452:	d901      	bls.n	800e458 <__multiply+0xb4>
 800e454:	46d6      	mov	lr, sl
 800e456:	e7e1      	b.n	800e41c <__multiply+0x78>
 800e458:	f8ce 8004 	str.w	r8, [lr, #4]
 800e45c:	9b01      	ldr	r3, [sp, #4]
 800e45e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e462:	3204      	adds	r2, #4
 800e464:	f1ba 0f00 	cmp.w	sl, #0
 800e468:	d021      	beq.n	800e4ae <__multiply+0x10a>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	462c      	mov	r4, r5
 800e46e:	4689      	mov	r9, r1
 800e470:	f04f 0800 	mov.w	r8, #0
 800e474:	f8b9 e000 	ldrh.w	lr, [r9]
 800e478:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800e47c:	fb0a be0e 	mla	lr, sl, lr, fp
 800e480:	44f0      	add	r8, lr
 800e482:	46a3      	mov	fp, r4
 800e484:	b29b      	uxth	r3, r3
 800e486:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e48a:	f84b 3b04 	str.w	r3, [fp], #4
 800e48e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e492:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800e496:	0c1b      	lsrs	r3, r3, #16
 800e498:	fb0a e303 	mla	r3, sl, r3, lr
 800e49c:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800e4a0:	454f      	cmp	r7, r9
 800e4a2:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800e4a6:	d901      	bls.n	800e4ac <__multiply+0x108>
 800e4a8:	465c      	mov	r4, fp
 800e4aa:	e7e3      	b.n	800e474 <__multiply+0xd0>
 800e4ac:	6063      	str	r3, [r4, #4]
 800e4ae:	3504      	adds	r5, #4
 800e4b0:	e7a7      	b.n	800e402 <__multiply+0x5e>
 800e4b2:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800e4b6:	b913      	cbnz	r3, 800e4be <__multiply+0x11a>
 800e4b8:	3e01      	subs	r6, #1
 800e4ba:	2e00      	cmp	r6, #0
 800e4bc:	dcf9      	bgt.n	800e4b2 <__multiply+0x10e>
 800e4be:	6106      	str	r6, [r0, #16]
 800e4c0:	b003      	add	sp, #12
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e4c8 <__pow5mult>:
 800e4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4cc:	4615      	mov	r5, r2
 800e4ce:	f012 0203 	ands.w	r2, r2, #3
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	460f      	mov	r7, r1
 800e4d6:	d007      	beq.n	800e4e8 <__pow5mult+0x20>
 800e4d8:	3a01      	subs	r2, #1
 800e4da:	4c21      	ldr	r4, [pc, #132]	; (800e560 <__pow5mult+0x98>)
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4e2:	f7ff fece 	bl	800e282 <__multadd>
 800e4e6:	4607      	mov	r7, r0
 800e4e8:	10ad      	asrs	r5, r5, #2
 800e4ea:	d036      	beq.n	800e55a <__pow5mult+0x92>
 800e4ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e4ee:	b93c      	cbnz	r4, 800e500 <__pow5mult+0x38>
 800e4f0:	2010      	movs	r0, #16
 800e4f2:	f7ff fc35 	bl	800dd60 <malloc>
 800e4f6:	6270      	str	r0, [r6, #36]	; 0x24
 800e4f8:	6044      	str	r4, [r0, #4]
 800e4fa:	6084      	str	r4, [r0, #8]
 800e4fc:	6004      	str	r4, [r0, #0]
 800e4fe:	60c4      	str	r4, [r0, #12]
 800e500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e508:	b94c      	cbnz	r4, 800e51e <__pow5mult+0x56>
 800e50a:	f240 2171 	movw	r1, #625	; 0x271
 800e50e:	4630      	mov	r0, r6
 800e510:	f7ff ff3f 	bl	800e392 <__i2b>
 800e514:	2300      	movs	r3, #0
 800e516:	f8c8 0008 	str.w	r0, [r8, #8]
 800e51a:	4604      	mov	r4, r0
 800e51c:	6003      	str	r3, [r0, #0]
 800e51e:	f04f 0800 	mov.w	r8, #0
 800e522:	07eb      	lsls	r3, r5, #31
 800e524:	d50a      	bpl.n	800e53c <__pow5mult+0x74>
 800e526:	4639      	mov	r1, r7
 800e528:	4622      	mov	r2, r4
 800e52a:	4630      	mov	r0, r6
 800e52c:	f7ff ff3a 	bl	800e3a4 <__multiply>
 800e530:	4639      	mov	r1, r7
 800e532:	4681      	mov	r9, r0
 800e534:	4630      	mov	r0, r6
 800e536:	f7ff fe8d 	bl	800e254 <_Bfree>
 800e53a:	464f      	mov	r7, r9
 800e53c:	106d      	asrs	r5, r5, #1
 800e53e:	d00c      	beq.n	800e55a <__pow5mult+0x92>
 800e540:	6820      	ldr	r0, [r4, #0]
 800e542:	b108      	cbz	r0, 800e548 <__pow5mult+0x80>
 800e544:	4604      	mov	r4, r0
 800e546:	e7ec      	b.n	800e522 <__pow5mult+0x5a>
 800e548:	4622      	mov	r2, r4
 800e54a:	4621      	mov	r1, r4
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7ff ff29 	bl	800e3a4 <__multiply>
 800e552:	6020      	str	r0, [r4, #0]
 800e554:	f8c0 8000 	str.w	r8, [r0]
 800e558:	e7f4      	b.n	800e544 <__pow5mult+0x7c>
 800e55a:	4638      	mov	r0, r7
 800e55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e560:	08011ca8 	.word	0x08011ca8

0800e564 <__lshift>:
 800e564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e568:	460c      	mov	r4, r1
 800e56a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e56e:	6926      	ldr	r6, [r4, #16]
 800e570:	6849      	ldr	r1, [r1, #4]
 800e572:	68a3      	ldr	r3, [r4, #8]
 800e574:	4456      	add	r6, sl
 800e576:	4607      	mov	r7, r0
 800e578:	4691      	mov	r9, r2
 800e57a:	1c75      	adds	r5, r6, #1
 800e57c:	42ab      	cmp	r3, r5
 800e57e:	da02      	bge.n	800e586 <__lshift+0x22>
 800e580:	3101      	adds	r1, #1
 800e582:	005b      	lsls	r3, r3, #1
 800e584:	e7fa      	b.n	800e57c <__lshift+0x18>
 800e586:	4638      	mov	r0, r7
 800e588:	f7ff fe2f 	bl	800e1ea <_Balloc>
 800e58c:	2300      	movs	r3, #0
 800e58e:	4680      	mov	r8, r0
 800e590:	f100 0114 	add.w	r1, r0, #20
 800e594:	461a      	mov	r2, r3
 800e596:	4553      	cmp	r3, sl
 800e598:	da03      	bge.n	800e5a2 <__lshift+0x3e>
 800e59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	e7f9      	b.n	800e596 <__lshift+0x32>
 800e5a2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800e5a6:	6920      	ldr	r0, [r4, #16]
 800e5a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5ac:	f019 091f 	ands.w	r9, r9, #31
 800e5b0:	f104 0114 	add.w	r1, r4, #20
 800e5b4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800e5b8:	d014      	beq.n	800e5e4 <__lshift+0x80>
 800e5ba:	f1c9 0c20 	rsb	ip, r9, #32
 800e5be:	2200      	movs	r2, #0
 800e5c0:	6808      	ldr	r0, [r1, #0]
 800e5c2:	fa00 f009 	lsl.w	r0, r0, r9
 800e5c6:	4302      	orrs	r2, r0
 800e5c8:	469a      	mov	sl, r3
 800e5ca:	f843 2b04 	str.w	r2, [r3], #4
 800e5ce:	f851 2b04 	ldr.w	r2, [r1], #4
 800e5d2:	458e      	cmp	lr, r1
 800e5d4:	fa22 f20c 	lsr.w	r2, r2, ip
 800e5d8:	d8f2      	bhi.n	800e5c0 <__lshift+0x5c>
 800e5da:	f8ca 2004 	str.w	r2, [sl, #4]
 800e5de:	b142      	cbz	r2, 800e5f2 <__lshift+0x8e>
 800e5e0:	1cb5      	adds	r5, r6, #2
 800e5e2:	e006      	b.n	800e5f2 <__lshift+0x8e>
 800e5e4:	3b04      	subs	r3, #4
 800e5e6:	f851 2b04 	ldr.w	r2, [r1], #4
 800e5ea:	f843 2f04 	str.w	r2, [r3, #4]!
 800e5ee:	458e      	cmp	lr, r1
 800e5f0:	d8f9      	bhi.n	800e5e6 <__lshift+0x82>
 800e5f2:	3d01      	subs	r5, #1
 800e5f4:	4638      	mov	r0, r7
 800e5f6:	f8c8 5010 	str.w	r5, [r8, #16]
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	f7ff fe2a 	bl	800e254 <_Bfree>
 800e600:	4640      	mov	r0, r8
 800e602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e606 <__mcmp>:
 800e606:	6903      	ldr	r3, [r0, #16]
 800e608:	690a      	ldr	r2, [r1, #16]
 800e60a:	1a9b      	subs	r3, r3, r2
 800e60c:	b510      	push	{r4, lr}
 800e60e:	d111      	bne.n	800e634 <__mcmp+0x2e>
 800e610:	0092      	lsls	r2, r2, #2
 800e612:	3014      	adds	r0, #20
 800e614:	3114      	adds	r1, #20
 800e616:	1883      	adds	r3, r0, r2
 800e618:	440a      	add	r2, r1
 800e61a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800e61e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e622:	428c      	cmp	r4, r1
 800e624:	d002      	beq.n	800e62c <__mcmp+0x26>
 800e626:	d307      	bcc.n	800e638 <__mcmp+0x32>
 800e628:	2001      	movs	r0, #1
 800e62a:	bd10      	pop	{r4, pc}
 800e62c:	4298      	cmp	r0, r3
 800e62e:	d3f4      	bcc.n	800e61a <__mcmp+0x14>
 800e630:	2000      	movs	r0, #0
 800e632:	bd10      	pop	{r4, pc}
 800e634:	4618      	mov	r0, r3
 800e636:	bd10      	pop	{r4, pc}
 800e638:	f04f 30ff 	mov.w	r0, #4294967295
 800e63c:	bd10      	pop	{r4, pc}

0800e63e <__mdiff>:
 800e63e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e642:	460c      	mov	r4, r1
 800e644:	4607      	mov	r7, r0
 800e646:	4611      	mov	r1, r2
 800e648:	4620      	mov	r0, r4
 800e64a:	4615      	mov	r5, r2
 800e64c:	f7ff ffdb 	bl	800e606 <__mcmp>
 800e650:	1e06      	subs	r6, r0, #0
 800e652:	d108      	bne.n	800e666 <__mdiff+0x28>
 800e654:	4631      	mov	r1, r6
 800e656:	4638      	mov	r0, r7
 800e658:	f7ff fdc7 	bl	800e1ea <_Balloc>
 800e65c:	2301      	movs	r3, #1
 800e65e:	6103      	str	r3, [r0, #16]
 800e660:	6146      	str	r6, [r0, #20]
 800e662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e666:	bfbc      	itt	lt
 800e668:	4623      	movlt	r3, r4
 800e66a:	462c      	movlt	r4, r5
 800e66c:	4638      	mov	r0, r7
 800e66e:	6861      	ldr	r1, [r4, #4]
 800e670:	bfba      	itte	lt
 800e672:	461d      	movlt	r5, r3
 800e674:	2601      	movlt	r6, #1
 800e676:	2600      	movge	r6, #0
 800e678:	f7ff fdb7 	bl	800e1ea <_Balloc>
 800e67c:	692b      	ldr	r3, [r5, #16]
 800e67e:	60c6      	str	r6, [r0, #12]
 800e680:	6926      	ldr	r6, [r4, #16]
 800e682:	f105 0914 	add.w	r9, r5, #20
 800e686:	3414      	adds	r4, #20
 800e688:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800e68c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e690:	f100 0514 	add.w	r5, r0, #20
 800e694:	f04f 0c00 	mov.w	ip, #0
 800e698:	f854 3b04 	ldr.w	r3, [r4], #4
 800e69c:	f859 2b04 	ldr.w	r2, [r9], #4
 800e6a0:	fa1c f183 	uxtah	r1, ip, r3
 800e6a4:	fa1f fe82 	uxth.w	lr, r2
 800e6a8:	0c12      	lsrs	r2, r2, #16
 800e6aa:	ebce 0101 	rsb	r1, lr, r1
 800e6ae:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800e6b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e6b6:	b289      	uxth	r1, r1
 800e6b8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e6bc:	45c8      	cmp	r8, r9
 800e6be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e6c2:	46a6      	mov	lr, r4
 800e6c4:	f845 3b04 	str.w	r3, [r5], #4
 800e6c8:	d8e6      	bhi.n	800e698 <__mdiff+0x5a>
 800e6ca:	45be      	cmp	lr, r7
 800e6cc:	d20e      	bcs.n	800e6ec <__mdiff+0xae>
 800e6ce:	f85e 1b04 	ldr.w	r1, [lr], #4
 800e6d2:	fa1c f281 	uxtah	r2, ip, r1
 800e6d6:	1413      	asrs	r3, r2, #16
 800e6d8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800e6dc:	b292      	uxth	r2, r2
 800e6de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e6e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e6e6:	f845 2b04 	str.w	r2, [r5], #4
 800e6ea:	e7ee      	b.n	800e6ca <__mdiff+0x8c>
 800e6ec:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e6f0:	b90b      	cbnz	r3, 800e6f6 <__mdiff+0xb8>
 800e6f2:	3e01      	subs	r6, #1
 800e6f4:	e7fa      	b.n	800e6ec <__mdiff+0xae>
 800e6f6:	6106      	str	r6, [r0, #16]
 800e6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e6fc <__d2b>:
 800e6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e700:	460e      	mov	r6, r1
 800e702:	2101      	movs	r1, #1
 800e704:	ec59 8b10 	vmov	r8, r9, d0
 800e708:	4615      	mov	r5, r2
 800e70a:	f7ff fd6e 	bl	800e1ea <_Balloc>
 800e70e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e712:	4607      	mov	r7, r0
 800e714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e718:	b10c      	cbz	r4, 800e71e <__d2b+0x22>
 800e71a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e71e:	9301      	str	r3, [sp, #4]
 800e720:	f1b8 0f00 	cmp.w	r8, #0
 800e724:	d019      	beq.n	800e75a <__d2b+0x5e>
 800e726:	a802      	add	r0, sp, #8
 800e728:	f840 8d08 	str.w	r8, [r0, #-8]!
 800e72c:	f7ff fe04 	bl	800e338 <__lo0bits>
 800e730:	9b00      	ldr	r3, [sp, #0]
 800e732:	b148      	cbz	r0, 800e748 <__d2b+0x4c>
 800e734:	9a01      	ldr	r2, [sp, #4]
 800e736:	f1c0 0120 	rsb	r1, r0, #32
 800e73a:	fa02 f101 	lsl.w	r1, r2, r1
 800e73e:	430b      	orrs	r3, r1
 800e740:	40c2      	lsrs	r2, r0
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	9201      	str	r2, [sp, #4]
 800e746:	e000      	b.n	800e74a <__d2b+0x4e>
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	9b01      	ldr	r3, [sp, #4]
 800e74c:	61bb      	str	r3, [r7, #24]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	bf14      	ite	ne
 800e752:	2102      	movne	r1, #2
 800e754:	2101      	moveq	r1, #1
 800e756:	6139      	str	r1, [r7, #16]
 800e758:	e007      	b.n	800e76a <__d2b+0x6e>
 800e75a:	a801      	add	r0, sp, #4
 800e75c:	f7ff fdec 	bl	800e338 <__lo0bits>
 800e760:	9b01      	ldr	r3, [sp, #4]
 800e762:	617b      	str	r3, [r7, #20]
 800e764:	2101      	movs	r1, #1
 800e766:	6139      	str	r1, [r7, #16]
 800e768:	3020      	adds	r0, #32
 800e76a:	b134      	cbz	r4, 800e77a <__d2b+0x7e>
 800e76c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e770:	4404      	add	r4, r0
 800e772:	6034      	str	r4, [r6, #0]
 800e774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e778:	e009      	b.n	800e78e <__d2b+0x92>
 800e77a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e77e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e782:	6030      	str	r0, [r6, #0]
 800e784:	6918      	ldr	r0, [r3, #16]
 800e786:	f7ff fdb7 	bl	800e2f8 <__hi0bits>
 800e78a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e78e:	6028      	str	r0, [r5, #0]
 800e790:	4638      	mov	r0, r7
 800e792:	b003      	add	sp, #12
 800e794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e798 <_realloc_r>:
 800e798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	4681      	mov	r9, r0
 800e79e:	460c      	mov	r4, r1
 800e7a0:	b929      	cbnz	r1, 800e7ae <_realloc_r+0x16>
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	b003      	add	sp, #12
 800e7a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7aa:	f7ff bae1 	b.w	800dd70 <_malloc_r>
 800e7ae:	9201      	str	r2, [sp, #4]
 800e7b0:	f7ff fd19 	bl	800e1e6 <__malloc_lock>
 800e7b4:	9a01      	ldr	r2, [sp, #4]
 800e7b6:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800e7ba:	f102 080b 	add.w	r8, r2, #11
 800e7be:	f1b8 0f16 	cmp.w	r8, #22
 800e7c2:	f1a4 0b08 	sub.w	fp, r4, #8
 800e7c6:	f02e 0503 	bic.w	r5, lr, #3
 800e7ca:	d903      	bls.n	800e7d4 <_realloc_r+0x3c>
 800e7cc:	f038 0807 	bics.w	r8, r8, #7
 800e7d0:	d502      	bpl.n	800e7d8 <_realloc_r+0x40>
 800e7d2:	e003      	b.n	800e7dc <_realloc_r+0x44>
 800e7d4:	f04f 0810 	mov.w	r8, #16
 800e7d8:	4590      	cmp	r8, r2
 800e7da:	d204      	bcs.n	800e7e6 <_realloc_r+0x4e>
 800e7dc:	230c      	movs	r3, #12
 800e7de:	f8c9 3000 	str.w	r3, [r9]
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e17d      	b.n	800eae2 <_realloc_r+0x34a>
 800e7e6:	45a8      	cmp	r8, r5
 800e7e8:	f340 8150 	ble.w	800ea8c <_realloc_r+0x2f4>
 800e7ec:	4ba6      	ldr	r3, [pc, #664]	; (800ea88 <_realloc_r+0x2f0>)
 800e7ee:	6898      	ldr	r0, [r3, #8]
 800e7f0:	eb0b 0105 	add.w	r1, fp, r5
 800e7f4:	4281      	cmp	r1, r0
 800e7f6:	684f      	ldr	r7, [r1, #4]
 800e7f8:	d005      	beq.n	800e806 <_realloc_r+0x6e>
 800e7fa:	f027 0601 	bic.w	r6, r7, #1
 800e7fe:	440e      	add	r6, r1
 800e800:	6876      	ldr	r6, [r6, #4]
 800e802:	07f6      	lsls	r6, r6, #31
 800e804:	d426      	bmi.n	800e854 <_realloc_r+0xbc>
 800e806:	f027 0a03 	bic.w	sl, r7, #3
 800e80a:	4281      	cmp	r1, r0
 800e80c:	eb05 070a 	add.w	r7, r5, sl
 800e810:	d118      	bne.n	800e844 <_realloc_r+0xac>
 800e812:	f108 0610 	add.w	r6, r8, #16
 800e816:	42b7      	cmp	r7, r6
 800e818:	db1f      	blt.n	800e85a <_realloc_r+0xc2>
 800e81a:	eb0b 0008 	add.w	r0, fp, r8
 800e81e:	ebc8 0707 	rsb	r7, r8, r7
 800e822:	f047 0701 	orr.w	r7, r7, #1
 800e826:	6098      	str	r0, [r3, #8]
 800e828:	6047      	str	r7, [r0, #4]
 800e82a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	ea43 0308 	orr.w	r3, r3, r8
 800e836:	4648      	mov	r0, r9
 800e838:	f844 3c04 	str.w	r3, [r4, #-4]
 800e83c:	f7ff fcd4 	bl	800e1e8 <__malloc_unlock>
 800e840:	4620      	mov	r0, r4
 800e842:	e14e      	b.n	800eae2 <_realloc_r+0x34a>
 800e844:	45b8      	cmp	r8, r7
 800e846:	dc08      	bgt.n	800e85a <_realloc_r+0xc2>
 800e848:	68cb      	ldr	r3, [r1, #12]
 800e84a:	688a      	ldr	r2, [r1, #8]
 800e84c:	463d      	mov	r5, r7
 800e84e:	60d3      	str	r3, [r2, #12]
 800e850:	609a      	str	r2, [r3, #8]
 800e852:	e11b      	b.n	800ea8c <_realloc_r+0x2f4>
 800e854:	f04f 0a00 	mov.w	sl, #0
 800e858:	4651      	mov	r1, sl
 800e85a:	f01e 0f01 	tst.w	lr, #1
 800e85e:	f040 80c3 	bne.w	800e9e8 <_realloc_r+0x250>
 800e862:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800e866:	ebc7 070b 	rsb	r7, r7, fp
 800e86a:	687e      	ldr	r6, [r7, #4]
 800e86c:	f026 0603 	bic.w	r6, r6, #3
 800e870:	442e      	add	r6, r5
 800e872:	2900      	cmp	r1, #0
 800e874:	f000 8083 	beq.w	800e97e <_realloc_r+0x1e6>
 800e878:	4281      	cmp	r1, r0
 800e87a:	44b2      	add	sl, r6
 800e87c:	d147      	bne.n	800e90e <_realloc_r+0x176>
 800e87e:	f108 0110 	add.w	r1, r8, #16
 800e882:	458a      	cmp	sl, r1
 800e884:	db7b      	blt.n	800e97e <_realloc_r+0x1e6>
 800e886:	463e      	mov	r6, r7
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800e88e:	60ca      	str	r2, [r1, #12]
 800e890:	6091      	str	r1, [r2, #8]
 800e892:	1f2a      	subs	r2, r5, #4
 800e894:	2a24      	cmp	r2, #36	; 0x24
 800e896:	d825      	bhi.n	800e8e4 <_realloc_r+0x14c>
 800e898:	2a13      	cmp	r2, #19
 800e89a:	d91b      	bls.n	800e8d4 <_realloc_r+0x13c>
 800e89c:	6821      	ldr	r1, [r4, #0]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	6861      	ldr	r1, [r4, #4]
 800e8a2:	60f9      	str	r1, [r7, #12]
 800e8a4:	2a1b      	cmp	r2, #27
 800e8a6:	d803      	bhi.n	800e8b0 <_realloc_r+0x118>
 800e8a8:	f107 0210 	add.w	r2, r7, #16
 800e8ac:	3408      	adds	r4, #8
 800e8ae:	e012      	b.n	800e8d6 <_realloc_r+0x13e>
 800e8b0:	68a1      	ldr	r1, [r4, #8]
 800e8b2:	6139      	str	r1, [r7, #16]
 800e8b4:	68e1      	ldr	r1, [r4, #12]
 800e8b6:	6179      	str	r1, [r7, #20]
 800e8b8:	2a24      	cmp	r2, #36	; 0x24
 800e8ba:	bf01      	itttt	eq
 800e8bc:	6922      	ldreq	r2, [r4, #16]
 800e8be:	61ba      	streq	r2, [r7, #24]
 800e8c0:	6961      	ldreq	r1, [r4, #20]
 800e8c2:	61f9      	streq	r1, [r7, #28]
 800e8c4:	bf19      	ittee	ne
 800e8c6:	f107 0218 	addne.w	r2, r7, #24
 800e8ca:	3410      	addne	r4, #16
 800e8cc:	f107 0220 	addeq.w	r2, r7, #32
 800e8d0:	3418      	addeq	r4, #24
 800e8d2:	e000      	b.n	800e8d6 <_realloc_r+0x13e>
 800e8d4:	4632      	mov	r2, r6
 800e8d6:	6821      	ldr	r1, [r4, #0]
 800e8d8:	6011      	str	r1, [r2, #0]
 800e8da:	6861      	ldr	r1, [r4, #4]
 800e8dc:	6051      	str	r1, [r2, #4]
 800e8de:	68a1      	ldr	r1, [r4, #8]
 800e8e0:	6091      	str	r1, [r2, #8]
 800e8e2:	e005      	b.n	800e8f0 <_realloc_r+0x158>
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	f7ff fc61 	bl	800e1b0 <memmove>
 800e8ee:	9b01      	ldr	r3, [sp, #4]
 800e8f0:	eb07 0208 	add.w	r2, r7, r8
 800e8f4:	ebc8 0a0a 	rsb	sl, r8, sl
 800e8f8:	609a      	str	r2, [r3, #8]
 800e8fa:	f04a 0301 	orr.w	r3, sl, #1
 800e8fe:	6053      	str	r3, [r2, #4]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f003 0301 	and.w	r3, r3, #1
 800e906:	ea43 0308 	orr.w	r3, r3, r8
 800e90a:	607b      	str	r3, [r7, #4]
 800e90c:	e0b6      	b.n	800ea7c <_realloc_r+0x2e4>
 800e90e:	45d0      	cmp	r8, sl
 800e910:	dc35      	bgt.n	800e97e <_realloc_r+0x1e6>
 800e912:	68cb      	ldr	r3, [r1, #12]
 800e914:	688a      	ldr	r2, [r1, #8]
 800e916:	4638      	mov	r0, r7
 800e918:	60d3      	str	r3, [r2, #12]
 800e91a:	609a      	str	r2, [r3, #8]
 800e91c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	60d3      	str	r3, [r2, #12]
 800e924:	609a      	str	r2, [r3, #8]
 800e926:	1f2a      	subs	r2, r5, #4
 800e928:	2a24      	cmp	r2, #36	; 0x24
 800e92a:	d823      	bhi.n	800e974 <_realloc_r+0x1dc>
 800e92c:	2a13      	cmp	r2, #19
 800e92e:	d91a      	bls.n	800e966 <_realloc_r+0x1ce>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	60bb      	str	r3, [r7, #8]
 800e934:	6863      	ldr	r3, [r4, #4]
 800e936:	60fb      	str	r3, [r7, #12]
 800e938:	2a1b      	cmp	r2, #27
 800e93a:	d803      	bhi.n	800e944 <_realloc_r+0x1ac>
 800e93c:	f107 0010 	add.w	r0, r7, #16
 800e940:	3408      	adds	r4, #8
 800e942:	e010      	b.n	800e966 <_realloc_r+0x1ce>
 800e944:	68a3      	ldr	r3, [r4, #8]
 800e946:	613b      	str	r3, [r7, #16]
 800e948:	68e3      	ldr	r3, [r4, #12]
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	2a24      	cmp	r2, #36	; 0x24
 800e94e:	bf01      	itttt	eq
 800e950:	6923      	ldreq	r3, [r4, #16]
 800e952:	61bb      	streq	r3, [r7, #24]
 800e954:	6963      	ldreq	r3, [r4, #20]
 800e956:	61fb      	streq	r3, [r7, #28]
 800e958:	bf19      	ittee	ne
 800e95a:	f107 0018 	addne.w	r0, r7, #24
 800e95e:	3410      	addne	r4, #16
 800e960:	f107 0020 	addeq.w	r0, r7, #32
 800e964:	3418      	addeq	r4, #24
 800e966:	6823      	ldr	r3, [r4, #0]
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	6863      	ldr	r3, [r4, #4]
 800e96c:	6043      	str	r3, [r0, #4]
 800e96e:	68a3      	ldr	r3, [r4, #8]
 800e970:	6083      	str	r3, [r0, #8]
 800e972:	e002      	b.n	800e97a <_realloc_r+0x1e2>
 800e974:	4621      	mov	r1, r4
 800e976:	f7ff fc1b 	bl	800e1b0 <memmove>
 800e97a:	4655      	mov	r5, sl
 800e97c:	e02e      	b.n	800e9dc <_realloc_r+0x244>
 800e97e:	45b0      	cmp	r8, r6
 800e980:	dc32      	bgt.n	800e9e8 <_realloc_r+0x250>
 800e982:	4638      	mov	r0, r7
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e98a:	60d3      	str	r3, [r2, #12]
 800e98c:	609a      	str	r2, [r3, #8]
 800e98e:	1f2a      	subs	r2, r5, #4
 800e990:	2a24      	cmp	r2, #36	; 0x24
 800e992:	d825      	bhi.n	800e9e0 <_realloc_r+0x248>
 800e994:	2a13      	cmp	r2, #19
 800e996:	d91a      	bls.n	800e9ce <_realloc_r+0x236>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	60bb      	str	r3, [r7, #8]
 800e99c:	6863      	ldr	r3, [r4, #4]
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	2a1b      	cmp	r2, #27
 800e9a2:	d803      	bhi.n	800e9ac <_realloc_r+0x214>
 800e9a4:	f107 0010 	add.w	r0, r7, #16
 800e9a8:	3408      	adds	r4, #8
 800e9aa:	e010      	b.n	800e9ce <_realloc_r+0x236>
 800e9ac:	68a3      	ldr	r3, [r4, #8]
 800e9ae:	613b      	str	r3, [r7, #16]
 800e9b0:	68e3      	ldr	r3, [r4, #12]
 800e9b2:	617b      	str	r3, [r7, #20]
 800e9b4:	2a24      	cmp	r2, #36	; 0x24
 800e9b6:	bf01      	itttt	eq
 800e9b8:	6923      	ldreq	r3, [r4, #16]
 800e9ba:	61bb      	streq	r3, [r7, #24]
 800e9bc:	6963      	ldreq	r3, [r4, #20]
 800e9be:	61fb      	streq	r3, [r7, #28]
 800e9c0:	bf19      	ittee	ne
 800e9c2:	f107 0018 	addne.w	r0, r7, #24
 800e9c6:	3410      	addne	r4, #16
 800e9c8:	f107 0020 	addeq.w	r0, r7, #32
 800e9cc:	3418      	addeq	r4, #24
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	6003      	str	r3, [r0, #0]
 800e9d2:	6863      	ldr	r3, [r4, #4]
 800e9d4:	6043      	str	r3, [r0, #4]
 800e9d6:	68a3      	ldr	r3, [r4, #8]
 800e9d8:	6083      	str	r3, [r0, #8]
 800e9da:	4635      	mov	r5, r6
 800e9dc:	46bb      	mov	fp, r7
 800e9de:	e055      	b.n	800ea8c <_realloc_r+0x2f4>
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	f7ff fbe5 	bl	800e1b0 <memmove>
 800e9e6:	e7f8      	b.n	800e9da <_realloc_r+0x242>
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	4648      	mov	r0, r9
 800e9ec:	f7ff f9c0 	bl	800dd70 <_malloc_r>
 800e9f0:	4606      	mov	r6, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d042      	beq.n	800ea7c <_realloc_r+0x2e4>
 800e9f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e9fa:	f023 0301 	bic.w	r3, r3, #1
 800e9fe:	f1a0 0208 	sub.w	r2, r0, #8
 800ea02:	445b      	add	r3, fp
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d105      	bne.n	800ea14 <_realloc_r+0x27c>
 800ea08:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ea0c:	f023 0303 	bic.w	r3, r3, #3
 800ea10:	441d      	add	r5, r3
 800ea12:	e03b      	b.n	800ea8c <_realloc_r+0x2f4>
 800ea14:	1f2a      	subs	r2, r5, #4
 800ea16:	2a24      	cmp	r2, #36	; 0x24
 800ea18:	d829      	bhi.n	800ea6e <_realloc_r+0x2d6>
 800ea1a:	2a13      	cmp	r2, #19
 800ea1c:	d91e      	bls.n	800ea5c <_realloc_r+0x2c4>
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	6003      	str	r3, [r0, #0]
 800ea22:	6863      	ldr	r3, [r4, #4]
 800ea24:	6043      	str	r3, [r0, #4]
 800ea26:	2a1b      	cmp	r2, #27
 800ea28:	d804      	bhi.n	800ea34 <_realloc_r+0x29c>
 800ea2a:	f100 0308 	add.w	r3, r0, #8
 800ea2e:	f104 0208 	add.w	r2, r4, #8
 800ea32:	e015      	b.n	800ea60 <_realloc_r+0x2c8>
 800ea34:	68a3      	ldr	r3, [r4, #8]
 800ea36:	6083      	str	r3, [r0, #8]
 800ea38:	68e3      	ldr	r3, [r4, #12]
 800ea3a:	60c3      	str	r3, [r0, #12]
 800ea3c:	2a24      	cmp	r2, #36	; 0x24
 800ea3e:	bf01      	itttt	eq
 800ea40:	6923      	ldreq	r3, [r4, #16]
 800ea42:	6103      	streq	r3, [r0, #16]
 800ea44:	6961      	ldreq	r1, [r4, #20]
 800ea46:	6141      	streq	r1, [r0, #20]
 800ea48:	bf19      	ittee	ne
 800ea4a:	f100 0310 	addne.w	r3, r0, #16
 800ea4e:	f104 0210 	addne.w	r2, r4, #16
 800ea52:	f100 0318 	addeq.w	r3, r0, #24
 800ea56:	f104 0218 	addeq.w	r2, r4, #24
 800ea5a:	e001      	b.n	800ea60 <_realloc_r+0x2c8>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	4622      	mov	r2, r4
 800ea60:	6811      	ldr	r1, [r2, #0]
 800ea62:	6019      	str	r1, [r3, #0]
 800ea64:	6851      	ldr	r1, [r2, #4]
 800ea66:	6059      	str	r1, [r3, #4]
 800ea68:	6892      	ldr	r2, [r2, #8]
 800ea6a:	609a      	str	r2, [r3, #8]
 800ea6c:	e002      	b.n	800ea74 <_realloc_r+0x2dc>
 800ea6e:	4621      	mov	r1, r4
 800ea70:	f7ff fb9e 	bl	800e1b0 <memmove>
 800ea74:	4621      	mov	r1, r4
 800ea76:	4648      	mov	r0, r9
 800ea78:	f7fe fee0 	bl	800d83c <_free_r>
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	f7ff fbb3 	bl	800e1e8 <__malloc_unlock>
 800ea82:	4630      	mov	r0, r6
 800ea84:	e02d      	b.n	800eae2 <_realloc_r+0x34a>
 800ea86:	bf00      	nop
 800ea88:	20010160 	.word	0x20010160
 800ea8c:	ebc8 0205 	rsb	r2, r8, r5
 800ea90:	2a0f      	cmp	r2, #15
 800ea92:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ea96:	d914      	bls.n	800eac2 <_realloc_r+0x32a>
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	eb0b 0108 	add.w	r1, fp, r8
 800eaa0:	ea43 0308 	orr.w	r3, r3, r8
 800eaa4:	f8cb 3004 	str.w	r3, [fp, #4]
 800eaa8:	f042 0301 	orr.w	r3, r2, #1
 800eaac:	440a      	add	r2, r1
 800eaae:	604b      	str	r3, [r1, #4]
 800eab0:	6853      	ldr	r3, [r2, #4]
 800eab2:	f043 0301 	orr.w	r3, r3, #1
 800eab6:	6053      	str	r3, [r2, #4]
 800eab8:	3108      	adds	r1, #8
 800eaba:	4648      	mov	r0, r9
 800eabc:	f7fe febe 	bl	800d83c <_free_r>
 800eac0:	e00a      	b.n	800ead8 <_realloc_r+0x340>
 800eac2:	f003 0301 	and.w	r3, r3, #1
 800eac6:	432b      	orrs	r3, r5
 800eac8:	eb0b 0205 	add.w	r2, fp, r5
 800eacc:	f8cb 3004 	str.w	r3, [fp, #4]
 800ead0:	6853      	ldr	r3, [r2, #4]
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	6053      	str	r3, [r2, #4]
 800ead8:	4648      	mov	r0, r9
 800eada:	f7ff fb85 	bl	800e1e8 <__malloc_unlock>
 800eade:	f10b 0008 	add.w	r0, fp, #8
 800eae2:	b003      	add	sp, #12
 800eae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eae8 <_sbrk_r>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4c06      	ldr	r4, [pc, #24]	; (800eb04 <_sbrk_r+0x1c>)
 800eaec:	2300      	movs	r3, #0
 800eaee:	4605      	mov	r5, r0
 800eaf0:	4608      	mov	r0, r1
 800eaf2:	6023      	str	r3, [r4, #0]
 800eaf4:	f7f2 ffd0 	bl	8001a98 <_sbrk>
 800eaf8:	1c43      	adds	r3, r0, #1
 800eafa:	d102      	bne.n	800eb02 <_sbrk_r+0x1a>
 800eafc:	6823      	ldr	r3, [r4, #0]
 800eafe:	b103      	cbz	r3, 800eb02 <_sbrk_r+0x1a>
 800eb00:	602b      	str	r3, [r5, #0]
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
 800eb04:	200149a8 	.word	0x200149a8

0800eb08 <__sread>:
 800eb08:	b510      	push	{r4, lr}
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb10:	f000 f992 	bl	800ee38 <_read_r>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	bfab      	itete	ge
 800eb18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb1a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb1c:	181b      	addge	r3, r3, r0
 800eb1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb22:	bfac      	ite	ge
 800eb24:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb26:	81a3      	strhlt	r3, [r4, #12]
 800eb28:	bd10      	pop	{r4, pc}

0800eb2a <__swrite>:
 800eb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2e:	461f      	mov	r7, r3
 800eb30:	898b      	ldrh	r3, [r1, #12]
 800eb32:	05db      	lsls	r3, r3, #23
 800eb34:	4605      	mov	r5, r0
 800eb36:	460c      	mov	r4, r1
 800eb38:	4616      	mov	r6, r2
 800eb3a:	d505      	bpl.n	800eb48 <__swrite+0x1e>
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb44:	f000 f966 	bl	800ee14 <_lseek_r>
 800eb48:	89a3      	ldrh	r3, [r4, #12]
 800eb4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb52:	81a3      	strh	r3, [r4, #12]
 800eb54:	4632      	mov	r2, r6
 800eb56:	463b      	mov	r3, r7
 800eb58:	4628      	mov	r0, r5
 800eb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5e:	f000 b895 	b.w	800ec8c <_write_r>

0800eb62 <__sseek>:
 800eb62:	b510      	push	{r4, lr}
 800eb64:	460c      	mov	r4, r1
 800eb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6a:	f000 f953 	bl	800ee14 <_lseek_r>
 800eb6e:	1c43      	adds	r3, r0, #1
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	bf15      	itete	ne
 800eb74:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb7e:	81a3      	strheq	r3, [r4, #12]
 800eb80:	bf18      	it	ne
 800eb82:	81a3      	strhne	r3, [r4, #12]
 800eb84:	bd10      	pop	{r4, pc}

0800eb86 <__sclose>:
 800eb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8a:	f000 b8bf 	b.w	800ed0c <_close_r>

0800eb8e <__ssprint_r>:
 800eb8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb92:	4693      	mov	fp, r2
 800eb94:	6892      	ldr	r2, [r2, #8]
 800eb96:	4681      	mov	r9, r0
 800eb98:	460c      	mov	r4, r1
 800eb9a:	b34a      	cbz	r2, 800ebf0 <__ssprint_r+0x62>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f8db a000 	ldr.w	sl, [fp]
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	461f      	mov	r7, r3
 800eba6:	e006      	b.n	800ebb6 <__ssprint_r+0x28>
 800eba8:	f8da 3000 	ldr.w	r3, [sl]
 800ebac:	f8da 7004 	ldr.w	r7, [sl, #4]
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	f10a 0a08 	add.w	sl, sl, #8
 800ebb6:	2f00      	cmp	r7, #0
 800ebb8:	d0f6      	beq.n	800eba8 <__ssprint_r+0x1a>
 800ebba:	68a6      	ldr	r6, [r4, #8]
 800ebbc:	42b7      	cmp	r7, r6
 800ebbe:	d360      	bcc.n	800ec82 <__ssprint_r+0xf4>
 800ebc0:	89a0      	ldrh	r0, [r4, #12]
 800ebc2:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800ebc6:	d117      	bne.n	800ebf8 <__ssprint_r+0x6a>
 800ebc8:	42b7      	cmp	r7, r6
 800ebca:	d35a      	bcc.n	800ec82 <__ssprint_r+0xf4>
 800ebcc:	4632      	mov	r2, r6
 800ebce:	9901      	ldr	r1, [sp, #4]
 800ebd0:	6820      	ldr	r0, [r4, #0]
 800ebd2:	f7ff faed 	bl	800e1b0 <memmove>
 800ebd6:	68a2      	ldr	r2, [r4, #8]
 800ebd8:	1b92      	subs	r2, r2, r6
 800ebda:	60a2      	str	r2, [r4, #8]
 800ebdc:	6822      	ldr	r2, [r4, #0]
 800ebde:	4416      	add	r6, r2
 800ebe0:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ebe4:	6026      	str	r6, [r4, #0]
 800ebe6:	1bd7      	subs	r7, r2, r7
 800ebe8:	f8cb 7008 	str.w	r7, [fp, #8]
 800ebec:	2f00      	cmp	r7, #0
 800ebee:	d1db      	bne.n	800eba8 <__ssprint_r+0x1a>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f8cb 0004 	str.w	r0, [fp, #4]
 800ebf6:	e046      	b.n	800ec86 <__ssprint_r+0xf8>
 800ebf8:	6825      	ldr	r5, [r4, #0]
 800ebfa:	6921      	ldr	r1, [r4, #16]
 800ebfc:	ebc1 0805 	rsb	r8, r1, r5
 800ec00:	f108 0201 	add.w	r2, r8, #1
 800ec04:	6965      	ldr	r5, [r4, #20]
 800ec06:	443a      	add	r2, r7
 800ec08:	2302      	movs	r3, #2
 800ec0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec0e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ec12:	4295      	cmp	r5, r2
 800ec14:	bf38      	it	cc
 800ec16:	4615      	movcc	r5, r2
 800ec18:	0543      	lsls	r3, r0, #21
 800ec1a:	d510      	bpl.n	800ec3e <__ssprint_r+0xb0>
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	4648      	mov	r0, r9
 800ec20:	f7ff f8a6 	bl	800dd70 <_malloc_r>
 800ec24:	4606      	mov	r6, r0
 800ec26:	b1a0      	cbz	r0, 800ec52 <__ssprint_r+0xc4>
 800ec28:	4642      	mov	r2, r8
 800ec2a:	6921      	ldr	r1, [r4, #16]
 800ec2c:	f7fc fc94 	bl	800b558 <memcpy>
 800ec30:	89a2      	ldrh	r2, [r4, #12]
 800ec32:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ec36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec3a:	81a2      	strh	r2, [r4, #12]
 800ec3c:	e018      	b.n	800ec70 <__ssprint_r+0xe2>
 800ec3e:	462a      	mov	r2, r5
 800ec40:	4648      	mov	r0, r9
 800ec42:	f7ff fda9 	bl	800e798 <_realloc_r>
 800ec46:	4606      	mov	r6, r0
 800ec48:	b990      	cbnz	r0, 800ec70 <__ssprint_r+0xe2>
 800ec4a:	6921      	ldr	r1, [r4, #16]
 800ec4c:	4648      	mov	r0, r9
 800ec4e:	f7fe fdf5 	bl	800d83c <_free_r>
 800ec52:	220c      	movs	r2, #12
 800ec54:	f8c9 2000 	str.w	r2, [r9]
 800ec58:	89a2      	ldrh	r2, [r4, #12]
 800ec5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec5e:	81a2      	strh	r2, [r4, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f8cb 2008 	str.w	r2, [fp, #8]
 800ec66:	f8cb 2004 	str.w	r2, [fp, #4]
 800ec6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6e:	e00a      	b.n	800ec86 <__ssprint_r+0xf8>
 800ec70:	6126      	str	r6, [r4, #16]
 800ec72:	6165      	str	r5, [r4, #20]
 800ec74:	4446      	add	r6, r8
 800ec76:	ebc8 0505 	rsb	r5, r8, r5
 800ec7a:	6026      	str	r6, [r4, #0]
 800ec7c:	60a5      	str	r5, [r4, #8]
 800ec7e:	463e      	mov	r6, r7
 800ec80:	e7a2      	b.n	800ebc8 <__ssprint_r+0x3a>
 800ec82:	463e      	mov	r6, r7
 800ec84:	e7a2      	b.n	800ebcc <__ssprint_r+0x3e>
 800ec86:	b003      	add	sp, #12
 800ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec8c <_write_r>:
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4c07      	ldr	r4, [pc, #28]	; (800ecac <_write_r+0x20>)
 800ec90:	4605      	mov	r5, r0
 800ec92:	4608      	mov	r0, r1
 800ec94:	4611      	mov	r1, r2
 800ec96:	2200      	movs	r2, #0
 800ec98:	6022      	str	r2, [r4, #0]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f7f2 fee0 	bl	8001a60 <_write>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_write_r+0x1e>
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_write_r+0x1e>
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	200149a8 	.word	0x200149a8

0800ecb0 <_calloc_r>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	4351      	muls	r1, r2
 800ecb4:	f7ff f85c 	bl	800dd70 <_malloc_r>
 800ecb8:	4604      	mov	r4, r0
 800ecba:	b320      	cbz	r0, 800ed06 <_calloc_r+0x56>
 800ecbc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ecc0:	f022 0203 	bic.w	r2, r2, #3
 800ecc4:	3a04      	subs	r2, #4
 800ecc6:	2a24      	cmp	r2, #36	; 0x24
 800ecc8:	d81a      	bhi.n	800ed00 <_calloc_r+0x50>
 800ecca:	2a13      	cmp	r2, #19
 800eccc:	d912      	bls.n	800ecf4 <_calloc_r+0x44>
 800ecce:	2100      	movs	r1, #0
 800ecd0:	2a1b      	cmp	r2, #27
 800ecd2:	6001      	str	r1, [r0, #0]
 800ecd4:	6041      	str	r1, [r0, #4]
 800ecd6:	d802      	bhi.n	800ecde <_calloc_r+0x2e>
 800ecd8:	f100 0308 	add.w	r3, r0, #8
 800ecdc:	e00b      	b.n	800ecf6 <_calloc_r+0x46>
 800ecde:	2a24      	cmp	r2, #36	; 0x24
 800ece0:	6081      	str	r1, [r0, #8]
 800ece2:	60c1      	str	r1, [r0, #12]
 800ece4:	bf11      	iteee	ne
 800ece6:	f100 0310 	addne.w	r3, r0, #16
 800ecea:	6101      	streq	r1, [r0, #16]
 800ecec:	f100 0318 	addeq.w	r3, r0, #24
 800ecf0:	6141      	streq	r1, [r0, #20]
 800ecf2:	e000      	b.n	800ecf6 <_calloc_r+0x46>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	601a      	str	r2, [r3, #0]
 800ecfa:	605a      	str	r2, [r3, #4]
 800ecfc:	609a      	str	r2, [r3, #8]
 800ecfe:	e002      	b.n	800ed06 <_calloc_r+0x56>
 800ed00:	2100      	movs	r1, #0
 800ed02:	f7fc fc34 	bl	800b56e <memset>
 800ed06:	4620      	mov	r0, r4
 800ed08:	bd10      	pop	{r4, pc}
	...

0800ed0c <_close_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	4c06      	ldr	r4, [pc, #24]	; (800ed28 <_close_r+0x1c>)
 800ed10:	2300      	movs	r3, #0
 800ed12:	4605      	mov	r5, r0
 800ed14:	4608      	mov	r0, r1
 800ed16:	6023      	str	r3, [r4, #0]
 800ed18:	f7f2 feea 	bl	8001af0 <_close>
 800ed1c:	1c43      	adds	r3, r0, #1
 800ed1e:	d102      	bne.n	800ed26 <_close_r+0x1a>
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	b103      	cbz	r3, 800ed26 <_close_r+0x1a>
 800ed24:	602b      	str	r3, [r5, #0]
 800ed26:	bd38      	pop	{r3, r4, r5, pc}
 800ed28:	200149a8 	.word	0x200149a8

0800ed2c <_fclose_r>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	4605      	mov	r5, r0
 800ed30:	460c      	mov	r4, r1
 800ed32:	b909      	cbnz	r1, 800ed38 <_fclose_r+0xc>
 800ed34:	2000      	movs	r0, #0
 800ed36:	bd70      	pop	{r4, r5, r6, pc}
 800ed38:	b118      	cbz	r0, 800ed42 <_fclose_r+0x16>
 800ed3a:	6983      	ldr	r3, [r0, #24]
 800ed3c:	b90b      	cbnz	r3, 800ed42 <_fclose_r+0x16>
 800ed3e:	f7fe fcb5 	bl	800d6ac <__sinit>
 800ed42:	4b20      	ldr	r3, [pc, #128]	; (800edc4 <_fclose_r+0x98>)
 800ed44:	429c      	cmp	r4, r3
 800ed46:	d101      	bne.n	800ed4c <_fclose_r+0x20>
 800ed48:	686c      	ldr	r4, [r5, #4]
 800ed4a:	e008      	b.n	800ed5e <_fclose_r+0x32>
 800ed4c:	4b1e      	ldr	r3, [pc, #120]	; (800edc8 <_fclose_r+0x9c>)
 800ed4e:	429c      	cmp	r4, r3
 800ed50:	d101      	bne.n	800ed56 <_fclose_r+0x2a>
 800ed52:	68ac      	ldr	r4, [r5, #8]
 800ed54:	e003      	b.n	800ed5e <_fclose_r+0x32>
 800ed56:	4b1d      	ldr	r3, [pc, #116]	; (800edcc <_fclose_r+0xa0>)
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	bf08      	it	eq
 800ed5c:	68ec      	ldreq	r4, [r5, #12]
 800ed5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0e6      	beq.n	800ed34 <_fclose_r+0x8>
 800ed66:	4621      	mov	r1, r4
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f7fe fba5 	bl	800d4b8 <__sflush_r>
 800ed6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ed70:	4606      	mov	r6, r0
 800ed72:	b133      	cbz	r3, 800ed82 <_fclose_r+0x56>
 800ed74:	6a21      	ldr	r1, [r4, #32]
 800ed76:	4628      	mov	r0, r5
 800ed78:	4798      	blx	r3
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	bfb8      	it	lt
 800ed7e:	f04f 36ff 	movlt.w	r6, #4294967295
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	061b      	lsls	r3, r3, #24
 800ed86:	d503      	bpl.n	800ed90 <_fclose_r+0x64>
 800ed88:	6921      	ldr	r1, [r4, #16]
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f7fe fd56 	bl	800d83c <_free_r>
 800ed90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed92:	b141      	cbz	r1, 800eda6 <_fclose_r+0x7a>
 800ed94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed98:	4299      	cmp	r1, r3
 800ed9a:	d002      	beq.n	800eda2 <_fclose_r+0x76>
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	f7fe fd4d 	bl	800d83c <_free_r>
 800eda2:	2300      	movs	r3, #0
 800eda4:	6363      	str	r3, [r4, #52]	; 0x34
 800eda6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eda8:	b121      	cbz	r1, 800edb4 <_fclose_r+0x88>
 800edaa:	4628      	mov	r0, r5
 800edac:	f7fe fd46 	bl	800d83c <_free_r>
 800edb0:	2300      	movs	r3, #0
 800edb2:	64a3      	str	r3, [r4, #72]	; 0x48
 800edb4:	f7fe fcea 	bl	800d78c <__sfp_lock_acquire>
 800edb8:	2300      	movs	r3, #0
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	f7fe fce7 	bl	800d78e <__sfp_lock_release>
 800edc0:	4630      	mov	r0, r6
 800edc2:	bd70      	pop	{r4, r5, r6, pc}
 800edc4:	08011b4c 	.word	0x08011b4c
 800edc8:	08011b6c 	.word	0x08011b6c
 800edcc:	08011b8c 	.word	0x08011b8c

0800edd0 <_fstat_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4c07      	ldr	r4, [pc, #28]	; (800edf0 <_fstat_r+0x20>)
 800edd4:	2300      	movs	r3, #0
 800edd6:	4605      	mov	r5, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	4611      	mov	r1, r2
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	f7f2 fe93 	bl	8001b08 <_fstat>
 800ede2:	1c43      	adds	r3, r0, #1
 800ede4:	d102      	bne.n	800edec <_fstat_r+0x1c>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	b103      	cbz	r3, 800edec <_fstat_r+0x1c>
 800edea:	602b      	str	r3, [r5, #0]
 800edec:	bd38      	pop	{r3, r4, r5, pc}
 800edee:	bf00      	nop
 800edf0:	200149a8 	.word	0x200149a8

0800edf4 <_isatty_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4c06      	ldr	r4, [pc, #24]	; (800ee10 <_isatty_r+0x1c>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4605      	mov	r5, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	f7f2 fe92 	bl	8001b28 <_isatty>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_isatty_r+0x1a>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_isatty_r+0x1a>
 800ee0c:	602b      	str	r3, [r5, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	200149a8 	.word	0x200149a8

0800ee14 <_lseek_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4c07      	ldr	r4, [pc, #28]	; (800ee34 <_lseek_r+0x20>)
 800ee18:	4605      	mov	r5, r0
 800ee1a:	4608      	mov	r0, r1
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	6022      	str	r2, [r4, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f7f2 fe8c 	bl	8001b40 <_lseek>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_lseek_r+0x1e>
 800ee2c:	6823      	ldr	r3, [r4, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_lseek_r+0x1e>
 800ee30:	602b      	str	r3, [r5, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	200149a8 	.word	0x200149a8

0800ee38 <_read_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4c07      	ldr	r4, [pc, #28]	; (800ee58 <_read_r+0x20>)
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	4608      	mov	r0, r1
 800ee40:	4611      	mov	r1, r2
 800ee42:	2200      	movs	r2, #0
 800ee44:	6022      	str	r2, [r4, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f7f2 fdee 	bl	8001a28 <_read>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_read_r+0x1e>
 800ee50:	6823      	ldr	r3, [r4, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_read_r+0x1e>
 800ee54:	602b      	str	r3, [r5, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	200149a8 	.word	0x200149a8
 800ee5c:	00000000 	.word	0x00000000

0800ee60 <cos>:
 800ee60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee62:	ec51 0b10 	vmov	r0, r1, d0
 800ee66:	4a1e      	ldr	r2, [pc, #120]	; (800eee0 <cos+0x80>)
 800ee68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	dc02      	bgt.n	800ee76 <cos+0x16>
 800ee70:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800eed8 <cos+0x78>
 800ee74:	e016      	b.n	800eea4 <cos+0x44>
 800ee76:	4a1b      	ldr	r2, [pc, #108]	; (800eee4 <cos+0x84>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	dd05      	ble.n	800ee88 <cos+0x28>
 800ee7c:	ee10 2a10 	vmov	r2, s0
 800ee80:	460b      	mov	r3, r1
 800ee82:	f7f1 fa21 	bl	80002c8 <__aeabi_dsub>
 800ee86:	e021      	b.n	800eecc <cos+0x6c>
 800ee88:	4668      	mov	r0, sp
 800ee8a:	f000 f9b5 	bl	800f1f8 <__ieee754_rem_pio2>
 800ee8e:	f000 0003 	and.w	r0, r0, #3
 800ee92:	2801      	cmp	r0, #1
 800ee94:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee98:	ed9d 0b00 	vldr	d0, [sp]
 800ee9c:	d005      	beq.n	800eeaa <cos+0x4a>
 800ee9e:	2802      	cmp	r0, #2
 800eea0:	d006      	beq.n	800eeb0 <cos+0x50>
 800eea2:	b970      	cbnz	r0, 800eec2 <cos+0x62>
 800eea4:	f000 fc5c 	bl	800f760 <__kernel_cos>
 800eea8:	e00e      	b.n	800eec8 <cos+0x68>
 800eeaa:	f001 f891 	bl	800ffd0 <__kernel_sin>
 800eeae:	e001      	b.n	800eeb4 <cos+0x54>
 800eeb0:	f000 fc56 	bl	800f760 <__kernel_cos>
 800eeb4:	ec53 2b10 	vmov	r2, r3, d0
 800eeb8:	ee10 0a10 	vmov	r0, s0
 800eebc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eec0:	e004      	b.n	800eecc <cos+0x6c>
 800eec2:	2001      	movs	r0, #1
 800eec4:	f001 f884 	bl	800ffd0 <__kernel_sin>
 800eec8:	ec51 0b10 	vmov	r0, r1, d0
 800eecc:	ec41 0b10 	vmov	d0, r0, r1
 800eed0:	b005      	add	sp, #20
 800eed2:	f85d fb04 	ldr.w	pc, [sp], #4
 800eed6:	bf00      	nop
	...
 800eee0:	3fe921fb 	.word	0x3fe921fb
 800eee4:	7fefffff 	.word	0x7fefffff

0800eee8 <sin>:
 800eee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eeea:	ec51 0b10 	vmov	r0, r1, d0
 800eeee:	4a20      	ldr	r2, [pc, #128]	; (800ef70 <sin+0x88>)
 800eef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eef4:	4293      	cmp	r3, r2
 800eef6:	dc03      	bgt.n	800ef00 <sin+0x18>
 800eef8:	2000      	movs	r0, #0
 800eefa:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ef68 <sin+0x80>
 800eefe:	e017      	b.n	800ef30 <sin+0x48>
 800ef00:	4a1c      	ldr	r2, [pc, #112]	; (800ef74 <sin+0x8c>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	dd05      	ble.n	800ef12 <sin+0x2a>
 800ef06:	ee10 2a10 	vmov	r2, s0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	f7f1 f9dc 	bl	80002c8 <__aeabi_dsub>
 800ef10:	e022      	b.n	800ef58 <sin+0x70>
 800ef12:	4668      	mov	r0, sp
 800ef14:	f000 f970 	bl	800f1f8 <__ieee754_rem_pio2>
 800ef18:	f000 0003 	and.w	r0, r0, #3
 800ef1c:	2801      	cmp	r0, #1
 800ef1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef22:	ed9d 0b00 	vldr	d0, [sp]
 800ef26:	d008      	beq.n	800ef3a <sin+0x52>
 800ef28:	2802      	cmp	r0, #2
 800ef2a:	d009      	beq.n	800ef40 <sin+0x58>
 800ef2c:	b960      	cbnz	r0, 800ef48 <sin+0x60>
 800ef2e:	2001      	movs	r0, #1
 800ef30:	f001 f84e 	bl	800ffd0 <__kernel_sin>
 800ef34:	ec51 0b10 	vmov	r0, r1, d0
 800ef38:	e00e      	b.n	800ef58 <sin+0x70>
 800ef3a:	f000 fc11 	bl	800f760 <__kernel_cos>
 800ef3e:	e7f9      	b.n	800ef34 <sin+0x4c>
 800ef40:	2001      	movs	r0, #1
 800ef42:	f001 f845 	bl	800ffd0 <__kernel_sin>
 800ef46:	e001      	b.n	800ef4c <sin+0x64>
 800ef48:	f000 fc0a 	bl	800f760 <__kernel_cos>
 800ef4c:	ec53 2b10 	vmov	r2, r3, d0
 800ef50:	ee10 0a10 	vmov	r0, s0
 800ef54:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ef58:	ec41 0b10 	vmov	d0, r0, r1
 800ef5c:	b005      	add	sp, #20
 800ef5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef62:	bf00      	nop
 800ef64:	f3af 8000 	nop.w
	...
 800ef70:	3fe921fb 	.word	0x3fe921fb
 800ef74:	7fefffff 	.word	0x7fefffff

0800ef78 <atan2>:
 800ef78:	f000 b85e 	b.w	800f038 <__ieee754_atan2>

0800ef7c <sqrt>:
 800ef7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef80:	ed2d 8b02 	vpush	{d8}
 800ef84:	b08b      	sub	sp, #44	; 0x2c
 800ef86:	ec55 4b10 	vmov	r4, r5, d0
 800ef8a:	f000 fb33 	bl	800f5f4 <__ieee754_sqrt>
 800ef8e:	4b27      	ldr	r3, [pc, #156]	; (800f02c <sqrt+0xb0>)
 800ef90:	eeb0 8a40 	vmov.f32	s16, s0
 800ef94:	eef0 8a60 	vmov.f32	s17, s1
 800ef98:	f993 6000 	ldrsb.w	r6, [r3]
 800ef9c:	1c73      	adds	r3, r6, #1
 800ef9e:	d03b      	beq.n	800f018 <sqrt+0x9c>
 800efa0:	4622      	mov	r2, r4
 800efa2:	462b      	mov	r3, r5
 800efa4:	4620      	mov	r0, r4
 800efa6:	4629      	mov	r1, r5
 800efa8:	f7f1 fddc 	bl	8000b64 <__aeabi_dcmpun>
 800efac:	4607      	mov	r7, r0
 800efae:	2800      	cmp	r0, #0
 800efb0:	d132      	bne.n	800f018 <sqrt+0x9c>
 800efb2:	f04f 0800 	mov.w	r8, #0
 800efb6:	f04f 0900 	mov.w	r9, #0
 800efba:	4642      	mov	r2, r8
 800efbc:	464b      	mov	r3, r9
 800efbe:	4620      	mov	r0, r4
 800efc0:	4629      	mov	r1, r5
 800efc2:	f7f1 fda7 	bl	8000b14 <__aeabi_dcmplt>
 800efc6:	b338      	cbz	r0, 800f018 <sqrt+0x9c>
 800efc8:	2301      	movs	r3, #1
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	4b18      	ldr	r3, [pc, #96]	; (800f030 <sqrt+0xb4>)
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	9708      	str	r7, [sp, #32]
 800efd2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800efd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800efda:	b916      	cbnz	r6, 800efe2 <sqrt+0x66>
 800efdc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800efe0:	e009      	b.n	800eff6 <sqrt+0x7a>
 800efe2:	4642      	mov	r2, r8
 800efe4:	464b      	mov	r3, r9
 800efe6:	4640      	mov	r0, r8
 800efe8:	4649      	mov	r1, r9
 800efea:	f7f1 fc4b 	bl	8000884 <__aeabi_ddiv>
 800efee:	2e02      	cmp	r6, #2
 800eff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eff4:	d003      	beq.n	800effe <sqrt+0x82>
 800eff6:	4668      	mov	r0, sp
 800eff8:	f001 fad6 	bl	80105a8 <matherr>
 800effc:	b918      	cbnz	r0, 800f006 <sqrt+0x8a>
 800effe:	f7fc fa7f 	bl	800b500 <__errno>
 800f002:	2321      	movs	r3, #33	; 0x21
 800f004:	6003      	str	r3, [r0, #0]
 800f006:	9b08      	ldr	r3, [sp, #32]
 800f008:	b11b      	cbz	r3, 800f012 <sqrt+0x96>
 800f00a:	f7fc fa79 	bl	800b500 <__errno>
 800f00e:	9b08      	ldr	r3, [sp, #32]
 800f010:	6003      	str	r3, [r0, #0]
 800f012:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f016:	e003      	b.n	800f020 <sqrt+0xa4>
 800f018:	eeb0 0a48 	vmov.f32	s0, s16
 800f01c:	eef0 0a68 	vmov.f32	s1, s17
 800f020:	b00b      	add	sp, #44	; 0x2c
 800f022:	ecbd 8b02 	vpop	{d8}
 800f026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f02a:	bf00      	nop
 800f02c:	20010570 	.word	0x20010570
 800f030:	08011cb4 	.word	0x08011cb4
 800f034:	00000000 	.word	0x00000000

0800f038 <__ieee754_atan2>:
 800f038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f03c:	ec57 6b11 	vmov	r6, r7, d1
 800f040:	4273      	negs	r3, r6
 800f042:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f046:	4333      	orrs	r3, r6
 800f048:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800f1f0 <__ieee754_atan2+0x1b8>
 800f04c:	ec51 0b10 	vmov	r0, r1, d0
 800f050:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f054:	4563      	cmp	r3, ip
 800f056:	ee11 8a10 	vmov	r8, s2
 800f05a:	ee10 9a10 	vmov	r9, s0
 800f05e:	468e      	mov	lr, r1
 800f060:	d807      	bhi.n	800f072 <__ieee754_atan2+0x3a>
 800f062:	4244      	negs	r4, r0
 800f064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f068:	4304      	orrs	r4, r0
 800f06a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f06e:	4564      	cmp	r4, ip
 800f070:	d906      	bls.n	800f080 <__ieee754_atan2+0x48>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	4630      	mov	r0, r6
 800f078:	4639      	mov	r1, r7
 800f07a:	f7f1 f927 	bl	80002cc <__adddf3>
 800f07e:	e08d      	b.n	800f19c <__ieee754_atan2+0x164>
 800f080:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f084:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f088:	4334      	orrs	r4, r6
 800f08a:	d103      	bne.n	800f094 <__ieee754_atan2+0x5c>
 800f08c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f090:	f001 b85a 	b.w	8010148 <atan>
 800f094:	17bc      	asrs	r4, r7, #30
 800f096:	f004 0402 	and.w	r4, r4, #2
 800f09a:	ea59 0903 	orrs.w	r9, r9, r3
 800f09e:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f0a2:	d104      	bne.n	800f0ae <__ieee754_atan2+0x76>
 800f0a4:	2c02      	cmp	r4, #2
 800f0a6:	d06c      	beq.n	800f182 <__ieee754_atan2+0x14a>
 800f0a8:	2c03      	cmp	r4, #3
 800f0aa:	d177      	bne.n	800f19c <__ieee754_atan2+0x164>
 800f0ac:	e023      	b.n	800f0f6 <__ieee754_atan2+0xbe>
 800f0ae:	ea58 0802 	orrs.w	r8, r8, r2
 800f0b2:	d026      	beq.n	800f102 <__ieee754_atan2+0xca>
 800f0b4:	4562      	cmp	r2, ip
 800f0b6:	d122      	bne.n	800f0fe <__ieee754_atan2+0xc6>
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d111      	bne.n	800f0e0 <__ieee754_atan2+0xa8>
 800f0bc:	2c02      	cmp	r4, #2
 800f0be:	d007      	beq.n	800f0d0 <__ieee754_atan2+0x98>
 800f0c0:	2c03      	cmp	r4, #3
 800f0c2:	d009      	beq.n	800f0d8 <__ieee754_atan2+0xa0>
 800f0c4:	2c01      	cmp	r4, #1
 800f0c6:	d160      	bne.n	800f18a <__ieee754_atan2+0x152>
 800f0c8:	a137      	add	r1, pc, #220	; (adr r1, 800f1a8 <__ieee754_atan2+0x170>)
 800f0ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0ce:	e065      	b.n	800f19c <__ieee754_atan2+0x164>
 800f0d0:	a137      	add	r1, pc, #220	; (adr r1, 800f1b0 <__ieee754_atan2+0x178>)
 800f0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d6:	e061      	b.n	800f19c <__ieee754_atan2+0x164>
 800f0d8:	a137      	add	r1, pc, #220	; (adr r1, 800f1b8 <__ieee754_atan2+0x180>)
 800f0da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0de:	e05d      	b.n	800f19c <__ieee754_atan2+0x164>
 800f0e0:	2c02      	cmp	r4, #2
 800f0e2:	d04e      	beq.n	800f182 <__ieee754_atan2+0x14a>
 800f0e4:	2c03      	cmp	r4, #3
 800f0e6:	d006      	beq.n	800f0f6 <__ieee754_atan2+0xbe>
 800f0e8:	2c01      	cmp	r4, #1
 800f0ea:	f04f 0000 	mov.w	r0, #0
 800f0ee:	d150      	bne.n	800f192 <__ieee754_atan2+0x15a>
 800f0f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f0f4:	e052      	b.n	800f19c <__ieee754_atan2+0x164>
 800f0f6:	a132      	add	r1, pc, #200	; (adr r1, 800f1c0 <__ieee754_atan2+0x188>)
 800f0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0fc:	e04e      	b.n	800f19c <__ieee754_atan2+0x164>
 800f0fe:	4563      	cmp	r3, ip
 800f100:	d106      	bne.n	800f110 <__ieee754_atan2+0xd8>
 800f102:	f1be 0f00 	cmp.w	lr, #0
 800f106:	da46      	bge.n	800f196 <__ieee754_atan2+0x15e>
 800f108:	a12f      	add	r1, pc, #188	; (adr r1, 800f1c8 <__ieee754_atan2+0x190>)
 800f10a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f10e:	e045      	b.n	800f19c <__ieee754_atan2+0x164>
 800f110:	1a9b      	subs	r3, r3, r2
 800f112:	151b      	asrs	r3, r3, #20
 800f114:	2b3c      	cmp	r3, #60	; 0x3c
 800f116:	dc10      	bgt.n	800f13a <__ieee754_atan2+0x102>
 800f118:	2f00      	cmp	r7, #0
 800f11a:	da01      	bge.n	800f120 <__ieee754_atan2+0xe8>
 800f11c:	333c      	adds	r3, #60	; 0x3c
 800f11e:	db10      	blt.n	800f142 <__ieee754_atan2+0x10a>
 800f120:	4632      	mov	r2, r6
 800f122:	463b      	mov	r3, r7
 800f124:	f7f1 fbae 	bl	8000884 <__aeabi_ddiv>
 800f128:	ec41 0b10 	vmov	d0, r0, r1
 800f12c:	f001 f9b0 	bl	8010490 <fabs>
 800f130:	f001 f80a 	bl	8010148 <atan>
 800f134:	ec51 0b10 	vmov	r0, r1, d0
 800f138:	e005      	b.n	800f146 <__ieee754_atan2+0x10e>
 800f13a:	a125      	add	r1, pc, #148	; (adr r1, 800f1d0 <__ieee754_atan2+0x198>)
 800f13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f140:	e001      	b.n	800f146 <__ieee754_atan2+0x10e>
 800f142:	2000      	movs	r0, #0
 800f144:	2100      	movs	r1, #0
 800f146:	2c01      	cmp	r4, #1
 800f148:	d00b      	beq.n	800f162 <__ieee754_atan2+0x12a>
 800f14a:	2c02      	cmp	r4, #2
 800f14c:	d00c      	beq.n	800f168 <__ieee754_atan2+0x130>
 800f14e:	b32c      	cbz	r4, 800f19c <__ieee754_atan2+0x164>
 800f150:	a321      	add	r3, pc, #132	; (adr r3, 800f1d8 <__ieee754_atan2+0x1a0>)
 800f152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f156:	f7f1 f8b7 	bl	80002c8 <__aeabi_dsub>
 800f15a:	a321      	add	r3, pc, #132	; (adr r3, 800f1e0 <__ieee754_atan2+0x1a8>)
 800f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f160:	e00c      	b.n	800f17c <__ieee754_atan2+0x144>
 800f162:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f166:	e019      	b.n	800f19c <__ieee754_atan2+0x164>
 800f168:	a31b      	add	r3, pc, #108	; (adr r3, 800f1d8 <__ieee754_atan2+0x1a0>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f7f1 f8ab 	bl	80002c8 <__aeabi_dsub>
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	a11a      	add	r1, pc, #104	; (adr r1, 800f1e0 <__ieee754_atan2+0x1a8>)
 800f178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17c:	f7f1 f8a4 	bl	80002c8 <__aeabi_dsub>
 800f180:	e00c      	b.n	800f19c <__ieee754_atan2+0x164>
 800f182:	a117      	add	r1, pc, #92	; (adr r1, 800f1e0 <__ieee754_atan2+0x1a8>)
 800f184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f188:	e008      	b.n	800f19c <__ieee754_atan2+0x164>
 800f18a:	a117      	add	r1, pc, #92	; (adr r1, 800f1e8 <__ieee754_atan2+0x1b0>)
 800f18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f190:	e004      	b.n	800f19c <__ieee754_atan2+0x164>
 800f192:	2100      	movs	r1, #0
 800f194:	e002      	b.n	800f19c <__ieee754_atan2+0x164>
 800f196:	a10e      	add	r1, pc, #56	; (adr r1, 800f1d0 <__ieee754_atan2+0x198>)
 800f198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f19c:	ec41 0b10 	vmov	d0, r0, r1
 800f1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a4:	f3af 8000 	nop.w
 800f1a8:	54442d18 	.word	0x54442d18
 800f1ac:	bfe921fb 	.word	0xbfe921fb
 800f1b0:	7f3321d2 	.word	0x7f3321d2
 800f1b4:	4002d97c 	.word	0x4002d97c
 800f1b8:	7f3321d2 	.word	0x7f3321d2
 800f1bc:	c002d97c 	.word	0xc002d97c
 800f1c0:	54442d18 	.word	0x54442d18
 800f1c4:	c00921fb 	.word	0xc00921fb
 800f1c8:	54442d18 	.word	0x54442d18
 800f1cc:	bff921fb 	.word	0xbff921fb
 800f1d0:	54442d18 	.word	0x54442d18
 800f1d4:	3ff921fb 	.word	0x3ff921fb
 800f1d8:	33145c07 	.word	0x33145c07
 800f1dc:	3ca1a626 	.word	0x3ca1a626
 800f1e0:	54442d18 	.word	0x54442d18
 800f1e4:	400921fb 	.word	0x400921fb
 800f1e8:	54442d18 	.word	0x54442d18
 800f1ec:	3fe921fb 	.word	0x3fe921fb
 800f1f0:	7ff00000 	.word	0x7ff00000
 800f1f4:	00000000 	.word	0x00000000

0800f1f8 <__ieee754_rem_pio2>:
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	ec55 4b10 	vmov	r4, r5, d0
 800f200:	4bc7      	ldr	r3, [pc, #796]	; (800f520 <__ieee754_rem_pio2+0x328>)
 800f202:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f206:	4598      	cmp	r8, r3
 800f208:	b08d      	sub	sp, #52	; 0x34
 800f20a:	4682      	mov	sl, r0
 800f20c:	46ab      	mov	fp, r5
 800f20e:	dc06      	bgt.n	800f21e <__ieee754_rem_pio2+0x26>
 800f210:	2200      	movs	r2, #0
 800f212:	2300      	movs	r3, #0
 800f214:	ed8a 0b00 	vstr	d0, [sl]
 800f218:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f21c:	e160      	b.n	800f4e0 <__ieee754_rem_pio2+0x2e8>
 800f21e:	4bc1      	ldr	r3, [pc, #772]	; (800f524 <__ieee754_rem_pio2+0x32c>)
 800f220:	4598      	cmp	r8, r3
 800f222:	dc71      	bgt.n	800f308 <__ieee754_rem_pio2+0x110>
 800f224:	2d00      	cmp	r5, #0
 800f226:	a3b0      	add	r3, pc, #704	; (adr r3, 800f4e8 <__ieee754_rem_pio2+0x2f0>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	ee10 0a10 	vmov	r0, s0
 800f230:	4629      	mov	r1, r5
 800f232:	4ebd      	ldr	r6, [pc, #756]	; (800f528 <__ieee754_rem_pio2+0x330>)
 800f234:	dd33      	ble.n	800f29e <__ieee754_rem_pio2+0xa6>
 800f236:	f7f1 f847 	bl	80002c8 <__aeabi_dsub>
 800f23a:	45b0      	cmp	r8, r6
 800f23c:	4604      	mov	r4, r0
 800f23e:	460d      	mov	r5, r1
 800f240:	d010      	beq.n	800f264 <__ieee754_rem_pio2+0x6c>
 800f242:	a3ab      	add	r3, pc, #684	; (adr r3, 800f4f0 <__ieee754_rem_pio2+0x2f8>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7f1 f83e 	bl	80002c8 <__aeabi_dsub>
 800f24c:	4602      	mov	r2, r0
 800f24e:	460b      	mov	r3, r1
 800f250:	e9ca 2300 	strd	r2, r3, [sl]
 800f254:	4620      	mov	r0, r4
 800f256:	4629      	mov	r1, r5
 800f258:	f7f1 f836 	bl	80002c8 <__aeabi_dsub>
 800f25c:	a3a4      	add	r3, pc, #656	; (adr r3, 800f4f0 <__ieee754_rem_pio2+0x2f8>)
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	e016      	b.n	800f292 <__ieee754_rem_pio2+0x9a>
 800f264:	a3a4      	add	r3, pc, #656	; (adr r3, 800f4f8 <__ieee754_rem_pio2+0x300>)
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	f7f1 f82d 	bl	80002c8 <__aeabi_dsub>
 800f26e:	a3a4      	add	r3, pc, #656	; (adr r3, 800f500 <__ieee754_rem_pio2+0x308>)
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	f7f1 f826 	bl	80002c8 <__aeabi_dsub>
 800f27c:	4602      	mov	r2, r0
 800f27e:	460b      	mov	r3, r1
 800f280:	e9ca 2300 	strd	r2, r3, [sl]
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	f7f1 f81e 	bl	80002c8 <__aeabi_dsub>
 800f28c:	a39c      	add	r3, pc, #624	; (adr r3, 800f500 <__ieee754_rem_pio2+0x308>)
 800f28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f292:	f7f1 f819 	bl	80002c8 <__aeabi_dsub>
 800f296:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f29a:	2001      	movs	r0, #1
 800f29c:	e1a2      	b.n	800f5e4 <__ieee754_rem_pio2+0x3ec>
 800f29e:	f7f1 f815 	bl	80002cc <__adddf3>
 800f2a2:	45b0      	cmp	r8, r6
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	460d      	mov	r5, r1
 800f2a8:	d010      	beq.n	800f2cc <__ieee754_rem_pio2+0xd4>
 800f2aa:	a391      	add	r3, pc, #580	; (adr r3, 800f4f0 <__ieee754_rem_pio2+0x2f8>)
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	f7f1 f80c 	bl	80002cc <__adddf3>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	e9ca 2300 	strd	r2, r3, [sl]
 800f2bc:	4620      	mov	r0, r4
 800f2be:	4629      	mov	r1, r5
 800f2c0:	f7f1 f802 	bl	80002c8 <__aeabi_dsub>
 800f2c4:	a38a      	add	r3, pc, #552	; (adr r3, 800f4f0 <__ieee754_rem_pio2+0x2f8>)
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	e016      	b.n	800f2fa <__ieee754_rem_pio2+0x102>
 800f2cc:	a38a      	add	r3, pc, #552	; (adr r3, 800f4f8 <__ieee754_rem_pio2+0x300>)
 800f2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d2:	f7f0 fffb 	bl	80002cc <__adddf3>
 800f2d6:	a38a      	add	r3, pc, #552	; (adr r3, 800f500 <__ieee754_rem_pio2+0x308>)
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	4604      	mov	r4, r0
 800f2de:	460d      	mov	r5, r1
 800f2e0:	f7f0 fff4 	bl	80002cc <__adddf3>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	e9ca 2300 	strd	r2, r3, [sl]
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f7f0 ffea 	bl	80002c8 <__aeabi_dsub>
 800f2f4:	a382      	add	r3, pc, #520	; (adr r3, 800f500 <__ieee754_rem_pio2+0x308>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	f7f0 ffe7 	bl	80002cc <__adddf3>
 800f2fe:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f302:	f04f 30ff 	mov.w	r0, #4294967295
 800f306:	e16d      	b.n	800f5e4 <__ieee754_rem_pio2+0x3ec>
 800f308:	4b88      	ldr	r3, [pc, #544]	; (800f52c <__ieee754_rem_pio2+0x334>)
 800f30a:	4598      	cmp	r8, r3
 800f30c:	f300 80da 	bgt.w	800f4c4 <__ieee754_rem_pio2+0x2cc>
 800f310:	f001 f8be 	bl	8010490 <fabs>
 800f314:	ec55 4b10 	vmov	r4, r5, d0
 800f318:	ee10 0a10 	vmov	r0, s0
 800f31c:	a37a      	add	r3, pc, #488	; (adr r3, 800f508 <__ieee754_rem_pio2+0x310>)
 800f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f322:	4629      	mov	r1, r5
 800f324:	f7f1 f984 	bl	8000630 <__aeabi_dmul>
 800f328:	2200      	movs	r2, #0
 800f32a:	4b81      	ldr	r3, [pc, #516]	; (800f530 <__ieee754_rem_pio2+0x338>)
 800f32c:	f7f0 ffce 	bl	80002cc <__adddf3>
 800f330:	f7f1 fc2e 	bl	8000b90 <__aeabi_d2iz>
 800f334:	4681      	mov	r9, r0
 800f336:	f7f1 f915 	bl	8000564 <__aeabi_i2d>
 800f33a:	a36b      	add	r3, pc, #428	; (adr r3, 800f4e8 <__ieee754_rem_pio2+0x2f0>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f344:	f7f1 f974 	bl	8000630 <__aeabi_dmul>
 800f348:	4602      	mov	r2, r0
 800f34a:	460b      	mov	r3, r1
 800f34c:	4620      	mov	r0, r4
 800f34e:	4629      	mov	r1, r5
 800f350:	f7f0 ffba 	bl	80002c8 <__aeabi_dsub>
 800f354:	a366      	add	r3, pc, #408	; (adr r3, 800f4f0 <__ieee754_rem_pio2+0x2f8>)
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	4604      	mov	r4, r0
 800f35c:	460d      	mov	r5, r1
 800f35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f362:	f7f1 f965 	bl	8000630 <__aeabi_dmul>
 800f366:	f1b9 0f1f 	cmp.w	r9, #31
 800f36a:	4606      	mov	r6, r0
 800f36c:	460f      	mov	r7, r1
 800f36e:	dc06      	bgt.n	800f37e <__ieee754_rem_pio2+0x186>
 800f370:	f109 32ff 	add.w	r2, r9, #4294967295
 800f374:	4b6f      	ldr	r3, [pc, #444]	; (800f534 <__ieee754_rem_pio2+0x33c>)
 800f376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f37a:	4598      	cmp	r8, r3
 800f37c:	d172      	bne.n	800f464 <__ieee754_rem_pio2+0x26c>
 800f37e:	463b      	mov	r3, r7
 800f380:	4632      	mov	r2, r6
 800f382:	4620      	mov	r0, r4
 800f384:	4629      	mov	r1, r5
 800f386:	f7f0 ff9f 	bl	80002c8 <__aeabi_dsub>
 800f38a:	ea4f 5828 	mov.w	r8, r8, asr #20
 800f38e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f392:	ebc3 0308 	rsb	r3, r3, r8
 800f396:	2b10      	cmp	r3, #16
 800f398:	e9ca 0100 	strd	r0, r1, [sl]
 800f39c:	dd6d      	ble.n	800f47a <__ieee754_rem_pio2+0x282>
 800f39e:	a356      	add	r3, pc, #344	; (adr r3, 800f4f8 <__ieee754_rem_pio2+0x300>)
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3a8:	f7f1 f942 	bl	8000630 <__aeabi_dmul>
 800f3ac:	4606      	mov	r6, r0
 800f3ae:	460f      	mov	r7, r1
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	f7f0 ff86 	bl	80002c8 <__aeabi_dsub>
 800f3bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	4629      	mov	r1, r5
 800f3c8:	f7f0 ff7e 	bl	80002c8 <__aeabi_dsub>
 800f3cc:	4632      	mov	r2, r6
 800f3ce:	463b      	mov	r3, r7
 800f3d0:	f7f0 ff7a 	bl	80002c8 <__aeabi_dsub>
 800f3d4:	a34a      	add	r3, pc, #296	; (adr r3, 800f500 <__ieee754_rem_pio2+0x308>)
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	4604      	mov	r4, r0
 800f3dc:	460d      	mov	r5, r1
 800f3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3e2:	f7f1 f925 	bl	8000630 <__aeabi_dmul>
 800f3e6:	4622      	mov	r2, r4
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	f7f0 ff6d 	bl	80002c8 <__aeabi_dsub>
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	460f      	mov	r7, r1
 800f3f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3fa:	f7f0 ff65 	bl	80002c8 <__aeabi_dsub>
 800f3fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f402:	ebc3 0808 	rsb	r8, r3, r8
 800f406:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 800f40a:	e9ca 0100 	strd	r0, r1, [sl]
 800f40e:	dd32      	ble.n	800f476 <__ieee754_rem_pio2+0x27e>
 800f410:	a33f      	add	r3, pc, #252	; (adr r3, 800f510 <__ieee754_rem_pio2+0x318>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f41a:	f7f1 f909 	bl	8000630 <__aeabi_dmul>
 800f41e:	4606      	mov	r6, r0
 800f420:	460f      	mov	r7, r1
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f42a:	f7f0 ff4d 	bl	80002c8 <__aeabi_dsub>
 800f42e:	4602      	mov	r2, r0
 800f430:	460b      	mov	r3, r1
 800f432:	4604      	mov	r4, r0
 800f434:	460d      	mov	r5, r1
 800f436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f43a:	f7f0 ff45 	bl	80002c8 <__aeabi_dsub>
 800f43e:	4632      	mov	r2, r6
 800f440:	463b      	mov	r3, r7
 800f442:	f7f0 ff41 	bl	80002c8 <__aeabi_dsub>
 800f446:	a334      	add	r3, pc, #208	; (adr r3, 800f518 <__ieee754_rem_pio2+0x320>)
 800f448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44c:	4606      	mov	r6, r0
 800f44e:	460f      	mov	r7, r1
 800f450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f454:	f7f1 f8ec 	bl	8000630 <__aeabi_dmul>
 800f458:	4632      	mov	r2, r6
 800f45a:	463b      	mov	r3, r7
 800f45c:	f7f0 ff34 	bl	80002c8 <__aeabi_dsub>
 800f460:	4606      	mov	r6, r0
 800f462:	460f      	mov	r7, r1
 800f464:	4632      	mov	r2, r6
 800f466:	463b      	mov	r3, r7
 800f468:	4620      	mov	r0, r4
 800f46a:	4629      	mov	r1, r5
 800f46c:	f7f0 ff2c 	bl	80002c8 <__aeabi_dsub>
 800f470:	e9ca 0100 	strd	r0, r1, [sl]
 800f474:	e001      	b.n	800f47a <__ieee754_rem_pio2+0x282>
 800f476:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f47a:	ed9a 7b00 	vldr	d7, [sl]
 800f47e:	4620      	mov	r0, r4
 800f480:	ec53 2b17 	vmov	r2, r3, d7
 800f484:	4629      	mov	r1, r5
 800f486:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f48a:	f7f0 ff1d 	bl	80002c8 <__aeabi_dsub>
 800f48e:	4632      	mov	r2, r6
 800f490:	463b      	mov	r3, r7
 800f492:	f7f0 ff19 	bl	80002c8 <__aeabi_dsub>
 800f496:	f1bb 0f00 	cmp.w	fp, #0
 800f49a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f49e:	f280 80a0 	bge.w	800f5e2 <__ieee754_rem_pio2+0x3ea>
 800f4a2:	9b02      	ldr	r3, [sp, #8]
 800f4a4:	f8ca 3000 	str.w	r3, [sl]
 800f4a8:	9b03      	ldr	r3, [sp, #12]
 800f4aa:	f8ca 0008 	str.w	r0, [sl, #8]
 800f4ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4b2:	f8ca 3004 	str.w	r3, [sl, #4]
 800f4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4ba:	f8ca 300c 	str.w	r3, [sl, #12]
 800f4be:	f1c9 0000 	rsb	r0, r9, #0
 800f4c2:	e08f      	b.n	800f5e4 <__ieee754_rem_pio2+0x3ec>
 800f4c4:	4b1c      	ldr	r3, [pc, #112]	; (800f538 <__ieee754_rem_pio2+0x340>)
 800f4c6:	4598      	cmp	r8, r3
 800f4c8:	dd38      	ble.n	800f53c <__ieee754_rem_pio2+0x344>
 800f4ca:	ee10 2a10 	vmov	r2, s0
 800f4ce:	462b      	mov	r3, r5
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	f7f0 fef8 	bl	80002c8 <__aeabi_dsub>
 800f4d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f4dc:	e9ca 0100 	strd	r0, r1, [sl]
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e07f      	b.n	800f5e4 <__ieee754_rem_pio2+0x3ec>
 800f4e4:	f3af 8000 	nop.w
 800f4e8:	54400000 	.word	0x54400000
 800f4ec:	3ff921fb 	.word	0x3ff921fb
 800f4f0:	1a626331 	.word	0x1a626331
 800f4f4:	3dd0b461 	.word	0x3dd0b461
 800f4f8:	1a600000 	.word	0x1a600000
 800f4fc:	3dd0b461 	.word	0x3dd0b461
 800f500:	2e037073 	.word	0x2e037073
 800f504:	3ba3198a 	.word	0x3ba3198a
 800f508:	6dc9c883 	.word	0x6dc9c883
 800f50c:	3fe45f30 	.word	0x3fe45f30
 800f510:	2e000000 	.word	0x2e000000
 800f514:	3ba3198a 	.word	0x3ba3198a
 800f518:	252049c1 	.word	0x252049c1
 800f51c:	397b839a 	.word	0x397b839a
 800f520:	3fe921fb 	.word	0x3fe921fb
 800f524:	4002d97b 	.word	0x4002d97b
 800f528:	3ff921fb 	.word	0x3ff921fb
 800f52c:	413921fb 	.word	0x413921fb
 800f530:	3fe00000 	.word	0x3fe00000
 800f534:	08011cbc 	.word	0x08011cbc
 800f538:	7fefffff 	.word	0x7fefffff
 800f53c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f540:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f544:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f548:	4620      	mov	r0, r4
 800f54a:	460d      	mov	r5, r1
 800f54c:	f7f1 fb20 	bl	8000b90 <__aeabi_d2iz>
 800f550:	f7f1 f808 	bl	8000564 <__aeabi_i2d>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	4620      	mov	r0, r4
 800f55a:	4629      	mov	r1, r5
 800f55c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f560:	f7f0 feb2 	bl	80002c8 <__aeabi_dsub>
 800f564:	2200      	movs	r2, #0
 800f566:	4b21      	ldr	r3, [pc, #132]	; (800f5ec <__ieee754_rem_pio2+0x3f4>)
 800f568:	f7f1 f862 	bl	8000630 <__aeabi_dmul>
 800f56c:	460d      	mov	r5, r1
 800f56e:	4604      	mov	r4, r0
 800f570:	f7f1 fb0e 	bl	8000b90 <__aeabi_d2iz>
 800f574:	f7f0 fff6 	bl	8000564 <__aeabi_i2d>
 800f578:	4602      	mov	r2, r0
 800f57a:	460b      	mov	r3, r1
 800f57c:	4620      	mov	r0, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f584:	f7f0 fea0 	bl	80002c8 <__aeabi_dsub>
 800f588:	2200      	movs	r2, #0
 800f58a:	4b18      	ldr	r3, [pc, #96]	; (800f5ec <__ieee754_rem_pio2+0x3f4>)
 800f58c:	f7f1 f850 	bl	8000630 <__aeabi_dmul>
 800f590:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f594:	ad0c      	add	r5, sp, #48	; 0x30
 800f596:	2403      	movs	r4, #3
 800f598:	2200      	movs	r2, #0
 800f59a:	2300      	movs	r3, #0
 800f59c:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 800f5a0:	1e67      	subs	r7, r4, #1
 800f5a2:	f7f1 faad 	bl	8000b00 <__aeabi_dcmpeq>
 800f5a6:	b108      	cbz	r0, 800f5ac <__ieee754_rem_pio2+0x3b4>
 800f5a8:	463c      	mov	r4, r7
 800f5aa:	e7f5      	b.n	800f598 <__ieee754_rem_pio2+0x3a0>
 800f5ac:	4b10      	ldr	r3, [pc, #64]	; (800f5f0 <__ieee754_rem_pio2+0x3f8>)
 800f5ae:	9301      	str	r3, [sp, #4]
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	4632      	mov	r2, r6
 800f5b6:	4623      	mov	r3, r4
 800f5b8:	4651      	mov	r1, sl
 800f5ba:	a806      	add	r0, sp, #24
 800f5bc:	f000 f9b8 	bl	800f930 <__kernel_rem_pio2>
 800f5c0:	f1bb 0f00 	cmp.w	fp, #0
 800f5c4:	da0e      	bge.n	800f5e4 <__ieee754_rem_pio2+0x3ec>
 800f5c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f5ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5ce:	f8ca 3004 	str.w	r3, [sl, #4]
 800f5d2:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f5d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5da:	f8ca 300c 	str.w	r3, [sl, #12]
 800f5de:	4240      	negs	r0, r0
 800f5e0:	e000      	b.n	800f5e4 <__ieee754_rem_pio2+0x3ec>
 800f5e2:	4648      	mov	r0, r9
 800f5e4:	b00d      	add	sp, #52	; 0x34
 800f5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ea:	bf00      	nop
 800f5ec:	41700000 	.word	0x41700000
 800f5f0:	08011d3c 	.word	0x08011d3c

0800f5f4 <__ieee754_sqrt>:
 800f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f8:	4957      	ldr	r1, [pc, #348]	; (800f758 <__ieee754_sqrt+0x164>)
 800f5fa:	4f57      	ldr	r7, [pc, #348]	; (800f758 <__ieee754_sqrt+0x164>)
 800f5fc:	ec55 4b10 	vmov	r4, r5, d0
 800f600:	4029      	ands	r1, r5
 800f602:	42b9      	cmp	r1, r7
 800f604:	462a      	mov	r2, r5
 800f606:	462b      	mov	r3, r5
 800f608:	4626      	mov	r6, r4
 800f60a:	d10c      	bne.n	800f626 <__ieee754_sqrt+0x32>
 800f60c:	ee10 2a10 	vmov	r2, s0
 800f610:	462b      	mov	r3, r5
 800f612:	ee10 0a10 	vmov	r0, s0
 800f616:	4629      	mov	r1, r5
 800f618:	f7f1 f80a 	bl	8000630 <__aeabi_dmul>
 800f61c:	4622      	mov	r2, r4
 800f61e:	462b      	mov	r3, r5
 800f620:	f7f0 fe54 	bl	80002cc <__adddf3>
 800f624:	e094      	b.n	800f750 <__ieee754_sqrt+0x15c>
 800f626:	2d00      	cmp	r5, #0
 800f628:	dc11      	bgt.n	800f64e <__ieee754_sqrt+0x5a>
 800f62a:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800f62e:	4321      	orrs	r1, r4
 800f630:	f000 808b 	beq.w	800f74a <__ieee754_sqrt+0x156>
 800f634:	b15d      	cbz	r5, 800f64e <__ieee754_sqrt+0x5a>
 800f636:	ee10 2a10 	vmov	r2, s0
 800f63a:	462b      	mov	r3, r5
 800f63c:	4620      	mov	r0, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	f7f0 fe42 	bl	80002c8 <__aeabi_dsub>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	f7f1 f91c 	bl	8000884 <__aeabi_ddiv>
 800f64c:	e080      	b.n	800f750 <__ieee754_sqrt+0x15c>
 800f64e:	1512      	asrs	r2, r2, #20
 800f650:	d112      	bne.n	800f678 <__ieee754_sqrt+0x84>
 800f652:	b91b      	cbnz	r3, 800f65c <__ieee754_sqrt+0x68>
 800f654:	0af3      	lsrs	r3, r6, #11
 800f656:	3a15      	subs	r2, #21
 800f658:	0576      	lsls	r6, r6, #21
 800f65a:	e7fa      	b.n	800f652 <__ieee754_sqrt+0x5e>
 800f65c:	2100      	movs	r1, #0
 800f65e:	02d8      	lsls	r0, r3, #11
 800f660:	d402      	bmi.n	800f668 <__ieee754_sqrt+0x74>
 800f662:	005b      	lsls	r3, r3, #1
 800f664:	3101      	adds	r1, #1
 800f666:	e7fa      	b.n	800f65e <__ieee754_sqrt+0x6a>
 800f668:	1e48      	subs	r0, r1, #1
 800f66a:	1a12      	subs	r2, r2, r0
 800f66c:	f1c1 0020 	rsb	r0, r1, #32
 800f670:	fa26 f000 	lsr.w	r0, r6, r0
 800f674:	4303      	orrs	r3, r0
 800f676:	408e      	lsls	r6, r1
 800f678:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f680:	07d1      	lsls	r1, r2, #31
 800f682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f686:	bf42      	ittt	mi
 800f688:	005b      	lslmi	r3, r3, #1
 800f68a:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 800f68e:	0076      	lslmi	r6, r6, #1
 800f690:	1055      	asrs	r5, r2, #1
 800f692:	f04f 0e00 	mov.w	lr, #0
 800f696:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 800f69a:	4413      	add	r3, r2
 800f69c:	0076      	lsls	r6, r6, #1
 800f69e:	2216      	movs	r2, #22
 800f6a0:	4677      	mov	r7, lr
 800f6a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f6a6:	1878      	adds	r0, r7, r1
 800f6a8:	4298      	cmp	r0, r3
 800f6aa:	bfde      	ittt	le
 800f6ac:	1a1b      	suble	r3, r3, r0
 800f6ae:	1847      	addle	r7, r0, r1
 800f6b0:	448e      	addle	lr, r1
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	3a01      	subs	r2, #1
 800f6b6:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 800f6ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f6be:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800f6c2:	d1f0      	bne.n	800f6a6 <__ieee754_sqrt+0xb2>
 800f6c4:	2420      	movs	r4, #32
 800f6c6:	4694      	mov	ip, r2
 800f6c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f6cc:	429f      	cmp	r7, r3
 800f6ce:	eb01 000c 	add.w	r0, r1, ip
 800f6d2:	db02      	blt.n	800f6da <__ieee754_sqrt+0xe6>
 800f6d4:	d116      	bne.n	800f704 <__ieee754_sqrt+0x110>
 800f6d6:	42b0      	cmp	r0, r6
 800f6d8:	d813      	bhi.n	800f702 <__ieee754_sqrt+0x10e>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	eb00 0c01 	add.w	ip, r0, r1
 800f6e0:	da05      	bge.n	800f6ee <__ieee754_sqrt+0xfa>
 800f6e2:	f1bc 0f00 	cmp.w	ip, #0
 800f6e6:	db02      	blt.n	800f6ee <__ieee754_sqrt+0xfa>
 800f6e8:	f107 0801 	add.w	r8, r7, #1
 800f6ec:	e000      	b.n	800f6f0 <__ieee754_sqrt+0xfc>
 800f6ee:	46b8      	mov	r8, r7
 800f6f0:	1bdb      	subs	r3, r3, r7
 800f6f2:	42b0      	cmp	r0, r6
 800f6f4:	bf88      	it	hi
 800f6f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f6fa:	1a36      	subs	r6, r6, r0
 800f6fc:	440a      	add	r2, r1
 800f6fe:	4647      	mov	r7, r8
 800f700:	e000      	b.n	800f704 <__ieee754_sqrt+0x110>
 800f702:	463b      	mov	r3, r7
 800f704:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 800f708:	3c01      	subs	r4, #1
 800f70a:	4403      	add	r3, r0
 800f70c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800f710:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f714:	d1da      	bne.n	800f6cc <__ieee754_sqrt+0xd8>
 800f716:	4333      	orrs	r3, r6
 800f718:	d007      	beq.n	800f72a <__ieee754_sqrt+0x136>
 800f71a:	1c53      	adds	r3, r2, #1
 800f71c:	bf13      	iteet	ne
 800f71e:	f002 0301 	andne.w	r3, r2, #1
 800f722:	f10e 0e01 	addeq.w	lr, lr, #1
 800f726:	4622      	moveq	r2, r4
 800f728:	18d2      	addne	r2, r2, r3
 800f72a:	ea4f 046e 	mov.w	r4, lr, asr #1
 800f72e:	0853      	lsrs	r3, r2, #1
 800f730:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 800f734:	f01e 0f01 	tst.w	lr, #1
 800f738:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 800f73c:	bf18      	it	ne
 800f73e:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 800f742:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 800f746:	4618      	mov	r0, r3
 800f748:	e002      	b.n	800f750 <__ieee754_sqrt+0x15c>
 800f74a:	ee10 0a10 	vmov	r0, s0
 800f74e:	4629      	mov	r1, r5
 800f750:	ec41 0b10 	vmov	d0, r0, r1
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	7ff00000 	.word	0x7ff00000
 800f75c:	00000000 	.word	0x00000000

0800f760 <__kernel_cos>:
 800f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f764:	ec59 8b10 	vmov	r8, r9, d0
 800f768:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800f76c:	b085      	sub	sp, #20
 800f76e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800f772:	ed8d 1b00 	vstr	d1, [sp]
 800f776:	da07      	bge.n	800f788 <__kernel_cos+0x28>
 800f778:	ee10 0a10 	vmov	r0, s0
 800f77c:	4649      	mov	r1, r9
 800f77e:	f7f1 fa07 	bl	8000b90 <__aeabi_d2iz>
 800f782:	2800      	cmp	r0, #0
 800f784:	f000 80a6 	beq.w	800f8d4 <__kernel_cos+0x174>
 800f788:	4642      	mov	r2, r8
 800f78a:	464b      	mov	r3, r9
 800f78c:	4640      	mov	r0, r8
 800f78e:	4649      	mov	r1, r9
 800f790:	f7f0 ff4e 	bl	8000630 <__aeabi_dmul>
 800f794:	a359      	add	r3, pc, #356	; (adr r3, 800f8fc <__kernel_cos+0x19c>)
 800f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79a:	4604      	mov	r4, r0
 800f79c:	460d      	mov	r5, r1
 800f79e:	f7f0 ff47 	bl	8000630 <__aeabi_dmul>
 800f7a2:	a358      	add	r3, pc, #352	; (adr r3, 800f904 <__kernel_cos+0x1a4>)
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	f7f0 fd90 	bl	80002cc <__adddf3>
 800f7ac:	4622      	mov	r2, r4
 800f7ae:	462b      	mov	r3, r5
 800f7b0:	f7f0 ff3e 	bl	8000630 <__aeabi_dmul>
 800f7b4:	a355      	add	r3, pc, #340	; (adr r3, 800f90c <__kernel_cos+0x1ac>)
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	f7f0 fd85 	bl	80002c8 <__aeabi_dsub>
 800f7be:	4622      	mov	r2, r4
 800f7c0:	462b      	mov	r3, r5
 800f7c2:	f7f0 ff35 	bl	8000630 <__aeabi_dmul>
 800f7c6:	a353      	add	r3, pc, #332	; (adr r3, 800f914 <__kernel_cos+0x1b4>)
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	f7f0 fd7e 	bl	80002cc <__adddf3>
 800f7d0:	4622      	mov	r2, r4
 800f7d2:	462b      	mov	r3, r5
 800f7d4:	f7f0 ff2c 	bl	8000630 <__aeabi_dmul>
 800f7d8:	a350      	add	r3, pc, #320	; (adr r3, 800f91c <__kernel_cos+0x1bc>)
 800f7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7de:	f7f0 fd73 	bl	80002c8 <__aeabi_dsub>
 800f7e2:	4622      	mov	r2, r4
 800f7e4:	462b      	mov	r3, r5
 800f7e6:	f7f0 ff23 	bl	8000630 <__aeabi_dmul>
 800f7ea:	a34e      	add	r3, pc, #312	; (adr r3, 800f924 <__kernel_cos+0x1c4>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f7f0 fd6c 	bl	80002cc <__adddf3>
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	4622      	mov	r2, r4
 800f7f8:	f7f0 ff1a 	bl	8000630 <__aeabi_dmul>
 800f7fc:	4b3a      	ldr	r3, [pc, #232]	; (800f8e8 <__kernel_cos+0x188>)
 800f7fe:	429f      	cmp	r7, r3
 800f800:	4682      	mov	sl, r0
 800f802:	468b      	mov	fp, r1
 800f804:	dc26      	bgt.n	800f854 <__kernel_cos+0xf4>
 800f806:	2200      	movs	r2, #0
 800f808:	4b38      	ldr	r3, [pc, #224]	; (800f8ec <__kernel_cos+0x18c>)
 800f80a:	4620      	mov	r0, r4
 800f80c:	4629      	mov	r1, r5
 800f80e:	f7f0 ff0f 	bl	8000630 <__aeabi_dmul>
 800f812:	4652      	mov	r2, sl
 800f814:	4606      	mov	r6, r0
 800f816:	460f      	mov	r7, r1
 800f818:	465b      	mov	r3, fp
 800f81a:	4620      	mov	r0, r4
 800f81c:	4629      	mov	r1, r5
 800f81e:	f7f0 ff07 	bl	8000630 <__aeabi_dmul>
 800f822:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f826:	4604      	mov	r4, r0
 800f828:	460d      	mov	r5, r1
 800f82a:	4640      	mov	r0, r8
 800f82c:	4649      	mov	r1, r9
 800f82e:	f7f0 feff 	bl	8000630 <__aeabi_dmul>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	4620      	mov	r0, r4
 800f838:	4629      	mov	r1, r5
 800f83a:	f7f0 fd45 	bl	80002c8 <__aeabi_dsub>
 800f83e:	4602      	mov	r2, r0
 800f840:	460b      	mov	r3, r1
 800f842:	4630      	mov	r0, r6
 800f844:	4639      	mov	r1, r7
 800f846:	f7f0 fd3f 	bl	80002c8 <__aeabi_dsub>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	2000      	movs	r0, #0
 800f850:	4927      	ldr	r1, [pc, #156]	; (800f8f0 <__kernel_cos+0x190>)
 800f852:	e03c      	b.n	800f8ce <__kernel_cos+0x16e>
 800f854:	4b27      	ldr	r3, [pc, #156]	; (800f8f4 <__kernel_cos+0x194>)
 800f856:	4926      	ldr	r1, [pc, #152]	; (800f8f0 <__kernel_cos+0x190>)
 800f858:	429f      	cmp	r7, r3
 800f85a:	bfd7      	itett	le
 800f85c:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800f860:	4f25      	ldrgt	r7, [pc, #148]	; (800f8f8 <__kernel_cos+0x198>)
 800f862:	2200      	movle	r2, #0
 800f864:	4616      	movle	r6, r2
 800f866:	bfd4      	ite	le
 800f868:	461f      	movle	r7, r3
 800f86a:	2600      	movgt	r6, #0
 800f86c:	4632      	mov	r2, r6
 800f86e:	463b      	mov	r3, r7
 800f870:	2000      	movs	r0, #0
 800f872:	f7f0 fd29 	bl	80002c8 <__aeabi_dsub>
 800f876:	2200      	movs	r2, #0
 800f878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f87c:	4b1b      	ldr	r3, [pc, #108]	; (800f8ec <__kernel_cos+0x18c>)
 800f87e:	4620      	mov	r0, r4
 800f880:	4629      	mov	r1, r5
 800f882:	f7f0 fed5 	bl	8000630 <__aeabi_dmul>
 800f886:	4632      	mov	r2, r6
 800f888:	463b      	mov	r3, r7
 800f88a:	f7f0 fd1d 	bl	80002c8 <__aeabi_dsub>
 800f88e:	4652      	mov	r2, sl
 800f890:	4606      	mov	r6, r0
 800f892:	460f      	mov	r7, r1
 800f894:	465b      	mov	r3, fp
 800f896:	4620      	mov	r0, r4
 800f898:	4629      	mov	r1, r5
 800f89a:	f7f0 fec9 	bl	8000630 <__aeabi_dmul>
 800f89e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	460d      	mov	r5, r1
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	4649      	mov	r1, r9
 800f8aa:	f7f0 fec1 	bl	8000630 <__aeabi_dmul>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	f7f0 fd07 	bl	80002c8 <__aeabi_dsub>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	4630      	mov	r0, r6
 800f8c0:	4639      	mov	r1, r7
 800f8c2:	f7f0 fd01 	bl	80002c8 <__aeabi_dsub>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8ce:	f7f0 fcfb 	bl	80002c8 <__aeabi_dsub>
 800f8d2:	e001      	b.n	800f8d8 <__kernel_cos+0x178>
 800f8d4:	4906      	ldr	r1, [pc, #24]	; (800f8f0 <__kernel_cos+0x190>)
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	ec41 0b10 	vmov	d0, r0, r1
 800f8dc:	b005      	add	sp, #20
 800f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e2:	bf00      	nop
 800f8e4:	f3af 8000 	nop.w
 800f8e8:	3fd33332 	.word	0x3fd33332
 800f8ec:	3fe00000 	.word	0x3fe00000
 800f8f0:	3ff00000 	.word	0x3ff00000
 800f8f4:	3fe90000 	.word	0x3fe90000
 800f8f8:	3fd20000 	.word	0x3fd20000
 800f8fc:	be8838d4 	.word	0xbe8838d4
 800f900:	bda8fae9 	.word	0xbda8fae9
 800f904:	bdb4b1c4 	.word	0xbdb4b1c4
 800f908:	3e21ee9e 	.word	0x3e21ee9e
 800f90c:	809c52ad 	.word	0x809c52ad
 800f910:	3e927e4f 	.word	0x3e927e4f
 800f914:	19cb1590 	.word	0x19cb1590
 800f918:	3efa01a0 	.word	0x3efa01a0
 800f91c:	16c15177 	.word	0x16c15177
 800f920:	3f56c16c 	.word	0x3f56c16c
 800f924:	5555554c 	.word	0x5555554c
 800f928:	3fa55555 	.word	0x3fa55555
 800f92c:	00000000 	.word	0x00000000

0800f930 <__kernel_rem_pio2>:
 800f930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f934:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f938:	2418      	movs	r4, #24
 800f93a:	9306      	str	r3, [sp, #24]
 800f93c:	9101      	str	r1, [sp, #4]
 800f93e:	4bba      	ldr	r3, [pc, #744]	; (800fc28 <__kernel_rem_pio2+0x2f8>)
 800f940:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f942:	9009      	str	r0, [sp, #36]	; 0x24
 800f944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f948:	9302      	str	r3, [sp, #8]
 800f94a:	9b06      	ldr	r3, [sp, #24]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	9305      	str	r3, [sp, #20]
 800f950:	1ed3      	subs	r3, r2, #3
 800f952:	fb93 f4f4 	sdiv	r4, r3, r4
 800f956:	f06f 0317 	mvn.w	r3, #23
 800f95a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f95e:	fb04 3303 	mla	r3, r4, r3, r3
 800f962:	eb03 0802 	add.w	r8, r3, r2
 800f966:	9b02      	ldr	r3, [sp, #8]
 800f968:	9a05      	ldr	r2, [sp, #20]
 800f96a:	eb03 0a02 	add.w	sl, r3, r2
 800f96e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800f970:	1aa7      	subs	r7, r4, r2
 800f972:	ae20      	add	r6, sp, #128	; 0x80
 800f974:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f978:	2500      	movs	r5, #0
 800f97a:	4555      	cmp	r5, sl
 800f97c:	dc0c      	bgt.n	800f998 <__kernel_rem_pio2+0x68>
 800f97e:	42ef      	cmn	r7, r5
 800f980:	d404      	bmi.n	800f98c <__kernel_rem_pio2+0x5c>
 800f982:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f986:	f7f0 fded 	bl	8000564 <__aeabi_i2d>
 800f98a:	e001      	b.n	800f990 <__kernel_rem_pio2+0x60>
 800f98c:	2000      	movs	r0, #0
 800f98e:	2100      	movs	r1, #0
 800f990:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f994:	3501      	adds	r5, #1
 800f996:	e7f0      	b.n	800f97a <__kernel_rem_pio2+0x4a>
 800f998:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f99c:	2600      	movs	r6, #0
 800f99e:	9b02      	ldr	r3, [sp, #8]
 800f9a0:	429e      	cmp	r6, r3
 800f9a2:	dc27      	bgt.n	800f9f4 <__kernel_rem_pio2+0xc4>
 800f9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9a6:	9304      	str	r3, [sp, #16]
 800f9a8:	9b06      	ldr	r3, [sp, #24]
 800f9aa:	199d      	adds	r5, r3, r6
 800f9ac:	ab20      	add	r3, sp, #128	; 0x80
 800f9ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f9b2:	9308      	str	r3, [sp, #32]
 800f9b4:	f04f 0900 	mov.w	r9, #0
 800f9b8:	f04f 0a00 	mov.w	sl, #0
 800f9bc:	2700      	movs	r7, #0
 800f9be:	9b05      	ldr	r3, [sp, #20]
 800f9c0:	429f      	cmp	r7, r3
 800f9c2:	dc13      	bgt.n	800f9ec <__kernel_rem_pio2+0xbc>
 800f9c4:	9908      	ldr	r1, [sp, #32]
 800f9c6:	9d04      	ldr	r5, [sp, #16]
 800f9c8:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f9cc:	9108      	str	r1, [sp, #32]
 800f9ce:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f9d2:	9504      	str	r5, [sp, #16]
 800f9d4:	f7f0 fe2c 	bl	8000630 <__aeabi_dmul>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4648      	mov	r0, r9
 800f9de:	4651      	mov	r1, sl
 800f9e0:	f7f0 fc74 	bl	80002cc <__adddf3>
 800f9e4:	3701      	adds	r7, #1
 800f9e6:	4681      	mov	r9, r0
 800f9e8:	468a      	mov	sl, r1
 800f9ea:	e7e8      	b.n	800f9be <__kernel_rem_pio2+0x8e>
 800f9ec:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 800f9f0:	3601      	adds	r6, #1
 800f9f2:	e7d4      	b.n	800f99e <__kernel_rem_pio2+0x6e>
 800f9f4:	9b02      	ldr	r3, [sp, #8]
 800f9f6:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f9fa:	aa0c      	add	r2, sp, #48	; 0x30
 800f9fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa00:	930a      	str	r3, [sp, #40]	; 0x28
 800fa02:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800fa04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fa08:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa0a:	ab98      	add	r3, sp, #608	; 0x260
 800fa0c:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 800fa10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa14:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa18:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fa1c:	aa98      	add	r2, sp, #608	; 0x260
 800fa1e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fa22:	eb02 0903 	add.w	r9, r2, r3
 800fa26:	9308      	str	r3, [sp, #32]
 800fa28:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800fa2c:	f04f 0a00 	mov.w	sl, #0
 800fa30:	ebca 030b 	rsb	r3, sl, fp
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	dd25      	ble.n	800fa84 <__kernel_rem_pio2+0x154>
 800fa38:	2200      	movs	r2, #0
 800fa3a:	4b7c      	ldr	r3, [pc, #496]	; (800fc2c <__kernel_rem_pio2+0x2fc>)
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	4639      	mov	r1, r7
 800fa40:	f7f0 fdf6 	bl	8000630 <__aeabi_dmul>
 800fa44:	f7f1 f8a4 	bl	8000b90 <__aeabi_d2iz>
 800fa48:	f7f0 fd8c 	bl	8000564 <__aeabi_i2d>
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	4b78      	ldr	r3, [pc, #480]	; (800fc30 <__kernel_rem_pio2+0x300>)
 800fa50:	4604      	mov	r4, r0
 800fa52:	460d      	mov	r5, r1
 800fa54:	f7f0 fdec 	bl	8000630 <__aeabi_dmul>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4639      	mov	r1, r7
 800fa60:	f7f0 fc32 	bl	80002c8 <__aeabi_dsub>
 800fa64:	f7f1 f894 	bl	8000b90 <__aeabi_d2iz>
 800fa68:	ab0c      	add	r3, sp, #48	; 0x30
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800fa70:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800fa74:	4620      	mov	r0, r4
 800fa76:	f7f0 fc29 	bl	80002cc <__adddf3>
 800fa7a:	f10a 0a01 	add.w	sl, sl, #1
 800fa7e:	4606      	mov	r6, r0
 800fa80:	460f      	mov	r7, r1
 800fa82:	e7d5      	b.n	800fa30 <__kernel_rem_pio2+0x100>
 800fa84:	ec47 6b10 	vmov	d0, r6, r7
 800fa88:	4640      	mov	r0, r8
 800fa8a:	f000 fd91 	bl	80105b0 <scalbn>
 800fa8e:	ec55 4b10 	vmov	r4, r5, d0
 800fa92:	2200      	movs	r2, #0
 800fa94:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fa98:	ee10 0a10 	vmov	r0, s0
 800fa9c:	4629      	mov	r1, r5
 800fa9e:	f7f0 fdc7 	bl	8000630 <__aeabi_dmul>
 800faa2:	ec41 0b10 	vmov	d0, r0, r1
 800faa6:	f000 fcfb 	bl	80104a0 <floor>
 800faaa:	2200      	movs	r2, #0
 800faac:	ec51 0b10 	vmov	r0, r1, d0
 800fab0:	4b60      	ldr	r3, [pc, #384]	; (800fc34 <__kernel_rem_pio2+0x304>)
 800fab2:	f7f0 fdbd 	bl	8000630 <__aeabi_dmul>
 800fab6:	4602      	mov	r2, r0
 800fab8:	460b      	mov	r3, r1
 800faba:	4620      	mov	r0, r4
 800fabc:	4629      	mov	r1, r5
 800fabe:	f7f0 fc03 	bl	80002c8 <__aeabi_dsub>
 800fac2:	460d      	mov	r5, r1
 800fac4:	4604      	mov	r4, r0
 800fac6:	f7f1 f863 	bl	8000b90 <__aeabi_d2iz>
 800faca:	9004      	str	r0, [sp, #16]
 800facc:	f7f0 fd4a 	bl	8000564 <__aeabi_i2d>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4620      	mov	r0, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7f0 fbf6 	bl	80002c8 <__aeabi_dsub>
 800fadc:	f1b8 0f00 	cmp.w	r8, #0
 800fae0:	4606      	mov	r6, r0
 800fae2:	460f      	mov	r7, r1
 800fae4:	dd15      	ble.n	800fb12 <__kernel_rem_pio2+0x1e2>
 800fae6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800faea:	ab0c      	add	r3, sp, #48	; 0x30
 800faec:	f1c8 0018 	rsb	r0, r8, #24
 800faf0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800faf4:	9c04      	ldr	r4, [sp, #16]
 800faf6:	fa42 f300 	asr.w	r3, r2, r0
 800fafa:	441c      	add	r4, r3
 800fafc:	4083      	lsls	r3, r0
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	aa0c      	add	r2, sp, #48	; 0x30
 800fb02:	f1c8 0017 	rsb	r0, r8, #23
 800fb06:	9404      	str	r4, [sp, #16]
 800fb08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fb0c:	fa43 fa00 	asr.w	sl, r3, r0
 800fb10:	e00f      	b.n	800fb32 <__kernel_rem_pio2+0x202>
 800fb12:	d107      	bne.n	800fb24 <__kernel_rem_pio2+0x1f4>
 800fb14:	f10b 33ff 	add.w	r3, fp, #4294967295
 800fb18:	aa0c      	add	r2, sp, #48	; 0x30
 800fb1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb1e:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 800fb22:	e006      	b.n	800fb32 <__kernel_rem_pio2+0x202>
 800fb24:	2200      	movs	r2, #0
 800fb26:	4b44      	ldr	r3, [pc, #272]	; (800fc38 <__kernel_rem_pio2+0x308>)
 800fb28:	f7f1 f808 	bl	8000b3c <__aeabi_dcmpge>
 800fb2c:	b928      	cbnz	r0, 800fb3a <__kernel_rem_pio2+0x20a>
 800fb2e:	4682      	mov	sl, r0
 800fb30:	e052      	b.n	800fbd8 <__kernel_rem_pio2+0x2a8>
 800fb32:	f1ba 0f00 	cmp.w	sl, #0
 800fb36:	dc02      	bgt.n	800fb3e <__kernel_rem_pio2+0x20e>
 800fb38:	e04e      	b.n	800fbd8 <__kernel_rem_pio2+0x2a8>
 800fb3a:	f04f 0a02 	mov.w	sl, #2
 800fb3e:	9b04      	ldr	r3, [sp, #16]
 800fb40:	2200      	movs	r2, #0
 800fb42:	3301      	adds	r3, #1
 800fb44:	9304      	str	r3, [sp, #16]
 800fb46:	4614      	mov	r4, r2
 800fb48:	4593      	cmp	fp, r2
 800fb4a:	dd11      	ble.n	800fb70 <__kernel_rem_pio2+0x240>
 800fb4c:	ab0c      	add	r3, sp, #48	; 0x30
 800fb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb52:	b91c      	cbnz	r4, 800fb5c <__kernel_rem_pio2+0x22c>
 800fb54:	b153      	cbz	r3, 800fb6c <__kernel_rem_pio2+0x23c>
 800fb56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fb5a:	e003      	b.n	800fb64 <__kernel_rem_pio2+0x234>
 800fb5c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 800fb60:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800fb64:	a90c      	add	r1, sp, #48	; 0x30
 800fb66:	2401      	movs	r4, #1
 800fb68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fb6c:	3201      	adds	r2, #1
 800fb6e:	e7eb      	b.n	800fb48 <__kernel_rem_pio2+0x218>
 800fb70:	f1b8 0f00 	cmp.w	r8, #0
 800fb74:	dd17      	ble.n	800fba6 <__kernel_rem_pio2+0x276>
 800fb76:	f1b8 0f01 	cmp.w	r8, #1
 800fb7a:	d00a      	beq.n	800fb92 <__kernel_rem_pio2+0x262>
 800fb7c:	f1b8 0f02 	cmp.w	r8, #2
 800fb80:	d111      	bne.n	800fba6 <__kernel_rem_pio2+0x276>
 800fb82:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fb86:	ab0c      	add	r3, sp, #48	; 0x30
 800fb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fb90:	e006      	b.n	800fba0 <__kernel_rem_pio2+0x270>
 800fb92:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fb96:	ab0c      	add	r3, sp, #48	; 0x30
 800fb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fba0:	a90c      	add	r1, sp, #48	; 0x30
 800fba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fba6:	f1ba 0f02 	cmp.w	sl, #2
 800fbaa:	d115      	bne.n	800fbd8 <__kernel_rem_pio2+0x2a8>
 800fbac:	4632      	mov	r2, r6
 800fbae:	463b      	mov	r3, r7
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	4922      	ldr	r1, [pc, #136]	; (800fc3c <__kernel_rem_pio2+0x30c>)
 800fbb4:	f7f0 fb88 	bl	80002c8 <__aeabi_dsub>
 800fbb8:	4606      	mov	r6, r0
 800fbba:	460f      	mov	r7, r1
 800fbbc:	b164      	cbz	r4, 800fbd8 <__kernel_rem_pio2+0x2a8>
 800fbbe:	4640      	mov	r0, r8
 800fbc0:	ed9f 0b17 	vldr	d0, [pc, #92]	; 800fc20 <__kernel_rem_pio2+0x2f0>
 800fbc4:	f000 fcf4 	bl	80105b0 <scalbn>
 800fbc8:	4630      	mov	r0, r6
 800fbca:	4639      	mov	r1, r7
 800fbcc:	ec53 2b10 	vmov	r2, r3, d0
 800fbd0:	f7f0 fb7a 	bl	80002c8 <__aeabi_dsub>
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	460f      	mov	r7, r1
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2300      	movs	r3, #0
 800fbdc:	4630      	mov	r0, r6
 800fbde:	4639      	mov	r1, r7
 800fbe0:	f7f0 ff8e 	bl	8000b00 <__aeabi_dcmpeq>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d074      	beq.n	800fcd2 <__kernel_rem_pio2+0x3a2>
 800fbe8:	f10b 31ff 	add.w	r1, fp, #4294967295
 800fbec:	460b      	mov	r3, r1
 800fbee:	2200      	movs	r2, #0
 800fbf0:	9802      	ldr	r0, [sp, #8]
 800fbf2:	4283      	cmp	r3, r0
 800fbf4:	db05      	blt.n	800fc02 <__kernel_rem_pio2+0x2d2>
 800fbf6:	a80c      	add	r0, sp, #48	; 0x30
 800fbf8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	4302      	orrs	r2, r0
 800fc00:	e7f6      	b.n	800fbf0 <__kernel_rem_pio2+0x2c0>
 800fc02:	2a00      	cmp	r2, #0
 800fc04:	d158      	bne.n	800fcb8 <__kernel_rem_pio2+0x388>
 800fc06:	2301      	movs	r3, #1
 800fc08:	f06f 0103 	mvn.w	r1, #3
 800fc0c:	fb01 f203 	mul.w	r2, r1, r3
 800fc10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc12:	5882      	ldr	r2, [r0, r2]
 800fc14:	b9a2      	cbnz	r2, 800fc40 <__kernel_rem_pio2+0x310>
 800fc16:	3301      	adds	r3, #1
 800fc18:	e7f8      	b.n	800fc0c <__kernel_rem_pio2+0x2dc>
 800fc1a:	bf00      	nop
 800fc1c:	f3af 8000 	nop.w
 800fc20:	00000000 	.word	0x00000000
 800fc24:	3ff00000 	.word	0x3ff00000
 800fc28:	08011e44 	.word	0x08011e44
 800fc2c:	3e700000 	.word	0x3e700000
 800fc30:	41700000 	.word	0x41700000
 800fc34:	40200000 	.word	0x40200000
 800fc38:	3fe00000 	.word	0x3fe00000
 800fc3c:	3ff00000 	.word	0x3ff00000
 800fc40:	9a08      	ldr	r2, [sp, #32]
 800fc42:	a998      	add	r1, sp, #608	; 0x260
 800fc44:	440a      	add	r2, r1
 800fc46:	3a98      	subs	r2, #152	; 0x98
 800fc48:	9204      	str	r2, [sp, #16]
 800fc4a:	9a06      	ldr	r2, [sp, #24]
 800fc4c:	445b      	add	r3, fp
 800fc4e:	eb02 050b 	add.w	r5, r2, fp
 800fc52:	aa20      	add	r2, sp, #128	; 0x80
 800fc54:	f10b 0601 	add.w	r6, fp, #1
 800fc58:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fc5c:	9308      	str	r3, [sp, #32]
 800fc5e:	9b08      	ldr	r3, [sp, #32]
 800fc60:	429e      	cmp	r6, r3
 800fc62:	dc27      	bgt.n	800fcb4 <__kernel_rem_pio2+0x384>
 800fc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fc6a:	f7f0 fc7b 	bl	8000564 <__aeabi_i2d>
 800fc6e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc74:	46a9      	mov	r9, r5
 800fc76:	461c      	mov	r4, r3
 800fc78:	2700      	movs	r7, #0
 800fc7a:	f04f 0a00 	mov.w	sl, #0
 800fc7e:	f04f 0b00 	mov.w	fp, #0
 800fc82:	9b05      	ldr	r3, [sp, #20]
 800fc84:	429f      	cmp	r7, r3
 800fc86:	dc0f      	bgt.n	800fca8 <__kernel_rem_pio2+0x378>
 800fc88:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800fc8c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fc90:	f7f0 fcce 	bl	8000630 <__aeabi_dmul>
 800fc94:	4602      	mov	r2, r0
 800fc96:	460b      	mov	r3, r1
 800fc98:	4650      	mov	r0, sl
 800fc9a:	4659      	mov	r1, fp
 800fc9c:	f7f0 fb16 	bl	80002cc <__adddf3>
 800fca0:	3701      	adds	r7, #1
 800fca2:	4682      	mov	sl, r0
 800fca4:	468b      	mov	fp, r1
 800fca6:	e7ec      	b.n	800fc82 <__kernel_rem_pio2+0x352>
 800fca8:	9b04      	ldr	r3, [sp, #16]
 800fcaa:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 800fcae:	3601      	adds	r6, #1
 800fcb0:	9304      	str	r3, [sp, #16]
 800fcb2:	e7d4      	b.n	800fc5e <__kernel_rem_pio2+0x32e>
 800fcb4:	469b      	mov	fp, r3
 800fcb6:	e6a8      	b.n	800fa0a <__kernel_rem_pio2+0xda>
 800fcb8:	f1a8 0818 	sub.w	r8, r8, #24
 800fcbc:	468b      	mov	fp, r1
 800fcbe:	ab0c      	add	r3, sp, #48	; 0x30
 800fcc0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d13c      	bne.n	800fd42 <__kernel_rem_pio2+0x412>
 800fcc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fccc:	f1a8 0818 	sub.w	r8, r8, #24
 800fcd0:	e7f5      	b.n	800fcbe <__kernel_rem_pio2+0x38e>
 800fcd2:	f1c8 0000 	rsb	r0, r8, #0
 800fcd6:	ec47 6b10 	vmov	d0, r6, r7
 800fcda:	f000 fc69 	bl	80105b0 <scalbn>
 800fcde:	ec55 4b10 	vmov	r4, r5, d0
 800fce2:	2200      	movs	r2, #0
 800fce4:	4bb6      	ldr	r3, [pc, #728]	; (800ffc0 <__kernel_rem_pio2+0x690>)
 800fce6:	ee10 0a10 	vmov	r0, s0
 800fcea:	4629      	mov	r1, r5
 800fcec:	f7f0 ff26 	bl	8000b3c <__aeabi_dcmpge>
 800fcf0:	b300      	cbz	r0, 800fd34 <__kernel_rem_pio2+0x404>
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	4bb3      	ldr	r3, [pc, #716]	; (800ffc4 <__kernel_rem_pio2+0x694>)
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	f7f0 fc99 	bl	8000630 <__aeabi_dmul>
 800fcfe:	f7f0 ff47 	bl	8000b90 <__aeabi_d2iz>
 800fd02:	4606      	mov	r6, r0
 800fd04:	f7f0 fc2e 	bl	8000564 <__aeabi_i2d>
 800fd08:	2200      	movs	r2, #0
 800fd0a:	4bad      	ldr	r3, [pc, #692]	; (800ffc0 <__kernel_rem_pio2+0x690>)
 800fd0c:	f7f0 fc90 	bl	8000630 <__aeabi_dmul>
 800fd10:	460b      	mov	r3, r1
 800fd12:	4602      	mov	r2, r0
 800fd14:	4629      	mov	r1, r5
 800fd16:	4620      	mov	r0, r4
 800fd18:	f7f0 fad6 	bl	80002c8 <__aeabi_dsub>
 800fd1c:	f7f0 ff38 	bl	8000b90 <__aeabi_d2iz>
 800fd20:	ab0c      	add	r3, sp, #48	; 0x30
 800fd22:	f108 0818 	add.w	r8, r8, #24
 800fd26:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800fd2a:	f10b 0b01 	add.w	fp, fp, #1
 800fd2e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800fd32:	e006      	b.n	800fd42 <__kernel_rem_pio2+0x412>
 800fd34:	4620      	mov	r0, r4
 800fd36:	4629      	mov	r1, r5
 800fd38:	f7f0 ff2a 	bl	8000b90 <__aeabi_d2iz>
 800fd3c:	ab0c      	add	r3, sp, #48	; 0x30
 800fd3e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800fd42:	4640      	mov	r0, r8
 800fd44:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 800ffb0 <__kernel_rem_pio2+0x680>
 800fd48:	f000 fc32 	bl	80105b0 <scalbn>
 800fd4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fd50:	9305      	str	r3, [sp, #20]
 800fd52:	9a05      	ldr	r2, [sp, #20]
 800fd54:	ab98      	add	r3, sp, #608	; 0x260
 800fd56:	189f      	adds	r7, r3, r2
 800fd58:	ec55 4b10 	vmov	r4, r5, d0
 800fd5c:	3f98      	subs	r7, #152	; 0x98
 800fd5e:	465e      	mov	r6, fp
 800fd60:	2e00      	cmp	r6, #0
 800fd62:	db14      	blt.n	800fd8e <__kernel_rem_pio2+0x45e>
 800fd64:	ab0c      	add	r3, sp, #48	; 0x30
 800fd66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fd6a:	f7f0 fbfb 	bl	8000564 <__aeabi_i2d>
 800fd6e:	4622      	mov	r2, r4
 800fd70:	462b      	mov	r3, r5
 800fd72:	f7f0 fc5d 	bl	8000630 <__aeabi_dmul>
 800fd76:	2200      	movs	r2, #0
 800fd78:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800fd7c:	4b91      	ldr	r3, [pc, #580]	; (800ffc4 <__kernel_rem_pio2+0x694>)
 800fd7e:	4620      	mov	r0, r4
 800fd80:	4629      	mov	r1, r5
 800fd82:	f7f0 fc55 	bl	8000630 <__aeabi_dmul>
 800fd86:	3e01      	subs	r6, #1
 800fd88:	4604      	mov	r4, r0
 800fd8a:	460d      	mov	r5, r1
 800fd8c:	e7e8      	b.n	800fd60 <__kernel_rem_pio2+0x430>
 800fd8e:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 800fd92:	2400      	movs	r4, #0
 800fd94:	4645      	mov	r5, r8
 800fd96:	ebbb 0704 	subs.w	r7, fp, r4
 800fd9a:	d424      	bmi.n	800fde6 <__kernel_rem_pio2+0x4b6>
 800fd9c:	ed9f 7b86 	vldr	d7, [pc, #536]	; 800ffb8 <__kernel_rem_pio2+0x688>
 800fda0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fda4:	ab70      	add	r3, sp, #448	; 0x1c0
 800fda6:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800ffc8 <__kernel_rem_pio2+0x698>
 800fdaa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fdae:	2600      	movs	r6, #0
 800fdb0:	9b02      	ldr	r3, [sp, #8]
 800fdb2:	429e      	cmp	r6, r3
 800fdb4:	dc11      	bgt.n	800fdda <__kernel_rem_pio2+0x4aa>
 800fdb6:	42a6      	cmp	r6, r4
 800fdb8:	dc0f      	bgt.n	800fdda <__kernel_rem_pio2+0x4aa>
 800fdba:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 800fdbe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fdc2:	f7f0 fc35 	bl	8000630 <__aeabi_dmul>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdce:	f7f0 fa7d 	bl	80002cc <__adddf3>
 800fdd2:	3601      	adds	r6, #1
 800fdd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fdd8:	e7ea      	b.n	800fdb0 <__kernel_rem_pio2+0x480>
 800fdda:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fdde:	3401      	adds	r4, #1
 800fde0:	eca8 7b02 	vstmia	r8!, {d7}
 800fde4:	e7d7      	b.n	800fd96 <__kernel_rem_pio2+0x466>
 800fde6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	f200 80d8 	bhi.w	800ff9e <__kernel_rem_pio2+0x66e>
 800fdee:	e8df f003 	tbb	[pc, r3]
 800fdf2:	0810      	.short	0x0810
 800fdf4:	0208      	.short	0x0208
 800fdf6:	9a05      	ldr	r2, [sp, #20]
 800fdf8:	ab48      	add	r3, sp, #288	; 0x120
 800fdfa:	189c      	adds	r4, r3, r2
 800fdfc:	46a0      	mov	r8, r4
 800fdfe:	46d9      	mov	r9, fp
 800fe00:	e056      	b.n	800feb0 <__kernel_rem_pio2+0x580>
 800fe02:	9c05      	ldr	r4, [sp, #20]
 800fe04:	ab48      	add	r3, sp, #288	; 0x120
 800fe06:	3408      	adds	r4, #8
 800fe08:	441c      	add	r4, r3
 800fe0a:	465d      	mov	r5, fp
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	2100      	movs	r1, #0
 800fe10:	e01d      	b.n	800fe4e <__kernel_rem_pio2+0x51e>
 800fe12:	9b05      	ldr	r3, [sp, #20]
 800fe14:	aa98      	add	r2, sp, #608	; 0x260
 800fe16:	4413      	add	r3, r2
 800fe18:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	2100      	movs	r1, #0
 800fe20:	f1bb 0f00 	cmp.w	fp, #0
 800fe24:	db06      	blt.n	800fe34 <__kernel_rem_pio2+0x504>
 800fe26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe2a:	f7f0 fa4f 	bl	80002cc <__adddf3>
 800fe2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe32:	e7f5      	b.n	800fe20 <__kernel_rem_pio2+0x4f0>
 800fe34:	f1ba 0f00 	cmp.w	sl, #0
 800fe38:	d003      	beq.n	800fe42 <__kernel_rem_pio2+0x512>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe40:	e001      	b.n	800fe46 <__kernel_rem_pio2+0x516>
 800fe42:	4602      	mov	r2, r0
 800fe44:	460b      	mov	r3, r1
 800fe46:	9901      	ldr	r1, [sp, #4]
 800fe48:	e9c1 2300 	strd	r2, r3, [r1]
 800fe4c:	e0a7      	b.n	800ff9e <__kernel_rem_pio2+0x66e>
 800fe4e:	2d00      	cmp	r5, #0
 800fe50:	db05      	blt.n	800fe5e <__kernel_rem_pio2+0x52e>
 800fe52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe56:	f7f0 fa39 	bl	80002cc <__adddf3>
 800fe5a:	3d01      	subs	r5, #1
 800fe5c:	e7f7      	b.n	800fe4e <__kernel_rem_pio2+0x51e>
 800fe5e:	f1ba 0f00 	cmp.w	sl, #0
 800fe62:	d003      	beq.n	800fe6c <__kernel_rem_pio2+0x53c>
 800fe64:	4602      	mov	r2, r0
 800fe66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe6a:	e001      	b.n	800fe70 <__kernel_rem_pio2+0x540>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	9c01      	ldr	r4, [sp, #4]
 800fe72:	e9c4 2300 	strd	r2, r3, [r4]
 800fe76:	4602      	mov	r2, r0
 800fe78:	460b      	mov	r3, r1
 800fe7a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800fe7e:	f7f0 fa23 	bl	80002c8 <__aeabi_dsub>
 800fe82:	ad4a      	add	r5, sp, #296	; 0x128
 800fe84:	2401      	movs	r4, #1
 800fe86:	45a3      	cmp	fp, r4
 800fe88:	db05      	blt.n	800fe96 <__kernel_rem_pio2+0x566>
 800fe8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fe8e:	f7f0 fa1d 	bl	80002cc <__adddf3>
 800fe92:	3401      	adds	r4, #1
 800fe94:	e7f7      	b.n	800fe86 <__kernel_rem_pio2+0x556>
 800fe96:	f1ba 0f00 	cmp.w	sl, #0
 800fe9a:	d003      	beq.n	800fea4 <__kernel_rem_pio2+0x574>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fea2:	e001      	b.n	800fea8 <__kernel_rem_pio2+0x578>
 800fea4:	4602      	mov	r2, r0
 800fea6:	460b      	mov	r3, r1
 800fea8:	9901      	ldr	r1, [sp, #4]
 800feaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800feae:	e076      	b.n	800ff9e <__kernel_rem_pio2+0x66e>
 800feb0:	f1b9 0f00 	cmp.w	r9, #0
 800feb4:	dd20      	ble.n	800fef8 <__kernel_rem_pio2+0x5c8>
 800feb6:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 800feba:	ed98 7b02 	vldr	d7, [r8, #8]
 800febe:	4630      	mov	r0, r6
 800fec0:	ec53 2b17 	vmov	r2, r3, d7
 800fec4:	4639      	mov	r1, r7
 800fec6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800feca:	f7f0 f9ff 	bl	80002cc <__adddf3>
 800fece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fed2:	4602      	mov	r2, r0
 800fed4:	460b      	mov	r3, r1
 800fed6:	4630      	mov	r0, r6
 800fed8:	4639      	mov	r1, r7
 800feda:	f7f0 f9f5 	bl	80002c8 <__aeabi_dsub>
 800fede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fee2:	f7f0 f9f3 	bl	80002cc <__adddf3>
 800fee6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800feea:	f109 39ff 	add.w	r9, r9, #4294967295
 800feee:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800fef2:	ed88 7b00 	vstr	d7, [r8]
 800fef6:	e7db      	b.n	800feb0 <__kernel_rem_pio2+0x580>
 800fef8:	465e      	mov	r6, fp
 800fefa:	2e01      	cmp	r6, #1
 800fefc:	dd1f      	ble.n	800ff3e <__kernel_rem_pio2+0x60e>
 800fefe:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 800ff02:	ed94 7b02 	vldr	d7, [r4, #8]
 800ff06:	4640      	mov	r0, r8
 800ff08:	ec53 2b17 	vmov	r2, r3, d7
 800ff0c:	4649      	mov	r1, r9
 800ff0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff12:	f7f0 f9db 	bl	80002cc <__adddf3>
 800ff16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4640      	mov	r0, r8
 800ff20:	4649      	mov	r1, r9
 800ff22:	f7f0 f9d1 	bl	80002c8 <__aeabi_dsub>
 800ff26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff2a:	f7f0 f9cf 	bl	80002cc <__adddf3>
 800ff2e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ff32:	3e01      	subs	r6, #1
 800ff34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff38:	ed84 7b00 	vstr	d7, [r4]
 800ff3c:	e7dd      	b.n	800fefa <__kernel_rem_pio2+0x5ca>
 800ff3e:	9c05      	ldr	r4, [sp, #20]
 800ff40:	ab48      	add	r3, sp, #288	; 0x120
 800ff42:	3408      	adds	r4, #8
 800ff44:	441c      	add	r4, r3
 800ff46:	2000      	movs	r0, #0
 800ff48:	2100      	movs	r1, #0
 800ff4a:	f1bb 0f01 	cmp.w	fp, #1
 800ff4e:	dd06      	ble.n	800ff5e <__kernel_rem_pio2+0x62e>
 800ff50:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff54:	f7f0 f9ba 	bl	80002cc <__adddf3>
 800ff58:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff5c:	e7f5      	b.n	800ff4a <__kernel_rem_pio2+0x61a>
 800ff5e:	f1ba 0f00 	cmp.w	sl, #0
 800ff62:	d10b      	bne.n	800ff7c <__kernel_rem_pio2+0x64c>
 800ff64:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800ff68:	9c01      	ldr	r4, [sp, #4]
 800ff6a:	e9c4 2300 	strd	r2, r3, [r4]
 800ff6e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800ff72:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800ff76:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ff7a:	e010      	b.n	800ff9e <__kernel_rem_pio2+0x66e>
 800ff7c:	9a01      	ldr	r2, [sp, #4]
 800ff7e:	682b      	ldr	r3, [r5, #0]
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	686b      	ldr	r3, [r5, #4]
 800ff84:	6110      	str	r0, [r2, #16]
 800ff86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff8a:	6053      	str	r3, [r2, #4]
 800ff8c:	68ab      	ldr	r3, [r5, #8]
 800ff8e:	6093      	str	r3, [r2, #8]
 800ff90:	68eb      	ldr	r3, [r5, #12]
 800ff92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff96:	60d3      	str	r3, [r2, #12]
 800ff98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff9c:	6153      	str	r3, [r2, #20]
 800ff9e:	9b04      	ldr	r3, [sp, #16]
 800ffa0:	f003 0007 	and.w	r0, r3, #7
 800ffa4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffac:	f3af 8000 	nop.w
 800ffb0:	00000000 	.word	0x00000000
 800ffb4:	3ff00000 	.word	0x3ff00000
	...
 800ffc0:	41700000 	.word	0x41700000
 800ffc4:	3e700000 	.word	0x3e700000
 800ffc8:	08011e58 	.word	0x08011e58
 800ffcc:	00000000 	.word	0x00000000

0800ffd0 <__kernel_sin>:
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	ec55 4b10 	vmov	r4, r5, d0
 800ffd8:	b085      	sub	sp, #20
 800ffda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ffde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ffe2:	ed8d 1b00 	vstr	d1, [sp]
 800ffe6:	9002      	str	r0, [sp, #8]
 800ffe8:	da07      	bge.n	800fffa <__kernel_sin+0x2a>
 800ffea:	ee10 0a10 	vmov	r0, s0
 800ffee:	4629      	mov	r1, r5
 800fff0:	f7f0 fdce 	bl	8000b90 <__aeabi_d2iz>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	f000 8081 	beq.w	80100fc <__kernel_sin+0x12c>
 800fffa:	4622      	mov	r2, r4
 800fffc:	462b      	mov	r3, r5
 800fffe:	4620      	mov	r0, r4
 8010000:	4629      	mov	r1, r5
 8010002:	f7f0 fb15 	bl	8000630 <__aeabi_dmul>
 8010006:	4682      	mov	sl, r0
 8010008:	468b      	mov	fp, r1
 801000a:	4602      	mov	r2, r0
 801000c:	460b      	mov	r3, r1
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 fb0d 	bl	8000630 <__aeabi_dmul>
 8010016:	a341      	add	r3, pc, #260	; (adr r3, 801011c <__kernel_sin+0x14c>)
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	4680      	mov	r8, r0
 801001e:	4689      	mov	r9, r1
 8010020:	4650      	mov	r0, sl
 8010022:	4659      	mov	r1, fp
 8010024:	f7f0 fb04 	bl	8000630 <__aeabi_dmul>
 8010028:	a33e      	add	r3, pc, #248	; (adr r3, 8010124 <__kernel_sin+0x154>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	f7f0 f94b 	bl	80002c8 <__aeabi_dsub>
 8010032:	4652      	mov	r2, sl
 8010034:	465b      	mov	r3, fp
 8010036:	f7f0 fafb 	bl	8000630 <__aeabi_dmul>
 801003a:	a33c      	add	r3, pc, #240	; (adr r3, 801012c <__kernel_sin+0x15c>)
 801003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010040:	f7f0 f944 	bl	80002cc <__adddf3>
 8010044:	4652      	mov	r2, sl
 8010046:	465b      	mov	r3, fp
 8010048:	f7f0 faf2 	bl	8000630 <__aeabi_dmul>
 801004c:	a339      	add	r3, pc, #228	; (adr r3, 8010134 <__kernel_sin+0x164>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	f7f0 f939 	bl	80002c8 <__aeabi_dsub>
 8010056:	4652      	mov	r2, sl
 8010058:	465b      	mov	r3, fp
 801005a:	f7f0 fae9 	bl	8000630 <__aeabi_dmul>
 801005e:	a337      	add	r3, pc, #220	; (adr r3, 801013c <__kernel_sin+0x16c>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f7f0 f932 	bl	80002cc <__adddf3>
 8010068:	9b02      	ldr	r3, [sp, #8]
 801006a:	4606      	mov	r6, r0
 801006c:	460f      	mov	r7, r1
 801006e:	b99b      	cbnz	r3, 8010098 <__kernel_sin+0xc8>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	4650      	mov	r0, sl
 8010076:	4659      	mov	r1, fp
 8010078:	f7f0 fada 	bl	8000630 <__aeabi_dmul>
 801007c:	a324      	add	r3, pc, #144	; (adr r3, 8010110 <__kernel_sin+0x140>)
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	f7f0 f921 	bl	80002c8 <__aeabi_dsub>
 8010086:	4642      	mov	r2, r8
 8010088:	464b      	mov	r3, r9
 801008a:	f7f0 fad1 	bl	8000630 <__aeabi_dmul>
 801008e:	4622      	mov	r2, r4
 8010090:	462b      	mov	r3, r5
 8010092:	f7f0 f91b 	bl	80002cc <__adddf3>
 8010096:	e033      	b.n	8010100 <__kernel_sin+0x130>
 8010098:	2200      	movs	r2, #0
 801009a:	4b1f      	ldr	r3, [pc, #124]	; (8010118 <__kernel_sin+0x148>)
 801009c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100a0:	f7f0 fac6 	bl	8000630 <__aeabi_dmul>
 80100a4:	4632      	mov	r2, r6
 80100a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100aa:	463b      	mov	r3, r7
 80100ac:	4640      	mov	r0, r8
 80100ae:	4649      	mov	r1, r9
 80100b0:	f7f0 fabe 	bl	8000630 <__aeabi_dmul>
 80100b4:	4602      	mov	r2, r0
 80100b6:	460b      	mov	r3, r1
 80100b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100bc:	f7f0 f904 	bl	80002c8 <__aeabi_dsub>
 80100c0:	4652      	mov	r2, sl
 80100c2:	465b      	mov	r3, fp
 80100c4:	f7f0 fab4 	bl	8000630 <__aeabi_dmul>
 80100c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100cc:	f7f0 f8fc 	bl	80002c8 <__aeabi_dsub>
 80100d0:	a30f      	add	r3, pc, #60	; (adr r3, 8010110 <__kernel_sin+0x140>)
 80100d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d6:	4606      	mov	r6, r0
 80100d8:	460f      	mov	r7, r1
 80100da:	4640      	mov	r0, r8
 80100dc:	4649      	mov	r1, r9
 80100de:	f7f0 faa7 	bl	8000630 <__aeabi_dmul>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	4630      	mov	r0, r6
 80100e8:	4639      	mov	r1, r7
 80100ea:	f7f0 f8ef 	bl	80002cc <__adddf3>
 80100ee:	4602      	mov	r2, r0
 80100f0:	460b      	mov	r3, r1
 80100f2:	4620      	mov	r0, r4
 80100f4:	4629      	mov	r1, r5
 80100f6:	f7f0 f8e7 	bl	80002c8 <__aeabi_dsub>
 80100fa:	e001      	b.n	8010100 <__kernel_sin+0x130>
 80100fc:	4620      	mov	r0, r4
 80100fe:	4629      	mov	r1, r5
 8010100:	ec41 0b10 	vmov	d0, r0, r1
 8010104:	b005      	add	sp, #20
 8010106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010a:	bf00      	nop
 801010c:	f3af 8000 	nop.w
 8010110:	55555549 	.word	0x55555549
 8010114:	3fc55555 	.word	0x3fc55555
 8010118:	3fe00000 	.word	0x3fe00000
 801011c:	5acfd57c 	.word	0x5acfd57c
 8010120:	3de5d93a 	.word	0x3de5d93a
 8010124:	8a2b9ceb 	.word	0x8a2b9ceb
 8010128:	3e5ae5e6 	.word	0x3e5ae5e6
 801012c:	57b1fe7d 	.word	0x57b1fe7d
 8010130:	3ec71de3 	.word	0x3ec71de3
 8010134:	19c161d5 	.word	0x19c161d5
 8010138:	3f2a01a0 	.word	0x3f2a01a0
 801013c:	1110f8a6 	.word	0x1110f8a6
 8010140:	3f811111 	.word	0x3f811111
 8010144:	00000000 	.word	0x00000000

08010148 <atan>:
 8010148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	ec55 4b10 	vmov	r4, r5, d0
 8010150:	4bc5      	ldr	r3, [pc, #788]	; (8010468 <atan+0x320>)
 8010152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010156:	429e      	cmp	r6, r3
 8010158:	46ab      	mov	fp, r5
 801015a:	dd13      	ble.n	8010184 <atan+0x3c>
 801015c:	4ac3      	ldr	r2, [pc, #780]	; (801046c <atan+0x324>)
 801015e:	4296      	cmp	r6, r2
 8010160:	dc01      	bgt.n	8010166 <atan+0x1e>
 8010162:	d107      	bne.n	8010174 <atan+0x2c>
 8010164:	b134      	cbz	r4, 8010174 <atan+0x2c>
 8010166:	4622      	mov	r2, r4
 8010168:	462b      	mov	r3, r5
 801016a:	4620      	mov	r0, r4
 801016c:	4629      	mov	r1, r5
 801016e:	f7f0 f8ad 	bl	80002cc <__adddf3>
 8010172:	e13c      	b.n	80103ee <atan+0x2a6>
 8010174:	f1bb 0f00 	cmp.w	fp, #0
 8010178:	f300 8133 	bgt.w	80103e2 <atan+0x29a>
 801017c:	a19e      	add	r1, pc, #632	; (adr r1, 80103f8 <atan+0x2b0>)
 801017e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010182:	e134      	b.n	80103ee <atan+0x2a6>
 8010184:	4bba      	ldr	r3, [pc, #744]	; (8010470 <atan+0x328>)
 8010186:	429e      	cmp	r6, r3
 8010188:	dc14      	bgt.n	80101b4 <atan+0x6c>
 801018a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801018e:	429e      	cmp	r6, r3
 8010190:	f300 8082 	bgt.w	8010298 <atan+0x150>
 8010194:	a39a      	add	r3, pc, #616	; (adr r3, 8010400 <atan+0x2b8>)
 8010196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019a:	ee10 0a10 	vmov	r0, s0
 801019e:	4629      	mov	r1, r5
 80101a0:	f7f0 f894 	bl	80002cc <__adddf3>
 80101a4:	2200      	movs	r2, #0
 80101a6:	4bb3      	ldr	r3, [pc, #716]	; (8010474 <atan+0x32c>)
 80101a8:	f7f0 fcd2 	bl	8000b50 <__aeabi_dcmpgt>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	f040 811c 	bne.w	80103ea <atan+0x2a2>
 80101b2:	e071      	b.n	8010298 <atan+0x150>
 80101b4:	f000 f96c 	bl	8010490 <fabs>
 80101b8:	4baf      	ldr	r3, [pc, #700]	; (8010478 <atan+0x330>)
 80101ba:	429e      	cmp	r6, r3
 80101bc:	ec55 4b10 	vmov	r4, r5, d0
 80101c0:	dc3d      	bgt.n	801023e <atan+0xf6>
 80101c2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80101c6:	429e      	cmp	r6, r3
 80101c8:	dc1f      	bgt.n	801020a <atan+0xc2>
 80101ca:	ee10 2a10 	vmov	r2, s0
 80101ce:	ee10 0a10 	vmov	r0, s0
 80101d2:	462b      	mov	r3, r5
 80101d4:	4629      	mov	r1, r5
 80101d6:	f7f0 f879 	bl	80002cc <__adddf3>
 80101da:	2200      	movs	r2, #0
 80101dc:	4ba5      	ldr	r3, [pc, #660]	; (8010474 <atan+0x32c>)
 80101de:	f7f0 f873 	bl	80002c8 <__aeabi_dsub>
 80101e2:	2200      	movs	r2, #0
 80101e4:	4606      	mov	r6, r0
 80101e6:	460f      	mov	r7, r1
 80101e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101ec:	4620      	mov	r0, r4
 80101ee:	4629      	mov	r1, r5
 80101f0:	f7f0 f86c 	bl	80002cc <__adddf3>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	4630      	mov	r0, r6
 80101fa:	4639      	mov	r1, r7
 80101fc:	f7f0 fb42 	bl	8000884 <__aeabi_ddiv>
 8010200:	f04f 0a00 	mov.w	sl, #0
 8010204:	4604      	mov	r4, r0
 8010206:	460d      	mov	r5, r1
 8010208:	e048      	b.n	801029c <atan+0x154>
 801020a:	ee10 0a10 	vmov	r0, s0
 801020e:	2200      	movs	r2, #0
 8010210:	4b98      	ldr	r3, [pc, #608]	; (8010474 <atan+0x32c>)
 8010212:	4629      	mov	r1, r5
 8010214:	f7f0 f858 	bl	80002c8 <__aeabi_dsub>
 8010218:	2200      	movs	r2, #0
 801021a:	4606      	mov	r6, r0
 801021c:	460f      	mov	r7, r1
 801021e:	4b95      	ldr	r3, [pc, #596]	; (8010474 <atan+0x32c>)
 8010220:	4620      	mov	r0, r4
 8010222:	4629      	mov	r1, r5
 8010224:	f7f0 f852 	bl	80002cc <__adddf3>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	4630      	mov	r0, r6
 801022e:	4639      	mov	r1, r7
 8010230:	f7f0 fb28 	bl	8000884 <__aeabi_ddiv>
 8010234:	f04f 0a01 	mov.w	sl, #1
 8010238:	4604      	mov	r4, r0
 801023a:	460d      	mov	r5, r1
 801023c:	e02e      	b.n	801029c <atan+0x154>
 801023e:	4b8f      	ldr	r3, [pc, #572]	; (801047c <atan+0x334>)
 8010240:	429e      	cmp	r6, r3
 8010242:	dc1d      	bgt.n	8010280 <atan+0x138>
 8010244:	ee10 0a10 	vmov	r0, s0
 8010248:	2200      	movs	r2, #0
 801024a:	4b8d      	ldr	r3, [pc, #564]	; (8010480 <atan+0x338>)
 801024c:	4629      	mov	r1, r5
 801024e:	f7f0 f83b 	bl	80002c8 <__aeabi_dsub>
 8010252:	2200      	movs	r2, #0
 8010254:	4606      	mov	r6, r0
 8010256:	460f      	mov	r7, r1
 8010258:	4b89      	ldr	r3, [pc, #548]	; (8010480 <atan+0x338>)
 801025a:	4620      	mov	r0, r4
 801025c:	4629      	mov	r1, r5
 801025e:	f7f0 f9e7 	bl	8000630 <__aeabi_dmul>
 8010262:	2200      	movs	r2, #0
 8010264:	4b83      	ldr	r3, [pc, #524]	; (8010474 <atan+0x32c>)
 8010266:	f7f0 f831 	bl	80002cc <__adddf3>
 801026a:	4602      	mov	r2, r0
 801026c:	460b      	mov	r3, r1
 801026e:	4630      	mov	r0, r6
 8010270:	4639      	mov	r1, r7
 8010272:	f7f0 fb07 	bl	8000884 <__aeabi_ddiv>
 8010276:	f04f 0a02 	mov.w	sl, #2
 801027a:	4604      	mov	r4, r0
 801027c:	460d      	mov	r5, r1
 801027e:	e00d      	b.n	801029c <atan+0x154>
 8010280:	462b      	mov	r3, r5
 8010282:	ee10 2a10 	vmov	r2, s0
 8010286:	2000      	movs	r0, #0
 8010288:	497e      	ldr	r1, [pc, #504]	; (8010484 <atan+0x33c>)
 801028a:	f7f0 fafb 	bl	8000884 <__aeabi_ddiv>
 801028e:	f04f 0a03 	mov.w	sl, #3
 8010292:	4604      	mov	r4, r0
 8010294:	460d      	mov	r5, r1
 8010296:	e001      	b.n	801029c <atan+0x154>
 8010298:	f04f 3aff 	mov.w	sl, #4294967295
 801029c:	4622      	mov	r2, r4
 801029e:	462b      	mov	r3, r5
 80102a0:	4620      	mov	r0, r4
 80102a2:	4629      	mov	r1, r5
 80102a4:	f7f0 f9c4 	bl	8000630 <__aeabi_dmul>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4680      	mov	r8, r0
 80102ae:	4689      	mov	r9, r1
 80102b0:	f7f0 f9be 	bl	8000630 <__aeabi_dmul>
 80102b4:	a354      	add	r3, pc, #336	; (adr r3, 8010408 <atan+0x2c0>)
 80102b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ba:	4606      	mov	r6, r0
 80102bc:	460f      	mov	r7, r1
 80102be:	f7f0 f9b7 	bl	8000630 <__aeabi_dmul>
 80102c2:	a353      	add	r3, pc, #332	; (adr r3, 8010410 <atan+0x2c8>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	f7f0 f800 	bl	80002cc <__adddf3>
 80102cc:	4632      	mov	r2, r6
 80102ce:	463b      	mov	r3, r7
 80102d0:	f7f0 f9ae 	bl	8000630 <__aeabi_dmul>
 80102d4:	a350      	add	r3, pc, #320	; (adr r3, 8010418 <atan+0x2d0>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	f7ef fff7 	bl	80002cc <__adddf3>
 80102de:	4632      	mov	r2, r6
 80102e0:	463b      	mov	r3, r7
 80102e2:	f7f0 f9a5 	bl	8000630 <__aeabi_dmul>
 80102e6:	a34e      	add	r3, pc, #312	; (adr r3, 8010420 <atan+0x2d8>)
 80102e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ec:	f7ef ffee 	bl	80002cc <__adddf3>
 80102f0:	4632      	mov	r2, r6
 80102f2:	463b      	mov	r3, r7
 80102f4:	f7f0 f99c 	bl	8000630 <__aeabi_dmul>
 80102f8:	a34b      	add	r3, pc, #300	; (adr r3, 8010428 <atan+0x2e0>)
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	f7ef ffe5 	bl	80002cc <__adddf3>
 8010302:	4632      	mov	r2, r6
 8010304:	463b      	mov	r3, r7
 8010306:	f7f0 f993 	bl	8000630 <__aeabi_dmul>
 801030a:	a349      	add	r3, pc, #292	; (adr r3, 8010430 <atan+0x2e8>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	f7ef ffdc 	bl	80002cc <__adddf3>
 8010314:	4642      	mov	r2, r8
 8010316:	464b      	mov	r3, r9
 8010318:	f7f0 f98a 	bl	8000630 <__aeabi_dmul>
 801031c:	a346      	add	r3, pc, #280	; (adr r3, 8010438 <atan+0x2f0>)
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	4680      	mov	r8, r0
 8010324:	4689      	mov	r9, r1
 8010326:	4630      	mov	r0, r6
 8010328:	4639      	mov	r1, r7
 801032a:	f7f0 f981 	bl	8000630 <__aeabi_dmul>
 801032e:	a344      	add	r3, pc, #272	; (adr r3, 8010440 <atan+0x2f8>)
 8010330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010334:	f7ef ffc8 	bl	80002c8 <__aeabi_dsub>
 8010338:	4632      	mov	r2, r6
 801033a:	463b      	mov	r3, r7
 801033c:	f7f0 f978 	bl	8000630 <__aeabi_dmul>
 8010340:	a341      	add	r3, pc, #260	; (adr r3, 8010448 <atan+0x300>)
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	f7ef ffbf 	bl	80002c8 <__aeabi_dsub>
 801034a:	4632      	mov	r2, r6
 801034c:	463b      	mov	r3, r7
 801034e:	f7f0 f96f 	bl	8000630 <__aeabi_dmul>
 8010352:	a33f      	add	r3, pc, #252	; (adr r3, 8010450 <atan+0x308>)
 8010354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010358:	f7ef ffb6 	bl	80002c8 <__aeabi_dsub>
 801035c:	4632      	mov	r2, r6
 801035e:	463b      	mov	r3, r7
 8010360:	f7f0 f966 	bl	8000630 <__aeabi_dmul>
 8010364:	a33c      	add	r3, pc, #240	; (adr r3, 8010458 <atan+0x310>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	f7ef ffad 	bl	80002c8 <__aeabi_dsub>
 801036e:	4632      	mov	r2, r6
 8010370:	463b      	mov	r3, r7
 8010372:	f7f0 f95d 	bl	8000630 <__aeabi_dmul>
 8010376:	f1ba 3fff 	cmp.w	sl, #4294967295
 801037a:	4602      	mov	r2, r0
 801037c:	460b      	mov	r3, r1
 801037e:	d10e      	bne.n	801039e <atan+0x256>
 8010380:	4640      	mov	r0, r8
 8010382:	4649      	mov	r1, r9
 8010384:	f7ef ffa2 	bl	80002cc <__adddf3>
 8010388:	4622      	mov	r2, r4
 801038a:	462b      	mov	r3, r5
 801038c:	f7f0 f950 	bl	8000630 <__aeabi_dmul>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4620      	mov	r0, r4
 8010396:	4629      	mov	r1, r5
 8010398:	f7ef ff96 	bl	80002c8 <__aeabi_dsub>
 801039c:	e027      	b.n	80103ee <atan+0x2a6>
 801039e:	4640      	mov	r0, r8
 80103a0:	4649      	mov	r1, r9
 80103a2:	f7ef ff93 	bl	80002cc <__adddf3>
 80103a6:	4622      	mov	r2, r4
 80103a8:	462b      	mov	r3, r5
 80103aa:	f7f0 f941 	bl	8000630 <__aeabi_dmul>
 80103ae:	4e36      	ldr	r6, [pc, #216]	; (8010488 <atan+0x340>)
 80103b0:	4b36      	ldr	r3, [pc, #216]	; (801048c <atan+0x344>)
 80103b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80103b6:	4456      	add	r6, sl
 80103b8:	449a      	add	sl, r3
 80103ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80103be:	f7ef ff83 	bl	80002c8 <__aeabi_dsub>
 80103c2:	4622      	mov	r2, r4
 80103c4:	462b      	mov	r3, r5
 80103c6:	f7ef ff7f 	bl	80002c8 <__aeabi_dsub>
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80103d2:	f7ef ff79 	bl	80002c8 <__aeabi_dsub>
 80103d6:	f1bb 0f00 	cmp.w	fp, #0
 80103da:	da08      	bge.n	80103ee <atan+0x2a6>
 80103dc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80103e0:	e005      	b.n	80103ee <atan+0x2a6>
 80103e2:	a11f      	add	r1, pc, #124	; (adr r1, 8010460 <atan+0x318>)
 80103e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103e8:	e001      	b.n	80103ee <atan+0x2a6>
 80103ea:	4620      	mov	r0, r4
 80103ec:	4629      	mov	r1, r5
 80103ee:	ec41 0b10 	vmov	d0, r0, r1
 80103f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	bf00      	nop
 80103f8:	54442d18 	.word	0x54442d18
 80103fc:	bff921fb 	.word	0xbff921fb
 8010400:	8800759c 	.word	0x8800759c
 8010404:	7e37e43c 	.word	0x7e37e43c
 8010408:	e322da11 	.word	0xe322da11
 801040c:	3f90ad3a 	.word	0x3f90ad3a
 8010410:	24760deb 	.word	0x24760deb
 8010414:	3fa97b4b 	.word	0x3fa97b4b
 8010418:	a0d03d51 	.word	0xa0d03d51
 801041c:	3fb10d66 	.word	0x3fb10d66
 8010420:	c54c206e 	.word	0xc54c206e
 8010424:	3fb745cd 	.word	0x3fb745cd
 8010428:	920083ff 	.word	0x920083ff
 801042c:	3fc24924 	.word	0x3fc24924
 8010430:	5555550d 	.word	0x5555550d
 8010434:	3fd55555 	.word	0x3fd55555
 8010438:	2c6a6c2f 	.word	0x2c6a6c2f
 801043c:	bfa2b444 	.word	0xbfa2b444
 8010440:	52defd9a 	.word	0x52defd9a
 8010444:	3fadde2d 	.word	0x3fadde2d
 8010448:	af749a6d 	.word	0xaf749a6d
 801044c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010450:	fe231671 	.word	0xfe231671
 8010454:	3fbc71c6 	.word	0x3fbc71c6
 8010458:	9998ebc4 	.word	0x9998ebc4
 801045c:	3fc99999 	.word	0x3fc99999
 8010460:	54442d18 	.word	0x54442d18
 8010464:	3ff921fb 	.word	0x3ff921fb
 8010468:	440fffff 	.word	0x440fffff
 801046c:	7ff00000 	.word	0x7ff00000
 8010470:	3fdbffff 	.word	0x3fdbffff
 8010474:	3ff00000 	.word	0x3ff00000
 8010478:	3ff2ffff 	.word	0x3ff2ffff
 801047c:	40037fff 	.word	0x40037fff
 8010480:	3ff80000 	.word	0x3ff80000
 8010484:	bff00000 	.word	0xbff00000
 8010488:	08011eb8 	.word	0x08011eb8
 801048c:	08011e98 	.word	0x08011e98

08010490 <fabs>:
 8010490:	ec53 2b10 	vmov	r2, r3, d0
 8010494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010498:	ec43 2b10 	vmov	d0, r2, r3
 801049c:	4770      	bx	lr
	...

080104a0 <floor>:
 80104a0:	ec51 0b10 	vmov	r0, r1, d0
 80104a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80104ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80104b0:	2e13      	cmp	r6, #19
 80104b2:	ee10 8a10 	vmov	r8, s0
 80104b6:	460c      	mov	r4, r1
 80104b8:	ee10 5a10 	vmov	r5, s0
 80104bc:	dc33      	bgt.n	8010526 <floor+0x86>
 80104be:	2e00      	cmp	r6, #0
 80104c0:	da16      	bge.n	80104f0 <floor+0x50>
 80104c2:	a335      	add	r3, pc, #212	; (adr r3, 8010598 <floor+0xf8>)
 80104c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c8:	f7ef ff00 	bl	80002cc <__adddf3>
 80104cc:	2200      	movs	r2, #0
 80104ce:	2300      	movs	r3, #0
 80104d0:	f7f0 fb3e 	bl	8000b50 <__aeabi_dcmpgt>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d057      	beq.n	8010588 <floor+0xe8>
 80104d8:	2c00      	cmp	r4, #0
 80104da:	da53      	bge.n	8010584 <floor+0xe4>
 80104dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80104e0:	ea53 0308 	orrs.w	r3, r3, r8
 80104e4:	4b2e      	ldr	r3, [pc, #184]	; (80105a0 <floor+0x100>)
 80104e6:	f04f 0500 	mov.w	r5, #0
 80104ea:	bf18      	it	ne
 80104ec:	461c      	movne	r4, r3
 80104ee:	e04b      	b.n	8010588 <floor+0xe8>
 80104f0:	4f2c      	ldr	r7, [pc, #176]	; (80105a4 <floor+0x104>)
 80104f2:	4137      	asrs	r7, r6
 80104f4:	ea01 0307 	and.w	r3, r1, r7
 80104f8:	4303      	orrs	r3, r0
 80104fa:	d047      	beq.n	801058c <floor+0xec>
 80104fc:	a326      	add	r3, pc, #152	; (adr r3, 8010598 <floor+0xf8>)
 80104fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010502:	f7ef fee3 	bl	80002cc <__adddf3>
 8010506:	2200      	movs	r2, #0
 8010508:	2300      	movs	r3, #0
 801050a:	f7f0 fb21 	bl	8000b50 <__aeabi_dcmpgt>
 801050e:	b3d8      	cbz	r0, 8010588 <floor+0xe8>
 8010510:	2c00      	cmp	r4, #0
 8010512:	bfbe      	ittt	lt
 8010514:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010518:	fa43 f606 	asrlt.w	r6, r3, r6
 801051c:	19a4      	addlt	r4, r4, r6
 801051e:	ea24 0407 	bic.w	r4, r4, r7
 8010522:	2500      	movs	r5, #0
 8010524:	e030      	b.n	8010588 <floor+0xe8>
 8010526:	2e33      	cmp	r6, #51	; 0x33
 8010528:	dd08      	ble.n	801053c <floor+0x9c>
 801052a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801052e:	d12d      	bne.n	801058c <floor+0xec>
 8010530:	ee10 2a10 	vmov	r2, s0
 8010534:	460b      	mov	r3, r1
 8010536:	f7ef fec9 	bl	80002cc <__adddf3>
 801053a:	e027      	b.n	801058c <floor+0xec>
 801053c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010540:	f04f 33ff 	mov.w	r3, #4294967295
 8010544:	fa23 f707 	lsr.w	r7, r3, r7
 8010548:	4238      	tst	r0, r7
 801054a:	d01f      	beq.n	801058c <floor+0xec>
 801054c:	a312      	add	r3, pc, #72	; (adr r3, 8010598 <floor+0xf8>)
 801054e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010552:	f7ef febb 	bl	80002cc <__adddf3>
 8010556:	2200      	movs	r2, #0
 8010558:	2300      	movs	r3, #0
 801055a:	f7f0 faf9 	bl	8000b50 <__aeabi_dcmpgt>
 801055e:	b198      	cbz	r0, 8010588 <floor+0xe8>
 8010560:	2c00      	cmp	r4, #0
 8010562:	da0c      	bge.n	801057e <floor+0xde>
 8010564:	2e14      	cmp	r6, #20
 8010566:	d101      	bne.n	801056c <floor+0xcc>
 8010568:	3401      	adds	r4, #1
 801056a:	e008      	b.n	801057e <floor+0xde>
 801056c:	2301      	movs	r3, #1
 801056e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010572:	fa03 f606 	lsl.w	r6, r3, r6
 8010576:	4435      	add	r5, r6
 8010578:	45a8      	cmp	r8, r5
 801057a:	bf88      	it	hi
 801057c:	18e4      	addhi	r4, r4, r3
 801057e:	ea25 0507 	bic.w	r5, r5, r7
 8010582:	e001      	b.n	8010588 <floor+0xe8>
 8010584:	2500      	movs	r5, #0
 8010586:	462c      	mov	r4, r5
 8010588:	4621      	mov	r1, r4
 801058a:	4628      	mov	r0, r5
 801058c:	ec41 0b10 	vmov	d0, r0, r1
 8010590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010594:	f3af 8000 	nop.w
 8010598:	8800759c 	.word	0x8800759c
 801059c:	7e37e43c 	.word	0x7e37e43c
 80105a0:	bff00000 	.word	0xbff00000
 80105a4:	000fffff 	.word	0x000fffff

080105a8 <matherr>:
 80105a8:	2000      	movs	r0, #0
 80105aa:	4770      	bx	lr
 80105ac:	0000      	movs	r0, r0
	...

080105b0 <scalbn>:
 80105b0:	b570      	push	{r4, r5, r6, lr}
 80105b2:	ec55 4b10 	vmov	r4, r5, d0
 80105b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80105ba:	4606      	mov	r6, r0
 80105bc:	462b      	mov	r3, r5
 80105be:	b9a2      	cbnz	r2, 80105ea <scalbn+0x3a>
 80105c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80105c4:	4323      	orrs	r3, r4
 80105c6:	d059      	beq.n	801067c <scalbn+0xcc>
 80105c8:	2200      	movs	r2, #0
 80105ca:	4b33      	ldr	r3, [pc, #204]	; (8010698 <scalbn+0xe8>)
 80105cc:	4629      	mov	r1, r5
 80105ce:	ee10 0a10 	vmov	r0, s0
 80105d2:	f7f0 f82d 	bl	8000630 <__aeabi_dmul>
 80105d6:	4a31      	ldr	r2, [pc, #196]	; (801069c <scalbn+0xec>)
 80105d8:	4296      	cmp	r6, r2
 80105da:	4604      	mov	r4, r0
 80105dc:	460d      	mov	r5, r1
 80105de:	460b      	mov	r3, r1
 80105e0:	da0f      	bge.n	8010602 <scalbn+0x52>
 80105e2:	a329      	add	r3, pc, #164	; (adr r3, 8010688 <scalbn+0xd8>)
 80105e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e8:	e045      	b.n	8010676 <scalbn+0xc6>
 80105ea:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80105ee:	428a      	cmp	r2, r1
 80105f0:	d10a      	bne.n	8010608 <scalbn+0x58>
 80105f2:	ee10 2a10 	vmov	r2, s0
 80105f6:	462b      	mov	r3, r5
 80105f8:	4620      	mov	r0, r4
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7ef fe66 	bl	80002cc <__adddf3>
 8010600:	e03e      	b.n	8010680 <scalbn+0xd0>
 8010602:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010606:	3a36      	subs	r2, #54	; 0x36
 8010608:	4432      	add	r2, r6
 801060a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801060e:	428a      	cmp	r2, r1
 8010610:	dd02      	ble.n	8010618 <scalbn+0x68>
 8010612:	ec45 4b11 	vmov	d1, r4, r5
 8010616:	e011      	b.n	801063c <scalbn+0x8c>
 8010618:	2a00      	cmp	r2, #0
 801061a:	dd06      	ble.n	801062a <scalbn+0x7a>
 801061c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010620:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010628:	e028      	b.n	801067c <scalbn+0xcc>
 801062a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801062e:	da17      	bge.n	8010660 <scalbn+0xb0>
 8010630:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010634:	429e      	cmp	r6, r3
 8010636:	ec45 4b11 	vmov	d1, r4, r5
 801063a:	dd07      	ble.n	801064c <scalbn+0x9c>
 801063c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8010690 <scalbn+0xe0>
 8010640:	f000 f830 	bl	80106a4 <copysign>
 8010644:	a312      	add	r3, pc, #72	; (adr r3, 8010690 <scalbn+0xe0>)
 8010646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064a:	e006      	b.n	801065a <scalbn+0xaa>
 801064c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010688 <scalbn+0xd8>
 8010650:	f000 f828 	bl	80106a4 <copysign>
 8010654:	a30c      	add	r3, pc, #48	; (adr r3, 8010688 <scalbn+0xd8>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	ec51 0b10 	vmov	r0, r1, d0
 801065e:	e00a      	b.n	8010676 <scalbn+0xc6>
 8010660:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010664:	3236      	adds	r2, #54	; 0x36
 8010666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801066a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801066e:	4b0c      	ldr	r3, [pc, #48]	; (80106a0 <scalbn+0xf0>)
 8010670:	4620      	mov	r0, r4
 8010672:	4629      	mov	r1, r5
 8010674:	2200      	movs	r2, #0
 8010676:	f7ef ffdb 	bl	8000630 <__aeabi_dmul>
 801067a:	e001      	b.n	8010680 <scalbn+0xd0>
 801067c:	4620      	mov	r0, r4
 801067e:	4629      	mov	r1, r5
 8010680:	ec41 0b10 	vmov	d0, r0, r1
 8010684:	bd70      	pop	{r4, r5, r6, pc}
 8010686:	bf00      	nop
 8010688:	c2f8f359 	.word	0xc2f8f359
 801068c:	01a56e1f 	.word	0x01a56e1f
 8010690:	8800759c 	.word	0x8800759c
 8010694:	7e37e43c 	.word	0x7e37e43c
 8010698:	43500000 	.word	0x43500000
 801069c:	ffff3cb0 	.word	0xffff3cb0
 80106a0:	3c900000 	.word	0x3c900000

080106a4 <copysign>:
 80106a4:	ec53 2b10 	vmov	r2, r3, d0
 80106a8:	ee11 0a90 	vmov	r0, s3
 80106ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80106b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80106b4:	ea41 0300 	orr.w	r3, r1, r0
 80106b8:	ec43 2b10 	vmov	d0, r2, r3
 80106bc:	4770      	bx	lr
	...

080106c0 <_init>:
 80106c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106c2:	bf00      	nop
 80106c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106c6:	bc08      	pop	{r3}
 80106c8:	469e      	mov	lr, r3
 80106ca:	4770      	bx	lr

080106cc <_fini>:
 80106cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ce:	bf00      	nop
 80106d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106d2:	bc08      	pop	{r3}
 80106d4:	469e      	mov	lr, r3
 80106d6:	4770      	bx	lr
