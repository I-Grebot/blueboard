
BlueBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a8  080109b0  080109b0  000209b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011e58  08011e58  00021e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011e60  08011e60  00021e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011e64  08011e64  00021e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000059c  20010000  08011e68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  0003059c  2**0
                  CONTENTS
  8 .sram2        00000000  2004c000  2004c000  0003059c  2**0
                  CONTENTS
  9 .bss          00004380  200105a0  200105a0  000305a0  2**3
                  ALLOC
 10 ._user_heap_stack 00001100  20014920  20014920  000305a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003059c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017179  00000000  00000000  000305cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000451b  00000000  00000000  00047745  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d88  00000000  00000000  0004bc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a98  00000000  00000000  0004d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c867  00000000  00000000  0004f480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007e7e  00000000  00000000  0005bce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00063b65  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008c24  00000000  00000000  00063be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200105a0 	.word	0x200105a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010998 	.word	0x08010998

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200105a4 	.word	0x200105a4
 800020c:	08010998 	.word	0x08010998

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97e 	b.w	8000f94 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460e      	mov	r6, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9d08      	ldr	r5, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d150      	bne.n	8000d62 <__udivmoddi4+0xb2>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96c      	bls.n	8000da0 <__udivmoddi4+0xf0>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0420 	rsb	r4, lr, #32
 8000cd4:	fa20 f404 	lsr.w	r4, r0, r4
 8000cd8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000cdc:	ea44 0c06 	orr.w	ip, r4, r6
 8000ce0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	fbbc f0f9 	udiv	r0, ip, r9
 8000cf2:	fa1f f887 	uxth.w	r8, r7
 8000cf6:	fb09 c610 	mls	r6, r9, r0, ip
 8000cfa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cfe:	fb00 f308 	mul.w	r3, r0, r8
 8000d02:	42b3      	cmp	r3, r6
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x6a>
 8000d06:	19f6      	adds	r6, r6, r7
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 8122 	bcs.w	8000f54 <__udivmoddi4+0x2a4>
 8000d10:	42b3      	cmp	r3, r6
 8000d12:	f240 811f 	bls.w	8000f54 <__udivmoddi4+0x2a4>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443e      	add	r6, r7
 8000d1a:	1af6      	subs	r6, r6, r3
 8000d1c:	b2a2      	uxth	r2, r4
 8000d1e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d22:	fb09 6613 	mls	r6, r9, r3, r6
 8000d26:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d2a:	fb03 f808 	mul.w	r8, r3, r8
 8000d2e:	45a0      	cmp	r8, r4
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x96>
 8000d32:	19e4      	adds	r4, r4, r7
 8000d34:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x2a0>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x2a0>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ebc8 0404 	rsb	r4, r8, r4
 8000d4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d062      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d54:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d58:	2300      	movs	r3, #0
 8000d5a:	602c      	str	r4, [r5, #0]
 8000d5c:	606b      	str	r3, [r5, #4]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0xc6>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d055      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d70:	4608      	mov	r0, r1
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	f040 8090 	bne.w	8000ea0 <__udivmoddi4+0x1f0>
 8000d80:	42b3      	cmp	r3, r6
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xda>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	46b4      	mov	ip, r6
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d040      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	b912      	cbnz	r2, 8000da8 <__udivmoddi4+0xf8>
 8000da2:	2701      	movs	r7, #1
 8000da4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000da8:	fab7 fe87 	clz	lr, r7
 8000dac:	f1be 0f00 	cmp.w	lr, #0
 8000db0:	d135      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db2:	1bf3      	subs	r3, r6, r7
 8000db4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc2:	0c22      	lsrs	r2, r4, #16
 8000dc4:	fb08 3610 	mls	r6, r8, r0, r3
 8000dc8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dcc:	fb0c f300 	mul.w	r3, ip, r0
 8000dd0:	42b3      	cmp	r3, r6
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19f6      	adds	r6, r6, r7
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42b3      	cmp	r3, r6
 8000dde:	f200 80ce 	bhi.w	8000f7e <__udivmoddi4+0x2ce>
 8000de2:	4610      	mov	r0, r2
 8000de4:	1af6      	subs	r6, r6, r3
 8000de6:	b2a2      	uxth	r2, r4
 8000de8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000dec:	fb08 6613 	mls	r6, r8, r3, r6
 8000df0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000df4:	fb0c fc03 	mul.w	ip, ip, r3
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b5 	bhi.w	8000f74 <__udivmoddi4+0x2c4>
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	ebcc 0404 	rsb	r4, ip, r4
 8000e10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e14:	e79c      	b.n	8000d50 <__udivmoddi4+0xa0>
 8000e16:	4629      	mov	r1, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0120 	rsb	r1, lr, #32
 8000e22:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e32:	40ce      	lsrs	r6, r1
 8000e34:	ea49 0903 	orr.w	r9, r9, r3
 8000e38:	fbb6 faf8 	udiv	sl, r6, r8
 8000e3c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e40:	fb08 661a 	mls	r6, r8, sl, r6
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e4c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e50:	429a      	cmp	r2, r3
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1be>
 8000e58:	19db      	adds	r3, r3, r7
 8000e5a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e5e:	f080 8087 	bcs.w	8000f70 <__udivmoddi4+0x2c0>
 8000e62:	429a      	cmp	r2, r3
 8000e64:	f240 8084 	bls.w	8000f70 <__udivmoddi4+0x2c0>
 8000e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e6c:	443b      	add	r3, r7
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	fa1f f989 	uxth.w	r9, r9
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000e80:	fb01 f60c 	mul.w	r6, r1, ip
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x1e8>
 8000e88:	19db      	adds	r3, r3, r7
 8000e8a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e8e:	d26b      	bcs.n	8000f68 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d969      	bls.n	8000f68 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	443b      	add	r3, r7
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000e9e:	e78e      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000ea0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ea4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	fa20 f70e 	lsr.w	r7, r0, lr
 8000eb0:	fa06 f401 	lsl.w	r4, r6, r1
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ebc:	433c      	orrs	r4, r7
 8000ebe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000ec2:	0c27      	lsrs	r7, r4, #16
 8000ec4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000ec8:	fa1f f883 	uxth.w	r8, r3
 8000ecc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000ed0:	fb09 f708 	mul.w	r7, r9, r8
 8000ed4:	42b7      	cmp	r7, r6
 8000ed6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eda:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x242>
 8000ee0:	18f6      	adds	r6, r6, r3
 8000ee2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee6:	d241      	bcs.n	8000f6c <__udivmoddi4+0x2bc>
 8000ee8:	42b7      	cmp	r7, r6
 8000eea:	d93f      	bls.n	8000f6c <__udivmoddi4+0x2bc>
 8000eec:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef0:	441e      	add	r6, r3
 8000ef2:	1bf6      	subs	r6, r6, r7
 8000ef4:	b2a0      	uxth	r0, r4
 8000ef6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000efa:	fb0c 6614 	mls	r6, ip, r4, r6
 8000efe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f02:	fb04 f808 	mul.w	r8, r4, r8
 8000f06:	45b8      	cmp	r8, r7
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x26a>
 8000f0a:	18ff      	adds	r7, r7, r3
 8000f0c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f10:	d228      	bcs.n	8000f64 <__udivmoddi4+0x2b4>
 8000f12:	45b8      	cmp	r8, r7
 8000f14:	d926      	bls.n	8000f64 <__udivmoddi4+0x2b4>
 8000f16:	3c02      	subs	r4, #2
 8000f18:	441f      	add	r7, r3
 8000f1a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f1e:	ebc8 0707 	rsb	r7, r8, r7
 8000f22:	fba0 8902 	umull	r8, r9, r0, r2
 8000f26:	454f      	cmp	r7, r9
 8000f28:	4644      	mov	r4, r8
 8000f2a:	464e      	mov	r6, r9
 8000f2c:	d314      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2e:	d029      	beq.n	8000f84 <__udivmoddi4+0x2d4>
 8000f30:	b365      	cbz	r5, 8000f8c <__udivmoddi4+0x2dc>
 8000f32:	ebba 0304 	subs.w	r3, sl, r4
 8000f36:	eb67 0706 	sbc.w	r7, r7, r6
 8000f3a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f3e:	40cb      	lsrs	r3, r1
 8000f40:	40cf      	lsrs	r7, r1
 8000f42:	ea4e 0303 	orr.w	r3, lr, r3
 8000f46:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f50:	4613      	mov	r3, r2
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x96>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e6e0      	b.n	8000d1a <__udivmoddi4+0x6a>
 8000f58:	ebb8 0402 	subs.w	r4, r8, r2
 8000f5c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7e5      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f64:	4604      	mov	r4, r0
 8000f66:	e7d8      	b.n	8000f1a <__udivmoddi4+0x26a>
 8000f68:	4611      	mov	r1, r2
 8000f6a:	e795      	b.n	8000e98 <__udivmoddi4+0x1e8>
 8000f6c:	4681      	mov	r9, r0
 8000f6e:	e7c0      	b.n	8000ef2 <__udivmoddi4+0x242>
 8000f70:	468a      	mov	sl, r1
 8000f72:	e77c      	b.n	8000e6e <__udivmoddi4+0x1be>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e748      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xe4>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	443e      	add	r6, r7
 8000f82:	e72f      	b.n	8000de4 <__udivmoddi4+0x134>
 8000f84:	45c2      	cmp	sl, r8
 8000f86:	d3e7      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f88:	463e      	mov	r6, r7
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fa0:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <NVIC_SystemReset+0x20>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <NVIC_SystemReset+0x24>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60cb      	str	r3, [r1, #12]
 8000fb0:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000fb4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 8000fb6:	e7fd      	b.n	8000fb4 <NVIC_SystemReset+0x1c>
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0004 	.word	0x05fa0004

08000fc0 <OS_SHL_RegisterCommands>:
 * -----------------------------------------------------------------------------
 */


void OS_SHL_RegisterCommands( void )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    FreeRTOS_CLIRegisterCommand( &xSys );
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <OS_SHL_RegisterCommands+0x64>)
 8000fc6:	f007 fed5 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xSet );
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <OS_SHL_RegisterCommands+0x68>)
 8000fcc:	f007 fed2 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xGet );
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <OS_SHL_RegisterCommands+0x6c>)
 8000fd2:	f007 fecf 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xSto );
 8000fd6:	4816      	ldr	r0, [pc, #88]	; (8001030 <OS_SHL_RegisterCommands+0x70>)
 8000fd8:	f007 fecc 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xPow );
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <OS_SHL_RegisterCommands+0x74>)
 8000fde:	f007 fec9 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xMot );
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <OS_SHL_RegisterCommands+0x78>)
 8000fe4:	f007 fec6 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xDsv );
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <OS_SHL_RegisterCommands+0x7c>)
 8000fea:	f007 fec3 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAsv );
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <OS_SHL_RegisterCommands+0x80>)
 8000ff0:	f007 fec0 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xMon );
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <OS_SHL_RegisterCommands+0x84>)
 8000ff6:	f007 febd 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xDio );
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <OS_SHL_RegisterCommands+0x88>)
 8000ffc:	f007 feba 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xHmi );
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <OS_SHL_RegisterCommands+0x8c>)
 8001002:	f007 feb7 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xLed );
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <OS_SHL_RegisterCommands+0x90>)
 8001008:	f007 feb4 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAvs );
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <OS_SHL_RegisterCommands+0x94>)
 800100e:	f007 feb1 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAvd );
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <OS_SHL_RegisterCommands+0x98>)
 8001014:	f007 feae 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xStr );
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <OS_SHL_RegisterCommands+0x9c>)
 800101a:	f007 feab 	bl	8008d74 <FreeRTOS_CLIRegisterCommand>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	08011818 	.word	0x08011818
 8001028:	08011828 	.word	0x08011828
 800102c:	08011838 	.word	0x08011838
 8001030:	08011848 	.word	0x08011848
 8001034:	08011858 	.word	0x08011858
 8001038:	08011868 	.word	0x08011868
 800103c:	08011878 	.word	0x08011878
 8001040:	08011888 	.word	0x08011888
 8001044:	08011898 	.word	0x08011898
 8001048:	080118a8 	.word	0x080118a8
 800104c:	080118b8 	.word	0x080118b8
 8001050:	080118c8 	.word	0x080118c8
 8001054:	080118d8 	.word	0x080118d8
 8001058:	080118e8 	.word	0x080118e8
 800105c:	080118f8 	.word	0x080118f8

08001060 <OS_SHL_SysCmd>:
 * Commands functions
 * -----------------------------------------------------------------------------
 */

static BaseType_t OS_SHL_SysCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
    const char *const pcHeader =
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <OS_SHL_SysCmd+0xcc>)
 800106e:	61bb      	str	r3, [r7, #24]

    char* pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	461a      	mov	r2, r3
 8001076:	2101      	movs	r1, #1
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f007 ff43 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 800107e:	6178      	str	r0, [r7, #20]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	461a      	mov	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

    /* 'RESET' Sub-command: reset the microcontroller */
    if(!strcasecmp(pcParameter1, "reset")) {
 800108c:	4928      	ldr	r1, [pc, #160]	; (8001130 <OS_SHL_SysCmd+0xd0>)
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f009 fb3e 	bl	800a710 <strcasecmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d108      	bne.n	80010ac <OS_SHL_SysCmd+0x4c>
        snprintf( pcWriteBuffer, xWriteBufferLen, "Resetting..."SHELL_EOL);
 800109a:	4a26      	ldr	r2, [pc, #152]	; (8001134 <OS_SHL_SysCmd+0xd4>)
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f009 fae0 	bl	800a664 <snprintf>
        NVIC_SystemReset(); /* Auto-kill */
 80010a4:	f7ff ff78 	bl	8000f98 <NVIC_SystemReset>
        return pdFALSE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e03b      	b.n	8001124 <OS_SHL_SysCmd+0xc4>

    /* 'TASKS' Sub-command: display tasks informations */
    } else if(!strcasecmp(pcParameter1, "tasks")) {
 80010ac:	4922      	ldr	r1, [pc, #136]	; (8001138 <OS_SHL_SysCmd+0xd8>)
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f009 fb2e 	bl	800a710 <strcasecmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12d      	bne.n	8001116 <OS_SHL_SysCmd+0xb6>

        /* Generate a table of task stats. */
        strcpy( pcWriteBuffer, "Task" );
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <OS_SHL_SysCmd+0xdc>)
 80010be:	6810      	ldr	r0, [r2, #0]
 80010c0:	6018      	str	r0, [r3, #0]
 80010c2:	7912      	ldrb	r2, [r2, #4]
 80010c4:	711a      	strb	r2, [r3, #4]
        pcWriteBuffer += strlen( pcWriteBuffer );
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff f8a2 	bl	8000210 <strlen>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

        /* Minus three for the null terminator and half the number of characters in
        "Task" so the column lines up with the centre of the heading. */
        configASSERT( configMAX_TASK_NAME_LEN > 3 );
        for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80010d4:	2304      	movs	r3, #4
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	e00b      	b.n	80010f2 <OS_SHL_SysCmd+0x92>
        {
            /* Add a space to align columns after the task's name. */
            *pcWriteBuffer = ' ';
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2220      	movs	r2, #32
 80010de:	701a      	strb	r2, [r3, #0]
            pcWriteBuffer++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]

            /* Ensure always terminated. */
            *pcWriteBuffer = 0x00;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
        pcWriteBuffer += strlen( pcWriteBuffer );

        /* Minus three for the null terminator and half the number of characters in
        "Task" so the column lines up with the centre of the heading. */
        configASSERT( configMAX_TASK_NAME_LEN > 3 );
        for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	3301      	adds	r3, #1
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	2b0c      	cmp	r3, #12
 80010f6:	ddf0      	ble.n	80010da <OS_SHL_SysCmd+0x7a>
            pcWriteBuffer++;

            /* Ensure always terminated. */
            *pcWriteBuffer = 0x00;
        }
        strcpy( pcWriteBuffer, pcHeader );
 80010f8:	69b9      	ldr	r1, [r7, #24]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f009 fb26 	bl	800a74c <strcpy>
        vTaskList( pcWriteBuffer + strlen( pcHeader ) );
 8001100:	69b8      	ldr	r0, [r7, #24]
 8001102:	f7ff f885 	bl	8000210 <strlen>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f007 fa53 	bl	80085b8 <vTaskList>

        /* There is no more data to return after this single string, so return
        pdFALSE. */
        return pdFALSE;
 8001112:	2300      	movs	r3, #0
 8001114:	e006      	b.n	8001124 <OS_SHL_SysCmd+0xc4>

    /* Error case */
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: unknown system command %s"SHELL_EOL, pcParameter1);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <OS_SHL_SysCmd+0xe0>)
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f009 faa1 	bl	800a664 <snprintf>
        return pdFALSE;
 8001122:	2300      	movs	r3, #0
    }

}
 8001124:	4618      	mov	r0, r3
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	08011168 	.word	0x08011168
 8001130:	080111b4 	.word	0x080111b4
 8001134:	080111bc 	.word	0x080111bc
 8001138:	080111cc 	.word	0x080111cc
 800113c:	080111d4 	.word	0x080111d4
 8001140:	080111dc 	.word	0x080111dc

08001144 <OS_SHL_SetCmd>:

static BaseType_t OS_SHL_SetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <OS_SHL_GetCmd>:

static BaseType_t OS_SHL_GetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    char* pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	461a      	mov	r2, r3
 8001172:	2101      	movs	r1, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f007 fec5 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 800117a:	6178      	str	r0, [r7, #20]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	461a      	mov	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	4413      	add	r3, r2
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

    /* Decode variable path */
    return OS_SHL_GetVariable(pcParameter1, pcWriteBuffer, xWriteBufferLen);
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f000 fa75 	bl	800167c <OS_SHL_GetVariable>
 8001192:	4603      	mov	r3, r0
//        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not get variable %s"SHELL_EOL, pcParameter1);
        //return pdFALSE;


}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <OS_SHL_StoCmd>:

static BaseType_t OS_SHL_StoCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <OS_SHL_PowCmd>:

static BaseType_t OS_SHL_PowCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af02      	add	r7, sp, #8
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    char* pcParameter1;
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;
    uint8_t allSupplies = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HW_PWR_TypeDef powerSupply;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	461a      	mov	r2, r3
 80011d0:	2101      	movs	r1, #1
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f007 fe96 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 80011d8:	6238      	str	r0, [r7, #32]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	461a      	mov	r2, r3
 80011e0:	2102      	movs	r1, #2
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f007 fe8e 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 80011e8:	61f8      	str	r0, [r7, #28]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	461a      	mov	r2, r3
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	4413      	add	r3, r2
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	461a      	mov	r2, r3
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]

    /* Decode <no> argument */
    if(!strcasecmp(pcParameter1, "1")) {
 8001202:	493f      	ldr	r1, [pc, #252]	; (8001300 <OS_SHL_PowCmd+0x148>)
 8001204:	6a38      	ldr	r0, [r7, #32]
 8001206:	f009 fa83 	bl	800a710 <strcasecmp>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d103      	bne.n	8001218 <OS_SHL_PowCmd+0x60>
        powerSupply = HW_PWR_VP1;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001216:	e028      	b.n	800126a <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "2")) {
 8001218:	493a      	ldr	r1, [pc, #232]	; (8001304 <OS_SHL_PowCmd+0x14c>)
 800121a:	6a38      	ldr	r0, [r7, #32]
 800121c:	f009 fa78 	bl	800a710 <strcasecmp>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <OS_SHL_PowCmd+0x76>
        powerSupply = HW_PWR_VP2;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800122c:	e01d      	b.n	800126a <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "3")) {
 800122e:	4936      	ldr	r1, [pc, #216]	; (8001308 <OS_SHL_PowCmd+0x150>)
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f009 fa6d 	bl	800a710 <strcasecmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <OS_SHL_PowCmd+0x8c>
        powerSupply = HW_PWR_VP3;
 800123c:	2302      	movs	r3, #2
 800123e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001242:	e012      	b.n	800126a <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "ALL")) {
 8001244:	4931      	ldr	r1, [pc, #196]	; (800130c <OS_SHL_PowCmd+0x154>)
 8001246:	6a38      	ldr	r0, [r7, #32]
 8001248:	f009 fa62 	bl	800a710 <strcasecmp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <OS_SHL_PowCmd+0xa2>
        allSupplies = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001258:	e007      	b.n	800126a <OS_SHL_PowCmd+0xb2>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not define power-supply no to %s"SHELL_EOL, pcParameter1);
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <OS_SHL_PowCmd+0x158>)
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f009 f9ff 	bl	800a664 <snprintf>
        return pdFALSE;
 8001266:	2300      	movs	r3, #0
 8001268:	e046      	b.n	80012f8 <OS_SHL_PowCmd+0x140>
    }

    /* Decode <state> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 800126a:	492a      	ldr	r1, [pc, #168]	; (8001314 <OS_SHL_PowCmd+0x15c>)
 800126c:	69f8      	ldr	r0, [r7, #28]
 800126e:	f009 fa4f 	bl	800a710 <strcasecmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d113      	bne.n	80012a0 <OS_SHL_PowCmd+0xe8>
        if(!allSupplies) {
 8001278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <OS_SHL_PowCmd+0xd4>
            HW_PWR_Disable(powerSupply);
 8001280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001284:	4618      	mov	r0, r3
 8001286:	f008 ff37 	bl	800a0f8 <HW_PWR_Disable>
 800128a:	e02c      	b.n	80012e6 <OS_SHL_PowCmd+0x12e>
        } else {
            HW_PWR_Disable(HW_PWR_VP1);
 800128c:	2000      	movs	r0, #0
 800128e:	f008 ff33 	bl	800a0f8 <HW_PWR_Disable>
            HW_PWR_Disable(HW_PWR_VP2);
 8001292:	2001      	movs	r0, #1
 8001294:	f008 ff30 	bl	800a0f8 <HW_PWR_Disable>
            HW_PWR_Disable(HW_PWR_VP3);
 8001298:	2002      	movs	r0, #2
 800129a:	f008 ff2d 	bl	800a0f8 <HW_PWR_Disable>
 800129e:	e022      	b.n	80012e6 <OS_SHL_PowCmd+0x12e>
        }
    } else if(!strcasecmp(pcParameter2, "ON")) {
 80012a0:	491d      	ldr	r1, [pc, #116]	; (8001318 <OS_SHL_PowCmd+0x160>)
 80012a2:	69f8      	ldr	r0, [r7, #28]
 80012a4:	f009 fa34 	bl	800a710 <strcasecmp>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d113      	bne.n	80012d6 <OS_SHL_PowCmd+0x11e>
        if(!allSupplies) {
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <OS_SHL_PowCmd+0x10a>
            HW_PWR_Enable(powerSupply);
 80012b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012ba:	4618      	mov	r0, r3
 80012bc:	f008 ff02 	bl	800a0c4 <HW_PWR_Enable>
 80012c0:	e011      	b.n	80012e6 <OS_SHL_PowCmd+0x12e>
        } else {
            HW_PWR_Enable(HW_PWR_VP1);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f008 fefe 	bl	800a0c4 <HW_PWR_Enable>
            HW_PWR_Enable(HW_PWR_VP2);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f008 fefb 	bl	800a0c4 <HW_PWR_Enable>
            HW_PWR_Enable(HW_PWR_VP3);
 80012ce:	2002      	movs	r0, #2
 80012d0:	f008 fef8 	bl	800a0c4 <HW_PWR_Enable>
 80012d4:	e007      	b.n	80012e6 <OS_SHL_PowCmd+0x12e>
        }
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not define power-supply state to %s"SHELL_EOL, pcParameter2);
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <OS_SHL_PowCmd+0x164>)
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f009 f9c1 	bl	800a664 <snprintf>
        return pdFALSE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e008      	b.n	80012f8 <OS_SHL_PowCmd+0x140>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, "Defined power-supply %s to %s"SHELL_EOL, pcParameter1, pcParameter2);
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <OS_SHL_PowCmd+0x168>)
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f009 f9b7 	bl	800a664 <snprintf>
    return pdFALSE;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	08011200 	.word	0x08011200
 8001304:	08011204 	.word	0x08011204
 8001308:	08011208 	.word	0x08011208
 800130c:	0801120c 	.word	0x0801120c
 8001310:	08011210 	.word	0x08011210
 8001314:	08011240 	.word	0x08011240
 8001318:	08011244 	.word	0x08011244
 800131c:	08011248 	.word	0x08011248
 8001320:	0801127c 	.word	0x0801127c

08001324 <OS_SHL_MotCmd>:

// Motor control. Not reentrant function
static BaseType_t OS_SHL_MotCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    /* Note that the use of the static parameter means this function is not reentrant. */
    static BaseType_t lParameterNumber = 0;

        if( lParameterNumber == 0 )
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d115      	bne.n	8001364 <OS_SHL_MotCmd+0x40>
        {
            /* lParameterNumber is 0, so this is the first time the function has been
            called since the command was entered.  Return the string "The parameters
            were:" before returning any parameter strings. */
            sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <OS_SHL_MotCmd+0xc4>)
 800133c:	461c      	mov	r4, r3
 800133e:	4615      	mov	r5, r2
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	6061      	str	r1, [r4, #4]
 8001346:	60a2      	str	r2, [r4, #8]
 8001348:	60e3      	str	r3, [r4, #12]
 800134a:	6828      	ldr	r0, [r5, #0]
 800134c:	6120      	str	r0, [r4, #16]
 800134e:	88ab      	ldrh	r3, [r5, #4]
 8001350:	79aa      	ldrb	r2, [r5, #6]
 8001352:	82a3      	strh	r3, [r4, #20]
 8001354:	4613      	mov	r3, r2
 8001356:	75a3      	strb	r3, [r4, #22]

            /* Next time the function is called the first parameter will be echoed
            back. */
            lParameterNumber = 1L;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

            /* There is more data to be returned as no parameters have been echoed
            back yet, so set xReturn to pdPASS so the function will be called again. */
            xReturn = pdPASS;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e03a      	b.n	80013da <OS_SHL_MotCmd+0xb6>
        }
        else
        {
            /* lParameter is not 0, so holds the number of the parameter that should
            be returned.  Obtain the complete parameter string. */
            pcParameter = FreeRTOS_CLIGetParameter
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	461a      	mov	r2, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f007 fdc7 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 8001376:	61b8      	str	r0, [r7, #24]
                                lParameterNumber,
                                /* Store the parameter string length. */
                                &lParameterStringLength
                            );

            if( pcParameter != NULL )
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d025      	beq.n	80013ca <OS_SHL_MotCmd+0xa6>
            {
                /* There was another parameter to return.  Copy it into pcWriteBuffer.
                in the format "[number]: [Parameter String". */
                memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	2100      	movs	r1, #0
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f009 f8f9 	bl	800a57a <memset>
                sprintf( pcWriteBuffer, "%ld: ", lParameterNumber );
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4917      	ldr	r1, [pc, #92]	; (80013ec <OS_SHL_MotCmd+0xc8>)
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f009 f999 	bl	800a6c8 <sprintf>
                strncat( pcWriteBuffer, pcParameter, lParameterStringLength );
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	461a      	mov	r2, r3
 800139a:	69b9      	ldr	r1, [r7, #24]
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f009 f9dd 	bl	800a75c <strncat>
                strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7fe ff34 	bl	8000210 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <OS_SHL_MotCmd+0xcc>)
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	7892      	ldrb	r2, [r2, #2]
 80013b6:	8019      	strh	r1, [r3, #0]
 80013b8:	709a      	strb	r2, [r3, #2]

                /* There might be more parameters to return after this one, so again
                set xReturn to pdTRUE. */
                xReturn = pdTRUE;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
                lParameterNumber++;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e007      	b.n	80013da <OS_SHL_MotCmd+0xb6>
            }
            else
            {
                /* No more parameters were found.  Make sure the write buffer does
                not contain a valid string to prevent junk being printed out. */
                pcWriteBuffer[ 0 ] = 0x00;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

                /* There is no more data to return, so this time set xReturn to
                pdFALSE. */
                xReturn = pdFALSE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]

                /* Start over the next time this command is executed. */
                lParameterNumber = 0;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <OS_SHL_MotCmd+0xc0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
            }
        }

        return xReturn;
 80013da:	69fb      	ldr	r3, [r7, #28]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	200105bc 	.word	0x200105bc
 80013e8:	0801129c 	.word	0x0801129c
 80013ec:	080112b4 	.word	0x080112b4
 80013f0:	080112bc 	.word	0x080112bc

080013f4 <OS_SHL_DsvCmd>:

static BaseType_t OS_SHL_DsvCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <OS_SHL_AsvCmd>:

static BaseType_t OS_SHL_AsvCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <OS_SHL_MonCmd>:

static BaseType_t OS_SHL_MonCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <OS_SHL_DioCmd>:

static BaseType_t OS_SHL_DioCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <OS_SHL_HmiCmd>:

static BaseType_t OS_SHL_HmiCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <OS_SHL_LedCmd>:


static BaseType_t OS_SHL_LedCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	461a      	mov	r2, r3
 8001492:	2101      	movs	r1, #1
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f007 fd35 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 800149a:	61f8      	str	r0, [r7, #28]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	461a      	mov	r2, r3
 80014a2:	2102      	movs	r1, #2
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f007 fd2d 	bl	8008f04 <FreeRTOS_CLIGetParameter>
 80014aa:	61b8      	str	r0, [r7, #24]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	461a      	mov	r2, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	461a      	mov	r2, r3
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	4413      	add	r3, r2
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

    /* Decode <mode> argument */
    if(!strcasecmp(pcParameter1, "STATIC")) {
 80014c4:	494a      	ldr	r1, [pc, #296]	; (80015f0 <OS_SHL_LedCmd+0x170>)
 80014c6:	69f8      	ldr	r0, [r7, #28]
 80014c8:	f009 f922 	bl	800a710 <strcasecmp>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <OS_SHL_LedCmd+0x5a>
        LedSetMode(HW_LED_STATIC);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 fb1a 	bl	8001b0c <LedSetMode>
 80014d8:	e01d      	b.n	8001516 <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_SLOW")) {
 80014da:	4946      	ldr	r1, [pc, #280]	; (80015f4 <OS_SHL_LedCmd+0x174>)
 80014dc:	69f8      	ldr	r0, [r7, #28]
 80014de:	f009 f917 	bl	800a710 <strcasecmp>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d103      	bne.n	80014f0 <OS_SHL_LedCmd+0x70>
        LedSetMode(HW_LED_BLINK_SLOW);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fb0f 	bl	8001b0c <LedSetMode>
 80014ee:	e012      	b.n	8001516 <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_FAST")) {
 80014f0:	4941      	ldr	r1, [pc, #260]	; (80015f8 <OS_SHL_LedCmd+0x178>)
 80014f2:	69f8      	ldr	r0, [r7, #28]
 80014f4:	f009 f90c 	bl	800a710 <strcasecmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <OS_SHL_LedCmd+0x86>
        LedSetMode(HW_LED_BLINK_FAST);
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 fb04 	bl	8001b0c <LedSetMode>
 8001504:	e007      	b.n	8001516 <OS_SHL_LedCmd+0x96>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not set LED mode to %s"SHELL_EOL, pcParameter1);
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4a3c      	ldr	r2, [pc, #240]	; (80015fc <OS_SHL_LedCmd+0x17c>)
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f009 f8a9 	bl	800a664 <snprintf>
        return pdFALSE;
 8001512:	2300      	movs	r3, #0
 8001514:	e068      	b.n	80015e8 <OS_SHL_LedCmd+0x168>
    }

    /* Decode <color> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 8001516:	493a      	ldr	r1, [pc, #232]	; (8001600 <OS_SHL_LedCmd+0x180>)
 8001518:	69b8      	ldr	r0, [r7, #24]
 800151a:	f009 f8f9 	bl	800a710 <strcasecmp>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <OS_SHL_LedCmd+0xac>
        LedSetColor(HW_LED_OFF);
 8001524:	2000      	movs	r0, #0
 8001526:	f000 fad3 	bl	8001ad0 <LedSetColor>
 800152a:	e054      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "WHITE")) {
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <OS_SHL_LedCmd+0x184>)
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f009 f8ee 	bl	800a710 <strcasecmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <OS_SHL_LedCmd+0xc2>
        LedSetColor(HW_LED_WHITE);
 800153a:	2008      	movs	r0, #8
 800153c:	f000 fac8 	bl	8001ad0 <LedSetColor>
 8001540:	e049      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "RED")) {
 8001542:	4931      	ldr	r1, [pc, #196]	; (8001608 <OS_SHL_LedCmd+0x188>)
 8001544:	69b8      	ldr	r0, [r7, #24]
 8001546:	f009 f8e3 	bl	800a710 <strcasecmp>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <OS_SHL_LedCmd+0xd8>
        LedSetColor(HW_LED_RED);
 8001550:	2001      	movs	r0, #1
 8001552:	f000 fabd 	bl	8001ad0 <LedSetColor>
 8001556:	e03e      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "GREEN")) {
 8001558:	492c      	ldr	r1, [pc, #176]	; (800160c <OS_SHL_LedCmd+0x18c>)
 800155a:	69b8      	ldr	r0, [r7, #24]
 800155c:	f009 f8d8 	bl	800a710 <strcasecmp>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <OS_SHL_LedCmd+0xee>
        LedSetColor(HW_LED_GREEN);
 8001566:	2002      	movs	r0, #2
 8001568:	f000 fab2 	bl	8001ad0 <LedSetColor>
 800156c:	e033      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "BLUE")) {
 800156e:	4928      	ldr	r1, [pc, #160]	; (8001610 <OS_SHL_LedCmd+0x190>)
 8001570:	69b8      	ldr	r0, [r7, #24]
 8001572:	f009 f8cd 	bl	800a710 <strcasecmp>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d103      	bne.n	8001584 <OS_SHL_LedCmd+0x104>
        LedSetColor(HW_LED_BLUE);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 faa7 	bl	8001ad0 <LedSetColor>
 8001582:	e028      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "CYAN")) {
 8001584:	4923      	ldr	r1, [pc, #140]	; (8001614 <OS_SHL_LedCmd+0x194>)
 8001586:	69b8      	ldr	r0, [r7, #24]
 8001588:	f009 f8c2 	bl	800a710 <strcasecmp>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <OS_SHL_LedCmd+0x11a>
        LedSetColor(HW_LED_CYAN);
 8001592:	2004      	movs	r0, #4
 8001594:	f000 fa9c 	bl	8001ad0 <LedSetColor>
 8001598:	e01d      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "MAGENTA")) {
 800159a:	491f      	ldr	r1, [pc, #124]	; (8001618 <OS_SHL_LedCmd+0x198>)
 800159c:	69b8      	ldr	r0, [r7, #24]
 800159e:	f009 f8b7 	bl	800a710 <strcasecmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <OS_SHL_LedCmd+0x130>
        LedSetColor(HW_LED_MAGENTA);
 80015a8:	2007      	movs	r0, #7
 80015aa:	f000 fa91 	bl	8001ad0 <LedSetColor>
 80015ae:	e012      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "YELLOW")) {
 80015b0:	491a      	ldr	r1, [pc, #104]	; (800161c <OS_SHL_LedCmd+0x19c>)
 80015b2:	69b8      	ldr	r0, [r7, #24]
 80015b4:	f009 f8ac 	bl	800a710 <strcasecmp>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d103      	bne.n	80015c6 <OS_SHL_LedCmd+0x146>
        LedSetColor(HW_LED_YELLOW);
 80015be:	2005      	movs	r0, #5
 80015c0:	f000 fa86 	bl	8001ad0 <LedSetColor>
 80015c4:	e007      	b.n	80015d6 <OS_SHL_LedCmd+0x156>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, "Error: could not set LED color to %s"SHELL_EOL, pcParameter2);
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <OS_SHL_LedCmd+0x1a0>)
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f009 f849 	bl	800a664 <snprintf>
        return pdFALSE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e008      	b.n	80015e8 <OS_SHL_LedCmd+0x168>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, "Defined LED to %s %s"SHELL_EOL, pcParameter1, pcParameter2);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <OS_SHL_LedCmd+0x1a4>)
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f009 f83f 	bl	800a664 <snprintf>
    return pdFALSE;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	080112c0 	.word	0x080112c0
 80015f4:	080112c8 	.word	0x080112c8
 80015f8:	080112d4 	.word	0x080112d4
 80015fc:	080112e0 	.word	0x080112e0
 8001600:	08011240 	.word	0x08011240
 8001604:	08011308 	.word	0x08011308
 8001608:	08011310 	.word	0x08011310
 800160c:	08011314 	.word	0x08011314
 8001610:	0801131c 	.word	0x0801131c
 8001614:	08011324 	.word	0x08011324
 8001618:	0801132c 	.word	0x0801132c
 800161c:	08011334 	.word	0x08011334
 8001620:	0801133c 	.word	0x0801133c
 8001624:	08011364 	.word	0x08011364

08001628 <OS_SHL_AvsCmd>:

static BaseType_t OS_SHL_AvsCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <OS_SHL_AvdCmd>:

static BaseType_t OS_SHL_AvdCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <OS_SHL_StrCmd>:

static BaseType_t OS_SHL_StrCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <OS_SHL_GetVariable>:
/*
 * Decode a variable path/name and write its current value
 * into the result string.
 */
BaseType_t OS_SHL_GetVariable(char* path, char* value, size_t valueLength)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
    char* item;

    /* 1st level decoding */
    item = strsep(&path, SHELL_PATH_DELIM);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4963      	ldr	r1, [pc, #396]	; (800181c <OS_SHL_GetVariable+0x1a0>)
 800168e:	4618      	mov	r0, r3
 8001690:	f009 f89e 	bl	800a7d0 <strsep>
 8001694:	6178      	str	r0, [r7, #20]

    if(!strcasecmp(item, "robot")) {
 8001696:	4962      	ldr	r1, [pc, #392]	; (8001820 <OS_SHL_GetVariable+0x1a4>)
 8001698:	6978      	ldr	r0, [r7, #20]
 800169a:	f009 f839 	bl	800a710 <strcasecmp>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f040 80ac 	bne.w	80017fe <OS_SHL_GetVariable+0x182>
        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	495c      	ldr	r1, [pc, #368]	; (800181c <OS_SHL_GetVariable+0x1a0>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f009 f88f 	bl	800a7d0 <strsep>
 80016b2:	6178      	str	r0, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 809d 	beq.w	80017f6 <OS_SHL_GetVariable+0x17a>

            if(!strcasecmp(item, "cs")) {
 80016bc:	4959      	ldr	r1, [pc, #356]	; (8001824 <OS_SHL_GetVariable+0x1a8>)
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f009 f826 	bl	800a710 <strcasecmp>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80a3 	bne.w	8001812 <OS_SHL_GetVariable+0x196>
                if((item = strsep(&path, SHELL_PATH_DELIM))) {
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4952      	ldr	r1, [pc, #328]	; (800181c <OS_SHL_GetVariable+0x1a0>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f009 f87c 	bl	800a7d0 <strsep>
 80016d8:	6178      	str	r0, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8086 	beq.w	80017ee <OS_SHL_GetVariable+0x172>

                    if(!strcasecmp(item, "pos")) {
 80016e2:	4951      	ldr	r1, [pc, #324]	; (8001828 <OS_SHL_GetVariable+0x1ac>)
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f009 f813 	bl	800a710 <strcasecmp>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d14d      	bne.n	800178c <OS_SHL_GetVariable+0x110>
                        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4949      	ldr	r1, [pc, #292]	; (800181c <OS_SHL_GetVariable+0x1a0>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f009 f86a 	bl	800a7d0 <strsep>
 80016fc:	6178      	str	r0, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02f      	beq.n	8001764 <OS_SHL_GetVariable+0xe8>

                            if(!strcasecmp(item, "x")) {
 8001704:	4949      	ldr	r1, [pc, #292]	; (800182c <OS_SHL_GetVariable+0x1b0>)
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f009 f802 	bl	800a710 <strcasecmp>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d108      	bne.n	8001724 <OS_SHL_GetVariable+0xa8>
                                snprintf(value, valueLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.x);
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 8001714:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001718:	4a46      	ldr	r2, [pc, #280]	; (8001834 <OS_SHL_GetVariable+0x1b8>)
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f008 ffa1 	bl	800a664 <snprintf>
 8001722:	e076      	b.n	8001812 <OS_SHL_GetVariable+0x196>
                            }
                            else if(!strcasecmp(item, "y")) {
 8001724:	4944      	ldr	r1, [pc, #272]	; (8001838 <OS_SHL_GetVariable+0x1bc>)
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f008 fff2 	bl	800a710 <strcasecmp>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d108      	bne.n	8001744 <OS_SHL_GetVariable+0xc8>
                                snprintf(value, valueLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.y);
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 8001734:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001738:	4a3e      	ldr	r2, [pc, #248]	; (8001834 <OS_SHL_GetVariable+0x1b8>)
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	68b8      	ldr	r0, [r7, #8]
 800173e:	f008 ff91 	bl	800a664 <snprintf>
 8001742:	e066      	b.n	8001812 <OS_SHL_GetVariable+0x196>
                            }
                            else if(!strcasecmp(item, "a")) {
 8001744:	493d      	ldr	r1, [pc, #244]	; (800183c <OS_SHL_GetVariable+0x1c0>)
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f008 ffe2 	bl	800a710 <strcasecmp>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d15f      	bne.n	8001812 <OS_SHL_GetVariable+0x196>
                                snprintf(value, valueLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 8001754:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8001758:	4a36      	ldr	r2, [pc, #216]	; (8001834 <OS_SHL_GetVariable+0x1b8>)
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f008 ff81 	bl	800a664 <snprintf>
 8001762:	e056      	b.n	8001812 <OS_SHL_GetVariable+0x196>
                            }
                        } else {
                            snprintf(value, valueLength, "%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
                                    robot.cs.pos.pos_s16.x,
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 8001766:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
                            }
                            else if(!strcasecmp(item, "a")) {
                                snprintf(value, valueLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
                            }
                        } else {
                            snprintf(value, valueLength, "%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
 800176a:	4619      	mov	r1, r3
                                    robot.cs.pos.pos_s16.x,
                                    robot.cs.pos.pos_s16.y,
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 800176e:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
                            }
                            else if(!strcasecmp(item, "a")) {
                                snprintf(value, valueLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
                            }
                        } else {
                            snprintf(value, valueLength, "%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
 8001772:	461a      	mov	r2, r3
                                    robot.cs.pos.pos_s16.x,
                                    robot.cs.pos.pos_s16.y,
                                    robot.cs.pos.pos_s16.a);
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 8001776:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
                            }
                            else if(!strcasecmp(item, "a")) {
                                snprintf(value, valueLength, "%d"SHELL_EOL, robot.cs.pos.pos_s16.a);
                            }
                        } else {
                            snprintf(value, valueLength, "%d"SHELL_VAR_DELIM"%d"SHELL_VAR_DELIM"%d"SHELL_EOL,
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	460b      	mov	r3, r1
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <OS_SHL_GetVariable+0x1c4>)
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68b8      	ldr	r0, [r7, #8]
 8001786:	f008 ff6d 	bl	800a664 <snprintf>
 800178a:	e042      	b.n	8001812 <OS_SHL_GetVariable+0x196>
                                    robot.cs.pos.pos_s16.y,
                                    robot.cs.pos.pos_s16.a);
                        }
                    }

                    else if(!strcasecmp(item, "cs_a")) {
 800178c:	492d      	ldr	r1, [pc, #180]	; (8001844 <OS_SHL_GetVariable+0x1c8>)
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f008 ffbe 	bl	800a710 <strcasecmp>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d13b      	bne.n	8001812 <OS_SHL_GetVariable+0x196>
                        if((item = strsep(&path, SHELL_PATH_DELIM))) {
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	491f      	ldr	r1, [pc, #124]	; (800181c <OS_SHL_GetVariable+0x1a0>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f009 f815 	bl	800a7d0 <strsep>
 80017a6:	6178      	str	r0, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d031      	beq.n	8001812 <OS_SHL_GetVariable+0x196>

                            if(!strcasecmp(item, "consign"))
 80017ae:	4926      	ldr	r1, [pc, #152]	; (8001848 <OS_SHL_GetVariable+0x1cc>)
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f008 ffad 	bl	800a710 <strcasecmp>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d108      	bne.n	80017ce <OS_SHL_GetVariable+0x152>
                            {
                                snprintf(value, valueLength, "%ld"SHELL_EOL, robot.cs.cs_a.consign_value);
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 80017be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017c2:	4a22      	ldr	r2, [pc, #136]	; (800184c <OS_SHL_GetVariable+0x1d0>)
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f008 ff4c 	bl	800a664 <snprintf>
 80017cc:	e021      	b.n	8001812 <OS_SHL_GetVariable+0x196>
                            }
                            else if(!strcasecmp(item, "out"))
 80017ce:	4920      	ldr	r1, [pc, #128]	; (8001850 <OS_SHL_GetVariable+0x1d4>)
 80017d0:	6978      	ldr	r0, [r7, #20]
 80017d2:	f008 ff9d 	bl	800a710 <strcasecmp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11a      	bne.n	8001812 <OS_SHL_GetVariable+0x196>
                            {
                                snprintf(value, valueLength, "%ld"SHELL_EOL, robot.cs.cs_a.out_value);
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <OS_SHL_GetVariable+0x1b4>)
 80017de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <OS_SHL_GetVariable+0x1d0>)
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f008 ff3c 	bl	800a664 <snprintf>
 80017ec:	e011      	b.n	8001812 <OS_SHL_GetVariable+0x196>
                        }

                    }

                } else {
                    printf("robot.cs base structure"SHELL_EOL);
 80017ee:	4819      	ldr	r0, [pc, #100]	; (8001854 <OS_SHL_GetVariable+0x1d8>)
 80017f0:	f008 fecc 	bl	800a58c <printf>
 80017f4:	e00d      	b.n	8001812 <OS_SHL_GetVariable+0x196>

            }

        } else {

            printf("robot base structure"SHELL_EOL);
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <OS_SHL_GetVariable+0x1dc>)
 80017f8:	f008 fec8 	bl	800a58c <printf>
 80017fc:	e009      	b.n	8001812 <OS_SHL_GetVariable+0x196>
        }

    } // robot
    else if(!strcasecmp(item, "system")) {
 80017fe:	4917      	ldr	r1, [pc, #92]	; (800185c <OS_SHL_GetVariable+0x1e0>)
 8001800:	6978      	ldr	r0, [r7, #20]
 8001802:	f008 ff85 	bl	800a710 <strcasecmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <OS_SHL_GetVariable+0x196>
        printf("system structure"SHELL_EOL);
 800180c:	4814      	ldr	r0, [pc, #80]	; (8001860 <OS_SHL_GetVariable+0x1e4>)
 800180e:	f008 febd 	bl	800a58c <printf>
    }

    // If this point is reached; there was an error
    return pdFALSE;
 8001812:	2300      	movs	r3, #0
    snprintf(value, valueLength, "Error: unrecognized value"SHELL_EOL);
    return pdFALSE;

   //printf("* %s"SHELL_EOL, item);

}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0801137c 	.word	0x0801137c
 8001820:	08011380 	.word	0x08011380
 8001824:	08011388 	.word	0x08011388
 8001828:	0801138c 	.word	0x0801138c
 800182c:	08011390 	.word	0x08011390
 8001830:	20014668 	.word	0x20014668
 8001834:	08011394 	.word	0x08011394
 8001838:	0801139c 	.word	0x0801139c
 800183c:	080113a0 	.word	0x080113a0
 8001840:	080113a4 	.word	0x080113a4
 8001844:	080113b0 	.word	0x080113b0
 8001848:	080113b8 	.word	0x080113b8
 800184c:	080113c0 	.word	0x080113c0
 8001850:	080113c8 	.word	0x080113c8
 8001854:	080113cc 	.word	0x080113cc
 8001858:	080113e8 	.word	0x080113e8
 800185c:	08011400 	.word	0x08011400
 8001860:	08011408 	.word	0x08011408

08001864 <vApplicationMallocFailedHook>:
 */

#include "blueboard.h"

void vApplicationMallocFailedHook( void )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <vApplicationMallocFailedHook+0x10>)
 800186a:	2022      	movs	r0, #34	; 0x22
 800186c:	f000 f814 	bl	8001898 <vAssertCalled>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0801141c 	.word	0x0801141c

08001878 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    function is called if a stack overflow is detected. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 8001882:	4904      	ldr	r1, [pc, #16]	; (8001894 <vApplicationStackOverflowHook+0x1c>)
 8001884:	2030      	movs	r0, #48	; 0x30
 8001886:	f000 f807 	bl	8001898 <vAssertCalled>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0801141c 	.word	0x0801141c

08001898 <vAssertCalled>:
    ( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

    ( void ) pcFile;
    ( void ) ulLine;

    taskENTER_CRITICAL();
 80018a6:	f004 fcff 	bl	80062a8 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while( ul == 0 )
 80018aa:	e000      	b.n	80018ae <vAssertCalled+0x16>
 80018ac:	bf00      	nop
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0fb      	beq.n	80018ac <vAssertCalled+0x14>
        {
            __NOP();
        }
    }
    taskEXIT_CRITICAL();
 80018b4:	f004 fd24 	bl	8006300 <vPortExitCritical>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_read>:
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e009      	b.n	80018e6 <_read+0x26>
    {
        //*ptr++ = __io_getchar();
        *ptr++ = HW_DBG_Get();
 80018d2:	68bc      	ldr	r4, [r7, #8]
 80018d4:	1c63      	adds	r3, r4, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	f007 fe02 	bl	80094e0 <HW_DBG_Get>
 80018dc:	4603      	mov	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]

int _read (int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbf1      	blt.n	80018d2 <_read+0x12>
    {
        //*ptr++ = __io_getchar();
        *ptr++ = HW_DBG_Get();
    }

return len;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <_write>:

int _write(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e009      	b.n	800191e <_write+0x26>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f007 fdb4 	bl	8009480 <HW_DBG_Put>

int _write(int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf1      	blt.n	800190a <_write+0x12>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
    }
    return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x50>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x16>
        heap_end = &end;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <_sbrk+0x50>)
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <_sbrk+0x54>)
 8001944:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <_sbrk+0x50>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <_sbrk+0x50>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	466a      	mov	r2, sp
 8001956:	4293      	cmp	r3, r2
 8001958:	d907      	bls.n	800196a <_sbrk+0x3a>
    {
//      write(1, "Heap and stack collision\n", 25);
//      abort();
        errno = ENOMEM;
 800195a:	f008 fdd7 	bl	800a50c <__errno>
 800195e:	4602      	mov	r2, r0
 8001960:	230c      	movs	r3, #12
 8001962:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	e006      	b.n	8001978 <_sbrk+0x48>
    }

    heap_end += incr;
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <_sbrk+0x50>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a03      	ldr	r2, [pc, #12]	; (8001980 <_sbrk+0x50>)
 8001974:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200105c0 	.word	0x200105c0
 8001984:	20014920 	.word	0x20014920

08001988 <_close>:

int _close(int file)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b0:	605a      	str	r2, [r3, #4]
    return 0;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_isatty>:

int _isatty(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
    return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
    return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <OS_CreateLedTask>:
/* Local, Private functions */
static void OS_LedTask(void *pvParameters);


void OS_CreateLedTask(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af02      	add	r7, sp, #8
	xLedColorMutex = xSemaphoreCreateMutex();
 80019fa:	2001      	movs	r0, #1
 80019fc:	f004 fff4 	bl	80069e8 <xQueueCreateMutex>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <OS_CreateLedTask+0x38>)
 8001a04:	601a      	str	r2, [r3, #0]
	xLedModeMutex = xSemaphoreCreateMutex();
 8001a06:	2001      	movs	r0, #1
 8001a08:	f004 ffee 	bl	80069e8 <xQueueCreateMutex>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <OS_CreateLedTask+0x3c>)
 8001a10:	601a      	str	r2, [r3, #0]
    xTaskCreate(OS_LedTask, "LED", configMINIMAL_STACK_SIZE, NULL, OS_TASK_PRIORITY_LED, NULL );
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2302      	movs	r3, #2
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2282      	movs	r2, #130	; 0x82
 8001a1e:	4905      	ldr	r1, [pc, #20]	; (8001a34 <OS_CreateLedTask+0x40>)
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <OS_CreateLedTask+0x44>)
 8001a22:	f005 fc5f 	bl	80072e4 <xTaskCreate>
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200105c4 	.word	0x200105c4
 8001a30:	200105c8 	.word	0x200105c8
 8001a34:	08011440 	.word	0x08011440
 8001a38:	08001a3d 	.word	0x08001a3d

08001a3c <OS_LedTask>:

static void OS_LedTask( void *pvParameters )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    TickType_t xNextWakeTime;

    uint32_t blinkCounter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    uint32_t blinkPeriod = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8001a4c:	f005 ffee 	bl	8007a2c <xTaskGetTickCount>
 8001a50:	4603      	mov	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
        switch(LedMode)
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <OS_LedTask+0x8c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d002      	beq.n	8001a62 <OS_LedTask+0x26>
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d003      	beq.n	8001a68 <OS_LedTask+0x2c>
                blinkPeriod = LED_BLINK_FAST;
                break;

            default:
            case HW_LED_STATIC:
                        break;
 8001a60:	e005      	b.n	8001a6e <OS_LedTask+0x32>
    for( ;; )
    {
        switch(LedMode)
        {
            case HW_LED_BLINK_SLOW:
                blinkPeriod = LED_BLINK_SLOW;
 8001a62:	2364      	movs	r3, #100	; 0x64
 8001a64:	613b      	str	r3, [r7, #16]
                break;
 8001a66:	e002      	b.n	8001a6e <OS_LedTask+0x32>

            case HW_LED_BLINK_FAST:
                blinkPeriod = LED_BLINK_FAST;
 8001a68:	230a      	movs	r3, #10
 8001a6a:	613b      	str	r3, [r7, #16]
                break;
 8001a6c:	bf00      	nop
            case HW_LED_STATIC:
                        break;
        }

        /* Handles blinking counter */
        if(blinkCounter++ > blinkPeriod)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	617a      	str	r2, [r7, #20]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <OS_LedTask+0x42>
            blinkCounter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

        if((blinkCounter > blinkPeriod / 2) || LedMode == HW_LED_STATIC) {
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	085a      	lsrs	r2, r3, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d303      	bcc.n	8001a90 <OS_LedTask+0x54>
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <OS_LedTask+0x8c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d114      	bne.n	8001aba <OS_LedTask+0x7e>

            /* Duration ON */
            HW_LED_SetColor(LedColor);
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <OS_LedTask+0x90>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f008 f84f 	bl	8009b38 <HW_LED_SetColor>
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_DUTY_TICK);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f005 fddf 	bl	8007664 <vTaskDelayUntil>

            /* Duration OFF */
            HW_LED_SetColor(HW_LED_OFF);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f008 f846 	bl	8009b38 <HW_LED_SetColor>
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK-LED_PWM_DUTY_TICK);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2113      	movs	r1, #19
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 fdd6 	bl	8007664 <vTaskDelayUntil>
 8001ab8:	e005      	b.n	8001ac6 <OS_LedTask+0x8a>

        } else {
            vTaskDelayUntil( &xNextWakeTime, LED_PWM_PERIOD_TICK);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2114      	movs	r1, #20
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fdcf 	bl	8007664 <vTaskDelayUntil>
        }
    }
 8001ac6:	e7c5      	b.n	8001a54 <OS_LedTask+0x18>
 8001ac8:	200105cd 	.word	0x200105cd
 8001acc:	200105cc 	.word	0x200105cc

08001ad0 <LedSetColor>:
}

void LedSetColor(HW_LED_ColorTypeDef color)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedColorMutex, 10);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <LedSetColor+0x34>)
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	220a      	movs	r2, #10
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f005 f92e 	bl	8006d44 <xQueueGenericReceive>
	LedColor = color;
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <LedSetColor+0x38>)
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedColorMutex);
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <LedSetColor+0x34>)
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	f004 ff8e 	bl	8006a18 <xQueueGenericSend>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200105c4 	.word	0x200105c4
 8001b08:	200105cc 	.word	0x200105cc

08001b0c <LedSetMode>:

void LedSetMode(HW_LED_ModeTypeDef mode)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedModeMutex, 10);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <LedSetMode+0x34>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	220a      	movs	r2, #10
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f005 f910 	bl	8006d44 <xQueueGenericReceive>
	LedMode = mode;
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <LedSetMode+0x38>)
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedModeMutex);
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <LedSetMode+0x34>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	f004 ff70 	bl	8006a18 <xQueueGenericSend>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200105c8 	.word	0x200105c8
 8001b44:	200105cd 	.word	0x200105cd

08001b48 <OS_CreateMotionTask>:
static void AVS_Init(void);
static void AVS_CsTask(void *pvParameters);
static bool motion_is_traj_done(wp_t *waypoint);

void OS_CreateMotionTask(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af02      	add	r7, sp, #8
    /* Initialize global variables */
    memset(&robot, 0, sizeof(RobotTypeDef));
 8001b4e:	f44f 7218 	mov.w	r2, #608	; 0x260
 8001b52:	2100      	movs	r1, #0
 8001b54:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <OS_CreateMotionTask+0x6c>)
 8001b56:	f008 fd10 	bl	800a57a <memset>
	vCreateAllMutex();
 8001b5a:	f000 fb2f 	bl	80021bc <vCreateAllMutex>
    AVS_Init();
 8001b5e:	f000 f87b 	bl	8001c58 <AVS_Init>
	xTaskCreate(AVS_CsTask, "AVERSIVE", 500, NULL, OS_TASK_PRIORITY_AVERSIVE, NULL );
 8001b62:	2300      	movs	r3, #0
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	2305      	movs	r3, #5
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b70:	4911      	ldr	r1, [pc, #68]	; (8001bb8 <OS_CreateMotionTask+0x70>)
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <OS_CreateMotionTask+0x74>)
 8001b74:	f005 fbb6 	bl	80072e4 <xTaskCreate>
	xWaypointQueue = xQueueCreate( MAX_WP_IN_QUEUE, sizeof(wp_t));
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2114      	movs	r1, #20
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f004 febd 	bl	80068fc <xQueueGenericCreate>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <OS_CreateMotionTask+0x78>)
 8001b86:	601a      	str	r2, [r3, #0]
    if(xWaypointQueue==NULL)
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <OS_CreateMotionTask+0x78>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <OS_CreateMotionTask+0x50>
    {
    	printf("insufficient heap RAM available for xELTQueue\r\n");
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <OS_CreateMotionTask+0x7c>)
 8001b92:	f008 fd5f 	bl	800a654 <puts>
    	while(1);
 8001b96:	e7fe      	b.n	8001b96 <OS_CreateMotionTask+0x4e>
    }
	xTaskCreate(OS_MotionTask, "MOTION", 500, NULL, OS_TASK_PRIORITY_MOTION, NULL );
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <OS_CreateMotionTask+0x80>)
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <OS_CreateMotionTask+0x84>)
 8001baa:	f005 fb9b 	bl	80072e4 <xTaskCreate>
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20014668 	.word	0x20014668
 8001bb8:	08011444 	.word	0x08011444
 8001bbc:	08001ed9 	.word	0x08001ed9
 8001bc0:	200105e4 	.word	0x200105e4
 8001bc4:	08011450 	.word	0x08011450
 8001bc8:	08011480 	.word	0x08011480
 8001bcc:	08001bd1 	.word	0x08001bd1

08001bd0 <OS_MotionTask>:

static void OS_MotionTask( void *pvParameters )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
    	xQueueReceive(xWaypointQueue, &current_waypoint, portMAX_DELAY);
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <OS_MotionTask+0x78>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f04f 32ff 	mov.w	r2, #4294967295
 8001be2:	491a      	ldr	r1, [pc, #104]	; (8001c4c <OS_MotionTask+0x7c>)
 8001be4:	f005 f8ae 	bl	8006d44 <xQueueGenericReceive>

    	// Handle avoidance blockage
        av.mask_back_left = true;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <OS_MotionTask+0x80>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	711a      	strb	r2, [r3, #4]
        av.mask_back_right = true;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <OS_MotionTask+0x80>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	719a      	strb	r2, [r3, #6]
        av.mask_front_center = true;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <OS_MotionTask+0x80>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	709a      	strb	r2, [r3, #2]
        av.mask_front_left = true;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <OS_MotionTask+0x80>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	705a      	strb	r2, [r3, #1]
        av.mask_front_right = true;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <OS_MotionTask+0x80>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	70da      	strb	r2, [r3, #3]

        motion_send_wp(&current_waypoint);
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <OS_MotionTask+0x7c>)
 8001c08:	f000 fba4 	bl	8002354 <motion_send_wp>

        while(!motion_is_traj_done(&current_waypoint))
 8001c0c:	e002      	b.n	8001c14 <OS_MotionTask+0x44>
        {
        	vTaskDelay(MOTION_CONTROL_PERIOD_TICKS);
 8001c0e:	2032      	movs	r0, #50	; 0x32
 8001c10:	f005 fd96 	bl	8007740 <vTaskDelay>
        av.mask_front_left = true;
        av.mask_front_right = true;

        motion_send_wp(&current_waypoint);

        while(!motion_is_traj_done(&current_waypoint))
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <OS_MotionTask+0x7c>)
 8001c16:	f000 fb89 	bl	800232c <motion_is_traj_done>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f3      	bne.n	8001c0e <OS_MotionTask+0x3e>
        {
        	vTaskDelay(MOTION_CONTROL_PERIOD_TICKS);
        }

        av.mask_back_left = false;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <OS_MotionTask+0x80>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	711a      	strb	r2, [r3, #4]
        av.mask_back_right = false;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <OS_MotionTask+0x80>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	719a      	strb	r2, [r3, #6]
        av.mask_front_center = false;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <OS_MotionTask+0x80>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	709a      	strb	r2, [r3, #2]
        av.mask_front_left = false;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <OS_MotionTask+0x80>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
        av.mask_front_right = false;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <OS_MotionTask+0x80>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	70da      	strb	r2, [r3, #3]
    } // traj done
 8001c44:	e7c8      	b.n	8001bd8 <OS_MotionTask+0x8>
 8001c46:	bf00      	nop
 8001c48:	200105e4 	.word	0x200105e4
 8001c4c:	200105e8 	.word	0x200105e8
 8001c50:	20014654 	.word	0x20014654
 8001c54:	00000000 	.word	0x00000000

08001c58 <AVS_Init>:
        //sprintf(cBuffer,"%ld\t%ld\t%lf\t%lf\t%lf\r\n", HW_ENC_GetChannel(HW_ENC_CHANNEL1),HW_ENC_GetChannel(HW_ENC_CHANNEL2),position_get_a_rad_double(&robot.cs.pos),position_get_x_double(&robot.cs.pos),position_get_y_double(&robot.cs.pos));
        //OS_DebugTaskPrint(cBuffer);
}

void AVS_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af02      	add	r7, sp, #8
    /* Robot System */
    rs_init(&robot.cs.rs);
 8001c5e:	488a      	ldr	r0, [pc, #552]	; (8001e88 <AVS_Init+0x230>)
 8001c60:	f001 fc02 	bl	8003468 <rs_init>
    rs_set_left_pwm(&robot.cs.rs,  (void*) HW_MOT_SetMotorSpeedFastDecay, (void*) MOT_CHANNEL_LEFT);
 8001c64:	2200      	movs	r2, #0
 8001c66:	4989      	ldr	r1, [pc, #548]	; (8001e8c <AVS_Init+0x234>)
 8001c68:	4887      	ldr	r0, [pc, #540]	; (8001e88 <AVS_Init+0x230>)
 8001c6a:	f001 fc0b 	bl	8003484 <rs_set_left_pwm>
    rs_set_right_pwm(&robot.cs.rs, (void*) HW_MOT_SetMotorSpeedFastDecay, (void*) MOT_CHANNEL_RIGHT);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4986      	ldr	r1, [pc, #536]	; (8001e8c <AVS_Init+0x234>)
 8001c72:	4885      	ldr	r0, [pc, #532]	; (8001e88 <AVS_Init+0x230>)
 8001c74:	f001 fc18 	bl	80034a8 <rs_set_right_pwm>

    /* External Encoders */
    rs_set_left_ext_encoder(&robot.cs.rs,  (void*) HW_ENC_GetChannel, (void*) ENC_CHANNEL_LEFT,  PHYS_ROBOT_ENCODER_LEFT_GAIN);
 8001c78:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8001e58 <AVS_Init+0x200>
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4984      	ldr	r1, [pc, #528]	; (8001e90 <AVS_Init+0x238>)
 8001c80:	4881      	ldr	r0, [pc, #516]	; (8001e88 <AVS_Init+0x230>)
 8001c82:	f001 fc23 	bl	80034cc <rs_set_left_ext_encoder>
    rs_set_right_ext_encoder(&robot.cs.rs, (void*) HW_ENC_GetChannel, (void*) ENC_CHANNEL_RIGHT, PHYS_ROBOT_ENCODER_RIGHT_GAIN);
 8001c86:	ed9f 0b76 	vldr	d0, [pc, #472]	; 8001e60 <AVS_Init+0x208>
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4980      	ldr	r1, [pc, #512]	; (8001e90 <AVS_Init+0x238>)
 8001c8e:	487e      	ldr	r0, [pc, #504]	; (8001e88 <AVS_Init+0x230>)
 8001c90:	f001 fc36 	bl	8003500 <rs_set_right_ext_encoder>
    rs_set_flags(&robot.cs.rs, RS_USE_EXT);
 8001c94:	2101      	movs	r1, #1
 8001c96:	487c      	ldr	r0, [pc, #496]	; (8001e88 <AVS_Init+0x230>)
 8001c98:	f001 fce8 	bl	800366c <rs_set_flags>

    /* Position Manager */
    position_init(&robot.cs.pos);
 8001c9c:	487d      	ldr	r0, [pc, #500]	; (8001e94 <AVS_Init+0x23c>)
 8001c9e:	f001 f965 	bl	8002f6c <position_init>
    position_set_physical_params(&robot.cs.pos, PHYS_ROBOT_ENCODERS_TRACK_MM, PHYS_ROBOT_NB_IMP_PER_MM);
 8001ca2:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001e68 <AVS_Init+0x210>
 8001ca6:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001e70 <AVS_Init+0x218>
 8001caa:	487a      	ldr	r0, [pc, #488]	; (8001e94 <AVS_Init+0x23c>)
 8001cac:	f001 f97a 	bl	8002fa4 <position_set_physical_params>
    position_set_related_robot_system(&robot.cs.pos, &robot.cs.rs);
 8001cb0:	4975      	ldr	r1, [pc, #468]	; (8001e88 <AVS_Init+0x230>)
 8001cb2:	4878      	ldr	r0, [pc, #480]	; (8001e94 <AVS_Init+0x23c>)
 8001cb4:	f001 f968 	bl	8002f88 <position_set_related_robot_system>
    position_use_ext(&robot.cs.pos);
 8001cb8:	4876      	ldr	r0, [pc, #472]	; (8001e94 <AVS_Init+0x23c>)
 8001cba:	f001 f98b 	bl	8002fd4 <position_use_ext>
//    position_set_centrifugal_coef(&robot.cs.pos, PHYS_ROBOT_CENTRIFUGAL_COEF);

    /* Control System filter in Distance */
    pid_init(&robot.cs.pid_d);
 8001cbe:	4876      	ldr	r0, [pc, #472]	; (8001e98 <AVS_Init+0x240>)
 8001cc0:	f000 fe80 	bl	80029c4 <pid_init>
    pid_set_gains(&robot.cs.pid_d, PHYS_CS_D_PID_KP, PHYS_CS_D_PID_KI, PHYS_CS_D_PID_KD);
 8001cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f242 7110 	movw	r1, #10000	; 0x2710
 8001cce:	4872      	ldr	r0, [pc, #456]	; (8001e98 <AVS_Init+0x240>)
 8001cd0:	f000 fe8c 	bl	80029ec <pid_set_gains>
    pid_set_maximums(&robot.cs.pid_d, PHYS_CS_D_PID_MAX_IN, PHYS_CS_D_PID_MAX_I, PHYS_CS_D_PID_MAX_OUT);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	2100      	movs	r1, #0
 8001cdc:	486e      	ldr	r0, [pc, #440]	; (8001e98 <AVS_Init+0x240>)
 8001cde:	f000 fea1 	bl	8002a24 <pid_set_maximums>
    pid_set_out_shift(&robot.cs.pid_d, PHYS_CS_D_PID_OUT_SHIFT);
 8001ce2:	210c      	movs	r1, #12
 8001ce4:	486c      	ldr	r0, [pc, #432]	; (8001e98 <AVS_Init+0x240>)
 8001ce6:	f000 feb3 	bl	8002a50 <pid_set_out_shift>
    pid_set_derivate_filter(&robot.cs.pid_d, PHYS_CS_D_PID_DRV_FILTER);
 8001cea:	2104      	movs	r1, #4
 8001cec:	486a      	ldr	r0, [pc, #424]	; (8001e98 <AVS_Init+0x240>)
 8001cee:	f000 febf 	bl	8002a70 <pid_set_derivate_filter>
    quadramp_init(&robot.cs.qr_d);
 8001cf2:	486a      	ldr	r0, [pc, #424]	; (8001e9c <AVS_Init+0x244>)
 8001cf4:	f000 ff86 	bl	8002c04 <quadramp_init>
    quadramp_set_1st_order_vars(&robot.cs.qr_d, PHYS_CS_D_QUAD_POS_SPEED, PHYS_CS_D_QUAD_NEG_SPEED);
 8001cf8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001cfc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001d00:	4866      	ldr	r0, [pc, #408]	; (8001e9c <AVS_Init+0x244>)
 8001d02:	f000 ff9f 	bl	8002c44 <quadramp_set_1st_order_vars>
    quadramp_set_2nd_order_vars(&robot.cs.qr_d, PHYS_CS_D_QUAD_POS_ACCEL, PHYS_CS_D_QUAD_NEG_ACCEL);
 8001d06:	2214      	movs	r2, #20
 8001d08:	2114      	movs	r1, #20
 8001d0a:	4864      	ldr	r0, [pc, #400]	; (8001e9c <AVS_Init+0x244>)
 8001d0c:	f000 ff88 	bl	8002c20 <quadramp_set_2nd_order_vars>
    cs_init(&robot.cs.cs_d);
 8001d10:	4863      	ldr	r0, [pc, #396]	; (8001ea0 <AVS_Init+0x248>)
 8001d12:	f000 fd53 	bl	80027bc <cs_init>
    cs_set_consign_filter(&robot.cs.cs_d, quadramp_do_filter, &robot.cs.qr_d);
 8001d16:	4a61      	ldr	r2, [pc, #388]	; (8001e9c <AVS_Init+0x244>)
 8001d18:	4962      	ldr	r1, [pc, #392]	; (8001ea4 <AVS_Init+0x24c>)
 8001d1a:	4861      	ldr	r0, [pc, #388]	; (8001ea0 <AVS_Init+0x248>)
 8001d1c:	f000 fd80 	bl	8002820 <cs_set_consign_filter>
    cs_set_correct_filter(&robot.cs.cs_d, pid_do_filter, &robot.cs.pid_d);
 8001d20:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <AVS_Init+0x240>)
 8001d22:	4961      	ldr	r1, [pc, #388]	; (8001ea8 <AVS_Init+0x250>)
 8001d24:	485e      	ldr	r0, [pc, #376]	; (8001ea0 <AVS_Init+0x248>)
 8001d26:	f000 fd8d 	bl	8002844 <cs_set_correct_filter>
    cs_set_process_in(&robot.cs.cs_d, rs_set_distance, &robot.cs.rs);
 8001d2a:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <AVS_Init+0x230>)
 8001d2c:	495f      	ldr	r1, [pc, #380]	; (8001eac <AVS_Init+0x254>)
 8001d2e:	485c      	ldr	r0, [pc, #368]	; (8001ea0 <AVS_Init+0x248>)
 8001d30:	f000 fd9a 	bl	8002868 <cs_set_process_in>
    cs_set_process_out(&robot.cs.cs_d, rs_get_distance, &robot.cs.rs);
 8001d34:	4a54      	ldr	r2, [pc, #336]	; (8001e88 <AVS_Init+0x230>)
 8001d36:	495e      	ldr	r1, [pc, #376]	; (8001eb0 <AVS_Init+0x258>)
 8001d38:	4859      	ldr	r0, [pc, #356]	; (8001ea0 <AVS_Init+0x248>)
 8001d3a:	f000 fda7 	bl	800288c <cs_set_process_out>
    cs_set_consign(&robot.cs.cs_d, 0);
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4857      	ldr	r0, [pc, #348]	; (8001ea0 <AVS_Init+0x248>)
 8001d42:	f000 fe31 	bl	80029a8 <cs_set_consign>

    /* Control System filter in Angle */
    pid_init(&robot.cs.pid_a);
 8001d46:	485b      	ldr	r0, [pc, #364]	; (8001eb4 <AVS_Init+0x25c>)
 8001d48:	f000 fe3c 	bl	80029c4 <pid_init>
    pid_set_gains(&robot.cs.pid_a, PHYS_CS_A_PID_KP, PHYS_CS_A_PID_KI, PHYS_CS_A_PID_KD);
 8001d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d50:	2200      	movs	r2, #0
 8001d52:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001d56:	4857      	ldr	r0, [pc, #348]	; (8001eb4 <AVS_Init+0x25c>)
 8001d58:	f000 fe48 	bl	80029ec <pid_set_gains>
    pid_set_maximums(&robot.cs.pid_a, PHYS_CS_A_PID_MAX_IN, PHYS_CS_A_PID_MAX_I, PHYS_CS_A_PID_MAX_OUT);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	2100      	movs	r1, #0
 8001d64:	4853      	ldr	r0, [pc, #332]	; (8001eb4 <AVS_Init+0x25c>)
 8001d66:	f000 fe5d 	bl	8002a24 <pid_set_maximums>
    pid_set_out_shift(&robot.cs.pid_a, PHYS_CS_A_PID_OUT_SHIFT);
 8001d6a:	210b      	movs	r1, #11
 8001d6c:	4851      	ldr	r0, [pc, #324]	; (8001eb4 <AVS_Init+0x25c>)
 8001d6e:	f000 fe6f 	bl	8002a50 <pid_set_out_shift>
    pid_set_derivate_filter(&robot.cs.pid_a, PHYS_CS_A_PID_DRV_FILTER);
 8001d72:	2104      	movs	r1, #4
 8001d74:	484f      	ldr	r0, [pc, #316]	; (8001eb4 <AVS_Init+0x25c>)
 8001d76:	f000 fe7b 	bl	8002a70 <pid_set_derivate_filter>
    quadramp_init(&robot.cs.qr_a);
 8001d7a:	484f      	ldr	r0, [pc, #316]	; (8001eb8 <AVS_Init+0x260>)
 8001d7c:	f000 ff42 	bl	8002c04 <quadramp_init>
    quadramp_set_1st_order_vars(&robot.cs.qr_a, PHYS_CS_A_QUAD_POS_SPEED, PHYS_CS_A_QUAD_NEG_SPEED);
 8001d80:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001d84:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001d88:	484b      	ldr	r0, [pc, #300]	; (8001eb8 <AVS_Init+0x260>)
 8001d8a:	f000 ff5b 	bl	8002c44 <quadramp_set_1st_order_vars>
    quadramp_set_2nd_order_vars(&robot.cs.qr_a, PHYS_CS_A_QUAD_POS_ACCEL, PHYS_CS_A_QUAD_NEG_ACCEL);
 8001d8e:	2208      	movs	r2, #8
 8001d90:	2108      	movs	r1, #8
 8001d92:	4849      	ldr	r0, [pc, #292]	; (8001eb8 <AVS_Init+0x260>)
 8001d94:	f000 ff44 	bl	8002c20 <quadramp_set_2nd_order_vars>
    cs_init(&robot.cs.cs_a);
 8001d98:	4848      	ldr	r0, [pc, #288]	; (8001ebc <AVS_Init+0x264>)
 8001d9a:	f000 fd0f 	bl	80027bc <cs_init>
    cs_set_consign_filter(&robot.cs.cs_a, quadramp_do_filter, &robot.cs.qr_a);
 8001d9e:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <AVS_Init+0x260>)
 8001da0:	4940      	ldr	r1, [pc, #256]	; (8001ea4 <AVS_Init+0x24c>)
 8001da2:	4846      	ldr	r0, [pc, #280]	; (8001ebc <AVS_Init+0x264>)
 8001da4:	f000 fd3c 	bl	8002820 <cs_set_consign_filter>
    cs_set_correct_filter(&robot.cs.cs_a, pid_do_filter, &robot.cs.pid_a);
 8001da8:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <AVS_Init+0x25c>)
 8001daa:	493f      	ldr	r1, [pc, #252]	; (8001ea8 <AVS_Init+0x250>)
 8001dac:	4843      	ldr	r0, [pc, #268]	; (8001ebc <AVS_Init+0x264>)
 8001dae:	f000 fd49 	bl	8002844 <cs_set_correct_filter>
    cs_set_process_in(&robot.cs.cs_a, rs_set_angle, &robot.cs.rs);
 8001db2:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <AVS_Init+0x230>)
 8001db4:	4942      	ldr	r1, [pc, #264]	; (8001ec0 <AVS_Init+0x268>)
 8001db6:	4841      	ldr	r0, [pc, #260]	; (8001ebc <AVS_Init+0x264>)
 8001db8:	f000 fd56 	bl	8002868 <cs_set_process_in>
    cs_set_process_out(&robot.cs.cs_a, rs_get_angle, &robot.cs.rs);
 8001dbc:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <AVS_Init+0x230>)
 8001dbe:	4941      	ldr	r1, [pc, #260]	; (8001ec4 <AVS_Init+0x26c>)
 8001dc0:	483e      	ldr	r0, [pc, #248]	; (8001ebc <AVS_Init+0x264>)
 8001dc2:	f000 fd63 	bl	800288c <cs_set_process_out>
    cs_set_consign(&robot.cs.cs_a, 0);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	483c      	ldr	r0, [pc, #240]	; (8001ebc <AVS_Init+0x264>)
 8001dca:	f000 fded 	bl	80029a8 <cs_set_consign>

    /* Trajectory Manager */
    trajectory_init(&robot.cs.traj);
 8001dce:	483e      	ldr	r0, [pc, #248]	; (8001ec8 <AVS_Init+0x270>)
 8001dd0:	f001 fcd4 	bl	800377c <trajectory_init>
    trajectory_set_cs(&robot.cs.traj, &robot.cs.cs_d, &robot.cs.cs_a);
 8001dd4:	4a39      	ldr	r2, [pc, #228]	; (8001ebc <AVS_Init+0x264>)
 8001dd6:	4932      	ldr	r1, [pc, #200]	; (8001ea0 <AVS_Init+0x248>)
 8001dd8:	483b      	ldr	r0, [pc, #236]	; (8001ec8 <AVS_Init+0x270>)
 8001dda:	f001 fce3 	bl	80037a4 <trajectory_set_cs>
    trajectory_set_robot_params(&robot.cs.traj, &robot.cs.rs, &robot.cs.pos);
 8001dde:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <AVS_Init+0x23c>)
 8001de0:	4929      	ldr	r1, [pc, #164]	; (8001e88 <AVS_Init+0x230>)
 8001de2:	4839      	ldr	r0, [pc, #228]	; (8001ec8 <AVS_Init+0x270>)
 8001de4:	f001 fcf0 	bl	80037c8 <trajectory_set_robot_params>
    trajectory_set_speed(&robot.cs.traj, PHYS_TRAJ_D_DEFAULT_SPEED, PHYS_TRAJ_A_DEFAULT_SPEED);
 8001de8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001dec:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001df0:	4835      	ldr	r0, [pc, #212]	; (8001ec8 <AVS_Init+0x270>)
 8001df2:	f001 fcfb 	bl	80037ec <trajectory_set_speed>
    trajectory_set_windows(&robot.cs.traj, PHYS_TRAJ_DEFAULT_WIN_D, PHYS_TRAJ_DEFAULT_WIN_A_DEG, PHYS_TRAJ_DEFAULT_WIN_A_START_DEG);
 8001df6:	ed9f 2b20 	vldr	d2, [pc, #128]	; 8001e78 <AVS_Init+0x220>
 8001dfa:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001e80 <AVS_Init+0x228>
 8001dfe:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001e78 <AVS_Init+0x220>
 8001e02:	4831      	ldr	r0, [pc, #196]	; (8001ec8 <AVS_Init+0x270>)
 8001e04:	f001 fd08 	bl	8003818 <trajectory_set_windows>

    /* Blocking detection */
    bd_init(&robot.cs.bd_l);
 8001e08:	4830      	ldr	r0, [pc, #192]	; (8001ecc <AVS_Init+0x274>)
 8001e0a:	f000 fc59 	bl	80026c0 <bd_init>
    bd_init(&robot.cs.bd_r);
 8001e0e:	4830      	ldr	r0, [pc, #192]	; (8001ed0 <AVS_Init+0x278>)
 8001e10:	f000 fc56 	bl	80026c0 <bd_init>
    bd_set_current_thresholds(&robot.cs.bd_r, PHYS_BD_K1, PHYS_BD_K2, PHYS_BD_THR, PHYS_BD_CPT);
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001e1c:	2228      	movs	r2, #40	; 0x28
 8001e1e:	2105      	movs	r1, #5
 8001e20:	482b      	ldr	r0, [pc, #172]	; (8001ed0 <AVS_Init+0x278>)
 8001e22:	f000 fc5b 	bl	80026dc <bd_set_current_thresholds>
    bd_set_current_thresholds(&robot.cs.bd_l, PHYS_BD_K1, PHYS_BD_K2, PHYS_BD_THR, PHYS_BD_CPT);
 8001e26:	2364      	movs	r3, #100	; 0x64
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001e2e:	2228      	movs	r2, #40	; 0x28
 8001e30:	2105      	movs	r1, #5
 8001e32:	4826      	ldr	r0, [pc, #152]	; (8001ecc <AVS_Init+0x274>)
 8001e34:	f000 fc52 	bl	80026dc <bd_set_current_thresholds>
    bd_set_speed_threshold(&robot.cs.bd_l, PHYS_BD_SPD);
 8001e38:	2196      	movs	r1, #150	; 0x96
 8001e3a:	4824      	ldr	r0, [pc, #144]	; (8001ecc <AVS_Init+0x274>)
 8001e3c:	f000 fc6a 	bl	8002714 <bd_set_speed_threshold>
    bd_set_speed_threshold(&robot.cs.bd_r, PHYS_BD_SPD);
 8001e40:	2196      	movs	r1, #150	; 0x96
 8001e42:	4823      	ldr	r0, [pc, #140]	; (8001ed0 <AVS_Init+0x278>)
 8001e44:	f000 fc66 	bl	8002714 <bd_set_speed_threshold>
    //scheduler_add_periodical_event_priority(sample_current, NULL, 25000 / SCHEDULER_UNIT, 200);  /* 25 ms */
    /* STATUS_EVENT */

    /* init struct robot */
    //robot.cs.cs_events = DO_CS | DO_RS | DO_POS | DO_BD | DO_POWER ;
    robot.cs.cs_events =  DO_RS | DO_POS | DO_BD | DO_STATUS;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <AVS_Init+0x27c>)
 8001e4a:	224e      	movs	r2, #78	; 0x4e
 8001e4c:	701a      	strb	r2, [r3, #0]
        //right_current = 0;
        //left_current = 0;
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	f3af 8000 	nop.w
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	3ff00000 	.word	0x3ff00000
 8001e60:	00000000 	.word	0x00000000
 8001e64:	bff00000 	.word	0xbff00000
 8001e68:	841bf7e1 	.word	0x841bf7e1
 8001e6c:	40361927 	.word	0x40361927
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40693000 	.word	0x40693000
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	403e0000 	.word	0x403e0000
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40140000 	.word	0x40140000
 8001e88:	2001466c 	.word	0x2001466c
 8001e8c:	0800a021 	.word	0x0800a021
 8001e90:	08009875 	.word	0x08009875
 8001e94:	200146b8 	.word	0x200146b8
 8001e98:	20014810 	.word	0x20014810
 8001e9c:	20014844 	.word	0x20014844
 8001ea0:	200147d4 	.word	0x200147d4
 8001ea4:	08002c69 	.word	0x08002c69
 8001ea8:	08002aa5 	.word	0x08002aa5
 8001eac:	0800358d 	.word	0x0800358d
 8001eb0:	08003609 	.word	0x08003609
 8001eb4:	20014784 	.word	0x20014784
 8001eb8:	200147b8 	.word	0x200147b8
 8001ebc:	20014748 	.word	0x20014748
 8001ec0:	08003535 	.word	0x08003535
 8001ec4:	080035e5 	.word	0x080035e5
 8001ec8:	20014700 	.word	0x20014700
 8001ecc:	20014860 	.word	0x20014860
 8001ed0:	2001488c 	.word	0x2001488c
 8001ed4:	20014668 	.word	0x20014668

08001ed8 <AVS_CsTask>:
/* Main CS Managment Task
 * TBC: might require a mutex for some variables
 * TODO: handle re-init of the task
 */
void AVS_CsTask(void *pvParameters)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    static int32_t old_speed_a  = 0;
    static int32_t old_speed_d  = 0;
    TickType_t xNextWakeTime;

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8001ee0:	f005 fda4 	bl	8007a2c <xTaskGetTickCount>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
    ( void ) pvParameters;

    for( ;; )
    {

    	if(robot.cs.cs_events & DO_RS) {
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <AVS_CsTask+0x12c>)
 8001eea:	f993 3000 	ldrsb.w	r3, [r3]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d054      	beq.n	8001fa2 <AVS_CsTask+0xca>
    		/* Manage Robot System */
    		rs_update(&robot.cs.rs);
 8001ef8:	4843      	ldr	r0, [pc, #268]	; (8002008 <AVS_CsTask+0x130>)
 8001efa:	f001 fbc7 	bl	800368c <rs_update>

			robot.cs.speed_a = rs_get_angle(&robot.cs.rs) - old_a;
 8001efe:	4842      	ldr	r0, [pc, #264]	; (8002008 <AVS_CsTask+0x130>)
 8001f00:	f001 fb70 	bl	80035e4 <rs_get_angle>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <AVS_CsTask+0x134>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <AVS_CsTask+0x12c>)
 8001f16:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			robot.cs.speed_d = rs_get_distance(&robot.cs.rs) - old_d;
 8001f1a:	483b      	ldr	r0, [pc, #236]	; (8002008 <AVS_CsTask+0x130>)
 8001f1c:	f001 fb74 	bl	8003608 <rs_get_distance>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <AVS_CsTask+0x138>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <AVS_CsTask+0x12c>)
 8001f32:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			old_a = rs_get_angle(&robot.cs.rs);
 8001f36:	4834      	ldr	r0, [pc, #208]	; (8002008 <AVS_CsTask+0x130>)
 8001f38:	f001 fb54 	bl	80035e4 <rs_get_angle>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <AVS_CsTask+0x134>)
 8001f40:	601a      	str	r2, [r3, #0]
			old_d = rs_get_distance(&robot.cs.rs);
 8001f42:	4831      	ldr	r0, [pc, #196]	; (8002008 <AVS_CsTask+0x130>)
 8001f44:	f001 fb60 	bl	8003608 <rs_get_distance>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <AVS_CsTask+0x138>)
 8001f4c:	601a      	str	r2, [r3, #0]

			robot.cs.acceleration_a = robot.cs.speed_a - old_speed_a;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <AVS_CsTask+0x12c>)
 8001f50:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <AVS_CsTask+0x13c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <AVS_CsTask+0x12c>)
 8001f66:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
			robot.cs.acceleration_d = robot.cs.speed_d - old_speed_d;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <AVS_CsTask+0x12c>)
 8001f6c:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <AVS_CsTask+0x140>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <AVS_CsTask+0x12c>)
 8001f82:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
			old_speed_a = robot.cs.speed_a;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <AVS_CsTask+0x12c>)
 8001f88:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <AVS_CsTask+0x13c>)
 8001f92:	601a      	str	r2, [r3, #0]
			old_speed_d = robot.cs.speed_d;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <AVS_CsTask+0x12c>)
 8001f96:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <AVS_CsTask+0x140>)
 8001fa0:	601a      	str	r2, [r3, #0]
    	}

		if (robot.cs.cs_events & DO_POWER)
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <AVS_CsTask+0x12c>)
 8001fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <AVS_CsTask+0xf8>
		{
			/* Main CS Management */
			vLockDistanceConsign();
 8001fb2:	f000 f959 	bl	8002268 <vLockDistanceConsign>
			cs_manage(&robot.cs.cs_d);
 8001fb6:	4819      	ldr	r0, [pc, #100]	; (800201c <AVS_CsTask+0x144>)
 8001fb8:	f000 fcca 	bl	8002950 <cs_manage>
			vUnlockDistanceConsign();
 8001fbc:	f000 f99a 	bl	80022f4 <vUnlockDistanceConsign>
			vLockAngleConsign();
 8001fc0:	f000 f944 	bl	800224c <vLockAngleConsign>
			cs_manage(&robot.cs.cs_a);
 8001fc4:	4816      	ldr	r0, [pc, #88]	; (8002020 <AVS_CsTask+0x148>)
 8001fc6:	f000 fcc3 	bl	8002950 <cs_manage>
			vUnlockAngleConsign();
 8001fca:	f000 f985 	bl	80022d8 <vUnlockAngleConsign>
 8001fce:	e007      	b.n	8001fe0 <AVS_CsTask+0x108>
			/* Position manager */
		}
		else
		{
			HW_MOT_SetMotorSpeedFastDecay(MOT_CHANNEL_LEFT, 0);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f008 f824 	bl	800a020 <HW_MOT_SetMotorSpeedFastDecay>
			HW_MOT_SetMotorSpeedFastDecay(MOT_CHANNEL_RIGHT,0);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f008 f820 	bl	800a020 <HW_MOT_SetMotorSpeedFastDecay>
		}

		if(robot.cs.cs_events & DO_POS)
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <AVS_CsTask+0x12c>)
 8001fe2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <AVS_CsTask+0x11e>
		{
			position_manage(&robot.cs.pos);
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <AVS_CsTask+0x14c>)
 8001ff2:	f001 f811 	bl	8003018 <position_manage>

		/* Blocking-detection manager: TO BE ADDED */
		/* trajectory_hardstop(pRobot.traj);*/

        /* Wakes-up when required */
        vTaskDelayUntil( &xNextWakeTime, AVERSIVE_PERIOD_TICKS);
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2132      	movs	r1, #50	; 0x32
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 fb31 	bl	8007664 <vTaskDelayUntil>
    }
 8002002:	e771      	b.n	8001ee8 <AVS_CsTask+0x10>
 8002004:	20014668 	.word	0x20014668
 8002008:	2001466c 	.word	0x2001466c
 800200c:	200105fc 	.word	0x200105fc
 8002010:	20010600 	.word	0x20010600
 8002014:	20010604 	.word	0x20010604
 8002018:	20010608 	.word	0x20010608
 800201c:	200147d4 	.word	0x200147d4
 8002020:	20014748 	.word	0x20014748
 8002024:	200146b8 	.word	0x200146b8

08002028 <Os_MotionTrajectoryNear>:
}

bool Os_MotionTrajectoryNear(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	return (bool)trajectory_in_window(&robot.cs.traj, traj_near_window_d, traj_near_window_a);
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <Os_MotionTrajectoryNear+0x38>)
 800202e:	ed93 7b00 	vldr	d7, [r3]
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <Os_MotionTrajectoryNear+0x3c>)
 8002034:	ed93 6b00 	vldr	d6, [r3]
 8002038:	eeb0 1a46 	vmov.f32	s2, s12
 800203c:	eef0 1a66 	vmov.f32	s3, s13
 8002040:	eeb0 0a47 	vmov.f32	s0, s14
 8002044:	eef0 0a67 	vmov.f32	s1, s15
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <Os_MotionTrajectoryNear+0x40>)
 800204a:	f002 f875 	bl	8004138 <trajectory_in_window>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20010000 	.word	0x20010000
 8002064:	20010008 	.word	0x20010008
 8002068:	20014700 	.word	0x20014700

0800206c <Os_MotionTrajectoryFinished>:

bool Os_MotionTrajectoryFinished(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	return (bool)(trajectory_finished(&robot.cs.traj)&&(robot.cs.traj.scheduler_task==NULL));
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <Os_MotionTrajectoryFinished+0x2c>)
 8002072:	f002 f839 	bl	80040e8 <trajectory_finished>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <Os_MotionTrajectoryFinished+0x1e>
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <Os_MotionTrajectoryFinished+0x30>)
 800207e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <Os_MotionTrajectoryFinished+0x1e>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <Os_MotionTrajectoryFinished+0x20>
 800208a:	2300      	movs	r3, #0
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20014700 	.word	0x20014700
 800209c:	20014668 	.word	0x20014668

080020a0 <OS_MotionSetSpeed>:
	traj_near_window_d = (double) window_d;
    traj_near_window_a  = (double) window_a;
}

void OS_MotionSetSpeed(int16_t speed_d, int16_t speed_a)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	460a      	mov	r2, r1
 80020aa:	80fb      	strh	r3, [r7, #6]
 80020ac:	4613      	mov	r3, r2
 80020ae:	80bb      	strh	r3, [r7, #4]
	trajectory_set_speed(&robot.cs.traj, speed_d, speed_a);
 80020b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b8:	4619      	mov	r1, r3
 80020ba:	4803      	ldr	r0, [pc, #12]	; (80020c8 <OS_MotionSetSpeed+0x28>)
 80020bc:	f001 fb96 	bl	80037ec <trajectory_set_speed>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20014700 	.word	0x20014700

080020cc <OS_MotionMoveRelative>:
	robot.cs.cs_events &= ~ DO_POWER;
	robot.cs.cs_events &= ~ DO_CS;
}

void OS_MotionMoveRelative(double d_mm, double a_deg_rel)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	ed87 0b02 	vstr	d0, [r7, #8]
 80020d6:	ed87 1b00 	vstr	d1, [r7]
	trajectory_d_a_rel(&robot.cs.traj, d_mm, a_deg_rel);
 80020da:	ed97 1b00 	vldr	d1, [r7]
 80020de:	ed97 0b02 	vldr	d0, [r7, #8]
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <OS_MotionMoveRelative+0x24>)
 80020e4:	f001 ff78 	bl	8003fd8 <trajectory_d_a_rel>
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20014700 	.word	0x20014700

080020f4 <OS_MotionGoToAuto>:

void OS_MotionGoToAuto(double pos_x, double pos_y)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80020fe:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_xy_abs(&robot.cs.traj, pos_x, pos_y);
 8002102:	ed97 1b00 	vldr	d1, [r7]
 8002106:	ed97 0b02 	vldr	d0, [r7, #8]
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <OS_MotionGoToAuto+0x24>)
 800210c:	f001 ff8c 	bl	8004028 <trajectory_goto_xy_abs>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20014700 	.word	0x20014700

0800211c <OS_MotionGoToFwd>:

void OS_MotionGoToFwd(double pos_x, double pos_y)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	ed87 0b02 	vstr	d0, [r7, #8]
 8002126:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_forward_xy_abs(&robot.cs.traj, pos_x, pos_y);
 800212a:	ed97 1b00 	vldr	d1, [r7]
 800212e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <OS_MotionGoToFwd+0x24>)
 8002134:	f001 ff98 	bl	8004068 <trajectory_goto_forward_xy_abs>
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20014700 	.word	0x20014700

08002144 <OS_MotionGoToBwd>:

void OS_MotionGoToBwd(double pos_x, double pos_y)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	ed87 0b02 	vstr	d0, [r7, #8]
 800214e:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_backward_xy_abs(&robot.cs.traj, pos_x, pos_y);
 8002152:	ed97 1b00 	vldr	d1, [r7]
 8002156:	ed97 0b02 	vldr	d0, [r7, #8]
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <OS_MotionGoToBwd+0x24>)
 800215c:	f001 ffa4 	bl	80040a8 <trajectory_goto_backward_xy_abs>
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20014700 	.word	0x20014700

0800216c <OS_MotionTurnToFront>:

void OS_MotionTurnToFront(double pos_x, double pos_y)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	ed87 0b02 	vstr	d0, [r7, #8]
 8002176:	ed87 1b00 	vstr	d1, [r7]
	trajectory_turnto_xy(&robot.cs.traj, pos_x, pos_y);
 800217a:	ed97 1b00 	vldr	d1, [r7]
 800217e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <OS_MotionTurnToFront+0x24>)
 8002184:	f001 fe4c 	bl	8003e20 <trajectory_turnto_xy>
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20014700 	.word	0x20014700

08002194 <OS_MotionTurnToBehind>:

void OS_MotionTurnToBehind(double pos_x, double pos_y)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	ed87 0b02 	vstr	d0, [r7, #8]
 800219e:	ed87 1b00 	vstr	d1, [r7]
	trajectory_turnto_xy_behind(&robot.cs.traj, pos_x, pos_y);
 80021a2:	ed97 1b00 	vldr	d1, [r7]
 80021a6:	ed97 0b02 	vldr	d0, [r7, #8]
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <OS_MotionTurnToBehind+0x24>)
 80021ac:	f001 fea0 	bl	8003ef0 <trajectory_turnto_xy_behind>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20014700 	.word	0x20014700

080021bc <vCreateAllMutex>:

void vCreateAllMutex(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	xEncoderAngleMutex = xSemaphoreCreateMutex();
 80021c0:	2001      	movs	r0, #1
 80021c2:	f004 fc11 	bl	80069e8 <xQueueCreateMutex>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <vCreateAllMutex+0x44>)
 80021ca:	601a      	str	r2, [r3, #0]
	xEncoderDistanceMutex = xSemaphoreCreateMutex();
 80021cc:	2001      	movs	r0, #1
 80021ce:	f004 fc0b 	bl	80069e8 <xQueueCreateMutex>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <vCreateAllMutex+0x48>)
 80021d6:	601a      	str	r2, [r3, #0]
	xAngleConsignMutex = xSemaphoreCreateMutex();
 80021d8:	2001      	movs	r0, #1
 80021da:	f004 fc05 	bl	80069e8 <xQueueCreateMutex>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <vCreateAllMutex+0x4c>)
 80021e2:	601a      	str	r2, [r3, #0]
	xDistanceConsignMutex = xSemaphoreCreateMutex();
 80021e4:	2001      	movs	r0, #1
 80021e6:	f004 fbff 	bl	80069e8 <xQueueCreateMutex>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <vCreateAllMutex+0x50>)
 80021ee:	601a      	str	r2, [r3, #0]
	xRobotPositionMutex = xSemaphoreCreateMutex();
 80021f0:	2001      	movs	r0, #1
 80021f2:	f004 fbf9 	bl	80069e8 <xQueueCreateMutex>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <vCreateAllMutex+0x54>)
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200105d0 	.word	0x200105d0
 8002204:	200105d4 	.word	0x200105d4
 8002208:	200105d8 	.word	0x200105d8
 800220c:	200105dc 	.word	0x200105dc
 8002210:	200105e0 	.word	0x200105e0

08002214 <vLockEncoderAngle>:
void vLockEncoderAngle(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	xSemaphoreTake(xEncoderAngleMutex, portMAX_DELAY);
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <vLockEncoderAngle+0x18>)
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	2300      	movs	r3, #0
 800221e:	f04f 32ff 	mov.w	r2, #4294967295
 8002222:	2100      	movs	r1, #0
 8002224:	f004 fd8e 	bl	8006d44 <xQueueGenericReceive>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200105d0 	.word	0x200105d0

08002230 <vLockEncoderDistance>:
void vLockEncoderDistance(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	xSemaphoreTake(xEncoderDistanceMutex, portMAX_DELAY);
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <vLockEncoderDistance+0x18>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	f04f 32ff 	mov.w	r2, #4294967295
 800223e:	2100      	movs	r1, #0
 8002240:	f004 fd80 	bl	8006d44 <xQueueGenericReceive>
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200105d4 	.word	0x200105d4

0800224c <vLockAngleConsign>:
void vLockAngleConsign(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	xSemaphoreTake(xAngleConsignMutex, portMAX_DELAY);
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <vLockAngleConsign+0x18>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	f04f 32ff 	mov.w	r2, #4294967295
 800225a:	2100      	movs	r1, #0
 800225c:	f004 fd72 	bl	8006d44 <xQueueGenericReceive>
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200105d8 	.word	0x200105d8

08002268 <vLockDistanceConsign>:
void vLockDistanceConsign(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	xSemaphoreTake(xDistanceConsignMutex, portMAX_DELAY);
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <vLockDistanceConsign+0x18>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	2100      	movs	r1, #0
 8002278:	f004 fd64 	bl	8006d44 <xQueueGenericReceive>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200105dc 	.word	0x200105dc

08002284 <vLockRobotPosition>:
void vLockRobotPosition(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	xSemaphoreTake(xRobotPositionMutex, portMAX_DELAY);
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <vLockRobotPosition+0x18>)
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	2300      	movs	r3, #0
 800228e:	f04f 32ff 	mov.w	r2, #4294967295
 8002292:	2100      	movs	r1, #0
 8002294:	f004 fd56 	bl	8006d44 <xQueueGenericReceive>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200105e0 	.word	0x200105e0

080022a0 <vUnlockEncoderAngle>:
void vUnlockEncoderAngle(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	xSemaphoreGive(xEncoderAngleMutex);
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <vUnlockEncoderAngle+0x18>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	2300      	movs	r3, #0
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	f004 fbb3 	bl	8006a18 <xQueueGenericSend>
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200105d0 	.word	0x200105d0

080022bc <vUnlockEncoderDistance>:
void vUnlockEncoderDistance(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	xSemaphoreGive(xEncoderDistanceMutex);
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <vUnlockEncoderDistance+0x18>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	f004 fba5 	bl	8006a18 <xQueueGenericSend>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200105d4 	.word	0x200105d4

080022d8 <vUnlockAngleConsign>:
void vUnlockAngleConsign(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	xSemaphoreGive(xAngleConsignMutex);
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <vUnlockAngleConsign+0x18>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	2300      	movs	r3, #0
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	f004 fb97 	bl	8006a18 <xQueueGenericSend>
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200105d8 	.word	0x200105d8

080022f4 <vUnlockDistanceConsign>:
void vUnlockDistanceConsign(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	xSemaphoreGive(xDistanceConsignMutex);
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <vUnlockDistanceConsign+0x18>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	f004 fb89 	bl	8006a18 <xQueueGenericSend>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200105dc 	.word	0x200105dc

08002310 <vUnlockRobotPosition>:
void vUnlockRobotPosition(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	xSemaphoreGive(xRobotPositionMutex);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <vUnlockRobotPosition+0x18>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	f004 fb7b 	bl	8006a18 <xQueueGenericSend>
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200105e0 	.word	0x200105e0

0800232c <motion_is_traj_done>:

void motion_set_wp(wp_t *waypoint) {
	xQueueSend(xWaypointQueue, waypoint, 0);
}

bool motion_is_traj_done(wp_t *waypoint) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	if(waypoint->trajectory_must_finish)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7cdb      	ldrb	r3, [r3, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <motion_is_traj_done+0x18>
		return Os_MotionTrajectoryFinished();
 800233c:	f7ff fe96 	bl	800206c <Os_MotionTrajectoryFinished>
 8002340:	4603      	mov	r3, r0
 8002342:	e002      	b.n	800234a <motion_is_traj_done+0x1e>
	else
		return Os_MotionTrajectoryNear();
 8002344:	f7ff fe70 	bl	8002028 <Os_MotionTrajectoryNear>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop

08002354 <motion_send_wp>:
void motion_clear(void){
	wp_t lost;
	while(xQueueReceive(xWaypointQueue, &lost, 0));
}

void motion_send_wp(wp_t *waypoint) {
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    //		phys_apply_offset(&(robot.cs.pos), (waypoint->coord.abs), (waypoint->offset));
    //  }
 // }

    // Pop a waypoint and send the speed and position it
    switch(waypoint->speed) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7c9b      	ldrb	r3, [r3, #18]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d00a      	beq.n	800237a <motion_send_wp+0x26>
 8002364:	2b02      	cmp	r3, #2
 8002366:	d00f      	beq.n	8002388 <motion_send_wp+0x34>
 8002368:	2b00      	cmp	r3, #0
 800236a:	d113      	bne.n	8002394 <motion_send_wp+0x40>
    	case WP_SPEED_FAST:
    		OS_MotionSetSpeed(SPEED_FAST_D, SPEED_FAST_A);
 800236c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002370:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002374:	f7ff fe94 	bl	80020a0 <OS_MotionSetSpeed>
    		break;
 8002378:	e011      	b.n	800239e <motion_send_wp+0x4a>
    	case WP_SPEED_NORMAL:
    		OS_MotionSetSpeed(SPEED_NORMAL_D, SPEED_NORMAL_A);
 800237a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800237e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002382:	f7ff fe8d 	bl	80020a0 <OS_MotionSetSpeed>
    		break;
 8002386:	e00a      	b.n	800239e <motion_send_wp+0x4a>
    	case WP_SPEED_SLOW:
    		OS_MotionSetSpeed(SPEED_SLOW_D, SPEED_SLOW_A);
 8002388:	21c8      	movs	r1, #200	; 0xc8
 800238a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800238e:	f7ff fe87 	bl	80020a0 <OS_MotionSetSpeed>
    		break;
 8002392:	e004      	b.n	800239e <motion_send_wp+0x4a>
    	case WP_SPEED_VERY_SLOW:
    	default: // this is quite an error
    		OS_MotionSetSpeed(SPEED_VERY_SLOW_D, SPEED_VERY_SLOW_A);
 8002394:	2164      	movs	r1, #100	; 0x64
 8002396:	20c8      	movs	r0, #200	; 0xc8
 8002398:	f7ff fe82 	bl	80020a0 <OS_MotionSetSpeed>
    		break;
 800239c:	bf00      	nop
    }

    switch(waypoint->type) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	f200 8099 	bhi.w	80024dc <motion_send_wp+0x188>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <motion_send_wp+0x5c>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023f7 	.word	0x080023f7
 80023b8:	08002425 	.word	0x08002425
 80023bc:	08002453 	.word	0x08002453
 80023c0:	080024af 	.word	0x080024af
 80023c4:	08002481 	.word	0x08002481
    	// "GOTO" motion (full-motions)
    	case WP_GOTO_AUTO:
    		OS_MotionGoToAuto(waypoint->coord.abs.x, waypoint->coord.abs.y);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8c8 	bl	8000564 <__aeabi_i2d>
 80023d4:	4604      	mov	r4, r0
 80023d6:	460d      	mov	r5, r1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8c0 	bl	8000564 <__aeabi_i2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	ec43 2b11 	vmov	d1, r2, r3
 80023ec:	ec45 4b10 	vmov	d0, r4, r5
 80023f0:	f7ff fe80 	bl	80020f4 <OS_MotionGoToAuto>
    		break;
 80023f4:	e073      	b.n	80024de <motion_send_wp+0x18a>
    	case WP_GOTO_FWD:
    		OS_MotionGoToFwd(waypoint->coord.abs.x, waypoint->coord.abs.y);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f8b1 	bl	8000564 <__aeabi_i2d>
 8002402:	4604      	mov	r4, r0
 8002404:	460d      	mov	r5, r1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f8a9 	bl	8000564 <__aeabi_i2d>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	ec43 2b11 	vmov	d1, r2, r3
 800241a:	ec45 4b10 	vmov	d0, r4, r5
 800241e:	f7ff fe7d 	bl	800211c <OS_MotionGoToFwd>
    		break;
 8002422:	e05c      	b.n	80024de <motion_send_wp+0x18a>
    	case WP_GOTO_BWD:
    		OS_MotionGoToBwd(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f89a 	bl	8000564 <__aeabi_i2d>
 8002430:	4604      	mov	r4, r0
 8002432:	460d      	mov	r5, r1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f892 	bl	8000564 <__aeabi_i2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	ec43 2b11 	vmov	d1, r2, r3
 8002448:	ec45 4b10 	vmov	d0, r4, r5
 800244c:	f7ff fe7a 	bl	8002144 <OS_MotionGoToBwd>
    		break;
 8002450:	e045      	b.n	80024de <motion_send_wp+0x18a>

    	// Relative motion
    	case WP_MOVE_REL:
        // Depending on the sign of the "d", we will go forward or backward
    		OS_MotionMoveRelative(waypoint->coord.rel.d, waypoint->coord.rel.a);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f883 	bl	8000564 <__aeabi_i2d>
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f87b 	bl	8000564 <__aeabi_i2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	ec43 2b11 	vmov	d1, r2, r3
 8002476:	ec45 4b10 	vmov	d0, r4, r5
 800247a:	f7ff fe27 	bl	80020cc <OS_MotionMoveRelative>
    		break;
 800247e:	e02e      	b.n	80024de <motion_send_wp+0x18a>

  		// "ORIENT" motions (pure rotation)
    	case WP_ORIENT_BEHIND:
    		OS_MotionTurnToBehind(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f86c 	bl	8000564 <__aeabi_i2d>
 800248c:	4604      	mov	r4, r0
 800248e:	460d      	mov	r5, r1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f864 	bl	8000564 <__aeabi_i2d>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	ec43 2b11 	vmov	d1, r2, r3
 80024a4:	ec45 4b10 	vmov	d0, r4, r5
 80024a8:	f7ff fe74 	bl	8002194 <OS_MotionTurnToBehind>
    		break;
 80024ac:	e017      	b.n	80024de <motion_send_wp+0x18a>
    	case WP_ORIENT_FRONT:
    		OS_MotionTurnToFront(waypoint->coord.abs.x, waypoint->coord.abs.y);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f855 	bl	8000564 <__aeabi_i2d>
 80024ba:	4604      	mov	r4, r0
 80024bc:	460d      	mov	r5, r1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f84d 	bl	8000564 <__aeabi_i2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	ec43 2b11 	vmov	d1, r2, r3
 80024d2:	ec45 4b10 	vmov	d0, r4, r5
 80024d6:	f7ff fe49 	bl	800216c <OS_MotionTurnToFront>
    		break;
 80024da:	e000      	b.n	80024de <motion_send_wp+0x18a>

    	default:
    		// error
    		break;
 80024dc:	bf00      	nop
    } // switch
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop

080024e8 <OS_SHL_Start>:
 * Shell creation
 * -----------------------------------------------------------------------------
 */

void OS_SHL_Start( void )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af02      	add	r7, sp, #8
	/* Create the semaphore used to access the UART Tx. */
	xTxMutex = xSemaphoreCreateMutex();
 80024ee:	2001      	movs	r0, #1
 80024f0:	f004 fa7a 	bl	80069e8 <xQueueCreateMutex>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <OS_SHL_Start+0x40>)
 80024f8:	601a      	str	r2, [r3, #0]
	configASSERT( xTxMutex );
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <OS_SHL_Start+0x40>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <OS_SHL_Start+0x22>
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <OS_SHL_Start+0x44>)
 8002504:	2029      	movs	r0, #41	; 0x29
 8002506:	f7ff f9c7 	bl	8001898 <vAssertCalled>

	/* Register Shell Commands */
	OS_SHL_RegisterCommands();
 800250a:	f7fe fd59 	bl	8000fc0 <OS_SHL_RegisterCommands>

	/* Create that task that handles the console itself. */
	xTaskCreate( 	OS_SHL_Task,				/* The task that implements the command console. */
 800250e:	2300      	movs	r3, #0
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	2301      	movs	r3, #1
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2300      	movs	r3, #0
 8002518:	22fa      	movs	r2, #250	; 0xfa
 800251a:	4905      	ldr	r1, [pc, #20]	; (8002530 <OS_SHL_Start+0x48>)
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <OS_SHL_Start+0x4c>)
 800251e:	f004 fee1 	bl	80072e4 <xTaskCreate>
					"SHL",						/* Text name assigned to the task.  This is just to assist debugging.  The kernel does not use this name itself. */
					250,						/* The size of the stack allocated to the task. */
					NULL,						/* The parameter is not used, so NULL is passed. */
					OS_TASK_PRIORITY_SHELL,		/* The priority allocated to the task. */
					NULL );						/* A handle is not required, so just pass NULL. */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2001060c 	.word	0x2001060c
 800252c:	08011600 	.word	0x08011600
 8002530:	08011620 	.word	0x08011620
 8002534:	08002539 	.word	0x08002539

08002538 <OS_SHL_Task>:
 * Shell Task
 * -----------------------------------------------------------------------------
 */

static void OS_SHL_Task( void *pvParameters )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	char cRxedChar;
	uint8_t ucInputIndex = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]
	( void ) pvParameters;

	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console interface
	will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8002544:	f006 fcd4 	bl	8008ef0 <FreeRTOS_CLIGetOutputBuffer>
 8002548:	6138      	str	r0, [r7, #16]

	/* Send the welcome message. */
	HW_DBG_Puts(pcWelcomeMessage);
 800254a:	4b38      	ldr	r3, [pc, #224]	; (800262c <OS_SHL_Task+0xf4>)
 800254c:	4618      	mov	r0, r3
 800254e:	f006 ffb1 	bl	80094b4 <HW_DBG_Puts>
	{
		/* Wait for the next character.  The while loop is used in case
		INCLUDE_vTaskSuspend is not set to 1 - in which case portMAX_DELAY will
		be a genuine block time rather than an infinite block time. */
		//while( xSerialGetChar( xPort, &cRxedChar, portMAX_DELAY ) != pdPASS );
		cRxedChar = (char) HW_DBG_Get();
 8002552:	f006 ffc5 	bl	80094e0 <HW_DBG_Get>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]

		/* Ensure exclusive access to the UART Tx. */
		if( xSemaphoreTake( xTxMutex, SHELL_MAX_MUTEX_WAIT ) == pdPASS )
 800255a:	4b35      	ldr	r3, [pc, #212]	; (8002630 <OS_SHL_Task+0xf8>)
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002564:	2100      	movs	r1, #0
 8002566:	f004 fbed 	bl	8006d44 <xQueueGenericReceive>
 800256a:	4603      	mov	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d1f0      	bne.n	8002552 <OS_SHL_Task+0x1a>
		{
			/* Echo the character back. */
			//xSerialPutChar( xPort, cRxedChar, portMAX_DELAY );
			HW_DBG_Put(cRxedChar);
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	4618      	mov	r0, r3
 8002574:	f006 ff84 	bl	8009480 <HW_DBG_Put>

			/* Was it the end of the line? */
			if( cRxedChar == '\n' || cRxedChar == '\r' )
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b0a      	cmp	r3, #10
 800257c:	d002      	beq.n	8002584 <OS_SHL_Task+0x4c>
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b0d      	cmp	r3, #13
 8002582:	d127      	bne.n	80025d4 <OS_SHL_Task+0x9c>
			{
				/* Just to space the output from the input. */
				HW_DBG_Puts(pcNewLine);
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <OS_SHL_Task+0xfc>)
 8002586:	4618      	mov	r0, r3
 8002588:	f006 ff94 	bl	80094b4 <HW_DBG_Puts>

				/* See if the command is empty, indicating that the last command
				is to be executed again. */
				if( ucInputIndex == 0 )
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <OS_SHL_Task+0x62>
				{
					/* Copy the last command back into the input string. */
					strcpy( cInputString, cLastInputString );
 8002592:	4929      	ldr	r1, [pc, #164]	; (8002638 <OS_SHL_Task+0x100>)
 8002594:	4829      	ldr	r0, [pc, #164]	; (800263c <OS_SHL_Task+0x104>)
 8002596:	f008 f8d9 	bl	800a74c <strcpy>
				pdFALSE	(indicating there is no more output) as it might
				generate more than one string. */
				do
				{
					/* Get the next output string from the command interpreter. */
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
 800259a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800259e:	6939      	ldr	r1, [r7, #16]
 80025a0:	4826      	ldr	r0, [pc, #152]	; (800263c <OS_SHL_Task+0x104>)
 80025a2:	f006 fc1f 	bl	8008de4 <FreeRTOS_CLIProcessCommand>
 80025a6:	60b8      	str	r0, [r7, #8]

					/* Write the generated string to the UART. */
					HW_DBG_Puts(pcOutputString);
 80025a8:	6938      	ldr	r0, [r7, #16]
 80025aa:	f006 ff83 	bl	80094b4 <HW_DBG_Puts>

				} while( xReturned != pdFALSE );
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f2      	bne.n	800259a <OS_SHL_Task+0x62>

				/* All the strings generated by the input command have been
				sent.  Clear the input string ready to receive the next command.
				Remember the command that was just processed first in case it is
				to be processed again. */
				strcpy( cLastInputString, cInputString );
 80025b4:	4921      	ldr	r1, [pc, #132]	; (800263c <OS_SHL_Task+0x104>)
 80025b6:	4820      	ldr	r0, [pc, #128]	; (8002638 <OS_SHL_Task+0x100>)
 80025b8:	f008 f8c8 	bl	800a74c <strcpy>
				ucInputIndex = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	75fb      	strb	r3, [r7, #23]
				memset( cInputString, 0x00, SHELL_MAX_INPUT_SIZE );
 80025c0:	2232      	movs	r2, #50	; 0x32
 80025c2:	2100      	movs	r1, #0
 80025c4:	481d      	ldr	r0, [pc, #116]	; (800263c <OS_SHL_Task+0x104>)
 80025c6:	f007 ffd8 	bl	800a57a <memset>
				HW_DBG_Puts(pcEndOfOutputMessage);
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <OS_SHL_Task+0x108>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f006 ff71 	bl	80094b4 <HW_DBG_Puts>
 80025d2:	e023      	b.n	800261c <OS_SHL_Task+0xe4>
			}
			else
			{
				if( cRxedChar == '\r' )
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b0d      	cmp	r3, #13
 80025d8:	d020      	beq.n	800261c <OS_SHL_Task+0xe4>
				{
					/* Ignore the character. */
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d002      	beq.n	80025e6 <OS_SHL_Task+0xae>
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b7f      	cmp	r3, #127	; 0x7f
 80025e4:	d10a      	bne.n	80025fc <OS_SHL_Task+0xc4>
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <OS_SHL_Task+0xe4>
					{
						ucInputIndex--;
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
						cInputString[ ucInputIndex ] = '\0';
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <OS_SHL_Task+0x104>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	54d1      	strb	r1, [r2, r3]
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 80025fa:	e00f      	b.n	800261c <OS_SHL_Task+0xe4>
				else
				{
					/* A character was entered.  Add it to the string entered so
					far.  When a \n is entered the complete	string will be
					passed to the command interpreter. */
					if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b1f      	cmp	r3, #31
 8002600:	d90c      	bls.n	800261c <OS_SHL_Task+0xe4>
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b7e      	cmp	r3, #126	; 0x7e
 8002606:	d809      	bhi.n	800261c <OS_SHL_Task+0xe4>
					{
						if( ucInputIndex < SHELL_MAX_INPUT_SIZE )
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2b31      	cmp	r3, #49	; 0x31
 800260c:	d806      	bhi.n	800261c <OS_SHL_Task+0xe4>
						{
							cInputString[ ucInputIndex ] = cRxedChar;
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	490a      	ldr	r1, [pc, #40]	; (800263c <OS_SHL_Task+0x104>)
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	54ca      	strb	r2, [r1, r3]
							ucInputIndex++;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	3301      	adds	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
					}
				}
			}

			/* Must ensure to give the mutex back. */
			xSemaphoreGive( xTxMutex );
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <OS_SHL_Task+0xf8>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	f004 f9f7 	bl	8006a18 <xQueueGenericSend>
		}
	}
 800262a:	e792      	b.n	8002552 <OS_SHL_Task+0x1a>
 800262c:	08011488 	.word	0x08011488
 8002630:	2001060c 	.word	0x2001060c
 8002634:	080115fc 	.word	0x080115fc
 8002638:	20010644 	.word	0x20010644
 800263c:	20010610 	.word	0x20010610
 8002640:	080115f4 	.word	0x080115f4

08002644 <rs_get_polar_from_wheels>:
/**
 * convert the values of wheels encoders (left, right) into (distance,
 * angle)
 */
void rs_get_polar_from_wheels(struct rs_polar *p_dst, struct rs_wheels *w_src)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	p_dst->distance = (w_src->right + w_src->left) / 2;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4413      	add	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	da00      	bge.n	800265e <rs_get_polar_from_wheels+0x1a>
 800265c:	3301      	adds	r3, #1
 800265e:	105b      	asrs	r3, r3, #1
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	601a      	str	r2, [r3, #0]
	p_dst->angle    = (w_src->right - w_src->left) / 2;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	da00      	bge.n	8002676 <rs_get_polar_from_wheels+0x32>
 8002674:	3301      	adds	r3, #1
 8002676:	105b      	asrs	r3, r3, #1
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	605a      	str	r2, [r3, #4]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <rs_get_wheels_from_polar>:

/**
 * convert (distance, angle) into (left, right)
 */
void rs_get_wheels_from_polar(struct rs_wheels *w_dst, struct rs_polar *p_src)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	w_dst->left  = p_src->distance - p_src->angle;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	1ad2      	subs	r2, r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	601a      	str	r2, [r3, #0]
	w_dst->right = p_src->distance + p_src->angle;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	441a      	add	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <bd_init>:

#include <blocking_detection_manager.h>

/** init module, give the robot system to use as a parameter */
void bd_init(struct blocking_detection * bd)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	memset(bd, 0, sizeof(*bd));
 80026c8:	222c      	movs	r2, #44	; 0x2c
 80026ca:	2100      	movs	r1, #0
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f007 ff54 	bl	800a57a <memset>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <bd_set_current_thresholds>:

/* thresholds */
void bd_set_current_thresholds(struct blocking_detection * bd, 
			       int32_t k1, int32_t k2, 
			       uint32_t i_thres, uint16_t cpt_thres)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
	bd->k1 = k1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
	bd->k2 = k2;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	60da      	str	r2, [r3, #12]
	bd->i_thres = i_thres;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	605a      	str	r2, [r3, #4]
	bd->cpt_thres = cpt_thres;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8b3a      	ldrh	r2, [r7, #24]
 8002700:	821a      	strh	r2, [r3, #16]
	bd->cpt = 0;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	825a      	strh	r2, [r3, #18]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <bd_set_speed_threshold>:

/* speed threshold */
void bd_set_speed_threshold(struct blocking_detection * bd, 
			    uint16_t speed)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
	bd->speed_thres = speed;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	829a      	strh	r2, [r3, #20]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <safe_filter>:
 * - if pointer is null, return the IN value
 * - else apply filter
 */
static inline uint32_t
safe_filter(int32_t (*f)(void *, int32_t), void * param, int32_t value)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
	int32_t (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <safe_filter+0x26>
		return f_tmp(param_tmp, value);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6938      	ldr	r0, [r7, #16]
 8002754:	4798      	blx	r3
 8002756:	4603      	mov	r3, r0
 8002758:	e000      	b.n	800275c <safe_filter+0x28>
	}
	return value;
 800275a:	687b      	ldr	r3, [r7, #4]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <safe_getprocessout>:
 * - if pointer is null, return 0
 * - else return the value processed by the function
 */
static inline uint32_t
safe_getprocessout(int32_t (*f)(void *), void * param)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	int32_t (*f_tmp)(void *);
	void * param_tmp;
	f_tmp = f;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]
	param_tmp = param;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	60bb      	str	r3, [r7, #8]
	if (f_tmp) {
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <safe_getprocessout+0x22>
		return f_tmp(param_tmp);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68b8      	ldr	r0, [r7, #8]
 8002780:	4798      	blx	r3
 8002782:	4603      	mov	r3, r0
 8002784:	e000      	b.n	8002788 <safe_getprocessout+0x24>
	}
	return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <safe_setprocessin>:
 * - if pointer is null, don't do anything
 * - else call the processin with the parameters
 */
static inline void
safe_setprocessin(void (*f)(void *, int32_t), void * param, int32_t value)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
	void (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <safe_setprocessin+0x22>
		f_tmp(param_tmp, value);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	6938      	ldr	r0, [r7, #16]
 80027b0:	4798      	blx	r3
	}
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop

080027bc <cs_init>:

/**********************************************/

void cs_init(struct cs* cs)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    cs->consign_filter = NULL;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    cs->consign_filter_params = NULL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]

    cs->correct_filter = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    cs->correct_filter_params = NULL;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]

    cs->feedback_filter = NULL;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
    cs->feedback_filter_params = NULL;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]

    cs->process_out = NULL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
    cs->process_out_params = NULL;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]

    cs->process_in = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
    cs->process_in_params = NULL;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

    cs->consign_value = 0;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
    cs->error_value = 0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
    cs->out_value = 0;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	639a      	str	r2, [r3, #56]	; 0x38

    return;
 8002812:	bf00      	nop
}
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <cs_set_consign_filter>:


void cs_set_consign_filter(struct cs* cs, int32_t (*consign_filter)(void*, int32_t), void* consign_filter_params)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
    cs->consign_filter = consign_filter;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	601a      	str	r2, [r3, #0]
    cs->consign_filter_params = consign_filter_params;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	605a      	str	r2, [r3, #4]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <cs_set_correct_filter>:



void cs_set_correct_filter(struct cs* cs, int32_t (*correct_filter)(void*, int32_t), void* correct_filter_params)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
    cs->correct_filter = correct_filter;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	609a      	str	r2, [r3, #8]
    cs->correct_filter_params = correct_filter_params;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <cs_set_process_in>:
    cs->feedback_filter_params = feedback_filter_params;
}


void cs_set_process_in(struct cs* cs, void (*process_in)(void*, int32_t), void* process_in_params)
{        
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
    cs->process_in = process_in;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	621a      	str	r2, [r3, #32]
    cs->process_in_params = process_in_params;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <cs_set_process_out>:



void cs_set_process_out(struct cs* cs, int32_t (*process_out)(void*), void* process_out_params)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
    cs->process_out = process_out;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	619a      	str	r2, [r3, #24]
    cs->process_out_params = process_out_params;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	61da      	str	r2, [r3, #28]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <cs_do_process>:



int32_t cs_do_process(struct cs* cs, int32_t consign)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]

    static int i=0;
    int32_t process_out_value = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]

    /* save the consign value into the structure */
    cs->consign_value = consign;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

    DEBUG("%d %ld ", i++, consign);

    /* if the consign filter exist */
    cs->filtered_consign_value = consign = safe_filter(cs->consign_filter, cs->consign_filter_params, consign);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7ff ff30 	bl	8002734 <safe_filter>
 80028d4:	4603      	mov	r3, r0
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
	
    DEBUG("%ld ", cs->filtered_consign_value);

    /* read the process out if defined */
    process_out_value = safe_getprocessout(cs->process_out, cs->process_out_params);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7ff ff3b 	bl	8002764 <safe_getprocessout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	60fb      	str	r3, [r7, #12]

    DEBUG("%ld ", process_out_value);

    /* apply the feedback filter if defined */
    process_out_value = safe_filter(cs->feedback_filter, cs->feedback_filter_params, process_out_value);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6918      	ldr	r0, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7ff ff19 	bl	8002734 <safe_filter>
 8002902:	4603      	mov	r3, r0
 8002904:	60fb      	str	r3, [r7, #12]
    cs->filtered_feedback_value = process_out_value;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

    DEBUG("%ld ", process_out_value);

    /* substract consign and process out and put it into error */
    cs->error_value = cs->filtered_consign_value - process_out_value ;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad2      	subs	r2, r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
    
    DEBUG("%ld ", cs->error_value);

    /* apply the correct filter to error_value and put it into out_value */
    cs->out_value = safe_filter(cs->correct_filter, cs->correct_filter_params, cs->error_value);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6898      	ldr	r0, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68d9      	ldr	r1, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff ff05 	bl	8002734 <safe_filter>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
 
    DEBUG("%ld\n", cs->out_value);

    /* send out_value to process in*/
    safe_setprocessin (cs->process_in, cs->process_in_params, cs->out_value);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a18      	ldr	r0, [r3, #32]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	461a      	mov	r2, r3
 8002940:	f7ff ff26 	bl	8002790 <safe_setprocessin>

    /* return the out value */
    return (cs->out_value);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <cs_manage>:



void cs_manage(void * data)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    struct cs* cs = data;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60fb      	str	r3, [r7, #12]
    cs_do_process(cs, cs->consign_value);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	4619      	mov	r1, r3
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ffa4 	bl	80028b0 <cs_do_process>
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <cs_get_consign>:
}



int32_t cs_get_consign(struct cs* cs)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    int32_t tmp;
    tmp = cs->consign_value;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	60fb      	str	r3, [r7, #12]

    return tmp;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <cs_get_filtered_consign>:

int32_t cs_get_filtered_consign(struct cs* cs)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    int32_t tmp;
    tmp = cs->filtered_consign_value;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	60fb      	str	r3, [r7, #12]

    return tmp;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <cs_set_consign>:
}



void cs_set_consign(struct cs* cs, int32_t v)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    /* set the consign */
    cs->consign_value = v;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
}        
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <pid_init>:
#include <pid.h>


/** this function will initialize all fieds of pid structure to 0 */
void pid_init(struct pid_filter *p)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	memset(p, 0, sizeof(*p));
 80029cc:	2234      	movs	r2, #52	; 0x34
 80029ce:	2100      	movs	r1, #0
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f007 fdd2 	bl	800a57a <memset>
	p->gain_P = 1 ;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	801a      	strh	r2, [r3, #0]
	p->derivate_nb_samples = 1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	71da      	strb	r2, [r3, #7]
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop

080029ec <pid_set_gains>:
	p->prev_D = 0;
	p->prev_out = 0;
}

void pid_set_gains(struct pid_filter *p, int16_t gp, int16_t gi, int16_t gd)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
	p->gain_P  = gp;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	897a      	ldrh	r2, [r7, #10]
 8002a0a:	801a      	strh	r2, [r3, #0]
	p->gain_I  = gi;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	805a      	strh	r2, [r3, #2]
	p->gain_D  = gd;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	809a      	strh	r2, [r3, #4]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <pid_set_maximums>:

void pid_set_maximums(struct pid_filter *p, int32_t max_in, int32_t max_I, int32_t max_out)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
	p->max_in  = max_in;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	61da      	str	r2, [r3, #28]
	p->max_I   = max_I;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]
	p->max_out = max_out;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <pid_set_out_shift>:

void pid_set_out_shift(struct pid_filter *p, uint8_t out_shift)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
	p->out_shift=out_shift;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	719a      	strb	r2, [r3, #6]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <pid_set_derivate_filter>:

int8_t pid_set_derivate_filter(struct pid_filter *p, uint8_t nb_samples)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
	int8_t ret;
	if (nb_samples > PID_DERIVATE_FILTER_MAX_SIZE) {
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d902      	bls.n	8002a88 <pid_set_derivate_filter+0x18>
		ret = -1;
 8002a82:	23ff      	movs	r3, #255	; 0xff
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e004      	b.n	8002a92 <pid_set_derivate_filter+0x22>
	}
	else {
		p->derivate_nb_samples = nb_samples;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	71da      	strb	r2, [r3, #7]
		ret = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <pid_do_filter>:
	return ret;
}

/* first parameter should be a (struct pid_filter *) */
int32_t pid_do_filter(void * data, int32_t in)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	int32_t derivate ;
	int32_t command ;
	struct pid_filter * p = data;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
	*
	* We can apply a filter to reduce noise on the derivate term,
	* by using a bigger period.
	*/
	
	prev_index = p->index + 1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7a1b      	ldrb	r3, [r3, #8]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	74fb      	strb	r3, [r7, #19]
	if (prev_index >= p->derivate_nb_samples)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	79db      	ldrb	r3, [r3, #7]
 8002abe:	7cfa      	ldrb	r2, [r7, #19]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d301      	bcc.n	8002ac8 <pid_do_filter+0x24>
		prev_index = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	74fb      	strb	r3, [r7, #19]

	/* saturate input... it influences integral an derivate */
	if (p->max_in)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <pid_do_filter+0x52>
		S_MAX(in, p->max_in) ;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	da03      	bge.n	8002ae2 <pid_do_filter+0x3e>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	e009      	b.n	8002af6 <pid_do_filter+0x52>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	425a      	negs	r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dd03      	ble.n	8002af6 <pid_do_filter+0x52>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	425b      	negs	r3, r3
 8002af4:	603b      	str	r3, [r7, #0]

	derivate = in - p->prev_samples[prev_index];
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	3302      	adds	r3, #2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	60bb      	str	r3, [r7, #8]
	p->integral += in ;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	441a      	add	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

	if (p->max_I)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <pid_do_filter+0xa6>
		S_MAX(p->integral, p->max_I) ;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dd04      	ble.n	8002b32 <pid_do_filter+0x8e>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b30:	e00b      	b.n	8002b4a <pid_do_filter+0xa6>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	425b      	negs	r3, r3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	da04      	bge.n	8002b4a <pid_do_filter+0xa6>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	425a      	negs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	fb03 f202 	mul.w	r2, r3, r2
		p->integral * p->gain_I +
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8002b62:	fb01 f303 	mul.w	r3, r1, r3

	if (p->max_I)
		S_MAX(p->integral, p->max_I) ;

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8002b66:	441a      	add	r2, r3
		p->integral * p->gain_I +
		(derivate * p->gain_D) / p->derivate_nb_samples ;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	fb03 f301 	mul.w	r3, r3, r1
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	79c9      	ldrb	r1, [r1, #7]
 8002b7a:	fb93 f3f1 	sdiv	r3, r3, r1

	if (p->max_I)
		S_MAX(p->integral, p->max_I) ;

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8002b7e:	4413      	add	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
		p->integral * p->gain_I +
		(derivate * p->gain_D) / p->derivate_nb_samples ;

	if ( command < 0 )
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da07      	bge.n	8002b98 <pid_do_filter+0xf4>
		command = -( -command >> p->out_shift );
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	425b      	negs	r3, r3
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	7992      	ldrb	r2, [r2, #6]
 8002b90:	4113      	asrs	r3, r2
 8002b92:	425b      	negs	r3, r3
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e005      	b.n	8002ba4 <pid_do_filter+0x100>
	else
		command = command >> p->out_shift ;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	799b      	ldrb	r3, [r3, #6]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	4113      	asrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

	if (p->max_out)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <pid_do_filter+0x12e>
		S_MAX (command, p->max_out) ;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	da03      	bge.n	8002bbe <pid_do_filter+0x11a>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e009      	b.n	8002bd2 <pid_do_filter+0x12e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	425a      	negs	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dd03      	ble.n	8002bd2 <pid_do_filter+0x12e>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	425b      	negs	r3, r3
 8002bd0:	617b      	str	r3, [r7, #20]


	/* backup of current error value (for the next calcul of derivate value) */
	p->prev_samples[p->index] = in ;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	7a1b      	ldrb	r3, [r3, #8]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	605a      	str	r2, [r3, #4]
	p->index = prev_index; /* next index is prev_index */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	7cfa      	ldrb	r2, [r7, #19]
 8002be6:	721a      	strb	r2, [r3, #8]
	p->prev_D = derivate ;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
	p->prev_out = command ;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
	
	return command;
 8002bf4:	697b      	ldr	r3, [r7, #20]
} 
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop

08002c04 <quadramp_init>:
#include <quadramp.h>

#define NEXT(n, i)  (((n) + (i)/(n)) >> 1)

void quadramp_init(struct quadramp_filter * q)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	memset(q, 0, sizeof(*q));
 8002c0c:	221c      	movs	r2, #28
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f007 fcb2 	bl	800a57a <memset>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop

08002c20 <quadramp_set_2nd_order_vars>:
}

void quadramp_set_2nd_order_vars(struct quadramp_filter * q, 
				 uint32_t var_2nd_ord_pos, 
				 uint32_t var_2nd_ord_neg)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
	q->var_2nd_ord_pos = var_2nd_ord_pos;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	601a      	str	r2, [r3, #0]
	q->var_2nd_ord_neg = var_2nd_ord_neg;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <quadramp_set_1st_order_vars>:

void quadramp_set_1st_order_vars(struct quadramp_filter * q, 
				 uint32_t var_1st_ord_pos, 
				 uint32_t var_1st_ord_neg)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
	q->var_1st_ord_pos = var_1st_ord_pos;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
	q->var_1st_ord_neg = var_1st_ord_neg;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <quadramp_do_filter>:
 * \param data should be a (struct quadramp_filter *) pointer
 * \param in is the input of the filter
 * 
 */
int32_t quadramp_do_filter(void * data, int32_t in)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b08f      	sub	sp, #60	; 0x3c
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
	struct quadramp_filter * q = data;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	61fb      	str	r3, [r7, #28]
	int32_t d ;
	int32_t pos_target;
	int32_t var_1st_ord_pos = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t var_1st_ord_neg = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t var_2nd_ord_pos = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t var_2nd_ord_neg = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t previous_var, previous_out ;

	if ( q->var_1st_ord_pos )
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <quadramp_do_filter+0x2c>
		var_1st_ord_pos = q->var_1st_ord_pos ;  
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30

	if ( q->var_1st_ord_neg )
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <quadramp_do_filter+0x3c>
		var_1st_ord_neg = -q->var_1st_ord_neg ;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	425b      	negs	r3, r3
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ( q->var_2nd_ord_pos )
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <quadramp_do_filter+0x4a>
		var_2nd_ord_pos = q->var_2nd_ord_pos ;  
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28

	if ( q->var_2nd_ord_neg )
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <quadramp_do_filter+0x5a>
		var_2nd_ord_neg = -q->var_2nd_ord_neg ;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	425b      	negs	r3, r3
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

	previous_var = q->previous_var;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	623b      	str	r3, [r7, #32]
	previous_out = q->previous_out;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	61bb      	str	r3, [r7, #24]

	d = in - previous_out ;
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dd3b      	ble.n	8002d54 <quadramp_do_filter+0xec>
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d038      	beq.n	8002d54 <quadramp_do_filter+0xec>
		int32_t ramp_pos;
		/* var_2nd_ord_neg < 0 */
		/* real EQ : sqrt( var_2nd_ord_neg^2/4 - 2.d.var_2nd_ord_neg ) + var_2nd_ord_neg/2 */
		ramp_pos = sqrt( (var_2nd_ord_neg*var_2nd_ord_neg)/4 - 2*d*var_2nd_ord_neg ) + var_2nd_ord_neg/2;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da00      	bge.n	8002cf0 <quadramp_do_filter+0x88>
 8002cee:	3303      	adds	r3, #3
 8002cf0:	109b      	asrs	r3, r3, #2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	1acb      	subs	r3, r1, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc2f 	bl	8000564 <__aeabi_i2d>
 8002d06:	4603      	mov	r3, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	ec44 3b10 	vmov	d0, r3, r4
 8002d0e:	f00c faa1 	bl	800f254 <sqrt>
 8002d12:	ec56 5b10 	vmov	r5, r6, d0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da00      	bge.n	8002d1e <quadramp_do_filter+0xb6>
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	105b      	asrs	r3, r3, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc1f 	bl	8000564 <__aeabi_i2d>
 8002d26:	4603      	mov	r3, r0
 8002d28:	460c      	mov	r4, r1
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	4631      	mov	r1, r6
 8002d32:	f7fd facb 	bl	80002cc <__adddf3>
 8002d36:	4603      	mov	r3, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	f7fd ff27 	bl	8000b90 <__aeabi_d2iz>
 8002d42:	4603      	mov	r3, r0
 8002d44:	613b      	str	r3, [r7, #16]

		if(ramp_pos < var_1st_ord_pos)
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	da42      	bge.n	8002dd4 <quadramp_do_filter+0x16c>
			var_1st_ord_pos = ramp_pos ;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
	previous_out = q->previous_out;

	d = in - previous_out ;

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 8002d52:	e03f      	b.n	8002dd4 <quadramp_do_filter+0x16c>

		if(ramp_pos < var_1st_ord_pos)
			var_1st_ord_pos = ramp_pos ;
	}

	else if (d < 0 && var_2nd_ord_pos) {
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da3d      	bge.n	8002dd6 <quadramp_do_filter+0x16e>
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03a      	beq.n	8002dd6 <quadramp_do_filter+0x16e>
		int32_t ramp_neg;
    
		/* var_2nd_ord_pos > 0 */
		/* real EQ : sqrt( var_2nd_ord_pos^2/4 - 2.d.var_2nd_ord_pos ) - var_2nd_ord_pos/2 */
		ramp_neg = -sqrt( (var_2nd_ord_pos*var_2nd_ord_pos)/4 - 2*d*var_2nd_ord_pos ) - var_2nd_ord_pos/2;
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da00      	bge.n	8002d6e <quadramp_do_filter+0x106>
 8002d6c:	3303      	adds	r3, #3
 8002d6e:	109b      	asrs	r3, r3, #2
 8002d70:	4619      	mov	r1, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	1acb      	subs	r3, r1, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbf0 	bl	8000564 <__aeabi_i2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	ec43 2b10 	vmov	d0, r2, r3
 8002d8c:	f00c fa62 	bl	800f254 <sqrt>
 8002d90:	ec53 2b10 	vmov	r2, r3, d0
 8002d94:	4614      	mov	r4, r2
 8002d96:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da00      	bge.n	8002da2 <quadramp_do_filter+0x13a>
 8002da0:	3301      	adds	r3, #1
 8002da2:	105b      	asrs	r3, r3, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbdd 	bl	8000564 <__aeabi_i2d>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fa89 	bl	80002c8 <__aeabi_dsub>
 8002db6:	4603      	mov	r3, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	f7fd fee7 	bl	8000b90 <__aeabi_d2iz>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	60fb      	str	r3, [r7, #12]
	
		/* ramp_neg < 0 */
		if(ramp_neg > var_1st_ord_neg)
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	dd03      	ble.n	8002dd6 <quadramp_do_filter+0x16e>
			var_1st_ord_neg = ramp_neg ;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	e000      	b.n	8002dd6 <quadramp_do_filter+0x16e>
	previous_out = q->previous_out;

	d = in - previous_out ;

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 8002dd4:	bf00      	nop
			var_1st_ord_neg = ramp_neg ;
	}
    
	/* try to set the speed : can we reach the speed with our acceleration ? */
	/* si on va moins vite que la Vmax */
	if ( previous_var < var_1st_ord_pos )  {
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	da0d      	bge.n	8002dfa <quadramp_do_filter+0x192>
		/* acceleration would be to high, we reduce the speed */
		/* si rampe acceleration active ET qu'on ne peut pas atteindre Vmax,
		 * on sature Vmax a Vcourante + acceleration */
		if (var_2nd_ord_pos && ( var_1st_ord_pos - previous_var > var_2nd_ord_pos) )
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <quadramp_do_filter+0x1b4>
 8002de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	1ad2      	subs	r2, r2, r3
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dd15      	ble.n	8002e1c <quadramp_do_filter+0x1b4>
			var_1st_ord_pos = previous_var + var_2nd_ord_pos ;
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	4413      	add	r3, r2
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
 8002df8:	e010      	b.n	8002e1c <quadramp_do_filter+0x1b4>
	}
	/* si on va plus vite que Vmax */
	else if ( previous_var > var_1st_ord_pos )  { 
 8002dfa:	6a3a      	ldr	r2, [r7, #32]
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	dd0c      	ble.n	8002e1c <quadramp_do_filter+0x1b4>
		/* deceleration would be to high, we increase the speed */
		/* si rampe deceleration active ET qu'on ne peut pas atteindre Vmax,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_neg && ( var_1st_ord_pos - previous_var < var_2nd_ord_neg) )
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <quadramp_do_filter+0x1b4>
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	429a      	cmp	r2, r3
 8002e12:	da03      	bge.n	8002e1c <quadramp_do_filter+0x1b4>
			var_1st_ord_pos = previous_var + var_2nd_ord_neg;
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	4413      	add	r3, r2
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
	}
  
	/* same for the neg */
	/* si on va plus vite que la Vmin (en negatif : en vrai la vitesse absolue est inferieure) */
	if ( previous_var > var_1st_ord_neg )  {
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	dd0d      	ble.n	8002e40 <quadramp_do_filter+0x1d8>
		/* acceleration would be to high, we reduce the speed */
		/* si rampe deceleration active ET qu'on ne peut pas atteindre Vmin,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_neg && ( var_1st_ord_neg - previous_var < var_2nd_ord_neg) )
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01b      	beq.n	8002e62 <quadramp_do_filter+0x1fa>
 8002e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	429a      	cmp	r2, r3
 8002e34:	da15      	bge.n	8002e62 <quadramp_do_filter+0x1fa>
			var_1st_ord_neg = previous_var + var_2nd_ord_neg ;
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	4413      	add	r3, r2
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3e:	e010      	b.n	8002e62 <quadramp_do_filter+0x1fa>
	}
	/* si on va moins vite que Vmin (mais vitesse absolue superieure) */
	else if ( previous_var < var_1st_ord_neg )  {
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	da0c      	bge.n	8002e62 <quadramp_do_filter+0x1fa>
		/* deceleration would be to high, we increase the speed */
		/* si rampe acceleration active ET qu'on ne peut pas atteindre Vmin,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_pos && (var_1st_ord_neg - previous_var > var_2nd_ord_pos) )
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <quadramp_do_filter+0x1fa>
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	1ad2      	subs	r2, r2, r3
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	429a      	cmp	r2, r3
 8002e58:	dd03      	ble.n	8002e62 <quadramp_do_filter+0x1fa>
			var_1st_ord_neg = previous_var + var_2nd_ord_pos;
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	4413      	add	r3, r2
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/*
	 * Position consign : can we reach the position with our speed ?
	 */
	if ( /* var_1st_ord_pos &&  */d > var_1st_ord_pos ) {
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	429a      	cmp	r2, r3
 8002e68:	dd06      	ble.n	8002e78 <quadramp_do_filter+0x210>
		pos_target = previous_out + var_1st_ord_pos ;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	4413      	add	r3, r2
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = var_1st_ord_pos ;
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	e010      	b.n	8002e9a <quadramp_do_filter+0x232>
	}
	else if ( /* var_1st_ord_neg &&  */d < var_1st_ord_neg ) {
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	da06      	bge.n	8002e8e <quadramp_do_filter+0x226>
		pos_target = previous_out + var_1st_ord_neg ;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	4413      	add	r3, r2
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = var_1st_ord_neg ;
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	e005      	b.n	8002e9a <quadramp_do_filter+0x232>
	}
	else {
		pos_target = previous_out + d ;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	4413      	add	r3, r2
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = d ;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	623b      	str	r3, [r7, #32]
	}

	// update previous_out and previous_var
	q->previous_var = previous_var;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	6a3a      	ldr	r2, [r7, #32]
 8002e9e:	611a      	str	r2, [r3, #16]
	q->previous_out = pos_target;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea4:	615a      	str	r2, [r3, #20]
	q->previous_in = in;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	619a      	str	r2, [r3, #24]

	return pos_target ;
 8002eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	373c      	adds	r7, #60	; 0x3c
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	bf00      	nop

08002eb8 <vect2_cart2pol>:
   return;
}

/* Convert a cartesian vector to a polar one */
void vect2_cart2pol(vect2_cart* vc, vect2_pol* vp)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
   if(vc == NULL) return;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d04b      	beq.n	8002f60 <vect2_cart2pol+0xa8>
   if(vp == NULL) return;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04a      	beq.n	8002f64 <vect2_cart2pol+0xac>
   
   vp->r = (Real)( sqrt((vc->x)*(vc->x)+(vc->y)*(vc->y)) );
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	cb18      	ldmia	r3, {r3, r4}
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4623      	mov	r3, r4
 8002edc:	f7fd fba8 	bl	8000630 <__aeabi_dmul>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	461d      	mov	r5, r3
 8002ee6:	4626      	mov	r6, r4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	f7fd fb9a 	bl	8000630 <__aeabi_dmul>
 8002efc:	4603      	mov	r3, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	4628      	mov	r0, r5
 8002f06:	4631      	mov	r1, r6
 8002f08:	f7fd f9e0 	bl	80002cc <__adddf3>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	ec44 3b17 	vmov	d7, r3, r4
 8002f14:	eeb0 0a47 	vmov.f32	s0, s14
 8002f18:	eef0 0a67 	vmov.f32	s1, s15
 8002f1c:	f00c f99a 	bl	800f254 <sqrt>
 8002f20:	eeb0 7a40 	vmov.f32	s14, s0
 8002f24:	eef0 7a60 	vmov.f32	s15, s1
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	ed83 7b00 	vstr	d7, [r3]
   vp->theta = (Real)atan2(vc->y,vc->x);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	ed93 7b02 	vldr	d7, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	ed93 6b00 	vldr	d6, [r3]
 8002f3a:	eeb0 1a46 	vmov.f32	s2, s12
 8002f3e:	eef0 1a66 	vmov.f32	s3, s13
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	eef0 0a67 	vmov.f32	s1, s15
 8002f4a:	f00c f981 	bl	800f250 <atan2>
 8002f4e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f52:	eef0 7a60 	vmov.f32	s15, s1
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	ed83 7b02 	vstr	d7, [r3, #8]
   
   return;
 8002f5c:	bf00      	nop
 8002f5e:	e002      	b.n	8002f66 <vect2_cart2pol+0xae>
}

/* Convert a cartesian vector to a polar one */
void vect2_cart2pol(vect2_cart* vc, vect2_pol* vp)
{
   if(vc == NULL) return;
 8002f60:	bf00      	nop
 8002f62:	e000      	b.n	8002f66 <vect2_cart2pol+0xae>
   if(vp == NULL) return;
 8002f64:	bf00      	nop
   
   vp->r = (Real)( sqrt((vc->x)*(vc->x)+(vc->y)*(vc->y)) );
   vp->theta = (Real)atan2(vc->y,vc->x);
   
   return;
}
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f6c <position_init>:
#include <position_manager.h>
#include "blueboard.h"

/** initialization of the robot_position pos, everthing is set to 0 */
void position_init(struct robot_position *pos)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	memset(pos, 0, sizeof(struct robot_position));
 8002f74:	2248      	movs	r2, #72	; 0x48
 8002f76:	2100      	movs	r1, #0
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f007 fafe 	bl	800a57a <memset>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop

08002f88 <position_set_related_robot_system>:
 * Save in pos structure the pointer to the associated robot_system. 
 * The robot_system structure is used to get values from virtual encoders
 * that return angle and distance.
 */
void position_set_related_robot_system(struct robot_position *pos, struct robot_system *rs)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	pos->rs = rs;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <position_set_physical_params>:
 *  - number of impulsions for 1 mm (distance)
 *  - number of impulsions for 1 degree (angle)
 */
void position_set_physical_params(struct robot_position *pos, double track_mm,
				  double distance_imp_per_mm)
{
 8002fa4:	b490      	push	{r4, r7}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6178      	str	r0, [r7, #20]
 8002fac:	ed87 0b02 	vstr	d0, [r7, #8]
 8002fb0:	ed87 1b00 	vstr	d1, [r7]
	pos->phys.track_mm = track_mm;
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fba:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pos->phys.distance_imp_per_mm = distance_imp_per_mm;
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002fc4:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc90      	pop	{r4, r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <position_use_ext>:

void position_use_ext(struct robot_position *pos)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	struct rs_polar encoders;
	encoders.distance = rs_get_ext_distance(pos->rs);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fb33 	bl	800364c <rs_get_ext_distance>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	60bb      	str	r3, [r7, #8]
	encoders.angle = rs_get_ext_angle(pos->rs);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fb1c 	bl	800362c <rs_get_ext_angle>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]
	pos->prev_encoders = encoders;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3338      	adds	r3, #56	; 0x38
 8002ffc:	f107 0208 	add.w	r2, r7, #8
 8003000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003004:	e883 0003 	stmia.w	r3, {r0, r1}
	pos->use_ext = 1;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop

08003018 <position_manage>:
 * Process the absolute position (x,y,a) depending on the delta on
 * virtual encoders since last read, and depending on physical
 * parameters. The processed position is in mm.
 */
void position_manage(struct robot_position *pos)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b099      	sub	sp, #100	; 0x64
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	double dx, dy;
	s16 x_s16, y_s16, a_s16;
	struct rs_polar encoders;
	struct rs_polar delta;
	struct robot_system * rs;
	rs = pos->rs;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	647b      	str	r3, [r7, #68]	; 0x44

	/* here we could raise an error */
	if (rs == NULL)
 8003026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8193 	beq.w	8003354 <position_manage+0x33c>
	else {
		encoders.distance = rs_get_mot_distance(rs);
		encoders.angle = rs_get_mot_angle(rs);
	}
#else
	encoders.distance = rs_get_ext_distance(rs);
 800302e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003030:	f000 fb0c 	bl	800364c <rs_get_ext_distance>
 8003034:	4603      	mov	r3, r0
 8003036:	613b      	str	r3, [r7, #16]
	encoders.angle = rs_get_ext_angle(rs);
 8003038:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800303a:	f000 faf7 	bl	800362c <rs_get_ext_angle>
 800303e:	4603      	mov	r3, r0
 8003040:	617b      	str	r3, [r7, #20]
#endif

	/* process difference between 2 measures.
	 * No lock for prev_encoders since we are the only one to use
	 * this var XXX that's wrong now, perhaps we should lock */
	delta.distance = encoders.distance - pos->prev_encoders.distance;
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	60bb      	str	r3, [r7, #8]
	delta.angle = encoders.angle - pos->prev_encoders.angle;
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]

	pos->prev_encoders = encoders;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3338      	adds	r3, #56	; 0x38
 800305a:	f107 0210 	add.w	r2, r7, #16
 800305e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003062:	e883 0003 	stmia.w	r3, {r0, r1}

	/* update double position */
	a = position_get_a_rad_double(pos);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9ba 	bl	80033e0 <position_get_a_rad_double>
 800306c:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	x = position_get_x_double(pos);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f985 	bl	8003380 <position_get_x_double>
 8003076:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
	y = position_get_y_double(pos);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f998 	bl	80033b0 <position_get_y_double>
 8003080:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

	if (delta.angle == 0) {
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d14e      	bne.n	8003128 <position_manage+0x110>
		/* we go straight */
		dx = cos(a) * ((double) delta.distance / (pos->phys.distance_imp_per_mm)) ;
 800308a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800308e:	f00c f853 	bl	800f138 <cos>
 8003092:	ec56 5b10 	vmov	r5, r6, d0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa63 	bl	8000564 <__aeabi_i2d>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	f7fd fbec 	bl	8000884 <__aeabi_ddiv>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	461a      	mov	r2, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	4631      	mov	r1, r6
 80030b8:	f7fd faba 	bl	8000630 <__aeabi_dmul>
 80030bc:	4603      	mov	r3, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		dy = sin(a) * ((double) delta.distance / (pos->phys.distance_imp_per_mm)) ;
 80030c4:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80030c8:	f00c f87a 	bl	800f1c0 <sin>
 80030cc:	ec56 5b10 	vmov	r5, r6, d0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa46 	bl	8000564 <__aeabi_i2d>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	f7fd fbcf 	bl	8000884 <__aeabi_ddiv>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	461a      	mov	r2, r3
 80030ec:	4623      	mov	r3, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	4631      	mov	r1, r6
 80030f2:	f7fd fa9d 	bl	8000630 <__aeabi_dmul>
 80030f6:	4603      	mov	r3, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x += dx;
 80030fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003102:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003106:	f7fd f8e1 	bl	80002cc <__adddf3>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		y += dy;
 8003112:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003116:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800311a:	f7fd f8d7 	bl	80002cc <__adddf3>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8003126:	e0dd      	b.n	80032e4 <position_manage+0x2cc>
	}
	else {
		/* r the radius of the circle arc */
		r = (double)delta.distance * pos->phys.track_mm / ((double) delta.angle * 2);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fa1a 	bl	8000564 <__aeabi_i2d>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003136:	461a      	mov	r2, r3
 8003138:	4623      	mov	r3, r4
 800313a:	f7fd fa79 	bl	8000630 <__aeabi_dmul>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	4625      	mov	r5, r4
 8003144:	461c      	mov	r4, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fa0b 	bl	8000564 <__aeabi_i2d>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	f7fd f8bb 	bl	80002cc <__adddf3>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd fb91 	bl	8000884 <__aeabi_ddiv>
 8003162:	4603      	mov	r3, r0
 8003164:	460c      	mov	r4, r1
 8003166:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		arc_angle = 2 * (double) delta.angle / (pos->phys.track_mm * pos->phys.distance_imp_per_mm);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f9f9 	bl	8000564 <__aeabi_i2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	f7fd f8a9 	bl	80002cc <__adddf3>
 800317a:	4603      	mov	r3, r0
 800317c:	460c      	mov	r4, r1
 800317e:	461d      	mov	r5, r3
 8003180:	4626      	mov	r6, r4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800318e:	461a      	mov	r2, r3
 8003190:	4623      	mov	r3, r4
 8003192:	f7fd fa4d 	bl	8000630 <__aeabi_dmul>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	461a      	mov	r2, r3
 800319c:	4623      	mov	r3, r4
 800319e:	4628      	mov	r0, r5
 80031a0:	4631      	mov	r1, r6
 80031a2:	f7fd fb6f 	bl	8000884 <__aeabi_ddiv>
 80031a6:	4603      	mov	r3, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
		
		dx = r * (-sin(a) + sin(a+arc_angle));
 80031ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031b6:	f7fd f889 	bl	80002cc <__adddf3>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	ec44 3b17 	vmov	d7, r3, r4
 80031c2:	eeb0 0a47 	vmov.f32	s0, s14
 80031c6:	eef0 0a67 	vmov.f32	s1, s15
 80031ca:	f00b fff9 	bl	800f1c0 <sin>
 80031ce:	ec55 4b10 	vmov	r4, r5, d0
 80031d2:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80031d6:	f00b fff3 	bl	800f1c0 <sin>
 80031da:	ec53 2b10 	vmov	r2, r3, d0
 80031de:	4620      	mov	r0, r4
 80031e0:	4629      	mov	r1, r5
 80031e2:	f7fd f871 	bl	80002c8 <__aeabi_dsub>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	4618      	mov	r0, r3
 80031ec:	4621      	mov	r1, r4
 80031ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f2:	f7fd fa1d 	bl	8000630 <__aeabi_dmul>
 80031f6:	4603      	mov	r3, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		dy = r * (cos(a) - cos(a+arc_angle));
 80031fe:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003202:	f00b ff99 	bl	800f138 <cos>
 8003206:	ec56 5b10 	vmov	r5, r6, d0
 800320a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800320e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003212:	f7fd f85b 	bl	80002cc <__adddf3>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	ec44 3b17 	vmov	d7, r3, r4
 800321e:	eeb0 0a47 	vmov.f32	s0, s14
 8003222:	eef0 0a67 	vmov.f32	s1, s15
 8003226:	f00b ff87 	bl	800f138 <cos>
 800322a:	ec54 3b10 	vmov	r3, r4, d0
 800322e:	461a      	mov	r2, r3
 8003230:	4623      	mov	r3, r4
 8003232:	4628      	mov	r0, r5
 8003234:	4631      	mov	r1, r6
 8003236:	f7fd f847 	bl	80002c8 <__aeabi_dsub>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	4618      	mov	r0, r3
 8003240:	4621      	mov	r1, r4
 8003242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003246:	f7fd f9f3 	bl	8000630 <__aeabi_dmul>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		x += dx;
 8003252:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003256:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800325a:	f7fd f837 	bl	80002cc <__adddf3>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		y += dy;
 8003266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800326a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800326e:	f7fd f82d 	bl	80002cc <__adddf3>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		a += arc_angle;
 800327a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800327e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003282:	f7fd f823 	bl	80002cc <__adddf3>
 8003286:	4603      	mov	r3, r0
 8003288:	460c      	mov	r4, r1
 800328a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

		if (a < -M_PI)
 800328e:	a334      	add	r3, pc, #208	; (adr r3, 8003360 <position_manage+0x348>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003298:	f7fd fc3c 	bl	8000b14 <__aeabi_dcmplt>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <position_manage+0x2a2>
			a += (M_PI*2);
 80032a2:	a331      	add	r3, pc, #196	; (adr r3, 8003368 <position_manage+0x350>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ac:	f7fd f80e 	bl	80002cc <__adddf3>
 80032b0:	4603      	mov	r3, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80032b8:	e014      	b.n	80032e4 <position_manage+0x2cc>
		else if (a > (M_PI))
 80032ba:	a32d      	add	r3, pc, #180	; (adr r3, 8003370 <position_manage+0x358>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032c4:	f7fd fc44 	bl	8000b50 <__aeabi_dcmpgt>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <position_manage+0x2cc>
			a -= (M_PI*2);
 80032ce:	a326      	add	r3, pc, #152	; (adr r3, 8003368 <position_manage+0x350>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032d8:	f7fc fff6 	bl	80002c8 <__aeabi_dsub>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
#endif
	}

	/* update int position */
	x_s16 = (int16_t)x;
 80032e4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032e8:	f7fd fc52 	bl	8000b90 <__aeabi_d2iz>
 80032ec:	4603      	mov	r3, r0
 80032ee:	83fb      	strh	r3, [r7, #30]
	y_s16 = (int16_t)y;
 80032f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80032f4:	f7fd fc4c 	bl	8000b90 <__aeabi_d2iz>
 80032f8:	4603      	mov	r3, r0
 80032fa:	83bb      	strh	r3, [r7, #28]
	a_s16 = (int16_t)(a * (360.0/(M_PI*2)));
 80032fc:	a31e      	add	r3, pc, #120	; (adr r3, 8003378 <position_manage+0x360>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003306:	f7fd f993 	bl	8000630 <__aeabi_dmul>
 800330a:	4603      	mov	r3, r0
 800330c:	460c      	mov	r4, r1
 800330e:	4618      	mov	r0, r3
 8003310:	4621      	mov	r1, r4
 8003312:	f7fd fc3d 	bl	8000b90 <__aeabi_d2iz>
 8003316:	4603      	mov	r3, r0
 8003318:	837b      	strh	r3, [r7, #26]

	vLockRobotPosition();
 800331a:	f7fe ffb3 	bl	8002284 <vLockRobotPosition>
	pos->pos_d.a = a;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003324:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pos->pos_d.x = x;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800332e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pos->pos_d.y = y;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003338:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pos->pos_s16.x = x_s16;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8bfa      	ldrh	r2, [r7, #30]
 8003340:	861a      	strh	r2, [r3, #48]	; 0x30
	pos->pos_s16.y = y_s16;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8bba      	ldrh	r2, [r7, #28]
 8003346:	865a      	strh	r2, [r3, #50]	; 0x32
	pos->pos_s16.a = a_s16;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8b7a      	ldrh	r2, [r7, #26]
 800334c:	869a      	strh	r2, [r3, #52]	; 0x34
	vUnlockRobotPosition();
 800334e:	f7fe ffdf 	bl	8002310 <vUnlockRobotPosition>
 8003352:	e000      	b.n	8003356 <position_manage+0x33e>
	struct robot_system * rs;
	rs = pos->rs;

	/* here we could raise an error */
	if (rs == NULL)
		return;
 8003354:	bf00      	nop
	pos->pos_d.y = y;
	pos->pos_s16.x = x_s16;
	pos->pos_s16.y = y_s16;
	pos->pos_s16.a = a_s16;
	vUnlockRobotPosition();
}
 8003356:	3764      	adds	r7, #100	; 0x64
 8003358:	46bd      	mov	sp, r7
 800335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335c:	f3af 8000 	nop.w
 8003360:	54442d18 	.word	0x54442d18
 8003364:	c00921fb 	.word	0xc00921fb
 8003368:	54442d18 	.word	0x54442d18
 800336c:	401921fb 	.word	0x401921fb
 8003370:	54442d18 	.word	0x54442d18
 8003374:	400921fb 	.word	0x400921fb
 8003378:	1a63c1f8 	.word	0x1a63c1f8
 800337c:	404ca5dc 	.word	0x404ca5dc

08003380 <position_get_x_double>:

/**
 * returns current x
 */
double position_get_x_double(struct robot_position *pos)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	double x;
	vLockRobotPosition();
 8003388:	f7fe ff7c 	bl	8002284 <vLockRobotPosition>
	x = pos->pos_d.x;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003392:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 8003396:	f7fe ffbb 	bl	8002310 <vUnlockRobotPosition>
	return x;
 800339a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800339e:	ec44 3b17 	vmov	d7, r3, r4
}
 80033a2:	eeb0 0a47 	vmov.f32	s0, s14
 80033a6:	eef0 0a67 	vmov.f32	s1, s15
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd90      	pop	{r4, r7, pc}

080033b0 <position_get_y_double>:

/**
 * returns current y
 */
double position_get_y_double(struct robot_position *pos)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	double y;
	vLockRobotPosition();
 80033b8:	f7fe ff64 	bl	8002284 <vLockRobotPosition>
	y = pos->pos_d.y;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80033c2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 80033c6:	f7fe ffa3 	bl	8002310 <vUnlockRobotPosition>
	return y;
 80033ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033ce:	ec44 3b17 	vmov	d7, r3, r4
}
 80033d2:	eeb0 0a47 	vmov.f32	s0, s14
 80033d6:	eef0 0a67 	vmov.f32	s1, s15
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <position_get_a_rad_double>:

/**
 * returns current alpha
 */
double position_get_a_rad_double(struct robot_position *pos)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	double a;
	vLockRobotPosition();
 80033e8:	f7fe ff4c 	bl	8002284 <vLockRobotPosition>
	a = pos->pos_d.a;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80033f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 80033f6:	f7fe ff8b 	bl	8002310 <vUnlockRobotPosition>
	return a;
 80033fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033fe:	ec44 3b17 	vmov	d7, r3, r4
}
 8003402:	eeb0 0a47 	vmov.f32	s0, s14
 8003406:	eef0 0a67 	vmov.f32	s1, s15
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bd90      	pop	{r4, r7, pc}

08003410 <safe_setpwm>:
 * - if pointer is null, don't do anything
 * - else call the pwm with the parameters
 */
static inline void
safe_setpwm(void (*f)(void *, int32_t), void * param, int32_t value)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
	void (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <safe_setpwm+0x22>
		f_tmp(param_tmp, value);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	6938      	ldr	r0, [r7, #16]
 8003430:	4798      	blx	r3
	}
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop

0800343c <safe_getencoder>:
 * - if pointer is null, return 0
 * - else return the value processed by the function
 */
static inline uint32_t
safe_getencoder(int32_t (*f)(void *), void * param)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	int32_t (*f_tmp)(void *);
	void * param_tmp;
	f_tmp = f;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60fb      	str	r3, [r7, #12]
	param_tmp = param;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	60bb      	str	r3, [r7, #8]
	if (f_tmp) {
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <safe_getencoder+0x22>
		return f_tmp(param_tmp);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68b8      	ldr	r0, [r7, #8]
 8003458:	4798      	blx	r3
 800345a:	4603      	mov	r3, r0
 800345c:	e000      	b.n	8003460 <safe_getencoder+0x24>
	}
	return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <rs_init>:

/** Set the structure to 0 */
void rs_init( struct robot_system * rs)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	memset(rs, 0, sizeof(struct robot_system));
 8003470:	224c      	movs	r2, #76	; 0x4c
 8003472:	2100      	movs	r1, #0
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f007 f880 	bl	800a57a <memset>
#ifdef CONFIG_MODULE_ROBOT_SYSTEM_MOT_AND_EXT
	rs_set_ratio(rs, 1.0);
#endif
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop

08003484 <rs_set_left_pwm>:
}
#endif

/** define left PWM function and param */
void rs_set_left_pwm(struct robot_system * rs, void (*left_pwm)(void *, int32_t), void *left_pwm_param)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
	rs->left_pwm = left_pwm;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c
	rs->left_pwm_param = left_pwm_param;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <rs_set_right_pwm>:

/** define right PWM function and param */
void rs_set_right_pwm(struct robot_system * rs, void (*right_pwm)(void *, int32_t), void *right_pwm_param)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	rs->right_pwm = right_pwm;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
	rs->right_pwm_param = right_pwm_param;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	649a      	str	r2, [r3, #72]	; 0x48
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <rs_set_left_ext_encoder>:
#endif

/** define left external encoder function and param */
void rs_set_left_ext_encoder(struct robot_system * rs, int32_t (*left_ext_encoder)(void *), 
			     void *left_ext_encoder_param, double gain)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6178      	str	r0, [r7, #20]
 80034d4:	6139      	str	r1, [r7, #16]
 80034d6:	60fa      	str	r2, [r7, #12]
 80034d8:	ed87 0b00 	vstr	d0, [r7]
	rs->left_ext_encoder = left_ext_encoder;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
	rs->left_ext_encoder_param = left_ext_encoder_param;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
	rs->left_ext_gain = gain;
 80034e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ec:	f7fd fb78 	bl	8000be0 <__aeabi_d2f>
 80034f0:	4602      	mov	r2, r0
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop

08003500 <rs_set_right_ext_encoder>:

/** define right external encoder function and param */
void rs_set_right_ext_encoder(struct robot_system * rs, int32_t (*right_ext_encoder)(void *), 
			      void *right_ext_encoder_param, double gain)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6178      	str	r0, [r7, #20]
 8003508:	6139      	str	r1, [r7, #16]
 800350a:	60fa      	str	r2, [r7, #12]
 800350c:	ed87 0b00 	vstr	d0, [r7]
	rs->right_ext_encoder = right_ext_encoder;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
	rs->right_ext_encoder_param = right_ext_encoder_param;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
	rs->right_ext_gain = gain;
 800351c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003520:	f7fd fb5e 	bl	8000be0 <__aeabi_d2f>
 8003524:	4602      	mov	r2, r0
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop

08003534 <rs_set_angle>:
/** 
 * set the real pwms according to the specified angle (it also
 * depends on the last distance command sent) 
 */
void rs_set_angle(void * data, int32_t angle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	struct rs_polar p;
	struct rs_wheels w;
	struct robot_system * rs = data;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	61fb      	str	r3, [r7, #28]

	p.distance = rs->virtual_pwm.distance ;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	617b      	str	r3, [r7, #20]
	rs->virtual_pwm.angle = angle;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	609a      	str	r2, [r3, #8]

	p.angle = angle;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	61bb      	str	r3, [r7, #24]
	rs_get_wheels_from_polar(&w, &p);
 8003552:	f107 0214 	add.w	r2, r7, #20
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f895 	bl	800268c <rs_get_wheels_from_polar>
	
	safe_setpwm(rs->left_pwm, rs->left_pwm_param, w.left);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4619      	mov	r1, r3
 800356e:	f7ff ff4f 	bl	8003410 <safe_setpwm>
	safe_setpwm(rs->right_pwm, rs->right_pwm_param, w.right);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4619      	mov	r1, r3
 800357e:	f7ff ff47 	bl	8003410 <safe_setpwm>
}
 8003582:	bf00      	nop
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop

0800358c <rs_set_distance>:
/** 
 * set the real pwms according to the specified distance (it also
 * depends on the last angle command sent) 
 */
void rs_set_distance(void * data, int32_t distance)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	struct robot_system * rs = data;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	61fb      	str	r3, [r7, #28]
	struct rs_polar p;
	struct rs_wheels w;

	p.angle = rs->virtual_pwm.angle ;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
	rs->virtual_pwm.distance = distance;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	605a      	str	r2, [r3, #4]

	p.distance = distance;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	617b      	str	r3, [r7, #20]
	rs_get_wheels_from_polar(&w, &p);
 80035aa:	f107 0214 	add.w	r2, r7, #20
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f869 	bl	800268c <rs_get_wheels_from_polar>
	
	safe_setpwm(rs->left_pwm, rs->left_pwm_param, w.left);
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7ff ff23 	bl	8003410 <safe_setpwm>
	safe_setpwm(rs->right_pwm, rs->right_pwm_param, w.right);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4619      	mov	r1, r3
 80035d6:	f7ff ff1b 	bl	8003410 <safe_setpwm>
}
 80035da:	bf00      	nop
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <rs_get_angle>:

/** 
 * get the virtual angle according to real encoders value. 
 */
int32_t rs_get_angle(void * data)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60fb      	str	r3, [r7, #12]
	int32_t angle;
	
	vLockEncoderAngle();
 80035f0:	f7fe fe10 	bl	8002214 <vLockEncoderAngle>
	angle = rs->virtual_encoders.angle ;	
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	60bb      	str	r3, [r7, #8]
	vUnlockEncoderAngle();
 80035fa:	f7fe fe51 	bl	80022a0 <vUnlockEncoderAngle>
	return angle;
 80035fe:	68bb      	ldr	r3, [r7, #8]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <rs_get_distance>:

/** 
 * get the virtual distance according to real encoders value. 
 */
int32_t rs_get_distance(void * data)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60fb      	str	r3, [r7, #12]
	int32_t distance;
	
	vLockEncoderDistance();
 8003614:	f7fe fe0c 	bl	8002230 <vLockEncoderDistance>
	distance = rs->virtual_encoders.distance ;	
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
	vUnlockEncoderDistance();
 800361e:	f7fe fe4d 	bl	80022bc <vUnlockEncoderDistance>
	return distance;
 8003622:	68bb      	ldr	r3, [r7, #8]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <rs_get_ext_angle>:

int32_t rs_get_ext_angle(void * data)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60fb      	str	r3, [r7, #12]
	int32_t angle;
	
	angle = rs->pext_prev.angle ;	
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	60bb      	str	r3, [r7, #8]
	return angle;
 800363e:	68bb      	ldr	r3, [r7, #8]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <rs_get_ext_distance>:

int32_t rs_get_ext_distance(void * data)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60fb      	str	r3, [r7, #12]
	int32_t distance;
	
	distance = rs->pext_prev.distance ;	
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	60bb      	str	r3, [r7, #8]
	return distance;
 800365e:	68bb      	ldr	r3, [r7, #8]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <rs_set_flags>:
	return right;
}
#endif

void rs_set_flags(struct robot_system * rs, uint8_t flags)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
	rs->flags = flags;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	701a      	strb	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop

0800368c <rs_update>:
 * function is needed before reading the virtual encoders.The program
 * will decide if it the external encoders or the motor encoders are
 * taken in account (depending on flags, but not yet)
 */
void rs_update(void * data)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
	struct rs_polar pmot;
#endif
	int32_t delta_angle, delta_distance;
	
	/* read encoders */
	wext.left = safe_getencoder(rs->left_ext_encoder, rs->left_ext_encoder_param);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f7ff feca 	bl	800343c <safe_getencoder>
 80036a8:	4603      	mov	r3, r0
 80036aa:	617b      	str	r3, [r7, #20]
	wext.right = safe_getencoder(rs->right_ext_encoder, rs->right_ext_encoder_param);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f7ff fec0 	bl	800343c <safe_getencoder>
 80036bc:	4603      	mov	r3, r0
 80036be:	61bb      	str	r3, [r7, #24]
	wmot.left = safe_getencoder(rs->left_mot_encoder, rs->left_mot_encoder_param);
	wmot.right = safe_getencoder(rs->right_mot_encoder, rs->right_mot_encoder_param);
#endif
	
	/* apply gains to each wheel */
	if (! (rs->flags & RS_IGNORE_EXT_GAIN )) {
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <rs_update+0x7c>
		wext.left = (int32_t)(wext.left*rs->left_ext_gain);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80036dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e4:	ee17 3a90 	vmov	r3, s15
 80036e8:	617b      	str	r3, [r7, #20]
		wext.right = (int32_t)(wext.right* rs->right_ext_gain);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	ee17 3a90 	vmov	r3, s15
 8003706:	61bb      	str	r3, [r7, #24]
		wmot.left = f64_msb_mul(f64_from_lsb(wmot.left), rs->left_mot_gain);
		wmot.right = f64_msb_mul(f64_from_lsb(wmot.right), rs->right_mot_gain);
	}
#endif

	rs_get_polar_from_wheels(&pext, &wext);
 8003708:	f107 0214 	add.w	r2, r7, #20
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe ff96 	bl	8002644 <rs_get_polar_from_wheels>
	else {
		delta_angle = pmot.angle - rs->pmot_prev.angle;
		delta_distance = pmot.distance - rs->pmot_prev.distance;
	}
#else
	delta_angle = pext.angle - rs->pext_prev.angle;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	623b      	str	r3, [r7, #32]
	delta_distance = pext.distance - rs->pext_prev.distance;
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	61fb      	str	r3, [r7, #28]
#endif

	vLockEncoderAngle();
 800372c:	f7fe fd72 	bl	8002214 <vLockEncoderAngle>
	vLockEncoderDistance();
 8003730:	f7fe fd7e 	bl	8002230 <vLockEncoderDistance>
	rs->virtual_encoders.angle += delta_angle;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	441a      	add	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	611a      	str	r2, [r3, #16]
	rs->virtual_encoders.distance += delta_distance;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	441a      	add	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	60da      	str	r2, [r3, #12]
	vUnlockEncoderAngle();
 800374c:	f7fe fda8 	bl	80022a0 <vUnlockEncoderAngle>
	vUnlockEncoderDistance();
 8003750:	f7fe fdb4 	bl	80022bc <vUnlockEncoderDistance>

	/* don't lock too much time */
	rs->pext_prev = pext;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	3314      	adds	r3, #20
 8003758:	f107 020c 	add.w	r2, r7, #12
 800375c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003760:	e883 0003 	stmia.w	r3, {r0, r1}
	rs->wext_prev = wext;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	331c      	adds	r3, #28
 8003768:	f107 0214 	add.w	r2, r7, #20
 800376c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003770:	e883 0003 	stmia.w	r3, {r0, r1}

#ifdef CONFIG_MODULE_ROBOT_SYSTEM_MOT_AND_EXT
	rs->pmot_prev = pmot;
	rs->wmot_prev = wmot;
#endif
}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <trajectory_init>:

/************ INIT FUNCS */

/** structure initialization */
void trajectory_init(struct trajectory *traj)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	memset(traj, 0, sizeof(struct trajectory));
 8003784:	2248      	movs	r2, #72	; 0x48
 8003786:	2100      	movs	r1, #0
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f006 fef6 	bl	800a57a <memset>
	traj->state = READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
	traj->scheduler_task = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop

080037a4 <trajectory_set_cs>:

/** structure initialization */
void trajectory_set_cs(struct trajectory *traj, struct cs *cs_d, 
		       struct cs *cs_a)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
	traj->csm_distance = cs_d;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
	traj->csm_angle = cs_a;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <trajectory_set_robot_params>:

/** structure initialization */
void trajectory_set_robot_params(struct trajectory *traj, 
				 struct robot_system *rs, 
				 struct robot_position *pos) 
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
	traj->robot = rs;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
	traj->position = pos;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <trajectory_set_speed>:

/** set speed consign */
void trajectory_set_speed( struct trajectory *traj, int16_t d_speed, int16_t a_speed)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	803b      	strh	r3, [r7, #0]
	traj->d_speed = d_speed;
 80037fc:	887a      	ldrh	r2, [r7, #2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	861a      	strh	r2, [r3, #48]	; 0x30
	traj->a_speed = a_speed;
 8003802:	883a      	ldrh	r2, [r7, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	0000      	movs	r0, r0
	...

08003818 <trajectory_set_windows>:

/** set windows for trajectory */
void trajectory_set_windows(struct trajectory *traj, double d_win,
			    double a_win_deg, double a_start_deg)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	61f8      	str	r0, [r7, #28]
 8003820:	ed87 0b04 	vstr	d0, [r7, #16]
 8003824:	ed87 1b02 	vstr	d1, [r7, #8]
 8003828:	ed87 2b00 	vstr	d2, [r7]
	traj->d_win = d_win ;
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003832:	e9c2 3406 	strd	r3, r4, [r2, #24]
	traj->a_win_rad = RAD(a_win_deg);
 8003836:	a30e      	add	r3, pc, #56	; (adr r3, 8003870 <trajectory_set_windows+0x58>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003840:	f7fc fef6 	bl	8000630 <__aeabi_dmul>
 8003844:	4603      	mov	r3, r0
 8003846:	460c      	mov	r4, r1
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	traj->a_start_rad = RAD(a_start_deg);
 800384e:	a308      	add	r3, pc, #32	; (adr r3, 8003870 <trajectory_set_windows+0x58>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003858:	f7fc feea 	bl	8000630 <__aeabi_dmul>
 800385c:	4603      	mov	r3, r0
 800385e:	460c      	mov	r4, r1
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

}
 8003866:	bf00      	nop
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	bf00      	nop
 8003870:	a2529d39 	.word	0xa2529d39
 8003874:	3f91df46 	.word	0x3f91df46

08003878 <set_quadramp_speed>:

/************ STATIC [ AND USEFUL ] FUNCS */

/** set speed consign in quadramp filter */
static void set_quadramp_speed(struct trajectory *traj, int16_t d_speed, int16_t a_speed)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	803b      	strh	r3, [r7, #0]
	struct quadramp_filter * q_d, * q_a;
	q_d = traj->csm_distance->consign_filter_params;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]
	q_a = traj->csm_angle->consign_filter_params;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60bb      	str	r3, [r7, #8]
	quadramp_set_1st_order_vars(q_d, ABS(d_speed), ABS(d_speed));
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	82fb      	strh	r3, [r7, #22]
 800389c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da03      	bge.n	80038ac <set_quadramp_speed+0x34>
 80038a4:	8afb      	ldrh	r3, [r7, #22]
 80038a6:	425b      	negs	r3, r3
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	82fb      	strh	r3, [r7, #22]
 80038ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038b0:	4619      	mov	r1, r3
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	82bb      	strh	r3, [r7, #20]
 80038b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da03      	bge.n	80038c6 <set_quadramp_speed+0x4e>
 80038be:	8abb      	ldrh	r3, [r7, #20]
 80038c0:	425b      	negs	r3, r3
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	82bb      	strh	r3, [r7, #20]
 80038c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff f9b9 	bl	8002c44 <quadramp_set_1st_order_vars>
	quadramp_set_1st_order_vars(q_a, ABS(a_speed), ABS(a_speed));
 80038d2:	883b      	ldrh	r3, [r7, #0]
 80038d4:	827b      	strh	r3, [r7, #18]
 80038d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da03      	bge.n	80038e6 <set_quadramp_speed+0x6e>
 80038de:	8a7b      	ldrh	r3, [r7, #18]
 80038e0:	425b      	negs	r3, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	827b      	strh	r3, [r7, #18]
 80038e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038ea:	4619      	mov	r1, r3
 80038ec:	883b      	ldrh	r3, [r7, #0]
 80038ee:	823b      	strh	r3, [r7, #16]
 80038f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da03      	bge.n	8003900 <set_quadramp_speed+0x88>
 80038f8:	8a3b      	ldrh	r3, [r7, #16]
 80038fa:	425b      	negs	r3, r3
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	823b      	strh	r3, [r7, #16]
 8003900:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003904:	461a      	mov	r2, r3
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f7ff f99c 	bl	8002c44 <quadramp_set_1st_order_vars>
}
 800390c:	bf00      	nop
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <get_quadramp_distance_speed>:
	return q_a->var_1st_ord_pos;
}

/** get distance speed consign in quadramp filter */
static uint32_t get_quadramp_distance_speed(struct trajectory *traj)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	struct quadramp_filter *q_d;
	q_d = traj->csm_distance->consign_filter_params;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]
	return q_d->var_1st_ord_pos;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <delete_event>:

/** remove event if any */
static void delete_event(struct trajectory *traj)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	set_quadramp_speed(traj, traj->d_speed, traj->a_speed);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003940:	b219      	sxth	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003946:	b21b      	sxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff94 	bl	8003878 <set_quadramp_speed>
	if ( traj->scheduler_task != NULL) {
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <delete_event+0x34>
		vTaskDelete(traj->scheduler_task);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fdf5 	bl	800754c <vTaskDelete>
		traj->scheduler_task=NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <schedule_event>:

/** schedule the trajectory event */
static void schedule_event(struct trajectory *traj)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
	if ( traj->scheduler_task != NULL) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <schedule_event+0x26>
		DEBUG(E_TRAJECTORY, "Schedule event, already scheduled");
	}
	else {
			xTaskCreate(trajectory_manager_event, "TRAJECTORY", configMINIMAL_STACK_SIZE, traj, OS_TASK_PRIORITY_TRAJ, &traj->scheduler_task );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3344      	adds	r3, #68	; 0x44
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	2303      	movs	r3, #3
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2282      	movs	r2, #130	; 0x82
 800398e:	4904      	ldr	r1, [pc, #16]	; (80039a0 <schedule_event+0x30>)
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <schedule_event+0x34>)
 8003992:	f003 fca7 	bl	80072e4 <xTaskCreate>
	}
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	08011624 	.word	0x08011624
 80039a4:	080041e9 	.word	0x080041e9

080039a8 <simple_modulo_2pi>:

/** do a modulo 2.pi -> [-Pi,+Pi], knowing that 'a' is in [-3Pi,+3Pi] */  
static double simple_modulo_2pi(double a)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	ed87 0b00 	vstr	d0, [r7]
	if (a < -M_PI) {
 80039b2:	a31b      	add	r3, pc, #108	; (adr r3, 8003a20 <simple_modulo_2pi+0x78>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039bc:	f7fd f8aa 	bl	8000b14 <__aeabi_dcmplt>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <simple_modulo_2pi+0x36>
		a += M_2PI;
 80039c6:	a318      	add	r3, pc, #96	; (adr r3, 8003a28 <simple_modulo_2pi+0x80>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039d0:	f7fc fc7c 	bl	80002cc <__adddf3>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	e887 0018 	stmia.w	r7, {r3, r4}
 80039dc:	e014      	b.n	8003a08 <simple_modulo_2pi+0x60>
	}
	else if (a > M_PI) {
 80039de:	a314      	add	r3, pc, #80	; (adr r3, 8003a30 <simple_modulo_2pi+0x88>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039e8:	f7fd f8b2 	bl	8000b50 <__aeabi_dcmpgt>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <simple_modulo_2pi+0x60>
		a -= M_2PI;
 80039f2:	a30d      	add	r3, pc, #52	; (adr r3, 8003a28 <simple_modulo_2pi+0x80>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039fc:	f7fc fc64 	bl	80002c8 <__aeabi_dsub>
 8003a00:	4603      	mov	r3, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	e887 0018 	stmia.w	r7, {r3, r4}
	}
	return a;
 8003a08:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003a0c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003a10:	eeb0 0a47 	vmov.f32	s0, s14
 8003a14:	eef0 0a67 	vmov.f32	s1, s15
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	54442d18 	.word	0x54442d18
 8003a24:	c00921fb 	.word	0xc00921fb
 8003a28:	54442d18 	.word	0x54442d18
 8003a2c:	401921fb 	.word	0x401921fb
 8003a30:	54442d18 	.word	0x54442d18
 8003a34:	400921fb 	.word	0x400921fb

08003a38 <modulo_2pi>:

/** do a modulo 2.pi -> [-Pi,+Pi] */  
static double modulo_2pi(double a)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	ed87 0b00 	vstr	d0, [r7]
        double res = a - (((int32_t) (a/M_2PI)) * M_2PI);
 8003a42:	a319      	add	r3, pc, #100	; (adr r3, 8003aa8 <modulo_2pi+0x70>)
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a4c:	f7fc ff1a 	bl	8000884 <__aeabi_ddiv>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	4618      	mov	r0, r3
 8003a56:	4621      	mov	r1, r4
 8003a58:	f7fd f89a 	bl	8000b90 <__aeabi_d2iz>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd80 	bl	8000564 <__aeabi_i2d>
 8003a64:	a310      	add	r3, pc, #64	; (adr r3, 8003aa8 <modulo_2pi+0x70>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fde1 	bl	8000630 <__aeabi_dmul>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	460c      	mov	r4, r1
 8003a72:	461a      	mov	r2, r3
 8003a74:	4623      	mov	r3, r4
 8003a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a7a:	f7fc fc25 	bl	80002c8 <__aeabi_dsub>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	460c      	mov	r4, r1
 8003a82:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return simple_modulo_2pi(res);
 8003a86:	ed97 0b02 	vldr	d0, [r7, #8]
 8003a8a:	f7ff ff8d 	bl	80039a8 <simple_modulo_2pi>
 8003a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8003a92:	eef0 7a60 	vmov.f32	s15, s1
}
 8003a96:	eeb0 0a47 	vmov.f32	s0, s14
 8003a9a:	eef0 0a67 	vmov.f32	s1, s15
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	54442d18 	.word	0x54442d18
 8003aac:	401921fb 	.word	0x401921fb

08003ab0 <is_robot_in_dist_window>:
}


/** near the target (dist) ? */
static uint8_t is_robot_in_dist_window(struct trajectory *traj, double d_win)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	ed87 0b00 	vstr	d0, [r7]
	double d = traj->target.pol.distance - rs_get_distance(traj->robot);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689c      	ldr	r4, [r3, #8]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fd9f 	bl	8003608 <rs_get_distance>
 8003aca:	4603      	mov	r3, r0
 8003acc:	1ae3      	subs	r3, r4, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd48 	bl	8000564 <__aeabi_i2d>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = ABS(d);
 8003adc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ae0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003af0:	f7fd f810 	bl	8000b14 <__aeabi_dcmplt>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <is_robot_in_dist_window+0x56>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003b0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = d / traj->position->phys.distance_imp_per_mm;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4623      	mov	r3, r4
 8003b1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b1e:	f7fc feb1 	bl	8000884 <__aeabi_ddiv>
 8003b22:	4603      	mov	r3, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return (d < d_win);
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	461c      	mov	r4, r3
 8003b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b36:	f7fc ffed 	bl	8000b14 <__aeabi_dcmplt>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <is_robot_in_dist_window+0x94>
 8003b40:	2300      	movs	r3, #0
 8003b42:	461c      	mov	r4, r3
 8003b44:	b2e3      	uxtb	r3, r4
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3724      	adds	r7, #36	; 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	bf00      	nop

08003b50 <is_robot_in_xy_window>:

/** near the target (dist in x,y) ? */
static uint8_t is_robot_in_xy_window(struct trajectory *traj, double d_win)
{
 8003b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b54:	b08c      	sub	sp, #48	; 0x30
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	ed87 0b00 	vstr	d0, [r7]
	double x1 = traj->target.cart.x;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003b64:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double y1 = traj->target.cart.y;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003b6e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double x2 = position_get_x_double(traj->position);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fc02 	bl	8003380 <position_get_x_double>
 8003b7c:	ed87 0b06 	vstr	d0, [r7, #24]
	double y2 = position_get_y_double(traj->position);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fc13 	bl	80033b0 <position_get_y_double>
 8003b8a:	ed87 0b04 	vstr	d0, [r7, #16]
	return ( sqrt ((x2-x1) * (x2-x1) + (y2-y1) * (y2-y1)) < d_win );
 8003b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b96:	f7fc fb97 	bl	80002c8 <__aeabi_dsub>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	4625      	mov	r5, r4
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003baa:	f7fc fb8d 	bl	80002c8 <__aeabi_dsub>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	f7fc fd3b 	bl	8000630 <__aeabi_dmul>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	4625      	mov	r5, r4
 8003bc0:	461c      	mov	r4, r3
 8003bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bca:	f7fc fb7d 	bl	80002c8 <__aeabi_dsub>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4690      	mov	r8, r2
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bde:	f7fc fb73 	bl	80002c8 <__aeabi_dsub>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4640      	mov	r0, r8
 8003be8:	4649      	mov	r1, r9
 8003bea:	f7fc fd21 	bl	8000630 <__aeabi_dmul>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fb69 	bl	80002cc <__adddf3>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	ec44 3b17 	vmov	d7, r3, r4
 8003c02:	eeb0 0a47 	vmov.f32	s0, s14
 8003c06:	eef0 0a67 	vmov.f32	s1, s15
 8003c0a:	f00b fb23 	bl	800f254 <sqrt>
 8003c0e:	ec51 0b10 	vmov	r0, r1, d0
 8003c12:	2301      	movs	r3, #1
 8003c14:	461c      	mov	r4, r3
 8003c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c1a:	f7fc ff7b 	bl	8000b14 <__aeabi_dcmplt>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <is_robot_in_xy_window+0xd8>
 8003c24:	2300      	movs	r3, #0
 8003c26:	461c      	mov	r4, r3
 8003c28:	b2e3      	uxtb	r3, r4
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3730      	adds	r7, #48	; 0x30
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003c34 <is_robot_in_angle_window>:

/** near the angle target in radian ? Only valid if
 *  traj->target.pol.angle is set (i.e. an angle command, not an xy
 *  command) */
static uint8_t is_robot_in_angle_window(struct trajectory *traj, double a_win_rad)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b089      	sub	sp, #36	; 0x24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	ed87 0b00 	vstr	d0, [r7]
	double a;
	
	/* convert relative angle from imp to rad */
	a = traj->target.pol.angle - rs_get_angle(traj->robot);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68dc      	ldr	r4, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fccb 	bl	80035e4 <rs_get_angle>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	1ae3      	subs	r3, r4, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc86 	bl	8000564 <__aeabi_i2d>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a /= traj->position->phys.distance_imp_per_mm;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c70:	f7fc fe08 	bl	8000884 <__aeabi_ddiv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a /= traj->position->phys.track_mm;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4623      	mov	r3, r4
 8003c88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c8c:	f7fc fdfa 	bl	8000884 <__aeabi_ddiv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a *= 2.;
 8003c98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	f7fc fb14 	bl	80002cc <__adddf3>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return ABS(a) < a_win_rad;
 8003cac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003cb0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003cc0:	f7fc ff28 	bl	8000b14 <__aeabi_dcmplt>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <is_robot_in_angle_window+0xa2>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	461c      	mov	r4, r3
 8003cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce2:	f7fc ff17 	bl	8000b14 <__aeabi_dcmplt>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <is_robot_in_angle_window+0xbc>
 8003cec:	2300      	movs	r3, #0
 8003cee:	461c      	mov	r4, r3
 8003cf0:	b2e3      	uxtb	r3, r4
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd90      	pop	{r4, r7, pc}
 8003cfa:	bf00      	nop

08003cfc <__trajectory_goto_d_a_rel>:
 *   a_rad : angle in radian
 *   flags : what to update (UPDATE_A, UPDATE_D)
 */
void __trajectory_goto_d_a_rel(struct trajectory *traj, double d_mm, 
			       double a_rad, uint8_t state, uint8_t flags)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b089      	sub	sp, #36	; 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6178      	str	r0, [r7, #20]
 8003d04:	ed87 0b02 	vstr	d0, [r7, #8]
 8003d08:	ed87 1b00 	vstr	d1, [r7]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	74fb      	strb	r3, [r7, #19]
 8003d10:	4613      	mov	r3, r2
 8003d12:	74bb      	strb	r3, [r7, #18]
	int32_t a_consign, d_consign;

	DEBUG(E_TRAJECTORY, "Goto DA/RS rel to d=%f a_rad=%f", d_mm, a_rad);
	delete_event(traj);
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7ff fe0d 	bl	8003934 <delete_event>
	traj->state = state;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	7cfa      	ldrb	r2, [r7, #19]
 8003d1e:	701a      	strb	r2, [r3, #0]
	if (flags & UPDATE_A) {
 8003d20:	7cbb      	ldrb	r3, [r7, #18]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d043      	beq.n	8003db2 <__trajectory_goto_d_a_rel+0xb6>
		if (flags & RESET_A) {
 8003d2a:	7cbb      	ldrb	r3, [r7, #18]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <__trajectory_goto_d_a_rel+0x3e>
			a_consign = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	e025      	b.n	8003d86 <__trajectory_goto_d_a_rel+0x8a>
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d46:	f7fc fc73 	bl	8000630 <__aeabi_dmul>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	4621      	mov	r1, r4
					      (traj->position->phys.track_mm) / 2); 
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
	if (flags & UPDATE_A) {
		if (flags & RESET_A) {
			a_consign = 0;
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4623      	mov	r3, r4
 8003d5e:	f7fc fc67 	bl	8000630 <__aeabi_dmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	4618      	mov	r0, r3
 8003d68:	4621      	mov	r1, r4
					      (traj->position->phys.track_mm) / 2); 
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d72:	f7fc fd87 	bl	8000884 <__aeabi_ddiv>
 8003d76:	4603      	mov	r3, r0
 8003d78:	460c      	mov	r4, r1
	if (flags & UPDATE_A) {
		if (flags & RESET_A) {
			a_consign = 0;
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	f7fc ff07 	bl	8000b90 <__aeabi_d2iz>
 8003d82:	4603      	mov	r3, r0
 8003d84:	61fb      	str	r3, [r7, #28]
					      (traj->position->phys.track_mm) / 2); 
		}
		a_consign +=  rs_get_angle(traj->robot);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fc2a 	bl	80035e4 <rs_get_angle>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
		traj->target.pol.angle = a_consign;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	60da      	str	r2, [r3, #12]
		vLockAngleConsign();
 8003d9e:	f7fe fa55 	bl	800224c <vLockAngleConsign>
		cs_set_consign(traj->csm_angle, a_consign);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	69f9      	ldr	r1, [r7, #28]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fdfd 	bl	80029a8 <cs_set_consign>
		vUnlockAngleConsign();
 8003dae:	f7fe fa93 	bl	80022d8 <vUnlockAngleConsign>
	}
	if (flags & UPDATE_D) {
 8003db2:	7cbb      	ldrb	r3, [r7, #18]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02d      	beq.n	8003e18 <__trajectory_goto_d_a_rel+0x11c>
		if (flags & RESET_D) {
 8003dbc:	7cbb      	ldrb	r3, [r7, #18]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <__trajectory_goto_d_a_rel+0xd0>
			d_consign = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e00f      	b.n	8003dec <__trajectory_goto_d_a_rel+0xf0>
		}
		else {
			d_consign = (int32_t)((d_mm) * (traj->position->phys.distance_imp_per_mm));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd8:	f7fc fc2a 	bl	8000630 <__aeabi_dmul>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4618      	mov	r0, r3
 8003de2:	4621      	mov	r1, r4
 8003de4:	f7fc fed4 	bl	8000b90 <__aeabi_d2iz>
 8003de8:	4603      	mov	r3, r0
 8003dea:	61bb      	str	r3, [r7, #24]
		}
		d_consign += rs_get_distance(traj->robot);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fc09 	bl	8003608 <rs_get_distance>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
		traj->target.pol.distance = d_consign;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	609a      	str	r2, [r3, #8]
		vLockDistanceConsign();
 8003e04:	f7fe fa30 	bl	8002268 <vLockDistanceConsign>
		cs_set_consign(traj->csm_distance, d_consign);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fdca 	bl	80029a8 <cs_set_consign>
		vUnlockDistanceConsign();
 8003e14:	f7fe fa6e 	bl	80022f4 <vUnlockDistanceConsign>
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3724      	adds	r7, #36	; 0x24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}

08003e20 <trajectory_turnto_xy>:
				  UPDATE_A | UPDATE_D | RESET_D);
}

/** turn the robot until the point x,y is in front of us */ 
void trajectory_turnto_xy(struct trajectory *traj, double x_abs_mm, double y_abs_mm)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	ed2d 8b02 	vpush	{d8}
 8003e26:	b08d      	sub	sp, #52	; 0x34
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6178      	str	r0, [r7, #20]
 8003e2c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003e30:	ed87 1b00 	vstr	d1, [r7]
	double posx = position_get_x_double(traj->position); 
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff faa1 	bl	8003380 <position_get_x_double>
 8003e3e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double posy = position_get_y_double(traj->position);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fab2 	bl	80033b0 <position_get_y_double>
 8003e4c:	ed87 0b08 	vstr	d0, [r7, #32]
	double posa = position_get_a_rad_double(traj->position);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fac3 	bl	80033e0 <position_get_a_rad_double>
 8003e5a:	ed87 0b06 	vstr	d0, [r7, #24]

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0,
			simple_modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa),
 8003e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e66:	f7fc fa2f 	bl	80002c8 <__aeabi_dsub>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	ec44 3b18 	vmov	d8, r3, r4
 8003e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e7a:	f7fc fa25 	bl	80002c8 <__aeabi_dsub>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	ec44 3b17 	vmov	d7, r3, r4
 8003e86:	eeb0 1a47 	vmov.f32	s2, s14
 8003e8a:	eef0 1a67 	vmov.f32	s3, s15
 8003e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8003e92:	eef0 0a68 	vmov.f32	s1, s17
 8003e96:	f00b f9db 	bl	800f250 <atan2>
 8003e9a:	ec51 0b10 	vmov	r0, r1, d0
	double posx = position_get_x_double(traj->position); 
	double posy = position_get_y_double(traj->position);
	double posa = position_get_a_rad_double(traj->position);

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0,
 8003e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea2:	f7fc fa11 	bl	80002c8 <__aeabi_dsub>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	ec44 3b17 	vmov	d7, r3, r4
 8003eae:	eeb0 0a47 	vmov.f32	s0, s14
 8003eb2:	eef0 0a67 	vmov.f32	s1, s15
 8003eb6:	f7ff fd77 	bl	80039a8 <simple_modulo_2pi>
 8003eba:	eeb0 7a40 	vmov.f32	s14, s0
 8003ebe:	eef0 7a60 	vmov.f32	s15, s1
 8003ec2:	2207      	movs	r2, #7
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	eeb0 1a47 	vmov.f32	s2, s14
 8003eca:	eef0 1a67 	vmov.f32	s3, s15
 8003ece:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8003ee8 <trajectory_turnto_xy+0xc8>
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	f7ff ff12 	bl	8003cfc <__trajectory_goto_d_a_rel>
			simple_modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa),
				  RUNNING_A,
				  UPDATE_A | UPDATE_D | RESET_D);
}
 8003ed8:	bf00      	nop
 8003eda:	3734      	adds	r7, #52	; 0x34
 8003edc:	46bd      	mov	sp, r7
 8003ede:	ecbd 8b02 	vpop	{d8}
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	f3af 8000 	nop.w
	...

08003ef0 <trajectory_turnto_xy_behind>:

/** turn the robot until the point x,y is behind us */ 
void trajectory_turnto_xy_behind(struct trajectory *traj, double x_abs_mm, double y_abs_mm)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	ed2d 8b02 	vpush	{d8}
 8003ef6:	b08d      	sub	sp, #52	; 0x34
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6178      	str	r0, [r7, #20]
 8003efc:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f00:	ed87 1b00 	vstr	d1, [r7]
	double posx = position_get_x_double(traj->position); 
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fa39 	bl	8003380 <position_get_x_double>
 8003f0e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double posy = position_get_y_double(traj->position);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fa4a 	bl	80033b0 <position_get_y_double>
 8003f1c:	ed87 0b08 	vstr	d0, [r7, #32]
	double posa = position_get_a_rad_double(traj->position);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fa5b 	bl	80033e0 <position_get_a_rad_double>
 8003f2a:	ed87 0b06 	vstr	d0, [r7, #24]

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0, 
			modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa + M_PI),
 8003f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f36:	f7fc f9c7 	bl	80002c8 <__aeabi_dsub>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	ec44 3b18 	vmov	d8, r3, r4
 8003f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f4a:	f7fc f9bd 	bl	80002c8 <__aeabi_dsub>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	ec44 3b17 	vmov	d7, r3, r4
 8003f56:	eeb0 1a47 	vmov.f32	s2, s14
 8003f5a:	eef0 1a67 	vmov.f32	s3, s15
 8003f5e:	eeb0 0a48 	vmov.f32	s0, s16
 8003f62:	eef0 0a68 	vmov.f32	s1, s17
 8003f66:	f00b f973 	bl	800f250 <atan2>
 8003f6a:	ec51 0b10 	vmov	r0, r1, d0
 8003f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f72:	f7fc f9a9 	bl	80002c8 <__aeabi_dsub>
 8003f76:	4603      	mov	r3, r0
 8003f78:	460c      	mov	r4, r1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4621      	mov	r1, r4
	double posx = position_get_x_double(traj->position); 
	double posy = position_get_y_double(traj->position);
	double posa = position_get_a_rad_double(traj->position);

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0, 
 8003f7e:	a314      	add	r3, pc, #80	; (adr r3, 8003fd0 <trajectory_turnto_xy_behind+0xe0>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc f9a2 	bl	80002cc <__adddf3>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	ec44 3b17 	vmov	d7, r3, r4
 8003f90:	eeb0 0a47 	vmov.f32	s0, s14
 8003f94:	eef0 0a67 	vmov.f32	s1, s15
 8003f98:	f7ff fd4e 	bl	8003a38 <modulo_2pi>
 8003f9c:	eeb0 7a40 	vmov.f32	s14, s0
 8003fa0:	eef0 7a60 	vmov.f32	s15, s1
 8003fa4:	2207      	movs	r2, #7
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	eeb0 1a47 	vmov.f32	s2, s14
 8003fac:	eef0 1a67 	vmov.f32	s3, s15
 8003fb0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003fc8 <trajectory_turnto_xy_behind+0xd8>
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f7ff fea1 	bl	8003cfc <__trajectory_goto_d_a_rel>
			modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa + M_PI),
				  RUNNING_A,
				  UPDATE_A | UPDATE_D | RESET_D);
}
 8003fba:	bf00      	nop
 8003fbc:	3734      	adds	r7, #52	; 0x34
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	ecbd 8b02 	vpop	{d8}
 8003fc4:	bd90      	pop	{r4, r7, pc}
 8003fc6:	bf00      	nop
	...
 8003fd0:	54442d18 	.word	0x54442d18
 8003fd4:	400921fb 	.word	0x400921fb

08003fd8 <trajectory_d_a_rel>:
	__trajectory_goto_d_a_rel(traj, 0, a, RUNNING_A, UPDATE_A);
}

/** turn by 'a' degrees */
void trajectory_d_a_rel(struct trajectory *traj, double d_mm, double a_deg)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6178      	str	r0, [r7, #20]
 8003fe0:	ed87 0b02 	vstr	d0, [r7, #8]
 8003fe4:	ed87 1b00 	vstr	d1, [r7]
	__trajectory_goto_d_a_rel(traj, d_mm, RAD(a_deg),
 8003fe8:	a30d      	add	r3, pc, #52	; (adr r3, 8004020 <trajectory_d_a_rel+0x48>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ff2:	f7fc fb1d 	bl	8000630 <__aeabi_dmul>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	ec44 3b17 	vmov	d7, r3, r4
 8003ffe:	2203      	movs	r2, #3
 8004000:	2103      	movs	r1, #3
 8004002:	eeb0 1a47 	vmov.f32	s2, s14
 8004006:	eef0 1a67 	vmov.f32	s3, s15
 800400a:	ed97 0b02 	vldr	d0, [r7, #8]
 800400e:	6978      	ldr	r0, [r7, #20]
 8004010:	f7ff fe74 	bl	8003cfc <__trajectory_goto_d_a_rel>
				  RUNNING_AD, UPDATE_A | UPDATE_D);
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd90      	pop	{r4, r7, pc}
 800401c:	f3af 8000 	nop.w
 8004020:	a2529d39 	.word	0xa2529d39
 8004024:	3f91df46 	.word	0x3f91df46

08004028 <trajectory_goto_xy_abs>:

/************ GOTO XY, USE EVENTS */

/** goto a x,y point, using a trajectory event */
void trajectory_goto_xy_abs(struct trajectory *traj, double x, double y)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6178      	str	r0, [r7, #20]
 8004030:	ed87 0b02 	vstr	d0, [r7, #8]
 8004034:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004038:	6978      	ldr	r0, [r7, #20]
 800403a:	f7ff fc7b 	bl	8003934 <delete_event>
	traj->target.cart.x = x;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004044:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800404e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_START;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2204      	movs	r2, #4
 8004056:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	f7ff fc89 	bl	8003970 <schedule_event>
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	bf00      	nop

08004068 <trajectory_goto_forward_xy_abs>:

/** go forward to a x,y point, using a trajectory event */
void trajectory_goto_forward_xy_abs(struct trajectory *traj, double x, double y)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6178      	str	r0, [r7, #20]
 8004070:	ed87 0b02 	vstr	d0, [r7, #8]
 8004074:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004078:	6978      	ldr	r0, [r7, #20]
 800407a:	f7ff fc5b 	bl	8003934 <delete_event>
	traj->target.cart.x = x;
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004084:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800408e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_F_START;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2207      	movs	r2, #7
 8004096:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 8004098:	6978      	ldr	r0, [r7, #20]
 800409a:	f7ff fc69 	bl	8003970 <schedule_event>
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	bf00      	nop

080040a8 <trajectory_goto_backward_xy_abs>:

/** go backward to a x,y point, using a trajectory event */
void trajectory_goto_backward_xy_abs(struct trajectory *traj, double x, double y)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6178      	str	r0, [r7, #20]
 80040b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80040b4:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	f7ff fc3b 	bl	8003934 <delete_event>
	traj->target.cart.x = x;
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80040c4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	e897 0018 	ldmia.w	r7, {r3, r4}
 80040ce:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_B_START;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	220a      	movs	r2, #10
 80040d6:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f7ff fc49 	bl	8003970 <schedule_event>
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}
 80040e6:	bf00      	nop

080040e8 <trajectory_finished>:

/** return true if the position consign is equal to the filtered
 * position consign (after quadramp filter), for angle and
 * distance. */
uint8_t trajectory_finished(struct trajectory *traj)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	return cs_get_consign(traj->csm_angle) == cs_get_filtered_consign(traj->csm_angle) &&
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fc3b 	bl	8002970 <cs_get_consign>
 80040fa:	4604      	mov	r4, r0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fc43 	bl	800298c <cs_get_filtered_consign>
 8004106:	4603      	mov	r3, r0
 8004108:	429c      	cmp	r4, r3
 800410a:	d10f      	bne.n	800412c <trajectory_finished+0x44>
		cs_get_consign(traj->csm_distance) == cs_get_filtered_consign(traj->csm_distance) ;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fc2d 	bl	8002970 <cs_get_consign>
 8004116:	4604      	mov	r4, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fc35 	bl	800298c <cs_get_filtered_consign>
 8004122:	4603      	mov	r3, r0
/** return true if the position consign is equal to the filtered
 * position consign (after quadramp filter), for angle and
 * distance. */
uint8_t trajectory_finished(struct trajectory *traj)
{
	return cs_get_consign(traj->csm_angle) == cs_get_filtered_consign(traj->csm_angle) &&
 8004124:	429c      	cmp	r4, r3
 8004126:	d101      	bne.n	800412c <trajectory_finished+0x44>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <trajectory_finished+0x46>
 800412c:	2300      	movs	r3, #0
 800412e:	b2db      	uxtb	r3, r3
		cs_get_consign(traj->csm_distance) == cs_get_filtered_consign(traj->csm_distance) ;
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <trajectory_in_window>:

/** return true if traj is nearly finished */
uint8_t trajectory_in_window(struct trajectory *traj, double d_win, double a_win_rad)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6178      	str	r0, [r7, #20]
 8004140:	ed87 0b02 	vstr	d0, [r7, #8]
 8004144:	ed87 1b00 	vstr	d1, [r7]
	switch(traj->state) {
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	2b0b      	cmp	r3, #11
 8004150:	d844      	bhi.n	80041dc <trajectory_in_window+0xa4>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <trajectory_in_window+0x20>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	08004197 	.word	0x08004197
 800415c:	080041a5 	.word	0x080041a5
 8004160:	080041b3 	.word	0x080041b3
 8004164:	080041dd 	.word	0x080041dd
 8004168:	080041dd 	.word	0x080041dd
 800416c:	08004189 	.word	0x08004189
 8004170:	080041dd 	.word	0x080041dd
 8004174:	080041dd 	.word	0x080041dd
 8004178:	08004189 	.word	0x08004189
 800417c:	080041dd 	.word	0x080041dd
 8004180:	080041dd 	.word	0x080041dd
 8004184:	08004189 	.word	0x08004189

	case RUNNING_XY_ANGLE_OK: 
	case RUNNING_XY_F_ANGLE_OK: 
	case RUNNING_XY_B_ANGLE_OK: 
		/* if robot coordinates are near the x,y target */
		return is_robot_in_xy_window(traj, d_win);
 8004188:	ed97 0b02 	vldr	d0, [r7, #8]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7ff fcdf 	bl	8003b50 <is_robot_in_xy_window>
 8004192:	4603      	mov	r3, r0
 8004194:	e023      	b.n	80041de <trajectory_in_window+0xa6>

	case RUNNING_A: 
		return is_robot_in_angle_window(traj, a_win_rad);
 8004196:	ed97 0b00 	vldr	d0, [r7]
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff fd4a 	bl	8003c34 <is_robot_in_angle_window>
 80041a0:	4603      	mov	r3, r0
 80041a2:	e01c      	b.n	80041de <trajectory_in_window+0xa6>

	case RUNNING_D:
		return is_robot_in_dist_window(traj, d_win);
 80041a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	f7ff fc81 	bl	8003ab0 <is_robot_in_dist_window>
 80041ae:	4603      	mov	r3, r0
 80041b0:	e015      	b.n	80041de <trajectory_in_window+0xa6>

	case RUNNING_AD:
		return is_robot_in_dist_window(traj, d_win) && 
 80041b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fc7a 	bl	8003ab0 <is_robot_in_dist_window>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <trajectory_in_window+0x9e>
			is_robot_in_angle_window(traj, a_win_rad);
 80041c2:	ed97 0b00 	vldr	d0, [r7]
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff fd34 	bl	8003c34 <is_robot_in_angle_window>
 80041cc:	4603      	mov	r3, r0

	case RUNNING_D:
		return is_robot_in_dist_window(traj, d_win);

	case RUNNING_AD:
		return is_robot_in_dist_window(traj, d_win) && 
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <trajectory_in_window+0x9e>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <trajectory_in_window+0xa0>
 80041d6:	2300      	movs	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e000      	b.n	80041de <trajectory_in_window+0xa6>
	case RUNNING_XY_B_START:
	case RUNNING_XY_ANGLE: 
	case RUNNING_XY_F_ANGLE:
	case RUNNING_XY_B_ANGLE:
	default:
		return 0;
 80041dc:	2300      	movs	r3, #0
	}
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop

080041e8 <trajectory_manager_event>:

/*********** *TRAJECTORY EVENT FUNC */

/** event called for xy trajectories */
static void trajectory_manager_event(void * param)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b09e      	sub	sp, #120	; 0x78
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
	struct trajectory *traj = (struct trajectory *)param;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	double coef=1.0;
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <trajectory_manager_event+0x200>)
 80041fc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double x,y,a;
	int32_t d_consign=0, a_consign=0;
 8004200:	2300      	movs	r3, #0
 8004202:	677b      	str	r3, [r7, #116]	; 0x74
 8004204:	2300      	movs	r3, #0
 8004206:	673b      	str	r3, [r7, #112]	; 0x70
	vect2_pol v2pol_target;

	TickType_t xNextWakeTime;

	/* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8004208:	f003 fc10 	bl	8007a2c <xTaskGetTickCount>
 800420c:	4603      	mov	r3, r0
 800420e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
        vTaskDelayUntil( &xNextWakeTime, DO_TRAJECTORY_MSEC);
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	2164      	movs	r1, #100	; 0x64
 8004216:	4618      	mov	r0, r3
 8004218:	f003 fa24 	bl	8007664 <vTaskDelayUntil>

		x = position_get_x_double(traj->position);
 800421c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f8ad 	bl	8003380 <position_get_x_double>
 8004226:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		y = position_get_y_double(traj->position);
 800422a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f8be 	bl	80033b0 <position_get_y_double>
 8004234:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		a = position_get_a_rad_double(traj->position);
 8004238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f8cf 	bl	80033e0 <position_get_a_rad_double>
 8004242:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

		/* step 1 : process new commands to quadramps */

		switch (traj->state) {
 8004246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	3b04      	subs	r3, #4
 800424c:	2b08      	cmp	r3, #8
 800424e:	f200 8156 	bhi.w	80044fe <trajectory_manager_event+0x316>
		case RUNNING_XY_B_ANGLE:
		case RUNNING_XY_B_ANGLE_OK:

			/* process the command vector from absolute target and
			 * current position */
			v2cart_pos.x = traj->target.cart.x - x;
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800425c:	f7fc f834 	bl	80002c8 <__aeabi_dsub>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	e9c7 2308 	strd	r2, r3, [r7, #32]
			v2cart_pos.y = traj->target.cart.y - y;
 8004268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800426e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004272:	f7fc f829 	bl	80002c8 <__aeabi_dsub>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			vect2_cart2pol(&v2cart_pos, &v2pol_target);
 800427e:	f107 0210 	add.w	r2, r7, #16
 8004282:	f107 0320 	add.w	r3, r7, #32
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe fe15 	bl	8002eb8 <vect2_cart2pol>
			v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta - a);
 800428e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004292:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004296:	f7fc f817 	bl	80002c8 <__aeabi_dsub>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	ec43 2b17 	vmov	d7, r2, r3
 80042a2:	eeb0 0a47 	vmov.f32	s0, s14
 80042a6:	eef0 0a67 	vmov.f32	s1, s15
 80042aa:	f7ff fb7d 	bl	80039a8 <simple_modulo_2pi>
 80042ae:	eeb0 7a40 	vmov.f32	s14, s0
 80042b2:	eef0 7a60 	vmov.f32	s15, s1
 80042b6:	ed87 7b06 	vstr	d7, [r7, #24]

			/* asked to go backwards */
			if (traj->state >= RUNNING_XY_B_START &&
 80042ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b09      	cmp	r3, #9
 80042c0:	d921      	bls.n	8004306 <trajectory_manager_event+0x11e>
				traj->state <= RUNNING_XY_B_ANGLE_OK ) {
 80042c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c4:	781b      	ldrb	r3, [r3, #0]
			v2cart_pos.y = traj->target.cart.y - y;
			vect2_cart2pol(&v2cart_pos, &v2pol_target);
			v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta - a);

			/* asked to go backwards */
			if (traj->state >= RUNNING_XY_B_START &&
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d81d      	bhi.n	8004306 <trajectory_manager_event+0x11e>
				traj->state <= RUNNING_XY_B_ANGLE_OK ) {
				v2pol_target.r = -v2pol_target.r;
 80042ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ce:	4614      	mov	r4, r2
 80042d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80042d4:	e9c7 4504 	strd	r4, r5, [r7, #16]
				v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
 80042d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042dc:	a33c      	add	r3, pc, #240	; (adr r3, 80043d0 <trajectory_manager_event+0x1e8>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f7fb fff3 	bl	80002cc <__adddf3>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	ec43 2b17 	vmov	d7, r2, r3
 80042ee:	eeb0 0a47 	vmov.f32	s0, s14
 80042f2:	eef0 0a67 	vmov.f32	s1, s15
 80042f6:	f7ff fb57 	bl	80039a8 <simple_modulo_2pi>
 80042fa:	eeb0 7a40 	vmov.f32	s14, s0
 80042fe:	eef0 7a60 	vmov.f32	s15, s1
 8004302:	ed87 7b06 	vstr	d7, [r7, #24]
			}

			/* if we don't need to go forward */
			if (traj->state >= RUNNING_XY_START &&
 8004306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d935      	bls.n	800437a <trajectory_manager_event+0x192>
				traj->state <= RUNNING_XY_ANGLE_OK ) {
 800430e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004310:	781b      	ldrb	r3, [r3, #0]
				v2pol_target.r = -v2pol_target.r;
				v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
			}

			/* if we don't need to go forward */
			if (traj->state >= RUNNING_XY_START &&
 8004312:	2b06      	cmp	r3, #6
 8004314:	d831      	bhi.n	800437a <trajectory_manager_event+0x192>
				traj->state <= RUNNING_XY_ANGLE_OK ) {
				/* If the target is behind the robot, we need to go
				 * backwards. 0.52 instead of 0.5 because we prefer to
				 * go forward */
				if ((v2pol_target.theta > 0.52*M_PI) ||
 8004316:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800431a:	a32f      	add	r3, pc, #188	; (adr r3, 80043d8 <trajectory_manager_event+0x1f0>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f7fc fc16 	bl	8000b50 <__aeabi_dcmpgt>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <trajectory_manager_event+0x156>
					(v2pol_target.theta < -0.52*M_PI ) ) {
 800432a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			if (traj->state >= RUNNING_XY_START &&
				traj->state <= RUNNING_XY_ANGLE_OK ) {
				/* If the target is behind the robot, we need to go
				 * backwards. 0.52 instead of 0.5 because we prefer to
				 * go forward */
				if ((v2pol_target.theta > 0.52*M_PI) ||
 800432e:	a32c      	add	r3, pc, #176	; (adr r3, 80043e0 <trajectory_manager_event+0x1f8>)
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f7fc fbee 	bl	8000b14 <__aeabi_dcmplt>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01d      	beq.n	800437a <trajectory_manager_event+0x192>
					(v2pol_target.theta < -0.52*M_PI ) ) {
					v2pol_target.r = -v2pol_target.r;
 800433e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004342:	4690      	mov	r8, r2
 8004344:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004348:	e9c7 8904 	strd	r8, r9, [r7, #16]
					v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
 800434c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004350:	a31f      	add	r3, pc, #124	; (adr r3, 80043d0 <trajectory_manager_event+0x1e8>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f7fb ffb9 	bl	80002cc <__adddf3>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	ec43 2b17 	vmov	d7, r2, r3
 8004362:	eeb0 0a47 	vmov.f32	s0, s14
 8004366:	eef0 0a67 	vmov.f32	s1, s15
 800436a:	f7ff fb1d 	bl	80039a8 <simple_modulo_2pi>
 800436e:	eeb0 7a40 	vmov.f32	s14, s0
 8004372:	eef0 7a60 	vmov.f32	s15, s1
 8004376:	ed87 7b06 	vstr	d7, [r7, #24]
				}
			}

			/* If the robot is correctly oriented to start moving in distance */
			/* here limit dist speed depending on v2pol_target.theta */
			if (ABS(v2pol_target.theta) > traj->a_start_rad) // || ABS(v2pol_target.r) < traj->d_win)
 800437a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800438e:	f7fc fbc1 	bl	8000b14 <__aeabi_dcmplt>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <trajectory_manager_event+0x1bc>
 8004398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
 800439c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80043ae:	f7fc fbcf 	bl	8000b50 <__aeabi_dcmpgt>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d019      	beq.n	80043ec <trajectory_manager_event+0x204>
				set_quadramp_speed(traj, 0, traj->a_speed);
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043bc:	b21b      	sxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	2100      	movs	r1, #0
 80043c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80043c4:	f7ff fa58 	bl	8003878 <set_quadramp_speed>
 80043c8:	e053      	b.n	8004472 <trajectory_manager_event+0x28a>
 80043ca:	bf00      	nop
 80043cc:	f3af 8000 	nop.w
 80043d0:	54442d18 	.word	0x54442d18
 80043d4:	400921fb 	.word	0x400921fb
 80043d8:	4d659f8a 	.word	0x4d659f8a
 80043dc:	3ffa2357 	.word	0x3ffa2357
 80043e0:	4d659f8a 	.word	0x4d659f8a
 80043e4:	bffa2357 	.word	0xbffa2357
 80043e8:	3ff00000 	.word	0x3ff00000
			else {
				coef = (traj->a_start_rad - ABS(v2pol_target.theta)) / traj->a_start_rad;
 80043ec:	6dfb      	ldral	r3, [r7, #92]	; 0x5c
 80043ee:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80043f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004406:	f7fc fb85 	bl	8000b14 <__aeabi_dcmplt>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <trajectory_manager_event+0x234>
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	663b      	str	r3, [r7, #96]	; 0x60
 8004414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004416:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
 800441c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004420:	4650      	mov	r0, sl
 8004422:	4659      	mov	r1, fp
 8004424:	f7fb ff50 	bl	80002c8 <__aeabi_dsub>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004436:	f7fc fa25 	bl	8000884 <__aeabi_ddiv>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				set_quadramp_speed(traj, traj->d_speed * coef, traj->a_speed);
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f88c 	bl	8000564 <__aeabi_i2d>
 800444c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004450:	f7fc f8ee 	bl	8000630 <__aeabi_dmul>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f7fc fb98 	bl	8000b90 <__aeabi_d2iz>
 8004460:	4603      	mov	r3, r0
 8004462:	b219      	sxth	r1, r3
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004468:	b21b      	sxth	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800446e:	f7ff fa03 	bl	8003878 <set_quadramp_speed>
			}

			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
 8004472:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800447e:	f7fc f8d7 	bl	8000630 <__aeabi_dmul>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	f7fc fb81 	bl	8000b90 <__aeabi_d2iz>
 800448e:	4603      	mov	r3, r0
 8004490:	677b      	str	r3, [r7, #116]	; 0x74
			d_consign += rs_get_distance(traj->robot);
 8004492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f8b6 	bl	8003608 <rs_get_distance>
 800449c:	4602      	mov	r2, r0
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	4413      	add	r3, r2
 80044a2:	677b      	str	r3, [r7, #116]	; 0x74

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 80044a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
						  (traj->position->phys.distance_imp_per_mm) *
 80044a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 80044b0:	f7fc f8be 	bl	8000630 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
						  (traj->position->phys.distance_imp_per_mm) *
						  (traj->position->phys.track_mm) / 2.2);
 80044bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
						  (traj->position->phys.distance_imp_per_mm) *
 80044c4:	f7fc f8b4 	bl	8000630 <__aeabi_dmul>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
						  (traj->position->phys.track_mm) / 2.2);
 80044d0:	a34d      	add	r3, pc, #308	; (adr r3, 8004608 <trajectory_manager_event+0x420>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc f9d5 	bl	8000884 <__aeabi_ddiv>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	f7fc fb55 	bl	8000b90 <__aeabi_d2iz>
 80044e6:	4603      	mov	r3, r0
 80044e8:	673b      	str	r3, [r7, #112]	; 0x70
						  (traj->position->phys.distance_imp_per_mm) *
						  (traj->position->phys.track_mm) / 2.2);
			a_consign += rs_get_angle(traj->robot);
 80044ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f878 	bl	80035e4 <rs_get_angle>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f8:	4413      	add	r3, r2
 80044fa:	673b      	str	r3, [r7, #112]	; 0x70

			break;
 80044fc:	e00a      	b.n	8004514 <trajectory_manager_event+0x32c>

		default:
			/* hmmm quite odd, delete the event */
			traj->scheduler_task=NULL;
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
			vTaskDelete(traj->scheduler_task);
 8004504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	4618      	mov	r0, r3
 800450a:	f003 f81f 	bl	800754c <vTaskDelete>
			traj->state = READY;
 800450e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
		/* step 2 : update state, or delete event if we reached the
		 * destination */

		/* XXX if target is our pos !! */

		switch (traj->state) {
 8004514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	3b04      	subs	r3, #4
 800451a:	2b08      	cmp	r3, #8
 800451c:	d857      	bhi.n	80045ce <trajectory_manager_event+0x3e6>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <trajectory_manager_event+0x33c>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004549 	.word	0x08004549
 8004528:	08004557 	.word	0x08004557
 800452c:	080045a3 	.word	0x080045a3
 8004530:	08004549 	.word	0x08004549
 8004534:	08004557 	.word	0x08004557
 8004538:	080045a3 	.word	0x080045a3
 800453c:	08004549 	.word	0x08004549
 8004540:	08004557 	.word	0x08004557
 8004544:	080045a3 	.word	0x080045a3
		case RUNNING_XY_START:
		case RUNNING_XY_F_START:
		case RUNNING_XY_B_START:
			/* START -> ANGLE */
			traj->state ++;
 8004548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	701a      	strb	r2, [r3, #0]
			break;
 8004554:	e040      	b.n	80045d8 <trajectory_manager_event+0x3f0>

		case RUNNING_XY_ANGLE:
		case RUNNING_XY_F_ANGLE:
		case RUNNING_XY_B_ANGLE: {
			struct quadramp_filter *q_a;
			q_a = traj->csm_angle->consign_filter_params;
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
			/* if d_speed is not 0, we are in start_angle_win */
			if (get_quadramp_distance_speed(traj)) {
 800455e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004560:	f7ff f9d8 	bl	8003914 <get_quadramp_distance_speed>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d033      	beq.n	80045d2 <trajectory_manager_event+0x3ea>
				if(is_robot_in_xy_window(traj, traj->d_win)) {
 800456a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004570:	eeb0 0a47 	vmov.f32	s0, s14
 8004574:	eef0 0a67 	vmov.f32	s1, s15
 8004578:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800457a:	f7ff fae9 	bl	8003b50 <is_robot_in_xy_window>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <trajectory_manager_event+0x3ac>
					traj->scheduler_task=NULL;
 8004584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
					vTaskDelete(traj->scheduler_task);
 800458a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4618      	mov	r0, r3
 8004590:	f002 ffdc 	bl	800754c <vTaskDelete>
				}
				/* ANGLE -> ANGLE_OK */
				traj->state ++;
 8004594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459e:	701a      	strb	r2, [r3, #0]
			}
			break;
 80045a0:	e017      	b.n	80045d2 <trajectory_manager_event+0x3ea>

		case RUNNING_XY_ANGLE_OK:
		case RUNNING_XY_F_ANGLE_OK:
		case RUNNING_XY_B_ANGLE_OK:
			/* If we reached the destination */
			if(is_robot_in_xy_window(traj, traj->d_win)) {
 80045a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a4:	ed93 7b06 	vldr	d7, [r3, #24]
 80045a8:	eeb0 0a47 	vmov.f32	s0, s14
 80045ac:	eef0 0a67 	vmov.f32	s1, s15
 80045b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80045b2:	f7ff facd 	bl	8003b50 <is_robot_in_xy_window>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <trajectory_manager_event+0x3ee>
				traj->scheduler_task=NULL;
 80045bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
				vTaskDelete(traj->scheduler_task);
 80045c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4618      	mov	r0, r3
 80045c8:	f002 ffc0 	bl	800754c <vTaskDelete>
			}
		break;
 80045cc:	e003      	b.n	80045d6 <trajectory_manager_event+0x3ee>

		default:
			break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <trajectory_manager_event+0x3f0>
					vTaskDelete(traj->scheduler_task);
				}
				/* ANGLE -> ANGLE_OK */
				traj->state ++;
			}
			break;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <trajectory_manager_event+0x3f0>
			/* If we reached the destination */
			if(is_robot_in_xy_window(traj, traj->d_win)) {
				traj->scheduler_task=NULL;
				vTaskDelete(traj->scheduler_task);
			}
		break;
 80045d6:	bf00      	nop
			break;
		}

		/* step 3 : send the processed commands to cs */

		vLockAngleConsign();
 80045d8:	f7fd fe38 	bl	800224c <vLockAngleConsign>
		cs_set_consign(traj->csm_angle, a_consign);
 80045dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe f9e0 	bl	80029a8 <cs_set_consign>
		vUnlockAngleConsign();
 80045e8:	f7fd fe76 	bl	80022d8 <vUnlockAngleConsign>
		vLockDistanceConsign();
 80045ec:	f7fd fe3c 	bl	8002268 <vLockDistanceConsign>
		cs_set_consign(traj->csm_distance, d_consign);
 80045f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe f9d6 	bl	80029a8 <cs_set_consign>
		vUnlockDistanceConsign();
 80045fc:	f7fd fe7a 	bl	80022f4 <vUnlockDistanceConsign>
	}
 8004600:	e606      	b.n	8004210 <trajectory_manager_event+0x28>
 8004602:	bf00      	nop
 8004604:	f3af 8000 	nop.w
 8004608:	9999999a 	.word	0x9999999a
 800460c:	40019999 	.word	0x40019999

08004610 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004618:	4905      	ldr	r1, [pc, #20]	; (8004630 <NVIC_PriorityGroupConfig+0x20>)
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <NVIC_PriorityGroupConfig+0x24>)
 800461e:	4313      	orrs	r3, r2
 8004620:	60cb      	str	r3, [r1, #12]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	05fa0000 	.word	0x05fa0000

08004638 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <ADC_Init+0xa4>)
 8004654:	4013      	ands	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	791b      	ldrb	r3, [r3, #4]
 800465c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004662:	4313      	orrs	r3, r2
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <ADC_Init+0xa8>)
 800467a:	4013      	ands	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004686:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800468c:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	795b      	ldrb	r3, [r3, #5]
 8004692:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004694:	4313      	orrs	r3, r2
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046ae:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	7d1b      	ldrb	r3, [r3, #20]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	7afb      	ldrb	r3, [r7, #11]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	051b      	lsls	r3, r3, #20
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	fcfffeff 	.word	0xfcfffeff
 80046e0:	c0fff7fd 	.word	0xc0fff7fd

080046e4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	751a      	strb	r2, [r3, #20]
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop

08004724 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <ADC_CommonInit+0x48>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <ADC_CommonInit+0x4c>)
 800473a:	4013      	ands	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8004746:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800474c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8004752:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800475a:	4a04      	ldr	r2, [pc, #16]	; (800476c <ADC_CommonInit+0x48>)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6053      	str	r3, [r2, #4]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012300 	.word	0x40012300
 8004770:	fffc30e0 	.word	0xfffc30e0

08004774 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	60da      	str	r2, [r3, #12]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80047be:	e005      	b.n	80047cc <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	609a      	str	r2, [r3, #8]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <ADC_TempSensorVrefintCmd+0x38>)
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <ADC_TempSensorVrefintCmd+0x38>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047f2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 80047f4:	e005      	b.n	8004802 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <ADC_TempSensorVrefintCmd+0x38>)
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <ADC_TempSensorVrefintCmd+0x38>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004800:	6053      	str	r3, [r2, #4]
  }
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40012300 	.word	0x40012300

08004814 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)FLASH_Latency);
 800481c:	4906      	ldr	r1, [pc, #24]	; (8004838 <FLASH_SetLatency+0x24>)
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <FLASH_SetLatency+0x24>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 020f 	bic.w	r2, r3, #15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40023c00 	.word	0x40023c00

0800483c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e076      	b.n	8004946 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004858:	2201      	movs	r2, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d165      	bne.n	8004940 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	2103      	movs	r1, #3
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	401a      	ands	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	791b      	ldrb	r3, [r3, #4]
 8004892:	4619      	mov	r1, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	791b      	ldrb	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d003      	beq.n	80048b2 <GPIO_Init+0x76>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	791b      	ldrb	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d12e      	bne.n	8004910 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	2103      	movs	r1, #3
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	795b      	ldrb	r3, [r3, #5]
 80048d0:	4619      	mov	r1, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	401a      	ands	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	799b      	ldrb	r3, [r3, #6]
 80048fe:	4619      	mov	r1, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	b29b      	uxth	r3, r3
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	b29b      	uxth	r3, r3
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	b29b      	uxth	r3, r3
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2103      	movs	r1, #3
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	401a      	ands	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	79db      	ldrb	r3, [r3, #7]
 8004930:	4619      	mov	r1, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	3301      	adds	r3, #1
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d985      	bls.n	8004858 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004974:	e003      	b.n	800497e <GPIO_WriteBit+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
  }
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop

0800498c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF14_LTDC: Connect LTDC pins to AF14 for STM32F746xx/756xx devices.
  *            @arg GPIO_AF15_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
 8004998:	4613      	mov	r3, r2
 800499a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80049a4:	787a      	ldrb	r2, [r7, #1]
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	08db      	lsrs	r3, r3, #3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3208      	adds	r2, #8
 80049c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	210f      	movs	r1, #15
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	ea02 0103 	and.w	r1, r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f100 0208 	add.w	r2, r0, #8
 80049e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80049ea:	887b      	ldrh	r3, [r7, #2]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	08db      	lsrs	r3, r3, #3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3208      	adds	r2, #8
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop

08004a20 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  if (NewState != DISABLE)
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <PWR_OverDriveCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODEN;
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <PWR_OverDriveCmd+0x38>)
 8004a32:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <PWR_OverDriveCmd+0x38>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
  }
}
 8004a3c:	e005      	b.n	8004a4a <PWR_OverDriveCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
 8004a3e:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <PWR_OverDriveCmd+0x38>)
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <PWR_OverDriveCmd+0x38>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40007000 	.word	0x40007000

08004a5c <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  if (NewState != DISABLE)
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d006      	beq.n	8004a7a <PWR_OverDriveSWCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODSWEN;
 8004a6c:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <PWR_OverDriveSWCmd+0x38>)
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <PWR_OverDriveSWCmd+0x38>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a76:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
  }
}
 8004a78:	e005      	b.n	8004a86 <PWR_OverDriveSWCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODSWEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
 8004a7a:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <PWR_OverDriveSWCmd+0x38>)
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <PWR_OverDriveSWCmd+0x38>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a84:	6013      	str	r3, [r2, #0]
  }
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40007000 	.word	0x40007000

08004a98 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if( PWR_FLAG & 0x80000000 )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da0f      	bge.n	8004aca <PWR_GetFlagStatus+0x32>
  {
    PWR_FLAG &= PWR_WUPF_MASK;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab0:	607b      	str	r3, [r7, #4]
    if ((PWR->CSR2 & PWR_FLAG) != (uint32_t)RESET)
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <PWR_GetFlagStatus+0x58>)
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <PWR_GetFlagStatus+0x2c>
    {
      bitstatus = SET;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
 8004ac2:	e00d      	b.n	8004ae0 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e00a      	b.n	8004ae0 <PWR_GetFlagStatus+0x48>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_FLAG) != (uint32_t)RESET)
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <PWR_GetFlagStatus+0x58>)
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <PWR_GetFlagStatus+0x44>
    {
      bitstatus = SET;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	e001      	b.n	8004ae0 <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the flag status */
  return bitstatus;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40007000 	.word	0x40007000

08004af4 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <RCC_HSEConfig+0x24>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <RCC_HSEConfig+0x24>)
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	7013      	strb	r3, [r2, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40023802 	.word	0x40023802

08004b1c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8004b26:	2300      	movs	r3, #0
 8004b28:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8004b2e:	2031      	movs	r0, #49	; 0x31
 8004b30:	f000 f9f6 	bl	8004f20 <RCC_GetFlagStatus>
 8004b34:	4603      	mov	r3, r0
 8004b36:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004b44:	d002      	beq.n	8004b4c <RCC_WaitForHSEStartUp+0x30>
 8004b46:	79bb      	ldrb	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8004b4c:	2031      	movs	r0, #49	; 0x31
 8004b4e:	f000 f9e7 	bl	8004f20 <RCC_GetFlagStatus>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	71fb      	strb	r3, [r7, #7]
 8004b5c:	e001      	b.n	8004b62 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8004b62:	79fb      	ldrb	r3, [r7, #7]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b08b      	sub	sp, #44	; 0x2c
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8004b7a:	481c      	ldr	r0, [pc, #112]	; (8004bec <RCC_PLLConfig+0x80>)
 8004b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	409a      	lsls	r2, r3
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	431a      	orrs	r2, r3
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	1e59      	subs	r1, r3, #1
 8004b9e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004ba2:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8004bb6:	431a      	orrs	r2, r3
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004bc0:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8004bca:	69bb      	ldr	r3, [r7, #24]
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8004bdc:	6043      	str	r3, [r0, #4]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
}
 8004bde:	bf00      	nop
 8004be0:	372c      	adds	r7, #44	; 0x2c
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800

08004bf0 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if( NewState != DISABLE )
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <RCC_PLLCmd+0x1e>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004c00:	4a09      	ldr	r2, [pc, #36]	; (8004c28 <RCC_PLLCmd+0x38>)
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <RCC_PLLCmd+0x38>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
  }
}
 8004c0c:	e005      	b.n	8004c1a <RCC_PLLCmd+0x2a>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004c0e:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <RCC_PLLCmd+0x38>)
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <RCC_PLLCmd+0x38>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c18:	6013      	str	r3, [r2, #0]
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <RCC_SYSCLKConfig+0x34>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <RCC_SYSCLKConfig+0x34>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6093      	str	r3, [r2, #8]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40023800 	.word	0x40023800

08004c64 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <RCC_HCLKConfig+0x34>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c86:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <RCC_HCLKConfig+0x34>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6093      	str	r3, [r2, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40023800 	.word	0x40023800

08004c9c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <RCC_PCLK1Config+0x34>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <RCC_PCLK1Config+0x34>)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6093      	str	r3, [r2, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40023800 	.word	0x40023800

08004cd4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <RCC_PCLK2Config+0x38>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <RCC_PCLK2Config+0x38>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6093      	str	r3, [r2, #8]
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800

08004d10 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	2302      	movs	r3, #2
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004d30:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d007      	beq.n	8004d50 <RCC_GetClocksFreq+0x40>
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d009      	beq.n	8004d58 <RCC_GetClocksFreq+0x48>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d13f      	bne.n	8004dc8 <RCC_GetClocksFreq+0xb8>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <RCC_GetClocksFreq+0x144>)
 8004d4c:	601a      	str	r2, [r3, #0]
    break;
 8004d4e:	e03f      	b.n	8004dd0 <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <RCC_GetClocksFreq+0x148>)
 8004d54:	601a      	str	r2, [r3, #0]
    break;
 8004d56:	e03b      	b.n	8004dd0 <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_PLL:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004d58:	4b3d      	ldr	r3, [pc, #244]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d60:	0d9b      	lsrs	r3, r3, #22
 8004d62:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d64:	4b3a      	ldr	r3, [pc, #232]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00d      	beq.n	8004d90 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d74:	4a38      	ldr	r2, [pc, #224]	; (8004e58 <RCC_GetClocksFreq+0x148>)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d7c:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d84:	400b      	ands	r3, r1
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	fb03 f302 	mul.w	r3, r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e00c      	b.n	8004daa <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004d90:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <RCC_GetClocksFreq+0x144>)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004da0:	400b      	ands	r3, r1
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	fb03 f302 	mul.w	r3, r3, r2
 8004da8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004daa:	4b29      	ldr	r3, [pc, #164]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	3301      	adds	r3, #1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
    break;
 8004dc6:	e003      	b.n	8004dd0 <RCC_GetClocksFreq+0xc0>
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <RCC_GetClocksFreq+0x144>)
 8004dcc:	601a      	str	r2, [r3, #0]
    break;
 8004dce:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004dd0:	4b1f      	ldr	r3, [pc, #124]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004de0:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <RCC_GetClocksFreq+0x14c>)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4413      	add	r3, r2
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	40da      	lsrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8004df6:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004dfe:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <RCC_GetClocksFreq+0x14c>)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	40da      	lsrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <RCC_GetClocksFreq+0x140>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004e24:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	0b5b      	lsrs	r3, r3, #13
 8004e2a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <RCC_GetClocksFreq+0x14c>)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	4413      	add	r3, r2
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	40da      	lsrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]
}
 8004e42:	bf00      	nop
 8004e44:	3724      	adds	r7, #36	; 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	007a1200 	.word	0x007a1200
 8004e5c:	08011908 	.word	0x08011908

08004e60 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004e72:	490a      	ldr	r1, [pc, #40]	; (8004e9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8004e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8004e7e:	e006      	b.n	8004e8e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004e80:	4906      	ldr	r1, [pc, #24]	; (8004e9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8004e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800

08004ea0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004eb2:	490a      	ldr	r1, [pc, #40]	; (8004edc <RCC_APB1PeriphClockCmd+0x3c>)
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <RCC_APB1PeriphClockCmd+0x3c>)
 8004eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8004ebe:	e006      	b.n	8004ece <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004ec0:	4906      	ldr	r1, [pc, #24]	; (8004edc <RCC_APB1PeriphClockCmd+0x3c>)
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <RCC_APB1PeriphClockCmd+0x3c>)
 8004ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	4013      	ands	r3, r2
 8004ecc:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800

08004ee0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004ef2:	490a      	ldr	r1, [pc, #40]	; (8004f1c <RCC_APB2PeriphClockCmd+0x3c>)
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <RCC_APB2PeriphClockCmd+0x3c>)
 8004ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8004efe:	e006      	b.n	8004f0e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004f00:	4906      	ldr	r1, [pc, #24]	; (8004f1c <RCC_APB2PeriphClockCmd+0x3c>)
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <RCC_APB2PeriphClockCmd+0x3c>)
 8004f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800

08004f20 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d103      	bne.n	8004f4c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <RCC_GetFlagStatus+0x70>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e009      	b.n	8004f60 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d103      	bne.n	8004f5a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <RCC_GetFlagStatus+0x70>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	e002      	b.n	8004f60 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <RCC_GetFlagStatus+0x70>)
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	74fb      	strb	r3, [r7, #19]
 8004f7c:	e001      	b.n	8004f82 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40023800 	.word	0x40023800

08004f94 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004fae:	609a      	str	r2, [r3, #8]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	60da      	str	r2, [r3, #12]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	615a      	str	r2, [r3, #20]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	61da      	str	r2, [r3, #28]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 800500a:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005016:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 800501c:	4313      	orrs	r3, r2
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	601a      	str	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint32_t)~SPI_CR2_DS;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005036:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint32_t)(SPI_InitStruct->SPI_DataSize);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint32_t)~((uint32_t)SPI_I2SCFGR_I2SMOD);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	61da      	str	r2, [r3, #28]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <SPI_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
  }
}
 80050a6:	e005      	b.n	80050b4 <SPI_Cmd+0x2c>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
  }
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <SPI_SSOutputCmd+0x20>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f043 0204 	orr.w	r2, r3, #4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
  }
}
 80050de:	e005      	b.n	80050ec <SPI_SSOutputCmd+0x2c>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 0204 	bic.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]
  }
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <TIM_TimeBaseInit+0xb8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <TIM_TimeBaseInit+0x44>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_TimeBaseInit+0xbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00f      	beq.n	800513c <TIM_TimeBaseInit+0x44>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d00b      	beq.n	800513c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a24      	ldr	r2, [pc, #144]	; (80051b8 <TIM_TimeBaseInit+0xc0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_TimeBaseInit+0x44>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a23      	ldr	r2, [pc, #140]	; (80051bc <TIM_TimeBaseInit+0xc4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <TIM_TimeBaseInit+0xc8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d108      	bne.n	800514e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint32_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <TIM_TimeBaseInit+0xcc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00c      	beq.n	8005170 <TIM_TimeBaseInit+0x78>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <TIM_TimeBaseInit+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d008      	beq.n	8005170 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint32_t)(~TIM_CR1_CKD);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	629a      	str	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <TIM_TimeBaseInit+0xb8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_TimeBaseInit+0x9e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <TIM_TimeBaseInit+0xbc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d103      	bne.n	800519e <TIM_TimeBaseInit+0xa6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	615a      	str	r2, [r3, #20]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40001000 	.word	0x40001000
 80051c8:	40001400 	.word	0x40001400

080051cc <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <TIM_Cmd+0x20>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
  }
}
 8005206:	e005      	b.n	8005214 <TIM_Cmd+0x2c>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f023 0201 	bic.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
  }
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <TIM_OC1Init+0xe8>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 0302 	bic.w	r3, r3, #2
 8005274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <TIM_OC1Init+0xec>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_OC1Init+0x7a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <TIM_OC1Init+0xf0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d123      	bne.n	80052e2 <TIM_OC1Init+0xc2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0308 	bic.w	r3, r3, #8
 80052a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0304 	bic.w	r3, r3, #4
 80052b2:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	fffeff8f 	.word	0xfffeff8f
 800530c:	40010000 	.word	0x40010000
 8005310:	40010400 	.word	0x40010400

08005314 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0210 	bic.w	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4b30      	ldr	r3, [pc, #192]	; (800540c <TIM_OC2Init+0xf8>)
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005356:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0320 	bic.w	r3, r3, #32
 800536a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a22      	ldr	r2, [pc, #136]	; (8005410 <TIM_OC2Init+0xfc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC2Init+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a21      	ldr	r2, [pc, #132]	; (8005414 <TIM_OC2Init+0x100>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d127      	bne.n	80053e4 <TIM_OC2Init+0xd0>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	feff8fff 	.word	0xfeff8fff
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400

08005418 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4b2f      	ldr	r3, [pc, #188]	; (800550c <TIM_OC3Init+0xf4>)
 8005450:	4013      	ands	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800546c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a21      	ldr	r2, [pc, #132]	; (8005510 <TIM_OC3Init+0xf8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC3Init+0x7e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a20      	ldr	r2, [pc, #128]	; (8005514 <TIM_OC3Init+0xfc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d127      	bne.n	80054e6 <TIM_OC3Init+0xce>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b0:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	fffeff8f 	.word	0xfffeff8f
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <TIM_OC4Init+0xbc>)
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	031b      	lsls	r3, r3, #12
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <TIM_OC4Init+0xc0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_OC4Init+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a12      	ldr	r2, [pc, #72]	; (80055dc <TIM_OC4Init+0xc4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC4Init+0x94>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	019b      	lsls	r3, r3, #6
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	feff8fff 	.word	0xfeff8fff
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400

080055e0 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	605a      	str	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	60da      	str	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	615a      	str	r2, [r3, #20]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	619a      	str	r2, [r3, #24]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	61da      	str	r2, [r3, #28]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0308 	bic.w	r3, r3, #8
 8005676:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	619a      	str	r2, [r3, #24]
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop

08005694 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint32_t)(TIM_OCPreload << 8);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	619a      	str	r2, [r3, #24]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0308 	bic.w	r3, r3, #8
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	61da      	str	r2, [r3, #28]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop

08005704 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint32_t)(TIM_OCPreload << 8);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	61da      	str	r2, [r3, #28]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
  }  
}
 800575a:	e005      	b.n	8005768 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005760:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
  }  
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint32_t TIM_EncoderMode,
                                uint32_t TIM_IC1Polarity, uint32_t TIM_IC2Polarity)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
  uint32_t tmpccmr1 = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
  uint32_t tmpccer = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	61fb      	str	r3, [r7, #28]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	61bb      	str	r3, [r7, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]

  /* Set the encoder Mode */
  tmpsmcr &= (uint32_t)~TIM_SMCR_SMS;
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <TIM_EncoderInterfaceConfig+0x84>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	61fb      	str	r3, [r7, #28]
  tmpsmcr |= TIM_EncoderMode;
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61fb      	str	r3, [r7, #28]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_CC2S);
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <TIM_EncoderInterfaceConfig+0x88>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	f240 1301 	movw	r3, #257	; 0x101
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint32_t)~TIM_CCER_CC1P) & ((uint32_t)~TIM_CCER_CC2P);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (uint32_t)(TIM_IC1Polarity | (uint32_t)(TIM_IC2Polarity << (uint32_t)4));
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	011a      	lsls	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	; 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	fffefff8 	.word	0xfffefff8
 80057fc:	fffffcfc 	.word	0xfffffcfc

08005800 <USART_GetClockSource>:
  *                USART_CLOCKSOURCE_SYSCLK:    USARTx use SYSCLK clock source 
  *                USART_CLOCKSOURCE_LSE:       USARTx use LSE clock source
  *                USART_CLOCKSOURCE_UNDEFINED: Undefined clock source
  */
USART_ClockSourceTypeDef USART_GetClockSource(USART_TypeDef* USARTx)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 8005808:	2310      	movs	r3, #16
 800580a:	73fb      	strb	r3, [r7, #15]
    
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4ac3      	ldr	r2, [pc, #780]	; (8005b1c <USART_GetClockSource+0x31c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d145      	bne.n	80058a0 <USART_GetClockSource+0xa0>
  {
    if( IS_USART1_CLKSOURCE_PCLK2() )
 8005814:	4bc2      	ldr	r3, [pc, #776]	; (8005b20 <USART_GetClockSource+0x320>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <USART_GetClockSource+0x36>
 8005822:	4bbf      	ldr	r3, [pc, #764]	; (8005b20 <USART_GetClockSource+0x320>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <USART_GetClockSource+0x36>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e244      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_SYSCLK() )
 8005836:	4bba      	ldr	r3, [pc, #744]	; (8005b20 <USART_GetClockSource+0x320>)
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <USART_GetClockSource+0x58>
 8005844:	4bb6      	ldr	r3, [pc, #728]	; (8005b20 <USART_GetClockSource+0x320>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <USART_GetClockSource+0x58>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005852:	2304      	movs	r3, #4
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	e233      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_HSI() )
 8005858:	4bb1      	ldr	r3, [pc, #708]	; (8005b20 <USART_GetClockSource+0x320>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <USART_GetClockSource+0x7a>
 8005866:	4bae      	ldr	r3, [pc, #696]	; (8005b20 <USART_GetClockSource+0x320>)
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <USART_GetClockSource+0x7a>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005874:	2302      	movs	r3, #2
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	e222      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_LSE() )
 800587a:	4ba9      	ldr	r3, [pc, #676]	; (8005b20 <USART_GetClockSource+0x320>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 821b 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
 800588a:	4ba5      	ldr	r3, [pc, #660]	; (8005b20 <USART_GetClockSource+0x320>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8213 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 800589a:	2308      	movs	r3, #8
 800589c:	73fb      	strb	r3, [r7, #15]
 800589e:	e20f      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4aa0      	ldr	r2, [pc, #640]	; (8005b24 <USART_GetClockSource+0x324>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d145      	bne.n	8005934 <USART_GetClockSource+0x134>
  {
    if( IS_USART2_CLKSOURCE_PCLK1() )
 80058a8:	4b9d      	ldr	r3, [pc, #628]	; (8005b20 <USART_GetClockSource+0x320>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <USART_GetClockSource+0xca>
 80058b6:	4b9a      	ldr	r3, [pc, #616]	; (8005b20 <USART_GetClockSource+0x320>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <USART_GetClockSource+0xca>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]
 80058c8:	e1fa      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_SYSCLK() )
 80058ca:	4b95      	ldr	r3, [pc, #596]	; (8005b20 <USART_GetClockSource+0x320>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <USART_GetClockSource+0xec>
 80058d8:	4b91      	ldr	r3, [pc, #580]	; (8005b20 <USART_GetClockSource+0x320>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <USART_GetClockSource+0xec>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80058e6:	2304      	movs	r3, #4
 80058e8:	73fb      	strb	r3, [r7, #15]
 80058ea:	e1e9      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_HSI() )
 80058ec:	4b8c      	ldr	r3, [pc, #560]	; (8005b20 <USART_GetClockSource+0x320>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <USART_GetClockSource+0x10e>
 80058fa:	4b89      	ldr	r3, [pc, #548]	; (8005b20 <USART_GetClockSource+0x320>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <USART_GetClockSource+0x10e>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005908:	2302      	movs	r3, #2
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	e1d8      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_LSE() )
 800590e:	4b84      	ldr	r3, [pc, #528]	; (8005b20 <USART_GetClockSource+0x320>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 81d1 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
 800591e:	4b80      	ldr	r3, [pc, #512]	; (8005b20 <USART_GetClockSource+0x320>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 81c9 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 800592e:	2308      	movs	r3, #8
 8005930:	73fb      	strb	r3, [r7, #15]
 8005932:	e1c5      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART3)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a7c      	ldr	r2, [pc, #496]	; (8005b28 <USART_GetClockSource+0x328>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d145      	bne.n	80059c8 <USART_GetClockSource+0x1c8>
  {
    if( IS_USART3_CLKSOURCE_PCLK1() )
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <USART_GetClockSource+0x320>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <USART_GetClockSource+0x15e>
 800594a:	4b75      	ldr	r3, [pc, #468]	; (8005b20 <USART_GetClockSource+0x320>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <USART_GetClockSource+0x15e>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005958:	2300      	movs	r3, #0
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	e1b0      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_SYSCLK() )
 800595e:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <USART_GetClockSource+0x320>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <USART_GetClockSource+0x180>
 800596c:	4b6c      	ldr	r3, [pc, #432]	; (8005b20 <USART_GetClockSource+0x320>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <USART_GetClockSource+0x180>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 800597a:	2304      	movs	r3, #4
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	e19f      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_HSI() )
 8005980:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <USART_GetClockSource+0x320>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <USART_GetClockSource+0x1a2>
 800598e:	4b64      	ldr	r3, [pc, #400]	; (8005b20 <USART_GetClockSource+0x320>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <USART_GetClockSource+0x1a2>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 800599c:	2302      	movs	r3, #2
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e18e      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_LSE() )
 80059a2:	4b5f      	ldr	r3, [pc, #380]	; (8005b20 <USART_GetClockSource+0x320>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8187 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
 80059b2:	4b5b      	ldr	r3, [pc, #364]	; (8005b20 <USART_GetClockSource+0x320>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 817f 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80059c2:	2308      	movs	r3, #8
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	e17b      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART4)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a58      	ldr	r2, [pc, #352]	; (8005b2c <USART_GetClockSource+0x32c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d145      	bne.n	8005a5c <USART_GetClockSource+0x25c>
  {
    if( IS_UART4_CLKSOURCE_PCLK1() )
 80059d0:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <USART_GetClockSource+0x320>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <USART_GetClockSource+0x1f2>
 80059de:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <USART_GetClockSource+0x320>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <USART_GetClockSource+0x1f2>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	e166      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_SYSCLK() )
 80059f2:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <USART_GetClockSource+0x320>)
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <USART_GetClockSource+0x214>
 8005a00:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <USART_GetClockSource+0x214>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005a0e:	2304      	movs	r3, #4
 8005a10:	73fb      	strb	r3, [r7, #15]
 8005a12:	e155      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_HSI() )
 8005a14:	4b42      	ldr	r3, [pc, #264]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <USART_GetClockSource+0x236>
 8005a22:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <USART_GetClockSource+0x236>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005a30:	2302      	movs	r3, #2
 8005a32:	73fb      	strb	r3, [r7, #15]
 8005a34:	e144      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_LSE() )
 8005a36:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 813d 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
 8005a46:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8135 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005a56:	2308      	movs	r3, #8
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	e131      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART5)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a34      	ldr	r2, [pc, #208]	; (8005b30 <USART_GetClockSource+0x330>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d145      	bne.n	8005af0 <USART_GetClockSource+0x2f0>
  {
    if( IS_UART5_CLKSOURCE_PCLK1() )
 8005a64:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <USART_GetClockSource+0x286>
 8005a72:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <USART_GetClockSource+0x286>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e11c      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_SYSCLK() )
 8005a86:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <USART_GetClockSource+0x2a8>
 8005a94:	4b22      	ldr	r3, [pc, #136]	; (8005b20 <USART_GetClockSource+0x320>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <USART_GetClockSource+0x2a8>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	73fb      	strb	r3, [r7, #15]
 8005aa6:	e10b      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_HSI() )
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <USART_GetClockSource+0x320>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <USART_GetClockSource+0x2ca>
 8005ab6:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <USART_GetClockSource+0x320>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <USART_GetClockSource+0x2ca>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e0fa      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_LSE() )
 8005aca:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <USART_GetClockSource+0x320>)
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80f3 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <USART_GetClockSource+0x320>)
 8005adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80eb 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005aea:	2308      	movs	r3, #8
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	e0e7      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART6)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <USART_GetClockSource+0x334>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d154      	bne.n	8005ba2 <USART_GetClockSource+0x3a2>
  {
    if( IS_USART6_CLKSOURCE_PCLK2() )
 8005af8:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <USART_GetClockSource+0x320>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d118      	bne.n	8005b38 <USART_GetClockSource+0x338>
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <USART_GetClockSource+0x320>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d111      	bne.n	8005b38 <USART_GetClockSource+0x338>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	e0d2      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
 8005b1a:	bf00      	nop
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40004400 	.word	0x40004400
 8005b28:	40004800 	.word	0x40004800
 8005b2c:	40004c00 	.word	0x40004c00
 8005b30:	40005000 	.word	0x40005000
 8005b34:	40011400 	.word	0x40011400
    }
    else if( IS_USART6_CLKSOURCE_SYSCLK() )
 8005b38:	4b65      	ldr	r3, [pc, #404]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <USART_GetClockSource+0x35a>
 8005b46:	4b62      	ldr	r3, [pc, #392]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <USART_GetClockSource+0x35a>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005b54:	2304      	movs	r3, #4
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	e0b2      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_HSI() )
 8005b5a:	4b5d      	ldr	r3, [pc, #372]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <USART_GetClockSource+0x37c>
 8005b68:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <USART_GetClockSource+0x37c>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005b76:	2302      	movs	r3, #2
 8005b78:	73fb      	strb	r3, [r7, #15]
 8005b7a:	e0a1      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_LSE() )
 8005b7c:	4b54      	ldr	r3, [pc, #336]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 809a 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
 8005b8c:	4b50      	ldr	r3, [pc, #320]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8092 	beq.w	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	73fb      	strb	r3, [r7, #15]
 8005ba0:	e08e      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART7)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a4b      	ldr	r2, [pc, #300]	; (8005cd4 <USART_GetClockSource+0x4d4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d143      	bne.n	8005c32 <USART_GetClockSource+0x432>
  {
    if( IS_UART7_CLKSOURCE_PCLK1() )
 8005baa:	4b49      	ldr	r3, [pc, #292]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <USART_GetClockSource+0x3cc>
 8005bb8:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d102      	bne.n	8005bcc <USART_GetClockSource+0x3cc>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
 8005bca:	e079      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_SYSCLK() )
 8005bcc:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <USART_GetClockSource+0x3ee>
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <USART_GetClockSource+0x3ee>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005be8:	2304      	movs	r3, #4
 8005bea:	73fb      	strb	r3, [r7, #15]
 8005bec:	e068      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_HSI() )
 8005bee:	4b38      	ldr	r3, [pc, #224]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <USART_GetClockSource+0x410>
 8005bfc:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <USART_GetClockSource+0x410>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	73fb      	strb	r3, [r7, #15]
 8005c0e:	e057      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_LSE() )
 8005c10:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d050      	beq.n	8005cc0 <USART_GetClockSource+0x4c0>
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d049      	beq.n	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	e046      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART8)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <USART_GetClockSource+0x4d8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d142      	bne.n	8005cc0 <USART_GetClockSource+0x4c0>
  {
    if( IS_UART8_CLKSOURCE_PCLK1() )
 8005c3a:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <USART_GetClockSource+0x45c>
 8005c48:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <USART_GetClockSource+0x45c>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e031      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_SYSCLK() )
 8005c5c:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <USART_GetClockSource+0x47e>
 8005c6a:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <USART_GetClockSource+0x47e>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8005c78:	2304      	movs	r3, #4
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	e020      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_HSI() )
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d009      	beq.n	8005ca0 <USART_GetClockSource+0x4a0>
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <USART_GetClockSource+0x4a0>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	e00f      	b.n	8005cc0 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_LSE() )
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <USART_GetClockSource+0x4c0>
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <USART_GetClockSource+0x4d0>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return clocksource;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	40007800 	.word	0x40007800
 8005cd8:	40007c00 	.word	0x40007c00

08005cdc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cea:	2300      	movs	r3, #0
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 8005cf2:	2310      	movs	r3, #16
 8005cf4:	76fb      	strb	r3, [r7, #27]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d0e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <USART_Init+0x16c>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61fb      	str	r3, [r7, #28]
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005d68:	f107 0308 	add.w	r3, r7, #8
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe ffcf 	bl	8004d10 <RCC_GetClocksFreq>
  clocksource = USART_GetClockSource(USARTx);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fd44 	bl	8005800 <USART_GetClockSource>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	76fb      	strb	r3, [r7, #27]
  
  if( clocksource == USART_CLOCKSOURCE_PCLK1 )
 8005d7c:	7efb      	ldrb	r3, [r7, #27]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <USART_Init+0xac>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	e014      	b.n	8005db2 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_PCLK2 )
 8005d88:	7efb      	ldrb	r3, [r7, #27]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	e00e      	b.n	8005db2 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_SYSCLK )
 8005d94:	7efb      	ldrb	r3, [r7, #27]
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d102      	bne.n	8005da0 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.SYSCLK_Frequency;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	e008      	b.n	8005db2 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_HSI )
 8005da0:	7efb      	ldrb	r3, [r7, #27]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d102      	bne.n	8005dac <USART_Init+0xd0>
  {
    apbclock = HSI_VALUE;
 8005da6:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <USART_Init+0x170>)
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	e002      	b.n	8005db2 <USART_Init+0xd6>
  }
  else
  {
    apbclock = LSE_VALUE;
 8005dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d011      	beq.n	8005de2 <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	005a      	lsls	r2, r3, #1
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd8:	fb02 f201 	mul.w	r2, r2, r1
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e00e      	b.n	8005e00 <USART_Init+0x124>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6a3a      	ldr	r2, [r7, #32]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005df8:	fb02 f201 	mul.w	r2, r2, r1
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	085a      	lsrs	r2, r3, #1
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d802      	bhi.n	8005e12 <USART_Init+0x136>
  {
    divider++;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	3301      	adds	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <USART_Init+0x15a>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	61fb      	str	r3, [r7, #28]
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8005e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005e2e:	4013      	ands	r3, r2
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]
}
 8005e3e:	bf00      	nop
 8005e40:	3728      	adds	r7, #40	; 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	efffe9f3 	.word	0xefffe9f3
 8005e4c:	00f42400 	.word	0x00f42400

08005e50 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005e7a:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4313      	orrs	r3, r2
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	605a      	str	r2, [r3, #4]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop

08005e9c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	60da      	str	r2, [r3, #12]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d006      	beq.n	8005ee8 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8005ee6:	e005      	b.n	8005ef4 <USART_Cmd+0x2c>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f023 0201 	bic.w	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)USART_TDR_TDR);
 8005f0c:	887b      	ldrh	r3, [r7, #2]
 8005f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop

08005f24 <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)USART_RDR_RDR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	b29b      	uxth	r3, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
 8005f62:	e001      	b.n	8005f68 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop

08005f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0208 	add.w	r2, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f103 0208 	add.w	r2, r3, #8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop

08005fd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d103      	bne.n	800603c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e00c      	b.n	8006056 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3308      	adds	r3, #8
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e002      	b.n	800604a <vListInsert+0x2e>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	d9f6      	bls.n	8006044 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop

08006090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6892      	ldr	r2, [r2, #8]
 80060a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6852      	ldr	r2, [r2, #4]
 80060b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d103      	bne.n	80060c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	1e5a      	subs	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3b04      	subs	r3, #4
 80060f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b04      	subs	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f023 0201 	bic.w	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b04      	subs	r3, #4
 8006112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006114:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <pxPortInitialiseStack+0x64>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3b14      	subs	r3, #20
 800611e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f06f 0202 	mvn.w	r2, #2
 8006132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3b20      	subs	r3, #32
 8006138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	0800614d 	.word	0x0800614d

0800614c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <prvTaskExitError+0x34>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d004      	beq.n	8006166 <prvTaskExitError+0x1a>
 800615c:	4909      	ldr	r1, [pc, #36]	; (8006184 <prvTaskExitError+0x38>)
 800615e:	f240 1005 	movw	r0, #261	; 0x105
 8006162:	f7fb fb99 	bl	8001898 <vAssertCalled>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006166:	f04f 0340 	mov.w	r3, #64	; 0x40
 800616a:	b672      	cpsid	i
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	b662      	cpsie	i
 800617a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800617c:	e7fe      	b.n	800617c <prvTaskExitError+0x30>
 800617e:	bf00      	nop
 8006180:	20010010 	.word	0x20010010
 8006184:	08011630 	.word	0x08011630
	...

08006190 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <pxCurrentTCBConst2>)
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	6808      	ldr	r0, [r1, #0]
 8006196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	f380 8809 	msr	PSP, r0
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8811 	msr	BASEPRI, r0
 80061aa:	4770      	bx	lr
 80061ac:	f3af 8000 	nop.w

080061b0 <pxCurrentTCBConst2>:
 80061b0:	20014294 	.word	0x20014294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop

080061b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061b8:	4806      	ldr	r0, [pc, #24]	; (80061d4 <prvPortStartFirstTask+0x1c>)
 80061ba:	6800      	ldr	r0, [r0, #0]
 80061bc:	6800      	ldr	r0, [r0, #0]
 80061be:	f380 8808 	msr	MSP, r0
 80061c2:	b662      	cpsie	i
 80061c4:	b661      	cpsie	f
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	df00      	svc	0
 80061d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061d2:	bf00      	nop
 80061d4:	e000ed08 	.word	0xe000ed08

080061d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061de:	4b2c      	ldr	r3, [pc, #176]	; (8006290 <xPortStartScheduler+0xb8>)
 80061e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	22ff      	movs	r2, #255	; 0xff
 80061ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	b2da      	uxtb	r2, r3
 8006202:	4b24      	ldr	r3, [pc, #144]	; (8006294 <xPortStartScheduler+0xbc>)
 8006204:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <xPortStartScheduler+0xc0>)
 8006208:	2207      	movs	r2, #7
 800620a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620c:	e009      	b.n	8006222 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800620e:	4b22      	ldr	r3, [pc, #136]	; (8006298 <xPortStartScheduler+0xc0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3b01      	subs	r3, #1
 8006214:	4a20      	ldr	r2, [pc, #128]	; (8006298 <xPortStartScheduler+0xc0>)
 8006216:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	b25b      	sxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	dbf0      	blt.n	800620e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <xPortStartScheduler+0xc0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	4a19      	ldr	r2, [pc, #100]	; (8006298 <xPortStartScheduler+0xc0>)
 8006234:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006236:	4b18      	ldr	r3, [pc, #96]	; (8006298 <xPortStartScheduler+0xc0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <xPortStartScheduler+0xc0>)
 8006240:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800624a:	4a14      	ldr	r2, [pc, #80]	; (800629c <xPortStartScheduler+0xc4>)
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <xPortStartScheduler+0xc4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006254:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006256:	4a11      	ldr	r2, [pc, #68]	; (800629c <xPortStartScheduler+0xc4>)
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <xPortStartScheduler+0xc4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006260:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006262:	f000 f8cb 	bl	80063fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006266:	4b0e      	ldr	r3, [pc, #56]	; (80062a0 <xPortStartScheduler+0xc8>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800626c:	f000 f8e2 	bl	8006434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006270:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <xPortStartScheduler+0xcc>)
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <xPortStartScheduler+0xcc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800627a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800627c:	f7ff ff9c 	bl	80061b8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006280:	f7ff ff64 	bl	800614c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	e000e400 	.word	0xe000e400
 8006294:	20010676 	.word	0x20010676
 8006298:	20010678 	.word	0x20010678
 800629c:	e000ed20 	.word	0xe000ed20
 80062a0:	20010010 	.word	0x20010010
 80062a4:	e000ef34 	.word	0xe000ef34

080062a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80062b2:	b672      	cpsid	i
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	b662      	cpsie	i
 80062c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <vPortEnterCritical+0x4c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <vPortEnterCritical+0x4c>)
 80062cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <vPortEnterCritical+0x4c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d109      	bne.n	80062ea <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <vPortEnterCritical+0x50>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <vPortEnterCritical+0x42>
 80062e0:	4906      	ldr	r1, [pc, #24]	; (80062fc <vPortEnterCritical+0x54>)
 80062e2:	f240 1097 	movw	r0, #407	; 0x197
 80062e6:	f7fb fad7 	bl	8001898 <vAssertCalled>
	}
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20010010 	.word	0x20010010
 80062f8:	e000ed04 	.word	0xe000ed04
 80062fc:	08011630 	.word	0x08011630

08006300 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <vPortExitCritical+0x3c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <vPortExitCritical+0x18>
 800630e:	490c      	ldr	r1, [pc, #48]	; (8006340 <vPortExitCritical+0x40>)
 8006310:	f44f 70cf 	mov.w	r0, #414	; 0x19e
 8006314:	f7fb fac0 	bl	8001898 <vAssertCalled>
	uxCriticalNesting--;
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <vPortExitCritical+0x3c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3b01      	subs	r3, #1
 800631e:	4a07      	ldr	r2, [pc, #28]	; (800633c <vPortExitCritical+0x3c>)
 8006320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <vPortExitCritical+0x3c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <vPortExitCritical+0x34>
 800632a:	2300      	movs	r3, #0
 800632c:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20010010 	.word	0x20010010
 8006340:	08011630 	.word	0x08011630
	...

08006350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006350:	f3ef 8009 	mrs	r0, PSP
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <pxCurrentTCBConst>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	f01e 0f10 	tst.w	lr, #16
 8006360:	bf08      	it	eq
 8006362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	6010      	str	r0, [r2, #0]
 800636c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006370:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006374:	b672      	cpsid	i
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	b662      	cpsie	i
 8006384:	f001 fcaa 	bl	8007cdc <vTaskSwitchContext>
 8006388:	f04f 0000 	mov.w	r0, #0
 800638c:	f380 8811 	msr	BASEPRI, r0
 8006390:	bc08      	pop	{r3}
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	f01e 0f10 	tst.w	lr, #16
 800639e:	bf08      	it	eq
 80063a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063a4:	f380 8809 	msr	PSP, r0
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <pxCurrentTCBConst>:
 80063b0:	20014294 	.word	0x20014294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop

080063b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80063c2:	b672      	cpsid	i
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	b662      	cpsie	i
 80063d2:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063d4:	f001 fbc8 	bl	8007b68 <xTaskIncrementTick>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <SysTick_Handler+0x40>)
 80063e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006400:	4a08      	ldr	r2, [pc, #32]	; (8006424 <vPortSetupTimerInterrupt+0x28>)
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <vPortSetupTimerInterrupt+0x2c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4909      	ldr	r1, [pc, #36]	; (800642c <vPortSetupTimerInterrupt+0x30>)
 8006408:	fba1 1303 	umull	r1, r3, r1, r3
 800640c:	099b      	lsrs	r3, r3, #6
 800640e:	3b01      	subs	r3, #1
 8006410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vPortSetupTimerInterrupt+0x34>)
 8006414:	2207      	movs	r2, #7
 8006416:	601a      	str	r2, [r3, #0]
}
 8006418:	bf00      	nop
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	e000e014 	.word	0xe000e014
 8006428:	2001002c 	.word	0x2001002c
 800642c:	10624dd3 	.word	0x10624dd3
 8006430:	e000e010 	.word	0xe000e010

08006434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006444 <vPortEnableVFP+0x10>
 8006438:	6801      	ldr	r1, [r0, #0]
 800643a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800643e:	6001      	str	r1, [r0, #0]
 8006440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006442:	bf00      	nop
 8006444:	e000ed88 	.word	0xe000ed88

08006448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800644e:	f3ef 8305 	mrs	r3, IPSR
 8006452:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b0f      	cmp	r3, #15
 8006458:	d90e      	bls.n	8006478 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800645a:	4a10      	ldr	r2, [pc, #64]	; (800649c <vPortValidateInterruptPriority+0x54>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006464:	4b0e      	ldr	r3, [pc, #56]	; (80064a0 <vPortValidateInterruptPriority+0x58>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	429a      	cmp	r2, r3
 800646c:	d204      	bcs.n	8006478 <vPortValidateInterruptPriority+0x30>
 800646e:	490d      	ldr	r1, [pc, #52]	; (80064a4 <vPortValidateInterruptPriority+0x5c>)
 8006470:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8006474:	f7fb fa10 	bl	8001898 <vAssertCalled>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <vPortValidateInterruptPriority+0x60>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <vPortValidateInterruptPriority+0x64>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d904      	bls.n	8006492 <vPortValidateInterruptPriority+0x4a>
 8006488:	4906      	ldr	r1, [pc, #24]	; (80064a4 <vPortValidateInterruptPriority+0x5c>)
 800648a:	f44f 703b 	mov.w	r0, #748	; 0x2ec
 800648e:	f7fb fa03 	bl	8001898 <vAssertCalled>
	}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	e000e3f0 	.word	0xe000e3f0
 80064a0:	20010676 	.word	0x20010676
 80064a4:	08011630 	.word	0x08011630
 80064a8:	e000ed0c 	.word	0xe000ed0c
 80064ac:	20010678 	.word	0x20010678

080064b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80064bc:	f001 fa10 	bl	80078e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064c0:	4b50      	ldr	r3, [pc, #320]	; (8006604 <pvPortMalloc+0x154>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064c8:	f000 f8f8 	bl	80066bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064cc:	4b4e      	ldr	r3, [pc, #312]	; (8006608 <pvPortMalloc+0x158>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d17f      	bne.n	80065d8 <pvPortMalloc+0x128>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80064de:	2208      	movs	r2, #8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00d      	beq.n	800650c <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f023 0307 	bic.w	r3, r3, #7
 80064f6:	3308      	adds	r3, #8
 80064f8:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <pvPortMalloc+0x5c>
 8006504:	4941      	ldr	r1, [pc, #260]	; (800660c <pvPortMalloc+0x15c>)
 8006506:	20bb      	movs	r0, #187	; 0xbb
 8006508:	f7fb f9c6 	bl	8001898 <vAssertCalled>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d062      	beq.n	80065d8 <pvPortMalloc+0x128>
 8006512:	4b3f      	ldr	r3, [pc, #252]	; (8006610 <pvPortMalloc+0x160>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d85d      	bhi.n	80065d8 <pvPortMalloc+0x128>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800651c:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <pvPortMalloc+0x164>)
 800651e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006520:	4b3c      	ldr	r3, [pc, #240]	; (8006614 <pvPortMalloc+0x164>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006526:	e004      	b.n	8006532 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d203      	bcs.n	8006544 <pvPortMalloc+0x94>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f1      	bne.n	8006528 <pvPortMalloc+0x78>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006544:	4b2f      	ldr	r3, [pc, #188]	; (8006604 <pvPortMalloc+0x154>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	429a      	cmp	r2, r3
 800654c:	d044      	beq.n	80065d8 <pvPortMalloc+0x128>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2208      	movs	r2, #8
 8006554:	4413      	add	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	2308      	movs	r3, #8
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	429a      	cmp	r2, r3
 800656e:	d918      	bls.n	80065a2 <pvPortMalloc+0xf2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <pvPortMalloc+0xda>
 8006582:	4922      	ldr	r1, [pc, #136]	; (800660c <pvPortMalloc+0x15c>)
 8006584:	20e8      	movs	r0, #232	; 0xe8
 8006586:	f7fb f987 	bl	8001898 <vAssertCalled>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800659c:	68b8      	ldr	r0, [r7, #8]
 800659e:	f000 f8ef 	bl	8006780 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <pvPortMalloc+0x160>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <pvPortMalloc+0x160>)
 80065ae:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065b0:	4b17      	ldr	r3, [pc, #92]	; (8006610 <pvPortMalloc+0x160>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b18      	ldr	r3, [pc, #96]	; (8006618 <pvPortMalloc+0x168>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d203      	bcs.n	80065c4 <pvPortMalloc+0x114>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065bc:	4b14      	ldr	r3, [pc, #80]	; (8006610 <pvPortMalloc+0x160>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a15      	ldr	r2, [pc, #84]	; (8006618 <pvPortMalloc+0x168>)
 80065c2:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <pvPortMalloc+0x158>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065d8:	f001 f990 	bl	80078fc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <pvPortMalloc+0x136>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80065e2:	f7fb f93f 	bl	8001864 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <pvPortMalloc+0x14a>
 80065f0:	4906      	ldr	r1, [pc, #24]	; (800660c <pvPortMalloc+0x15c>)
 80065f2:	f44f 7094 	mov.w	r0, #296	; 0x128
 80065f6:	f7fb f94f 	bl	8001898 <vAssertCalled>
	return pvReturn;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20014284 	.word	0x20014284
 8006608:	20014290 	.word	0x20014290
 800660c:	08011664 	.word	0x08011664
 8006610:	20014288 	.word	0x20014288
 8006614:	2001427c 	.word	0x2001427c
 8006618:	2001428c 	.word	0x2001428c

0800661c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d03c      	beq.n	80066a8 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800662e:	2308      	movs	r3, #8
 8006630:	425b      	negs	r3, r3
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <vPortFree+0x94>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4013      	ands	r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <vPortFree+0x38>
 800664a:	491a      	ldr	r1, [pc, #104]	; (80066b4 <vPortFree+0x98>)
 800664c:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8006650:	f7fb f922 	bl	8001898 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <vPortFree+0x4a>
 800665c:	4915      	ldr	r1, [pc, #84]	; (80066b4 <vPortFree+0x98>)
 800665e:	f240 103d 	movw	r0, #317	; 0x13d
 8006662:	f7fb f919 	bl	8001898 <vAssertCalled>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <vPortFree+0x94>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d019      	beq.n	80066a8 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d115      	bne.n	80066a8 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <vPortFree+0x94>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	43db      	mvns	r3, r3
 8006686:	401a      	ands	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800668c:	f001 f928 	bl	80078e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <vPortFree+0x9c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4413      	add	r3, r2
 800669a:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <vPortFree+0x9c>)
 800669c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800669e:	68b8      	ldr	r0, [r7, #8]
 80066a0:	f000 f86e 	bl	8006780 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066a4:	f001 f92a 	bl	80078fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20014290 	.word	0x20014290
 80066b4:	08011664 	.word	0x08011664
 80066b8:	20014288 	.word	0x20014288

080066bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066c8:	4b27      	ldr	r3, [pc, #156]	; (8006768 <prvHeapInit+0xac>)
 80066ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00c      	beq.n	80066f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3307      	adds	r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <prvHeapInit+0xac>)
 80066ec:	4413      	add	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <prvHeapInit+0xb0>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066fa:	4b1c      	ldr	r3, [pc, #112]	; (800676c <prvHeapInit+0xb0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006708:	2208      	movs	r2, #8
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0307 	bic.w	r3, r3, #7
 8006716:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a15      	ldr	r2, [pc, #84]	; (8006770 <prvHeapInit+0xb4>)
 800671c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <prvHeapInit+0xb4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2200      	movs	r2, #0
 8006724:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <prvHeapInit+0xb4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <prvHeapInit+0xb4>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a0a      	ldr	r2, [pc, #40]	; (8006774 <prvHeapInit+0xb8>)
 800674a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a09      	ldr	r2, [pc, #36]	; (8006778 <prvHeapInit+0xbc>)
 8006752:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <prvHeapInit+0xc0>)
 8006756:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800675a:	601a      	str	r2, [r3, #0]
}
 800675c:	bf00      	nop
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	2001067c 	.word	0x2001067c
 800676c:	2001427c 	.word	0x2001427c
 8006770:	20014284 	.word	0x20014284
 8006774:	2001428c 	.word	0x2001428c
 8006778:	20014288 	.word	0x20014288
 800677c:	20014290 	.word	0x20014290

08006780 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006788:	4b28      	ldr	r3, [pc, #160]	; (800682c <prvInsertBlockIntoFreeList+0xac>)
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e002      	b.n	8006794 <prvInsertBlockIntoFreeList+0x14>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d3f7      	bcc.n	800678e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	441a      	add	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d108      	bne.n	80067c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	441a      	add	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	441a      	add	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d118      	bne.n	8006808 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b15      	ldr	r3, [pc, #84]	; (8006830 <prvInsertBlockIntoFreeList+0xb0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d00d      	beq.n	80067fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e008      	b.n	8006810 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <prvInsertBlockIntoFreeList+0xb0>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e003      	b.n	8006810 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d002      	beq.n	800681e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	2001427c 	.word	0x2001427c
 8006830:	20014284 	.word	0x20014284

08006834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <xQueueGenericReset+0x1e>
 8006848:	492a      	ldr	r1, [pc, #168]	; (80068f4 <xQueueGenericReset+0xc0>)
 800684a:	f240 101b 	movw	r0, #283	; 0x11b
 800684e:	f7fb f823 	bl	8001898 <vAssertCalled>

	taskENTER_CRITICAL();
 8006852:	f7ff fd29 	bl	80062a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006862:	fb01 f303 	mul.w	r3, r1, r3
 8006866:	441a      	add	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	3b01      	subs	r3, #1
 8006884:	68f9      	ldr	r1, [r7, #12]
 8006886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	22ff      	movs	r2, #255	; 0xff
 8006896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	22ff      	movs	r2, #255	; 0xff
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d114      	bne.n	80068d2 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01a      	beq.n	80068e6 <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3310      	adds	r3, #16
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 fad5 	bl	8007e64 <xTaskRemoveFromEventList>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <xQueueGenericReset+0xc4>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	e009      	b.n	80068e6 <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3310      	adds	r3, #16
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fb4e 	bl	8005f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3324      	adds	r3, #36	; 0x24
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fb49 	bl	8005f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068e6:	f7ff fd0b 	bl	8006300 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068ea:	2301      	movs	r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	08011690 	.word	0x08011690
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <xQueueGenericCreate+0x1e>
 8006910:	4914      	ldr	r1, [pc, #80]	; (8006964 <xQueueGenericCreate+0x68>)
 8006912:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8006916:	f7fa ffbf 	bl	8001898 <vAssertCalled>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e004      	b.n	8006930 <xQueueGenericCreate+0x34>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	3354      	adds	r3, #84	; 0x54
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fdbb 	bl	80064b0 <pvPortMalloc>
 800693a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <xQueueGenericCreate+0x5e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	3354      	adds	r3, #84	; 0x54
 8006946:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006948:	79fa      	ldrb	r2, [r7, #7]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	4613      	mov	r3, r2
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f807 	bl	8006968 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800695a:	69bb      	ldr	r3, [r7, #24]
	}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	08011690 	.word	0x08011690

08006968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e002      	b.n	800698a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006996:	2101      	movs	r1, #1
 8006998:	69b8      	ldr	r0, [r7, #24]
 800699a:	f7ff ff4b 	bl	8006834 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2200      	movs	r2, #0
 80069aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069d4:	2300      	movs	r3, #0
 80069d6:	2200      	movs	r2, #0
 80069d8:	2100      	movs	r1, #0
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f81c 	bl	8006a18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069f2:	2301      	movs	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	2300      	movs	r3, #0
 80069f8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6939      	ldr	r1, [r7, #16]
 8006a00:	6978      	ldr	r0, [r7, #20]
 8006a02:	f7ff ff7b 	bl	80068fc <xQueueGenericCreate>
 8006a06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff ffd3 	bl	80069b4 <prvInitialiseMutex>

		return pxNewQueue;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	; 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a26:	2300      	movs	r3, #0
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <xQueueGenericSend+0x26>
 8006a34:	4974      	ldr	r1, [pc, #464]	; (8006c08 <xQueueGenericSend+0x1f0>)
 8006a36:	f240 20d9 	movw	r0, #729	; 0x2d9
 8006a3a:	f7fa ff2d 	bl	8001898 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <xQueueGenericSend+0x34>
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <xQueueGenericSend+0x38>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <xQueueGenericSend+0x3a>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <xQueueGenericSend+0x48>
 8006a56:	496c      	ldr	r1, [pc, #432]	; (8006c08 <xQueueGenericSend+0x1f0>)
 8006a58:	f240 20da 	movw	r0, #730	; 0x2da
 8006a5c:	f7fa ff1c 	bl	8001898 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d103      	bne.n	8006a6e <xQueueGenericSend+0x56>
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <xQueueGenericSend+0x5a>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueGenericSend+0x5c>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <xQueueGenericSend+0x6a>
 8006a78:	4963      	ldr	r1, [pc, #396]	; (8006c08 <xQueueGenericSend+0x1f0>)
 8006a7a:	f240 20db 	movw	r0, #731	; 0x2db
 8006a7e:	f7fa ff0b 	bl	8001898 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a82:	f001 fc63 	bl	800834c <xTaskGetSchedulerState>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <xQueueGenericSend+0x7a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <xQueueGenericSend+0x7e>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <xQueueGenericSend+0x80>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d104      	bne.n	8006aa6 <xQueueGenericSend+0x8e>
 8006a9c:	495a      	ldr	r1, [pc, #360]	; (8006c08 <xQueueGenericSend+0x1f0>)
 8006a9e:	f240 20de 	movw	r0, #734	; 0x2de
 8006aa2:	f7fa fef9 	bl	8001898 <vAssertCalled>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aa6:	f7ff fbff 	bl	80062a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <xQueueGenericSend+0xa4>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d13d      	bne.n	8006b38 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	6a38      	ldr	r0, [r7, #32]
 8006ac2:	f000 fa45 	bl	8006f50 <prvCopyDataToQueue>
 8006ac6:	61f8      	str	r0, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00f      	beq.n	8006af0 <xQueueGenericSend+0xd8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6a38      	ldr	r0, [r7, #32]
 8006ad4:	f000 fbb6 	bl	8007244 <prvNotifyQueueSetContainer>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d028      	beq.n	8006b30 <xQueueGenericSend+0x118>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ade:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <xQueueGenericSend+0x1f4>)
 8006ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	e01f      	b.n	8006b30 <xQueueGenericSend+0x118>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d010      	beq.n	8006b1a <xQueueGenericSend+0x102>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 f9b1 	bl	8007e64 <xTaskRemoveFromEventList>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <xQueueGenericSend+0x118>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <xQueueGenericSend+0x1f4>)
 8006b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	e00a      	b.n	8006b30 <xQueueGenericSend+0x118>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <xQueueGenericSend+0x118>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b20:	4b3a      	ldr	r3, [pc, #232]	; (8006c0c <xQueueGenericSend+0x1f4>)
 8006b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b30:	f7ff fbe6 	bl	8006300 <vPortExitCritical>
				return pdPASS;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e063      	b.n	8006c00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b3e:	f7ff fbdf 	bl	8006300 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e05c      	b.n	8006c00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 f9e5 	bl	8007f20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b5a:	f7ff fbd1 	bl	8006300 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b5e:	f000 febf 	bl	80078e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b62:	f7ff fba1 	bl	80062a8 <vPortEnterCritical>
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d103      	bne.n	8006b7c <xQueueGenericSend+0x164>
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSend+0x17a>
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b92:	f7ff fbb5 	bl	8006300 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b96:	1d3a      	adds	r2, r7, #4
 8006b98:	f107 0314 	add.w	r3, r7, #20
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 f9dc 	bl	8007f5c <xTaskCheckForTimeOut>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d124      	bne.n	8006bf4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006baa:	6a38      	ldr	r0, [r7, #32]
 8006bac:	f000 fad6 	bl	800715c <prvIsQueueFull>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	3310      	adds	r3, #16
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 f908 	bl	8007dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bc4:	6a38      	ldr	r0, [r7, #32]
 8006bc6:	f000 fa53 	bl	8007070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bca:	f000 fe97 	bl	80078fc <xTaskResumeAll>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f47f af68 	bne.w	8006aa6 <xQueueGenericSend+0x8e>
				{
					portYIELD_WITHIN_API();
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <xQueueGenericSend+0x1f4>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	e75e      	b.n	8006aa6 <xQueueGenericSend+0x8e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006be8:	6a38      	ldr	r0, [r7, #32]
 8006bea:	f000 fa41 	bl	8007070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bee:	f000 fe85 	bl	80078fc <xTaskResumeAll>
 8006bf2:	e758      	b.n	8006aa6 <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bf4:	6a38      	ldr	r0, [r7, #32]
 8006bf6:	f000 fa3b 	bl	8007070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bfa:	f000 fe7f 	bl	80078fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bfe:	2300      	movs	r3, #0
		}
	}
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3728      	adds	r7, #40	; 0x28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	08011690 	.word	0x08011690
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	; 0x30
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <xQueueGenericSendFromISR+0x22>
 8006c28:	4945      	ldr	r1, [pc, #276]	; (8006d40 <xQueueGenericSendFromISR+0x130>)
 8006c2a:	f240 309f 	movw	r0, #927	; 0x39f
 8006c2e:	f7fa fe33 	bl	8001898 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <xQueueGenericSendFromISR+0x30>
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <xQueueGenericSendFromISR+0x34>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <xQueueGenericSendFromISR+0x36>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <xQueueGenericSendFromISR+0x44>
 8006c4a:	493d      	ldr	r1, [pc, #244]	; (8006d40 <xQueueGenericSendFromISR+0x130>)
 8006c4c:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 8006c50:	f7fa fe22 	bl	8001898 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d103      	bne.n	8006c62 <xQueueGenericSendFromISR+0x52>
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <xQueueGenericSendFromISR+0x56>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueGenericSendFromISR+0x58>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <xQueueGenericSendFromISR+0x66>
 8006c6c:	4934      	ldr	r1, [pc, #208]	; (8006d40 <xQueueGenericSendFromISR+0x130>)
 8006c6e:	f240 30a1 	movw	r0, #929	; 0x3a1
 8006c72:	f7fa fe11 	bl	8001898 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c76:	f7ff fbe7 	bl	8006448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	61ba      	str	r2, [r7, #24]
 8006c94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c98:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d302      	bcc.n	8006cac <xQueueGenericSendFromISR+0x9c>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d13c      	bne.n	8006d26 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb2:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cba:	f000 f949 	bl	8006f50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d124      	bne.n	8006d12 <xQueueGenericSendFromISR+0x102>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00d      	beq.n	8006cec <xQueueGenericSendFromISR+0xdc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd4:	f000 fab6 	bl	8007244 <prvNotifyQueueSetContainer>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d020      	beq.n	8006d20 <xQueueGenericSendFromISR+0x110>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01d      	beq.n	8006d20 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e019      	b.n	8006d20 <xQueueGenericSendFromISR+0x110>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d015      	beq.n	8006d20 <xQueueGenericSendFromISR+0x110>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	3324      	adds	r3, #36	; 0x24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f8b3 	bl	8007e64 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <xQueueGenericSendFromISR+0x110>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <xQueueGenericSendFromISR+0x110>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	e006      	b.n	8006d20 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d12:	7ffb      	ldrb	r3, [r7, #31]
 8006d14:	3301      	adds	r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	b25a      	sxtb	r2, r3
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d20:	2301      	movs	r3, #1
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8006d24:	e001      	b.n	8006d2a <xQueueGenericSendFromISR+0x11a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3730      	adds	r7, #48	; 0x30
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	08011690 	.word	0x08011690

08006d44 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <xQueueGenericReceive+0x26>
 8006d60:	4979      	ldr	r1, [pc, #484]	; (8006f48 <xQueueGenericReceive+0x204>)
 8006d62:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8006d66:	f7fa fd97 	bl	8001898 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <xQueueGenericReceive+0x34>
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueGenericReceive+0x38>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueGenericReceive+0x3a>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <xQueueGenericReceive+0x48>
 8006d82:	4971      	ldr	r1, [pc, #452]	; (8006f48 <xQueueGenericReceive+0x204>)
 8006d84:	f240 40dd 	movw	r0, #1245	; 0x4dd
 8006d88:	f7fa fd86 	bl	8001898 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d8c:	f001 fade 	bl	800834c <xTaskGetSchedulerState>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <xQueueGenericReceive+0x58>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <xQueueGenericReceive+0x5c>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <xQueueGenericReceive+0x5e>
 8006da0:	2300      	movs	r3, #0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <xQueueGenericReceive+0x6c>
 8006da6:	4968      	ldr	r1, [pc, #416]	; (8006f48 <xQueueGenericReceive+0x204>)
 8006da8:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 8006dac:	f7fa fd74 	bl	8001898 <vAssertCalled>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db0:	f7ff fa7a 	bl	80062a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d046      	beq.n	8006e4e <xQueueGenericReceive+0x10a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	6a38      	ldr	r0, [r7, #32]
 8006dca:	f000 f92b 	bl	8007024 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d121      	bne.n	8006e18 <xQueueGenericReceive+0xd4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	1e5a      	subs	r2, r3, #1
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <xQueueGenericReceive+0xaa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006de4:	f001 fc7e 	bl	80086e4 <pvTaskIncrementMutexHeldCount>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d027      	beq.n	8006e46 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	3310      	adds	r3, #16
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f832 	bl	8007e64 <xTaskRemoveFromEventList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01f      	beq.n	8006e46 <xQueueGenericReceive+0x102>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8006e06:	4b51      	ldr	r3, [pc, #324]	; (8006f4c <xQueueGenericReceive+0x208>)
 8006e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	e016      	b.n	8006e46 <xQueueGenericReceive+0x102>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00f      	beq.n	8006e46 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	3324      	adds	r3, #36	; 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f81a 	bl	8007e64 <xTaskRemoveFromEventList>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d007      	beq.n	8006e46 <xQueueGenericReceive+0x102>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e36:	4b45      	ldr	r3, [pc, #276]	; (8006f4c <xQueueGenericReceive+0x208>)
 8006e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8006e46:	f7ff fa5b 	bl	8006300 <vPortExitCritical>
				return pdPASS;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e077      	b.n	8006f3e <xQueueGenericReceive+0x1fa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e54:	f7ff fa54 	bl	8006300 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e070      	b.n	8006f3e <xQueueGenericReceive+0x1fa>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <xQueueGenericReceive+0x12c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8006e62:	f107 0310 	add.w	r3, r7, #16
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f85a 	bl	8007f20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e70:	f7ff fa46 	bl	8006300 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e74:	f000 fd34 	bl	80078e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e78:	f7ff fa16 	bl	80062a8 <vPortEnterCritical>
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e82:	b25b      	sxtb	r3, r3
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d103      	bne.n	8006e92 <xQueueGenericReceive+0x14e>
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e98:	b25b      	sxtb	r3, r3
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d103      	bne.n	8006ea8 <xQueueGenericReceive+0x164>
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea8:	f7ff fa2a 	bl	8006300 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eac:	1d3a      	adds	r2, r7, #4
 8006eae:	f107 0310 	add.w	r3, r7, #16
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 f851 	bl	8007f5c <xTaskCheckForTimeOut>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d131      	bne.n	8006f24 <xQueueGenericReceive+0x1e0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec0:	6a38      	ldr	r0, [r7, #32]
 8006ec2:	f000 f935 	bl	8007130 <prvIsQueueEmpty>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d025      	beq.n	8006f18 <xQueueGenericReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d108      	bne.n	8006ee6 <xQueueGenericReceive+0x1a2>
					{
						taskENTER_CRITICAL();
 8006ed4:	f7ff f9e8 	bl	80062a8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 fa53 	bl	8008388 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8006ee2:	f7ff fa0d 	bl	8006300 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 ff70 	bl	8007dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ef4:	6a38      	ldr	r0, [r7, #32]
 8006ef6:	f000 f8bb 	bl	8007070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006efa:	f000 fcff 	bl	80078fc <xTaskResumeAll>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f47f af55 	bne.w	8006db0 <xQueueGenericReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <xQueueGenericReceive+0x208>)
 8006f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	e74b      	b.n	8006db0 <xQueueGenericReceive+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f18:	6a38      	ldr	r0, [r7, #32]
 8006f1a:	f000 f8a9 	bl	8007070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f1e:	f000 fced 	bl	80078fc <xTaskResumeAll>
 8006f22:	e745      	b.n	8006db0 <xQueueGenericReceive+0x6c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8006f24:	6a38      	ldr	r0, [r7, #32]
 8006f26:	f000 f8a3 	bl	8007070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f2a:	f000 fce7 	bl	80078fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f2e:	6a38      	ldr	r0, [r7, #32]
 8006f30:	f000 f8fe 	bl	8007130 <prvIsQueueEmpty>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f43f af3a 	beq.w	8006db0 <xQueueGenericReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3728      	adds	r7, #40	; 0x28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	08011690 	.word	0x08011690
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10d      	bne.n	8006f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d14d      	bne.n	8007012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fa7a 	bl	8008474 <xTaskPriorityDisinherit>
 8006f80:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	e043      	b.n	8007012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d119      	bne.n	8006fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6898      	ldr	r0, [r3, #8]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	f003 fae2 	bl	800a564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	441a      	add	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d32b      	bcc.n	8007012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	609a      	str	r2, [r3, #8]
 8006fc2:	e026      	b.n	8007012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68d8      	ldr	r0, [r3, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	461a      	mov	r2, r3
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	f003 fac8 	bl	800a564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	425b      	negs	r3, r3
 8006fde:	441a      	add	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d207      	bcs.n	8007000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	441a      	add	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d105      	bne.n	8007012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3b01      	subs	r3, #1
 8007010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800701a:	697b      	ldr	r3, [r7, #20]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	441a      	add	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d303      	bcc.n	8007058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68d9      	ldr	r1, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	461a      	mov	r2, r3
 8007062:	6838      	ldr	r0, [r7, #0]
 8007064:	f003 fa7e 	bl	800a564 <memcpy>
	}
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007078:	f7ff f916 	bl	80062a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007084:	e01f      	b.n	80070c6 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8d7 	bl	8007244 <prvNotifyQueueSetContainer>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d010      	beq.n	80070be <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800709c:	f000 ffb4 	bl	8008008 <vTaskMissedYield>
 80070a0:	e00d      	b.n	80070be <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3324      	adds	r3, #36	; 0x24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fed8 	bl	8007e64 <xTaskRemoveFromEventList>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80070ba:	f000 ffa5 	bl	8008008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dcdb      	bgt.n	8007086 <prvUnlockQueue+0x16>
 80070ce:	e000      	b.n	80070d2 <prvUnlockQueue+0x62>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 80070d0:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070da:	f7ff f911 	bl	8006300 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070de:	f7ff f8e3 	bl	80062a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070ea:	e011      	b.n	8007110 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d012      	beq.n	800711a <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3310      	adds	r3, #16
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 feb3 	bl	8007e64 <xTaskRemoveFromEventList>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8007104:	f000 ff80 	bl	8008008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	3b01      	subs	r3, #1
 800710c:	b2db      	uxtb	r3, r3
 800710e:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	dce9      	bgt.n	80070ec <prvUnlockQueue+0x7c>
 8007118:	e000      	b.n	800711c <prvUnlockQueue+0xac>

				--cRxLock;
			}
			else
			{
				break;
 800711a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	22ff      	movs	r2, #255	; 0xff
 8007120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007124:	f7ff f8ec 	bl	8006300 <vPortExitCritical>
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007138:	f7ff f8b6 	bl	80062a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e001      	b.n	800714e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800714e:	f7ff f8d7 	bl	8006300 <vPortExitCritical>

	return xReturn;
 8007152:	68fb      	ldr	r3, [r7, #12]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007164:	f7ff f8a0 	bl	80062a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	429a      	cmp	r2, r3
 8007172:	d102      	bne.n	800717a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e001      	b.n	800717e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800717e:	f7ff f8bf 	bl	8006300 <vPortExitCritical>

	return xReturn;
 8007182:	68fb      	ldr	r3, [r7, #12]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e014      	b.n	80071c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800719c:	4a0e      	ldr	r2, [pc, #56]	; (80071d8 <vQueueAddToRegistry+0x4c>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10b      	bne.n	80071c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071a8:	490b      	ldr	r1, [pc, #44]	; (80071d8 <vQueueAddToRegistry+0x4c>)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <vQueueAddToRegistry+0x4c>)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4413      	add	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071be:	e005      	b.n	80071cc <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	d9e7      	bls.n	800719c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	200148c8 	.word	0x200148c8

080071dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071ec:	f7ff f85c 	bl	80062a8 <vPortEnterCritical>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d103      	bne.n	8007206 <vQueueWaitForMessageRestricted+0x2a>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720c:	b25b      	sxtb	r3, r3
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d103      	bne.n	800721c <vQueueWaitForMessageRestricted+0x40>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800721c:	f7ff f870 	bl	8006300 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3324      	adds	r3, #36	; 0x24
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fdef 	bl	8007e14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007236:	6978      	ldr	r0, [r7, #20]
 8007238:	f7ff ff1a 	bl	8007070 <prvUnlockQueue>
	}
 800723c:	bf00      	nop
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <prvNotifyQueueSetContainer+0x24>
 800725e:	4920      	ldr	r1, [pc, #128]	; (80072e0 <prvNotifyQueueSetContainer+0x9c>)
 8007260:	f640 10ce 	movw	r0, #2510	; 0x9ce
 8007264:	f7fa fb18 	bl	8001898 <vAssertCalled>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007270:	429a      	cmp	r2, r3
 8007272:	d304      	bcc.n	800727e <prvNotifyQueueSetContainer+0x3a>
 8007274:	491a      	ldr	r1, [pc, #104]	; (80072e0 <prvNotifyQueueSetContainer+0x9c>)
 8007276:	f640 10cf 	movw	r0, #2511	; 0x9cf
 800727a:	f7fa fb0d 	bl	8001898 <vAssertCalled>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	429a      	cmp	r2, r3
 8007288:	d225      	bcs.n	80072d6 <prvNotifyQueueSetContainer+0x92>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007290:	73fb      	strb	r3, [r7, #15]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	6938      	ldr	r0, [r7, #16]
 800729a:	f7ff fe59 	bl	8006f50 <prvCopyDataToQueue>
 800729e:	6178      	str	r0, [r7, #20]

			if( cTxLock == queueUNLOCKED )
 80072a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d10e      	bne.n	80072c8 <prvNotifyQueueSetContainer+0x84>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d011      	beq.n	80072d6 <prvNotifyQueueSetContainer+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fdd4 	bl	8007e64 <xTaskRemoveFromEventList>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d009      	beq.n	80072d6 <prvNotifyQueueSetContainer+0x92>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e006      	b.n	80072d6 <prvNotifyQueueSetContainer+0x92>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	b25a      	sxtb	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072d6:	697b      	ldr	r3, [r7, #20]
	}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08011690 	.word	0x08011690

080072e4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	; 0x30
 80072e8:	af04      	add	r7, sp, #16
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	4613      	mov	r3, r2
 80072f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff f8d9 	bl	80064b0 <pvPortMalloc>
 80072fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00e      	beq.n	8007324 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007306:	205c      	movs	r0, #92	; 0x5c
 8007308:	f7ff f8d2 	bl	80064b0 <pvPortMalloc>
 800730c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
 800731a:	e005      	b.n	8007328 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800731c:	6978      	ldr	r0, [r7, #20]
 800731e:	f7ff f97d 	bl	800661c <vPortFree>
 8007322:	e001      	b.n	8007328 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d013      	beq.n	8007356 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	2300      	movs	r3, #0
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f80f 	bl	8007368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800734a:	69f8      	ldr	r0, [r7, #28]
 800734c:	f000 f890 	bl	8007470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007350:	2301      	movs	r3, #1
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	e002      	b.n	800735c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007356:	f04f 33ff 	mov.w	r3, #4294967295
 800735a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800735c:	69bb      	ldr	r3, [r7, #24]
	}
 800735e:	4618      	mov	r0, r3
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	461a      	mov	r2, r3
 8007380:	21a5      	movs	r1, #165	; 0xa5
 8007382:	f003 f8fa 	bl	800a57a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007390:	440b      	add	r3, r1
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <prvInitialiseNewTask+0x4c>
 80073aa:	4930      	ldr	r1, [pc, #192]	; (800746c <prvInitialiseNewTask+0x104>)
 80073ac:	f240 302b 	movw	r0, #811	; 0x32b
 80073b0:	f7fa fa72 	bl	8001898 <vAssertCalled>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e012      	b.n	80073e0 <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	7819      	ldrb	r1, [r3, #0]
 80073c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	4413      	add	r3, r2
 80073c8:	3334      	adds	r3, #52	; 0x34
 80073ca:	460a      	mov	r2, r1
 80073cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	4413      	add	r3, r2
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d006      	beq.n	80073e8 <prvInitialiseNewTask+0x80>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	3301      	adds	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b0f      	cmp	r3, #15
 80073e4:	d9e9      	bls.n	80073ba <prvInitialiseNewTask+0x52>
 80073e6:	e000      	b.n	80073ea <prvInitialiseNewTask+0x82>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 80073e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	d901      	bls.n	80073fc <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073f8:	2305      	movs	r3, #5
 80073fa:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	6a3a      	ldr	r2, [r7, #32]
 8007406:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2200      	movs	r2, #0
 800740c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	3304      	adds	r3, #4
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fdd0 	bl	8005fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	3318      	adds	r3, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fdcb 	bl	8005fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	f1c3 0206 	rsb	r2, r3, #6
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2200      	movs	r2, #0
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	68f9      	ldr	r1, [r7, #12]
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f7fe fe4a 	bl	80060e4 <pxPortInitialiseStack>
 8007450:	4602      	mov	r2, r0
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <prvInitialiseNewTask+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	080116a8 	.word	0x080116a8

08007470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007478:	f7fe ff16 	bl	80062a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800747c:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <prvAddNewTaskToReadyList+0xc0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a2b      	ldr	r2, [pc, #172]	; (8007530 <prvAddNewTaskToReadyList+0xc0>)
 8007484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007486:	4b2b      	ldr	r3, [pc, #172]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007494:	4b26      	ldr	r3, [pc, #152]	; (8007530 <prvAddNewTaskToReadyList+0xc0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d110      	bne.n	80074be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800749c:	f000 fdd8 	bl	8008050 <prvInitialiseTaskLists>
 80074a0:	e00d      	b.n	80074be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074a2:	4b25      	ldr	r3, [pc, #148]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074aa:	4b22      	ldr	r3, [pc, #136]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d802      	bhi.n	80074be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074b8:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074be:	4b1f      	ldr	r3, [pc, #124]	; (800753c <prvAddNewTaskToReadyList+0xcc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a1d      	ldr	r2, [pc, #116]	; (800753c <prvAddNewTaskToReadyList+0xcc>)
 80074c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074c8:	4b1c      	ldr	r3, [pc, #112]	; (800753c <prvAddNewTaskToReadyList+0xcc>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	2201      	movs	r2, #1
 80074d6:	409a      	lsls	r2, r3
 80074d8:	4b19      	ldr	r3, [pc, #100]	; (8007540 <prvAddNewTaskToReadyList+0xd0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4313      	orrs	r3, r2
 80074de:	4a18      	ldr	r2, [pc, #96]	; (8007540 <prvAddNewTaskToReadyList+0xd0>)
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4a15      	ldr	r2, [pc, #84]	; (8007544 <prvAddNewTaskToReadyList+0xd4>)
 80074f0:	441a      	add	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7fe fd6b 	bl	8005fd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074fe:	f7fe feff 	bl	8006300 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <prvAddNewTaskToReadyList+0xc8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <prvAddNewTaskToReadyList+0xc4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	429a      	cmp	r2, r3
 8007516:	d207      	bcs.n	8007528 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <prvAddNewTaskToReadyList+0xd8>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20014380 	.word	0x20014380
 8007534:	20014294 	.word	0x20014294
 8007538:	2001438c 	.word	0x2001438c
 800753c:	2001439c 	.word	0x2001439c
 8007540:	20014388 	.word	0x20014388
 8007544:	20014298 	.word	0x20014298
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007554:	f7fe fea8 	bl	80062a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <vTaskDelete+0x18>
 800755e:	4b36      	ldr	r3, [pc, #216]	; (8007638 <vTaskDelete+0xec>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	e000      	b.n	8007566 <vTaskDelete+0x1a>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3304      	adds	r3, #4
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fd8f 	bl	8006090 <uxListRemove>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d115      	bne.n	80075a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	492f      	ldr	r1, [pc, #188]	; (800763c <vTaskDelete+0xf0>)
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <vTaskDelete+0x58>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	2201      	movs	r2, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	43da      	mvns	r2, r3
 800759a:	4b29      	ldr	r3, [pc, #164]	; (8007640 <vTaskDelete+0xf4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4013      	ands	r3, r2
 80075a0:	4a27      	ldr	r2, [pc, #156]	; (8007640 <vTaskDelete+0xf4>)
 80075a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3318      	adds	r3, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fd6d 	bl	8006090 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80075b6:	4b23      	ldr	r3, [pc, #140]	; (8007644 <vTaskDelete+0xf8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a21      	ldr	r2, [pc, #132]	; (8007644 <vTaskDelete+0xf8>)
 80075be:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <vTaskDelete+0xec>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d10b      	bne.n	80075e2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	481d      	ldr	r0, [pc, #116]	; (8007648 <vTaskDelete+0xfc>)
 80075d2:	f7fe fcff 	bl	8005fd4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80075d6:	4b1d      	ldr	r3, [pc, #116]	; (800764c <vTaskDelete+0x100>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a1b      	ldr	r2, [pc, #108]	; (800764c <vTaskDelete+0x100>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e009      	b.n	80075f6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <vTaskDelete+0x104>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	4a19      	ldr	r2, [pc, #100]	; (8007650 <vTaskDelete+0x104>)
 80075ea:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 fe77 	bl	80082e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80075f2:	f000 fe85 	bl	8008300 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80075f6:	f7fe fe83 	bl	8006300 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80075fa:	4b16      	ldr	r3, [pc, #88]	; (8007654 <vTaskDelete+0x108>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d015      	beq.n	800762e <vTaskDelete+0xe2>
		{
			if( pxTCB == pxCurrentTCB )
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <vTaskDelete+0xec>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	429a      	cmp	r2, r3
 800760a:	d110      	bne.n	800762e <vTaskDelete+0xe2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800760c:	4b12      	ldr	r3, [pc, #72]	; (8007658 <vTaskDelete+0x10c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <vTaskDelete+0xd2>
 8007614:	4911      	ldr	r1, [pc, #68]	; (800765c <vTaskDelete+0x110>)
 8007616:	f240 4065 	movw	r0, #1125	; 0x465
 800761a:	f7fa f93d 	bl	8001898 <vAssertCalled>
				portYIELD_WITHIN_API();
 800761e:	4b10      	ldr	r3, [pc, #64]	; (8007660 <vTaskDelete+0x114>)
 8007620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20014294 	.word	0x20014294
 800763c:	20014298 	.word	0x20014298
 8007640:	20014388 	.word	0x20014388
 8007644:	2001439c 	.word	0x2001439c
 8007648:	20014354 	.word	0x20014354
 800764c:	20014368 	.word	0x20014368
 8007650:	20014380 	.word	0x20014380
 8007654:	2001438c 	.word	0x2001438c
 8007658:	200143a8 	.word	0x200143a8
 800765c:	080116a8 	.word	0x080116a8
 8007660:	e000ed04 	.word	0xe000ed04

08007664 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <vTaskDelayUntil+0x1e>
 8007678:	492d      	ldr	r1, [pc, #180]	; (8007730 <vTaskDelayUntil+0xcc>)
 800767a:	f240 4079 	movw	r0, #1145	; 0x479
 800767e:	f7fa f90b 	bl	8001898 <vAssertCalled>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <vTaskDelayUntil+0x2e>
 8007688:	4929      	ldr	r1, [pc, #164]	; (8007730 <vTaskDelayUntil+0xcc>)
 800768a:	f240 407a 	movw	r0, #1146	; 0x47a
 800768e:	f7fa f903 	bl	8001898 <vAssertCalled>
		configASSERT( uxSchedulerSuspended == 0 );
 8007692:	4b28      	ldr	r3, [pc, #160]	; (8007734 <vTaskDelayUntil+0xd0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <vTaskDelayUntil+0x40>
 800769a:	4925      	ldr	r1, [pc, #148]	; (8007730 <vTaskDelayUntil+0xcc>)
 800769c:	f240 407b 	movw	r0, #1147	; 0x47b
 80076a0:	f7fa f8fa 	bl	8001898 <vAssertCalled>

		vTaskSuspendAll();
 80076a4:	f000 f91c 	bl	80078e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80076a8:	4b23      	ldr	r3, [pc, #140]	; (8007738 <vTaskDelayUntil+0xd4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d90b      	bls.n	80076da <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d911      	bls.n	80076f0 <vTaskDelayUntil+0x8c>
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d90d      	bls.n	80076f0 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e00a      	b.n	80076f0 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d803      	bhi.n	80076ec <vTaskDelayUntil+0x88>
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d901      	bls.n	80076f0 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d006      	beq.n	800770a <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f801 	bl	800870c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800770a:	f000 f8f7 	bl	80078fc <xTaskResumeAll>
 800770e:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d107      	bne.n	8007726 <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <vTaskDelayUntil+0xd8>)
 8007718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	080116a8 	.word	0x080116a8
 8007734:	200143a8 	.word	0x200143a8
 8007738:	20014384 	.word	0x20014384
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d011      	beq.n	8007776 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <vTaskDelay+0x54>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <vTaskDelay+0x24>
 800775a:	490f      	ldr	r1, [pc, #60]	; (8007798 <vTaskDelay+0x58>)
 800775c:	f240 40cf 	movw	r0, #1231	; 0x4cf
 8007760:	f7fa f89a 	bl	8001898 <vAssertCalled>
			vTaskSuspendAll();
 8007764:	f000 f8bc 	bl	80078e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007768:	2100      	movs	r1, #0
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 ffce 	bl	800870c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007770:	f000 f8c4 	bl	80078fc <xTaskResumeAll>
 8007774:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <vTaskDelay+0x4c>
		{
			portYIELD_WITHIN_API();
 800777c:	4b07      	ldr	r3, [pc, #28]	; (800779c <vTaskDelay+0x5c>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200143a8 	.word	0x200143a8
 8007798:	080116a8 	.word	0x080116a8
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <eTaskGetState+0x1c>
 80077b2:	4920      	ldr	r1, [pc, #128]	; (8007834 <eTaskGetState+0x94>)
 80077b4:	f240 40fb 	movw	r0, #1275	; 0x4fb
 80077b8:	f7fa f86e 	bl	8001898 <vAssertCalled>

		if( pxTCB == pxCurrentTCB )
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <eTaskGetState+0x98>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d102      	bne.n	80077cc <eTaskGetState+0x2c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75fb      	strb	r3, [r7, #23]
 80077ca:	e02d      	b.n	8007828 <eTaskGetState+0x88>
		}
		else
		{
			taskENTER_CRITICAL();
 80077cc:	f7fe fd6c 	bl	80062a8 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80077d6:	f7fe fd93 	bl	8006300 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80077da:	4b18      	ldr	r3, [pc, #96]	; (800783c <eTaskGetState+0x9c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d004      	beq.n	80077ee <eTaskGetState+0x4e>
 80077e4:	4b16      	ldr	r3, [pc, #88]	; (8007840 <eTaskGetState+0xa0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d102      	bne.n	80077f4 <eTaskGetState+0x54>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80077ee:	2302      	movs	r3, #2
 80077f0:	75fb      	strb	r3, [r7, #23]
 80077f2:	e019      	b.n	8007828 <eTaskGetState+0x88>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a13      	ldr	r2, [pc, #76]	; (8007844 <eTaskGetState+0xa4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d109      	bne.n	8007810 <eTaskGetState+0x70>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	2b00      	cmp	r3, #0
 8007802:	d102      	bne.n	800780a <eTaskGetState+0x6a>
					{
						eReturn = eSuspended;
 8007804:	2303      	movs	r3, #3
 8007806:	75fb      	strb	r3, [r7, #23]
 8007808:	e00e      	b.n	8007828 <eTaskGetState+0x88>
					}
					else
					{
						eReturn = eBlocked;
 800780a:	2302      	movs	r3, #2
 800780c:	75fb      	strb	r3, [r7, #23]
 800780e:	e00b      	b.n	8007828 <eTaskGetState+0x88>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <eTaskGetState+0xa8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d002      	beq.n	800781e <eTaskGetState+0x7e>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <eTaskGetState+0x84>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800781e:	2304      	movs	r3, #4
 8007820:	75fb      	strb	r3, [r7, #23]
 8007822:	e001      	b.n	8007828 <eTaskGetState+0x88>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	080116a8 	.word	0x080116a8
 8007838:	20014294 	.word	0x20014294
 800783c:	20014338 	.word	0x20014338
 8007840:	2001433c 	.word	0x2001433c
 8007844:	2001436c 	.word	0x2001436c
 8007848:	20014354 	.word	0x20014354

0800784c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <vTaskStartScheduler+0x78>)
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	2300      	movs	r3, #0
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	2300      	movs	r3, #0
 800785c:	2282      	movs	r2, #130	; 0x82
 800785e:	491a      	ldr	r1, [pc, #104]	; (80078c8 <vTaskStartScheduler+0x7c>)
 8007860:	481a      	ldr	r0, [pc, #104]	; (80078cc <vTaskStartScheduler+0x80>)
 8007862:	f7ff fd3f 	bl	80072e4 <xTaskCreate>
 8007866:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d102      	bne.n	8007874 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800786e:	f000 ffb3 	bl	80087d8 <xTimerCreateTimerTask>
 8007872:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d117      	bne.n	80078aa <vTaskStartScheduler+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800787a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800787e:	b672      	cpsid	i
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	b662      	cpsie	i
 800788e:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007890:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <vTaskStartScheduler+0x84>)
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007898:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <vTaskStartScheduler+0x88>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800789e:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <vTaskStartScheduler+0x8c>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078a4:	f7fe fc98 	bl	80061d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078a8:	e008      	b.n	80078bc <vTaskStartScheduler+0x70>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d104      	bne.n	80078bc <vTaskStartScheduler+0x70>
 80078b2:	490a      	ldr	r1, [pc, #40]	; (80078dc <vTaskStartScheduler+0x90>)
 80078b4:	f240 7084 	movw	r0, #1924	; 0x784
 80078b8:	f7f9 ffee 	bl	8001898 <vAssertCalled>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	200143a4 	.word	0x200143a4
 80078c8:	080116c0 	.word	0x080116c0
 80078cc:	08008021 	.word	0x08008021
 80078d0:	200143a0 	.word	0x200143a0
 80078d4:	2001438c 	.word	0x2001438c
 80078d8:	20014384 	.word	0x20014384
 80078dc:	080116a8 	.word	0x080116a8

080078e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078e4:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <vTaskSuspendAll+0x18>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	4a03      	ldr	r2, [pc, #12]	; (80078f8 <vTaskSuspendAll+0x18>)
 80078ec:	6013      	str	r3, [r2, #0]
}
 80078ee:	bf00      	nop
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	200143a8 	.word	0x200143a8

080078fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800790a:	4b3e      	ldr	r3, [pc, #248]	; (8007a04 <xTaskResumeAll+0x108>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d104      	bne.n	800791c <xTaskResumeAll+0x20>
 8007912:	493d      	ldr	r1, [pc, #244]	; (8007a08 <xTaskResumeAll+0x10c>)
 8007914:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8007918:	f7f9 ffbe 	bl	8001898 <vAssertCalled>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800791c:	f7fe fcc4 	bl	80062a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007920:	4b38      	ldr	r3, [pc, #224]	; (8007a04 <xTaskResumeAll+0x108>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	4a37      	ldr	r2, [pc, #220]	; (8007a04 <xTaskResumeAll+0x108>)
 8007928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <xTaskResumeAll+0x108>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d161      	bne.n	80079f6 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007932:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <xTaskResumeAll+0x110>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d05d      	beq.n	80079f6 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800793a:	e02e      	b.n	800799a <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800793c:	4b34      	ldr	r3, [pc, #208]	; (8007a10 <xTaskResumeAll+0x114>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3318      	adds	r3, #24
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fba1 	bl	8006090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fb9c 	bl	8006090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <xTaskResumeAll+0x118>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4313      	orrs	r3, r2
 8007966:	4a2b      	ldr	r2, [pc, #172]	; (8007a14 <xTaskResumeAll+0x118>)
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <xTaskResumeAll+0x11c>)
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f7fe fb27 	bl	8005fd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <xTaskResumeAll+0x120>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <xTaskResumeAll+0x124>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799a:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <xTaskResumeAll+0x114>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1cc      	bne.n	800793c <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079a8:	f000 fcaa 	bl	8008300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079ac:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <xTaskResumeAll+0x128>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d010      	beq.n	80079da <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079b8:	f000 f8d6 	bl	8007b68 <xTaskIncrementTick>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 80079c2:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <xTaskResumeAll+0x124>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f1      	bne.n	80079b8 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <xTaskResumeAll+0x128>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079da:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <xTaskResumeAll+0x124>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <xTaskResumeAll+0x12c>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f6:	f7fe fc83 	bl	8006300 <vPortExitCritical>

	return xAlreadyYielded;
 80079fa:	68bb      	ldr	r3, [r7, #8]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	200143a8 	.word	0x200143a8
 8007a08:	080116a8 	.word	0x080116a8
 8007a0c:	20014380 	.word	0x20014380
 8007a10:	20014340 	.word	0x20014340
 8007a14:	20014388 	.word	0x20014388
 8007a18:	20014298 	.word	0x20014298
 8007a1c:	20014294 	.word	0x20014294
 8007a20:	20014394 	.word	0x20014394
 8007a24:	20014390 	.word	0x20014390
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <xTaskGetTickCount+0x1c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a38:	687b      	ldr	r3, [r7, #4]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20014384 	.word	0x20014384

08007a4c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	2306      	movs	r3, #6
 8007a5e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8007a60:	f7ff ff3e 	bl	80078e0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8007a64:	4b3a      	ldr	r3, [pc, #232]	; (8007b50 <uxTaskGetSystemState+0x104>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d368      	bcc.n	8007b40 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4613      	mov	r3, r2
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	461a      	mov	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1898      	adds	r0, r3, r2
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4a31      	ldr	r2, [pc, #196]	; (8007b54 <uxTaskGetSystemState+0x108>)
 8007a90:	4413      	add	r3, r2
 8007a92:	2201      	movs	r2, #1
 8007a94:	4619      	mov	r1, r3
 8007a96:	f000 fbb5 	bl	8008204 <prvListTasksWithinSingleList>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e2      	bne.n	8007a6e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1898      	adds	r0, r3, r2
 8007ab8:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <uxTaskGetSystemState+0x10c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2202      	movs	r2, #2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f000 fba0 	bl	8008204 <prvListTasksWithinSingleList>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	4413      	add	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	1898      	adds	r0, r3, r2
 8007adc:	4b1f      	ldr	r3, [pc, #124]	; (8007b5c <uxTaskGetSystemState+0x110>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f000 fb8e 	bl	8008204 <prvListTasksWithinSingleList>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	4413      	add	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4613      	mov	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	461a      	mov	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	2204      	movs	r2, #4
 8007b02:	4917      	ldr	r1, [pc, #92]	; (8007b60 <uxTaskGetSystemState+0x114>)
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fb7d 	bl	8008204 <prvListTasksWithinSingleList>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	4413      	add	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4613      	mov	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	2203      	movs	r2, #3
 8007b24:	490f      	ldr	r1, [pc, #60]	; (8007b64 <uxTaskGetSystemState+0x118>)
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fb6c 	bl	8008204 <prvListTasksWithinSingleList>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	4413      	add	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8007b40:	f7ff fedc 	bl	80078fc <xTaskResumeAll>

		return uxTask;
 8007b44:	697b      	ldr	r3, [r7, #20]
	}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20014380 	.word	0x20014380
 8007b54:	20014298 	.word	0x20014298
 8007b58:	20014338 	.word	0x20014338
 8007b5c:	2001433c 	.word	0x2001433c
 8007b60:	20014354 	.word	0x20014354
 8007b64:	2001436c 	.word	0x2001436c

08007b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b72:	4b4e      	ldr	r3, [pc, #312]	; (8007cac <xTaskIncrementTick+0x144>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 8087 	bne.w	8007c8a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8007b7c:	4b4c      	ldr	r3, [pc, #304]	; (8007cb0 <xTaskIncrementTick+0x148>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b84:	4a4a      	ldr	r2, [pc, #296]	; (8007cb0 <xTaskIncrementTick+0x148>)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11a      	bne.n	8007bc6 <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b90:	4b48      	ldr	r3, [pc, #288]	; (8007cb4 <xTaskIncrementTick+0x14c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <xTaskIncrementTick+0x3c>
 8007b9a:	4947      	ldr	r1, [pc, #284]	; (8007cb8 <xTaskIncrementTick+0x150>)
 8007b9c:	f640 10d9 	movw	r0, #2521	; 0x9d9
 8007ba0:	f7f9 fe7a 	bl	8001898 <vAssertCalled>
 8007ba4:	4b43      	ldr	r3, [pc, #268]	; (8007cb4 <xTaskIncrementTick+0x14c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	4b44      	ldr	r3, [pc, #272]	; (8007cbc <xTaskIncrementTick+0x154>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a41      	ldr	r2, [pc, #260]	; (8007cb4 <xTaskIncrementTick+0x14c>)
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	4a42      	ldr	r2, [pc, #264]	; (8007cbc <xTaskIncrementTick+0x154>)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	4b41      	ldr	r3, [pc, #260]	; (8007cc0 <xTaskIncrementTick+0x158>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4a40      	ldr	r2, [pc, #256]	; (8007cc0 <xTaskIncrementTick+0x158>)
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	f000 fb9d 	bl	8008300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bc6:	4b3f      	ldr	r3, [pc, #252]	; (8007cc4 <xTaskIncrementTick+0x15c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d34d      	bcc.n	8007c6c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd0:	4b38      	ldr	r3, [pc, #224]	; (8007cb4 <xTaskIncrementTick+0x14c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <xTaskIncrementTick+0x76>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <xTaskIncrementTick+0x78>
 8007bde:	2300      	movs	r3, #0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be4:	4b37      	ldr	r3, [pc, #220]	; (8007cc4 <xTaskIncrementTick+0x15c>)
 8007be6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bea:	601a      	str	r2, [r3, #0]
					break;
 8007bec:	e03e      	b.n	8007c6c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bee:	4b31      	ldr	r3, [pc, #196]	; (8007cb4 <xTaskIncrementTick+0x14c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d203      	bcs.n	8007c0e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c06:	4a2f      	ldr	r2, [pc, #188]	; (8007cc4 <xTaskIncrementTick+0x15c>)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6013      	str	r3, [r2, #0]
						break;
 8007c0c:	e02e      	b.n	8007c6c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fa3c 	bl	8006090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fa33 	bl	8006090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	2201      	movs	r2, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <xTaskIncrementTick+0x160>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	4a23      	ldr	r2, [pc, #140]	; (8007cc8 <xTaskIncrementTick+0x160>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4a20      	ldr	r2, [pc, #128]	; (8007ccc <xTaskIncrementTick+0x164>)
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fe f9be 	bl	8005fd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	4b1c      	ldr	r3, [pc, #112]	; (8007cd0 <xTaskIncrementTick+0x168>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3b4      	bcc.n	8007bd0 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 8007c66:	2301      	movs	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8007c6a:	e7b1      	b.n	8007bd0 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c6c:	4b18      	ldr	r3, [pc, #96]	; (8007cd0 <xTaskIncrementTick+0x168>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4916      	ldr	r1, [pc, #88]	; (8007ccc <xTaskIncrementTick+0x164>)
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d907      	bls.n	8007c94 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007c84:	2301      	movs	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e004      	b.n	8007c94 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <xTaskIncrementTick+0x16c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	4a10      	ldr	r2, [pc, #64]	; (8007cd4 <xTaskIncrementTick+0x16c>)
 8007c92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c94:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <xTaskIncrementTick+0x170>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ca0:	697b      	ldr	r3, [r7, #20]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200143a8 	.word	0x200143a8
 8007cb0:	20014384 	.word	0x20014384
 8007cb4:	20014338 	.word	0x20014338
 8007cb8:	080116a8 	.word	0x080116a8
 8007cbc:	2001433c 	.word	0x2001433c
 8007cc0:	20014398 	.word	0x20014398
 8007cc4:	200143a0 	.word	0x200143a0
 8007cc8:	20014388 	.word	0x20014388
 8007ccc:	20014298 	.word	0x20014298
 8007cd0:	20014294 	.word	0x20014294
 8007cd4:	20014390 	.word	0x20014390
 8007cd8:	20014394 	.word	0x20014394

08007cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ce2:	4b36      	ldr	r3, [pc, #216]	; (8007dbc <vTaskSwitchContext+0xe0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cea:	4b35      	ldr	r3, [pc, #212]	; (8007dc0 <vTaskSwitchContext+0xe4>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cf0:	e060      	b.n	8007db4 <vTaskSwitchContext+0xd8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8007cf2:	4b33      	ldr	r3, [pc, #204]	; (8007dc0 <vTaskSwitchContext+0xe4>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8007cf8:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <vTaskSwitchContext+0xe8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d111      	bne.n	8007d34 <vTaskSwitchContext+0x58>
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3304      	adds	r3, #4
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d10b      	bne.n	8007d34 <vTaskSwitchContext+0x58>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d105      	bne.n	8007d34 <vTaskSwitchContext+0x58>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d008      	beq.n	8007d46 <vTaskSwitchContext+0x6a>
 8007d34:	4b23      	ldr	r3, [pc, #140]	; (8007dc4 <vTaskSwitchContext+0xe8>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4b22      	ldr	r3, [pc, #136]	; (8007dc4 <vTaskSwitchContext+0xe8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3334      	adds	r3, #52	; 0x34
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7f9 fd99 	bl	8001878 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007d46:	4b20      	ldr	r3, [pc, #128]	; (8007dc8 <vTaskSwitchContext+0xec>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	fab3 f383 	clz	r3, r3
 8007d52:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	f1c3 031f 	rsb	r3, r3, #31
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	491b      	ldr	r1, [pc, #108]	; (8007dcc <vTaskSwitchContext+0xf0>)
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <vTaskSwitchContext+0x9e>
 8007d70:	4917      	ldr	r1, [pc, #92]	; (8007dd0 <vTaskSwitchContext+0xf4>)
 8007d72:	f640 20f6 	movw	r0, #2806	; 0xaf6
 8007d76:	f7f9 fd8f 	bl	8001898 <vAssertCalled>
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <vTaskSwitchContext+0xf0>)
 8007d86:	4413      	add	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d104      	bne.n	8007daa <vTaskSwitchContext+0xce>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	605a      	str	r2, [r3, #4]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <vTaskSwitchContext+0xe8>)
 8007db2:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	200143a8 	.word	0x200143a8
 8007dc0:	20014394 	.word	0x20014394
 8007dc4:	20014294 	.word	0x20014294
 8007dc8:	20014388 	.word	0x20014388
 8007dcc:	20014298 	.word	0x20014298
 8007dd0:	080116a8 	.word	0x080116a8

08007dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <vTaskPlaceOnEventList+0x1a>
 8007de4:	4909      	ldr	r1, [pc, #36]	; (8007e0c <vTaskPlaceOnEventList+0x38>)
 8007de6:	f640 3006 	movw	r0, #2822	; 0xb06
 8007dea:	f7f9 fd55 	bl	8001898 <vAssertCalled>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dee:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <vTaskPlaceOnEventList+0x3c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3318      	adds	r3, #24
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fe f910 	bl	800601c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	6838      	ldr	r0, [r7, #0]
 8007e00:	f000 fc84 	bl	800870c <prvAddCurrentTaskToDelayedList>
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	080116a8 	.word	0x080116a8
 8007e10:	20014294 	.word	0x20014294

08007e14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <vTaskPlaceOnEventListRestricted+0x1c>
 8007e26:	490d      	ldr	r1, [pc, #52]	; (8007e5c <vTaskPlaceOnEventListRestricted+0x48>)
 8007e28:	f640 3031 	movw	r0, #2865	; 0xb31
 8007e2c:	f7f9 fd34 	bl	8001898 <vAssertCalled>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <vTaskPlaceOnEventListRestricted+0x4c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3318      	adds	r3, #24
 8007e36:	4619      	mov	r1, r3
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7fe f8cb 	bl	8005fd4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8007e44:	f04f 33ff 	mov.w	r3, #4294967295
 8007e48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	68b8      	ldr	r0, [r7, #8]
 8007e4e:	f000 fc5d 	bl	800870c <prvAddCurrentTaskToDelayedList>
	}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	080116a8 	.word	0x080116a8
 8007e60:	20014294 	.word	0x20014294

08007e64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <xTaskRemoveFromEventList+0x20>
 8007e7a:	4922      	ldr	r1, [pc, #136]	; (8007f04 <xTaskRemoveFromEventList+0xa0>)
 8007e7c:	f640 3061 	movw	r0, #2913	; 0xb61
 8007e80:	f7f9 fd0a 	bl	8001898 <vAssertCalled>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	3318      	adds	r3, #24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe f901 	bl	8006090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	; (8007f08 <xTaskRemoveFromEventList+0xa4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d11c      	bne.n	8007ed0 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe f8f8 	bl	8006090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <xTaskRemoveFromEventList+0xa8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <xTaskRemoveFromEventList+0xa8>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <xTaskRemoveFromEventList+0xac>)
 8007ec0:	441a      	add	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7fe f883 	bl	8005fd4 <vListInsertEnd>
 8007ece:	e005      	b.n	8007edc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	3318      	adds	r3, #24
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	480f      	ldr	r0, [pc, #60]	; (8007f14 <xTaskRemoveFromEventList+0xb0>)
 8007ed8:	f7fe f87c 	bl	8005fd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <xTaskRemoveFromEventList+0xb4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d905      	bls.n	8007ef6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eea:	2301      	movs	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <xTaskRemoveFromEventList+0xb8>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e001      	b.n	8007efa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	080116a8 	.word	0x080116a8
 8007f08:	200143a8 	.word	0x200143a8
 8007f0c:	20014388 	.word	0x20014388
 8007f10:	20014298 	.word	0x20014298
 8007f14:	20014340 	.word	0x20014340
 8007f18:	20014294 	.word	0x20014294
 8007f1c:	20014394 	.word	0x20014394

08007f20 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <vTaskSetTimeOutState+0x18>
 8007f2e:	4908      	ldr	r1, [pc, #32]	; (8007f50 <vTaskSetTimeOutState+0x30>)
 8007f30:	f640 30c1 	movw	r0, #3009	; 0xbc1
 8007f34:	f7f9 fcb0 	bl	8001898 <vAssertCalled>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <vTaskSetTimeOutState+0x34>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <vTaskSetTimeOutState+0x38>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	605a      	str	r2, [r3, #4]
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	080116a8 	.word	0x080116a8
 8007f54:	20014398 	.word	0x20014398
 8007f58:	20014384 	.word	0x20014384

08007f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <xTaskCheckForTimeOut+0x1a>
 8007f6c:	4923      	ldr	r1, [pc, #140]	; (8007ffc <xTaskCheckForTimeOut+0xa0>)
 8007f6e:	f640 30cb 	movw	r0, #3019	; 0xbcb
 8007f72:	f7f9 fc91 	bl	8001898 <vAssertCalled>
	configASSERT( pxTicksToWait );
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <xTaskCheckForTimeOut+0x2a>
 8007f7c:	491f      	ldr	r1, [pc, #124]	; (8007ffc <xTaskCheckForTimeOut+0xa0>)
 8007f7e:	f640 30cc 	movw	r0, #3020	; 0xbcc
 8007f82:	f7f9 fc89 	bl	8001898 <vAssertCalled>

	taskENTER_CRITICAL();
 8007f86:	f7fe f98f 	bl	80062a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <xTaskCheckForTimeOut+0xa4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d102      	bne.n	8007fa0 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e026      	b.n	8007fee <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b17      	ldr	r3, [pc, #92]	; (8008004 <xTaskCheckForTimeOut+0xa8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d007      	beq.n	8007fbc <xTaskCheckForTimeOut+0x60>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d802      	bhi.n	8007fbc <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	e018      	b.n	8007fee <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d20e      	bcs.n	8007fea <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6859      	ldr	r1, [r3, #4]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	1acb      	subs	r3, r1, r3
 8007fd8:	441a      	add	r2, r3
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff ff9e 	bl	8007f20 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e001      	b.n	8007fee <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8007fea:	2301      	movs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fee:	f7fe f987 	bl	8006300 <vPortExitCritical>

	return xReturn;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	080116a8 	.word	0x080116a8
 8008000:	20014384 	.word	0x20014384
 8008004:	20014398 	.word	0x20014398

08008008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800800c:	4b03      	ldr	r3, [pc, #12]	; (800801c <vTaskMissedYield+0x14>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
}
 8008012:	bf00      	nop
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20014394 	.word	0x20014394

08008020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008028:	f000 f852 	bl	80080d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <prvIdleTask+0x28>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d9f9      	bls.n	8008028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <prvIdleTask+0x2c>)
 8008036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8008044:	e7f0      	b.n	8008028 <prvIdleTask+0x8>
 8008046:	bf00      	nop
 8008048:	20014298 	.word	0x20014298
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
 800805a:	e00c      	b.n	8008076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4a12      	ldr	r2, [pc, #72]	; (80080b0 <prvInitialiseTaskLists+0x60>)
 8008068:	4413      	add	r3, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd ff84 	bl	8005f78 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3301      	adds	r3, #1
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b05      	cmp	r3, #5
 800807a:	d9ef      	bls.n	800805c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800807c:	480d      	ldr	r0, [pc, #52]	; (80080b4 <prvInitialiseTaskLists+0x64>)
 800807e:	f7fd ff7b 	bl	8005f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008082:	480d      	ldr	r0, [pc, #52]	; (80080b8 <prvInitialiseTaskLists+0x68>)
 8008084:	f7fd ff78 	bl	8005f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008088:	480c      	ldr	r0, [pc, #48]	; (80080bc <prvInitialiseTaskLists+0x6c>)
 800808a:	f7fd ff75 	bl	8005f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800808e:	480c      	ldr	r0, [pc, #48]	; (80080c0 <prvInitialiseTaskLists+0x70>)
 8008090:	f7fd ff72 	bl	8005f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008094:	480b      	ldr	r0, [pc, #44]	; (80080c4 <prvInitialiseTaskLists+0x74>)
 8008096:	f7fd ff6f 	bl	8005f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <prvInitialiseTaskLists+0x78>)
 800809c:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <prvInitialiseTaskLists+0x64>)
 800809e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <prvInitialiseTaskLists+0x7c>)
 80080a2:	4a05      	ldr	r2, [pc, #20]	; (80080b8 <prvInitialiseTaskLists+0x68>)
 80080a4:	601a      	str	r2, [r3, #0]
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20014298 	.word	0x20014298
 80080b4:	20014310 	.word	0x20014310
 80080b8:	20014324 	.word	0x20014324
 80080bc:	20014340 	.word	0x20014340
 80080c0:	20014354 	.word	0x20014354
 80080c4:	2001436c 	.word	0x2001436c
 80080c8:	20014338 	.word	0x20014338
 80080cc:	2001433c 	.word	0x2001433c

080080d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080d6:	e028      	b.n	800812a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80080d8:	f7ff fc02 	bl	80078e0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80080dc:	4b17      	ldr	r3, [pc, #92]	; (800813c <prvCheckTasksWaitingTermination+0x6c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf0c      	ite	eq
 80080e4:	2301      	moveq	r3, #1
 80080e6:	2300      	movne	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80080ec:	f7ff fc06 	bl	80078fc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d119      	bne.n	800812a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80080f6:	f7fe f8d7 	bl	80062a8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80080fa:	4b10      	ldr	r3, [pc, #64]	; (800813c <prvCheckTasksWaitingTermination+0x6c>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	3304      	adds	r3, #4
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd ffc2 	bl	8006090 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <prvCheckTasksWaitingTermination+0x70>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	4a0b      	ldr	r2, [pc, #44]	; (8008140 <prvCheckTasksWaitingTermination+0x70>)
 8008114:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <prvCheckTasksWaitingTermination+0x74>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3b01      	subs	r3, #1
 800811c:	4a09      	ldr	r2, [pc, #36]	; (8008144 <prvCheckTasksWaitingTermination+0x74>)
 800811e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8008120:	f7fe f8ee 	bl	8006300 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8008124:	6838      	ldr	r0, [r7, #0]
 8008126:	f000 f8db 	bl	80082e0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800812a:	4b06      	ldr	r3, [pc, #24]	; (8008144 <prvCheckTasksWaitingTermination+0x74>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d2      	bne.n	80080d8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20014354 	.word	0x20014354
 8008140:	20014380 	.word	0x20014380
 8008144:	20014368 	.word	0x20014368

08008148 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <vTaskGetInfo+0x1a>
 800815c:	4b28      	ldr	r3, [pc, #160]	; (8008200 <vTaskGetInfo+0xb8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	e000      	b.n	8008164 <vTaskGetInfo+0x1c>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	609a      	str	r2, [r3, #8]
		#if ( INCLUDE_vTaskSuspend == 1 )
		{
			/* If the task is in the suspended list then there is a chance it is
			actually just blocked indefinitely - so really it should be reported as
			being in the Blocked state. */
			if( pxTaskStatus->eCurrentState == eSuspended )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	7b1b      	ldrb	r3, [r3, #12]
 8008192:	2b03      	cmp	r3, #3
 8008194:	d10a      	bne.n	80081ac <vTaskGetInfo+0x64>
			{
				vTaskSuspendAll();
 8008196:	f7ff fba3 	bl	80078e0 <vTaskSuspendAll>
				{
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <vTaskGetInfo+0x60>
					{
						pxTaskStatus->eCurrentState = eBlocked;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2202      	movs	r2, #2
 80081a6:	731a      	strb	r2, [r3, #12]
					}
				}
				xTaskResumeAll();
 80081a8:	f7ff fba8 	bl	80078fc <xTaskResumeAll>
		}
		#endif /* INCLUDE_vTaskSuspend */

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the value
		of eState passed into this function is eInvalid - otherwise the state is
		just set to whatever is passed in. */
		if( eState != eInvalid )
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d003      	beq.n	80081c8 <vTaskGetInfo+0x80>
		{
			pxTaskStatus->eCurrentState = eState;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	731a      	strb	r2, [r3, #12]
 80081c6:	e006      	b.n	80081d6 <vTaskGetInfo+0x8e>
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fae9 	bl	80077a0 <eTaskGetState>
 80081ce:	4603      	mov	r3, r0
 80081d0:	461a      	mov	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <vTaskGetInfo+0xa8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 f861 	bl	80082a8 <prvTaskCheckFreeStackSpace>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80081ee:	e002      	b.n	80081f6 <vTaskGetInfo+0xae>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	841a      	strh	r2, [r3, #32]
		}
	}
 80081f6:	bf00      	nop
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20014294 	.word	0x20014294

08008204 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d03f      	beq.n	800829e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	605a      	str	r2, [r3, #4]
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	3308      	adds	r3, #8
 8008234:	429a      	cmp	r2, r3
 8008236:	d104      	bne.n	8008242 <prvListTasksWithinSingleList+0x3e>
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	605a      	str	r2, [r3, #4]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	3308      	adds	r3, #8
 8008260:	429a      	cmp	r2, r3
 8008262:	d104      	bne.n	800826e <prvListTasksWithinSingleList+0x6a>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8008276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	461a      	mov	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1899      	adds	r1, r3, r2
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2201      	movs	r2, #1
 800828a:	6978      	ldr	r0, [r7, #20]
 800828c:	f7ff ff5c 	bl	8008148 <vTaskGetInfo>
				uxTask++;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	3301      	adds	r3, #1
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	429a      	cmp	r2, r3
 800829c:	d1d5      	bne.n	800824a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3728      	adds	r7, #40	; 0x28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80082b4:	e005      	b.n	80082c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3301      	adds	r3, #1
 80082ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2ba5      	cmp	r3, #165	; 0xa5
 80082c8:	d0f5      	beq.n	80082b6 <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	089b      	lsrs	r3, r3, #2
 80082ce:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	b29b      	uxth	r3, r3
	}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe f995 	bl	800661c <vPortFree>
			vPortFree( pxTCB );
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe f992 	bl	800661c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <prvResetNextTaskUnblockTime+0x44>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <prvResetNextTaskUnblockTime+0x14>
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <prvResetNextTaskUnblockTime+0x16>
 8008314:	2300      	movs	r3, #0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800831a:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <prvResetNextTaskUnblockTime+0x48>)
 800831c:	f04f 32ff 	mov.w	r2, #4294967295
 8008320:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008322:	e008      	b.n	8008336 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <prvResetNextTaskUnblockTime+0x44>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	4a05      	ldr	r2, [pc, #20]	; (8008348 <prvResetNextTaskUnblockTime+0x48>)
 8008334:	6013      	str	r3, [r2, #0]
	}
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20014338 	.word	0x20014338
 8008348:	200143a0 	.word	0x200143a0

0800834c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <xTaskGetSchedulerState+0x34>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800835a:	2301      	movs	r3, #1
 800835c:	607b      	str	r3, [r7, #4]
 800835e:	e008      	b.n	8008372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008360:	4b08      	ldr	r3, [pc, #32]	; (8008384 <xTaskGetSchedulerState+0x38>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008368:	2302      	movs	r3, #2
 800836a:	607b      	str	r3, [r7, #4]
 800836c:	e001      	b.n	8008372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008372:	687b      	ldr	r3, [r7, #4]
	}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	2001438c 	.word	0x2001438c
 8008384:	200143a8 	.word	0x200143a8

08008388 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d062      	beq.n	8008460 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839e:	4b32      	ldr	r3, [pc, #200]	; (8008468 <vTaskPriorityInherit+0xe0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d25b      	bcs.n	8008460 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	db06      	blt.n	80083be <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b0:	4b2d      	ldr	r3, [pc, #180]	; (8008468 <vTaskPriorityInherit+0xe0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f1c3 0206 	rsb	r2, r3, #6
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6959      	ldr	r1, [r3, #20]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a27      	ldr	r2, [pc, #156]	; (800846c <vTaskPriorityInherit+0xe4>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4299      	cmp	r1, r3
 80083d4:	d101      	bne.n	80083da <vTaskPriorityInherit+0x52>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <vTaskPriorityInherit+0x54>
 80083da:	2300      	movs	r3, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d03a      	beq.n	8008456 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd fe53 	bl	8006090 <uxListRemove>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d115      	bne.n	800841c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f4:	491d      	ldr	r1, [pc, #116]	; (800846c <vTaskPriorityInherit+0xe4>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <vTaskPriorityInherit+0x94>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	2201      	movs	r2, #1
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	43da      	mvns	r2, r3
 8008412:	4b17      	ldr	r3, [pc, #92]	; (8008470 <vTaskPriorityInherit+0xe8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4013      	ands	r3, r2
 8008418:	4a15      	ldr	r2, [pc, #84]	; (8008470 <vTaskPriorityInherit+0xe8>)
 800841a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <vTaskPriorityInherit+0xe0>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	2201      	movs	r2, #1
 800842c:	409a      	lsls	r2, r3
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <vTaskPriorityInherit+0xe8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4313      	orrs	r3, r2
 8008434:	4a0e      	ldr	r2, [pc, #56]	; (8008470 <vTaskPriorityInherit+0xe8>)
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4a09      	ldr	r2, [pc, #36]	; (800846c <vTaskPriorityInherit+0xe4>)
 8008446:	441a      	add	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3304      	adds	r3, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	f7fd fdc0 	bl	8005fd4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008454:	e004      	b.n	8008460 <vTaskPriorityInherit+0xd8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008456:	4b04      	ldr	r3, [pc, #16]	; (8008468 <vTaskPriorityInherit+0xe0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008460:	bf00      	nop
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20014294 	.word	0x20014294
 800846c:	20014298 	.word	0x20014298
 8008470:	20014388 	.word	0x20014388

08008474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d062      	beq.n	8008550 <xTaskPriorityDisinherit+0xdc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800848a:	4b34      	ldr	r3, [pc, #208]	; (800855c <xTaskPriorityDisinherit+0xe8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	429a      	cmp	r2, r3
 8008492:	d004      	beq.n	800849e <xTaskPriorityDisinherit+0x2a>
 8008494:	4932      	ldr	r1, [pc, #200]	; (8008560 <xTaskPriorityDisinherit+0xec>)
 8008496:	f640 60c7 	movw	r0, #3783	; 0xec7
 800849a:	f7f9 f9fd 	bl	8001898 <vAssertCalled>

			configASSERT( pxTCB->uxMutexesHeld );
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d104      	bne.n	80084b0 <xTaskPriorityDisinherit+0x3c>
 80084a6:	492e      	ldr	r1, [pc, #184]	; (8008560 <xTaskPriorityDisinherit+0xec>)
 80084a8:	f640 60c9 	movw	r0, #3785	; 0xec9
 80084ac:	f7f9 f9f4 	bl	8001898 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b4:	1e5a      	subs	r2, r3, #1
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d044      	beq.n	8008550 <xTaskPriorityDisinherit+0xdc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d140      	bne.n	8008550 <xTaskPriorityDisinherit+0xdc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fd fddc 	bl	8006090 <uxListRemove>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d115      	bne.n	800850a <xTaskPriorityDisinherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	4920      	ldr	r1, [pc, #128]	; (8008564 <xTaskPriorityDisinherit+0xf0>)
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xTaskPriorityDisinherit+0x96>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	2201      	movs	r2, #1
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	43da      	mvns	r2, r3
 8008500:	4b19      	ldr	r3, [pc, #100]	; (8008568 <xTaskPriorityDisinherit+0xf4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4013      	ands	r3, r2
 8008506:	4a18      	ldr	r2, [pc, #96]	; (8008568 <xTaskPriorityDisinherit+0xf4>)
 8008508:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	f1c3 0206 	rsb	r2, r3, #6
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	2201      	movs	r2, #1
 8008524:	409a      	lsls	r2, r3
 8008526:	4b10      	ldr	r3, [pc, #64]	; (8008568 <xTaskPriorityDisinherit+0xf4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4313      	orrs	r3, r2
 800852c:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <xTaskPriorityDisinherit+0xf4>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <xTaskPriorityDisinherit+0xf0>)
 800853e:	441a      	add	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fd fd44 	bl	8005fd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800854c:	2301      	movs	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008550:	68fb      	ldr	r3, [r7, #12]
	}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20014294 	.word	0x20014294
 8008560:	080116a8 	.word	0x080116a8
 8008564:	20014298 	.word	0x20014298
 8008568:	20014388 	.word	0x20014388

0800856c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f002 f8e7 	bl	800a74c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7f7 fe46 	bl	8000210 <strlen>
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	e007      	b.n	8008598 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	2220      	movs	r2, #32
 8008590:	701a      	strb	r2, [r3, #0]
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b0e      	cmp	r3, #14
 800859c:	d9f4      	bls.n	8008588 <prvWriteNameToBuffer+0x1c>
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
	}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop

080085b8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b089      	sub	sp, #36	; 0x24
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80085c6:	4b45      	ldr	r3, [pc, #276]	; (80086dc <vTaskList+0x124>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80085cc:	4b43      	ldr	r3, [pc, #268]	; (80086dc <vTaskList+0x124>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	4613      	mov	r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fd ff69 	bl	80064b0 <pvPortMalloc>
 80085de:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d075      	beq.n	80086d2 <vTaskList+0x11a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	4619      	mov	r1, r3
 80085ec:	6938      	ldr	r0, [r7, #16]
 80085ee:	f7ff fa2d 	bl	8007a4c <uxTaskGetSystemState>
 80085f2:	4603      	mov	r3, r0
 80085f4:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	e063      	b.n	80086c4 <vTaskList+0x10c>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	461a      	mov	r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4413      	add	r3, r2
 800860c:	7b1b      	ldrb	r3, [r3, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	2b03      	cmp	r3, #3
 8008612:	d817      	bhi.n	8008644 <vTaskList+0x8c>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <vTaskList+0x64>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	0800862d 	.word	0x0800862d
 8008620:	08008633 	.word	0x08008633
 8008624:	08008639 	.word	0x08008639
 8008628:	0800863f 	.word	0x0800863f
				{
					case eReady:		cStatus = tskREADY_CHAR;
 800862c:	2352      	movs	r3, #82	; 0x52
 800862e:	75fb      	strb	r3, [r7, #23]
										break;
 8008630:	e00b      	b.n	800864a <vTaskList+0x92>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8008632:	2342      	movs	r3, #66	; 0x42
 8008634:	75fb      	strb	r3, [r7, #23]
										break;
 8008636:	e008      	b.n	800864a <vTaskList+0x92>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8008638:	2353      	movs	r3, #83	; 0x53
 800863a:	75fb      	strb	r3, [r7, #23]
										break;
 800863c:	e005      	b.n	800864a <vTaskList+0x92>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800863e:	2344      	movs	r3, #68	; 0x44
 8008640:	75fb      	strb	r3, [r7, #23]
										break;
 8008642:	e002      	b.n	800864a <vTaskList+0x92>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 8008644:	2300      	movs	r3, #0
 8008646:	75fb      	strb	r3, [r7, #23]
										break;
 8008648:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	461a      	mov	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff ff84 	bl	800856c <prvWriteNameToBuffer>
 8008664:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8008666:	7df9      	ldrb	r1, [r7, #23]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	461a      	mov	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	4413      	add	r3, r2
 8008678:	6918      	ldr	r0, [r3, #16]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4613      	mov	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	461a      	mov	r2, r3
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	4413      	add	r3, r2
 800868a:	8c1b      	ldrh	r3, [r3, #32]
 800868c:	461c      	mov	r4, r3
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4613      	mov	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	461a      	mov	r2, r3
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	4413      	add	r3, r2
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	9400      	str	r4, [sp, #0]
 80086a4:	4603      	mov	r3, r0
 80086a6:	460a      	mov	r2, r1
 80086a8:	490d      	ldr	r1, [pc, #52]	; (80086e0 <vTaskList+0x128>)
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f002 f80c 	bl	800a6c8 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7f7 fdad 	bl	8000210 <strlen>
 80086b6:	4602      	mov	r2, r0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	607b      	str	r3, [r7, #4]
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60bb      	str	r3, [r7, #8]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d397      	bcc.n	80085fc <vTaskList+0x44>
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80086cc:	6938      	ldr	r0, [r7, #16]
 80086ce:	f7fd ffa5 	bl	800661c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd90      	pop	{r4, r7, pc}
 80086da:	bf00      	nop
 80086dc:	20014380 	.word	0x20014380
 80086e0:	080116c8 	.word	0x080116c8

080086e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <pvTaskIncrementMutexHeldCount+0x24>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80086f0:	4b05      	ldr	r3, [pc, #20]	; (8008708 <pvTaskIncrementMutexHeldCount+0x24>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086f6:	3201      	adds	r2, #1
 80086f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80086fa:	4b03      	ldr	r3, [pc, #12]	; (8008708 <pvTaskIncrementMutexHeldCount+0x24>)
 80086fc:	681b      	ldr	r3, [r3, #0]
	}
 80086fe:	4618      	mov	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	20014294 	.word	0x20014294

0800870c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008716:	4b29      	ldr	r3, [pc, #164]	; (80087bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800871c:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3304      	adds	r3, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd fcb4 	bl	8006090 <uxListRemove>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10b      	bne.n	8008746 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	2201      	movs	r2, #1
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	43da      	mvns	r2, r3
 800873c:	4b21      	ldr	r3, [pc, #132]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4013      	ands	r3, r2
 8008742:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008744:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874c:	d10a      	bne.n	8008764 <prvAddCurrentTaskToDelayedList+0x58>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3304      	adds	r3, #4
 800875a:	4619      	mov	r1, r3
 800875c:	481a      	ldr	r0, [pc, #104]	; (80087c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800875e:	f7fd fc39 	bl	8005fd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008762:	e026      	b.n	80087b2 <prvAddCurrentTaskToDelayedList+0xa6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4413      	add	r3, r2
 800876a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	429a      	cmp	r2, r3
 800877a:	d209      	bcs.n	8008790 <prvAddCurrentTaskToDelayedList+0x84>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800877c:	4b13      	ldr	r3, [pc, #76]	; (80087cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f7fd fc47 	bl	800601c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800878e:	e010      	b.n	80087b2 <prvAddCurrentTaskToDelayedList+0xa6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3304      	adds	r3, #4
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f7fd fc3d 	bl	800601c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80087a2:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d202      	bcs.n	80087b2 <prvAddCurrentTaskToDelayedList+0xa6>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20014384 	.word	0x20014384
 80087c0:	20014294 	.word	0x20014294
 80087c4:	20014388 	.word	0x20014388
 80087c8:	2001436c 	.word	0x2001436c
 80087cc:	2001433c 	.word	0x2001433c
 80087d0:	20014338 	.word	0x20014338
 80087d4:	200143a0 	.word	0x200143a0

080087d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087e2:	f000 fa91 	bl	8008d08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087e6:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <xTimerCreateTimerTask+0x48>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <xTimerCreateTimerTask+0x4c>)
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	2305      	movs	r3, #5
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80087fc:	490a      	ldr	r1, [pc, #40]	; (8008828 <xTimerCreateTimerTask+0x50>)
 80087fe:	480b      	ldr	r0, [pc, #44]	; (800882c <xTimerCreateTimerTask+0x54>)
 8008800:	f7fe fd70 	bl	80072e4 <xTaskCreate>
 8008804:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <xTimerCreateTimerTask+0x3e>
 800880c:	4908      	ldr	r1, [pc, #32]	; (8008830 <xTimerCreateTimerTask+0x58>)
 800880e:	f240 1033 	movw	r0, #307	; 0x133
 8008812:	f7f9 f841 	bl	8001898 <vAssertCalled>
	return xReturn;
 8008816:	687b      	ldr	r3, [r7, #4]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200143dc 	.word	0x200143dc
 8008824:	200143e0 	.word	0x200143e0
 8008828:	080116d8 	.word	0x080116d8
 800882c:	08008941 	.word	0x08008941
 8008830:	080116e0 	.word	0x080116e0

08008834 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008842:	2300      	movs	r3, #0
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <xTimerGenericCommand+0x22>
 800884c:	491c      	ldr	r1, [pc, #112]	; (80088c0 <xTimerGenericCommand+0x8c>)
 800884e:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8008852:	f7f9 f821 	bl	8001898 <vAssertCalled>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008856:	4b1b      	ldr	r3, [pc, #108]	; (80088c4 <xTimerGenericCommand+0x90>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02a      	beq.n	80088b4 <xTimerGenericCommand+0x80>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b05      	cmp	r3, #5
 800886e:	dc18      	bgt.n	80088a2 <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008870:	f7ff fd6c 	bl	800834c <xTaskGetSchedulerState>
 8008874:	4603      	mov	r3, r0
 8008876:	2b02      	cmp	r3, #2
 8008878:	d109      	bne.n	800888e <xTimerGenericCommand+0x5a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <xTimerGenericCommand+0x90>)
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f107 0114 	add.w	r1, r7, #20
 8008882:	2300      	movs	r3, #0
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	f7fe f8c7 	bl	8006a18 <xQueueGenericSend>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24
 800888c:	e012      	b.n	80088b4 <xTimerGenericCommand+0x80>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800888e:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <xTimerGenericCommand+0x90>)
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	f107 0114 	add.w	r1, r7, #20
 8008896:	2300      	movs	r3, #0
 8008898:	2200      	movs	r2, #0
 800889a:	f7fe f8bd 	bl	8006a18 <xQueueGenericSend>
 800889e:	6278      	str	r0, [r7, #36]	; 0x24
 80088a0:	e008      	b.n	80088b4 <xTimerGenericCommand+0x80>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088a2:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <xTimerGenericCommand+0x90>)
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f107 0114 	add.w	r1, r7, #20
 80088aa:	2300      	movs	r3, #0
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	f7fe f9af 	bl	8006c10 <xQueueGenericSendFromISR>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	080116e0 	.word	0x080116e0
 80088c4:	200143dc 	.word	0x200143dc

080088c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088d2:	4b19      	ldr	r3, [pc, #100]	; (8008938 <prvProcessExpiredTimer+0x70>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3304      	adds	r3, #4
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fd fbd5 	bl	8006090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d11c      	bne.n	8008928 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	18d1      	adds	r1, r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f8c4 	bl	8008a88 <prvInsertTimerInActiveList>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d010      	beq.n	8008928 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008906:	2300      	movs	r3, #0
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	2100      	movs	r1, #0
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff ff8f 	bl	8008834 <xTimerGenericCommand>
 8008916:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d104      	bne.n	8008928 <prvProcessExpiredTimer+0x60>
 800891e:	4907      	ldr	r1, [pc, #28]	; (800893c <prvProcessExpiredTimer+0x74>)
 8008920:	f44f 7002 	mov.w	r0, #520	; 0x208
 8008924:	f7f8 ffb8 	bl	8001898 <vAssertCalled>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	4798      	blx	r3
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200143d4 	.word	0x200143d4
 800893c:	080116e0 	.word	0x080116e0

08008940 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008948:	f107 0308 	add.w	r3, r7, #8
 800894c:	4618      	mov	r0, r3
 800894e:	f000 f857 	bl	8008a00 <prvGetNextExpireTime>
 8008952:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4619      	mov	r1, r3
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f803 	bl	8008964 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800895e:	f000 f8d5 	bl	8008b0c <prvProcessReceivedCommands>
	}
 8008962:	e7f1      	b.n	8008948 <prvTimerTask+0x8>

08008964 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800896e:	f7fe ffb7 	bl	80078e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008972:	f107 0308 	add.w	r3, r7, #8
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f866 	bl	8008a48 <prvSampleTimeNow>
 800897c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d130      	bne.n	80089e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <prvProcessTimerOrBlockTask+0x3c>
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	429a      	cmp	r2, r3
 8008990:	d806      	bhi.n	80089a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008992:	f7fe ffb3 	bl	80078fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff ff95 	bl	80088c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800899e:	e024      	b.n	80089ea <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d008      	beq.n	80089b8 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <prvProcessTimerOrBlockTask+0x90>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bf0c      	ite	eq
 80089b0:	2301      	moveq	r3, #1
 80089b2:	2300      	movne	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <prvProcessTimerOrBlockTask+0x94>)
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f7fe fc09 	bl	80071dc <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80089ca:	f7fe ff97 	bl	80078fc <xTaskResumeAll>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <prvProcessTimerOrBlockTask+0x98>)
 80089d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089e4:	e001      	b.n	80089ea <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80089e6:	f7fe ff89 	bl	80078fc <xTaskResumeAll>
		}
	}
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	200143d8 	.word	0x200143d8
 80089f8:	200143dc 	.word	0x200143dc
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a08:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <prvGetNextExpireTime+0x44>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bf0c      	ite	eq
 8008a12:	2301      	moveq	r3, #1
 8008a14:	2300      	movne	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d105      	bne.n	8008a32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a26:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <prvGetNextExpireTime+0x44>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	e001      	b.n	8008a36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a36:	68fb      	ldr	r3, [r7, #12]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	200143d4 	.word	0x200143d4

08008a48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a50:	f7fe ffec 	bl	8007a2c <xTaskGetTickCount>
 8008a54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a56:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <prvSampleTimeNow+0x3c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d205      	bcs.n	8008a6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a60:	f000 f8f4 	bl	8008c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e002      	b.n	8008a72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a72:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <prvSampleTimeNow+0x3c>)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a78:	68fb      	ldr	r3, [r7, #12]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200143e4 	.word	0x200143e4

08008a88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d812      	bhi.n	8008ad4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	1ad2      	subs	r2, r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d302      	bcc.n	8008ac2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008abc:	2301      	movs	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e01b      	b.n	8008afa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <prvInsertTimerInActiveList+0x7c>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f7fd faa5 	bl	800601c <vListInsert>
 8008ad2:	e012      	b.n	8008afa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d206      	bcs.n	8008aea <prvInsertTimerInActiveList+0x62>
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d302      	bcc.n	8008aea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	e007      	b.n	8008afa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aea:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <prvInsertTimerInActiveList+0x80>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fd fa91 	bl	800601c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008afa:	697b      	ldr	r3, [r7, #20]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	200143d8 	.word	0x200143d8
 8008b08:	200143d4 	.word	0x200143d4

08008b0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08c      	sub	sp, #48	; 0x30
 8008b10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b12:	e087      	b.n	8008c24 <prvProcessReceivedCommands+0x118>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	da13      	bge.n	8008b42 <prvProcessReceivedCommands+0x36>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	3304      	adds	r3, #4
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <prvProcessReceivedCommands+0x26>
 8008b28:	4946      	ldr	r1, [pc, #280]	; (8008c44 <prvProcessReceivedCommands+0x138>)
 8008b2a:	f240 20e7 	movw	r0, #743	; 0x2e7
 8008b2e:	f7f8 feb3 	bl	8001898 <vAssertCalled>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b38:	6850      	ldr	r0, [r2, #4]
 8008b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3c:	6892      	ldr	r2, [r2, #8]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	db6d      	blt.n	8008c24 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fd fa99 	bl	8006090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b5e:	1d3b      	adds	r3, r7, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff ff71 	bl	8008a48 <prvSampleTimeNow>
 8008b66:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d859      	bhi.n	8008c22 <prvProcessReceivedCommands+0x116>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <prvProcessReceivedCommands+0x68>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008b9d 	.word	0x08008b9d
 8008b80:	08008c25 	.word	0x08008c25
 8008b84:	08008bef 	.word	0x08008bef
 8008b88:	08008c1b 	.word	0x08008c1b
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008b9d 	.word	0x08008b9d
 8008b94:	08008c25 	.word	0x08008c25
 8008b98:	08008bef 	.word	0x08008bef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	18d1      	adds	r1, r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	6a38      	ldr	r0, [r7, #32]
 8008baa:	f7ff ff6d 	bl	8008a88 <prvInsertTimerInActiveList>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d037      	beq.n	8008c24 <prvProcessReceivedCommands+0x118>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	6a38      	ldr	r0, [r7, #32]
 8008bba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d12f      	bne.n	8008c24 <prvProcessReceivedCommands+0x118>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	441a      	add	r2, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6a38      	ldr	r0, [r7, #32]
 8008bd6:	f7ff fe2d 	bl	8008834 <xTimerGenericCommand>
 8008bda:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d120      	bne.n	8008c24 <prvProcessReceivedCommands+0x118>
 8008be2:	4918      	ldr	r1, [pc, #96]	; (8008c44 <prvProcessReceivedCommands+0x138>)
 8008be4:	f240 3021 	movw	r0, #801	; 0x321
 8008be8:	f7f8 fe56 	bl	8001898 <vAssertCalled>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8008bec:	e01a      	b.n	8008c24 <prvProcessReceivedCommands+0x118>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <prvProcessReceivedCommands+0xfa>
 8008bfc:	4911      	ldr	r1, [pc, #68]	; (8008c44 <prvProcessReceivedCommands+0x138>)
 8008bfe:	f44f 704e 	mov.w	r0, #824	; 0x338
 8008c02:	f7f8 fe49 	bl	8001898 <vAssertCalled>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	18d1      	adds	r1, r2, r3
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	6a38      	ldr	r0, [r7, #32]
 8008c14:	f7ff ff38 	bl	8008a88 <prvInsertTimerInActiveList>
					break;
 8008c18:	e004      	b.n	8008c24 <prvProcessReceivedCommands+0x118>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8008c1a:	6a38      	ldr	r0, [r7, #32]
 8008c1c:	f7fd fcfe 	bl	800661c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c20:	e000      	b.n	8008c24 <prvProcessReceivedCommands+0x118>

				default	:
					/* Don't expect to get here. */
					break;
 8008c22:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c24:	4b08      	ldr	r3, [pc, #32]	; (8008c48 <prvProcessReceivedCommands+0x13c>)
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7fe f888 	bl	8006d44 <xQueueGenericReceive>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f47f af6c 	bne.w	8008b14 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8008c3c:	bf00      	nop
 8008c3e:	3728      	adds	r7, #40	; 0x28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	080116e0 	.word	0x080116e0
 8008c48:	200143dc 	.word	0x200143dc

08008c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c52:	e03f      	b.n	8008cd4 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c54:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <prvSwitchTimerLists+0xb0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c5e:	4b27      	ldr	r3, [pc, #156]	; (8008cfc <prvSwitchTimerLists+0xb0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fd fa0f 	bl	8006090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	6938      	ldr	r0, [r7, #16]
 8008c78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d128      	bne.n	8008cd4 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	699a      	ldr	r2, [r3, #24]
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	4413      	add	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d90e      	bls.n	8008cb2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ca0:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <prvSwitchTimerLists+0xb0>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fd f9b6 	bl	800601c <vListInsert>
 8008cb0:	e010      	b.n	8008cd4 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6938      	ldr	r0, [r7, #16]
 8008cbe:	f7ff fdb9 	bl	8008834 <xTimerGenericCommand>
 8008cc2:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <prvSwitchTimerLists+0x88>
 8008cca:	490d      	ldr	r1, [pc, #52]	; (8008d00 <prvSwitchTimerLists+0xb4>)
 8008ccc:	f240 3092 	movw	r0, #914	; 0x392
 8008cd0:	f7f8 fde2 	bl	8001898 <vAssertCalled>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cd4:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <prvSwitchTimerLists+0xb0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1ba      	bne.n	8008c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cde:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <prvSwitchTimerLists+0xb0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ce4:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <prvSwitchTimerLists+0xb8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a04      	ldr	r2, [pc, #16]	; (8008cfc <prvSwitchTimerLists+0xb0>)
 8008cea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cec:	4a05      	ldr	r2, [pc, #20]	; (8008d04 <prvSwitchTimerLists+0xb8>)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6013      	str	r3, [r2, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200143d4 	.word	0x200143d4
 8008d00:	080116e0 	.word	0x080116e0
 8008d04:	200143d8 	.word	0x200143d8

08008d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d0c:	f7fd facc 	bl	80062a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d10:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11d      	bne.n	8008d54 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d18:	4811      	ldr	r0, [pc, #68]	; (8008d60 <prvCheckForValidListAndQueue+0x58>)
 8008d1a:	f7fd f92d 	bl	8005f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d1e:	4811      	ldr	r0, [pc, #68]	; (8008d64 <prvCheckForValidListAndQueue+0x5c>)
 8008d20:	f7fd f92a 	bl	8005f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d26:	4a0e      	ldr	r2, [pc, #56]	; (8008d60 <prvCheckForValidListAndQueue+0x58>)
 8008d28:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d2a:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <prvCheckForValidListAndQueue+0x64>)
 8008d2c:	4a0d      	ldr	r2, [pc, #52]	; (8008d64 <prvCheckForValidListAndQueue+0x5c>)
 8008d2e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008d30:	2200      	movs	r2, #0
 8008d32:	2110      	movs	r1, #16
 8008d34:	2005      	movs	r0, #5
 8008d36:	f7fd fde1 	bl	80068fc <xQueueGenericCreate>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4908      	ldr	r1, [pc, #32]	; (8008d70 <prvCheckForValidListAndQueue+0x68>)
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe fa1c 	bl	800718c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d54:	f7fd fad4 	bl	8006300 <vPortExitCritical>
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	200143dc 	.word	0x200143dc
 8008d60:	200143ac 	.word	0x200143ac
 8008d64:	200143c0 	.word	0x200143c0
 8008d68:	200143d4 	.word	0x200143d4
 8008d6c:	200143d8 	.word	0x200143d8
 8008d70:	080116fc 	.word	0x080116fc

08008d74 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <FreeRTOS_CLIRegisterCommand+0x1a>
 8008d86:	4915      	ldr	r1, [pc, #84]	; (8008ddc <FreeRTOS_CLIRegisterCommand+0x68>)
 8008d88:	2080      	movs	r0, #128	; 0x80
 8008d8a:	f7f8 fd85 	bl	8001898 <vAssertCalled>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8008d8e:	2008      	movs	r0, #8
 8008d90:	f7fd fb8e 	bl	80064b0 <pvPortMalloc>
 8008d94:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d103      	bne.n	8008da4 <FreeRTOS_CLIRegisterCommand+0x30>
 8008d9c:	490f      	ldr	r1, [pc, #60]	; (8008ddc <FreeRTOS_CLIRegisterCommand+0x68>)
 8008d9e:	2084      	movs	r0, #132	; 0x84
 8008da0:	f7f8 fd7a 	bl	8001898 <vAssertCalled>

	if( pxNewListItem != NULL )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d012      	beq.n	8008dd0 <FreeRTOS_CLIRegisterCommand+0x5c>
	{
		taskENTER_CRITICAL();
 8008daa:	f7fd fa7d 	bl	80062a8 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <FreeRTOS_CLIRegisterCommand+0x6c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8008dc2:	4a07      	ldr	r2, [pc, #28]	; (8008de0 <FreeRTOS_CLIRegisterCommand+0x6c>)
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8008dc8:	f7fd fa9a 	bl	8006300 <vPortExitCritical>

		xReturn = pdPASS;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	08011738 	.word	0x08011738
 8008de0:	2001001c 	.word	0x2001001c

08008de4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8008df4:	4b3a      	ldr	r3, [pc, #232]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d141      	bne.n	8008e80 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8008dfc:	4b38      	ldr	r3, [pc, #224]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008dfe:	4a39      	ldr	r2, [pc, #228]	; (8008ee4 <FreeRTOS_CLIProcessCommand+0x100>)
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	e037      	b.n	8008e74 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8008e04:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8008e0e:	69b8      	ldr	r0, [r7, #24]
 8008e10:	f7f7 f9fe 	bl	8000210 <strlen>
 8008e14:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d005      	beq.n	8008e2e <FreeRTOS_CLIProcessCommand+0x4a>
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	4413      	add	r3, r2
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d11d      	bne.n	8008e6a <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	69b9      	ldr	r1, [r7, #24]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f001 fca4 	bl	800a780 <strncmp>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d115      	bne.n	8008e6a <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8008e3e:	4b28      	ldr	r3, [pc, #160]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	db18      	blt.n	8008e7e <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f8e1 	bl	8009014 <prvGetNumberOfParameters>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d00c      	beq.n	8008e7e <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8008e68:	e009      	b.n	8008e7e <FreeRTOS_CLIProcessCommand+0x9a>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	4a1b      	ldr	r2, [pc, #108]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1c3      	bne.n	8008e04 <FreeRTOS_CLIProcessCommand+0x20>
 8008e7c:	e000      	b.n	8008e80 <FreeRTOS_CLIProcessCommand+0x9c>
						{
							xReturn = pdFALSE;
						}
					}

					break;
 8008e7e:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8008e80:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <FreeRTOS_CLIProcessCommand+0xbc>
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d108      	bne.n	8008ea0 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4915      	ldr	r1, [pc, #84]	; (8008ee8 <FreeRTOS_CLIProcessCommand+0x104>)
 8008e92:	68b8      	ldr	r0, [r7, #8]
 8008e94:	f001 fc89 	bl	800a7aa <strncpy>
		pxCommand = NULL;
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	e01a      	b.n	8008ed6 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00f      	beq.n	8008ec8 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	68b8      	ldr	r0, [r7, #8]
 8008eb6:	4798      	blx	r3
 8008eb8:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	e006      	b.n	8008ed6 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	4908      	ldr	r1, [pc, #32]	; (8008eec <FreeRTOS_CLIProcessCommand+0x108>)
 8008ecc:	68b8      	ldr	r0, [r7, #8]
 8008ece:	f001 fc6c 	bl	800a7aa <strncpy>
		xReturn = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	200145dc 	.word	0x200145dc
 8008ee4:	20010014 	.word	0x20010014
 8008ee8:	08011770 	.word	0x08011770
 8008eec:	080117c8 	.word	0x080117c8

08008ef0 <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	200143e8 	.word	0x200143e8

08008f04 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8008f1e:	e03b      	b.n	8008f98 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d007      	beq.n	8008f3e <FreeRTOS_CLIGetParameter+0x3a>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d1f4      	bne.n	8008f20 <FreeRTOS_CLIGetParameter+0x1c>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8008f36:	e002      	b.n	8008f3e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <FreeRTOS_CLIGetParameter+0x4a>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	d0f4      	beq.n	8008f38 <FreeRTOS_CLIGetParameter+0x34>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d025      	beq.n	8008fa2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d119      	bne.n	8008f98 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8008f68:	e007      	b.n	8008f7a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3301      	adds	r3, #1
 8008f78:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <FreeRTOS_CLIGetParameter+0x86>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d1ef      	bne.n	8008f6a <FreeRTOS_CLIGetParameter+0x66>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
				}

				break;
 8008f96:	e006      	b.n	8008fa6 <FreeRTOS_CLIGetParameter+0xa2>
UBaseType_t uxParametersFound = 0;
const char *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d3c2      	bcc.n	8008f26 <FreeRTOS_CLIGetParameter+0x22>
 8008fa0:	e002      	b.n	8008fa8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
			}
		}
		else
		{
			break;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <FreeRTOS_CLIGetParameter+0xa4>
				if( *pxParameterStringLength == 0 )
				{
					pcReturn = NULL;
				}

				break;
 8008fa6:	bf00      	nop
		{
			break;
		}
	}

	return pcReturn;
 8008fa8:	693b      	ldr	r3, [r7, #16]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop

08008fb8 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <prvHelpCommand+0x54>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <prvHelpCommand+0x54>)
 8008fce:	4a10      	ldr	r2, [pc, #64]	; (8009010 <prvHelpCommand+0x58>)
 8008fd0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8008fd2:	4b0e      	ldr	r3, [pc, #56]	; (800900c <prvHelpCommand+0x54>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f001 fbe3 	bl	800a7aa <strncpy>
	pxCommand = pxCommand->pxNext;
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <prvHelpCommand+0x54>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	4a08      	ldr	r2, [pc, #32]	; (800900c <prvHelpCommand+0x54>)
 8008fec:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 8008fee:	4b07      	ldr	r3, [pc, #28]	; (800900c <prvHelpCommand+0x54>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e001      	b.n	8009000 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009000:	697b      	ldr	r3, [r7, #20]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	200145e0 	.word	0x200145e0
 8009010:	20010014 	.word	0x20010014

08009014 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8009024:	e014      	b.n	8009050 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b20      	cmp	r3, #32
 800902c:	d10b      	bne.n	8009046 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d00a      	beq.n	800904a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8009034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	3301      	adds	r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	e001      	b.n	800904a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3301      	adds	r3, #1
 800904e:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d105      	bne.n	800906a <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800905e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 800906a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop

0800907c <HW_ConfigAll>:
  *         module.
  * @param  None
  * @retval None
  */
static void HW_ConfigAll(void)
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
   /*
    * Configure the Debug UART init structure:
    *   8 bits length + 1 stop bit, no parity
    *   Baudrate 115200 kbps
    */
    Debug_Config.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8009080:	4b16      	ldr	r3, [pc, #88]	; (80090dc <HW_ConfigAll+0x60>)
 8009082:	220c      	movs	r2, #12
 8009084:	611a      	str	r2, [r3, #16]
    Debug_Config.USART_BaudRate            = 115200;
 8009086:	4b15      	ldr	r3, [pc, #84]	; (80090dc <HW_ConfigAll+0x60>)
 8009088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800908c:	601a      	str	r2, [r3, #0]
    Debug_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800908e:	4b13      	ldr	r3, [pc, #76]	; (80090dc <HW_ConfigAll+0x60>)
 8009090:	2200      	movs	r2, #0
 8009092:	615a      	str	r2, [r3, #20]
    Debug_Config.USART_Parity              = USART_Parity_Even;
 8009094:	4b11      	ldr	r3, [pc, #68]	; (80090dc <HW_ConfigAll+0x60>)
 8009096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800909a:	60da      	str	r2, [r3, #12]
    Debug_Config.USART_StopBits            = USART_StopBits_1;
 800909c:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <HW_ConfigAll+0x60>)
 800909e:	2200      	movs	r2, #0
 80090a0:	609a      	str	r2, [r3, #8]
    Debug_Config.USART_WordLength          = USART_WordLength_9b;
 80090a2:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <HW_ConfigAll+0x60>)
 80090a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090a8:	605a      	str	r2, [r3, #4]
    /*
     * Configure the Digital Servo UART init structure:
     *   8 bits length + 1 stop bit, no parity
     *   Baudrate 57600 kbps
     */
     Dsv_Config.USART_Mode                = USART_Mode_Tx;
 80090aa:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <HW_ConfigAll+0x64>)
 80090ac:	2208      	movs	r2, #8
 80090ae:	611a      	str	r2, [r3, #16]
     Dsv_Config.USART_BaudRate            = 57600;
 80090b0:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <HW_ConfigAll+0x64>)
 80090b2:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80090b6:	601a      	str	r2, [r3, #0]
     Dsv_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <HW_ConfigAll+0x64>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	615a      	str	r2, [r3, #20]
     Dsv_Config.USART_Parity              = USART_Parity_No;
 80090be:	4b08      	ldr	r3, [pc, #32]	; (80090e0 <HW_ConfigAll+0x64>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	60da      	str	r2, [r3, #12]
     Dsv_Config.USART_StopBits            = USART_StopBits_1;
 80090c4:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <HW_ConfigAll+0x64>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
     Dsv_Config.USART_WordLength          = USART_WordLength_8b;
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <HW_ConfigAll+0x64>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	605a      	str	r2, [r3, #4]
}
 80090d0:	bf00      	nop
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	200145e4 	.word	0x200145e4
 80090e0:	200145fc 	.word	0x200145fc

080090e4 <HW_InitAll>:
  *         HW_ConfigAll() function.
  * @param  None
  * @retval None
  */
void HW_InitAll(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
    /* System Config */
    HW_CPU_CACHE_Enable();
 80090e8:	f001 f8e4 	bl	800a2b4 <HW_CPU_CACHE_Enable>
    HW_SystemClock_Config();
 80090ec:	f001 f88a 	bl	800a204 <HW_SystemClock_Config>

    /* HW Modules Configurations */
    HW_ConfigAll();
 80090f0:	f7ff ffc4 	bl	800907c <HW_ConfigAll>

    /* HW Modules Initializations */
    HW_PWR_Init();
 80090f4:	f000 ffa6 	bl	800a044 <HW_PWR_Init>
    HW_LED_Init();
 80090f8:	f000 fcd8 	bl	8009aac <HW_LED_Init>
    HW_ENC_Init();
 80090fc:	f000 fb3c 	bl	8009778 <HW_ENC_Init>
    HW_MOT_Init();
 8009100:	f000 fe94 	bl	8009e2c <HW_MOT_Init>
    HW_ASV_Init();
 8009104:	f000 f824 	bl	8009150 <HW_ASV_Init>
    HW_MON_Init();
 8009108:	f000 fdc4 	bl	8009c94 <HW_MON_Init>
    HW_HMI_Init();
 800910c:	f000 fc12 	bl	8009934 <HW_HMI_Init>
    HW_Digital_Input_Init();
 8009110:	f000 f9fa 	bl	8009508 <HW_Digital_Input_Init>

    HW_DBG_Init(&Debug_Config);
 8009114:	4805      	ldr	r0, [pc, #20]	; (800912c <HW_InitAll+0x48>)
 8009116:	f000 f941 	bl	800939c <HW_DBG_Init>
    HW_DSV_Init(&Dsv_Config);
 800911a:	4805      	ldr	r0, [pc, #20]	; (8009130 <HW_InitAll+0x4c>)
 800911c:	f000 face 	bl	80096bc <HW_DSV_Init>

    /* Set Interrupt group priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8009120:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009124:	f7fb fa74 	bl	8004610 <NVIC_PriorityGroupConfig>
}
 8009128:	bf00      	nop
 800912a:	bd80      	pop	{r7, pc}
 800912c:	200145e4 	.word	0x200145e4
 8009130:	200145fc 	.word	0x200145fc

08009134 <HW_PowerUp>:
  * @brief  Apply the power-up sequence
  * @param  None
  * @retval None
  */
void HW_PowerUp(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0

    //MOT_SLEEP_WRITE(MOT_SLEEP_OFF);
    //MOT_RESET_WRITE(MOT_RESET_ON);

    /* Enable powers */
    HW_PWR_Enable(HW_PWR_VP1);
 8009138:	2000      	movs	r0, #0
 800913a:	f000 ffc3 	bl	800a0c4 <HW_PWR_Enable>
    HW_PWR_Enable(HW_PWR_VP2);
 800913e:	2001      	movs	r0, #1
 8009140:	f000 ffc0 	bl	800a0c4 <HW_PWR_Enable>
    HW_PWR_Enable(HW_PWR_VP3);
 8009144:	2002      	movs	r0, #2
 8009146:	f000 ffbd 	bl	800a0c4 <HW_PWR_Enable>

    /* Enable H-bridges power */
  //  MOT_RESET_WRITE(MOT_RESET_OFF);

}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop

08009150 <HW_ASV_Init>:


#include "blueboard.h"

void HW_ASV_Init(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b090      	sub	sp, #64	; 0x40
 8009154:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    TIM_OCInitTypeDef TIM_OCStruct;

    /* Enable ASV GPIO Clocks */
    ASV1_PWM_GPIO_CLK_ENABLE();
 8009156:	2101      	movs	r1, #1
 8009158:	2004      	movs	r0, #4
 800915a:	f7fb fe81 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV2_PWM_GPIO_CLK_ENABLE();
 800915e:	2101      	movs	r1, #1
 8009160:	2004      	movs	r0, #4
 8009162:	f7fb fe7d 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV3_PWM_GPIO_CLK_ENABLE();
 8009166:	2101      	movs	r1, #1
 8009168:	2004      	movs	r0, #4
 800916a:	f7fb fe79 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV4_PWM_GPIO_CLK_ENABLE();
 800916e:	2101      	movs	r1, #1
 8009170:	2004      	movs	r0, #4
 8009172:	f7fb fe75 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV5_PWM_GPIO_CLK_ENABLE();
 8009176:	2101      	movs	r1, #1
 8009178:	2001      	movs	r0, #1
 800917a:	f7fb fe71 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV6_PWM_GPIO_CLK_ENABLE();
 800917e:	2101      	movs	r1, #1
 8009180:	2001      	movs	r0, #1
 8009182:	f7fb fe6d 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV7_PWM_GPIO_CLK_ENABLE();
 8009186:	2101      	movs	r1, #1
 8009188:	2001      	movs	r0, #1
 800918a:	f7fb fe69 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ASV8_PWM_GPIO_CLK_ENABLE();
 800918e:	2101      	movs	r1, #1
 8009190:	2001      	movs	r0, #1
 8009192:	f7fb fe65 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8009196:	2302      	movs	r3, #2
 8009198:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 800919c:	2300      	movs	r3, #0
 800919e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 80091a8:	2302      	movs	r3, #2
 80091aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    GPIO_InitStruct.GPIO_Pin = ASV1_PWM_PIN;
 80091ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV1_PWM_GPIO_PORT, ASV1_PWM_PIN_SOURCE, ASV1_PWM_AF);
 80091b4:	2203      	movs	r2, #3
 80091b6:	2109      	movs	r1, #9
 80091b8:	4874      	ldr	r0, [pc, #464]	; (800938c <HW_ASV_Init+0x23c>)
 80091ba:	f7fb fbe7 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ASV1_PWM_GPIO_PORT, &GPIO_InitStruct);
 80091be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091c2:	4619      	mov	r1, r3
 80091c4:	4871      	ldr	r0, [pc, #452]	; (800938c <HW_ASV_Init+0x23c>)
 80091c6:	f7fb fb39 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV2_PWM_PIN;
 80091ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV2_PWM_GPIO_PORT, ASV2_PWM_PIN_SOURCE, ASV2_PWM_AF);
 80091d0:	2203      	movs	r2, #3
 80091d2:	2108      	movs	r1, #8
 80091d4:	486d      	ldr	r0, [pc, #436]	; (800938c <HW_ASV_Init+0x23c>)
 80091d6:	f7fb fbd9 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ASV2_PWM_GPIO_PORT, &GPIO_InitStruct);
 80091da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091de:	4619      	mov	r1, r3
 80091e0:	486a      	ldr	r0, [pc, #424]	; (800938c <HW_ASV_Init+0x23c>)
 80091e2:	f7fb fb2b 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV3_PWM_PIN;
 80091ec:	2380      	movs	r3, #128	; 0x80
 80091ee:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV3_PWM_GPIO_PORT, ASV3_PWM_PIN_SOURCE, ASV3_PWM_AF);
    GPIO_Init(ASV3_PWM_GPIO_PORT, &GPIO_InitStruct);
 80091f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091f4:	4619      	mov	r1, r3
 80091f6:	4865      	ldr	r0, [pc, #404]	; (800938c <HW_ASV_Init+0x23c>)
 80091f8:	f7fb fb20 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV4_PWM_PIN;
 80091fc:	2340      	movs	r3, #64	; 0x40
 80091fe:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV4_PWM_GPIO_PORT, ASV4_PWM_PIN_SOURCE, ASV4_PWM_AF);
    GPIO_Init(ASV4_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009200:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009204:	4619      	mov	r1, r3
 8009206:	4861      	ldr	r0, [pc, #388]	; (800938c <HW_ASV_Init+0x23c>)
 8009208:	f7fb fb18 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 800920c:	2302      	movs	r3, #2
 800920e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV5_PWM_PIN;
 8009212:	2301      	movs	r3, #1
 8009214:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV5_PWM_GPIO_PORT, ASV5_PWM_PIN_SOURCE, ASV5_PWM_AF);
 8009216:	2202      	movs	r2, #2
 8009218:	2100      	movs	r1, #0
 800921a:	485d      	ldr	r0, [pc, #372]	; (8009390 <HW_ASV_Init+0x240>)
 800921c:	f7fb fbb6 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ASV5_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009220:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009224:	4619      	mov	r1, r3
 8009226:	485a      	ldr	r0, [pc, #360]	; (8009390 <HW_ASV_Init+0x240>)
 8009228:	f7fb fb08 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV6_PWM_PIN;
 800922c:	2302      	movs	r3, #2
 800922e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV6_PWM_GPIO_PORT, ASV6_PWM_PIN_SOURCE, ASV6_PWM_AF);
 8009230:	2202      	movs	r2, #2
 8009232:	2101      	movs	r1, #1
 8009234:	4856      	ldr	r0, [pc, #344]	; (8009390 <HW_ASV_Init+0x240>)
 8009236:	f7fb fba9 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ASV6_PWM_GPIO_PORT, &GPIO_InitStruct);
 800923a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800923e:	4619      	mov	r1, r3
 8009240:	4853      	ldr	r0, [pc, #332]	; (8009390 <HW_ASV_Init+0x240>)
 8009242:	f7fb fafb 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV7_PWM_PIN;
 8009246:	2304      	movs	r3, #4
 8009248:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV7_PWM_GPIO_PORT, ASV7_PWM_PIN_SOURCE, ASV7_PWM_AF);
 800924a:	2202      	movs	r2, #2
 800924c:	2102      	movs	r1, #2
 800924e:	4850      	ldr	r0, [pc, #320]	; (8009390 <HW_ASV_Init+0x240>)
 8009250:	f7fb fb9c 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ASV7_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009258:	4619      	mov	r1, r3
 800925a:	484d      	ldr	r0, [pc, #308]	; (8009390 <HW_ASV_Init+0x240>)
 800925c:	f7fb faee 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV8_PWM_PIN;
 8009260:	2308      	movs	r3, #8
 8009262:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV8_PWM_GPIO_PORT, ASV8_PWM_PIN_SOURCE, ASV8_PWM_AF);
 8009264:	2202      	movs	r2, #2
 8009266:	2103      	movs	r1, #3
 8009268:	4849      	ldr	r0, [pc, #292]	; (8009390 <HW_ASV_Init+0x240>)
 800926a:	f7fb fb8f 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ASV8_PWM_GPIO_PORT, &GPIO_InitStruct);
 800926e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009272:	4619      	mov	r1, r3
 8009274:	4846      	ldr	r0, [pc, #280]	; (8009390 <HW_ASV_Init+0x240>)
 8009276:	f7fb fae1 	bl	800483c <GPIO_Init>

    /* Enable Timers Clocks from RCC */
    ASV_1_TO_4_TIM_CLK_ENABLE();
 800927a:	2101      	movs	r1, #1
 800927c:	2002      	movs	r0, #2
 800927e:	f7fb fe2f 	bl	8004ee0 <RCC_APB2PeriphClockCmd>
    ASV_5_TO_8_TIM_CLK_ENABLE();
 8009282:	2101      	movs	r1, #1
 8009284:	2008      	movs	r0, #8
 8009286:	f7fb fe0b 	bl	8004ea0 <RCC_APB1PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 800928a:	2300      	movs	r3, #0
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 800928e:	2300      	movs	r3, #0
 8009290:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = ASV_TIMER_PRESCALER;
 8009292:	232f      	movs	r3, #47	; 0x2f
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = ASV_TIMER_PERIOD;
 8009296:	f649 433f 	movw	r3, #39999	; 0x9c3f
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(ASV_1_TO_4_TIM, &TIM_BaseStruct);
 80092a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092a4:	4619      	mov	r1, r3
 80092a6:	483b      	ldr	r0, [pc, #236]	; (8009394 <HW_ASV_Init+0x244>)
 80092a8:	f7fb ff26 	bl	80050f8 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(ASV_5_TO_8_TIM, &TIM_BaseStruct);
 80092ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092b0:	4619      	mov	r1, r3
 80092b2:	4839      	ldr	r0, [pc, #228]	; (8009398 <HW_ASV_Init+0x248>)
 80092b4:	f7fb ff20 	bl	80050f8 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(ASV_1_TO_4_TIM, ENABLE);
 80092b8:	2101      	movs	r1, #1
 80092ba:	4836      	ldr	r0, [pc, #216]	; (8009394 <HW_ASV_Init+0x244>)
 80092bc:	f7fc fa3e 	bl	800573c <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(ASV_5_TO_8_TIM, ENABLE);
 80092c0:	2101      	movs	r1, #1
 80092c2:	4835      	ldr	r0, [pc, #212]	; (8009398 <HW_ASV_Init+0x248>)
 80092c4:	f7fc fa3a 	bl	800573c <TIM_CtrlPWMOutputs>

    TIM_Cmd(ASV_1_TO_4_TIM, ENABLE);
 80092c8:	2101      	movs	r1, #1
 80092ca:	4832      	ldr	r0, [pc, #200]	; (8009394 <HW_ASV_Init+0x244>)
 80092cc:	f7fb ff8c 	bl	80051e8 <TIM_Cmd>
    TIM_Cmd(ASV_5_TO_8_TIM, ENABLE);
 80092d0:	2101      	movs	r1, #1
 80092d2:	4831      	ldr	r0, [pc, #196]	; (8009398 <HW_ASV_Init+0x248>)
 80092d4:	f7fb ff88 	bl	80051e8 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 80092d8:	1d3b      	adds	r3, r7, #4
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fc f980 	bl	80055e0 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 80092e0:	2360      	movs	r3, #96	; 0x60
 80092e2:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OCPolarity     = TIM_OCPolarity_Low;       /* Invert polarity since we have optocouplers */
 80092e4:	2302      	movs	r3, #2
 80092e6:	617b      	str	r3, [r7, #20]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 80092e8:	2301      	movs	r3, #1
 80092ea:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 80092ec:	2301      	movs	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 80092f0:	2300      	movs	r3, #0
 80092f2:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 80092f4:	1d3b      	adds	r3, r7, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4826      	ldr	r0, [pc, #152]	; (8009394 <HW_ASV_Init+0x244>)
 80092fa:	f7fb ff91 	bl	8005220 <TIM_OC1Init>
    TIM_OC2Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 80092fe:	1d3b      	adds	r3, r7, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4824      	ldr	r0, [pc, #144]	; (8009394 <HW_ASV_Init+0x244>)
 8009304:	f7fc f806 	bl	8005314 <TIM_OC2Init>
    TIM_OC3Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009308:	1d3b      	adds	r3, r7, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4821      	ldr	r0, [pc, #132]	; (8009394 <HW_ASV_Init+0x244>)
 800930e:	f7fc f883 	bl	8005418 <TIM_OC3Init>
    TIM_OC4Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009312:	1d3b      	adds	r3, r7, #4
 8009314:	4619      	mov	r1, r3
 8009316:	481f      	ldr	r0, [pc, #124]	; (8009394 <HW_ASV_Init+0x244>)
 8009318:	f7fc f8fe 	bl	8005518 <TIM_OC4Init>
    TIM_OC1Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	4619      	mov	r1, r3
 8009320:	481d      	ldr	r0, [pc, #116]	; (8009398 <HW_ASV_Init+0x248>)
 8009322:	f7fb ff7d 	bl	8005220 <TIM_OC1Init>
    TIM_OC2Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009326:	1d3b      	adds	r3, r7, #4
 8009328:	4619      	mov	r1, r3
 800932a:	481b      	ldr	r0, [pc, #108]	; (8009398 <HW_ASV_Init+0x248>)
 800932c:	f7fb fff2 	bl	8005314 <TIM_OC2Init>
    TIM_OC3Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	4619      	mov	r1, r3
 8009334:	4818      	ldr	r0, [pc, #96]	; (8009398 <HW_ASV_Init+0x248>)
 8009336:	f7fc f86f 	bl	8005418 <TIM_OC3Init>
    TIM_OC4Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 800933a:	1d3b      	adds	r3, r7, #4
 800933c:	4619      	mov	r1, r3
 800933e:	4816      	ldr	r0, [pc, #88]	; (8009398 <HW_ASV_Init+0x248>)
 8009340:	f7fc f8ea 	bl	8005518 <TIM_OC4Init>

    TIM_OC1PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009344:	2108      	movs	r1, #8
 8009346:	4813      	ldr	r0, [pc, #76]	; (8009394 <HW_ASV_Init+0x244>)
 8009348:	f7fc f988 	bl	800565c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 800934c:	2108      	movs	r1, #8
 800934e:	4811      	ldr	r0, [pc, #68]	; (8009394 <HW_ASV_Init+0x244>)
 8009350:	f7fc f9a0 	bl	8005694 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009354:	2108      	movs	r1, #8
 8009356:	480f      	ldr	r0, [pc, #60]	; (8009394 <HW_ASV_Init+0x244>)
 8009358:	f7fc f9b8 	bl	80056cc <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 800935c:	2108      	movs	r1, #8
 800935e:	480d      	ldr	r0, [pc, #52]	; (8009394 <HW_ASV_Init+0x244>)
 8009360:	f7fc f9d0 	bl	8005704 <TIM_OC4PreloadConfig>
    TIM_OC1PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8009364:	2108      	movs	r1, #8
 8009366:	480c      	ldr	r0, [pc, #48]	; (8009398 <HW_ASV_Init+0x248>)
 8009368:	f7fc f978 	bl	800565c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800936c:	2108      	movs	r1, #8
 800936e:	480a      	ldr	r0, [pc, #40]	; (8009398 <HW_ASV_Init+0x248>)
 8009370:	f7fc f990 	bl	8005694 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 8009374:	2108      	movs	r1, #8
 8009376:	4808      	ldr	r0, [pc, #32]	; (8009398 <HW_ASV_Init+0x248>)
 8009378:	f7fc f9a8 	bl	80056cc <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800937c:	2108      	movs	r1, #8
 800937e:	4806      	ldr	r0, [pc, #24]	; (8009398 <HW_ASV_Init+0x248>)
 8009380:	f7fc f9c0 	bl	8005704 <TIM_OC4PreloadConfig>

}
 8009384:	bf00      	nop
 8009386:	3740      	adds	r7, #64	; 0x40
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40020800 	.word	0x40020800
 8009390:	40020000 	.word	0x40020000
 8009394:	40010400 	.word	0x40010400
 8009398:	40000c00 	.word	0x40000c00

0800939c <HW_DBG_Init>:
  * @brief  Initialize the Debug UART
  * @param  None
  * @retval None
  */
void HW_DBG_Init(USART_InitTypeDef * USART_InitStruct)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable GPIOs Clock */
    DBG_TX_GPIO_CLK_ENABLE();
 80093a4:	2101      	movs	r1, #1
 80093a6:	2001      	movs	r0, #1
 80093a8:	f7fb fd5a 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    DBG_RX_GPIO_CLK_ENABLE();
 80093ac:	2101      	movs	r1, #1
 80093ae:	2001      	movs	r0, #1
 80093b0:	f7fb fd56 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    DBG_CTS_GPIO_CLK_ENABLE();
 80093b4:	2101      	movs	r1, #1
 80093b6:	2001      	movs	r0, #1
 80093b8:	f7fb fd52 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    DBG_RTS_GPIO_CLK_ENABLE();
 80093bc:	2101      	movs	r1, #1
 80093be:	2001      	movs	r0, #1
 80093c0:	f7fb fd4e 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Enable Debug USART clock */
    DBG_CLK_ENABLE();
 80093c4:	2101      	movs	r1, #1
 80093c6:	2010      	movs	r0, #16
 80093c8:	f7fb fd8a 	bl	8004ee0 <RCC_APB2PeriphClockCmd>

    /* Configure USART TX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_TX_PIN;
 80093cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80093d2:	2302      	movs	r3, #2
 80093d4:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 80093d6:	2300      	movs	r3, #0
 80093d8:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80093da:	2301      	movs	r3, #1
 80093dc:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DBG_TX_GPIO_PORT, &GPIO_InitStructure);
 80093de:	f107 0318 	add.w	r3, r7, #24
 80093e2:	4619      	mov	r1, r3
 80093e4:	4824      	ldr	r0, [pc, #144]	; (8009478 <HW_DBG_Init+0xdc>)
 80093e6:	f7fb fa29 	bl	800483c <GPIO_Init>

    /* Configure USART RX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RX_PIN;
 80093ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ee:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RX_GPIO_PORT, &GPIO_InitStructure);
 80093f0:	f107 0318 	add.w	r3, r7, #24
 80093f4:	4619      	mov	r1, r3
 80093f6:	4820      	ldr	r0, [pc, #128]	; (8009478 <HW_DBG_Init+0xdc>)
 80093f8:	f7fb fa20 	bl	800483c <GPIO_Init>

    /* Configure USART CTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_CTS_PIN;
 80093fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009400:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_CTS_GPIO_PORT, &GPIO_InitStructure);
 8009402:	f107 0318 	add.w	r3, r7, #24
 8009406:	4619      	mov	r1, r3
 8009408:	481b      	ldr	r0, [pc, #108]	; (8009478 <HW_DBG_Init+0xdc>)
 800940a:	f7fb fa17 	bl	800483c <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RTS_PIN;
 800940e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009412:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RTS_GPIO_PORT, &GPIO_InitStructure);
 8009414:	f107 0318 	add.w	r3, r7, #24
 8009418:	4619      	mov	r1, r3
 800941a:	4817      	ldr	r0, [pc, #92]	; (8009478 <HW_DBG_Init+0xdc>)
 800941c:	f7fb fa0e 	bl	800483c <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(DBG_TX_GPIO_PORT,  DBG_TX_PIN_SOURCE,  DBG_TX_AF);
 8009420:	2207      	movs	r2, #7
 8009422:	2109      	movs	r1, #9
 8009424:	4814      	ldr	r0, [pc, #80]	; (8009478 <HW_DBG_Init+0xdc>)
 8009426:	f7fb fab1 	bl	800498c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RX_GPIO_PORT,  DBG_RX_PIN_SOURCE,  DBG_RX_AF);
 800942a:	2207      	movs	r2, #7
 800942c:	210a      	movs	r1, #10
 800942e:	4812      	ldr	r0, [pc, #72]	; (8009478 <HW_DBG_Init+0xdc>)
 8009430:	f7fb faac 	bl	800498c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_CTS_GPIO_PORT, DBG_CTS_PIN_SOURCE, DBG_CTS_AF);
 8009434:	2207      	movs	r2, #7
 8009436:	210b      	movs	r1, #11
 8009438:	480f      	ldr	r0, [pc, #60]	; (8009478 <HW_DBG_Init+0xdc>)
 800943a:	f7fb faa7 	bl	800498c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RTS_GPIO_PORT, DBG_RTS_PIN_SOURCE, DBG_RTS_AF);
 800943e:	2207      	movs	r2, #7
 8009440:	210c      	movs	r1, #12
 8009442:	480d      	ldr	r0, [pc, #52]	; (8009478 <HW_DBG_Init+0xdc>)
 8009444:	f7fb faa2 	bl	800498c <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DBG_COM, USART_InitStruct);
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	480c      	ldr	r0, [pc, #48]	; (800947c <HW_DBG_Init+0xe0>)
 800944c:	f7fc fc46 	bl	8005cdc <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 8009450:	f107 0308 	add.w	r3, r7, #8
 8009454:	4618      	mov	r0, r3
 8009456:	f7fc fd21 	bl	8005e9c <USART_ClockStructInit>
    USART_ClockInit(DBG_COM, &USART_ClockInitStruct);
 800945a:	f107 0308 	add.w	r3, r7, #8
 800945e:	4619      	mov	r1, r3
 8009460:	4806      	ldr	r0, [pc, #24]	; (800947c <HW_DBG_Init+0xe0>)
 8009462:	f7fc fcf5 	bl	8005e50 <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DBG_COM, ENABLE);
 8009466:	2101      	movs	r1, #1
 8009468:	4804      	ldr	r0, [pc, #16]	; (800947c <HW_DBG_Init+0xe0>)
 800946a:	f7fc fd2d 	bl	8005ec8 <USART_Cmd>

}
 800946e:	bf00      	nop
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40020000 	.word	0x40020000
 800947c:	40011000 	.word	0x40011000

08009480 <HW_DBG_Put>:
  * @brief  Send a byte through debug UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DBG_Put(uint8_t ch)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DBG_COM, (uint16_t) ch);
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	b29b      	uxth	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	4807      	ldr	r0, [pc, #28]	; (80094b0 <HW_DBG_Put+0x30>)
 8009492:	f7fc fd35 	bl	8005f00 <USART_SendData>
      while(USART_GetFlagStatus(DBG_COM, USART_FLAG_TC) == RESET);
 8009496:	bf00      	nop
 8009498:	2140      	movs	r1, #64	; 0x40
 800949a:	4805      	ldr	r0, [pc, #20]	; (80094b0 <HW_DBG_Put+0x30>)
 800949c:	f7fc fd52 	bl	8005f44 <USART_GetFlagStatus>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f8      	beq.n	8009498 <HW_DBG_Put+0x18>
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40011000 	.word	0x40011000

080094b4 <HW_DBG_Puts>:
  * @brief  Send a string through debug UART and wait for end of transmission
  * @param  str: string to send
  * @retval None
  */
void HW_DBG_Puts(const char *str)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
    while (*str)
 80094bc:	e007      	b.n	80094ce <HW_DBG_Puts+0x1a>
    {
    	HW_DBG_Put(*str);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff ffdc 	bl	8009480 <HW_DBG_Put>
        str++;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3301      	adds	r3, #1
 80094cc:	607b      	str	r3, [r7, #4]
  * @param  str: string to send
  * @retval None
  */
void HW_DBG_Puts(const char *str)
{
    while (*str)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1f3      	bne.n	80094be <HW_DBG_Puts+0xa>
    {
    	HW_DBG_Put(*str);
        str++;
    }
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop

080094e0 <HW_DBG_Get>:
  * @brief  Receive a byte from debug UART
  * @param  None
  * @retval Received byte
  */
uint8_t HW_DBG_Get(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
     while (USART_GetFlagStatus(DBG_COM, USART_FLAG_RXNE) == RESET);
 80094e4:	bf00      	nop
 80094e6:	2120      	movs	r1, #32
 80094e8:	4806      	ldr	r0, [pc, #24]	; (8009504 <HW_DBG_Get+0x24>)
 80094ea:	f7fc fd2b 	bl	8005f44 <USART_GetFlagStatus>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0f8      	beq.n	80094e6 <HW_DBG_Get+0x6>
        return (uint8_t) USART_ReceiveData(DBG_COM);
 80094f4:	4803      	ldr	r0, [pc, #12]	; (8009504 <HW_DBG_Get+0x24>)
 80094f6:	f7fc fd15 	bl	8005f24 <USART_ReceiveData>
 80094fa:	4603      	mov	r3, r0
 80094fc:	b2db      	uxtb	r3, r3
}
 80094fe:	4618      	mov	r0, r3
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40011000 	.word	0x40011000

08009508 <HW_Digital_Input_Init>:
  * @brief  Initialize the digital inputs
  * @param  None
  * @retval None
  */
void HW_Digital_Input_Init(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable Port Clock */
	SW1_GPIO_CLK_ENABLE();
 800950e:	2101      	movs	r1, #1
 8009510:	2004      	movs	r0, #4
 8009512:	f7fb fca5 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
	SW2_GPIO_CLK_ENABLE();
 8009516:	2101      	movs	r1, #1
 8009518:	2004      	movs	r0, #4
 800951a:	f7fb fca1 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
	SW3_GPIO_CLK_ENABLE();
 800951e:	2101      	movs	r1, #1
 8009520:	2010      	movs	r0, #16
 8009522:	f7fb fc9d 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Configure switches as input */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 8009526:	2300      	movs	r3, #0
 8009528:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800952a:	2302      	movs	r3, #2
 800952c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 800952e:	2300      	movs	r3, #0
 8009530:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = SW1_PIN;
 8009532:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009536:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW1_GPIO_PORT, &GPIO_InitStructure);
 8009538:	463b      	mov	r3, r7
 800953a:	4619      	mov	r1, r3
 800953c:	485a      	ldr	r0, [pc, #360]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 800953e:	f7fb f97d 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW2_PIN;
 8009542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009546:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW2_GPIO_PORT, &GPIO_InitStructure);
 8009548:	463b      	mov	r3, r7
 800954a:	4619      	mov	r1, r3
 800954c:	4856      	ldr	r0, [pc, #344]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 800954e:	f7fb f975 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW3_PIN;
 8009552:	2302      	movs	r3, #2
 8009554:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW3_GPIO_PORT, &GPIO_InitStructure);
 8009556:	463b      	mov	r3, r7
 8009558:	4619      	mov	r1, r3
 800955a:	4854      	ldr	r0, [pc, #336]	; (80096ac <HW_Digital_Input_Init+0x1a4>)
 800955c:	f7fb f96e 	bl	800483c <GPIO_Init>

    /* Configure end stops as input */
    GPIO_InitStructure.GPIO_Pin = END1_PIN;
 8009560:	2301      	movs	r3, #1
 8009562:	603b      	str	r3, [r7, #0]
    GPIO_Init(END1_GPIO_PORT, &GPIO_InitStructure);
 8009564:	463b      	mov	r3, r7
 8009566:	4619      	mov	r1, r3
 8009568:	484f      	ldr	r0, [pc, #316]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 800956a:	f7fb f967 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END2_PIN;
 800956e:	2302      	movs	r3, #2
 8009570:	603b      	str	r3, [r7, #0]
    GPIO_Init(END2_GPIO_PORT, &GPIO_InitStructure);
 8009572:	463b      	mov	r3, r7
 8009574:	4619      	mov	r1, r3
 8009576:	484c      	ldr	r0, [pc, #304]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 8009578:	f7fb f960 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END3_PIN;
 800957c:	2304      	movs	r3, #4
 800957e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END3_GPIO_PORT, &GPIO_InitStructure);
 8009580:	463b      	mov	r3, r7
 8009582:	4619      	mov	r1, r3
 8009584:	484a      	ldr	r0, [pc, #296]	; (80096b0 <HW_Digital_Input_Init+0x1a8>)
 8009586:	f7fb f959 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END4_PIN;
 800958a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800958e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END4_GPIO_PORT, &GPIO_InitStructure);
 8009590:	463b      	mov	r3, r7
 8009592:	4619      	mov	r1, r3
 8009594:	4846      	ldr	r0, [pc, #280]	; (80096b0 <HW_Digital_Input_Init+0x1a8>)
 8009596:	f7fb f951 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END5_PIN;
 800959a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800959e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END5_GPIO_PORT, &GPIO_InitStructure);
 80095a0:	463b      	mov	r3, r7
 80095a2:	4619      	mov	r1, r3
 80095a4:	4843      	ldr	r0, [pc, #268]	; (80096b4 <HW_Digital_Input_Init+0x1ac>)
 80095a6:	f7fb f949 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 80095aa:	2301      	movs	r3, #1
 80095ac:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Pin = END6_PIN;
 80095ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b2:	603b      	str	r3, [r7, #0]
    GPIO_Init(END6_GPIO_PORT, &GPIO_InitStructure);
 80095b4:	463b      	mov	r3, r7
 80095b6:	4619      	mov	r1, r3
 80095b8:	483b      	ldr	r0, [pc, #236]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 80095ba:	f7fb f93f 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END7_PIN;
 80095be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095c2:	603b      	str	r3, [r7, #0]
    GPIO_Init(END7_GPIO_PORT, &GPIO_InitStructure);
 80095c4:	463b      	mov	r3, r7
 80095c6:	4619      	mov	r1, r3
 80095c8:	4837      	ldr	r0, [pc, #220]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 80095ca:	f7fb f937 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 80095ce:	2300      	movs	r3, #0
 80095d0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80095d2:	2302      	movs	r3, #2
 80095d4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = END8_PIN;
 80095d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095da:	603b      	str	r3, [r7, #0]
    GPIO_Init(END8_GPIO_PORT, &GPIO_InitStructure);
 80095dc:	463b      	mov	r3, r7
 80095de:	4619      	mov	r1, r3
 80095e0:	4831      	ldr	r0, [pc, #196]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 80095e2:	f7fb f92b 	bl	800483c <GPIO_Init>

    /* Configure end industrial sensors as input */
    GPIO_InitStructure.GPIO_Pin = IND1_PIN;
 80095e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ea:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND1_GPIO_PORT, &GPIO_InitStructure);
 80095ec:	463b      	mov	r3, r7
 80095ee:	4619      	mov	r1, r3
 80095f0:	4831      	ldr	r0, [pc, #196]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 80095f2:	f7fb f923 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND2_PIN;
 80095f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095fa:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND2_GPIO_PORT, &GPIO_InitStructure);
 80095fc:	463b      	mov	r3, r7
 80095fe:	4619      	mov	r1, r3
 8009600:	482d      	ldr	r0, [pc, #180]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009602:	f7fb f91b 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND3_PIN;
 8009606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800960a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND3_GPIO_PORT, &GPIO_InitStructure);
 800960c:	463b      	mov	r3, r7
 800960e:	4619      	mov	r1, r3
 8009610:	4829      	ldr	r0, [pc, #164]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009612:	f7fb f913 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND4_PIN;
 8009616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800961a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND4_GPIO_PORT, &GPIO_InitStructure);
 800961c:	463b      	mov	r3, r7
 800961e:	4619      	mov	r1, r3
 8009620:	4825      	ldr	r0, [pc, #148]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009622:	f7fb f90b 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND5_PIN;
 8009626:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800962a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND5_GPIO_PORT, &GPIO_InitStructure);
 800962c:	463b      	mov	r3, r7
 800962e:	4619      	mov	r1, r3
 8009630:	4821      	ldr	r0, [pc, #132]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009632:	f7fb f903 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND6_PIN;
 8009636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND6_GPIO_PORT, &GPIO_InitStructure);
 800963c:	463b      	mov	r3, r7
 800963e:	4619      	mov	r1, r3
 8009640:	481d      	ldr	r0, [pc, #116]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009642:	f7fb f8fb 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND7_PIN;
 8009646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800964a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND7_GPIO_PORT, &GPIO_InitStructure);
 800964c:	463b      	mov	r3, r7
 800964e:	4619      	mov	r1, r3
 8009650:	4819      	ldr	r0, [pc, #100]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009652:	f7fb f8f3 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND8_PIN;
 8009656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND8_GPIO_PORT, &GPIO_InitStructure);
 800965c:	463b      	mov	r3, r7
 800965e:	4619      	mov	r1, r3
 8009660:	4815      	ldr	r0, [pc, #84]	; (80096b8 <HW_Digital_Input_Init+0x1b0>)
 8009662:	f7fb f8eb 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND9_PIN;
 8009666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800966a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND9_GPIO_PORT, &GPIO_InitStructure);
 800966c:	463b      	mov	r3, r7
 800966e:	4619      	mov	r1, r3
 8009670:	480f      	ldr	r0, [pc, #60]	; (80096b0 <HW_Digital_Input_Init+0x1a8>)
 8009672:	f7fb f8e3 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND10_PIN;
 8009676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND10_GPIO_PORT, &GPIO_InitStructure);
 800967c:	463b      	mov	r3, r7
 800967e:	4619      	mov	r1, r3
 8009680:	480b      	ldr	r0, [pc, #44]	; (80096b0 <HW_Digital_Input_Init+0x1a8>)
 8009682:	f7fb f8db 	bl	800483c <GPIO_Init>

	GPIO_WriteBit((GPIO_TypeDef*) END6_GPIO_PORT, END6_PIN, Bit_SET);
 8009686:	2201      	movs	r2, #1
 8009688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800968c:	4806      	ldr	r0, [pc, #24]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 800968e:	f7fb f963 	bl	8004958 <GPIO_WriteBit>
	GPIO_WriteBit((GPIO_TypeDef*) END7_GPIO_PORT, END7_PIN, Bit_SET);
 8009692:	2201      	movs	r2, #1
 8009694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009698:	4803      	ldr	r0, [pc, #12]	; (80096a8 <HW_Digital_Input_Init+0x1a0>)
 800969a:	f7fb f95d 	bl	8004958 <GPIO_WriteBit>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	40020800 	.word	0x40020800
 80096ac:	40021000 	.word	0x40021000
 80096b0:	40020400 	.word	0x40020400
 80096b4:	40020000 	.word	0x40020000
 80096b8:	40020c00 	.word	0x40020c00

080096bc <HW_DSV_Init>:
  * @brief  Initialize the DSV UART
  * @param  None
  * @retval None
  */
void HW_DSV_Init(USART_InitTypeDef * USART_InitStruct)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable TXRX Clock */
    DSV_TXRX_GPIO_CLK_ENABLE();
 80096c4:	2101      	movs	r1, #1
 80096c6:	2002      	movs	r0, #2
 80096c8:	f7fb fbca 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Enable DSV USART clock */
    DSV_CLK_ENABLE();
 80096cc:	2101      	movs	r1, #1
 80096ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80096d2:	f7fb fbe5 	bl	8004ea0 <RCC_APB1PeriphClockCmd>

    /* Configure USART TXRX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DSV_TXRX_PIN;
 80096d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80096dc:	2302      	movs	r3, #2
 80096de:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 80096e0:	2300      	movs	r3, #0
 80096e2:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80096e4:	2301      	movs	r3, #1
 80096e6:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DSV_TXRX_GPIO_PORT, &GPIO_InitStructure);
 80096e8:	f107 0318 	add.w	r3, r7, #24
 80096ec:	4619      	mov	r1, r3
 80096ee:	4812      	ldr	r0, [pc, #72]	; (8009738 <HW_DSV_Init+0x7c>)
 80096f0:	f7fb f8a4 	bl	800483c <GPIO_Init>


    /* Connect Alternate functions */
    GPIO_PinAFConfig(DSV_TXRX_GPIO_PORT,  DSV_TXRX_PIN_SOURCE,  DSV_TXRX_AF);
 80096f4:	2207      	movs	r2, #7
 80096f6:	210a      	movs	r1, #10
 80096f8:	480f      	ldr	r0, [pc, #60]	; (8009738 <HW_DSV_Init+0x7c>)
 80096fa:	f7fb f947 	bl	800498c <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DSV_COM, USART_InitStruct);
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	480e      	ldr	r0, [pc, #56]	; (800973c <HW_DSV_Init+0x80>)
 8009702:	f7fc faeb 	bl	8005cdc <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 8009706:	f107 0308 	add.w	r3, r7, #8
 800970a:	4618      	mov	r0, r3
 800970c:	f7fc fbc6 	bl	8005e9c <USART_ClockStructInit>
    USART_ClockInit(DSV_COM, &USART_ClockInitStruct);
 8009710:	f107 0308 	add.w	r3, r7, #8
 8009714:	4619      	mov	r1, r3
 8009716:	4809      	ldr	r0, [pc, #36]	; (800973c <HW_DSV_Init+0x80>)
 8009718:	f7fc fb9a 	bl	8005e50 <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DSV_COM, ENABLE);
 800971c:	2101      	movs	r1, #1
 800971e:	4807      	ldr	r0, [pc, #28]	; (800973c <HW_DSV_Init+0x80>)
 8009720:	f7fc fbd2 	bl	8005ec8 <USART_Cmd>

	xl_320_init(XL_320_TX_ONLY);
 8009724:	2001      	movs	r0, #1
 8009726:	f000 fec3 	bl	800a4b0 <xl_320_init>
	xl_320_set_hw_send(HW_DSV_Put);
 800972a:	4805      	ldr	r0, [pc, #20]	; (8009740 <HW_DSV_Init+0x84>)
 800972c:	f000 fede 	bl	800a4ec <xl_320_set_hw_send>
}
 8009730:	bf00      	nop
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	40020400 	.word	0x40020400
 800973c:	40004800 	.word	0x40004800
 8009740:	08009745 	.word	0x08009745

08009744 <HW_DSV_Put>:
  * @brief  Send a byte through DSV UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DSV_Put(uint8_t ch)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DSV_COM, (uint8_t) ch);
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	b29b      	uxth	r3, r3
 8009752:	4619      	mov	r1, r3
 8009754:	4807      	ldr	r0, [pc, #28]	; (8009774 <HW_DSV_Put+0x30>)
 8009756:	f7fc fbd3 	bl	8005f00 <USART_SendData>
      while(USART_GetFlagStatus(DSV_COM, USART_FLAG_TC) == RESET);
 800975a:	bf00      	nop
 800975c:	2140      	movs	r1, #64	; 0x40
 800975e:	4805      	ldr	r0, [pc, #20]	; (8009774 <HW_DSV_Put+0x30>)
 8009760:	f7fc fbf0 	bl	8005f44 <USART_GetFlagStatus>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0f8      	beq.n	800975c <HW_DSV_Put+0x18>
}
 800976a:	bf00      	nop
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40004800 	.word	0x40004800

08009778 <HW_ENC_Init>:

static int32_t encoder1_Value, encoder2_Value;
static int16_t encoder1_Old, encoder2_Old;

void HW_ENC_Init(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Enable GPIO Clocks */
    ENC1_A_GPIO_CLK_ENABLE();
 800977e:	2101      	movs	r1, #1
 8009780:	2002      	movs	r0, #2
 8009782:	f7fb fb6d 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ENC1_B_GPIO_CLK_ENABLE();
 8009786:	2101      	movs	r1, #1
 8009788:	2002      	movs	r0, #2
 800978a:	f7fb fb69 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ENC2_A_GPIO_CLK_ENABLE();
 800978e:	2101      	movs	r1, #1
 8009790:	2002      	movs	r0, #2
 8009792:	f7fb fb65 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ENC2_B_GPIO_CLK_ENABLE();
 8009796:	2101      	movs	r1, #1
 8009798:	2002      	movs	r0, #2
 800979a:	f7fb fb61 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Configure GPIOs */
    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 800979e:	2302      	movs	r3, #2
 80097a0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 80097a2:	2300      	movs	r3, #0
 80097a4:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 80097aa:	2302      	movs	r3, #2
 80097ac:	717b      	strb	r3, [r7, #5]

    GPIO_InitStruct.GPIO_Pin = ENC1_A_PIN;
 80097ae:	2310      	movs	r3, #16
 80097b0:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_A_GPIO_PORT, ENC1_A_PIN_SOURCE, ENC1_A_AF);
 80097b2:	2202      	movs	r2, #2
 80097b4:	2104      	movs	r1, #4
 80097b6:	482c      	ldr	r0, [pc, #176]	; (8009868 <HW_ENC_Init+0xf0>)
 80097b8:	f7fb f8e8 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ENC1_A_GPIO_PORT, &GPIO_InitStruct);
 80097bc:	463b      	mov	r3, r7
 80097be:	4619      	mov	r1, r3
 80097c0:	4829      	ldr	r0, [pc, #164]	; (8009868 <HW_ENC_Init+0xf0>)
 80097c2:	f7fb f83b 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC1_B_PIN;
 80097c6:	2320      	movs	r3, #32
 80097c8:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_B_GPIO_PORT, ENC1_B_PIN_SOURCE, ENC1_B_AF);
 80097ca:	2202      	movs	r2, #2
 80097cc:	2105      	movs	r1, #5
 80097ce:	4826      	ldr	r0, [pc, #152]	; (8009868 <HW_ENC_Init+0xf0>)
 80097d0:	f7fb f8dc 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ENC1_B_GPIO_PORT, &GPIO_InitStruct);
 80097d4:	463b      	mov	r3, r7
 80097d6:	4619      	mov	r1, r3
 80097d8:	4823      	ldr	r0, [pc, #140]	; (8009868 <HW_ENC_Init+0xf0>)
 80097da:	f7fb f82f 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_A_PIN;
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_A_GPIO_PORT, ENC2_A_PIN_SOURCE, ENC2_A_AF);
 80097e2:	2202      	movs	r2, #2
 80097e4:	2106      	movs	r1, #6
 80097e6:	4820      	ldr	r0, [pc, #128]	; (8009868 <HW_ENC_Init+0xf0>)
 80097e8:	f7fb f8d0 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ENC2_A_GPIO_PORT, &GPIO_InitStruct);
 80097ec:	463b      	mov	r3, r7
 80097ee:	4619      	mov	r1, r3
 80097f0:	481d      	ldr	r0, [pc, #116]	; (8009868 <HW_ENC_Init+0xf0>)
 80097f2:	f7fb f823 	bl	800483c <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_B_PIN;
 80097f6:	2380      	movs	r3, #128	; 0x80
 80097f8:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_B_GPIO_PORT, ENC2_B_PIN_SOURCE, ENC2_B_AF);
 80097fa:	2202      	movs	r2, #2
 80097fc:	2107      	movs	r1, #7
 80097fe:	481a      	ldr	r0, [pc, #104]	; (8009868 <HW_ENC_Init+0xf0>)
 8009800:	f7fb f8c4 	bl	800498c <GPIO_PinAFConfig>
    GPIO_Init(ENC2_B_GPIO_PORT, &GPIO_InitStruct);
 8009804:	463b      	mov	r3, r7
 8009806:	4619      	mov	r1, r3
 8009808:	4817      	ldr	r0, [pc, #92]	; (8009868 <HW_ENC_Init+0xf0>)
 800980a:	f7fb f817 	bl	800483c <GPIO_Init>

    /* Enable Quadrature Encoder timer clocks */
    ENC1_TIM_CLK_ENABLE();
 800980e:	2101      	movs	r1, #1
 8009810:	2002      	movs	r0, #2
 8009812:	f7fb fb45 	bl	8004ea0 <RCC_APB1PeriphClockCmd>
    ENC2_TIM_CLK_ENABLE();
 8009816:	2101      	movs	r1, #1
 8009818:	2004      	movs	r0, #4
 800981a:	f7fb fb41 	bl	8004ea0 <RCC_APB1PeriphClockCmd>

    /* Configure Quadrature Encoder Timers */
    TIM_EncoderInterfaceConfig(ENC1_TIM,
 800981e:	2300      	movs	r3, #0
 8009820:	2200      	movs	r2, #0
 8009822:	2103      	movs	r1, #3
 8009824:	4811      	ldr	r0, [pc, #68]	; (800986c <HW_ENC_Init+0xf4>)
 8009826:	f7fb ffa5 	bl	8005774 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC1_TIM, 0xFFFFFFFF);
 800982a:	f04f 31ff 	mov.w	r1, #4294967295
 800982e:	480f      	ldr	r0, [pc, #60]	; (800986c <HW_ENC_Init+0xf4>)
 8009830:	f7fb fccc 	bl	80051cc <TIM_SetAutoreload>

    TIM_EncoderInterfaceConfig(ENC2_TIM,
 8009834:	2300      	movs	r3, #0
 8009836:	2200      	movs	r2, #0
 8009838:	2103      	movs	r1, #3
 800983a:	480d      	ldr	r0, [pc, #52]	; (8009870 <HW_ENC_Init+0xf8>)
 800983c:	f7fb ff9a 	bl	8005774 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC2_TIM, 0xFFFFFFFF);
 8009840:	f04f 31ff 	mov.w	r1, #4294967295
 8009844:	480a      	ldr	r0, [pc, #40]	; (8009870 <HW_ENC_Init+0xf8>)
 8009846:	f7fb fcc1 	bl	80051cc <TIM_SetAutoreload>

    /* Cleanup timers */
    HW_ENC_ResetChannels();
 800984a:	f000 f861 	bl	8009910 <HW_ENC_ResetChannels>

    /* Enable Quadrature Encoders */
    TIM_Cmd(ENC1_TIM, ENABLE);
 800984e:	2101      	movs	r1, #1
 8009850:	4806      	ldr	r0, [pc, #24]	; (800986c <HW_ENC_Init+0xf4>)
 8009852:	f7fb fcc9 	bl	80051e8 <TIM_Cmd>
    TIM_Cmd(ENC2_TIM, ENABLE);
 8009856:	2101      	movs	r1, #1
 8009858:	4805      	ldr	r0, [pc, #20]	; (8009870 <HW_ENC_Init+0xf8>)
 800985a:	f7fb fcc5 	bl	80051e8 <TIM_Cmd>

}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	40020400 	.word	0x40020400
 800986c:	40000400 	.word	0x40000400
 8009870:	40000800 	.word	0x40000800

08009874 <HW_ENC_GetChannel>:

int32_t HW_ENC_GetChannel(HW_ENC_ChannelTypeDef channel)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
	int16_t encoder, delta;
    switch(channel)
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <HW_ENC_GetChannel+0x16>
 8009884:	2b01      	cmp	r3, #1
 8009886:	d018      	beq.n	80098ba <HW_ENC_GetChannel+0x46>
 8009888:	e02f      	b.n	80098ea <HW_ENC_GetChannel+0x76>
    {
    case HW_ENC_CHANNEL1:
    	encoder = (int16_t)ENC1_TIM->CNT;
 800988a:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <HW_ENC_GetChannel+0x84>)
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	81fb      	strh	r3, [r7, #14]
    	delta = encoder - encoder1_Old;
 8009890:	89fa      	ldrh	r2, [r7, #14]
 8009892:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <HW_ENC_GetChannel+0x88>)
 8009894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009898:	b29b      	uxth	r3, r3
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	b29b      	uxth	r3, r3
 800989e:	81bb      	strh	r3, [r7, #12]
    	encoder1_Old = encoder;
 80098a0:	4a16      	ldr	r2, [pc, #88]	; (80098fc <HW_ENC_GetChannel+0x88>)
 80098a2:	89fb      	ldrh	r3, [r7, #14]
 80098a4:	8013      	strh	r3, [r2, #0]
    	encoder1_Value += (int32_t)delta;
 80098a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <HW_ENC_GetChannel+0x8c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4413      	add	r3, r2
 80098b0:	4a13      	ldr	r2, [pc, #76]	; (8009900 <HW_ENC_GetChannel+0x8c>)
 80098b2:	6013      	str	r3, [r2, #0]
        return  encoder1_Value;
 80098b4:	4b12      	ldr	r3, [pc, #72]	; (8009900 <HW_ENC_GetChannel+0x8c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	e018      	b.n	80098ec <HW_ENC_GetChannel+0x78>
        break;

    case HW_ENC_CHANNEL2:
    	encoder = (int16_t)ENC2_TIM->CNT;
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <HW_ENC_GetChannel+0x90>)
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	81fb      	strh	r3, [r7, #14]
    	delta = encoder - encoder2_Old;
 80098c0:	89fa      	ldrh	r2, [r7, #14]
 80098c2:	4b11      	ldr	r3, [pc, #68]	; (8009908 <HW_ENC_GetChannel+0x94>)
 80098c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	81bb      	strh	r3, [r7, #12]
    	encoder2_Old = encoder;
 80098d0:	4a0d      	ldr	r2, [pc, #52]	; (8009908 <HW_ENC_GetChannel+0x94>)
 80098d2:	89fb      	ldrh	r3, [r7, #14]
 80098d4:	8013      	strh	r3, [r2, #0]
    	encoder2_Value += (int32_t)delta;
 80098d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80098da:	4b0c      	ldr	r3, [pc, #48]	; (800990c <HW_ENC_GetChannel+0x98>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4413      	add	r3, r2
 80098e0:	4a0a      	ldr	r2, [pc, #40]	; (800990c <HW_ENC_GetChannel+0x98>)
 80098e2:	6013      	str	r3, [r2, #0]
        return  encoder2_Value;
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <HW_ENC_GetChannel+0x98>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	e000      	b.n	80098ec <HW_ENC_GetChannel+0x78>
        break;

    default:
        /* Error */
        return 0;
 80098ea:	2300      	movs	r3, #0
        break;
    }

}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	40000400 	.word	0x40000400
 80098fc:	2001461c 	.word	0x2001461c
 8009900:	20014614 	.word	0x20014614
 8009904:	40000800 	.word	0x40000800
 8009908:	2001461e 	.word	0x2001461e
 800990c:	20014618 	.word	0x20014618

08009910 <HW_ENC_ResetChannels>:

void HW_ENC_ResetChannels(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
    ENC1_TIM->CNT = 0x00000000 ;
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <HW_ENC_ResetChannels+0x1c>)
 8009916:	2200      	movs	r2, #0
 8009918:	625a      	str	r2, [r3, #36]	; 0x24
    ENC2_TIM->CNT = 0x00000000 ;
 800991a:	4b05      	ldr	r3, [pc, #20]	; (8009930 <HW_ENC_ResetChannels+0x20>)
 800991c:	2200      	movs	r2, #0
 800991e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009920:	bf00      	nop
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	40000400 	.word	0x40000400
 8009930:	40000800 	.word	0x40000800

08009934 <HW_HMI_Init>:
 */

#include "blueboard.h"

void HW_HMI_Init(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08c      	sub	sp, #48	; 0x30
 8009938:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef SPI_InitStruct;

    /* Enable GPIOs Clock */
    HMI_CSN_GPIO_CLK_ENABLE();
 800993a:	2101      	movs	r1, #1
 800993c:	2010      	movs	r0, #16
 800993e:	f7fb fa8f 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    HMI_SCK_GPIO_CLK_ENABLE();
 8009942:	2101      	movs	r1, #1
 8009944:	2010      	movs	r0, #16
 8009946:	f7fb fa8b 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    HMI_MOSI_GPIO_CLK_ENABLE();
 800994a:	2101      	movs	r1, #1
 800994c:	2010      	movs	r0, #16
 800994e:	f7fb fa87 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    HMI_MISO_GPIO_CLK_ENABLE();
 8009952:	2101      	movs	r1, #1
 8009954:	2010      	movs	r0, #16
 8009956:	f7fb fa83 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_IN_GPIO_CLK_ENABLE();
 800995a:	2101      	movs	r1, #1
 800995c:	2010      	movs	r0, #16
 800995e:	f7fb fa7f 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_OUT_GPIO_CLK_ENABLE();
 8009962:	2101      	movs	r1, #1
 8009964:	2004      	movs	r0, #4
 8009966:	f7fb fa7b 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Enable Control Interface SPI clock */
    HMI_CLK_ENABLE();
 800996a:	2101      	movs	r1, #1
 800996c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009970:	f7fb fab6 	bl	8004ee0 <RCC_APB2PeriphClockCmd>

    /* Configure HMI_CSN as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 8009974:	2310      	movs	r3, #16
 8009976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009978:	2300      	movs	r3, #0
 800997a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800997e:	2302      	movs	r3, #2
 8009980:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 8009984:	2303      	movs	r3, #3
 8009986:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800998a:	2300      	movs	r3, #0
 800998c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 8009990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009994:	4619      	mov	r1, r3
 8009996:	4842      	ldr	r0, [pc, #264]	; (8009aa0 <HW_HMI_Init+0x16c>)
 8009998:	f7fa ff50 	bl	800483c <GPIO_Init>

    /* Configure HMI_SCK as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_SCK_PIN;
 800999c:	2304      	movs	r3, #4
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80099a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099a4:	4619      	mov	r1, r3
 80099a6:	483e      	ldr	r0, [pc, #248]	; (8009aa0 <HW_HMI_Init+0x16c>)
 80099a8:	f7fa ff48 	bl	800483c <GPIO_Init>

    /* Configure HMI_MOSI as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MOSI_PIN;
 80099ac:	2340      	movs	r3, #64	; 0x40
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80099b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099b4:	4619      	mov	r1, r3
 80099b6:	483a      	ldr	r0, [pc, #232]	; (8009aa0 <HW_HMI_Init+0x16c>)
 80099b8:	f7fa ff40 	bl	800483c <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MISO_PIN;
 80099bc:	2320      	movs	r3, #32
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80099c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099c4:	4619      	mov	r1, r3
 80099c6:	4836      	ldr	r0, [pc, #216]	; (8009aa0 <HW_HMI_Init+0x16c>)
 80099c8:	f7fa ff38 	bl	800483c <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(HMI_SCK_GPIO_PORT,   HMI_SCK_PIN_SOURCE,   HMI_SCK_AF);
 80099cc:	2205      	movs	r2, #5
 80099ce:	2102      	movs	r1, #2
 80099d0:	4833      	ldr	r0, [pc, #204]	; (8009aa0 <HW_HMI_Init+0x16c>)
 80099d2:	f7fa ffdb 	bl	800498c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MOSI_GPIO_PORT,  HMI_MOSI_PIN_SOURCE,  HMI_MOSI_AF);
 80099d6:	2205      	movs	r2, #5
 80099d8:	2106      	movs	r1, #6
 80099da:	4831      	ldr	r0, [pc, #196]	; (8009aa0 <HW_HMI_Init+0x16c>)
 80099dc:	f7fa ffd6 	bl	800498c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MISO_GPIO_PORT,  HMI_MISO_PIN_SOURCE,  HMI_MISO_AF);
 80099e0:	2205      	movs	r2, #5
 80099e2:	2105      	movs	r1, #5
 80099e4:	482e      	ldr	r0, [pc, #184]	; (8009aa0 <HW_HMI_Init+0x16c>)
 80099e6:	f7fa ffd1 	bl	800498c <GPIO_PinAFConfig>

    /* Configure HMI_CSN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 80099ea:	2310      	movs	r3, #16
 80099ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80099ee:	2301      	movs	r3, #1
 80099f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 80099f4:	2303      	movs	r3, #3
 80099f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 8009a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a04:	4619      	mov	r1, r3
 8009a06:	4826      	ldr	r0, [pc, #152]	; (8009aa0 <HW_HMI_Init+0x16c>)
 8009a08:	f7fa ff18 	bl	800483c <GPIO_Init>

    /* Configure HMI_IRQ_IN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_IN_PIN;
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; /* "IN" for HMI, "OUT" for master (us) */
 8009a16:	2301      	movs	r3, #1
 8009a18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_IN_GPIO_PORT, &GPIO_InitStructure);
 8009a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a20:	4619      	mov	r1, r3
 8009a22:	481f      	ldr	r0, [pc, #124]	; (8009aa0 <HW_HMI_Init+0x16c>)
 8009a24:	f7fa ff0a 	bl	800483c <GPIO_Init>

    /* Configure HMI_IRQ_OUT as Digital Input */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_OUT_PIN;
 8009a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; /* "OUT" for HMI, "IN" for master (us) */
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_OUT_GPIO_PORT, &GPIO_InitStructure);
 8009a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4818      	ldr	r0, [pc, #96]	; (8009aa4 <HW_HMI_Init+0x170>)
 8009a42:	f7fa fefb 	bl	800483c <GPIO_Init>

    /* Default SPI Configuration */
    SPI_StructInit(&SPI_InitStruct);
 8009a46:	1d3b      	adds	r3, r7, #4
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fb faa3 	bl	8004f94 <SPI_StructInit>

    /* Configure custom fields */
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8009a4e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009a52:	60bb      	str	r3, [r7, #8]
    SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009a54:	2300      	movs	r3, #0
 8009a56:	607b      	str	r3, [r7, #4]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; /* TBC */
 8009a58:	2320      	movs	r3, #32
 8009a5a:	61fb      	str	r3, [r7, #28]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
 8009a5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8009a60:	60fb      	str	r3, [r7, #12]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8009a66:	2300      	movs	r3, #0
 8009a68:	613b      	str	r3, [r7, #16]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // Internal NSS mgmt and pull internal NSS high;
 8009a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009a6e:	61bb      	str	r3, [r7, #24]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8009a70:	2300      	movs	r3, #0
 8009a72:	623b      	str	r3, [r7, #32]

    /* Configure SPI module */
    SPI_Init(HMI_COM, &SPI_InitStruct);
 8009a74:	1d3b      	adds	r3, r7, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	480b      	ldr	r0, [pc, #44]	; (8009aa8 <HW_HMI_Init+0x174>)
 8009a7a:	f7fb fab1 	bl	8004fe0 <SPI_Init>
    SPI_SSOutputCmd(HMI_COM, ENABLE);
 8009a7e:	2101      	movs	r1, #1
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <HW_HMI_Init+0x174>)
 8009a82:	f7fb fb1d 	bl	80050c0 <SPI_SSOutputCmd>

    /* Enable SPI module */
    HMI_CSN_WRITE(HMI_FRAME_IDLE);
 8009a86:	2201      	movs	r2, #1
 8009a88:	2110      	movs	r1, #16
 8009a8a:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <HW_HMI_Init+0x16c>)
 8009a8c:	f7fa ff64 	bl	8004958 <GPIO_WriteBit>
    SPI_Cmd(HMI_COM, ENABLE);
 8009a90:	2101      	movs	r1, #1
 8009a92:	4805      	ldr	r0, [pc, #20]	; (8009aa8 <HW_HMI_Init+0x174>)
 8009a94:	f7fb faf8 	bl	8005088 <SPI_Cmd>

}
 8009a98:	bf00      	nop
 8009a9a:	3730      	adds	r7, #48	; 0x30
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	40020800 	.word	0x40020800
 8009aa8:	40013400 	.word	0x40013400

08009aac <HW_LED_Init>:
  * @brief  Configure LEDs GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_LED_Init(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    LEDR_GPIO_CLK_ENABLE();
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f7fb f9d3 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    LEDG_GPIO_CLK_ENABLE();
 8009aba:	2101      	movs	r1, #1
 8009abc:	2008      	movs	r0, #8
 8009abe:	f7fb f9cf 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    LEDB_GPIO_CLK_ENABLE();
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	2008      	movs	r0, #8
 8009ac6:	f7fb f9cb 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all LEDs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8009aca:	2301      	movs	r3, #1
 8009acc:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = LEDR_PIN;
 8009ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ade:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDR_GPIO_PORT, &GPIO_InitStructure);
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4812      	ldr	r0, [pc, #72]	; (8009b30 <HW_LED_Init+0x84>)
 8009ae6:	f7fa fea9 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDG_PIN;
 8009aea:	2304      	movs	r3, #4
 8009aec:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDG_GPIO_PORT, &GPIO_InitStructure);
 8009aee:	463b      	mov	r3, r7
 8009af0:	4619      	mov	r1, r3
 8009af2:	4810      	ldr	r0, [pc, #64]	; (8009b34 <HW_LED_Init+0x88>)
 8009af4:	f7fa fea2 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDB_PIN;
 8009af8:	2380      	movs	r3, #128	; 0x80
 8009afa:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDB_GPIO_PORT, &GPIO_InitStructure);
 8009afc:	463b      	mov	r3, r7
 8009afe:	4619      	mov	r1, r3
 8009b00:	480c      	ldr	r0, [pc, #48]	; (8009b34 <HW_LED_Init+0x88>)
 8009b02:	f7fa fe9b 	bl	800483c <GPIO_Init>

    /* Default state: LEDs OFF */
    LEDR_WRITE(LEDx_OFF);
 8009b06:	2201      	movs	r2, #1
 8009b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b0c:	4808      	ldr	r0, [pc, #32]	; (8009b30 <HW_LED_Init+0x84>)
 8009b0e:	f7fa ff23 	bl	8004958 <GPIO_WriteBit>
    LEDG_WRITE(LEDx_OFF);
 8009b12:	2201      	movs	r2, #1
 8009b14:	2104      	movs	r1, #4
 8009b16:	4807      	ldr	r0, [pc, #28]	; (8009b34 <HW_LED_Init+0x88>)
 8009b18:	f7fa ff1e 	bl	8004958 <GPIO_WriteBit>
    LEDB_WRITE(LEDx_OFF);
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	2180      	movs	r1, #128	; 0x80
 8009b20:	4804      	ldr	r0, [pc, #16]	; (8009b34 <HW_LED_Init+0x88>)
 8009b22:	f7fa ff19 	bl	8004958 <GPIO_WriteBit>
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	40020000 	.word	0x40020000
 8009b34:	40020c00 	.word	0x40020c00

08009b38 <HW_LED_SetColor>:
  * @brief  Setup a new RGB Led color
  * @param  color: Color to setup
  * @retval None
  */
void HW_LED_SetColor(HW_LED_ColorTypeDef color)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
    switch(color)
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	2b07      	cmp	r3, #7
 8009b48:	f200 808b 	bhi.w	8009c62 <HW_LED_SetColor+0x12a>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <HW_LED_SetColor+0x1c>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b75 	.word	0x08009b75
 8009b58:	08009b97 	.word	0x08009b97
 8009b5c:	08009bb9 	.word	0x08009bb9
 8009b60:	08009bdb 	.word	0x08009bdb
 8009b64:	08009bfd 	.word	0x08009bfd
 8009b68:	08009c63 	.word	0x08009c63
 8009b6c:	08009c1f 	.word	0x08009c1f
 8009b70:	08009c41 	.word	0x08009c41
    {
    case HW_LED_RED:
        LEDR_WRITE(LEDx_ON);
 8009b74:	2200      	movs	r2, #0
 8009b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b7a:	4844      	ldr	r0, [pc, #272]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009b7c:	f7fa feec 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8009b80:	2201      	movs	r2, #1
 8009b82:	2104      	movs	r1, #4
 8009b84:	4842      	ldr	r0, [pc, #264]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009b86:	f7fa fee7 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	2180      	movs	r1, #128	; 0x80
 8009b8e:	4840      	ldr	r0, [pc, #256]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009b90:	f7fa fee2 	bl	8004958 <GPIO_WriteBit>
        break;
 8009b94:	e076      	b.n	8009c84 <HW_LED_SetColor+0x14c>
    case HW_LED_GREEN:
        LEDR_WRITE(LEDx_OFF);
 8009b96:	2201      	movs	r2, #1
 8009b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b9c:	483b      	ldr	r0, [pc, #236]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009b9e:	f7fa fedb 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	483a      	ldr	r0, [pc, #232]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009ba8:	f7fa fed6 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8009bac:	2201      	movs	r2, #1
 8009bae:	2180      	movs	r1, #128	; 0x80
 8009bb0:	4837      	ldr	r0, [pc, #220]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009bb2:	f7fa fed1 	bl	8004958 <GPIO_WriteBit>
        break;
 8009bb6:	e065      	b.n	8009c84 <HW_LED_SetColor+0x14c>
    case HW_LED_BLUE:
        LEDR_WRITE(LEDx_OFF);
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bbe:	4833      	ldr	r0, [pc, #204]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009bc0:	f7fa feca 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	2104      	movs	r1, #4
 8009bc8:	4831      	ldr	r0, [pc, #196]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009bca:	f7fa fec5 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	482f      	ldr	r0, [pc, #188]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009bd4:	f7fa fec0 	bl	8004958 <GPIO_WriteBit>
        break;
 8009bd8:	e054      	b.n	8009c84 <HW_LED_SetColor+0x14c>
    case HW_LED_CYAN:
        LEDR_WRITE(LEDx_OFF);
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009be0:	482a      	ldr	r0, [pc, #168]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009be2:	f7fa feb9 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8009be6:	2200      	movs	r2, #0
 8009be8:	2104      	movs	r1, #4
 8009bea:	4829      	ldr	r0, [pc, #164]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009bec:	f7fa feb4 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2180      	movs	r1, #128	; 0x80
 8009bf4:	4826      	ldr	r0, [pc, #152]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009bf6:	f7fa feaf 	bl	8004958 <GPIO_WriteBit>
        break;
 8009bfa:	e043      	b.n	8009c84 <HW_LED_SetColor+0x14c>
    case HW_LED_YELLOW:
        LEDR_WRITE(LEDx_ON);
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c02:	4822      	ldr	r0, [pc, #136]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009c04:	f7fa fea8 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2104      	movs	r1, #4
 8009c0c:	4820      	ldr	r0, [pc, #128]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c0e:	f7fa fea3 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8009c12:	2201      	movs	r2, #1
 8009c14:	2180      	movs	r1, #128	; 0x80
 8009c16:	481e      	ldr	r0, [pc, #120]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c18:	f7fa fe9e 	bl	8004958 <GPIO_WriteBit>
        break;
 8009c1c:	e032      	b.n	8009c84 <HW_LED_SetColor+0x14c>
    case HW_LED_MAGENTA:
        LEDR_WRITE(LEDx_ON);
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c24:	4819      	ldr	r0, [pc, #100]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009c26:	f7fa fe97 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	2104      	movs	r1, #4
 8009c2e:	4818      	ldr	r0, [pc, #96]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c30:	f7fa fe92 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8009c34:	2200      	movs	r2, #0
 8009c36:	2180      	movs	r1, #128	; 0x80
 8009c38:	4815      	ldr	r0, [pc, #84]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c3a:	f7fa fe8d 	bl	8004958 <GPIO_WriteBit>
        break;
 8009c3e:	e021      	b.n	8009c84 <HW_LED_SetColor+0x14c>
    case HW_LED_WHITE:
        LEDR_WRITE(LEDx_ON);
 8009c40:	2200      	movs	r2, #0
 8009c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c46:	4811      	ldr	r0, [pc, #68]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009c48:	f7fa fe86 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_ON);
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2104      	movs	r1, #4
 8009c50:	480f      	ldr	r0, [pc, #60]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c52:	f7fa fe81 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_ON);
 8009c56:	2200      	movs	r2, #0
 8009c58:	2180      	movs	r1, #128	; 0x80
 8009c5a:	480d      	ldr	r0, [pc, #52]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c5c:	f7fa fe7c 	bl	8004958 <GPIO_WriteBit>
        break;
 8009c60:	e010      	b.n	8009c84 <HW_LED_SetColor+0x14c>

    default:
    case HW_LED_OFF:
        LEDR_WRITE(LEDx_OFF);
 8009c62:	2201      	movs	r2, #1
 8009c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c68:	4808      	ldr	r0, [pc, #32]	; (8009c8c <HW_LED_SetColor+0x154>)
 8009c6a:	f7fa fe75 	bl	8004958 <GPIO_WriteBit>
        LEDG_WRITE(LEDx_OFF);
 8009c6e:	2201      	movs	r2, #1
 8009c70:	2104      	movs	r1, #4
 8009c72:	4807      	ldr	r0, [pc, #28]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c74:	f7fa fe70 	bl	8004958 <GPIO_WriteBit>
        LEDB_WRITE(LEDx_OFF);
 8009c78:	2201      	movs	r2, #1
 8009c7a:	2180      	movs	r1, #128	; 0x80
 8009c7c:	4804      	ldr	r0, [pc, #16]	; (8009c90 <HW_LED_SetColor+0x158>)
 8009c7e:	f7fa fe6b 	bl	8004958 <GPIO_WriteBit>
        break;
 8009c82:	bf00      	nop

    }

}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40020000 	.word	0x40020000
 8009c90:	40020c00 	.word	0x40020c00

08009c94 <HW_MON_Init>:
 */

#include "blueboard.h"

void HW_MON_Init(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08c      	sub	sp, #48	; 0x30
 8009c98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    ADC_InitTypeDef  ADC_InitStructure;

    /* Enable ADC clock so that we can talk to it */
    MON_CLK_ENABLE();
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ca0:	f7fb f91e 	bl	8004ee0 <RCC_APB2PeriphClockCmd>

    /* Enable GPIO clocks */
    ADC_CEL1_GPIO_CLK_ENABLE();
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	2004      	movs	r0, #4
 8009ca8:	f7fb f8da 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_CEL2_GPIO_CLK_ENABLE();
 8009cac:	2101      	movs	r1, #1
 8009cae:	2004      	movs	r0, #4
 8009cb0:	f7fb f8d6 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_CEL3_GPIO_CLK_ENABLE();
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	2002      	movs	r0, #2
 8009cb8:	f7fb f8d2 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_CEL4_GPIO_CLK_ENABLE();
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	f7fb f8ce 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_IBAT_GPIO_CLK_ENABLE();
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	2004      	movs	r0, #4
 8009cc8:	f7fb f8ca 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_IP1_GPIO_CLK_ENABLE();
 8009ccc:	2101      	movs	r1, #1
 8009cce:	2004      	movs	r0, #4
 8009cd0:	f7fb f8c6 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_IP2_GPIO_CLK_ENABLE();
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	f7fb f8c2 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_IP3_GPIO_CLK_ENABLE();
 8009cdc:	2101      	movs	r1, #1
 8009cde:	2001      	movs	r0, #1
 8009ce0:	f7fb f8be 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT1_GPIO_CLK_ENABLE();
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f7fb f8ba 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    ADC_IMOT2_GPIO_CLK_ENABLE();
 8009cec:	2101      	movs	r1, #1
 8009cee:	2001      	movs	r0, #1
 8009cf0:	f7fb f8b6 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all Analog channels */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8009d06:	2302      	movs	r3, #2
 8009d08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    GPIO_InitStructure.GPIO_Pin = ADC_CEL1_PIN;
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL1_GPIO_PORT, &GPIO_InitStructure);
 8009d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d14:	4619      	mov	r1, r3
 8009d16:	4840      	ldr	r0, [pc, #256]	; (8009e18 <HW_MON_Init+0x184>)
 8009d18:	f7fa fd90 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL2_PIN;
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL2_GPIO_PORT, &GPIO_InitStructure);
 8009d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d24:	4619      	mov	r1, r3
 8009d26:	483c      	ldr	r0, [pc, #240]	; (8009e18 <HW_MON_Init+0x184>)
 8009d28:	f7fa fd88 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL3_PIN;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL3_GPIO_PORT, &GPIO_InitStructure);
 8009d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d34:	4619      	mov	r1, r3
 8009d36:	4839      	ldr	r0, [pc, #228]	; (8009e1c <HW_MON_Init+0x188>)
 8009d38:	f7fa fd80 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL4_PIN;
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL4_GPIO_PORT, &GPIO_InitStructure);
 8009d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d44:	4619      	mov	r1, r3
 8009d46:	4835      	ldr	r0, [pc, #212]	; (8009e1c <HW_MON_Init+0x188>)
 8009d48:	f7fa fd78 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IBAT_PIN;
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IBAT_GPIO_PORT, &GPIO_InitStructure);
 8009d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d54:	4619      	mov	r1, r3
 8009d56:	4830      	ldr	r0, [pc, #192]	; (8009e18 <HW_MON_Init+0x184>)
 8009d58:	f7fa fd70 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP1_PIN;
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP1_GPIO_PORT, &GPIO_InitStructure);
 8009d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d64:	4619      	mov	r1, r3
 8009d66:	482c      	ldr	r0, [pc, #176]	; (8009e18 <HW_MON_Init+0x184>)
 8009d68:	f7fa fd68 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP2_PIN;
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP2_GPIO_PORT, &GPIO_InitStructure);
 8009d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d74:	4619      	mov	r1, r3
 8009d76:	482a      	ldr	r0, [pc, #168]	; (8009e20 <HW_MON_Init+0x18c>)
 8009d78:	f7fa fd60 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP3_PIN;
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP3_GPIO_PORT, &GPIO_InitStructure);
 8009d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d84:	4619      	mov	r1, r3
 8009d86:	4826      	ldr	r0, [pc, #152]	; (8009e20 <HW_MON_Init+0x18c>)
 8009d88:	f7fa fd58 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT1_PIN;
 8009d8c:	2340      	movs	r3, #64	; 0x40
 8009d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT1_GPIO_PORT, &GPIO_InitStructure);
 8009d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d94:	4619      	mov	r1, r3
 8009d96:	4822      	ldr	r0, [pc, #136]	; (8009e20 <HW_MON_Init+0x18c>)
 8009d98:	f7fa fd50 	bl	800483c <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT2_PIN;
 8009d9c:	2380      	movs	r3, #128	; 0x80
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT2_GPIO_PORT, &GPIO_InitStructure);
 8009da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009da4:	4619      	mov	r1, r3
 8009da6:	481e      	ldr	r0, [pc, #120]	; (8009e20 <HW_MON_Init+0x18c>)
 8009da8:	f7fa fd48 	bl	800483c <GPIO_Init>

    /* IMPORTANT: populate default values before use */
    ADC_CommonStructInit(&ADC_CommonInitStruct);
 8009dac:	f107 0318 	add.w	r3, r7, #24
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fa fcdf 	bl	8004774 <ADC_CommonStructInit>
    ADC_StructInit(&ADC_InitStructure);
 8009db6:	463b      	mov	r3, r7
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fa fc93 	bl	80046e4 <ADC_StructInit>

    /* PCLK2 is the APB2 clock (96 MHz)
     * ADCCLK = PCLK2/8 = 96/8 = 12 MHz */
    ADC_CommonInitStruct.ADC_Prescaler          = ADC_Prescaler_Div8;
 8009dbe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009dc2:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStruct.ADC_Mode               = ADC_Mode_Independent;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	61bb      	str	r3, [r7, #24]
    ADC_CommonInitStruct.ADC_DMAAccessMode      = ADC_DMAAccessMode_Disabled;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStruct.ADC_TwoSamplingDelay   = ADC_TwoSamplingDelay_5Cycles;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInit(&ADC_CommonInitStruct);
 8009dd0:	f107 0318 	add.w	r3, r7, #24
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fa fca5 	bl	8004724 <ADC_CommonInit>

    /* Actual ADC Configuration */
    ADC_InitStructure.ADC_Resolution            = ADC_Resolution_12b;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	603b      	str	r3, [r7, #0]
    ADC_InitStructure.ADC_ScanConvMode          = DISABLE;//DISABLE;
 8009dde:	2300      	movs	r3, #0
 8009de0:	713b      	strb	r3, [r7, #4]
    ADC_InitStructure.ADC_ContinuousConvMode    = DISABLE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	717b      	strb	r3, [r7, #5]
    ADC_InitStructure.ADC_ExternalTrigConv      = ADC_Software_Start;//// //
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <HW_MON_Init+0x190>)
 8009de8:	60fb      	str	r3, [r7, #12]
    ADC_InitStructure.ADC_ExternalTrigConvEdge  = ADC_ExternalTrigConvEdge_None;//// //
 8009dea:	2300      	movs	r3, #0
 8009dec:	60bb      	str	r3, [r7, #8]
    ADC_InitStructure.ADC_DataAlign             = ADC_DataAlign_Right;
 8009dee:	2300      	movs	r3, #0
 8009df0:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_NbrOfConversion       = 1;//MONn;
 8009df2:	2301      	movs	r3, #1
 8009df4:	753b      	strb	r3, [r7, #20]
    ADC_Init(MON_ADC, &ADC_InitStructure);
 8009df6:	463b      	mov	r3, r7
 8009df8:	4619      	mov	r1, r3
 8009dfa:	480b      	ldr	r0, [pc, #44]	; (8009e28 <HW_MON_Init+0x194>)
 8009dfc:	f7fa fc1c 	bl	8004638 <ADC_Init>

    /* Enable Temperature and Internal VREF channels
     * VBAT Conversion cannot be activated at the same time (channel is shared)
     */
    ADC_TempSensorVrefintCmd(ENABLE);
 8009e00:	2001      	movs	r0, #1
 8009e02:	f7fa fce9 	bl	80047d8 <ADC_TempSensorVrefintCmd>

    /* Switch ADC ON */
    ADC_Cmd(MON_ADC, ENABLE);
 8009e06:	2101      	movs	r1, #1
 8009e08:	4807      	ldr	r0, [pc, #28]	; (8009e28 <HW_MON_Init+0x194>)
 8009e0a:	f7fa fcc9 	bl	80047a0 <ADC_Cmd>

}
 8009e0e:	bf00      	nop
 8009e10:	3730      	adds	r7, #48	; 0x30
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	40020800 	.word	0x40020800
 8009e1c:	40020400 	.word	0x40020400
 8009e20:	40020000 	.word	0x40020000
 8009e24:	0f000001 	.word	0x0f000001
 8009e28:	40012000 	.word	0x40012000

08009e2c <HW_MOT_Init>:

#include "blueboard.h"


void HW_MOT_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b090      	sub	sp, #64	; 0x40
 8009e30:	af00      	add	r7, sp, #0

  //  MOT_SLEEP_GPIO_CLK_ENABLE();
  //  MOT_RESET_GPIO_CLK_ENABLE();
  //  MOT_I1_GPIO_CLK_ENABLE();
  //  MOT_I0_GPIO_CLK_ENABLE();
    MOT1_IN1_GPIO_CLK_ENABLE();
 8009e32:	2101      	movs	r1, #1
 8009e34:	2010      	movs	r0, #16
 8009e36:	f7fb f813 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    MOT1_IN2_GPIO_CLK_ENABLE();
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	2010      	movs	r0, #16
 8009e3e:	f7fb f80f 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    MOT2_IN1_GPIO_CLK_ENABLE();
 8009e42:	2101      	movs	r1, #1
 8009e44:	2010      	movs	r0, #16
 8009e46:	f7fb f80b 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    MOT2_IN2_GPIO_CLK_ENABLE();
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	2010      	movs	r0, #16
 8009e4e:	f7fb f807 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
  //  MOT_FAULT_GPIO_CLK_ENABLE();

    /* Common configuration for all General-Purpose Outputs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8009e52:	2301      	movs	r3, #1
 8009e54:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 8009e64:	2302      	movs	r3, #2
 8009e66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    //    GPIO_Init(MOT_I1_GPIO_PORT, &GPIO_InitStructure);

    //    GPIO_InitStructure.GPIO_Pin = MOT_I0_PIN;
    //    GPIO_Init(MOT_I0_GPIO_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
 8009e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e6e:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
 8009e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e74:	4619      	mov	r1, r3
 8009e76:	483e      	ldr	r0, [pc, #248]	; (8009f70 <HW_MOT_Init+0x144>)
 8009e78:	f7fa fce0 	bl	800483c <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin = MOT2_IN2_PIN;
 8009e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e80:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT2_IN2_GPIO_PORT, &GPIO_InitStructure);
 8009e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e86:	4619      	mov	r1, r3
 8009e88:	4839      	ldr	r0, [pc, #228]	; (8009f70 <HW_MOT_Init+0x144>)
 8009e8a:	f7fa fcd7 	bl	800483c <GPIO_Init>

    /* Alternate function (PWM) */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    GPIO_InitStructure.GPIO_Pin = MOT1_IN1_PIN;
 8009e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT1_IN1_GPIO_PORT, &GPIO_InitStructure);
 8009e9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4833      	ldr	r0, [pc, #204]	; (8009f70 <HW_MOT_Init+0x144>)
 8009ea2:	f7fa fccb 	bl	800483c <GPIO_Init>
    GPIO_PinAFConfig(MOT1_IN1_GPIO_PORT, MOT1_IN1_PIN_SOURCE, MOT1_IN1_AF);
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	210d      	movs	r1, #13
 8009eaa:	4831      	ldr	r0, [pc, #196]	; (8009f70 <HW_MOT_Init+0x144>)
 8009eac:	f7fa fd6e 	bl	800498c <GPIO_PinAFConfig>

    //    GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
    //    GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
    //    GPIO_PinAFConfig(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN_SOURCE, MOT1_IN2_AF);

    GPIO_InitStructure.GPIO_Pin = MOT2_IN1_PIN;
 8009eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT2_IN1_GPIO_PORT, &GPIO_InitStructure);
 8009eb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009eba:	4619      	mov	r1, r3
 8009ebc:	482c      	ldr	r0, [pc, #176]	; (8009f70 <HW_MOT_Init+0x144>)
 8009ebe:	f7fa fcbd 	bl	800483c <GPIO_Init>
    GPIO_PinAFConfig(MOT2_IN1_GPIO_PORT, MOT2_IN1_PIN_SOURCE, MOT2_IN1_AF);
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	210b      	movs	r1, #11
 8009ec6:	482a      	ldr	r0, [pc, #168]	; (8009f70 <HW_MOT_Init+0x144>)
 8009ec8:	f7fa fd60 	bl	800498c <GPIO_PinAFConfig>
    //    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    //    GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    //    GPIO_Init(MOT_FAULT_GPIO_PORT, &GPIO_InitStructure);

    /* Enable Timers Clocks from RCC */
    MOT_TIM_CLK_ENABLE();
 8009ecc:	2101      	movs	r1, #1
 8009ece:	2001      	movs	r0, #1
 8009ed0:	f7fb f806 	bl	8004ee0 <RCC_APB2PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = MOT_TIMER_PRESCALER;
 8009edc:	2300      	movs	r3, #0
 8009ede:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = MOT_TIMER_PERIOD;
 8009ee0:	f640 739f 	movw	r3, #3999	; 0xf9f
 8009ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(MOT_TIM, &TIM_BaseStruct);
 8009eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4820      	ldr	r0, [pc, #128]	; (8009f74 <HW_MOT_Init+0x148>)
 8009ef2:	f7fb f901 	bl	80050f8 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(MOT_TIM, ENABLE);
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	481e      	ldr	r0, [pc, #120]	; (8009f74 <HW_MOT_Init+0x148>)
 8009efa:	f7fb fc1f 	bl	800573c <TIM_CtrlPWMOutputs>

    /* Enable Motor Timer */
    TIM_Cmd(MOT_TIM, ENABLE);
 8009efe:	2101      	movs	r1, #1
 8009f00:	481c      	ldr	r0, [pc, #112]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f02:	f7fb f971 	bl	80051e8 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 8009f06:	1d3b      	adds	r3, r7, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fb fb69 	bl	80055e0 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 8009f0e:	2360      	movs	r3, #96	; 0x60
 8009f10:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 8009f12:	2301      	movs	r3, #1
 8009f14:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 8009f16:	2301      	movs	r3, #1
 8009f18:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(MOT_TIM, &TIM_OCStruct);
 8009f1e:	1d3b      	adds	r3, r7, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4814      	ldr	r0, [pc, #80]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f24:	f7fb f97c 	bl	8005220 <TIM_OC1Init>
    TIM_OC2Init(MOT_TIM, &TIM_OCStruct);
 8009f28:	1d3b      	adds	r3, r7, #4
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4811      	ldr	r0, [pc, #68]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f2e:	f7fb f9f1 	bl	8005314 <TIM_OC2Init>
    TIM_OC3Init(MOT_TIM, &TIM_OCStruct);
 8009f32:	1d3b      	adds	r3, r7, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	480f      	ldr	r0, [pc, #60]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f38:	f7fb fa6e 	bl	8005418 <TIM_OC3Init>
    TIM_OC4Init(MOT_TIM, &TIM_OCStruct);
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	480c      	ldr	r0, [pc, #48]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f42:	f7fb fae9 	bl	8005518 <TIM_OC4Init>

    TIM_OC1PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8009f46:	2108      	movs	r1, #8
 8009f48:	480a      	ldr	r0, [pc, #40]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f4a:	f7fb fb87 	bl	800565c <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8009f4e:	2108      	movs	r1, #8
 8009f50:	4808      	ldr	r0, [pc, #32]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f52:	f7fb fb9f 	bl	8005694 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8009f56:	2108      	movs	r1, #8
 8009f58:	4806      	ldr	r0, [pc, #24]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f5a:	f7fb fbb7 	bl	80056cc <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 8009f5e:	2108      	movs	r1, #8
 8009f60:	4804      	ldr	r0, [pc, #16]	; (8009f74 <HW_MOT_Init+0x148>)
 8009f62:	f7fb fbcf 	bl	8005704 <TIM_OC4PreloadConfig>
    //    MOT_SLEEP_WRITE(MOT_SLEEP_ON);
    //    MOT_RESET_WRITE(MOT_RESET_ON);

    /* Setup default bridge current */
    //    HW_MOT_SetBridgeCurrent(HW_MOT_CURRENT_100);
}
 8009f66:	bf00      	nop
 8009f68:	3740      	adds	r7, #64	; 0x40
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40021000 	.word	0x40021000
 8009f74:	40010000 	.word	0x40010000

08009f78 <HW_MOT_SetMotorSpeed>:
  * @param  speed: Signed input value, the sign indicates backward or forward rotation
  * @param  fastDecay: If this param is enabled, fast decay mode is applied.
  * @retval None
  */
void HW_MOT_SetMotorSpeed(HW_MOT_ChannelTypeDef channel, int16_t speed, FunctionalState fastDecay)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
 8009f82:	460b      	mov	r3, r1
 8009f84:	80bb      	strh	r3, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	71bb      	strb	r3, [r7, #6]
    uint16_t xIN1_PWM;
    uint16_t xIN2_PWM;

    /* Clamp speed value to 100% */
    if(speed > MOT_TIMER_PERIOD) {
 8009f8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009f8e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8009f92:	db03      	blt.n	8009f9c <HW_MOT_SetMotorSpeed+0x24>
        speed = MOT_TIMER_PERIOD;
 8009f94:	f640 739f 	movw	r3, #3999	; 0xf9f
 8009f98:	80bb      	strh	r3, [r7, #4]
 8009f9a:	e007      	b.n	8009fac <HW_MOT_SetMotorSpeed+0x34>
    } else if(speed < -MOT_TIMER_PERIOD) {
 8009f9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009fa0:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8009fa4:	dc02      	bgt.n	8009fac <HW_MOT_SetMotorSpeed+0x34>
        speed = -MOT_TIMER_PERIOD;
 8009fa6:	f24f 0361 	movw	r3, #61537	; 0xf061
 8009faa:	80bb      	strh	r3, [r7, #4]
    }

    /* Forward rotation */
    if(speed > 0) {
 8009fac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd04      	ble.n	8009fbe <HW_MOT_SetMotorSpeed+0x46>
 //       if(fastDecay == ENABLE) {
            xIN1_PWM = (uint16_t) speed;
 8009fb4:	88bb      	ldrh	r3, [r7, #4]
 8009fb6:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = 0x0000;           /* Meaning constant 0 */
 8009fb8:	2300      	movs	r3, #0
 8009fba:	81bb      	strh	r3, [r7, #12]
 8009fbc:	e005      	b.n	8009fca <HW_MOT_SetMotorSpeed+0x52>
    } else {
//       if(fastDecay == ENABLE) {
//            xIN1_PWM = 0x0000;           /* Meaning constant 0 */
//            xIN2_PWM = (uint16_t) -speed;
//        } else {
            xIN1_PWM = (uint16_t) -speed;
 8009fbe:	88bb      	ldrh	r3, [r7, #4]
 8009fc0:	425b      	negs	r3, r3
 8009fc2:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = MOT_TIMER_PERIOD; /* Meaning constant 1 */
 8009fc4:	f640 739f 	movw	r3, #3999	; 0xf9f
 8009fc8:	81bb      	strh	r3, [r7, #12]
//        }

    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <HW_MOT_SetMotorSpeed+0x5e>
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d00e      	beq.n	8009ff2 <HW_MOT_SetMotorSpeed+0x7a>
            GPIO_WriteBit(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN, xIN2_PWM);
            break;

        default:
            /* Incorrect channel: do noting */
            break;
 8009fd4:	e01b      	b.n	800a00e <HW_MOT_SetMotorSpeed+0x96>
    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
        case HW_MOT_CHANNEL1:
            MOT1_IN1_SET_PULSE(xIN1_PWM);
 8009fd6:	89fb      	ldrh	r3, [r7, #14]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	480f      	ldr	r0, [pc, #60]	; (800a018 <HW_MOT_SetMotorSpeed+0xa0>)
 8009fdc:	f7fb fb30 	bl	8005640 <TIM_SetCompare3>
            //MOT1_IN2_SET_PULSE(xIN2_PWM);
            GPIO_WriteBit(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN, xIN2_PWM);
 8009fe0:	89bb      	ldrh	r3, [r7, #12]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fea:	480c      	ldr	r0, [pc, #48]	; (800a01c <HW_MOT_SetMotorSpeed+0xa4>)
 8009fec:	f7fa fcb4 	bl	8004958 <GPIO_WriteBit>
            break;
 8009ff0:	e00d      	b.n	800a00e <HW_MOT_SetMotorSpeed+0x96>

        case HW_MOT_CHANNEL2:
            MOT2_IN1_SET_PULSE(xIN1_PWM);
 8009ff2:	89fb      	ldrh	r3, [r7, #14]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4808      	ldr	r0, [pc, #32]	; (800a018 <HW_MOT_SetMotorSpeed+0xa0>)
 8009ff8:	f7fb fb14 	bl	8005624 <TIM_SetCompare2>
            //MOT2_IN2_SET_PULSE(xIN2_PWM);
            GPIO_WriteBit(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN, xIN2_PWM);
 8009ffc:	89bb      	ldrh	r3, [r7, #12]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	461a      	mov	r2, r3
 800a002:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a006:	4805      	ldr	r0, [pc, #20]	; (800a01c <HW_MOT_SetMotorSpeed+0xa4>)
 800a008:	f7fa fca6 	bl	8004958 <GPIO_WriteBit>
            break;
 800a00c:	bf00      	nop
        default:
            /* Incorrect channel: do noting */
            break;
    }

}
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	40010000 	.word	0x40010000
 800a01c:	40021000 	.word	0x40021000

0800a020 <HW_MOT_SetMotorSpeedFastDecay>:

/* Shorthand for fast-decay PWM */
void HW_MOT_SetMotorSpeedFastDecay(HW_MOT_ChannelTypeDef channel, int32_t speed)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
    HW_MOT_SetMotorSpeed(channel, (int16_t) speed, ENABLE);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	b219      	sxth	r1, r3
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	2201      	movs	r2, #1
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff ff9f 	bl	8009f78 <HW_MOT_SetMotorSpeed>
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop

0800a044 <HW_PWR_Init>:
  * @brief  Configure all VPn power GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_PWR_Init(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    VP1_EN_GPIO_CLK_ENABLE();
 800a04a:	2101      	movs	r1, #1
 800a04c:	2002      	movs	r0, #2
 800a04e:	f7fa ff07 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    VP2_EN_GPIO_CLK_ENABLE();
 800a052:	2101      	movs	r1, #1
 800a054:	2002      	movs	r0, #2
 800a056:	f7fa ff03 	bl	8004e60 <RCC_AHB1PeriphClockCmd>
    VP3_EN_GPIO_CLK_ENABLE();
 800a05a:	2101      	movs	r1, #1
 800a05c:	2010      	movs	r0, #16
 800a05e:	f7fa feff 	bl	8004e60 <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all VPn */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800a062:	2301      	movs	r3, #1
 800a064:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a066:	2300      	movs	r3, #0
 800a068:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 800a06e:	2300      	movs	r3, #0
 800a070:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = VP1_EN_PIN;
 800a072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a076:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP1_EN_GPIO_PORT, &GPIO_InitStructure);
 800a078:	463b      	mov	r3, r7
 800a07a:	4619      	mov	r1, r3
 800a07c:	480f      	ldr	r0, [pc, #60]	; (800a0bc <HW_PWR_Init+0x78>)
 800a07e:	f7fa fbdd 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP2_EN_PIN;
 800a082:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a086:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP2_EN_GPIO_PORT, &GPIO_InitStructure);
 800a088:	463b      	mov	r3, r7
 800a08a:	4619      	mov	r1, r3
 800a08c:	480b      	ldr	r0, [pc, #44]	; (800a0bc <HW_PWR_Init+0x78>)
 800a08e:	f7fa fbd5 	bl	800483c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP3_EN_PIN;
 800a092:	2301      	movs	r3, #1
 800a094:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP3_EN_GPIO_PORT, &GPIO_InitStructure);
 800a096:	463b      	mov	r3, r7
 800a098:	4619      	mov	r1, r3
 800a09a:	4809      	ldr	r0, [pc, #36]	; (800a0c0 <HW_PWR_Init+0x7c>)
 800a09c:	f7fa fbce 	bl	800483c <GPIO_Init>

    /* Default state: Modules OFF */
    HW_PWR_Disable(HW_PWR_VP1);
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f000 f829 	bl	800a0f8 <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP2);
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	f000 f826 	bl	800a0f8 <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP3);
 800a0ac:	2002      	movs	r0, #2
 800a0ae:	f000 f823 	bl	800a0f8 <HW_PWR_Disable>

}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	40020400 	.word	0x40020400
 800a0c0:	40021000 	.word	0x40021000

0800a0c4 <HW_PWR_Enable>:
  * @brief  Enable a VPx power-supply
  * @param  power VPx channel to enable
  * @retval None
  */
void HW_PWR_Enable(HW_PWR_TypeDef power)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_ON);
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	4a07      	ldr	r2, [pc, #28]	; (800a0f0 <HW_PWR_Enable+0x2c>)
 800a0d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	4a06      	ldr	r2, [pc, #24]	; (800a0f4 <HW_PWR_Enable+0x30>)
 800a0da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f7fa fc39 	bl	8004958 <GPIO_WriteBit>
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20010020 	.word	0x20010020
 800a0f4:	08011928 	.word	0x08011928

0800a0f8 <HW_PWR_Disable>:
  * @brief  Disable a VPx power-supply
  * @param  power VPx channel to disable
  * @retval None
  */
void HW_PWR_Disable(HW_PWR_TypeDef power)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_OFF);
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	4a07      	ldr	r2, [pc, #28]	; (800a124 <HW_PWR_Disable+0x2c>)
 800a106:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	4a06      	ldr	r2, [pc, #24]	; (800a128 <HW_PWR_Disable+0x30>)
 800a10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a112:	2201      	movs	r2, #1
 800a114:	4619      	mov	r1, r3
 800a116:	f7fa fc1f 	bl	8004958 <GPIO_WriteBit>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20010020 	.word	0x20010020
 800a128:	08011928 	.word	0x08011928

0800a12c <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a130:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800a134:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     // invalidate I-Cache
 800a138:	4b09      	ldr	r3, [pc, #36]	; (800a160 <SCB_EnableICache+0x34>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  // enable I-Cache
 800a140:	4a07      	ldr	r2, [pc, #28]	; (800a160 <SCB_EnableICache+0x34>)
 800a142:	4b07      	ldr	r3, [pc, #28]	; (800a160 <SCB_EnableICache+0x34>)
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a14a:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a14c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800a150:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800a154:	bf00      	nop
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	e000ed00 	.word	0xe000ed00

0800a164 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800a164:	b480      	push	{r7}
 800a166:	b089      	sub	sp, #36	; 0x24
 800a168:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    SCB->CSSELR = (0UL << 1) | 0UL;         // Level 1 data cache
 800a16a:	4b25      	ldr	r3, [pc, #148]	; (800a200 <SCB_EnableDCache+0x9c>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ccsidr  = SCB->CCSIDR;
 800a172:	4b23      	ldr	r3, [pc, #140]	; (800a200 <SCB_EnableDCache+0x9c>)
 800a174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a178:	617b      	str	r3, [r7, #20]
    sets    = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	0b5b      	lsrs	r3, r3, #13
 800a17e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a182:	61fb      	str	r3, [r7, #28]
    sshift  = (uint32_t)(CCSIDR_LSSHIFT(ccsidr) + 4UL);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	3304      	adds	r3, #4
 800a18c:	613b      	str	r3, [r7, #16]
    ways    = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	08db      	lsrs	r3, r3, #3
 800a192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a196:	60fb      	str	r3, [r7, #12]
    wshift  = (uint32_t)((uint32_t)__CLZ(ways) & 0x1FUL);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	fab3 f383 	clz	r3, r3
 800a19e:	f003 031f 	and.w	r3, r3, #31
 800a1a2:	60bb      	str	r3, [r7, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a1a4:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                   // invalidate D-Cache
         uint32_t tmpways = ways;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	61bb      	str	r3, [r7, #24]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	409a      	lsls	r2, r3
 800a1b2:	69f9      	ldr	r1, [r7, #28]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	607b      	str	r3, [r7, #4]
              SCB->DCISW = sw;
 800a1be:	4a10      	ldr	r2, [pc, #64]	; (800a200 <SCB_EnableDCache+0x9c>)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	1e5a      	subs	r2, r3, #1
 800a1ca:	61ba      	str	r2, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1ed      	bne.n	800a1ac <SCB_EnableDCache+0x48>
        } while(sets--);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	1e5a      	subs	r2, r3, #1
 800a1d4:	61fa      	str	r2, [r7, #28]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e6      	bne.n	800a1a8 <SCB_EnableDCache+0x44>
 800a1da:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;   // enable D-Cache
 800a1de:	4a08      	ldr	r2, [pc, #32]	; (800a200 <SCB_EnableDCache+0x9c>)
 800a1e0:	4b07      	ldr	r3, [pc, #28]	; (800a200 <SCB_EnableDCache+0x9c>)
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1e8:	6153      	str	r3, [r2, #20]
 800a1ea:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800a1ee:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800a1f2:	bf00      	nop
 800a1f4:	3724      	adds	r7, #36	; 0x24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	e000ed00 	.word	0xe000ed00

0800a204 <HW_SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void HW_SystemClock_Config(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af02      	add	r7, sp, #8
  RCC_HSEConfig(RCC_HSE_ON);
 800a20a:	2001      	movs	r0, #1
 800a20c:	f7fa fc72 	bl	8004af4 <RCC_HSEConfig>

  if ( RCC_WaitForHSEStartUp() != SUCCESS )
 800a210:	f7fa fc84 	bl	8004b1c <RCC_WaitForHSEStartUp>
 800a214:	4603      	mov	r3, r0
 800a216:	2b01      	cmp	r3, #1
 800a218:	d000      	beq.n	800a21c <HW_SystemClock_Config+0x18>
  {
    while(1);
 800a21a:	e7fe      	b.n	800a21a <HW_SystemClock_Config+0x16>
  }

  RCC_PLLConfig(RCC_PLLSource_HSE, 8, 384, 2, 8);
 800a21c:	2308      	movs	r3, #8
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	2302      	movs	r3, #2
 800a222:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a226:	2108      	movs	r1, #8
 800a228:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a22c:	f7fa fc9e 	bl	8004b6c <RCC_PLLConfig>
  RCC_PLLCmd(ENABLE);
 800a230:	2001      	movs	r0, #1
 800a232:	f7fa fcdd 	bl	8004bf0 <RCC_PLLCmd>

  while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 800a236:	bf00      	nop
 800a238:	2039      	movs	r0, #57	; 0x39
 800a23a:	f7fa fe71 	bl	8004f20 <RCC_GetFlagStatus>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0f9      	beq.n	800a238 <HW_SystemClock_Config+0x34>

  /* Activate the OverDrive to reach the 196 MHz Frequency */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 800a244:	2101      	movs	r1, #1
 800a246:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a24a:	f7fa fe29 	bl	8004ea0 <RCC_APB1PeriphClockCmd>

  PWR_OverDriveCmd( ENABLE );
 800a24e:	2001      	movs	r0, #1
 800a250:	f7fa fbe6 	bl	8004a20 <PWR_OverDriveCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODRDY ) == RESET );
 800a254:	bf00      	nop
 800a256:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a25a:	f7fa fc1d 	bl	8004a98 <PWR_GetFlagStatus>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0f8      	beq.n	800a256 <HW_SystemClock_Config+0x52>

  while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 800a264:	bf00      	nop
 800a266:	2031      	movs	r0, #49	; 0x31
 800a268:	f7fa fe5a 	bl	8004f20 <RCC_GetFlagStatus>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f9      	beq.n	800a266 <HW_SystemClock_Config+0x62>

  PWR_OverDriveSWCmd(ENABLE);
 800a272:	2001      	movs	r0, #1
 800a274:	f7fa fbf2 	bl	8004a5c <PWR_OverDriveSWCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODSWRDY ) == RESET );
 800a278:	bf00      	nop
 800a27a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a27e:	f7fa fc0b 	bl	8004a98 <PWR_GetFlagStatus>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f8      	beq.n	800a27a <HW_SystemClock_Config+0x76>

  FLASH_SetLatency(FLASH_Latency_7);
 800a288:	2007      	movs	r0, #7
 800a28a:	f7fa fac3 	bl	8004814 <FLASH_SetLatency>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800a28e:	2002      	movs	r0, #2
 800a290:	f7fa fccc 	bl	8004c2c <RCC_SYSCLKConfig>

  RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800a294:	2000      	movs	r0, #0
 800a296:	f7fa fce5 	bl	8004c64 <RCC_HCLKConfig>
  RCC_PCLK1Config(RCC_HCLK_Div4);
 800a29a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800a29e:	f7fa fcfd 	bl	8004c9c <RCC_PCLK1Config>
  RCC_PCLK2Config(RCC_HCLK_Div4);
 800a2a2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800a2a6:	f7fa fd15 	bl	8004cd4 <RCC_PCLK2Config>

  SystemCoreClockUpdate();
 800a2aa:	f000 f875 	bl	800a398 <SystemCoreClockUpdate>
}
 800a2ae:	bf00      	nop
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <HW_CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
void HW_CPU_CACHE_Enable(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
  /* Enable branch prediction */
  SCB->CCR |= (1 <<18);
 800a2b8:	4a06      	ldr	r2, [pc, #24]	; (800a2d4 <HW_CPU_CACHE_Enable+0x20>)
 800a2ba:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <HW_CPU_CACHE_Enable+0x20>)
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2c2:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a2c4:	f3bf 8f4f 	dsb	sy
  __DSB();

  /* Enable I-Cache */
  SCB_EnableICache();
 800a2c8:	f7ff ff30 	bl	800a12c <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 800a2cc:	f7ff ff4a 	bl	800a164 <SCB_EnableDCache>
}
 800a2d0:	bf00      	nop
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	e000ed00 	.word	0xe000ed00

0800a2d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a2d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a2dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a2de:	e003      	b.n	800a2e8 <LoopCopyDataInit>

0800a2e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a2e0:	4b0c      	ldr	r3, [pc, #48]	; (800a314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a2e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a2e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a2e6:	3104      	adds	r1, #4

0800a2e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a2e8:	480b      	ldr	r0, [pc, #44]	; (800a318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a2ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a2ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a2f0:	d3f6      	bcc.n	800a2e0 <CopyDataInit>
  ldr  r2, =_sbss
 800a2f2:	4a0b      	ldr	r2, [pc, #44]	; (800a320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a2f4:	e002      	b.n	800a2fc <LoopFillZerobss>

0800a2f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a2f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a2f8:	f842 3b04 	str.w	r3, [r2], #4

0800a2fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a2fc:	4b09      	ldr	r3, [pc, #36]	; (800a324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a2fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a300:	d3f9      	bcc.n	800a2f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a302:	f000 f813 	bl	800a32c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a306:	f000 f907 	bl	800a518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a30a:	f000 f8c1 	bl	800a490 <main>
  bx  lr    
 800a30e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a310:	2004ff00 	.word	0x2004ff00
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800a314:	08011e68 	.word	0x08011e68
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a318:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 800a31c:	2001059c 	.word	0x2001059c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800a320:	200105a0 	.word	0x200105a0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a324:	20014920 	.word	0x20014920

0800a328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a328:	e7fe      	b.n	800a328 <ADC_IRQHandler>
	...

0800a32c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a330:	4a15      	ldr	r2, [pc, #84]	; (800a388 <SystemInit+0x5c>)
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <SystemInit+0x5c>)
 800a334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a33c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a340:	4a12      	ldr	r2, [pc, #72]	; (800a38c <SystemInit+0x60>)
 800a342:	4b12      	ldr	r3, [pc, #72]	; (800a38c <SystemInit+0x60>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f043 0301 	orr.w	r3, r3, #1
 800a34a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <SystemInit+0x60>)
 800a34e:	2200      	movs	r2, #0
 800a350:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a352:	490e      	ldr	r1, [pc, #56]	; (800a38c <SystemInit+0x60>)
 800a354:	4b0d      	ldr	r3, [pc, #52]	; (800a38c <SystemInit+0x60>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	4b0d      	ldr	r3, [pc, #52]	; (800a390 <SystemInit+0x64>)
 800a35a:	4013      	ands	r3, r2
 800a35c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a35e:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <SystemInit+0x60>)
 800a360:	4a0c      	ldr	r2, [pc, #48]	; (800a394 <SystemInit+0x68>)
 800a362:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a364:	4a09      	ldr	r2, [pc, #36]	; (800a38c <SystemInit+0x60>)
 800a366:	4b09      	ldr	r3, [pc, #36]	; (800a38c <SystemInit+0x60>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a36e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a370:	4b06      	ldr	r3, [pc, #24]	; (800a38c <SystemInit+0x60>)
 800a372:	2200      	movs	r2, #0
 800a374:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a376:	4b04      	ldr	r3, [pc, #16]	; (800a388 <SystemInit+0x5c>)
 800a378:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a37c:	609a      	str	r2, [r3, #8]
#endif
}
 800a37e:	bf00      	nop
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	e000ed00 	.word	0xe000ed00
 800a38c:	40023800 	.word	0x40023800
 800a390:	fef6ffff 	.word	0xfef6ffff
 800a394:	24003010 	.word	0x24003010

0800a398 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60bb      	str	r3, [r7, #8]
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800a3b2:	4b32      	ldr	r3, [pc, #200]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 030c 	and.w	r3, r3, #12
 800a3ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d007      	beq.n	800a3d2 <SystemCoreClockUpdate+0x3a>
 800a3c2:	2b08      	cmp	r3, #8
 800a3c4:	d009      	beq.n	800a3da <SystemCoreClockUpdate+0x42>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d13f      	bne.n	800a44a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800a3ca:	4b2d      	ldr	r3, [pc, #180]	; (800a480 <SystemCoreClockUpdate+0xe8>)
 800a3cc:	4a2d      	ldr	r2, [pc, #180]	; (800a484 <SystemCoreClockUpdate+0xec>)
 800a3ce:	601a      	str	r2, [r3, #0]
      break;
 800a3d0:	e03f      	b.n	800a452 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800a3d2:	4b2b      	ldr	r3, [pc, #172]	; (800a480 <SystemCoreClockUpdate+0xe8>)
 800a3d4:	4a2c      	ldr	r2, [pc, #176]	; (800a488 <SystemCoreClockUpdate+0xf0>)
 800a3d6:	601a      	str	r2, [r3, #0]
      break;
 800a3d8:	e03b      	b.n	800a452 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800a3da:	4b28      	ldr	r3, [pc, #160]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3e2:	0d9b      	lsrs	r3, r3, #22
 800a3e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a3e6:	4b25      	ldr	r3, [pc, #148]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00d      	beq.n	800a412 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800a3f6:	4a24      	ldr	r2, [pc, #144]	; (800a488 <SystemCoreClockUpdate+0xf0>)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3fe:	4b1f      	ldr	r3, [pc, #124]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a400:	6859      	ldr	r1, [r3, #4]
 800a402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a406:	400b      	ands	r3, r1
 800a408:	099b      	lsrs	r3, r3, #6
 800a40a:	fb03 f302 	mul.w	r3, r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	e00c      	b.n	800a42c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800a412:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <SystemCoreClockUpdate+0xec>)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	fbb2 f2f3 	udiv	r2, r2, r3
 800a41a:	4b18      	ldr	r3, [pc, #96]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a41c:	6859      	ldr	r1, [r3, #4]
 800a41e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a422:	400b      	ands	r3, r1
 800a424:	099b      	lsrs	r3, r3, #6
 800a426:	fb03 f302 	mul.w	r3, r3, r2
 800a42a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800a42c:	4b13      	ldr	r3, [pc, #76]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a434:	0c1b      	lsrs	r3, r3, #16
 800a436:	3301      	adds	r3, #1
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	4a0e      	ldr	r2, [pc, #56]	; (800a480 <SystemCoreClockUpdate+0xe8>)
 800a446:	6013      	str	r3, [r2, #0]
      break;
 800a448:	e003      	b.n	800a452 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <SystemCoreClockUpdate+0xe8>)
 800a44c:	4a0d      	ldr	r2, [pc, #52]	; (800a484 <SystemCoreClockUpdate+0xec>)
 800a44e:	601a      	str	r2, [r3, #0]
      break;
 800a450:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800a452:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <SystemCoreClockUpdate+0xe4>)
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	4a0b      	ldr	r2, [pc, #44]	; (800a48c <SystemCoreClockUpdate+0xf4>)
 800a45e:	5cd3      	ldrb	r3, [r2, r3]
 800a460:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <SystemCoreClockUpdate+0xe8>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	fa22 f303 	lsr.w	r3, r2, r3
 800a46c:	4a04      	ldr	r2, [pc, #16]	; (800a480 <SystemCoreClockUpdate+0xe8>)
 800a46e:	6013      	str	r3, [r2, #0]
}
 800a470:	bf00      	nop
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	40023800 	.word	0x40023800
 800a480:	2001002c 	.word	0x2001002c
 800a484:	00f42400 	.word	0x00f42400
 800a488:	007a1200 	.word	0x007a1200
 800a48c:	08011930 	.word	0x08011930

0800a490 <main>:
**
********************************************************************************
*/

int main( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
    /* Configure the hardware */
    HW_InitAll();
 800a494:	f7fe fe26 	bl	80090e4 <HW_InitAll>

    /* Apply the Power-Up sequence*/
    HW_PowerUp();
 800a498:	f7fe fe4c 	bl	8009134 <HW_PowerUp>

    /* Start software tasks */

    //OS_CreateDebugTask();
    OS_SHL_Start();
 800a49c:	f7f8 f824 	bl	80024e8 <OS_SHL_Start>
    OS_CreateLedTask();
 800a4a0:	f7f7 faa8 	bl	80019f4 <OS_CreateLedTask>
    OS_CreateMotionTask();
 800a4a4:	f7f7 fb50 	bl	8001b48 <OS_CreateMotionTask>
    OS_CreateASVTask();*/
    //OS_CreateDSVTask();


    /* Start FreeRTOS Scheduler */
    vTaskStartScheduler();
 800a4a8:	f7fd f9d0 	bl	800784c <vTaskStartScheduler>


    /* Infinite loop */
    for( ;; );
 800a4ac:	e7fe      	b.n	800a4ac <main+0x1c>
 800a4ae:	bf00      	nop

0800a4b0 <xl_320_init>:

// -----------------------------------------------------------------------------
// First layer: handles UART data
// -----------------------------------------------------------------------------

void xl_320_init(XL_320_Com_Mode mode){
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	71fb      	strb	r3, [r7, #7]
	xl_320_cfg.mode = mode;
 800a4ba:	4a0b      	ldr	r2, [pc, #44]	; (800a4e8 <xl_320_init+0x38>)
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	7013      	strb	r3, [r2, #0]
	{
		case XL_320_TX_ONLY:
		case XL_320_TXRX_ONE_PIN:
		case XL_320_TXRX_TWO_PINS:
		default:
			xl_320_cfg.hw_send_byte = NULL;
 800a4c0:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <xl_320_init+0x38>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	609a      	str	r2, [r3, #8]
			xl_320_cfg.hw_receive_byte = NULL;
 800a4c6:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <xl_320_init+0x38>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	60da      	str	r2, [r3, #12]
			xl_320_cfg.hw_flush = NULL;
 800a4cc:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <xl_320_init+0x38>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	611a      	str	r2, [r3, #16]
			xl_320_cfg.hw_switch = NULL;
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <xl_320_init+0x38>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	605a      	str	r2, [r3, #4]
		break;
 800a4d8:	bf00      	nop
	}
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	20014908 	.word	0x20014908

0800a4ec <xl_320_set_hw_send>:
void xl_320_set_hw_send(void (*hw_send)(uint8_t))
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	xl_320_cfg.hw_send_byte = hw_send;
 800a4f4:	4a04      	ldr	r2, [pc, #16]	; (800a508 <xl_320_set_hw_send+0x1c>)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6093      	str	r3, [r2, #8]
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	20014908 	.word	0x20014908

0800a50c <__errno>:
 800a50c:	4b01      	ldr	r3, [pc, #4]	; (800a514 <__errno+0x8>)
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20010120 	.word	0x20010120

0800a518 <__libc_init_array>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <__libc_init_array+0x3c>)
 800a51c:	4c0e      	ldr	r4, [pc, #56]	; (800a558 <__libc_init_array+0x40>)
 800a51e:	1ae4      	subs	r4, r4, r3
 800a520:	10a4      	asrs	r4, r4, #2
 800a522:	2500      	movs	r5, #0
 800a524:	461e      	mov	r6, r3
 800a526:	42a5      	cmp	r5, r4
 800a528:	d004      	beq.n	800a534 <__libc_init_array+0x1c>
 800a52a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a52e:	4798      	blx	r3
 800a530:	3501      	adds	r5, #1
 800a532:	e7f8      	b.n	800a526 <__libc_init_array+0xe>
 800a534:	f006 fa30 	bl	8010998 <_init>
 800a538:	4c08      	ldr	r4, [pc, #32]	; (800a55c <__libc_init_array+0x44>)
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <__libc_init_array+0x48>)
 800a53c:	1ae4      	subs	r4, r4, r3
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2500      	movs	r5, #0
 800a542:	461e      	mov	r6, r3
 800a544:	42a5      	cmp	r5, r4
 800a546:	d004      	beq.n	800a552 <__libc_init_array+0x3a>
 800a548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a54c:	4798      	blx	r3
 800a54e:	3501      	adds	r5, #1
 800a550:	e7f8      	b.n	800a544 <__libc_init_array+0x2c>
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	08011e60 	.word	0x08011e60
 800a558:	08011e60 	.word	0x08011e60
 800a55c:	08011e64 	.word	0x08011e64
 800a560:	08011e60 	.word	0x08011e60

0800a564 <memcpy>:
 800a564:	b510      	push	{r4, lr}
 800a566:	1e43      	subs	r3, r0, #1
 800a568:	440a      	add	r2, r1
 800a56a:	4291      	cmp	r1, r2
 800a56c:	d004      	beq.n	800a578 <memcpy+0x14>
 800a56e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a572:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a576:	e7f8      	b.n	800a56a <memcpy+0x6>
 800a578:	bd10      	pop	{r4, pc}

0800a57a <memset>:
 800a57a:	4402      	add	r2, r0
 800a57c:	4603      	mov	r3, r0
 800a57e:	4293      	cmp	r3, r2
 800a580:	d002      	beq.n	800a588 <memset+0xe>
 800a582:	f803 1b01 	strb.w	r1, [r3], #1
 800a586:	e7fa      	b.n	800a57e <memset+0x4>
 800a588:	4770      	bx	lr
	...

0800a58c <printf>:
 800a58c:	b40f      	push	{r0, r1, r2, r3}
 800a58e:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <printf+0x2c>)
 800a590:	b513      	push	{r0, r1, r4, lr}
 800a592:	681c      	ldr	r4, [r3, #0]
 800a594:	b124      	cbz	r4, 800a5a0 <printf+0x14>
 800a596:	69a3      	ldr	r3, [r4, #24]
 800a598:	b913      	cbnz	r3, 800a5a0 <printf+0x14>
 800a59a:	4620      	mov	r0, r4
 800a59c:	f003 f8d6 	bl	800d74c <__sinit>
 800a5a0:	ab05      	add	r3, sp, #20
 800a5a2:	9a04      	ldr	r2, [sp, #16]
 800a5a4:	68a1      	ldr	r1, [r4, #8]
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f001 f905 	bl	800b7b8 <_vfprintf_r>
 800a5ae:	b002      	add	sp, #8
 800a5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b4:	b004      	add	sp, #16
 800a5b6:	4770      	bx	lr
 800a5b8:	20010120 	.word	0x20010120

0800a5bc <_puts_r>:
 800a5bc:	b530      	push	{r4, r5, lr}
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b089      	sub	sp, #36	; 0x24
 800a5c2:	4608      	mov	r0, r1
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	f7f5 fe23 	bl	8000210 <strlen>
 800a5ca:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <_puts_r+0x88>)
 800a5cc:	9306      	str	r3, [sp, #24]
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	9005      	str	r0, [sp, #20]
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	4418      	add	r0, r3
 800a5d6:	ab04      	add	r3, sp, #16
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	2302      	movs	r3, #2
 800a5dc:	9404      	str	r4, [sp, #16]
 800a5de:	9003      	str	r0, [sp, #12]
 800a5e0:	9302      	str	r3, [sp, #8]
 800a5e2:	b125      	cbz	r5, 800a5ee <_puts_r+0x32>
 800a5e4:	69ab      	ldr	r3, [r5, #24]
 800a5e6:	b913      	cbnz	r3, 800a5ee <_puts_r+0x32>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f003 f8af 	bl	800d74c <__sinit>
 800a5ee:	69ab      	ldr	r3, [r5, #24]
 800a5f0:	68ac      	ldr	r4, [r5, #8]
 800a5f2:	b913      	cbnz	r3, 800a5fa <_puts_r+0x3e>
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f003 f8a9 	bl	800d74c <__sinit>
 800a5fa:	4b13      	ldr	r3, [pc, #76]	; (800a648 <_puts_r+0x8c>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	d101      	bne.n	800a604 <_puts_r+0x48>
 800a600:	686c      	ldr	r4, [r5, #4]
 800a602:	e008      	b.n	800a616 <_puts_r+0x5a>
 800a604:	4b11      	ldr	r3, [pc, #68]	; (800a64c <_puts_r+0x90>)
 800a606:	429c      	cmp	r4, r3
 800a608:	d101      	bne.n	800a60e <_puts_r+0x52>
 800a60a:	68ac      	ldr	r4, [r5, #8]
 800a60c:	e003      	b.n	800a616 <_puts_r+0x5a>
 800a60e:	4b10      	ldr	r3, [pc, #64]	; (800a650 <_puts_r+0x94>)
 800a610:	429c      	cmp	r4, r3
 800a612:	bf08      	it	eq
 800a614:	68ec      	ldreq	r4, [r5, #12]
 800a616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61a:	049a      	lsls	r2, r3, #18
 800a61c:	d406      	bmi.n	800a62c <_puts_r+0x70>
 800a61e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a628:	81a3      	strh	r3, [r4, #12]
 800a62a:	6662      	str	r2, [r4, #100]	; 0x64
 800a62c:	aa01      	add	r2, sp, #4
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f003 fa11 	bl	800da58 <__sfvwrite_r>
 800a636:	2800      	cmp	r0, #0
 800a638:	bf14      	ite	ne
 800a63a:	f04f 30ff 	movne.w	r0, #4294967295
 800a63e:	200a      	moveq	r0, #10
 800a640:	b009      	add	sp, #36	; 0x24
 800a642:	bd30      	pop	{r4, r5, pc}
 800a644:	08011948 	.word	0x08011948
 800a648:	08011acc 	.word	0x08011acc
 800a64c:	08011aec 	.word	0x08011aec
 800a650:	08011b0c 	.word	0x08011b0c

0800a654 <puts>:
 800a654:	4b02      	ldr	r3, [pc, #8]	; (800a660 <puts+0xc>)
 800a656:	4601      	mov	r1, r0
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	f7ff bfaf 	b.w	800a5bc <_puts_r>
 800a65e:	bf00      	nop
 800a660:	20010120 	.word	0x20010120

0800a664 <snprintf>:
 800a664:	b40c      	push	{r2, r3}
 800a666:	b530      	push	{r4, r5, lr}
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <snprintf+0x60>)
 800a66a:	1e0c      	subs	r4, r1, #0
 800a66c:	b09d      	sub	sp, #116	; 0x74
 800a66e:	681d      	ldr	r5, [r3, #0]
 800a670:	da04      	bge.n	800a67c <snprintf+0x18>
 800a672:	238b      	movs	r3, #139	; 0x8b
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	e01e      	b.n	800a6ba <snprintf+0x56>
 800a67c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a680:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a684:	bf14      	ite	ne
 800a686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a68a:	4623      	moveq	r3, r4
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a694:	9002      	str	r0, [sp, #8]
 800a696:	9006      	str	r0, [sp, #24]
 800a698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a69c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a69e:	ab21      	add	r3, sp, #132	; 0x84
 800a6a0:	a902      	add	r1, sp, #8
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f000 f8c3 	bl	800a830 <_svfprintf_r>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	bfbc      	itt	lt
 800a6ae:	238b      	movlt	r3, #139	; 0x8b
 800a6b0:	602b      	strlt	r3, [r5, #0]
 800a6b2:	b114      	cbz	r4, 800a6ba <snprintf+0x56>
 800a6b4:	9b02      	ldr	r3, [sp, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	b01d      	add	sp, #116	; 0x74
 800a6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6c0:	b002      	add	sp, #8
 800a6c2:	4770      	bx	lr
 800a6c4:	20010120 	.word	0x20010120

0800a6c8 <sprintf>:
 800a6c8:	b40e      	push	{r1, r2, r3}
 800a6ca:	b500      	push	{lr}
 800a6cc:	b09c      	sub	sp, #112	; 0x70
 800a6ce:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a6d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6d4:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a6d8:	9002      	str	r0, [sp, #8]
 800a6da:	9006      	str	r0, [sp, #24]
 800a6dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6e0:	480a      	ldr	r0, [pc, #40]	; (800a70c <sprintf+0x44>)
 800a6e2:	9104      	str	r1, [sp, #16]
 800a6e4:	9107      	str	r1, [sp, #28]
 800a6e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ee:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a6f2:	6800      	ldr	r0, [r0, #0]
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	a902      	add	r1, sp, #8
 800a6f8:	f000 f89a 	bl	800a830 <_svfprintf_r>
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]
 800a702:	b01c      	add	sp, #112	; 0x70
 800a704:	f85d eb04 	ldr.w	lr, [sp], #4
 800a708:	b003      	add	sp, #12
 800a70a:	4770      	bx	lr
 800a70c:	20010120 	.word	0x20010120

0800a710 <strcasecmp>:
 800a710:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <strcasecmp+0x38>)
 800a712:	b530      	push	{r4, r5, lr}
 800a714:	681d      	ldr	r5, [r3, #0]
 800a716:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a71a:	18ea      	adds	r2, r5, r3
 800a71c:	7852      	ldrb	r2, [r2, #1]
 800a71e:	f002 0203 	and.w	r2, r2, #3
 800a722:	2a01      	cmp	r2, #1
 800a724:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a728:	eb05 0402 	add.w	r4, r5, r2
 800a72c:	bf08      	it	eq
 800a72e:	3320      	addeq	r3, #32
 800a730:	7864      	ldrb	r4, [r4, #1]
 800a732:	f004 0403 	and.w	r4, r4, #3
 800a736:	2c01      	cmp	r4, #1
 800a738:	bf08      	it	eq
 800a73a:	3220      	addeq	r2, #32
 800a73c:	1a9b      	subs	r3, r3, r2
 800a73e:	d101      	bne.n	800a744 <strcasecmp+0x34>
 800a740:	2a00      	cmp	r2, #0
 800a742:	d1e8      	bne.n	800a716 <strcasecmp+0x6>
 800a744:	4618      	mov	r0, r3
 800a746:	bd30      	pop	{r4, r5, pc}
 800a748:	20010124 	.word	0x20010124

0800a74c <strcpy>:
 800a74c:	4603      	mov	r3, r0
 800a74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a752:	f803 2b01 	strb.w	r2, [r3], #1
 800a756:	2a00      	cmp	r2, #0
 800a758:	d1f9      	bne.n	800a74e <strcpy+0x2>
 800a75a:	4770      	bx	lr

0800a75c <strncat>:
 800a75c:	b530      	push	{r4, r5, lr}
 800a75e:	4603      	mov	r3, r0
 800a760:	781c      	ldrb	r4, [r3, #0]
 800a762:	1c5d      	adds	r5, r3, #1
 800a764:	b144      	cbz	r4, 800a778 <strncat+0x1c>
 800a766:	462b      	mov	r3, r5
 800a768:	e7fa      	b.n	800a760 <strncat+0x4>
 800a76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76e:	f803 4b01 	strb.w	r4, [r3], #1
 800a772:	b124      	cbz	r4, 800a77e <strncat+0x22>
 800a774:	b902      	cbnz	r2, 800a778 <strncat+0x1c>
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	f112 32ff 	adds.w	r2, r2, #4294967295
 800a77c:	d2f5      	bcs.n	800a76a <strncat+0xe>
 800a77e:	bd30      	pop	{r4, r5, pc}

0800a780 <strncmp>:
 800a780:	b530      	push	{r4, r5, lr}
 800a782:	b182      	cbz	r2, 800a7a6 <strncmp+0x26>
 800a784:	1e45      	subs	r5, r0, #1
 800a786:	3901      	subs	r1, #1
 800a788:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800a78c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a790:	42a3      	cmp	r3, r4
 800a792:	d106      	bne.n	800a7a2 <strncmp+0x22>
 800a794:	43ec      	mvns	r4, r5
 800a796:	4414      	add	r4, r2
 800a798:	42e0      	cmn	r0, r4
 800a79a:	d001      	beq.n	800a7a0 <strncmp+0x20>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f3      	bne.n	800a788 <strncmp+0x8>
 800a7a0:	461c      	mov	r4, r3
 800a7a2:	1b18      	subs	r0, r3, r4
 800a7a4:	bd30      	pop	{r4, r5, pc}
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	bd30      	pop	{r4, r5, pc}

0800a7aa <strncpy>:
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	b142      	cbz	r2, 800a7c2 <strncpy+0x18>
 800a7b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b4:	f803 4b01 	strb.w	r4, [r3], #1
 800a7b8:	3a01      	subs	r2, #1
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	d1f7      	bne.n	800a7ae <strncpy+0x4>
 800a7be:	441a      	add	r2, r3
 800a7c0:	e000      	b.n	800a7c4 <strncpy+0x1a>
 800a7c2:	bd10      	pop	{r4, pc}
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d002      	beq.n	800a7ce <strncpy+0x24>
 800a7c8:	f803 4b01 	strb.w	r4, [r3], #1
 800a7cc:	e7fa      	b.n	800a7c4 <strncpy+0x1a>
 800a7ce:	bd10      	pop	{r4, pc}

0800a7d0 <strsep>:
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6800      	ldr	r0, [r0, #0]
 800a7d6:	f000 b800 	b.w	800a7da <__strtok_r>

0800a7da <__strtok_r>:
 800a7da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7dc:	b948      	cbnz	r0, 800a7f2 <__strtok_r+0x18>
 800a7de:	6810      	ldr	r0, [r2, #0]
 800a7e0:	b938      	cbnz	r0, 800a7f2 <__strtok_r+0x18>
 800a7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e4:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7e8:	b15e      	cbz	r6, 800a802 <__strtok_r+0x28>
 800a7ea:	42b5      	cmp	r5, r6
 800a7ec:	d1fa      	bne.n	800a7e4 <__strtok_r+0xa>
 800a7ee:	b12b      	cbz	r3, 800a7fc <__strtok_r+0x22>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7fa:	e7f3      	b.n	800a7e4 <__strtok_r+0xa>
 800a7fc:	6014      	str	r4, [r2, #0]
 800a7fe:	7003      	strb	r3, [r0, #0]
 800a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a802:	b94d      	cbnz	r5, 800a818 <__strtok_r+0x3e>
 800a804:	6015      	str	r5, [r2, #0]
 800a806:	4628      	mov	r0, r5
 800a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a80a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a80e:	42b5      	cmp	r5, r6
 800a810:	d007      	beq.n	800a822 <__strtok_r+0x48>
 800a812:	2e00      	cmp	r6, #0
 800a814:	d1f9      	bne.n	800a80a <__strtok_r+0x30>
 800a816:	461c      	mov	r4, r3
 800a818:	4623      	mov	r3, r4
 800a81a:	460f      	mov	r7, r1
 800a81c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a820:	e7f3      	b.n	800a80a <__strtok_r+0x30>
 800a822:	b115      	cbz	r5, 800a82a <__strtok_r+0x50>
 800a824:	2100      	movs	r1, #0
 800a826:	7021      	strb	r1, [r4, #0]
 800a828:	e000      	b.n	800a82c <__strtok_r+0x52>
 800a82a:	462b      	mov	r3, r5
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a830 <_svfprintf_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	b0bd      	sub	sp, #244	; 0xf4
 800a836:	468b      	mov	fp, r1
 800a838:	9205      	str	r2, [sp, #20]
 800a83a:	461f      	mov	r7, r3
 800a83c:	4682      	mov	sl, r0
 800a83e:	f003 fa7d 	bl	800dd3c <_localeconv_r>
 800a842:	6803      	ldr	r3, [r0, #0]
 800a844:	930d      	str	r3, [sp, #52]	; 0x34
 800a846:	4618      	mov	r0, r3
 800a848:	f7f5 fce2 	bl	8000210 <strlen>
 800a84c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a850:	9008      	str	r0, [sp, #32]
 800a852:	0619      	lsls	r1, r3, #24
 800a854:	d515      	bpl.n	800a882 <_svfprintf_r+0x52>
 800a856:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a85a:	b993      	cbnz	r3, 800a882 <_svfprintf_r+0x52>
 800a85c:	2140      	movs	r1, #64	; 0x40
 800a85e:	4650      	mov	r0, sl
 800a860:	f003 fae0 	bl	800de24 <_malloc_r>
 800a864:	f8cb 0000 	str.w	r0, [fp]
 800a868:	f8cb 0010 	str.w	r0, [fp, #16]
 800a86c:	b930      	cbnz	r0, 800a87c <_svfprintf_r+0x4c>
 800a86e:	230c      	movs	r3, #12
 800a870:	f8ca 3000 	str.w	r3, [sl]
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	f000 bf95 	b.w	800b7a6 <_svfprintf_r+0xf76>
 800a87c:	2340      	movs	r3, #64	; 0x40
 800a87e:	f8cb 3014 	str.w	r3, [fp, #20]
 800a882:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800aae8 <_svfprintf_r+0x2b8>
 800a886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a88a:	2300      	movs	r3, #0
 800a88c:	ac2c      	add	r4, sp, #176	; 0xb0
 800a88e:	941f      	str	r4, [sp, #124]	; 0x7c
 800a890:	9321      	str	r3, [sp, #132]	; 0x84
 800a892:	9320      	str	r3, [sp, #128]	; 0x80
 800a894:	9304      	str	r3, [sp, #16]
 800a896:	9311      	str	r3, [sp, #68]	; 0x44
 800a898:	9310      	str	r3, [sp, #64]	; 0x40
 800a89a:	930a      	str	r3, [sp, #40]	; 0x28
 800a89c:	9d05      	ldr	r5, [sp, #20]
 800a89e:	462b      	mov	r3, r5
 800a8a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a4:	b11a      	cbz	r2, 800a8ae <_svfprintf_r+0x7e>
 800a8a6:	2a25      	cmp	r2, #37	; 0x25
 800a8a8:	d001      	beq.n	800a8ae <_svfprintf_r+0x7e>
 800a8aa:	461d      	mov	r5, r3
 800a8ac:	e7f7      	b.n	800a89e <_svfprintf_r+0x6e>
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	1aee      	subs	r6, r5, r3
 800a8b2:	d017      	beq.n	800a8e4 <_svfprintf_r+0xb4>
 800a8b4:	e884 0048 	stmia.w	r4, {r3, r6}
 800a8b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8ba:	4433      	add	r3, r6
 800a8bc:	9321      	str	r3, [sp, #132]	; 0x84
 800a8be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	2b07      	cmp	r3, #7
 800a8c4:	9320      	str	r3, [sp, #128]	; 0x80
 800a8c6:	dc01      	bgt.n	800a8cc <_svfprintf_r+0x9c>
 800a8c8:	3408      	adds	r4, #8
 800a8ca:	e008      	b.n	800a8de <_svfprintf_r+0xae>
 800a8cc:	aa1f      	add	r2, sp, #124	; 0x7c
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	4650      	mov	r0, sl
 800a8d2:	f004 f9b6 	bl	800ec42 <__ssprint_r>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f040 862c 	bne.w	800b534 <_svfprintf_r+0xd04>
 800a8dc:	ac2c      	add	r4, sp, #176	; 0xb0
 800a8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e0:	4433      	add	r3, r6
 800a8e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e4:	782b      	ldrb	r3, [r5, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 861d 	beq.w	800b526 <_svfprintf_r+0xcf6>
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	1c6b      	adds	r3, r5, #1
 800a8f0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	f04f 39ff 	mov.w	r9, #4294967295
 800a8fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a8fc:	4615      	mov	r5, r2
 800a8fe:	200a      	movs	r0, #10
 800a900:	1c5e      	adds	r6, r3, #1
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	9605      	str	r6, [sp, #20]
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	3b20      	subs	r3, #32
 800a90c:	2b58      	cmp	r3, #88	; 0x58
 800a90e:	f200 8263 	bhi.w	800add8 <_svfprintf_r+0x5a8>
 800a912:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a916:	005c      	.short	0x005c
 800a918:	02610261 	.word	0x02610261
 800a91c:	0261006b 	.word	0x0261006b
 800a920:	02610261 	.word	0x02610261
 800a924:	02610261 	.word	0x02610261
 800a928:	006e0261 	.word	0x006e0261
 800a92c:	02610059 	.word	0x02610059
 800a930:	007c0079 	.word	0x007c0079
 800a934:	00a30261 	.word	0x00a30261
 800a938:	00a600a6 	.word	0x00a600a6
 800a93c:	00a600a6 	.word	0x00a600a6
 800a940:	00a600a6 	.word	0x00a600a6
 800a944:	00a600a6 	.word	0x00a600a6
 800a948:	026100a6 	.word	0x026100a6
 800a94c:	02610261 	.word	0x02610261
 800a950:	02610261 	.word	0x02610261
 800a954:	02610261 	.word	0x02610261
 800a958:	02610261 	.word	0x02610261
 800a95c:	00d60261 	.word	0x00d60261
 800a960:	0261010b 	.word	0x0261010b
 800a964:	0261010b 	.word	0x0261010b
 800a968:	02610261 	.word	0x02610261
 800a96c:	00b90261 	.word	0x00b90261
 800a970:	02610261 	.word	0x02610261
 800a974:	02610152 	.word	0x02610152
 800a978:	02610261 	.word	0x02610261
 800a97c:	02610261 	.word	0x02610261
 800a980:	02610199 	.word	0x02610199
 800a984:	00660261 	.word	0x00660261
 800a988:	02610261 	.word	0x02610261
 800a98c:	02610261 	.word	0x02610261
 800a990:	02610261 	.word	0x02610261
 800a994:	02610261 	.word	0x02610261
 800a998:	02610261 	.word	0x02610261
 800a99c:	006100cd 	.word	0x006100cd
 800a9a0:	010b010b 	.word	0x010b010b
 800a9a4:	00bc010b 	.word	0x00bc010b
 800a9a8:	02610061 	.word	0x02610061
 800a9ac:	00bf0261 	.word	0x00bf0261
 800a9b0:	01340261 	.word	0x01340261
 800a9b4:	016f0154 	.word	0x016f0154
 800a9b8:	026100ca 	.word	0x026100ca
 800a9bc:	02610180 	.word	0x02610180
 800a9c0:	0261019b 	.word	0x0261019b
 800a9c4:	01b30261 	.word	0x01b30261
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	212b      	movs	r1, #43	; 0x2b
 800a9cc:	e002      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800a9ce:	b909      	cbnz	r1, 800a9d4 <_svfprintf_r+0x1a4>
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	2120      	movs	r1, #32
 800a9d4:	9b05      	ldr	r3, [sp, #20]
 800a9d6:	e793      	b.n	800a900 <_svfprintf_r+0xd0>
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d077      	beq.n	800aacc <_svfprintf_r+0x29c>
 800a9dc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a9e0:	e074      	b.n	800aacc <_svfprintf_r+0x29c>
 800a9e2:	b10a      	cbz	r2, 800a9e8 <_svfprintf_r+0x1b8>
 800a9e4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a9e8:	4b41      	ldr	r3, [pc, #260]	; (800aaf0 <_svfprintf_r+0x2c0>)
 800a9ea:	e14b      	b.n	800ac84 <_svfprintf_r+0x454>
 800a9ec:	f045 0501 	orr.w	r5, r5, #1
 800a9f0:	e7f0      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800a9f2:	683e      	ldr	r6, [r7, #0]
 800a9f4:	9609      	str	r6, [sp, #36]	; 0x24
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	f107 0304 	add.w	r3, r7, #4
 800a9fc:	db01      	blt.n	800aa02 <_svfprintf_r+0x1d2>
 800a9fe:	461f      	mov	r7, r3
 800aa00:	e7e8      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa02:	4276      	negs	r6, r6
 800aa04:	9609      	str	r6, [sp, #36]	; 0x24
 800aa06:	461f      	mov	r7, r3
 800aa08:	f045 0504 	orr.w	r5, r5, #4
 800aa0c:	e7e2      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa0e:	9e05      	ldr	r6, [sp, #20]
 800aa10:	9b05      	ldr	r3, [sp, #20]
 800aa12:	7836      	ldrb	r6, [r6, #0]
 800aa14:	9602      	str	r6, [sp, #8]
 800aa16:	2e2a      	cmp	r6, #42	; 0x2a
 800aa18:	f103 0301 	add.w	r3, r3, #1
 800aa1c:	d002      	beq.n	800aa24 <_svfprintf_r+0x1f4>
 800aa1e:	f04f 0900 	mov.w	r9, #0
 800aa22:	e00a      	b.n	800aa3a <_svfprintf_r+0x20a>
 800aa24:	f8d7 9000 	ldr.w	r9, [r7]
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	1d3e      	adds	r6, r7, #4
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	4637      	mov	r7, r6
 800aa32:	dacf      	bge.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa34:	f04f 39ff 	mov.w	r9, #4294967295
 800aa38:	e7cc      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa3a:	9305      	str	r3, [sp, #20]
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	3b30      	subs	r3, #48	; 0x30
 800aa40:	2b09      	cmp	r3, #9
 800aa42:	d808      	bhi.n	800aa56 <_svfprintf_r+0x226>
 800aa44:	fb00 3909 	mla	r9, r0, r9, r3
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	461e      	mov	r6, r3
 800aa4c:	f816 3b01 	ldrb.w	r3, [r6], #1
 800aa50:	9302      	str	r3, [sp, #8]
 800aa52:	4633      	mov	r3, r6
 800aa54:	e7f1      	b.n	800aa3a <_svfprintf_r+0x20a>
 800aa56:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800aa5a:	e755      	b.n	800a908 <_svfprintf_r+0xd8>
 800aa5c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800aa60:	e7b8      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa62:	2300      	movs	r3, #0
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa6a:	3b30      	subs	r3, #48	; 0x30
 800aa6c:	fb00 3306 	mla	r3, r0, r6, r3
 800aa70:	9309      	str	r3, [sp, #36]	; 0x24
 800aa72:	9b05      	ldr	r3, [sp, #20]
 800aa74:	461e      	mov	r6, r3
 800aa76:	f816 3b01 	ldrb.w	r3, [r6], #1
 800aa7a:	9302      	str	r3, [sp, #8]
 800aa7c:	9b02      	ldr	r3, [sp, #8]
 800aa7e:	9605      	str	r6, [sp, #20]
 800aa80:	3b30      	subs	r3, #48	; 0x30
 800aa82:	2b09      	cmp	r3, #9
 800aa84:	d9ef      	bls.n	800aa66 <_svfprintf_r+0x236>
 800aa86:	e73f      	b.n	800a908 <_svfprintf_r+0xd8>
 800aa88:	f045 0508 	orr.w	r5, r5, #8
 800aa8c:	e7a2      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa8e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800aa92:	e79f      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aa94:	9b05      	ldr	r3, [sp, #20]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b6c      	cmp	r3, #108	; 0x6c
 800aa9a:	d103      	bne.n	800aaa4 <_svfprintf_r+0x274>
 800aa9c:	9b05      	ldr	r3, [sp, #20]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	9305      	str	r3, [sp, #20]
 800aaa2:	e002      	b.n	800aaaa <_svfprintf_r+0x27a>
 800aaa4:	f045 0510 	orr.w	r5, r5, #16
 800aaa8:	e794      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aaaa:	f045 0520 	orr.w	r5, r5, #32
 800aaae:	e791      	b.n	800a9d4 <_svfprintf_r+0x1a4>
 800aab0:	1d3b      	adds	r3, r7, #4
 800aab2:	9303      	str	r3, [sp, #12]
 800aab4:	2600      	movs	r6, #0
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800aabc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800aac0:	e199      	b.n	800adf6 <_svfprintf_r+0x5c6>
 800aac2:	b10a      	cbz	r2, 800aac8 <_svfprintf_r+0x298>
 800aac4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800aac8:	f045 0510 	orr.w	r5, r5, #16
 800aacc:	06aa      	lsls	r2, r5, #26
 800aace:	d511      	bpl.n	800aaf4 <_svfprintf_r+0x2c4>
 800aad0:	3707      	adds	r7, #7
 800aad2:	f027 0707 	bic.w	r7, r7, #7
 800aad6:	f107 0308 	add.w	r3, r7, #8
 800aada:	9303      	str	r3, [sp, #12]
 800aadc:	e9d7 6700 	ldrd	r6, r7, [r7]
 800aae0:	e017      	b.n	800ab12 <_svfprintf_r+0x2e2>
 800aae2:	bf00      	nop
 800aae4:	f3af 8000 	nop.w
	...
 800aaf0:	0801196a 	.word	0x0801196a
 800aaf4:	f015 0f10 	tst.w	r5, #16
 800aaf8:	f107 0304 	add.w	r3, r7, #4
 800aafc:	d002      	beq.n	800ab04 <_svfprintf_r+0x2d4>
 800aafe:	9303      	str	r3, [sp, #12]
 800ab00:	683e      	ldr	r6, [r7, #0]
 800ab02:	e005      	b.n	800ab10 <_svfprintf_r+0x2e0>
 800ab04:	683e      	ldr	r6, [r7, #0]
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab0c:	bf18      	it	ne
 800ab0e:	b236      	sxthne	r6, r6
 800ab10:	17f7      	asrs	r7, r6, #31
 800ab12:	2e00      	cmp	r6, #0
 800ab14:	f177 0300 	sbcs.w	r3, r7, #0
 800ab18:	f280 80de 	bge.w	800acd8 <_svfprintf_r+0x4a8>
 800ab1c:	4276      	negs	r6, r6
 800ab1e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ab22:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800ab26:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800ab2a:	e0d5      	b.n	800acd8 <_svfprintf_r+0x4a8>
 800ab2c:	b10a      	cbz	r2, 800ab32 <_svfprintf_r+0x302>
 800ab2e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ab32:	3707      	adds	r7, #7
 800ab34:	f027 0707 	bic.w	r7, r7, #7
 800ab38:	f107 0308 	add.w	r3, r7, #8
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	ed97 7b00 	vldr	d7, [r7]
 800ab42:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab46:	9b06      	ldr	r3, [sp, #24]
 800ab48:	9312      	str	r3, [sp, #72]	; 0x48
 800ab4a:	9b07      	ldr	r3, [sp, #28]
 800ab4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab50:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	4bab      	ldr	r3, [pc, #684]	; (800ae04 <_svfprintf_r+0x5d4>)
 800ab58:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800ab5c:	f7f6 f802 	bl	8000b64 <__aeabi_dcmpun>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f040 84f1 	bne.w	800b548 <_svfprintf_r+0xd18>
 800ab66:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6a:	4ba6      	ldr	r3, [pc, #664]	; (800ae04 <_svfprintf_r+0x5d4>)
 800ab6c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800ab70:	f7f5 ffda 	bl	8000b28 <__aeabi_dcmple>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f040 84e7 	bne.w	800b548 <_svfprintf_r+0xd18>
 800ab7a:	f000 bdfd 	b.w	800b778 <_svfprintf_r+0xf48>
 800ab7e:	b10a      	cbz	r2, 800ab84 <_svfprintf_r+0x354>
 800ab80:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ab84:	f015 0f20 	tst.w	r5, #32
 800ab88:	f107 0304 	add.w	r3, r7, #4
 800ab8c:	d007      	beq.n	800ab9e <_svfprintf_r+0x36e>
 800ab8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	17ce      	asrs	r6, r1, #31
 800ab94:	4608      	mov	r0, r1
 800ab96:	4631      	mov	r1, r6
 800ab98:	e9c2 0100 	strd	r0, r1, [r2]
 800ab9c:	e00b      	b.n	800abb6 <_svfprintf_r+0x386>
 800ab9e:	06e9      	lsls	r1, r5, #27
 800aba0:	d406      	bmi.n	800abb0 <_svfprintf_r+0x380>
 800aba2:	066a      	lsls	r2, r5, #25
 800aba4:	d504      	bpl.n	800abb0 <_svfprintf_r+0x380>
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800abac:	8011      	strh	r1, [r2, #0]
 800abae:	e002      	b.n	800abb6 <_svfprintf_r+0x386>
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abb4:	6011      	str	r1, [r2, #0]
 800abb6:	461f      	mov	r7, r3
 800abb8:	e670      	b.n	800a89c <_svfprintf_r+0x6c>
 800abba:	f045 0510 	orr.w	r5, r5, #16
 800abbe:	f015 0320 	ands.w	r3, r5, #32
 800abc2:	d009      	beq.n	800abd8 <_svfprintf_r+0x3a8>
 800abc4:	3707      	adds	r7, #7
 800abc6:	f027 0707 	bic.w	r7, r7, #7
 800abca:	f107 0308 	add.w	r3, r7, #8
 800abce:	e9d7 6700 	ldrd	r6, r7, [r7]
 800abd2:	9303      	str	r3, [sp, #12]
 800abd4:	2300      	movs	r3, #0
 800abd6:	e07b      	b.n	800acd0 <_svfprintf_r+0x4a0>
 800abd8:	1d3a      	adds	r2, r7, #4
 800abda:	f015 0110 	ands.w	r1, r5, #16
 800abde:	9203      	str	r2, [sp, #12]
 800abe0:	d105      	bne.n	800abee <_svfprintf_r+0x3be>
 800abe2:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800abe6:	d002      	beq.n	800abee <_svfprintf_r+0x3be>
 800abe8:	883e      	ldrh	r6, [r7, #0]
 800abea:	2700      	movs	r7, #0
 800abec:	e7f2      	b.n	800abd4 <_svfprintf_r+0x3a4>
 800abee:	683e      	ldr	r6, [r7, #0]
 800abf0:	2700      	movs	r7, #0
 800abf2:	e06d      	b.n	800acd0 <_svfprintf_r+0x4a0>
 800abf4:	1d3b      	adds	r3, r7, #4
 800abf6:	9303      	str	r3, [sp, #12]
 800abf8:	2330      	movs	r3, #48	; 0x30
 800abfa:	2278      	movs	r2, #120	; 0x78
 800abfc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800ac00:	4b81      	ldr	r3, [pc, #516]	; (800ae08 <_svfprintf_r+0x5d8>)
 800ac02:	683e      	ldr	r6, [r7, #0]
 800ac04:	9311      	str	r3, [sp, #68]	; 0x44
 800ac06:	2700      	movs	r7, #0
 800ac08:	f045 0502 	orr.w	r5, r5, #2
 800ac0c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800ac10:	2302      	movs	r3, #2
 800ac12:	9202      	str	r2, [sp, #8]
 800ac14:	e05c      	b.n	800acd0 <_svfprintf_r+0x4a0>
 800ac16:	2600      	movs	r6, #0
 800ac18:	1d3b      	adds	r3, r7, #4
 800ac1a:	45b1      	cmp	r9, r6
 800ac1c:	9303      	str	r3, [sp, #12]
 800ac1e:	f8d7 8000 	ldr.w	r8, [r7]
 800ac22:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800ac26:	db0a      	blt.n	800ac3e <_svfprintf_r+0x40e>
 800ac28:	464a      	mov	r2, r9
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	f7f5 faf7 	bl	8000220 <memchr>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f000 80ea 	beq.w	800ae0c <_svfprintf_r+0x5dc>
 800ac38:	ebc8 0900 	rsb	r9, r8, r0
 800ac3c:	e0e7      	b.n	800ae0e <_svfprintf_r+0x5de>
 800ac3e:	4640      	mov	r0, r8
 800ac40:	f7f5 fae6 	bl	8000210 <strlen>
 800ac44:	4681      	mov	r9, r0
 800ac46:	e0e2      	b.n	800ae0e <_svfprintf_r+0x5de>
 800ac48:	f045 0510 	orr.w	r5, r5, #16
 800ac4c:	06ae      	lsls	r6, r5, #26
 800ac4e:	d508      	bpl.n	800ac62 <_svfprintf_r+0x432>
 800ac50:	3707      	adds	r7, #7
 800ac52:	f027 0707 	bic.w	r7, r7, #7
 800ac56:	f107 0308 	add.w	r3, r7, #8
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ac60:	e00a      	b.n	800ac78 <_svfprintf_r+0x448>
 800ac62:	1d3b      	adds	r3, r7, #4
 800ac64:	f015 0f10 	tst.w	r5, #16
 800ac68:	9303      	str	r3, [sp, #12]
 800ac6a:	d103      	bne.n	800ac74 <_svfprintf_r+0x444>
 800ac6c:	0668      	lsls	r0, r5, #25
 800ac6e:	d501      	bpl.n	800ac74 <_svfprintf_r+0x444>
 800ac70:	883e      	ldrh	r6, [r7, #0]
 800ac72:	e000      	b.n	800ac76 <_svfprintf_r+0x446>
 800ac74:	683e      	ldr	r6, [r7, #0]
 800ac76:	2700      	movs	r7, #0
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e029      	b.n	800acd0 <_svfprintf_r+0x4a0>
 800ac7c:	b10a      	cbz	r2, 800ac82 <_svfprintf_r+0x452>
 800ac7e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ac82:	4b61      	ldr	r3, [pc, #388]	; (800ae08 <_svfprintf_r+0x5d8>)
 800ac84:	9311      	str	r3, [sp, #68]	; 0x44
 800ac86:	06a9      	lsls	r1, r5, #26
 800ac88:	d508      	bpl.n	800ac9c <_svfprintf_r+0x46c>
 800ac8a:	3707      	adds	r7, #7
 800ac8c:	f027 0707 	bic.w	r7, r7, #7
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ac9a:	e00a      	b.n	800acb2 <_svfprintf_r+0x482>
 800ac9c:	1d3b      	adds	r3, r7, #4
 800ac9e:	f015 0f10 	tst.w	r5, #16
 800aca2:	9303      	str	r3, [sp, #12]
 800aca4:	d103      	bne.n	800acae <_svfprintf_r+0x47e>
 800aca6:	066a      	lsls	r2, r5, #25
 800aca8:	d501      	bpl.n	800acae <_svfprintf_r+0x47e>
 800acaa:	883e      	ldrh	r6, [r7, #0]
 800acac:	e000      	b.n	800acb0 <_svfprintf_r+0x480>
 800acae:	683e      	ldr	r6, [r7, #0]
 800acb0:	2700      	movs	r7, #0
 800acb2:	07eb      	lsls	r3, r5, #31
 800acb4:	d50b      	bpl.n	800acce <_svfprintf_r+0x49e>
 800acb6:	ea56 0307 	orrs.w	r3, r6, r7
 800acba:	d008      	beq.n	800acce <_svfprintf_r+0x49e>
 800acbc:	2330      	movs	r3, #48	; 0x30
 800acbe:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800acc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800acc6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800acca:	f045 0502 	orr.w	r5, r5, #2
 800acce:	2302      	movs	r3, #2
 800acd0:	2200      	movs	r2, #0
 800acd2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800acd6:	e000      	b.n	800acda <_svfprintf_r+0x4aa>
 800acd8:	2301      	movs	r3, #1
 800acda:	f1b9 0f00 	cmp.w	r9, #0
 800acde:	f2c0 855c 	blt.w	800b79a <_svfprintf_r+0xf6a>
 800ace2:	ea56 0207 	orrs.w	r2, r6, r7
 800ace6:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800acea:	d103      	bne.n	800acf4 <_svfprintf_r+0x4c4>
 800acec:	f1b9 0f00 	cmp.w	r9, #0
 800acf0:	d05f      	beq.n	800adb2 <_svfprintf_r+0x582>
 800acf2:	e006      	b.n	800ad02 <_svfprintf_r+0x4d2>
 800acf4:	460d      	mov	r5, r1
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d025      	beq.n	800ad46 <_svfprintf_r+0x516>
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d046      	beq.n	800ad8c <_svfprintf_r+0x55c>
 800acfe:	4629      	mov	r1, r5
 800ad00:	e007      	b.n	800ad12 <_svfprintf_r+0x4e2>
 800ad02:	460d      	mov	r5, r1
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d022      	beq.n	800ad4e <_svfprintf_r+0x51e>
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d03d      	beq.n	800ad88 <_svfprintf_r+0x558>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	2600      	movs	r6, #0
 800ad10:	2700      	movs	r7, #0
 800ad12:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800ad16:	08f2      	lsrs	r2, r6, #3
 800ad18:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800ad1c:	08f8      	lsrs	r0, r7, #3
 800ad1e:	f006 0307 	and.w	r3, r6, #7
 800ad22:	4607      	mov	r7, r0
 800ad24:	4616      	mov	r6, r2
 800ad26:	3330      	adds	r3, #48	; 0x30
 800ad28:	ea56 0207 	orrs.w	r2, r6, r7
 800ad2c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ad30:	d1f1      	bne.n	800ad16 <_svfprintf_r+0x4e6>
 800ad32:	07e8      	lsls	r0, r5, #31
 800ad34:	d548      	bpl.n	800adc8 <_svfprintf_r+0x598>
 800ad36:	2b30      	cmp	r3, #48	; 0x30
 800ad38:	d046      	beq.n	800adc8 <_svfprintf_r+0x598>
 800ad3a:	2330      	movs	r3, #48	; 0x30
 800ad3c:	f808 3c01 	strb.w	r3, [r8, #-1]
 800ad40:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad44:	e040      	b.n	800adc8 <_svfprintf_r+0x598>
 800ad46:	2f00      	cmp	r7, #0
 800ad48:	bf08      	it	eq
 800ad4a:	2e0a      	cmpeq	r6, #10
 800ad4c:	d205      	bcs.n	800ad5a <_svfprintf_r+0x52a>
 800ad4e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800ad52:	3630      	adds	r6, #48	; 0x30
 800ad54:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800ad58:	e029      	b.n	800adae <_svfprintf_r+0x57e>
 800ad5a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	220a      	movs	r2, #10
 800ad64:	2300      	movs	r3, #0
 800ad66:	f7f5 ff8b 	bl	8000c80 <__aeabi_uldivmod>
 800ad6a:	3230      	adds	r2, #48	; 0x30
 800ad6c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800ad70:	2300      	movs	r3, #0
 800ad72:	4630      	mov	r0, r6
 800ad74:	4639      	mov	r1, r7
 800ad76:	220a      	movs	r2, #10
 800ad78:	f7f5 ff82 	bl	8000c80 <__aeabi_uldivmod>
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	ea56 0307 	orrs.w	r3, r6, r7
 800ad84:	d1eb      	bne.n	800ad5e <_svfprintf_r+0x52e>
 800ad86:	e012      	b.n	800adae <_svfprintf_r+0x57e>
 800ad88:	2600      	movs	r6, #0
 800ad8a:	2700      	movs	r7, #0
 800ad8c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800ad90:	f006 030f 	and.w	r3, r6, #15
 800ad94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad96:	5cd3      	ldrb	r3, [r2, r3]
 800ad98:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ad9c:	0933      	lsrs	r3, r6, #4
 800ad9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800ada2:	093a      	lsrs	r2, r7, #4
 800ada4:	461e      	mov	r6, r3
 800ada6:	4617      	mov	r7, r2
 800ada8:	ea56 0307 	orrs.w	r3, r6, r7
 800adac:	d1f0      	bne.n	800ad90 <_svfprintf_r+0x560>
 800adae:	4629      	mov	r1, r5
 800adb0:	e00a      	b.n	800adc8 <_svfprintf_r+0x598>
 800adb2:	b93b      	cbnz	r3, 800adc4 <_svfprintf_r+0x594>
 800adb4:	07ea      	lsls	r2, r5, #31
 800adb6:	d505      	bpl.n	800adc4 <_svfprintf_r+0x594>
 800adb8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800adbc:	2330      	movs	r3, #48	; 0x30
 800adbe:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800adc2:	e001      	b.n	800adc8 <_svfprintf_r+0x598>
 800adc4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800adc8:	464e      	mov	r6, r9
 800adca:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800adce:	ebc8 0909 	rsb	r9, r8, r9
 800add2:	460d      	mov	r5, r1
 800add4:	2700      	movs	r7, #0
 800add6:	e01b      	b.n	800ae10 <_svfprintf_r+0x5e0>
 800add8:	b10a      	cbz	r2, 800adde <_svfprintf_r+0x5ae>
 800adda:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800adde:	9b02      	ldr	r3, [sp, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 83a0 	beq.w	800b526 <_svfprintf_r+0xcf6>
 800ade6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800adea:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800adee:	2600      	movs	r6, #0
 800adf0:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800adf4:	9703      	str	r7, [sp, #12]
 800adf6:	f04f 0901 	mov.w	r9, #1
 800adfa:	4637      	mov	r7, r6
 800adfc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800ae00:	e006      	b.n	800ae10 <_svfprintf_r+0x5e0>
 800ae02:	bf00      	nop
 800ae04:	7fefffff 	.word	0x7fefffff
 800ae08:	0801197b 	.word	0x0801197b
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	4637      	mov	r7, r6
 800ae10:	454e      	cmp	r6, r9
 800ae12:	4633      	mov	r3, r6
 800ae14:	bfb8      	it	lt
 800ae16:	464b      	movlt	r3, r9
 800ae18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae1a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800ae1e:	b113      	cbz	r3, 800ae26 <_svfprintf_r+0x5f6>
 800ae20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae22:	3301      	adds	r3, #1
 800ae24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae26:	f015 0302 	ands.w	r3, r5, #2
 800ae2a:	9314      	str	r3, [sp, #80]	; 0x50
 800ae2c:	bf1e      	ittt	ne
 800ae2e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800ae30:	3302      	addne	r3, #2
 800ae32:	930b      	strne	r3, [sp, #44]	; 0x2c
 800ae34:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800ae38:	9315      	str	r3, [sp, #84]	; 0x54
 800ae3a:	d139      	bne.n	800aeb0 <_svfprintf_r+0x680>
 800ae3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	930c      	str	r3, [sp, #48]	; 0x30
 800ae46:	dd33      	ble.n	800aeb0 <_svfprintf_r+0x680>
 800ae48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae4a:	2b10      	cmp	r3, #16
 800ae4c:	4ba6      	ldr	r3, [pc, #664]	; (800b0e8 <_svfprintf_r+0x8b8>)
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	dd18      	ble.n	800ae84 <_svfprintf_r+0x654>
 800ae52:	2310      	movs	r3, #16
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae58:	3310      	adds	r3, #16
 800ae5a:	9321      	str	r3, [sp, #132]	; 0x84
 800ae5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ae5e:	3301      	adds	r3, #1
 800ae60:	2b07      	cmp	r3, #7
 800ae62:	9320      	str	r3, [sp, #128]	; 0x80
 800ae64:	dc01      	bgt.n	800ae6a <_svfprintf_r+0x63a>
 800ae66:	3408      	adds	r4, #8
 800ae68:	e008      	b.n	800ae7c <_svfprintf_r+0x64c>
 800ae6a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	4650      	mov	r0, sl
 800ae70:	f003 fee7 	bl	800ec42 <__ssprint_r>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f040 835d 	bne.w	800b534 <_svfprintf_r+0xd04>
 800ae7a:	ac2c      	add	r4, sp, #176	; 0xb0
 800ae7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae7e:	3b10      	subs	r3, #16
 800ae80:	930c      	str	r3, [sp, #48]	; 0x30
 800ae82:	e7e1      	b.n	800ae48 <_svfprintf_r+0x618>
 800ae84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae86:	6063      	str	r3, [r4, #4]
 800ae88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae8c:	4413      	add	r3, r2
 800ae8e:	9321      	str	r3, [sp, #132]	; 0x84
 800ae90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ae92:	3301      	adds	r3, #1
 800ae94:	2b07      	cmp	r3, #7
 800ae96:	9320      	str	r3, [sp, #128]	; 0x80
 800ae98:	dc01      	bgt.n	800ae9e <_svfprintf_r+0x66e>
 800ae9a:	3408      	adds	r4, #8
 800ae9c:	e008      	b.n	800aeb0 <_svfprintf_r+0x680>
 800ae9e:	aa1f      	add	r2, sp, #124	; 0x7c
 800aea0:	4659      	mov	r1, fp
 800aea2:	4650      	mov	r0, sl
 800aea4:	f003 fecd 	bl	800ec42 <__ssprint_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f040 8343 	bne.w	800b534 <_svfprintf_r+0xd04>
 800aeae:	ac2c      	add	r4, sp, #176	; 0xb0
 800aeb0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800aeb4:	b1bb      	cbz	r3, 800aee6 <_svfprintf_r+0x6b6>
 800aeb6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	2301      	movs	r3, #1
 800aebe:	6063      	str	r3, [r4, #4]
 800aec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aec2:	3301      	adds	r3, #1
 800aec4:	9321      	str	r3, [sp, #132]	; 0x84
 800aec6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aec8:	3301      	adds	r3, #1
 800aeca:	2b07      	cmp	r3, #7
 800aecc:	9320      	str	r3, [sp, #128]	; 0x80
 800aece:	dc01      	bgt.n	800aed4 <_svfprintf_r+0x6a4>
 800aed0:	3408      	adds	r4, #8
 800aed2:	e008      	b.n	800aee6 <_svfprintf_r+0x6b6>
 800aed4:	aa1f      	add	r2, sp, #124	; 0x7c
 800aed6:	4659      	mov	r1, fp
 800aed8:	4650      	mov	r0, sl
 800aeda:	f003 feb2 	bl	800ec42 <__ssprint_r>
 800aede:	2800      	cmp	r0, #0
 800aee0:	f040 8328 	bne.w	800b534 <_svfprintf_r+0xd04>
 800aee4:	ac2c      	add	r4, sp, #176	; 0xb0
 800aee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aee8:	b1b3      	cbz	r3, 800af18 <_svfprintf_r+0x6e8>
 800aeea:	ab18      	add	r3, sp, #96	; 0x60
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	2302      	movs	r3, #2
 800aef0:	6063      	str	r3, [r4, #4]
 800aef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef4:	3302      	adds	r3, #2
 800aef6:	9321      	str	r3, [sp, #132]	; 0x84
 800aef8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aefa:	3301      	adds	r3, #1
 800aefc:	2b07      	cmp	r3, #7
 800aefe:	9320      	str	r3, [sp, #128]	; 0x80
 800af00:	dc01      	bgt.n	800af06 <_svfprintf_r+0x6d6>
 800af02:	3408      	adds	r4, #8
 800af04:	e008      	b.n	800af18 <_svfprintf_r+0x6e8>
 800af06:	aa1f      	add	r2, sp, #124	; 0x7c
 800af08:	4659      	mov	r1, fp
 800af0a:	4650      	mov	r0, sl
 800af0c:	f003 fe99 	bl	800ec42 <__ssprint_r>
 800af10:	2800      	cmp	r0, #0
 800af12:	f040 830f 	bne.w	800b534 <_svfprintf_r+0xd04>
 800af16:	ac2c      	add	r4, sp, #176	; 0xb0
 800af18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af1a:	2b80      	cmp	r3, #128	; 0x80
 800af1c:	d135      	bne.n	800af8a <_svfprintf_r+0x75a>
 800af1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd30      	ble.n	800af8a <_svfprintf_r+0x75a>
 800af28:	4a70      	ldr	r2, [pc, #448]	; (800b0ec <_svfprintf_r+0x8bc>)
 800af2a:	6022      	str	r2, [r4, #0]
 800af2c:	2b10      	cmp	r3, #16
 800af2e:	dd18      	ble.n	800af62 <_svfprintf_r+0x732>
 800af30:	2210      	movs	r2, #16
 800af32:	6062      	str	r2, [r4, #4]
 800af34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af36:	3210      	adds	r2, #16
 800af38:	9221      	str	r2, [sp, #132]	; 0x84
 800af3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af3c:	3201      	adds	r2, #1
 800af3e:	2a07      	cmp	r2, #7
 800af40:	9220      	str	r2, [sp, #128]	; 0x80
 800af42:	dc01      	bgt.n	800af48 <_svfprintf_r+0x718>
 800af44:	3408      	adds	r4, #8
 800af46:	e00a      	b.n	800af5e <_svfprintf_r+0x72e>
 800af48:	aa1f      	add	r2, sp, #124	; 0x7c
 800af4a:	4659      	mov	r1, fp
 800af4c:	4650      	mov	r0, sl
 800af4e:	930c      	str	r3, [sp, #48]	; 0x30
 800af50:	f003 fe77 	bl	800ec42 <__ssprint_r>
 800af54:	2800      	cmp	r0, #0
 800af56:	f040 82ed 	bne.w	800b534 <_svfprintf_r+0xd04>
 800af5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af5c:	ac2c      	add	r4, sp, #176	; 0xb0
 800af5e:	3b10      	subs	r3, #16
 800af60:	e7e2      	b.n	800af28 <_svfprintf_r+0x6f8>
 800af62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af64:	6063      	str	r3, [r4, #4]
 800af66:	4413      	add	r3, r2
 800af68:	9321      	str	r3, [sp, #132]	; 0x84
 800af6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800af6c:	3301      	adds	r3, #1
 800af6e:	2b07      	cmp	r3, #7
 800af70:	9320      	str	r3, [sp, #128]	; 0x80
 800af72:	dc01      	bgt.n	800af78 <_svfprintf_r+0x748>
 800af74:	3408      	adds	r4, #8
 800af76:	e008      	b.n	800af8a <_svfprintf_r+0x75a>
 800af78:	aa1f      	add	r2, sp, #124	; 0x7c
 800af7a:	4659      	mov	r1, fp
 800af7c:	4650      	mov	r0, sl
 800af7e:	f003 fe60 	bl	800ec42 <__ssprint_r>
 800af82:	2800      	cmp	r0, #0
 800af84:	f040 82d6 	bne.w	800b534 <_svfprintf_r+0xd04>
 800af88:	ac2c      	add	r4, sp, #176	; 0xb0
 800af8a:	ebc9 0606 	rsb	r6, r9, r6
 800af8e:	2e00      	cmp	r6, #0
 800af90:	dd2e      	ble.n	800aff0 <_svfprintf_r+0x7c0>
 800af92:	4b56      	ldr	r3, [pc, #344]	; (800b0ec <_svfprintf_r+0x8bc>)
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	2e10      	cmp	r6, #16
 800af98:	dd16      	ble.n	800afc8 <_svfprintf_r+0x798>
 800af9a:	2310      	movs	r3, #16
 800af9c:	6063      	str	r3, [r4, #4]
 800af9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa0:	3310      	adds	r3, #16
 800afa2:	9321      	str	r3, [sp, #132]	; 0x84
 800afa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800afa6:	3301      	adds	r3, #1
 800afa8:	2b07      	cmp	r3, #7
 800afaa:	9320      	str	r3, [sp, #128]	; 0x80
 800afac:	dc01      	bgt.n	800afb2 <_svfprintf_r+0x782>
 800afae:	3408      	adds	r4, #8
 800afb0:	e008      	b.n	800afc4 <_svfprintf_r+0x794>
 800afb2:	aa1f      	add	r2, sp, #124	; 0x7c
 800afb4:	4659      	mov	r1, fp
 800afb6:	4650      	mov	r0, sl
 800afb8:	f003 fe43 	bl	800ec42 <__ssprint_r>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f040 82b9 	bne.w	800b534 <_svfprintf_r+0xd04>
 800afc2:	ac2c      	add	r4, sp, #176	; 0xb0
 800afc4:	3e10      	subs	r6, #16
 800afc6:	e7e4      	b.n	800af92 <_svfprintf_r+0x762>
 800afc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800afca:	9821      	ldr	r0, [sp, #132]	; 0x84
 800afcc:	6066      	str	r6, [r4, #4]
 800afce:	3301      	adds	r3, #1
 800afd0:	4406      	add	r6, r0
 800afd2:	2b07      	cmp	r3, #7
 800afd4:	9621      	str	r6, [sp, #132]	; 0x84
 800afd6:	9320      	str	r3, [sp, #128]	; 0x80
 800afd8:	dc01      	bgt.n	800afde <_svfprintf_r+0x7ae>
 800afda:	3408      	adds	r4, #8
 800afdc:	e008      	b.n	800aff0 <_svfprintf_r+0x7c0>
 800afde:	aa1f      	add	r2, sp, #124	; 0x7c
 800afe0:	4659      	mov	r1, fp
 800afe2:	4650      	mov	r0, sl
 800afe4:	f003 fe2d 	bl	800ec42 <__ssprint_r>
 800afe8:	2800      	cmp	r0, #0
 800afea:	f040 82a3 	bne.w	800b534 <_svfprintf_r+0xd04>
 800afee:	ac2c      	add	r4, sp, #176	; 0xb0
 800aff0:	05eb      	lsls	r3, r5, #23
 800aff2:	d414      	bmi.n	800b01e <_svfprintf_r+0x7ee>
 800aff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aff6:	e884 0300 	stmia.w	r4, {r8, r9}
 800affa:	444b      	add	r3, r9
 800affc:	9321      	str	r3, [sp, #132]	; 0x84
 800affe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b000:	3301      	adds	r3, #1
 800b002:	2b07      	cmp	r3, #7
 800b004:	9320      	str	r3, [sp, #128]	; 0x80
 800b006:	f340 8244 	ble.w	800b492 <_svfprintf_r+0xc62>
 800b00a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b00c:	4659      	mov	r1, fp
 800b00e:	4650      	mov	r0, sl
 800b010:	f003 fe17 	bl	800ec42 <__ssprint_r>
 800b014:	2800      	cmp	r0, #0
 800b016:	f040 828d 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b01a:	ac2c      	add	r4, sp, #176	; 0xb0
 800b01c:	e23a      	b.n	800b494 <_svfprintf_r+0xc64>
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	2b65      	cmp	r3, #101	; 0x65
 800b022:	f340 81ad 	ble.w	800b380 <_svfprintf_r+0xb50>
 800b026:	2200      	movs	r2, #0
 800b028:	2300      	movs	r3, #0
 800b02a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b02e:	f7f5 fd67 	bl	8000b00 <__aeabi_dcmpeq>
 800b032:	2800      	cmp	r0, #0
 800b034:	d05e      	beq.n	800b0f4 <_svfprintf_r+0x8c4>
 800b036:	4b2e      	ldr	r3, [pc, #184]	; (800b0f0 <_svfprintf_r+0x8c0>)
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	2301      	movs	r3, #1
 800b03c:	6063      	str	r3, [r4, #4]
 800b03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b040:	3301      	adds	r3, #1
 800b042:	9321      	str	r3, [sp, #132]	; 0x84
 800b044:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b046:	3301      	adds	r3, #1
 800b048:	2b07      	cmp	r3, #7
 800b04a:	9320      	str	r3, [sp, #128]	; 0x80
 800b04c:	dc01      	bgt.n	800b052 <_svfprintf_r+0x822>
 800b04e:	3408      	adds	r4, #8
 800b050:	e008      	b.n	800b064 <_svfprintf_r+0x834>
 800b052:	aa1f      	add	r2, sp, #124	; 0x7c
 800b054:	4659      	mov	r1, fp
 800b056:	4650      	mov	r0, sl
 800b058:	f003 fdf3 	bl	800ec42 <__ssprint_r>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f040 8269 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b062:	ac2c      	add	r4, sp, #176	; 0xb0
 800b064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b066:	9a04      	ldr	r2, [sp, #16]
 800b068:	4293      	cmp	r3, r2
 800b06a:	db02      	blt.n	800b072 <_svfprintf_r+0x842>
 800b06c:	07ee      	lsls	r6, r5, #31
 800b06e:	f140 8211 	bpl.w	800b494 <_svfprintf_r+0xc64>
 800b072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	9b08      	ldr	r3, [sp, #32]
 800b078:	6063      	str	r3, [r4, #4]
 800b07a:	9a08      	ldr	r2, [sp, #32]
 800b07c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b07e:	4413      	add	r3, r2
 800b080:	9321      	str	r3, [sp, #132]	; 0x84
 800b082:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b084:	3301      	adds	r3, #1
 800b086:	2b07      	cmp	r3, #7
 800b088:	9320      	str	r3, [sp, #128]	; 0x80
 800b08a:	dc01      	bgt.n	800b090 <_svfprintf_r+0x860>
 800b08c:	3408      	adds	r4, #8
 800b08e:	e008      	b.n	800b0a2 <_svfprintf_r+0x872>
 800b090:	aa1f      	add	r2, sp, #124	; 0x7c
 800b092:	4659      	mov	r1, fp
 800b094:	4650      	mov	r0, sl
 800b096:	f003 fdd4 	bl	800ec42 <__ssprint_r>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f040 824a 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b0a0:	ac2c      	add	r4, sp, #176	; 0xb0
 800b0a2:	9b04      	ldr	r3, [sp, #16]
 800b0a4:	1e5e      	subs	r6, r3, #1
 800b0a6:	2e00      	cmp	r6, #0
 800b0a8:	f340 81f4 	ble.w	800b494 <_svfprintf_r+0xc64>
 800b0ac:	4f0f      	ldr	r7, [pc, #60]	; (800b0ec <_svfprintf_r+0x8bc>)
 800b0ae:	f04f 0810 	mov.w	r8, #16
 800b0b2:	2e10      	cmp	r6, #16
 800b0b4:	f340 8159 	ble.w	800b36a <_svfprintf_r+0xb3a>
 800b0b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0ba:	3310      	adds	r3, #16
 800b0bc:	9321      	str	r3, [sp, #132]	; 0x84
 800b0be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	2b07      	cmp	r3, #7
 800b0c4:	e884 0180 	stmia.w	r4, {r7, r8}
 800b0c8:	9320      	str	r3, [sp, #128]	; 0x80
 800b0ca:	dc01      	bgt.n	800b0d0 <_svfprintf_r+0x8a0>
 800b0cc:	3408      	adds	r4, #8
 800b0ce:	e008      	b.n	800b0e2 <_svfprintf_r+0x8b2>
 800b0d0:	aa1f      	add	r2, sp, #124	; 0x7c
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	4650      	mov	r0, sl
 800b0d6:	f003 fdb4 	bl	800ec42 <__ssprint_r>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f040 822a 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b0e0:	ac2c      	add	r4, sp, #176	; 0xb0
 800b0e2:	3e10      	subs	r6, #16
 800b0e4:	e7e5      	b.n	800b0b2 <_svfprintf_r+0x882>
 800b0e6:	bf00      	nop
 800b0e8:	0801198e 	.word	0x0801198e
 800b0ec:	0801194a 	.word	0x0801194a
 800b0f0:	0801198c 	.word	0x0801198c
 800b0f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dc7c      	bgt.n	800b1f4 <_svfprintf_r+0x9c4>
 800b0fa:	4b9f      	ldr	r3, [pc, #636]	; (800b378 <_svfprintf_r+0xb48>)
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	2301      	movs	r3, #1
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b104:	3301      	adds	r3, #1
 800b106:	9321      	str	r3, [sp, #132]	; 0x84
 800b108:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b10a:	3301      	adds	r3, #1
 800b10c:	2b07      	cmp	r3, #7
 800b10e:	9320      	str	r3, [sp, #128]	; 0x80
 800b110:	dc01      	bgt.n	800b116 <_svfprintf_r+0x8e6>
 800b112:	3408      	adds	r4, #8
 800b114:	e008      	b.n	800b128 <_svfprintf_r+0x8f8>
 800b116:	aa1f      	add	r2, sp, #124	; 0x7c
 800b118:	4659      	mov	r1, fp
 800b11a:	4650      	mov	r0, sl
 800b11c:	f003 fd91 	bl	800ec42 <__ssprint_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	f040 8207 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b126:	ac2c      	add	r4, sp, #176	; 0xb0
 800b128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b12a:	b923      	cbnz	r3, 800b136 <_svfprintf_r+0x906>
 800b12c:	9b04      	ldr	r3, [sp, #16]
 800b12e:	b913      	cbnz	r3, 800b136 <_svfprintf_r+0x906>
 800b130:	07e8      	lsls	r0, r5, #31
 800b132:	f140 81af 	bpl.w	800b494 <_svfprintf_r+0xc64>
 800b136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b138:	6023      	str	r3, [r4, #0]
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	6063      	str	r3, [r4, #4]
 800b13e:	9a08      	ldr	r2, [sp, #32]
 800b140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b142:	4413      	add	r3, r2
 800b144:	9321      	str	r3, [sp, #132]	; 0x84
 800b146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b148:	3301      	adds	r3, #1
 800b14a:	2b07      	cmp	r3, #7
 800b14c:	9320      	str	r3, [sp, #128]	; 0x80
 800b14e:	dc02      	bgt.n	800b156 <_svfprintf_r+0x926>
 800b150:	f104 0308 	add.w	r3, r4, #8
 800b154:	e008      	b.n	800b168 <_svfprintf_r+0x938>
 800b156:	aa1f      	add	r2, sp, #124	; 0x7c
 800b158:	4659      	mov	r1, fp
 800b15a:	4650      	mov	r0, sl
 800b15c:	f003 fd71 	bl	800ec42 <__ssprint_r>
 800b160:	2800      	cmp	r0, #0
 800b162:	f040 81e7 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b166:	ab2c      	add	r3, sp, #176	; 0xb0
 800b168:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b16a:	4276      	negs	r6, r6
 800b16c:	2e00      	cmp	r6, #0
 800b16e:	dd30      	ble.n	800b1d2 <_svfprintf_r+0x9a2>
 800b170:	4f82      	ldr	r7, [pc, #520]	; (800b37c <_svfprintf_r+0xb4c>)
 800b172:	2410      	movs	r4, #16
 800b174:	2e10      	cmp	r6, #16
 800b176:	dd16      	ble.n	800b1a6 <_svfprintf_r+0x976>
 800b178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b17a:	601f      	str	r7, [r3, #0]
 800b17c:	3210      	adds	r2, #16
 800b17e:	9221      	str	r2, [sp, #132]	; 0x84
 800b180:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b182:	605c      	str	r4, [r3, #4]
 800b184:	3201      	adds	r2, #1
 800b186:	2a07      	cmp	r2, #7
 800b188:	9220      	str	r2, [sp, #128]	; 0x80
 800b18a:	dc01      	bgt.n	800b190 <_svfprintf_r+0x960>
 800b18c:	3308      	adds	r3, #8
 800b18e:	e008      	b.n	800b1a2 <_svfprintf_r+0x972>
 800b190:	aa1f      	add	r2, sp, #124	; 0x7c
 800b192:	4659      	mov	r1, fp
 800b194:	4650      	mov	r0, sl
 800b196:	f003 fd54 	bl	800ec42 <__ssprint_r>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	f040 81ca 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b1a0:	ab2c      	add	r3, sp, #176	; 0xb0
 800b1a2:	3e10      	subs	r6, #16
 800b1a4:	e7e6      	b.n	800b174 <_svfprintf_r+0x944>
 800b1a6:	4a75      	ldr	r2, [pc, #468]	; (800b37c <_svfprintf_r+0xb4c>)
 800b1a8:	e883 0044 	stmia.w	r3, {r2, r6}
 800b1ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1ae:	4416      	add	r6, r2
 800b1b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1b2:	9621      	str	r6, [sp, #132]	; 0x84
 800b1b4:	3201      	adds	r2, #1
 800b1b6:	2a07      	cmp	r2, #7
 800b1b8:	9220      	str	r2, [sp, #128]	; 0x80
 800b1ba:	dc01      	bgt.n	800b1c0 <_svfprintf_r+0x990>
 800b1bc:	3308      	adds	r3, #8
 800b1be:	e008      	b.n	800b1d2 <_svfprintf_r+0x9a2>
 800b1c0:	aa1f      	add	r2, sp, #124	; 0x7c
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	f003 fd3c 	bl	800ec42 <__ssprint_r>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	f040 81b2 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b1d0:	ab2c      	add	r3, sp, #176	; 0xb0
 800b1d2:	9a04      	ldr	r2, [sp, #16]
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	9904      	ldr	r1, [sp, #16]
 800b1d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1da:	f8c3 8000 	str.w	r8, [r3]
 800b1de:	440a      	add	r2, r1
 800b1e0:	9221      	str	r2, [sp, #132]	; 0x84
 800b1e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1e4:	3201      	adds	r2, #1
 800b1e6:	2a07      	cmp	r2, #7
 800b1e8:	9220      	str	r2, [sp, #128]	; 0x80
 800b1ea:	f73f af0e 	bgt.w	800b00a <_svfprintf_r+0x7da>
 800b1ee:	f103 0408 	add.w	r4, r3, #8
 800b1f2:	e14f      	b.n	800b494 <_svfprintf_r+0xc64>
 800b1f4:	9b04      	ldr	r3, [sp, #16]
 800b1f6:	42bb      	cmp	r3, r7
 800b1f8:	bfa8      	it	ge
 800b1fa:	463b      	movge	r3, r7
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	461e      	mov	r6, r3
 800b200:	dd15      	ble.n	800b22e <_svfprintf_r+0x9fe>
 800b202:	6063      	str	r3, [r4, #4]
 800b204:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b206:	f8c4 8000 	str.w	r8, [r4]
 800b20a:	4433      	add	r3, r6
 800b20c:	9321      	str	r3, [sp, #132]	; 0x84
 800b20e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b210:	3301      	adds	r3, #1
 800b212:	2b07      	cmp	r3, #7
 800b214:	9320      	str	r3, [sp, #128]	; 0x80
 800b216:	dc01      	bgt.n	800b21c <_svfprintf_r+0x9ec>
 800b218:	3408      	adds	r4, #8
 800b21a:	e008      	b.n	800b22e <_svfprintf_r+0x9fe>
 800b21c:	aa1f      	add	r2, sp, #124	; 0x7c
 800b21e:	4659      	mov	r1, fp
 800b220:	4650      	mov	r0, sl
 800b222:	f003 fd0e 	bl	800ec42 <__ssprint_r>
 800b226:	2800      	cmp	r0, #0
 800b228:	f040 8184 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b22c:	ac2c      	add	r4, sp, #176	; 0xb0
 800b22e:	2e00      	cmp	r6, #0
 800b230:	bfac      	ite	ge
 800b232:	1bbe      	subge	r6, r7, r6
 800b234:	463e      	movlt	r6, r7
 800b236:	2e00      	cmp	r6, #0
 800b238:	dd30      	ble.n	800b29c <_svfprintf_r+0xa6c>
 800b23a:	f04f 0910 	mov.w	r9, #16
 800b23e:	4b4f      	ldr	r3, [pc, #316]	; (800b37c <_svfprintf_r+0xb4c>)
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	2e10      	cmp	r6, #16
 800b244:	dd16      	ble.n	800b274 <_svfprintf_r+0xa44>
 800b246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b248:	f8c4 9004 	str.w	r9, [r4, #4]
 800b24c:	3310      	adds	r3, #16
 800b24e:	9321      	str	r3, [sp, #132]	; 0x84
 800b250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b252:	3301      	adds	r3, #1
 800b254:	2b07      	cmp	r3, #7
 800b256:	9320      	str	r3, [sp, #128]	; 0x80
 800b258:	dc01      	bgt.n	800b25e <_svfprintf_r+0xa2e>
 800b25a:	3408      	adds	r4, #8
 800b25c:	e008      	b.n	800b270 <_svfprintf_r+0xa40>
 800b25e:	aa1f      	add	r2, sp, #124	; 0x7c
 800b260:	4659      	mov	r1, fp
 800b262:	4650      	mov	r0, sl
 800b264:	f003 fced 	bl	800ec42 <__ssprint_r>
 800b268:	2800      	cmp	r0, #0
 800b26a:	f040 8163 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b26e:	ac2c      	add	r4, sp, #176	; 0xb0
 800b270:	3e10      	subs	r6, #16
 800b272:	e7e4      	b.n	800b23e <_svfprintf_r+0xa0e>
 800b274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b276:	6066      	str	r6, [r4, #4]
 800b278:	441e      	add	r6, r3
 800b27a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b27c:	9621      	str	r6, [sp, #132]	; 0x84
 800b27e:	3301      	adds	r3, #1
 800b280:	2b07      	cmp	r3, #7
 800b282:	9320      	str	r3, [sp, #128]	; 0x80
 800b284:	dc01      	bgt.n	800b28a <_svfprintf_r+0xa5a>
 800b286:	3408      	adds	r4, #8
 800b288:	e008      	b.n	800b29c <_svfprintf_r+0xa6c>
 800b28a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b28c:	4659      	mov	r1, fp
 800b28e:	4650      	mov	r0, sl
 800b290:	f003 fcd7 	bl	800ec42 <__ssprint_r>
 800b294:	2800      	cmp	r0, #0
 800b296:	f040 814d 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b29a:	ac2c      	add	r4, sp, #176	; 0xb0
 800b29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b29e:	9a04      	ldr	r2, [sp, #16]
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	4447      	add	r7, r8
 800b2a4:	db01      	blt.n	800b2aa <_svfprintf_r+0xa7a>
 800b2a6:	07e9      	lsls	r1, r5, #31
 800b2a8:	d517      	bpl.n	800b2da <_svfprintf_r+0xaaa>
 800b2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	9b08      	ldr	r3, [sp, #32]
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	9a08      	ldr	r2, [sp, #32]
 800b2b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2b6:	4413      	add	r3, r2
 800b2b8:	9321      	str	r3, [sp, #132]	; 0x84
 800b2ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b2bc:	3301      	adds	r3, #1
 800b2be:	2b07      	cmp	r3, #7
 800b2c0:	9320      	str	r3, [sp, #128]	; 0x80
 800b2c2:	dc01      	bgt.n	800b2c8 <_svfprintf_r+0xa98>
 800b2c4:	3408      	adds	r4, #8
 800b2c6:	e008      	b.n	800b2da <_svfprintf_r+0xaaa>
 800b2c8:	aa1f      	add	r2, sp, #124	; 0x7c
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	4650      	mov	r0, sl
 800b2ce:	f003 fcb8 	bl	800ec42 <__ssprint_r>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f040 812e 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b2d8:	ac2c      	add	r4, sp, #176	; 0xb0
 800b2da:	9b04      	ldr	r3, [sp, #16]
 800b2dc:	9a04      	ldr	r2, [sp, #16]
 800b2de:	eb08 0603 	add.w	r6, r8, r3
 800b2e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2e4:	1bf6      	subs	r6, r6, r7
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	429e      	cmp	r6, r3
 800b2ea:	bfa8      	it	ge
 800b2ec:	461e      	movge	r6, r3
 800b2ee:	2e00      	cmp	r6, #0
 800b2f0:	dd14      	ble.n	800b31c <_svfprintf_r+0xaec>
 800b2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2f4:	6027      	str	r7, [r4, #0]
 800b2f6:	4433      	add	r3, r6
 800b2f8:	9321      	str	r3, [sp, #132]	; 0x84
 800b2fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b2fc:	6066      	str	r6, [r4, #4]
 800b2fe:	3301      	adds	r3, #1
 800b300:	2b07      	cmp	r3, #7
 800b302:	9320      	str	r3, [sp, #128]	; 0x80
 800b304:	dc01      	bgt.n	800b30a <_svfprintf_r+0xada>
 800b306:	3408      	adds	r4, #8
 800b308:	e008      	b.n	800b31c <_svfprintf_r+0xaec>
 800b30a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b30c:	4659      	mov	r1, fp
 800b30e:	4650      	mov	r0, sl
 800b310:	f003 fc97 	bl	800ec42 <__ssprint_r>
 800b314:	2800      	cmp	r0, #0
 800b316:	f040 810d 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b31a:	ac2c      	add	r4, sp, #176	; 0xb0
 800b31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	2e00      	cmp	r6, #0
 800b322:	eba2 0303 	sub.w	r3, r2, r3
 800b326:	bfac      	ite	ge
 800b328:	1b9e      	subge	r6, r3, r6
 800b32a:	461e      	movlt	r6, r3
 800b32c:	2e00      	cmp	r6, #0
 800b32e:	f340 80b1 	ble.w	800b494 <_svfprintf_r+0xc64>
 800b332:	4f12      	ldr	r7, [pc, #72]	; (800b37c <_svfprintf_r+0xb4c>)
 800b334:	f04f 0810 	mov.w	r8, #16
 800b338:	2e10      	cmp	r6, #16
 800b33a:	dd16      	ble.n	800b36a <_svfprintf_r+0xb3a>
 800b33c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b33e:	3310      	adds	r3, #16
 800b340:	9321      	str	r3, [sp, #132]	; 0x84
 800b342:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b344:	3301      	adds	r3, #1
 800b346:	2b07      	cmp	r3, #7
 800b348:	e884 0180 	stmia.w	r4, {r7, r8}
 800b34c:	9320      	str	r3, [sp, #128]	; 0x80
 800b34e:	dc01      	bgt.n	800b354 <_svfprintf_r+0xb24>
 800b350:	3408      	adds	r4, #8
 800b352:	e008      	b.n	800b366 <_svfprintf_r+0xb36>
 800b354:	aa1f      	add	r2, sp, #124	; 0x7c
 800b356:	4659      	mov	r1, fp
 800b358:	4650      	mov	r0, sl
 800b35a:	f003 fc72 	bl	800ec42 <__ssprint_r>
 800b35e:	2800      	cmp	r0, #0
 800b360:	f040 80e8 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b364:	ac2c      	add	r4, sp, #176	; 0xb0
 800b366:	3e10      	subs	r6, #16
 800b368:	e7e6      	b.n	800b338 <_svfprintf_r+0xb08>
 800b36a:	4b04      	ldr	r3, [pc, #16]	; (800b37c <_svfprintf_r+0xb4c>)
 800b36c:	e884 0048 	stmia.w	r4, {r3, r6}
 800b370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b372:	441e      	add	r6, r3
 800b374:	9621      	str	r6, [sp, #132]	; 0x84
 800b376:	e642      	b.n	800affe <_svfprintf_r+0x7ce>
 800b378:	0801198c 	.word	0x0801198c
 800b37c:	0801194a 	.word	0x0801194a
 800b380:	9b04      	ldr	r3, [sp, #16]
 800b382:	2b01      	cmp	r3, #1
 800b384:	dc01      	bgt.n	800b38a <_svfprintf_r+0xb5a>
 800b386:	07ea      	lsls	r2, r5, #31
 800b388:	d573      	bpl.n	800b472 <_svfprintf_r+0xc42>
 800b38a:	2301      	movs	r3, #1
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b390:	f8c4 8000 	str.w	r8, [r4]
 800b394:	3301      	adds	r3, #1
 800b396:	9321      	str	r3, [sp, #132]	; 0x84
 800b398:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b39a:	3301      	adds	r3, #1
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	9320      	str	r3, [sp, #128]	; 0x80
 800b3a0:	dc01      	bgt.n	800b3a6 <_svfprintf_r+0xb76>
 800b3a2:	3408      	adds	r4, #8
 800b3a4:	e008      	b.n	800b3b8 <_svfprintf_r+0xb88>
 800b3a6:	aa1f      	add	r2, sp, #124	; 0x7c
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	4650      	mov	r0, sl
 800b3ac:	f003 fc49 	bl	800ec42 <__ssprint_r>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f040 80bf 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b3b6:	ac2c      	add	r4, sp, #176	; 0xb0
 800b3b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	9b08      	ldr	r3, [sp, #32]
 800b3be:	6063      	str	r3, [r4, #4]
 800b3c0:	9a08      	ldr	r2, [sp, #32]
 800b3c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c4:	4413      	add	r3, r2
 800b3c6:	9321      	str	r3, [sp, #132]	; 0x84
 800b3c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	2b07      	cmp	r3, #7
 800b3ce:	9320      	str	r3, [sp, #128]	; 0x80
 800b3d0:	dc01      	bgt.n	800b3d6 <_svfprintf_r+0xba6>
 800b3d2:	3408      	adds	r4, #8
 800b3d4:	e008      	b.n	800b3e8 <_svfprintf_r+0xbb8>
 800b3d6:	aa1f      	add	r2, sp, #124	; 0x7c
 800b3d8:	4659      	mov	r1, fp
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f003 fc31 	bl	800ec42 <__ssprint_r>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f040 80a7 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b3e6:	ac2c      	add	r4, sp, #176	; 0xb0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3f0:	f7f5 fb86 	bl	8000b00 <__aeabi_dcmpeq>
 800b3f4:	9b04      	ldr	r3, [sp, #16]
 800b3f6:	1e5e      	subs	r6, r3, #1
 800b3f8:	b9b8      	cbnz	r0, 800b42a <_svfprintf_r+0xbfa>
 800b3fa:	f108 0301 	add.w	r3, r8, #1
 800b3fe:	e884 0048 	stmia.w	r4, {r3, r6}
 800b402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b404:	9a04      	ldr	r2, [sp, #16]
 800b406:	3b01      	subs	r3, #1
 800b408:	4413      	add	r3, r2
 800b40a:	9321      	str	r3, [sp, #132]	; 0x84
 800b40c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b40e:	3301      	adds	r3, #1
 800b410:	2b07      	cmp	r3, #7
 800b412:	9320      	str	r3, [sp, #128]	; 0x80
 800b414:	dd34      	ble.n	800b480 <_svfprintf_r+0xc50>
 800b416:	aa1f      	add	r2, sp, #124	; 0x7c
 800b418:	4659      	mov	r1, fp
 800b41a:	4650      	mov	r0, sl
 800b41c:	f003 fc11 	bl	800ec42 <__ssprint_r>
 800b420:	2800      	cmp	r0, #0
 800b422:	f040 8087 	bne.w	800b534 <_svfprintf_r+0xd04>
 800b426:	ac2c      	add	r4, sp, #176	; 0xb0
 800b428:	e02b      	b.n	800b482 <_svfprintf_r+0xc52>
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	dd29      	ble.n	800b482 <_svfprintf_r+0xc52>
 800b42e:	4fa7      	ldr	r7, [pc, #668]	; (800b6cc <_svfprintf_r+0xe9c>)
 800b430:	f04f 0810 	mov.w	r8, #16
 800b434:	2e10      	cmp	r6, #16
 800b436:	dd15      	ble.n	800b464 <_svfprintf_r+0xc34>
 800b438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b43a:	3310      	adds	r3, #16
 800b43c:	9321      	str	r3, [sp, #132]	; 0x84
 800b43e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b440:	3301      	adds	r3, #1
 800b442:	2b07      	cmp	r3, #7
 800b444:	e884 0180 	stmia.w	r4, {r7, r8}
 800b448:	9320      	str	r3, [sp, #128]	; 0x80
 800b44a:	dc01      	bgt.n	800b450 <_svfprintf_r+0xc20>
 800b44c:	3408      	adds	r4, #8
 800b44e:	e007      	b.n	800b460 <_svfprintf_r+0xc30>
 800b450:	aa1f      	add	r2, sp, #124	; 0x7c
 800b452:	4659      	mov	r1, fp
 800b454:	4650      	mov	r0, sl
 800b456:	f003 fbf4 	bl	800ec42 <__ssprint_r>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d16a      	bne.n	800b534 <_svfprintf_r+0xd04>
 800b45e:	ac2c      	add	r4, sp, #176	; 0xb0
 800b460:	3e10      	subs	r6, #16
 800b462:	e7e7      	b.n	800b434 <_svfprintf_r+0xc04>
 800b464:	4b99      	ldr	r3, [pc, #612]	; (800b6cc <_svfprintf_r+0xe9c>)
 800b466:	e884 0048 	stmia.w	r4, {r3, r6}
 800b46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b46c:	441e      	add	r6, r3
 800b46e:	9621      	str	r6, [sp, #132]	; 0x84
 800b470:	e7cc      	b.n	800b40c <_svfprintf_r+0xbdc>
 800b472:	2301      	movs	r3, #1
 800b474:	6063      	str	r3, [r4, #4]
 800b476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b478:	f8c4 8000 	str.w	r8, [r4]
 800b47c:	3301      	adds	r3, #1
 800b47e:	e7c4      	b.n	800b40a <_svfprintf_r+0xbda>
 800b480:	3408      	adds	r4, #8
 800b482:	ab1b      	add	r3, sp, #108	; 0x6c
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b488:	6063      	str	r3, [r4, #4]
 800b48a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b48c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b48e:	4413      	add	r3, r2
 800b490:	e5b4      	b.n	800affc <_svfprintf_r+0x7cc>
 800b492:	3408      	adds	r4, #8
 800b494:	076b      	lsls	r3, r5, #29
 800b496:	d40b      	bmi.n	800b4b0 <_svfprintf_r+0xc80>
 800b498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b49e:	428a      	cmp	r2, r1
 800b4a0:	bfac      	ite	ge
 800b4a2:	189b      	addge	r3, r3, r2
 800b4a4:	185b      	addlt	r3, r3, r1
 800b4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d035      	beq.n	800b51a <_svfprintf_r+0xcea>
 800b4ae:	e02e      	b.n	800b50e <_svfprintf_r+0xcde>
 800b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4b4:	1a9d      	subs	r5, r3, r2
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	ddee      	ble.n	800b498 <_svfprintf_r+0xc68>
 800b4ba:	2610      	movs	r6, #16
 800b4bc:	4b84      	ldr	r3, [pc, #528]	; (800b6d0 <_svfprintf_r+0xea0>)
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	2d10      	cmp	r5, #16
 800b4c2:	dd13      	ble.n	800b4ec <_svfprintf_r+0xcbc>
 800b4c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4c6:	6066      	str	r6, [r4, #4]
 800b4c8:	3310      	adds	r3, #16
 800b4ca:	9321      	str	r3, [sp, #132]	; 0x84
 800b4cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	2b07      	cmp	r3, #7
 800b4d2:	9320      	str	r3, [sp, #128]	; 0x80
 800b4d4:	dc01      	bgt.n	800b4da <_svfprintf_r+0xcaa>
 800b4d6:	3408      	adds	r4, #8
 800b4d8:	e006      	b.n	800b4e8 <_svfprintf_r+0xcb8>
 800b4da:	aa1f      	add	r2, sp, #124	; 0x7c
 800b4dc:	4659      	mov	r1, fp
 800b4de:	4650      	mov	r0, sl
 800b4e0:	f003 fbaf 	bl	800ec42 <__ssprint_r>
 800b4e4:	bb30      	cbnz	r0, 800b534 <_svfprintf_r+0xd04>
 800b4e6:	ac2c      	add	r4, sp, #176	; 0xb0
 800b4e8:	3d10      	subs	r5, #16
 800b4ea:	e7e7      	b.n	800b4bc <_svfprintf_r+0xc8c>
 800b4ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4ee:	6065      	str	r5, [r4, #4]
 800b4f0:	441d      	add	r5, r3
 800b4f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b4f4:	9521      	str	r5, [sp, #132]	; 0x84
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	2b07      	cmp	r3, #7
 800b4fa:	9320      	str	r3, [sp, #128]	; 0x80
 800b4fc:	ddcc      	ble.n	800b498 <_svfprintf_r+0xc68>
 800b4fe:	aa1f      	add	r2, sp, #124	; 0x7c
 800b500:	4659      	mov	r1, fp
 800b502:	4650      	mov	r0, sl
 800b504:	f003 fb9d 	bl	800ec42 <__ssprint_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d0c5      	beq.n	800b498 <_svfprintf_r+0xc68>
 800b50c:	e012      	b.n	800b534 <_svfprintf_r+0xd04>
 800b50e:	aa1f      	add	r2, sp, #124	; 0x7c
 800b510:	4659      	mov	r1, fp
 800b512:	4650      	mov	r0, sl
 800b514:	f003 fb95 	bl	800ec42 <__ssprint_r>
 800b518:	b960      	cbnz	r0, 800b534 <_svfprintf_r+0xd04>
 800b51a:	2300      	movs	r3, #0
 800b51c:	9320      	str	r3, [sp, #128]	; 0x80
 800b51e:	9f03      	ldr	r7, [sp, #12]
 800b520:	ac2c      	add	r4, sp, #176	; 0xb0
 800b522:	f7ff b9bb 	b.w	800a89c <_svfprintf_r+0x6c>
 800b526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b528:	b123      	cbz	r3, 800b534 <_svfprintf_r+0xd04>
 800b52a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b52c:	4659      	mov	r1, fp
 800b52e:	4650      	mov	r0, sl
 800b530:	f003 fb87 	bl	800ec42 <__ssprint_r>
 800b534:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b538:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53e:	bf18      	it	ne
 800b540:	f04f 33ff 	movne.w	r3, #4294967295
 800b544:	4618      	mov	r0, r3
 800b546:	e12e      	b.n	800b7a6 <_svfprintf_r+0xf76>
 800b548:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b54c:	4610      	mov	r0, r2
 800b54e:	4619      	mov	r1, r3
 800b550:	f7f5 fb08 	bl	8000b64 <__aeabi_dcmpun>
 800b554:	b160      	cbz	r0, 800b570 <_svfprintf_r+0xd40>
 800b556:	4b5f      	ldr	r3, [pc, #380]	; (800b6d4 <_svfprintf_r+0xea4>)
 800b558:	4a5f      	ldr	r2, [pc, #380]	; (800b6d8 <_svfprintf_r+0xea8>)
 800b55a:	9902      	ldr	r1, [sp, #8]
 800b55c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800b560:	2947      	cmp	r1, #71	; 0x47
 800b562:	bfcc      	ite	gt
 800b564:	4690      	movgt	r8, r2
 800b566:	4698      	movle	r8, r3
 800b568:	f04f 0903 	mov.w	r9, #3
 800b56c:	2600      	movs	r6, #0
 800b56e:	e44e      	b.n	800ae0e <_svfprintf_r+0x5de>
 800b570:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b574:	d00a      	beq.n	800b58c <_svfprintf_r+0xd5c>
 800b576:	9b02      	ldr	r3, [sp, #8]
 800b578:	f023 0320 	bic.w	r3, r3, #32
 800b57c:	2b47      	cmp	r3, #71	; 0x47
 800b57e:	d107      	bne.n	800b590 <_svfprintf_r+0xd60>
 800b580:	f1b9 0f00 	cmp.w	r9, #0
 800b584:	bf08      	it	eq
 800b586:	f04f 0901 	moveq.w	r9, #1
 800b58a:	e001      	b.n	800b590 <_svfprintf_r+0xd60>
 800b58c:	f04f 0906 	mov.w	r9, #6
 800b590:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800b594:	930c      	str	r3, [sp, #48]	; 0x30
 800b596:	9b07      	ldr	r3, [sp, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	da07      	bge.n	800b5ac <_svfprintf_r+0xd7c>
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	930e      	str	r3, [sp, #56]	; 0x38
 800b5a0:	9b07      	ldr	r3, [sp, #28]
 800b5a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5a8:	232d      	movs	r3, #45	; 0x2d
 800b5aa:	e004      	b.n	800b5b6 <_svfprintf_r+0xd86>
 800b5ac:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b5b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	f023 0720 	bic.w	r7, r3, #32
 800b5be:	2f46      	cmp	r7, #70	; 0x46
 800b5c0:	d004      	beq.n	800b5cc <_svfprintf_r+0xd9c>
 800b5c2:	2f45      	cmp	r7, #69	; 0x45
 800b5c4:	d105      	bne.n	800b5d2 <_svfprintf_r+0xda2>
 800b5c6:	f109 0601 	add.w	r6, r9, #1
 800b5ca:	e003      	b.n	800b5d4 <_svfprintf_r+0xda4>
 800b5cc:	464e      	mov	r6, r9
 800b5ce:	2103      	movs	r1, #3
 800b5d0:	e001      	b.n	800b5d6 <_svfprintf_r+0xda6>
 800b5d2:	464e      	mov	r6, r9
 800b5d4:	2102      	movs	r1, #2
 800b5d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	ab1a      	add	r3, sp, #104	; 0x68
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	4632      	mov	r2, r6
 800b5e0:	ab19      	add	r3, sp, #100	; 0x64
 800b5e2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	f001 fa16 	bl	800ca18 <_dtoa_r>
 800b5ec:	2f47      	cmp	r7, #71	; 0x47
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	d102      	bne.n	800b5f8 <_svfprintf_r+0xdc8>
 800b5f2:	07eb      	lsls	r3, r5, #31
 800b5f4:	f140 80cd 	bpl.w	800b792 <_svfprintf_r+0xf62>
 800b5f8:	eb08 0306 	add.w	r3, r8, r6
 800b5fc:	2f46      	cmp	r7, #70	; 0x46
 800b5fe:	9304      	str	r3, [sp, #16]
 800b600:	d111      	bne.n	800b626 <_svfprintf_r+0xdf6>
 800b602:	f898 3000 	ldrb.w	r3, [r8]
 800b606:	2b30      	cmp	r3, #48	; 0x30
 800b608:	d109      	bne.n	800b61e <_svfprintf_r+0xdee>
 800b60a:	2200      	movs	r2, #0
 800b60c:	2300      	movs	r3, #0
 800b60e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b612:	f7f5 fa75 	bl	8000b00 <__aeabi_dcmpeq>
 800b616:	b910      	cbnz	r0, 800b61e <_svfprintf_r+0xdee>
 800b618:	f1c6 0601 	rsb	r6, r6, #1
 800b61c:	9619      	str	r6, [sp, #100]	; 0x64
 800b61e:	9a04      	ldr	r2, [sp, #16]
 800b620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b622:	441a      	add	r2, r3
 800b624:	9204      	str	r2, [sp, #16]
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b62e:	f7f5 fa67 	bl	8000b00 <__aeabi_dcmpeq>
 800b632:	b908      	cbnz	r0, 800b638 <_svfprintf_r+0xe08>
 800b634:	2230      	movs	r2, #48	; 0x30
 800b636:	e002      	b.n	800b63e <_svfprintf_r+0xe0e>
 800b638:	9b04      	ldr	r3, [sp, #16]
 800b63a:	931d      	str	r3, [sp, #116]	; 0x74
 800b63c:	e007      	b.n	800b64e <_svfprintf_r+0xe1e>
 800b63e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b640:	9904      	ldr	r1, [sp, #16]
 800b642:	4299      	cmp	r1, r3
 800b644:	d903      	bls.n	800b64e <_svfprintf_r+0xe1e>
 800b646:	1c59      	adds	r1, r3, #1
 800b648:	911d      	str	r1, [sp, #116]	; 0x74
 800b64a:	701a      	strb	r2, [r3, #0]
 800b64c:	e7f7      	b.n	800b63e <_svfprintf_r+0xe0e>
 800b64e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b650:	2f47      	cmp	r7, #71	; 0x47
 800b652:	ebc8 0303 	rsb	r3, r8, r3
 800b656:	9304      	str	r3, [sp, #16]
 800b658:	d108      	bne.n	800b66c <_svfprintf_r+0xe3c>
 800b65a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b65c:	1cdf      	adds	r7, r3, #3
 800b65e:	db01      	blt.n	800b664 <_svfprintf_r+0xe34>
 800b660:	4599      	cmp	r9, r3
 800b662:	da68      	bge.n	800b736 <_svfprintf_r+0xf06>
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	3b02      	subs	r3, #2
 800b668:	9302      	str	r3, [sp, #8]
 800b66a:	e002      	b.n	800b672 <_svfprintf_r+0xe42>
 800b66c:	9b02      	ldr	r3, [sp, #8]
 800b66e:	2b65      	cmp	r3, #101	; 0x65
 800b670:	dc4a      	bgt.n	800b708 <_svfprintf_r+0xed8>
 800b672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b674:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b678:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800b67c:	3b01      	subs	r3, #1
 800b67e:	2b00      	cmp	r3, #0
 800b680:	9319      	str	r3, [sp, #100]	; 0x64
 800b682:	bfba      	itte	lt
 800b684:	425b      	neglt	r3, r3
 800b686:	222d      	movlt	r2, #45	; 0x2d
 800b688:	222b      	movge	r2, #43	; 0x2b
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800b690:	dd24      	ble.n	800b6dc <_svfprintf_r+0xeac>
 800b692:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800b696:	200a      	movs	r0, #10
 800b698:	fb93 f1f0 	sdiv	r1, r3, r0
 800b69c:	fb00 3311 	mls	r3, r0, r1, r3
 800b6a0:	3330      	adds	r3, #48	; 0x30
 800b6a2:	2909      	cmp	r1, #9
 800b6a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	dcf5      	bgt.n	800b698 <_svfprintf_r+0xe68>
 800b6ac:	3330      	adds	r3, #48	; 0x30
 800b6ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6b2:	1e51      	subs	r1, r2, #1
 800b6b4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800b6b8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800b6bc:	4281      	cmp	r1, r0
 800b6be:	461a      	mov	r2, r3
 800b6c0:	d213      	bcs.n	800b6ea <_svfprintf_r+0xeba>
 800b6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6c6:	f803 2b01 	strb.w	r2, [r3], #1
 800b6ca:	e7f7      	b.n	800b6bc <_svfprintf_r+0xe8c>
 800b6cc:	0801194a 	.word	0x0801194a
 800b6d0:	0801198e 	.word	0x0801198e
 800b6d4:	08011962 	.word	0x08011962
 800b6d8:	08011966 	.word	0x08011966
 800b6dc:	2230      	movs	r2, #48	; 0x30
 800b6de:	4413      	add	r3, r2
 800b6e0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800b6e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b6e8:	aa1c      	add	r2, sp, #112	; 0x70
 800b6ea:	ab1b      	add	r3, sp, #108	; 0x6c
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	9a04      	ldr	r2, [sp, #16]
 800b6f0:	9310      	str	r3, [sp, #64]	; 0x40
 800b6f2:	2a01      	cmp	r2, #1
 800b6f4:	eb03 0902 	add.w	r9, r3, r2
 800b6f8:	dc02      	bgt.n	800b700 <_svfprintf_r+0xed0>
 800b6fa:	f015 0701 	ands.w	r7, r5, #1
 800b6fe:	d032      	beq.n	800b766 <_svfprintf_r+0xf36>
 800b700:	9b08      	ldr	r3, [sp, #32]
 800b702:	2700      	movs	r7, #0
 800b704:	4499      	add	r9, r3
 800b706:	e02e      	b.n	800b766 <_svfprintf_r+0xf36>
 800b708:	9b02      	ldr	r3, [sp, #8]
 800b70a:	2b66      	cmp	r3, #102	; 0x66
 800b70c:	d113      	bne.n	800b736 <_svfprintf_r+0xf06>
 800b70e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b710:	2b00      	cmp	r3, #0
 800b712:	dd07      	ble.n	800b724 <_svfprintf_r+0xef4>
 800b714:	f1b9 0f00 	cmp.w	r9, #0
 800b718:	d101      	bne.n	800b71e <_svfprintf_r+0xeee>
 800b71a:	07ee      	lsls	r6, r5, #31
 800b71c:	d521      	bpl.n	800b762 <_svfprintf_r+0xf32>
 800b71e:	9a08      	ldr	r2, [sp, #32]
 800b720:	4413      	add	r3, r2
 800b722:	e006      	b.n	800b732 <_svfprintf_r+0xf02>
 800b724:	f1b9 0f00 	cmp.w	r9, #0
 800b728:	d101      	bne.n	800b72e <_svfprintf_r+0xefe>
 800b72a:	07ed      	lsls	r5, r5, #31
 800b72c:	d514      	bpl.n	800b758 <_svfprintf_r+0xf28>
 800b72e:	9b08      	ldr	r3, [sp, #32]
 800b730:	3301      	adds	r3, #1
 800b732:	444b      	add	r3, r9
 800b734:	e015      	b.n	800b762 <_svfprintf_r+0xf32>
 800b736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	4293      	cmp	r3, r2
 800b73c:	db03      	blt.n	800b746 <_svfprintf_r+0xf16>
 800b73e:	07e8      	lsls	r0, r5, #31
 800b740:	d50d      	bpl.n	800b75e <_svfprintf_r+0xf2e>
 800b742:	9a08      	ldr	r2, [sp, #32]
 800b744:	e006      	b.n	800b754 <_svfprintf_r+0xf24>
 800b746:	9a04      	ldr	r2, [sp, #16]
 800b748:	9908      	ldr	r1, [sp, #32]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	440a      	add	r2, r1
 800b74e:	dc05      	bgt.n	800b75c <_svfprintf_r+0xf2c>
 800b750:	f1c3 0301 	rsb	r3, r3, #1
 800b754:	4413      	add	r3, r2
 800b756:	e002      	b.n	800b75e <_svfprintf_r+0xf2e>
 800b758:	2301      	movs	r3, #1
 800b75a:	e002      	b.n	800b762 <_svfprintf_r+0xf32>
 800b75c:	4613      	mov	r3, r2
 800b75e:	2267      	movs	r2, #103	; 0x67
 800b760:	9202      	str	r2, [sp, #8]
 800b762:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b764:	4699      	mov	r9, r3
 800b766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b768:	b113      	cbz	r3, 800b770 <_svfprintf_r+0xf40>
 800b76a:	232d      	movs	r3, #45	; 0x2d
 800b76c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800b770:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b772:	2600      	movs	r6, #0
 800b774:	f7ff bb4c 	b.w	800ae10 <_svfprintf_r+0x5e0>
 800b778:	2200      	movs	r2, #0
 800b77a:	2300      	movs	r3, #0
 800b77c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b780:	f7f5 f9c8 	bl	8000b14 <__aeabi_dcmplt>
 800b784:	b110      	cbz	r0, 800b78c <_svfprintf_r+0xf5c>
 800b786:	232d      	movs	r3, #45	; 0x2d
 800b788:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800b78c:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <_svfprintf_r+0xf7c>)
 800b78e:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <_svfprintf_r+0xf80>)
 800b790:	e6e3      	b.n	800b55a <_svfprintf_r+0xd2a>
 800b792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b794:	1a1b      	subs	r3, r3, r0
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	e75f      	b.n	800b65a <_svfprintf_r+0xe2a>
 800b79a:	ea56 0207 	orrs.w	r2, r6, r7
 800b79e:	f47f aaaa 	bne.w	800acf6 <_svfprintf_r+0x4c6>
 800b7a2:	f7ff baaf 	b.w	800ad04 <_svfprintf_r+0x4d4>
 800b7a6:	b03d      	add	sp, #244	; 0xf4
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	0801195a 	.word	0x0801195a
 800b7b0:	0801195e 	.word	0x0801195e
 800b7b4:	00000000 	.word	0x00000000

0800b7b8 <_vfprintf_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	b0bd      	sub	sp, #244	; 0xf4
 800b7be:	468b      	mov	fp, r1
 800b7c0:	9205      	str	r2, [sp, #20]
 800b7c2:	461c      	mov	r4, r3
 800b7c4:	461f      	mov	r7, r3
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	f002 fab8 	bl	800dd3c <_localeconv_r>
 800b7cc:	6803      	ldr	r3, [r0, #0]
 800b7ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f4 fd1d 	bl	8000210 <strlen>
 800b7d6:	9008      	str	r0, [sp, #32]
 800b7d8:	f1ba 0f00 	cmp.w	sl, #0
 800b7dc:	d005      	beq.n	800b7ea <_vfprintf_r+0x32>
 800b7de:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b7e2:	b913      	cbnz	r3, 800b7ea <_vfprintf_r+0x32>
 800b7e4:	4650      	mov	r0, sl
 800b7e6:	f001 ffb1 	bl	800d74c <__sinit>
 800b7ea:	4b9d      	ldr	r3, [pc, #628]	; (800ba60 <_vfprintf_r+0x2a8>)
 800b7ec:	459b      	cmp	fp, r3
 800b7ee:	d102      	bne.n	800b7f6 <_vfprintf_r+0x3e>
 800b7f0:	f8da b004 	ldr.w	fp, [sl, #4]
 800b7f4:	e00a      	b.n	800b80c <_vfprintf_r+0x54>
 800b7f6:	4b9b      	ldr	r3, [pc, #620]	; (800ba64 <_vfprintf_r+0x2ac>)
 800b7f8:	459b      	cmp	fp, r3
 800b7fa:	d102      	bne.n	800b802 <_vfprintf_r+0x4a>
 800b7fc:	f8da b008 	ldr.w	fp, [sl, #8]
 800b800:	e004      	b.n	800b80c <_vfprintf_r+0x54>
 800b802:	4b99      	ldr	r3, [pc, #612]	; (800ba68 <_vfprintf_r+0x2b0>)
 800b804:	459b      	cmp	fp, r3
 800b806:	bf08      	it	eq
 800b808:	f8da b00c 	ldreq.w	fp, [sl, #12]
 800b80c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800b810:	0498      	lsls	r0, r3, #18
 800b812:	d409      	bmi.n	800b828 <_vfprintf_r+0x70>
 800b814:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800b818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b81c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b820:	f8ab 300c 	strh.w	r3, [fp, #12]
 800b824:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 800b828:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b82c:	0719      	lsls	r1, r3, #28
 800b82e:	d509      	bpl.n	800b844 <_vfprintf_r+0x8c>
 800b830:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b834:	b133      	cbz	r3, 800b844 <_vfprintf_r+0x8c>
 800b836:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b83a:	f003 031a 	and.w	r3, r3, #26
 800b83e:	2b0a      	cmp	r3, #10
 800b840:	d116      	bne.n	800b870 <_vfprintf_r+0xb8>
 800b842:	e009      	b.n	800b858 <_vfprintf_r+0xa0>
 800b844:	4659      	mov	r1, fp
 800b846:	4650      	mov	r0, sl
 800b848:	f000 ffe6 	bl	800c818 <__swsetup_r>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d0f2      	beq.n	800b836 <_vfprintf_r+0x7e>
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	f000 bfa3 	b.w	800c79e <_vfprintf_r+0xfe6>
 800b858:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	db07      	blt.n	800b870 <_vfprintf_r+0xb8>
 800b860:	4623      	mov	r3, r4
 800b862:	9a05      	ldr	r2, [sp, #20]
 800b864:	4659      	mov	r1, fp
 800b866:	4650      	mov	r0, sl
 800b868:	f000 ffa0 	bl	800c7ac <__sbprintf>
 800b86c:	f000 bf97 	b.w	800c79e <_vfprintf_r+0xfe6>
 800b870:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800ba58 <_vfprintf_r+0x2a0>
 800b874:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b878:	2300      	movs	r3, #0
 800b87a:	ac2c      	add	r4, sp, #176	; 0xb0
 800b87c:	941f      	str	r4, [sp, #124]	; 0x7c
 800b87e:	9321      	str	r3, [sp, #132]	; 0x84
 800b880:	9320      	str	r3, [sp, #128]	; 0x80
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	9311      	str	r3, [sp, #68]	; 0x44
 800b886:	9310      	str	r3, [sp, #64]	; 0x40
 800b888:	930a      	str	r3, [sp, #40]	; 0x28
 800b88a:	9d05      	ldr	r5, [sp, #20]
 800b88c:	462b      	mov	r3, r5
 800b88e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b892:	b11a      	cbz	r2, 800b89c <_vfprintf_r+0xe4>
 800b894:	2a25      	cmp	r2, #37	; 0x25
 800b896:	d001      	beq.n	800b89c <_vfprintf_r+0xe4>
 800b898:	461d      	mov	r5, r3
 800b89a:	e7f7      	b.n	800b88c <_vfprintf_r+0xd4>
 800b89c:	9b05      	ldr	r3, [sp, #20]
 800b89e:	1aee      	subs	r6, r5, r3
 800b8a0:	d017      	beq.n	800b8d2 <_vfprintf_r+0x11a>
 800b8a2:	e884 0048 	stmia.w	r4, {r3, r6}
 800b8a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8a8:	4433      	add	r3, r6
 800b8aa:	9321      	str	r3, [sp, #132]	; 0x84
 800b8ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	2b07      	cmp	r3, #7
 800b8b2:	9320      	str	r3, [sp, #128]	; 0x80
 800b8b4:	dc01      	bgt.n	800b8ba <_vfprintf_r+0x102>
 800b8b6:	3408      	adds	r4, #8
 800b8b8:	e008      	b.n	800b8cc <_vfprintf_r+0x114>
 800b8ba:	aa1f      	add	r2, sp, #124	; 0x7c
 800b8bc:	4659      	mov	r1, fp
 800b8be:	4650      	mov	r0, sl
 800b8c0:	f003 fa3e 	bl	800ed40 <__sprint_r>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	f040 8633 	bne.w	800c530 <_vfprintf_r+0xd78>
 800b8ca:	ac2c      	add	r4, sp, #176	; 0xb0
 800b8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ce:	4433      	add	r3, r6
 800b8d0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d2:	782b      	ldrb	r3, [r5, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8624 	beq.w	800c522 <_vfprintf_r+0xd6a>
 800b8da:	2200      	movs	r2, #0
 800b8dc:	1c6b      	adds	r3, r5, #1
 800b8de:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	f04f 39ff 	mov.w	r9, #4294967295
 800b8e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ea:	4615      	mov	r5, r2
 800b8ec:	200a      	movs	r0, #10
 800b8ee:	1c5e      	adds	r6, r3, #1
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	9605      	str	r6, [sp, #20]
 800b8f4:	9302      	str	r3, [sp, #8]
 800b8f6:	9b02      	ldr	r3, [sp, #8]
 800b8f8:	3b20      	subs	r3, #32
 800b8fa:	2b58      	cmp	r3, #88	; 0x58
 800b8fc:	f200 826a 	bhi.w	800bdd4 <_vfprintf_r+0x61c>
 800b900:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b904:	0268005c 	.word	0x0268005c
 800b908:	006c0268 	.word	0x006c0268
 800b90c:	02680268 	.word	0x02680268
 800b910:	02680268 	.word	0x02680268
 800b914:	02680268 	.word	0x02680268
 800b918:	0059006f 	.word	0x0059006f
 800b91c:	007a0268 	.word	0x007a0268
 800b920:	0268007d 	.word	0x0268007d
 800b924:	00b600a4 	.word	0x00b600a4
 800b928:	00b600b6 	.word	0x00b600b6
 800b92c:	00b600b6 	.word	0x00b600b6
 800b930:	00b600b6 	.word	0x00b600b6
 800b934:	00b600b6 	.word	0x00b600b6
 800b938:	02680268 	.word	0x02680268
 800b93c:	02680268 	.word	0x02680268
 800b940:	02680268 	.word	0x02680268
 800b944:	02680268 	.word	0x02680268
 800b948:	02680268 	.word	0x02680268
 800b94c:	011200e6 	.word	0x011200e6
 800b950:	01120268 	.word	0x01120268
 800b954:	02680268 	.word	0x02680268
 800b958:	02680268 	.word	0x02680268
 800b95c:	026800c9 	.word	0x026800c9
 800b960:	01590268 	.word	0x01590268
 800b964:	02680268 	.word	0x02680268
 800b968:	02680268 	.word	0x02680268
 800b96c:	01a00268 	.word	0x01a00268
 800b970:	02680268 	.word	0x02680268
 800b974:	02680067 	.word	0x02680067
 800b978:	02680268 	.word	0x02680268
 800b97c:	02680268 	.word	0x02680268
 800b980:	02680268 	.word	0x02680268
 800b984:	02680268 	.word	0x02680268
 800b988:	00dd0268 	.word	0x00dd0268
 800b98c:	01120061 	.word	0x01120061
 800b990:	01120112 	.word	0x01120112
 800b994:	006100cc 	.word	0x006100cc
 800b998:	02680268 	.word	0x02680268
 800b99c:	026800cf 	.word	0x026800cf
 800b9a0:	015b013b 	.word	0x015b013b
 800b9a4:	00da0176 	.word	0x00da0176
 800b9a8:	01870268 	.word	0x01870268
 800b9ac:	01a20268 	.word	0x01a20268
 800b9b0:	02680268 	.word	0x02680268
 800b9b4:	01ba      	.short	0x01ba
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	212b      	movs	r1, #43	; 0x2b
 800b9ba:	e002      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800b9bc:	b909      	cbnz	r1, 800b9c2 <_vfprintf_r+0x20a>
 800b9be:	2201      	movs	r2, #1
 800b9c0:	2120      	movs	r1, #32
 800b9c2:	9b05      	ldr	r3, [sp, #20]
 800b9c4:	e793      	b.n	800b8ee <_vfprintf_r+0x136>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	f000 8087 	beq.w	800bada <_vfprintf_r+0x322>
 800b9cc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800b9d0:	e083      	b.n	800bada <_vfprintf_r+0x322>
 800b9d2:	b10a      	cbz	r2, 800b9d8 <_vfprintf_r+0x220>
 800b9d4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800b9d8:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <_vfprintf_r+0x2b4>)
 800b9da:	e151      	b.n	800bc80 <_vfprintf_r+0x4c8>
 800b9dc:	f045 0501 	orr.w	r5, r5, #1
 800b9e0:	e7ef      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800b9e2:	683e      	ldr	r6, [r7, #0]
 800b9e4:	9609      	str	r6, [sp, #36]	; 0x24
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	f107 0304 	add.w	r3, r7, #4
 800b9ec:	db01      	blt.n	800b9f2 <_vfprintf_r+0x23a>
 800b9ee:	461f      	mov	r7, r3
 800b9f0:	e7e7      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800b9f2:	4276      	negs	r6, r6
 800b9f4:	9609      	str	r6, [sp, #36]	; 0x24
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	f045 0504 	orr.w	r5, r5, #4
 800b9fc:	e7e1      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800b9fe:	9e05      	ldr	r6, [sp, #20]
 800ba00:	9b05      	ldr	r3, [sp, #20]
 800ba02:	7836      	ldrb	r6, [r6, #0]
 800ba04:	9602      	str	r6, [sp, #8]
 800ba06:	2e2a      	cmp	r6, #42	; 0x2a
 800ba08:	f103 0301 	add.w	r3, r3, #1
 800ba0c:	d002      	beq.n	800ba14 <_vfprintf_r+0x25c>
 800ba0e:	f04f 0900 	mov.w	r9, #0
 800ba12:	e00a      	b.n	800ba2a <_vfprintf_r+0x272>
 800ba14:	f8d7 9000 	ldr.w	r9, [r7]
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	1d3e      	adds	r6, r7, #4
 800ba1c:	f1b9 0f00 	cmp.w	r9, #0
 800ba20:	4637      	mov	r7, r6
 800ba22:	dace      	bge.n	800b9c2 <_vfprintf_r+0x20a>
 800ba24:	f04f 39ff 	mov.w	r9, #4294967295
 800ba28:	e7cb      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800ba2a:	9305      	str	r3, [sp, #20]
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	3b30      	subs	r3, #48	; 0x30
 800ba30:	2b09      	cmp	r3, #9
 800ba32:	d808      	bhi.n	800ba46 <_vfprintf_r+0x28e>
 800ba34:	fb00 3909 	mla	r9, r0, r9, r3
 800ba38:	9b05      	ldr	r3, [sp, #20]
 800ba3a:	461e      	mov	r6, r3
 800ba3c:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ba40:	9302      	str	r3, [sp, #8]
 800ba42:	4633      	mov	r3, r6
 800ba44:	e7f1      	b.n	800ba2a <_vfprintf_r+0x272>
 800ba46:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800ba4a:	e754      	b.n	800b8f6 <_vfprintf_r+0x13e>
 800ba4c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800ba50:	e7b7      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800ba52:	bf00      	nop
 800ba54:	f3af 8000 	nop.w
	...
 800ba60:	08011acc 	.word	0x08011acc
 800ba64:	08011aec 	.word	0x08011aec
 800ba68:	08011b0c 	.word	0x08011b0c
 800ba6c:	0801196a 	.word	0x0801196a
 800ba70:	2300      	movs	r3, #0
 800ba72:	9309      	str	r3, [sp, #36]	; 0x24
 800ba74:	9b02      	ldr	r3, [sp, #8]
 800ba76:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ba78:	3b30      	subs	r3, #48	; 0x30
 800ba7a:	fb00 3306 	mla	r3, r0, r6, r3
 800ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba80:	9b05      	ldr	r3, [sp, #20]
 800ba82:	461e      	mov	r6, r3
 800ba84:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ba88:	9302      	str	r3, [sp, #8]
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	9605      	str	r6, [sp, #20]
 800ba8e:	3b30      	subs	r3, #48	; 0x30
 800ba90:	2b09      	cmp	r3, #9
 800ba92:	d9ef      	bls.n	800ba74 <_vfprintf_r+0x2bc>
 800ba94:	e72f      	b.n	800b8f6 <_vfprintf_r+0x13e>
 800ba96:	f045 0508 	orr.w	r5, r5, #8
 800ba9a:	e792      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800ba9c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800baa0:	e78f      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800baa2:	9b05      	ldr	r3, [sp, #20]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b6c      	cmp	r3, #108	; 0x6c
 800baa8:	d103      	bne.n	800bab2 <_vfprintf_r+0x2fa>
 800baaa:	9b05      	ldr	r3, [sp, #20]
 800baac:	3301      	adds	r3, #1
 800baae:	9305      	str	r3, [sp, #20]
 800bab0:	e002      	b.n	800bab8 <_vfprintf_r+0x300>
 800bab2:	f045 0510 	orr.w	r5, r5, #16
 800bab6:	e784      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800bab8:	f045 0520 	orr.w	r5, r5, #32
 800babc:	e781      	b.n	800b9c2 <_vfprintf_r+0x20a>
 800babe:	1d3b      	adds	r3, r7, #4
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	2600      	movs	r6, #0
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800baca:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800bace:	e190      	b.n	800bdf2 <_vfprintf_r+0x63a>
 800bad0:	b10a      	cbz	r2, 800bad6 <_vfprintf_r+0x31e>
 800bad2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bad6:	f045 0510 	orr.w	r5, r5, #16
 800bada:	06aa      	lsls	r2, r5, #26
 800badc:	d508      	bpl.n	800baf0 <_vfprintf_r+0x338>
 800bade:	3707      	adds	r7, #7
 800bae0:	f027 0707 	bic.w	r7, r7, #7
 800bae4:	f107 0308 	add.w	r3, r7, #8
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	e9d7 6700 	ldrd	r6, r7, [r7]
 800baee:	e00e      	b.n	800bb0e <_vfprintf_r+0x356>
 800baf0:	f015 0f10 	tst.w	r5, #16
 800baf4:	f107 0304 	add.w	r3, r7, #4
 800baf8:	d002      	beq.n	800bb00 <_vfprintf_r+0x348>
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	683e      	ldr	r6, [r7, #0]
 800bafe:	e005      	b.n	800bb0c <_vfprintf_r+0x354>
 800bb00:	683e      	ldr	r6, [r7, #0]
 800bb02:	9303      	str	r3, [sp, #12]
 800bb04:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bb08:	bf18      	it	ne
 800bb0a:	b236      	sxthne	r6, r6
 800bb0c:	17f7      	asrs	r7, r6, #31
 800bb0e:	2e00      	cmp	r6, #0
 800bb10:	f177 0300 	sbcs.w	r3, r7, #0
 800bb14:	f280 80de 	bge.w	800bcd4 <_vfprintf_r+0x51c>
 800bb18:	4276      	negs	r6, r6
 800bb1a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800bb1e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800bb22:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800bb26:	e0d5      	b.n	800bcd4 <_vfprintf_r+0x51c>
 800bb28:	b10a      	cbz	r2, 800bb2e <_vfprintf_r+0x376>
 800bb2a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bb2e:	3707      	adds	r7, #7
 800bb30:	f027 0707 	bic.w	r7, r7, #7
 800bb34:	f107 0308 	add.w	r3, r7, #8
 800bb38:	9303      	str	r3, [sp, #12]
 800bb3a:	ed97 7b00 	vldr	d7, [r7]
 800bb3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb42:	9b06      	ldr	r3, [sp, #24]
 800bb44:	9312      	str	r3, [sp, #72]	; 0x48
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb52:	4bab      	ldr	r3, [pc, #684]	; (800be00 <_vfprintf_r+0x648>)
 800bb54:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bb58:	f7f5 f804 	bl	8000b64 <__aeabi_dcmpun>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f040 84ee 	bne.w	800c53e <_vfprintf_r+0xd86>
 800bb62:	f04f 32ff 	mov.w	r2, #4294967295
 800bb66:	4ba6      	ldr	r3, [pc, #664]	; (800be00 <_vfprintf_r+0x648>)
 800bb68:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bb6c:	f7f4 ffdc 	bl	8000b28 <__aeabi_dcmple>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	f040 84e4 	bne.w	800c53e <_vfprintf_r+0xd86>
 800bb76:	f000 bdfb 	b.w	800c770 <_vfprintf_r+0xfb8>
 800bb7a:	b10a      	cbz	r2, 800bb80 <_vfprintf_r+0x3c8>
 800bb7c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bb80:	f015 0f20 	tst.w	r5, #32
 800bb84:	f107 0304 	add.w	r3, r7, #4
 800bb88:	d007      	beq.n	800bb9a <_vfprintf_r+0x3e2>
 800bb8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	17ce      	asrs	r6, r1, #31
 800bb90:	4608      	mov	r0, r1
 800bb92:	4631      	mov	r1, r6
 800bb94:	e9c2 0100 	strd	r0, r1, [r2]
 800bb98:	e00b      	b.n	800bbb2 <_vfprintf_r+0x3fa>
 800bb9a:	06e9      	lsls	r1, r5, #27
 800bb9c:	d406      	bmi.n	800bbac <_vfprintf_r+0x3f4>
 800bb9e:	066a      	lsls	r2, r5, #25
 800bba0:	d504      	bpl.n	800bbac <_vfprintf_r+0x3f4>
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800bba8:	8011      	strh	r1, [r2, #0]
 800bbaa:	e002      	b.n	800bbb2 <_vfprintf_r+0x3fa>
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bbb0:	6011      	str	r1, [r2, #0]
 800bbb2:	461f      	mov	r7, r3
 800bbb4:	e669      	b.n	800b88a <_vfprintf_r+0xd2>
 800bbb6:	f045 0510 	orr.w	r5, r5, #16
 800bbba:	f015 0320 	ands.w	r3, r5, #32
 800bbbe:	d009      	beq.n	800bbd4 <_vfprintf_r+0x41c>
 800bbc0:	3707      	adds	r7, #7
 800bbc2:	f027 0707 	bic.w	r7, r7, #7
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bbce:	9303      	str	r3, [sp, #12]
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	e07b      	b.n	800bccc <_vfprintf_r+0x514>
 800bbd4:	1d3a      	adds	r2, r7, #4
 800bbd6:	f015 0110 	ands.w	r1, r5, #16
 800bbda:	9203      	str	r2, [sp, #12]
 800bbdc:	d105      	bne.n	800bbea <_vfprintf_r+0x432>
 800bbde:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800bbe2:	d002      	beq.n	800bbea <_vfprintf_r+0x432>
 800bbe4:	883e      	ldrh	r6, [r7, #0]
 800bbe6:	2700      	movs	r7, #0
 800bbe8:	e7f2      	b.n	800bbd0 <_vfprintf_r+0x418>
 800bbea:	683e      	ldr	r6, [r7, #0]
 800bbec:	2700      	movs	r7, #0
 800bbee:	e06d      	b.n	800bccc <_vfprintf_r+0x514>
 800bbf0:	1d3b      	adds	r3, r7, #4
 800bbf2:	9303      	str	r3, [sp, #12]
 800bbf4:	2330      	movs	r3, #48	; 0x30
 800bbf6:	2278      	movs	r2, #120	; 0x78
 800bbf8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800bbfc:	4b81      	ldr	r3, [pc, #516]	; (800be04 <_vfprintf_r+0x64c>)
 800bbfe:	683e      	ldr	r6, [r7, #0]
 800bc00:	9311      	str	r3, [sp, #68]	; 0x44
 800bc02:	2700      	movs	r7, #0
 800bc04:	f045 0502 	orr.w	r5, r5, #2
 800bc08:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	9202      	str	r2, [sp, #8]
 800bc10:	e05c      	b.n	800bccc <_vfprintf_r+0x514>
 800bc12:	2600      	movs	r6, #0
 800bc14:	1d3b      	adds	r3, r7, #4
 800bc16:	45b1      	cmp	r9, r6
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	f8d7 8000 	ldr.w	r8, [r7]
 800bc1e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800bc22:	db0a      	blt.n	800bc3a <_vfprintf_r+0x482>
 800bc24:	464a      	mov	r2, r9
 800bc26:	4631      	mov	r1, r6
 800bc28:	4640      	mov	r0, r8
 800bc2a:	f7f4 faf9 	bl	8000220 <memchr>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f000 80ea 	beq.w	800be08 <_vfprintf_r+0x650>
 800bc34:	ebc8 0900 	rsb	r9, r8, r0
 800bc38:	e0e7      	b.n	800be0a <_vfprintf_r+0x652>
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	f7f4 fae8 	bl	8000210 <strlen>
 800bc40:	4681      	mov	r9, r0
 800bc42:	e0e2      	b.n	800be0a <_vfprintf_r+0x652>
 800bc44:	f045 0510 	orr.w	r5, r5, #16
 800bc48:	06ae      	lsls	r6, r5, #26
 800bc4a:	d508      	bpl.n	800bc5e <_vfprintf_r+0x4a6>
 800bc4c:	3707      	adds	r7, #7
 800bc4e:	f027 0707 	bic.w	r7, r7, #7
 800bc52:	f107 0308 	add.w	r3, r7, #8
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bc5c:	e00a      	b.n	800bc74 <_vfprintf_r+0x4bc>
 800bc5e:	1d3b      	adds	r3, r7, #4
 800bc60:	f015 0f10 	tst.w	r5, #16
 800bc64:	9303      	str	r3, [sp, #12]
 800bc66:	d103      	bne.n	800bc70 <_vfprintf_r+0x4b8>
 800bc68:	0668      	lsls	r0, r5, #25
 800bc6a:	d501      	bpl.n	800bc70 <_vfprintf_r+0x4b8>
 800bc6c:	883e      	ldrh	r6, [r7, #0]
 800bc6e:	e000      	b.n	800bc72 <_vfprintf_r+0x4ba>
 800bc70:	683e      	ldr	r6, [r7, #0]
 800bc72:	2700      	movs	r7, #0
 800bc74:	2301      	movs	r3, #1
 800bc76:	e029      	b.n	800bccc <_vfprintf_r+0x514>
 800bc78:	b10a      	cbz	r2, 800bc7e <_vfprintf_r+0x4c6>
 800bc7a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bc7e:	4b61      	ldr	r3, [pc, #388]	; (800be04 <_vfprintf_r+0x64c>)
 800bc80:	9311      	str	r3, [sp, #68]	; 0x44
 800bc82:	06a9      	lsls	r1, r5, #26
 800bc84:	d508      	bpl.n	800bc98 <_vfprintf_r+0x4e0>
 800bc86:	3707      	adds	r7, #7
 800bc88:	f027 0707 	bic.w	r7, r7, #7
 800bc8c:	f107 0308 	add.w	r3, r7, #8
 800bc90:	9303      	str	r3, [sp, #12]
 800bc92:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bc96:	e00a      	b.n	800bcae <_vfprintf_r+0x4f6>
 800bc98:	1d3b      	adds	r3, r7, #4
 800bc9a:	f015 0f10 	tst.w	r5, #16
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	d103      	bne.n	800bcaa <_vfprintf_r+0x4f2>
 800bca2:	066a      	lsls	r2, r5, #25
 800bca4:	d501      	bpl.n	800bcaa <_vfprintf_r+0x4f2>
 800bca6:	883e      	ldrh	r6, [r7, #0]
 800bca8:	e000      	b.n	800bcac <_vfprintf_r+0x4f4>
 800bcaa:	683e      	ldr	r6, [r7, #0]
 800bcac:	2700      	movs	r7, #0
 800bcae:	07eb      	lsls	r3, r5, #31
 800bcb0:	d50b      	bpl.n	800bcca <_vfprintf_r+0x512>
 800bcb2:	ea56 0307 	orrs.w	r3, r6, r7
 800bcb6:	d008      	beq.n	800bcca <_vfprintf_r+0x512>
 800bcb8:	2330      	movs	r3, #48	; 0x30
 800bcba:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800bcbe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bcc2:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800bcc6:	f045 0502 	orr.w	r5, r5, #2
 800bcca:	2302      	movs	r3, #2
 800bccc:	2200      	movs	r2, #0
 800bcce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800bcd2:	e000      	b.n	800bcd6 <_vfprintf_r+0x51e>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f1b9 0f00 	cmp.w	r9, #0
 800bcda:	f2c0 855a 	blt.w	800c792 <_vfprintf_r+0xfda>
 800bcde:	ea56 0207 	orrs.w	r2, r6, r7
 800bce2:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800bce6:	d103      	bne.n	800bcf0 <_vfprintf_r+0x538>
 800bce8:	f1b9 0f00 	cmp.w	r9, #0
 800bcec:	d05f      	beq.n	800bdae <_vfprintf_r+0x5f6>
 800bcee:	e006      	b.n	800bcfe <_vfprintf_r+0x546>
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d025      	beq.n	800bd42 <_vfprintf_r+0x58a>
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d046      	beq.n	800bd88 <_vfprintf_r+0x5d0>
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	e007      	b.n	800bd0e <_vfprintf_r+0x556>
 800bcfe:	460d      	mov	r5, r1
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d022      	beq.n	800bd4a <_vfprintf_r+0x592>
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d03d      	beq.n	800bd84 <_vfprintf_r+0x5cc>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	2700      	movs	r7, #0
 800bd0e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bd12:	08f2      	lsrs	r2, r6, #3
 800bd14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800bd18:	08f8      	lsrs	r0, r7, #3
 800bd1a:	f006 0307 	and.w	r3, r6, #7
 800bd1e:	4607      	mov	r7, r0
 800bd20:	4616      	mov	r6, r2
 800bd22:	3330      	adds	r3, #48	; 0x30
 800bd24:	ea56 0207 	orrs.w	r2, r6, r7
 800bd28:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bd2c:	d1f1      	bne.n	800bd12 <_vfprintf_r+0x55a>
 800bd2e:	07e8      	lsls	r0, r5, #31
 800bd30:	d548      	bpl.n	800bdc4 <_vfprintf_r+0x60c>
 800bd32:	2b30      	cmp	r3, #48	; 0x30
 800bd34:	d046      	beq.n	800bdc4 <_vfprintf_r+0x60c>
 800bd36:	2330      	movs	r3, #48	; 0x30
 800bd38:	f808 3c01 	strb.w	r3, [r8, #-1]
 800bd3c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd40:	e040      	b.n	800bdc4 <_vfprintf_r+0x60c>
 800bd42:	2f00      	cmp	r7, #0
 800bd44:	bf08      	it	eq
 800bd46:	2e0a      	cmpeq	r6, #10
 800bd48:	d205      	bcs.n	800bd56 <_vfprintf_r+0x59e>
 800bd4a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800bd4e:	3630      	adds	r6, #48	; 0x30
 800bd50:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800bd54:	e029      	b.n	800bdaa <_vfprintf_r+0x5f2>
 800bd56:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	220a      	movs	r2, #10
 800bd60:	2300      	movs	r3, #0
 800bd62:	f7f4 ff8d 	bl	8000c80 <__aeabi_uldivmod>
 800bd66:	3230      	adds	r2, #48	; 0x30
 800bd68:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	220a      	movs	r2, #10
 800bd74:	f7f4 ff84 	bl	8000c80 <__aeabi_uldivmod>
 800bd78:	4606      	mov	r6, r0
 800bd7a:	460f      	mov	r7, r1
 800bd7c:	ea56 0307 	orrs.w	r3, r6, r7
 800bd80:	d1eb      	bne.n	800bd5a <_vfprintf_r+0x5a2>
 800bd82:	e012      	b.n	800bdaa <_vfprintf_r+0x5f2>
 800bd84:	2600      	movs	r6, #0
 800bd86:	2700      	movs	r7, #0
 800bd88:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bd8c:	f006 030f 	and.w	r3, r6, #15
 800bd90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd92:	5cd3      	ldrb	r3, [r2, r3]
 800bd94:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bd98:	0933      	lsrs	r3, r6, #4
 800bd9a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800bd9e:	093a      	lsrs	r2, r7, #4
 800bda0:	461e      	mov	r6, r3
 800bda2:	4617      	mov	r7, r2
 800bda4:	ea56 0307 	orrs.w	r3, r6, r7
 800bda8:	d1f0      	bne.n	800bd8c <_vfprintf_r+0x5d4>
 800bdaa:	4629      	mov	r1, r5
 800bdac:	e00a      	b.n	800bdc4 <_vfprintf_r+0x60c>
 800bdae:	b93b      	cbnz	r3, 800bdc0 <_vfprintf_r+0x608>
 800bdb0:	07ea      	lsls	r2, r5, #31
 800bdb2:	d505      	bpl.n	800bdc0 <_vfprintf_r+0x608>
 800bdb4:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800bdb8:	2330      	movs	r3, #48	; 0x30
 800bdba:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800bdbe:	e001      	b.n	800bdc4 <_vfprintf_r+0x60c>
 800bdc0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800bdc4:	464e      	mov	r6, r9
 800bdc6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800bdca:	ebc8 0909 	rsb	r9, r8, r9
 800bdce:	460d      	mov	r5, r1
 800bdd0:	2700      	movs	r7, #0
 800bdd2:	e01b      	b.n	800be0c <_vfprintf_r+0x654>
 800bdd4:	b10a      	cbz	r2, 800bdda <_vfprintf_r+0x622>
 800bdd6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800bdda:	9b02      	ldr	r3, [sp, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 83a0 	beq.w	800c522 <_vfprintf_r+0xd6a>
 800bde2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bde6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800bdea:	2600      	movs	r6, #0
 800bdec:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800bdf0:	9703      	str	r7, [sp, #12]
 800bdf2:	f04f 0901 	mov.w	r9, #1
 800bdf6:	4637      	mov	r7, r6
 800bdf8:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800bdfc:	e006      	b.n	800be0c <_vfprintf_r+0x654>
 800bdfe:	bf00      	nop
 800be00:	7fefffff 	.word	0x7fefffff
 800be04:	0801197b 	.word	0x0801197b
 800be08:	4606      	mov	r6, r0
 800be0a:	4637      	mov	r7, r6
 800be0c:	454e      	cmp	r6, r9
 800be0e:	4633      	mov	r3, r6
 800be10:	bfb8      	it	lt
 800be12:	464b      	movlt	r3, r9
 800be14:	930b      	str	r3, [sp, #44]	; 0x2c
 800be16:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800be1a:	b113      	cbz	r3, 800be22 <_vfprintf_r+0x66a>
 800be1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be1e:	3301      	adds	r3, #1
 800be20:	930b      	str	r3, [sp, #44]	; 0x2c
 800be22:	f015 0302 	ands.w	r3, r5, #2
 800be26:	9314      	str	r3, [sp, #80]	; 0x50
 800be28:	bf1e      	ittt	ne
 800be2a:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800be2c:	3302      	addne	r3, #2
 800be2e:	930b      	strne	r3, [sp, #44]	; 0x2c
 800be30:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800be34:	9315      	str	r3, [sp, #84]	; 0x54
 800be36:	d139      	bne.n	800beac <_vfprintf_r+0x6f4>
 800be38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	2b00      	cmp	r3, #0
 800be40:	930c      	str	r3, [sp, #48]	; 0x30
 800be42:	dd33      	ble.n	800beac <_vfprintf_r+0x6f4>
 800be44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be46:	2b10      	cmp	r3, #16
 800be48:	4ba6      	ldr	r3, [pc, #664]	; (800c0e4 <_vfprintf_r+0x92c>)
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	dd18      	ble.n	800be80 <_vfprintf_r+0x6c8>
 800be4e:	2310      	movs	r3, #16
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be54:	3310      	adds	r3, #16
 800be56:	9321      	str	r3, [sp, #132]	; 0x84
 800be58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be5a:	3301      	adds	r3, #1
 800be5c:	2b07      	cmp	r3, #7
 800be5e:	9320      	str	r3, [sp, #128]	; 0x80
 800be60:	dc01      	bgt.n	800be66 <_vfprintf_r+0x6ae>
 800be62:	3408      	adds	r4, #8
 800be64:	e008      	b.n	800be78 <_vfprintf_r+0x6c0>
 800be66:	aa1f      	add	r2, sp, #124	; 0x7c
 800be68:	4659      	mov	r1, fp
 800be6a:	4650      	mov	r0, sl
 800be6c:	f002 ff68 	bl	800ed40 <__sprint_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	f040 835d 	bne.w	800c530 <_vfprintf_r+0xd78>
 800be76:	ac2c      	add	r4, sp, #176	; 0xb0
 800be78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be7a:	3b10      	subs	r3, #16
 800be7c:	930c      	str	r3, [sp, #48]	; 0x30
 800be7e:	e7e1      	b.n	800be44 <_vfprintf_r+0x68c>
 800be80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be82:	6063      	str	r3, [r4, #4]
 800be84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be88:	4413      	add	r3, r2
 800be8a:	9321      	str	r3, [sp, #132]	; 0x84
 800be8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be8e:	3301      	adds	r3, #1
 800be90:	2b07      	cmp	r3, #7
 800be92:	9320      	str	r3, [sp, #128]	; 0x80
 800be94:	dc01      	bgt.n	800be9a <_vfprintf_r+0x6e2>
 800be96:	3408      	adds	r4, #8
 800be98:	e008      	b.n	800beac <_vfprintf_r+0x6f4>
 800be9a:	aa1f      	add	r2, sp, #124	; 0x7c
 800be9c:	4659      	mov	r1, fp
 800be9e:	4650      	mov	r0, sl
 800bea0:	f002 ff4e 	bl	800ed40 <__sprint_r>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f040 8343 	bne.w	800c530 <_vfprintf_r+0xd78>
 800beaa:	ac2c      	add	r4, sp, #176	; 0xb0
 800beac:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800beb0:	b1bb      	cbz	r3, 800bee2 <_vfprintf_r+0x72a>
 800beb2:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	2301      	movs	r3, #1
 800beba:	6063      	str	r3, [r4, #4]
 800bebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bebe:	3301      	adds	r3, #1
 800bec0:	9321      	str	r3, [sp, #132]	; 0x84
 800bec2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bec4:	3301      	adds	r3, #1
 800bec6:	2b07      	cmp	r3, #7
 800bec8:	9320      	str	r3, [sp, #128]	; 0x80
 800beca:	dc01      	bgt.n	800bed0 <_vfprintf_r+0x718>
 800becc:	3408      	adds	r4, #8
 800bece:	e008      	b.n	800bee2 <_vfprintf_r+0x72a>
 800bed0:	aa1f      	add	r2, sp, #124	; 0x7c
 800bed2:	4659      	mov	r1, fp
 800bed4:	4650      	mov	r0, sl
 800bed6:	f002 ff33 	bl	800ed40 <__sprint_r>
 800beda:	2800      	cmp	r0, #0
 800bedc:	f040 8328 	bne.w	800c530 <_vfprintf_r+0xd78>
 800bee0:	ac2c      	add	r4, sp, #176	; 0xb0
 800bee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bee4:	b1b3      	cbz	r3, 800bf14 <_vfprintf_r+0x75c>
 800bee6:	ab18      	add	r3, sp, #96	; 0x60
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	2302      	movs	r3, #2
 800beec:	6063      	str	r3, [r4, #4]
 800beee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bef0:	3302      	adds	r3, #2
 800bef2:	9321      	str	r3, [sp, #132]	; 0x84
 800bef4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bef6:	3301      	adds	r3, #1
 800bef8:	2b07      	cmp	r3, #7
 800befa:	9320      	str	r3, [sp, #128]	; 0x80
 800befc:	dc01      	bgt.n	800bf02 <_vfprintf_r+0x74a>
 800befe:	3408      	adds	r4, #8
 800bf00:	e008      	b.n	800bf14 <_vfprintf_r+0x75c>
 800bf02:	aa1f      	add	r2, sp, #124	; 0x7c
 800bf04:	4659      	mov	r1, fp
 800bf06:	4650      	mov	r0, sl
 800bf08:	f002 ff1a 	bl	800ed40 <__sprint_r>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f040 830f 	bne.w	800c530 <_vfprintf_r+0xd78>
 800bf12:	ac2c      	add	r4, sp, #176	; 0xb0
 800bf14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf16:	2b80      	cmp	r3, #128	; 0x80
 800bf18:	d135      	bne.n	800bf86 <_vfprintf_r+0x7ce>
 800bf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf1e:	1a9b      	subs	r3, r3, r2
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dd30      	ble.n	800bf86 <_vfprintf_r+0x7ce>
 800bf24:	4a70      	ldr	r2, [pc, #448]	; (800c0e8 <_vfprintf_r+0x930>)
 800bf26:	6022      	str	r2, [r4, #0]
 800bf28:	2b10      	cmp	r3, #16
 800bf2a:	dd18      	ble.n	800bf5e <_vfprintf_r+0x7a6>
 800bf2c:	2210      	movs	r2, #16
 800bf2e:	6062      	str	r2, [r4, #4]
 800bf30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf32:	3210      	adds	r2, #16
 800bf34:	9221      	str	r2, [sp, #132]	; 0x84
 800bf36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf38:	3201      	adds	r2, #1
 800bf3a:	2a07      	cmp	r2, #7
 800bf3c:	9220      	str	r2, [sp, #128]	; 0x80
 800bf3e:	dc01      	bgt.n	800bf44 <_vfprintf_r+0x78c>
 800bf40:	3408      	adds	r4, #8
 800bf42:	e00a      	b.n	800bf5a <_vfprintf_r+0x7a2>
 800bf44:	aa1f      	add	r2, sp, #124	; 0x7c
 800bf46:	4659      	mov	r1, fp
 800bf48:	4650      	mov	r0, sl
 800bf4a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf4c:	f002 fef8 	bl	800ed40 <__sprint_r>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f040 82ed 	bne.w	800c530 <_vfprintf_r+0xd78>
 800bf56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf58:	ac2c      	add	r4, sp, #176	; 0xb0
 800bf5a:	3b10      	subs	r3, #16
 800bf5c:	e7e2      	b.n	800bf24 <_vfprintf_r+0x76c>
 800bf5e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf60:	6063      	str	r3, [r4, #4]
 800bf62:	4413      	add	r3, r2
 800bf64:	9321      	str	r3, [sp, #132]	; 0x84
 800bf66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf68:	3301      	adds	r3, #1
 800bf6a:	2b07      	cmp	r3, #7
 800bf6c:	9320      	str	r3, [sp, #128]	; 0x80
 800bf6e:	dc01      	bgt.n	800bf74 <_vfprintf_r+0x7bc>
 800bf70:	3408      	adds	r4, #8
 800bf72:	e008      	b.n	800bf86 <_vfprintf_r+0x7ce>
 800bf74:	aa1f      	add	r2, sp, #124	; 0x7c
 800bf76:	4659      	mov	r1, fp
 800bf78:	4650      	mov	r0, sl
 800bf7a:	f002 fee1 	bl	800ed40 <__sprint_r>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f040 82d6 	bne.w	800c530 <_vfprintf_r+0xd78>
 800bf84:	ac2c      	add	r4, sp, #176	; 0xb0
 800bf86:	ebc9 0606 	rsb	r6, r9, r6
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	dd2e      	ble.n	800bfec <_vfprintf_r+0x834>
 800bf8e:	4b56      	ldr	r3, [pc, #344]	; (800c0e8 <_vfprintf_r+0x930>)
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	2e10      	cmp	r6, #16
 800bf94:	dd16      	ble.n	800bfc4 <_vfprintf_r+0x80c>
 800bf96:	2310      	movs	r3, #16
 800bf98:	6063      	str	r3, [r4, #4]
 800bf9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf9c:	3310      	adds	r3, #16
 800bf9e:	9321      	str	r3, [sp, #132]	; 0x84
 800bfa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	2b07      	cmp	r3, #7
 800bfa6:	9320      	str	r3, [sp, #128]	; 0x80
 800bfa8:	dc01      	bgt.n	800bfae <_vfprintf_r+0x7f6>
 800bfaa:	3408      	adds	r4, #8
 800bfac:	e008      	b.n	800bfc0 <_vfprintf_r+0x808>
 800bfae:	aa1f      	add	r2, sp, #124	; 0x7c
 800bfb0:	4659      	mov	r1, fp
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	f002 fec4 	bl	800ed40 <__sprint_r>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	f040 82b9 	bne.w	800c530 <_vfprintf_r+0xd78>
 800bfbe:	ac2c      	add	r4, sp, #176	; 0xb0
 800bfc0:	3e10      	subs	r6, #16
 800bfc2:	e7e4      	b.n	800bf8e <_vfprintf_r+0x7d6>
 800bfc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bfc6:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bfc8:	6066      	str	r6, [r4, #4]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	4406      	add	r6, r0
 800bfce:	2b07      	cmp	r3, #7
 800bfd0:	9621      	str	r6, [sp, #132]	; 0x84
 800bfd2:	9320      	str	r3, [sp, #128]	; 0x80
 800bfd4:	dc01      	bgt.n	800bfda <_vfprintf_r+0x822>
 800bfd6:	3408      	adds	r4, #8
 800bfd8:	e008      	b.n	800bfec <_vfprintf_r+0x834>
 800bfda:	aa1f      	add	r2, sp, #124	; 0x7c
 800bfdc:	4659      	mov	r1, fp
 800bfde:	4650      	mov	r0, sl
 800bfe0:	f002 feae 	bl	800ed40 <__sprint_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	f040 82a3 	bne.w	800c530 <_vfprintf_r+0xd78>
 800bfea:	ac2c      	add	r4, sp, #176	; 0xb0
 800bfec:	05eb      	lsls	r3, r5, #23
 800bfee:	d414      	bmi.n	800c01a <_vfprintf_r+0x862>
 800bff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bff2:	e884 0300 	stmia.w	r4, {r8, r9}
 800bff6:	444b      	add	r3, r9
 800bff8:	9321      	str	r3, [sp, #132]	; 0x84
 800bffa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bffc:	3301      	adds	r3, #1
 800bffe:	2b07      	cmp	r3, #7
 800c000:	9320      	str	r3, [sp, #128]	; 0x80
 800c002:	f340 8244 	ble.w	800c48e <_vfprintf_r+0xcd6>
 800c006:	aa1f      	add	r2, sp, #124	; 0x7c
 800c008:	4659      	mov	r1, fp
 800c00a:	4650      	mov	r0, sl
 800c00c:	f002 fe98 	bl	800ed40 <__sprint_r>
 800c010:	2800      	cmp	r0, #0
 800c012:	f040 828d 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c016:	ac2c      	add	r4, sp, #176	; 0xb0
 800c018:	e23a      	b.n	800c490 <_vfprintf_r+0xcd8>
 800c01a:	9b02      	ldr	r3, [sp, #8]
 800c01c:	2b65      	cmp	r3, #101	; 0x65
 800c01e:	f340 81ad 	ble.w	800c37c <_vfprintf_r+0xbc4>
 800c022:	2200      	movs	r2, #0
 800c024:	2300      	movs	r3, #0
 800c026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c02a:	f7f4 fd69 	bl	8000b00 <__aeabi_dcmpeq>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d05e      	beq.n	800c0f0 <_vfprintf_r+0x938>
 800c032:	4b2e      	ldr	r3, [pc, #184]	; (800c0ec <_vfprintf_r+0x934>)
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	2301      	movs	r3, #1
 800c038:	6063      	str	r3, [r4, #4]
 800c03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c03c:	3301      	adds	r3, #1
 800c03e:	9321      	str	r3, [sp, #132]	; 0x84
 800c040:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c042:	3301      	adds	r3, #1
 800c044:	2b07      	cmp	r3, #7
 800c046:	9320      	str	r3, [sp, #128]	; 0x80
 800c048:	dc01      	bgt.n	800c04e <_vfprintf_r+0x896>
 800c04a:	3408      	adds	r4, #8
 800c04c:	e008      	b.n	800c060 <_vfprintf_r+0x8a8>
 800c04e:	aa1f      	add	r2, sp, #124	; 0x7c
 800c050:	4659      	mov	r1, fp
 800c052:	4650      	mov	r0, sl
 800c054:	f002 fe74 	bl	800ed40 <__sprint_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	f040 8269 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c05e:	ac2c      	add	r4, sp, #176	; 0xb0
 800c060:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c062:	9a04      	ldr	r2, [sp, #16]
 800c064:	4293      	cmp	r3, r2
 800c066:	db02      	blt.n	800c06e <_vfprintf_r+0x8b6>
 800c068:	07ef      	lsls	r7, r5, #31
 800c06a:	f140 8211 	bpl.w	800c490 <_vfprintf_r+0xcd8>
 800c06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	9a08      	ldr	r2, [sp, #32]
 800c078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c07a:	4413      	add	r3, r2
 800c07c:	9321      	str	r3, [sp, #132]	; 0x84
 800c07e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c080:	3301      	adds	r3, #1
 800c082:	2b07      	cmp	r3, #7
 800c084:	9320      	str	r3, [sp, #128]	; 0x80
 800c086:	dc01      	bgt.n	800c08c <_vfprintf_r+0x8d4>
 800c088:	3408      	adds	r4, #8
 800c08a:	e008      	b.n	800c09e <_vfprintf_r+0x8e6>
 800c08c:	aa1f      	add	r2, sp, #124	; 0x7c
 800c08e:	4659      	mov	r1, fp
 800c090:	4650      	mov	r0, sl
 800c092:	f002 fe55 	bl	800ed40 <__sprint_r>
 800c096:	2800      	cmp	r0, #0
 800c098:	f040 824a 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c09c:	ac2c      	add	r4, sp, #176	; 0xb0
 800c09e:	9b04      	ldr	r3, [sp, #16]
 800c0a0:	1e5e      	subs	r6, r3, #1
 800c0a2:	2e00      	cmp	r6, #0
 800c0a4:	f340 81f4 	ble.w	800c490 <_vfprintf_r+0xcd8>
 800c0a8:	4f0f      	ldr	r7, [pc, #60]	; (800c0e8 <_vfprintf_r+0x930>)
 800c0aa:	f04f 0810 	mov.w	r8, #16
 800c0ae:	2e10      	cmp	r6, #16
 800c0b0:	f340 8159 	ble.w	800c366 <_vfprintf_r+0xbae>
 800c0b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0b6:	3310      	adds	r3, #16
 800c0b8:	9321      	str	r3, [sp, #132]	; 0x84
 800c0ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c0bc:	3301      	adds	r3, #1
 800c0be:	2b07      	cmp	r3, #7
 800c0c0:	e884 0180 	stmia.w	r4, {r7, r8}
 800c0c4:	9320      	str	r3, [sp, #128]	; 0x80
 800c0c6:	dc01      	bgt.n	800c0cc <_vfprintf_r+0x914>
 800c0c8:	3408      	adds	r4, #8
 800c0ca:	e008      	b.n	800c0de <_vfprintf_r+0x926>
 800c0cc:	aa1f      	add	r2, sp, #124	; 0x7c
 800c0ce:	4659      	mov	r1, fp
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	f002 fe35 	bl	800ed40 <__sprint_r>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f040 822a 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c0dc:	ac2c      	add	r4, sp, #176	; 0xb0
 800c0de:	3e10      	subs	r6, #16
 800c0e0:	e7e5      	b.n	800c0ae <_vfprintf_r+0x8f6>
 800c0e2:	bf00      	nop
 800c0e4:	0801199e 	.word	0x0801199e
 800c0e8:	080119ae 	.word	0x080119ae
 800c0ec:	0801198c 	.word	0x0801198c
 800c0f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dc7c      	bgt.n	800c1f0 <_vfprintf_r+0xa38>
 800c0f6:	4b9f      	ldr	r3, [pc, #636]	; (800c374 <_vfprintf_r+0xbbc>)
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	6063      	str	r3, [r4, #4]
 800c0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c100:	3301      	adds	r3, #1
 800c102:	9321      	str	r3, [sp, #132]	; 0x84
 800c104:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c106:	3301      	adds	r3, #1
 800c108:	2b07      	cmp	r3, #7
 800c10a:	9320      	str	r3, [sp, #128]	; 0x80
 800c10c:	dc01      	bgt.n	800c112 <_vfprintf_r+0x95a>
 800c10e:	3408      	adds	r4, #8
 800c110:	e008      	b.n	800c124 <_vfprintf_r+0x96c>
 800c112:	aa1f      	add	r2, sp, #124	; 0x7c
 800c114:	4659      	mov	r1, fp
 800c116:	4650      	mov	r0, sl
 800c118:	f002 fe12 	bl	800ed40 <__sprint_r>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	f040 8207 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c122:	ac2c      	add	r4, sp, #176	; 0xb0
 800c124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c126:	b923      	cbnz	r3, 800c132 <_vfprintf_r+0x97a>
 800c128:	9b04      	ldr	r3, [sp, #16]
 800c12a:	b913      	cbnz	r3, 800c132 <_vfprintf_r+0x97a>
 800c12c:	07ee      	lsls	r6, r5, #31
 800c12e:	f140 81af 	bpl.w	800c490 <_vfprintf_r+0xcd8>
 800c132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	9b08      	ldr	r3, [sp, #32]
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	9a08      	ldr	r2, [sp, #32]
 800c13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c13e:	4413      	add	r3, r2
 800c140:	9321      	str	r3, [sp, #132]	; 0x84
 800c142:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c144:	3301      	adds	r3, #1
 800c146:	2b07      	cmp	r3, #7
 800c148:	9320      	str	r3, [sp, #128]	; 0x80
 800c14a:	dc02      	bgt.n	800c152 <_vfprintf_r+0x99a>
 800c14c:	f104 0308 	add.w	r3, r4, #8
 800c150:	e008      	b.n	800c164 <_vfprintf_r+0x9ac>
 800c152:	aa1f      	add	r2, sp, #124	; 0x7c
 800c154:	4659      	mov	r1, fp
 800c156:	4650      	mov	r0, sl
 800c158:	f002 fdf2 	bl	800ed40 <__sprint_r>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f040 81e7 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c162:	ab2c      	add	r3, sp, #176	; 0xb0
 800c164:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c166:	4276      	negs	r6, r6
 800c168:	2e00      	cmp	r6, #0
 800c16a:	dd30      	ble.n	800c1ce <_vfprintf_r+0xa16>
 800c16c:	4f82      	ldr	r7, [pc, #520]	; (800c378 <_vfprintf_r+0xbc0>)
 800c16e:	2410      	movs	r4, #16
 800c170:	2e10      	cmp	r6, #16
 800c172:	dd16      	ble.n	800c1a2 <_vfprintf_r+0x9ea>
 800c174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c176:	601f      	str	r7, [r3, #0]
 800c178:	3210      	adds	r2, #16
 800c17a:	9221      	str	r2, [sp, #132]	; 0x84
 800c17c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c17e:	605c      	str	r4, [r3, #4]
 800c180:	3201      	adds	r2, #1
 800c182:	2a07      	cmp	r2, #7
 800c184:	9220      	str	r2, [sp, #128]	; 0x80
 800c186:	dc01      	bgt.n	800c18c <_vfprintf_r+0x9d4>
 800c188:	3308      	adds	r3, #8
 800c18a:	e008      	b.n	800c19e <_vfprintf_r+0x9e6>
 800c18c:	aa1f      	add	r2, sp, #124	; 0x7c
 800c18e:	4659      	mov	r1, fp
 800c190:	4650      	mov	r0, sl
 800c192:	f002 fdd5 	bl	800ed40 <__sprint_r>
 800c196:	2800      	cmp	r0, #0
 800c198:	f040 81ca 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c19c:	ab2c      	add	r3, sp, #176	; 0xb0
 800c19e:	3e10      	subs	r6, #16
 800c1a0:	e7e6      	b.n	800c170 <_vfprintf_r+0x9b8>
 800c1a2:	4a75      	ldr	r2, [pc, #468]	; (800c378 <_vfprintf_r+0xbc0>)
 800c1a4:	e883 0044 	stmia.w	r3, {r2, r6}
 800c1a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1aa:	4416      	add	r6, r2
 800c1ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1ae:	9621      	str	r6, [sp, #132]	; 0x84
 800c1b0:	3201      	adds	r2, #1
 800c1b2:	2a07      	cmp	r2, #7
 800c1b4:	9220      	str	r2, [sp, #128]	; 0x80
 800c1b6:	dc01      	bgt.n	800c1bc <_vfprintf_r+0xa04>
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	e008      	b.n	800c1ce <_vfprintf_r+0xa16>
 800c1bc:	aa1f      	add	r2, sp, #124	; 0x7c
 800c1be:	4659      	mov	r1, fp
 800c1c0:	4650      	mov	r0, sl
 800c1c2:	f002 fdbd 	bl	800ed40 <__sprint_r>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f040 81b2 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c1cc:	ab2c      	add	r3, sp, #176	; 0xb0
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	9904      	ldr	r1, [sp, #16]
 800c1d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1d6:	f8c3 8000 	str.w	r8, [r3]
 800c1da:	440a      	add	r2, r1
 800c1dc:	9221      	str	r2, [sp, #132]	; 0x84
 800c1de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1e0:	3201      	adds	r2, #1
 800c1e2:	2a07      	cmp	r2, #7
 800c1e4:	9220      	str	r2, [sp, #128]	; 0x80
 800c1e6:	f73f af0e 	bgt.w	800c006 <_vfprintf_r+0x84e>
 800c1ea:	f103 0408 	add.w	r4, r3, #8
 800c1ee:	e14f      	b.n	800c490 <_vfprintf_r+0xcd8>
 800c1f0:	9b04      	ldr	r3, [sp, #16]
 800c1f2:	42bb      	cmp	r3, r7
 800c1f4:	bfa8      	it	ge
 800c1f6:	463b      	movge	r3, r7
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	461e      	mov	r6, r3
 800c1fc:	dd15      	ble.n	800c22a <_vfprintf_r+0xa72>
 800c1fe:	6063      	str	r3, [r4, #4]
 800c200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c202:	f8c4 8000 	str.w	r8, [r4]
 800c206:	4433      	add	r3, r6
 800c208:	9321      	str	r3, [sp, #132]	; 0x84
 800c20a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c20c:	3301      	adds	r3, #1
 800c20e:	2b07      	cmp	r3, #7
 800c210:	9320      	str	r3, [sp, #128]	; 0x80
 800c212:	dc01      	bgt.n	800c218 <_vfprintf_r+0xa60>
 800c214:	3408      	adds	r4, #8
 800c216:	e008      	b.n	800c22a <_vfprintf_r+0xa72>
 800c218:	aa1f      	add	r2, sp, #124	; 0x7c
 800c21a:	4659      	mov	r1, fp
 800c21c:	4650      	mov	r0, sl
 800c21e:	f002 fd8f 	bl	800ed40 <__sprint_r>
 800c222:	2800      	cmp	r0, #0
 800c224:	f040 8184 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c228:	ac2c      	add	r4, sp, #176	; 0xb0
 800c22a:	2e00      	cmp	r6, #0
 800c22c:	bfac      	ite	ge
 800c22e:	1bbe      	subge	r6, r7, r6
 800c230:	463e      	movlt	r6, r7
 800c232:	2e00      	cmp	r6, #0
 800c234:	dd30      	ble.n	800c298 <_vfprintf_r+0xae0>
 800c236:	f04f 0910 	mov.w	r9, #16
 800c23a:	4b4f      	ldr	r3, [pc, #316]	; (800c378 <_vfprintf_r+0xbc0>)
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	2e10      	cmp	r6, #16
 800c240:	dd16      	ble.n	800c270 <_vfprintf_r+0xab8>
 800c242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c244:	f8c4 9004 	str.w	r9, [r4, #4]
 800c248:	3310      	adds	r3, #16
 800c24a:	9321      	str	r3, [sp, #132]	; 0x84
 800c24c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c24e:	3301      	adds	r3, #1
 800c250:	2b07      	cmp	r3, #7
 800c252:	9320      	str	r3, [sp, #128]	; 0x80
 800c254:	dc01      	bgt.n	800c25a <_vfprintf_r+0xaa2>
 800c256:	3408      	adds	r4, #8
 800c258:	e008      	b.n	800c26c <_vfprintf_r+0xab4>
 800c25a:	aa1f      	add	r2, sp, #124	; 0x7c
 800c25c:	4659      	mov	r1, fp
 800c25e:	4650      	mov	r0, sl
 800c260:	f002 fd6e 	bl	800ed40 <__sprint_r>
 800c264:	2800      	cmp	r0, #0
 800c266:	f040 8163 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c26a:	ac2c      	add	r4, sp, #176	; 0xb0
 800c26c:	3e10      	subs	r6, #16
 800c26e:	e7e4      	b.n	800c23a <_vfprintf_r+0xa82>
 800c270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c272:	6066      	str	r6, [r4, #4]
 800c274:	441e      	add	r6, r3
 800c276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c278:	9621      	str	r6, [sp, #132]	; 0x84
 800c27a:	3301      	adds	r3, #1
 800c27c:	2b07      	cmp	r3, #7
 800c27e:	9320      	str	r3, [sp, #128]	; 0x80
 800c280:	dc01      	bgt.n	800c286 <_vfprintf_r+0xace>
 800c282:	3408      	adds	r4, #8
 800c284:	e008      	b.n	800c298 <_vfprintf_r+0xae0>
 800c286:	aa1f      	add	r2, sp, #124	; 0x7c
 800c288:	4659      	mov	r1, fp
 800c28a:	4650      	mov	r0, sl
 800c28c:	f002 fd58 	bl	800ed40 <__sprint_r>
 800c290:	2800      	cmp	r0, #0
 800c292:	f040 814d 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c296:	ac2c      	add	r4, sp, #176	; 0xb0
 800c298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c29a:	9a04      	ldr	r2, [sp, #16]
 800c29c:	4293      	cmp	r3, r2
 800c29e:	4447      	add	r7, r8
 800c2a0:	db01      	blt.n	800c2a6 <_vfprintf_r+0xaee>
 800c2a2:	07e8      	lsls	r0, r5, #31
 800c2a4:	d517      	bpl.n	800c2d6 <_vfprintf_r+0xb1e>
 800c2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	9b08      	ldr	r3, [sp, #32]
 800c2ac:	6063      	str	r3, [r4, #4]
 800c2ae:	9a08      	ldr	r2, [sp, #32]
 800c2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2b2:	4413      	add	r3, r2
 800c2b4:	9321      	str	r3, [sp, #132]	; 0x84
 800c2b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	2b07      	cmp	r3, #7
 800c2bc:	9320      	str	r3, [sp, #128]	; 0x80
 800c2be:	dc01      	bgt.n	800c2c4 <_vfprintf_r+0xb0c>
 800c2c0:	3408      	adds	r4, #8
 800c2c2:	e008      	b.n	800c2d6 <_vfprintf_r+0xb1e>
 800c2c4:	aa1f      	add	r2, sp, #124	; 0x7c
 800c2c6:	4659      	mov	r1, fp
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	f002 fd39 	bl	800ed40 <__sprint_r>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f040 812e 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c2d4:	ac2c      	add	r4, sp, #176	; 0xb0
 800c2d6:	9b04      	ldr	r3, [sp, #16]
 800c2d8:	9a04      	ldr	r2, [sp, #16]
 800c2da:	eb08 0603 	add.w	r6, r8, r3
 800c2de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2e0:	1bf6      	subs	r6, r6, r7
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	429e      	cmp	r6, r3
 800c2e6:	bfa8      	it	ge
 800c2e8:	461e      	movge	r6, r3
 800c2ea:	2e00      	cmp	r6, #0
 800c2ec:	dd14      	ble.n	800c318 <_vfprintf_r+0xb60>
 800c2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2f0:	6027      	str	r7, [r4, #0]
 800c2f2:	4433      	add	r3, r6
 800c2f4:	9321      	str	r3, [sp, #132]	; 0x84
 800c2f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c2f8:	6066      	str	r6, [r4, #4]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	2b07      	cmp	r3, #7
 800c2fe:	9320      	str	r3, [sp, #128]	; 0x80
 800c300:	dc01      	bgt.n	800c306 <_vfprintf_r+0xb4e>
 800c302:	3408      	adds	r4, #8
 800c304:	e008      	b.n	800c318 <_vfprintf_r+0xb60>
 800c306:	aa1f      	add	r2, sp, #124	; 0x7c
 800c308:	4659      	mov	r1, fp
 800c30a:	4650      	mov	r0, sl
 800c30c:	f002 fd18 	bl	800ed40 <__sprint_r>
 800c310:	2800      	cmp	r0, #0
 800c312:	f040 810d 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c316:	ac2c      	add	r4, sp, #176	; 0xb0
 800c318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c31a:	9a04      	ldr	r2, [sp, #16]
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	eba2 0303 	sub.w	r3, r2, r3
 800c322:	bfac      	ite	ge
 800c324:	1b9e      	subge	r6, r3, r6
 800c326:	461e      	movlt	r6, r3
 800c328:	2e00      	cmp	r6, #0
 800c32a:	f340 80b1 	ble.w	800c490 <_vfprintf_r+0xcd8>
 800c32e:	4f12      	ldr	r7, [pc, #72]	; (800c378 <_vfprintf_r+0xbc0>)
 800c330:	f04f 0810 	mov.w	r8, #16
 800c334:	2e10      	cmp	r6, #16
 800c336:	dd16      	ble.n	800c366 <_vfprintf_r+0xbae>
 800c338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c33a:	3310      	adds	r3, #16
 800c33c:	9321      	str	r3, [sp, #132]	; 0x84
 800c33e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c340:	3301      	adds	r3, #1
 800c342:	2b07      	cmp	r3, #7
 800c344:	e884 0180 	stmia.w	r4, {r7, r8}
 800c348:	9320      	str	r3, [sp, #128]	; 0x80
 800c34a:	dc01      	bgt.n	800c350 <_vfprintf_r+0xb98>
 800c34c:	3408      	adds	r4, #8
 800c34e:	e008      	b.n	800c362 <_vfprintf_r+0xbaa>
 800c350:	aa1f      	add	r2, sp, #124	; 0x7c
 800c352:	4659      	mov	r1, fp
 800c354:	4650      	mov	r0, sl
 800c356:	f002 fcf3 	bl	800ed40 <__sprint_r>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	f040 80e8 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c360:	ac2c      	add	r4, sp, #176	; 0xb0
 800c362:	3e10      	subs	r6, #16
 800c364:	e7e6      	b.n	800c334 <_vfprintf_r+0xb7c>
 800c366:	4b04      	ldr	r3, [pc, #16]	; (800c378 <_vfprintf_r+0xbc0>)
 800c368:	e884 0048 	stmia.w	r4, {r3, r6}
 800c36c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c36e:	441e      	add	r6, r3
 800c370:	9621      	str	r6, [sp, #132]	; 0x84
 800c372:	e642      	b.n	800bffa <_vfprintf_r+0x842>
 800c374:	0801198c 	.word	0x0801198c
 800c378:	080119ae 	.word	0x080119ae
 800c37c:	9b04      	ldr	r3, [sp, #16]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	dc01      	bgt.n	800c386 <_vfprintf_r+0xbce>
 800c382:	07e9      	lsls	r1, r5, #31
 800c384:	d573      	bpl.n	800c46e <_vfprintf_r+0xcb6>
 800c386:	2301      	movs	r3, #1
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38c:	f8c4 8000 	str.w	r8, [r4]
 800c390:	3301      	adds	r3, #1
 800c392:	9321      	str	r3, [sp, #132]	; 0x84
 800c394:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c396:	3301      	adds	r3, #1
 800c398:	2b07      	cmp	r3, #7
 800c39a:	9320      	str	r3, [sp, #128]	; 0x80
 800c39c:	dc01      	bgt.n	800c3a2 <_vfprintf_r+0xbea>
 800c39e:	3408      	adds	r4, #8
 800c3a0:	e008      	b.n	800c3b4 <_vfprintf_r+0xbfc>
 800c3a2:	aa1f      	add	r2, sp, #124	; 0x7c
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	f002 fcca 	bl	800ed40 <__sprint_r>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 80bf 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c3b2:	ac2c      	add	r4, sp, #176	; 0xb0
 800c3b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	6063      	str	r3, [r4, #4]
 800c3bc:	9a08      	ldr	r2, [sp, #32]
 800c3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3c0:	4413      	add	r3, r2
 800c3c2:	9321      	str	r3, [sp, #132]	; 0x84
 800c3c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	2b07      	cmp	r3, #7
 800c3ca:	9320      	str	r3, [sp, #128]	; 0x80
 800c3cc:	dc01      	bgt.n	800c3d2 <_vfprintf_r+0xc1a>
 800c3ce:	3408      	adds	r4, #8
 800c3d0:	e008      	b.n	800c3e4 <_vfprintf_r+0xc2c>
 800c3d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800c3d4:	4659      	mov	r1, fp
 800c3d6:	4650      	mov	r0, sl
 800c3d8:	f002 fcb2 	bl	800ed40 <__sprint_r>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f040 80a7 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c3e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ec:	f7f4 fb88 	bl	8000b00 <__aeabi_dcmpeq>
 800c3f0:	9b04      	ldr	r3, [sp, #16]
 800c3f2:	1e5e      	subs	r6, r3, #1
 800c3f4:	b9b8      	cbnz	r0, 800c426 <_vfprintf_r+0xc6e>
 800c3f6:	f108 0301 	add.w	r3, r8, #1
 800c3fa:	e884 0048 	stmia.w	r4, {r3, r6}
 800c3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c400:	9a04      	ldr	r2, [sp, #16]
 800c402:	3b01      	subs	r3, #1
 800c404:	4413      	add	r3, r2
 800c406:	9321      	str	r3, [sp, #132]	; 0x84
 800c408:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c40a:	3301      	adds	r3, #1
 800c40c:	2b07      	cmp	r3, #7
 800c40e:	9320      	str	r3, [sp, #128]	; 0x80
 800c410:	dd34      	ble.n	800c47c <_vfprintf_r+0xcc4>
 800c412:	aa1f      	add	r2, sp, #124	; 0x7c
 800c414:	4659      	mov	r1, fp
 800c416:	4650      	mov	r0, sl
 800c418:	f002 fc92 	bl	800ed40 <__sprint_r>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	f040 8087 	bne.w	800c530 <_vfprintf_r+0xd78>
 800c422:	ac2c      	add	r4, sp, #176	; 0xb0
 800c424:	e02b      	b.n	800c47e <_vfprintf_r+0xcc6>
 800c426:	2e00      	cmp	r6, #0
 800c428:	dd29      	ble.n	800c47e <_vfprintf_r+0xcc6>
 800c42a:	4fa6      	ldr	r7, [pc, #664]	; (800c6c4 <_vfprintf_r+0xf0c>)
 800c42c:	f04f 0810 	mov.w	r8, #16
 800c430:	2e10      	cmp	r6, #16
 800c432:	dd15      	ble.n	800c460 <_vfprintf_r+0xca8>
 800c434:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c436:	3310      	adds	r3, #16
 800c438:	9321      	str	r3, [sp, #132]	; 0x84
 800c43a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c43c:	3301      	adds	r3, #1
 800c43e:	2b07      	cmp	r3, #7
 800c440:	e884 0180 	stmia.w	r4, {r7, r8}
 800c444:	9320      	str	r3, [sp, #128]	; 0x80
 800c446:	dc01      	bgt.n	800c44c <_vfprintf_r+0xc94>
 800c448:	3408      	adds	r4, #8
 800c44a:	e007      	b.n	800c45c <_vfprintf_r+0xca4>
 800c44c:	aa1f      	add	r2, sp, #124	; 0x7c
 800c44e:	4659      	mov	r1, fp
 800c450:	4650      	mov	r0, sl
 800c452:	f002 fc75 	bl	800ed40 <__sprint_r>
 800c456:	2800      	cmp	r0, #0
 800c458:	d16a      	bne.n	800c530 <_vfprintf_r+0xd78>
 800c45a:	ac2c      	add	r4, sp, #176	; 0xb0
 800c45c:	3e10      	subs	r6, #16
 800c45e:	e7e7      	b.n	800c430 <_vfprintf_r+0xc78>
 800c460:	4b98      	ldr	r3, [pc, #608]	; (800c6c4 <_vfprintf_r+0xf0c>)
 800c462:	e884 0048 	stmia.w	r4, {r3, r6}
 800c466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c468:	441e      	add	r6, r3
 800c46a:	9621      	str	r6, [sp, #132]	; 0x84
 800c46c:	e7cc      	b.n	800c408 <_vfprintf_r+0xc50>
 800c46e:	2301      	movs	r3, #1
 800c470:	6063      	str	r3, [r4, #4]
 800c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c474:	f8c4 8000 	str.w	r8, [r4]
 800c478:	3301      	adds	r3, #1
 800c47a:	e7c4      	b.n	800c406 <_vfprintf_r+0xc4e>
 800c47c:	3408      	adds	r4, #8
 800c47e:	ab1b      	add	r3, sp, #108	; 0x6c
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c484:	6063      	str	r3, [r4, #4]
 800c486:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c48a:	4413      	add	r3, r2
 800c48c:	e5b4      	b.n	800bff8 <_vfprintf_r+0x840>
 800c48e:	3408      	adds	r4, #8
 800c490:	076a      	lsls	r2, r5, #29
 800c492:	d40b      	bmi.n	800c4ac <_vfprintf_r+0xcf4>
 800c494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c49a:	428a      	cmp	r2, r1
 800c49c:	bfac      	ite	ge
 800c49e:	189b      	addge	r3, r3, r2
 800c4a0:	185b      	addlt	r3, r3, r1
 800c4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d035      	beq.n	800c516 <_vfprintf_r+0xd5e>
 800c4aa:	e02e      	b.n	800c50a <_vfprintf_r+0xd52>
 800c4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4b0:	1a9d      	subs	r5, r3, r2
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	ddee      	ble.n	800c494 <_vfprintf_r+0xcdc>
 800c4b6:	2610      	movs	r6, #16
 800c4b8:	4b83      	ldr	r3, [pc, #524]	; (800c6c8 <_vfprintf_r+0xf10>)
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	2d10      	cmp	r5, #16
 800c4be:	dd13      	ble.n	800c4e8 <_vfprintf_r+0xd30>
 800c4c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4c2:	6066      	str	r6, [r4, #4]
 800c4c4:	3310      	adds	r3, #16
 800c4c6:	9321      	str	r3, [sp, #132]	; 0x84
 800c4c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	2b07      	cmp	r3, #7
 800c4ce:	9320      	str	r3, [sp, #128]	; 0x80
 800c4d0:	dc01      	bgt.n	800c4d6 <_vfprintf_r+0xd1e>
 800c4d2:	3408      	adds	r4, #8
 800c4d4:	e006      	b.n	800c4e4 <_vfprintf_r+0xd2c>
 800c4d6:	aa1f      	add	r2, sp, #124	; 0x7c
 800c4d8:	4659      	mov	r1, fp
 800c4da:	4650      	mov	r0, sl
 800c4dc:	f002 fc30 	bl	800ed40 <__sprint_r>
 800c4e0:	bb30      	cbnz	r0, 800c530 <_vfprintf_r+0xd78>
 800c4e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800c4e4:	3d10      	subs	r5, #16
 800c4e6:	e7e7      	b.n	800c4b8 <_vfprintf_r+0xd00>
 800c4e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4ea:	6065      	str	r5, [r4, #4]
 800c4ec:	441d      	add	r5, r3
 800c4ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4f0:	9521      	str	r5, [sp, #132]	; 0x84
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	2b07      	cmp	r3, #7
 800c4f6:	9320      	str	r3, [sp, #128]	; 0x80
 800c4f8:	ddcc      	ble.n	800c494 <_vfprintf_r+0xcdc>
 800c4fa:	aa1f      	add	r2, sp, #124	; 0x7c
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	4650      	mov	r0, sl
 800c500:	f002 fc1e 	bl	800ed40 <__sprint_r>
 800c504:	2800      	cmp	r0, #0
 800c506:	d0c5      	beq.n	800c494 <_vfprintf_r+0xcdc>
 800c508:	e012      	b.n	800c530 <_vfprintf_r+0xd78>
 800c50a:	aa1f      	add	r2, sp, #124	; 0x7c
 800c50c:	4659      	mov	r1, fp
 800c50e:	4650      	mov	r0, sl
 800c510:	f002 fc16 	bl	800ed40 <__sprint_r>
 800c514:	b960      	cbnz	r0, 800c530 <_vfprintf_r+0xd78>
 800c516:	2300      	movs	r3, #0
 800c518:	9320      	str	r3, [sp, #128]	; 0x80
 800c51a:	9f03      	ldr	r7, [sp, #12]
 800c51c:	ac2c      	add	r4, sp, #176	; 0xb0
 800c51e:	f7ff b9b4 	b.w	800b88a <_vfprintf_r+0xd2>
 800c522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c524:	b123      	cbz	r3, 800c530 <_vfprintf_r+0xd78>
 800c526:	aa1f      	add	r2, sp, #124	; 0x7c
 800c528:	4659      	mov	r1, fp
 800c52a:	4650      	mov	r0, sl
 800c52c:	f002 fc08 	bl	800ed40 <__sprint_r>
 800c530:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c534:	065b      	lsls	r3, r3, #25
 800c536:	f53f a98b 	bmi.w	800b850 <_vfprintf_r+0x98>
 800c53a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c53c:	e12f      	b.n	800c79e <_vfprintf_r+0xfe6>
 800c53e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c542:	4610      	mov	r0, r2
 800c544:	4619      	mov	r1, r3
 800c546:	f7f4 fb0d 	bl	8000b64 <__aeabi_dcmpun>
 800c54a:	b160      	cbz	r0, 800c566 <_vfprintf_r+0xdae>
 800c54c:	4b5f      	ldr	r3, [pc, #380]	; (800c6cc <_vfprintf_r+0xf14>)
 800c54e:	4a60      	ldr	r2, [pc, #384]	; (800c6d0 <_vfprintf_r+0xf18>)
 800c550:	9902      	ldr	r1, [sp, #8]
 800c552:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800c556:	2947      	cmp	r1, #71	; 0x47
 800c558:	bfcc      	ite	gt
 800c55a:	4690      	movgt	r8, r2
 800c55c:	4698      	movle	r8, r3
 800c55e:	f04f 0903 	mov.w	r9, #3
 800c562:	2600      	movs	r6, #0
 800c564:	e451      	b.n	800be0a <_vfprintf_r+0x652>
 800c566:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c56a:	d00a      	beq.n	800c582 <_vfprintf_r+0xdca>
 800c56c:	9b02      	ldr	r3, [sp, #8]
 800c56e:	f023 0320 	bic.w	r3, r3, #32
 800c572:	2b47      	cmp	r3, #71	; 0x47
 800c574:	d107      	bne.n	800c586 <_vfprintf_r+0xdce>
 800c576:	f1b9 0f00 	cmp.w	r9, #0
 800c57a:	bf08      	it	eq
 800c57c:	f04f 0901 	moveq.w	r9, #1
 800c580:	e001      	b.n	800c586 <_vfprintf_r+0xdce>
 800c582:	f04f 0906 	mov.w	r9, #6
 800c586:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800c58a:	930c      	str	r3, [sp, #48]	; 0x30
 800c58c:	9b07      	ldr	r3, [sp, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	da07      	bge.n	800c5a2 <_vfprintf_r+0xdea>
 800c592:	9b06      	ldr	r3, [sp, #24]
 800c594:	930e      	str	r3, [sp, #56]	; 0x38
 800c596:	9b07      	ldr	r3, [sp, #28]
 800c598:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c59c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c59e:	232d      	movs	r3, #45	; 0x2d
 800c5a0:	e004      	b.n	800c5ac <_vfprintf_r+0xdf4>
 800c5a2:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c5a6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5ae:	9b02      	ldr	r3, [sp, #8]
 800c5b0:	f023 0720 	bic.w	r7, r3, #32
 800c5b4:	2f46      	cmp	r7, #70	; 0x46
 800c5b6:	d004      	beq.n	800c5c2 <_vfprintf_r+0xe0a>
 800c5b8:	2f45      	cmp	r7, #69	; 0x45
 800c5ba:	d105      	bne.n	800c5c8 <_vfprintf_r+0xe10>
 800c5bc:	f109 0601 	add.w	r6, r9, #1
 800c5c0:	e003      	b.n	800c5ca <_vfprintf_r+0xe12>
 800c5c2:	464e      	mov	r6, r9
 800c5c4:	2103      	movs	r1, #3
 800c5c6:	e001      	b.n	800c5cc <_vfprintf_r+0xe14>
 800c5c8:	464e      	mov	r6, r9
 800c5ca:	2102      	movs	r1, #2
 800c5cc:	ab1d      	add	r3, sp, #116	; 0x74
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	ab1a      	add	r3, sp, #104	; 0x68
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	ab19      	add	r3, sp, #100	; 0x64
 800c5d8:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800c5dc:	4650      	mov	r0, sl
 800c5de:	f000 fa1b 	bl	800ca18 <_dtoa_r>
 800c5e2:	2f47      	cmp	r7, #71	; 0x47
 800c5e4:	4680      	mov	r8, r0
 800c5e6:	d102      	bne.n	800c5ee <_vfprintf_r+0xe36>
 800c5e8:	07eb      	lsls	r3, r5, #31
 800c5ea:	f140 80ce 	bpl.w	800c78a <_vfprintf_r+0xfd2>
 800c5ee:	eb08 0306 	add.w	r3, r8, r6
 800c5f2:	2f46      	cmp	r7, #70	; 0x46
 800c5f4:	9304      	str	r3, [sp, #16]
 800c5f6:	d111      	bne.n	800c61c <_vfprintf_r+0xe64>
 800c5f8:	f898 3000 	ldrb.w	r3, [r8]
 800c5fc:	2b30      	cmp	r3, #48	; 0x30
 800c5fe:	d109      	bne.n	800c614 <_vfprintf_r+0xe5c>
 800c600:	2200      	movs	r2, #0
 800c602:	2300      	movs	r3, #0
 800c604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c608:	f7f4 fa7a 	bl	8000b00 <__aeabi_dcmpeq>
 800c60c:	b910      	cbnz	r0, 800c614 <_vfprintf_r+0xe5c>
 800c60e:	f1c6 0601 	rsb	r6, r6, #1
 800c612:	9619      	str	r6, [sp, #100]	; 0x64
 800c614:	9a04      	ldr	r2, [sp, #16]
 800c616:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c618:	441a      	add	r2, r3
 800c61a:	9204      	str	r2, [sp, #16]
 800c61c:	2200      	movs	r2, #0
 800c61e:	2300      	movs	r3, #0
 800c620:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c624:	f7f4 fa6c 	bl	8000b00 <__aeabi_dcmpeq>
 800c628:	b908      	cbnz	r0, 800c62e <_vfprintf_r+0xe76>
 800c62a:	2230      	movs	r2, #48	; 0x30
 800c62c:	e002      	b.n	800c634 <_vfprintf_r+0xe7c>
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	931d      	str	r3, [sp, #116]	; 0x74
 800c632:	e007      	b.n	800c644 <_vfprintf_r+0xe8c>
 800c634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c636:	9904      	ldr	r1, [sp, #16]
 800c638:	4299      	cmp	r1, r3
 800c63a:	d903      	bls.n	800c644 <_vfprintf_r+0xe8c>
 800c63c:	1c59      	adds	r1, r3, #1
 800c63e:	911d      	str	r1, [sp, #116]	; 0x74
 800c640:	701a      	strb	r2, [r3, #0]
 800c642:	e7f7      	b.n	800c634 <_vfprintf_r+0xe7c>
 800c644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c646:	2f47      	cmp	r7, #71	; 0x47
 800c648:	ebc8 0303 	rsb	r3, r8, r3
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	d108      	bne.n	800c662 <_vfprintf_r+0xeaa>
 800c650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c652:	1cdf      	adds	r7, r3, #3
 800c654:	db01      	blt.n	800c65a <_vfprintf_r+0xea2>
 800c656:	4599      	cmp	r9, r3
 800c658:	da69      	bge.n	800c72e <_vfprintf_r+0xf76>
 800c65a:	9b02      	ldr	r3, [sp, #8]
 800c65c:	3b02      	subs	r3, #2
 800c65e:	9302      	str	r3, [sp, #8]
 800c660:	e002      	b.n	800c668 <_vfprintf_r+0xeb0>
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	2b65      	cmp	r3, #101	; 0x65
 800c666:	dc4b      	bgt.n	800c700 <_vfprintf_r+0xf48>
 800c668:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c66a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c66e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800c672:	3b01      	subs	r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	9319      	str	r3, [sp, #100]	; 0x64
 800c678:	bfba      	itte	lt
 800c67a:	425b      	neglt	r3, r3
 800c67c:	222d      	movlt	r2, #45	; 0x2d
 800c67e:	222b      	movge	r2, #43	; 0x2b
 800c680:	2b09      	cmp	r3, #9
 800c682:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800c686:	dd25      	ble.n	800c6d4 <_vfprintf_r+0xf1c>
 800c688:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800c68c:	200a      	movs	r0, #10
 800c68e:	fb93 f1f0 	sdiv	r1, r3, r0
 800c692:	fb00 3311 	mls	r3, r0, r1, r3
 800c696:	3330      	adds	r3, #48	; 0x30
 800c698:	2909      	cmp	r1, #9
 800c69a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800c69e:	460b      	mov	r3, r1
 800c6a0:	dcf5      	bgt.n	800c68e <_vfprintf_r+0xed6>
 800c6a2:	3330      	adds	r3, #48	; 0x30
 800c6a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c6a8:	1e51      	subs	r1, r2, #1
 800c6aa:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800c6ae:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800c6b2:	4281      	cmp	r1, r0
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	d214      	bcs.n	800c6e2 <_vfprintf_r+0xf2a>
 800c6b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6bc:	f803 2b01 	strb.w	r2, [r3], #1
 800c6c0:	e7f7      	b.n	800c6b2 <_vfprintf_r+0xefa>
 800c6c2:	bf00      	nop
 800c6c4:	080119ae 	.word	0x080119ae
 800c6c8:	0801199e 	.word	0x0801199e
 800c6cc:	08011962 	.word	0x08011962
 800c6d0:	08011966 	.word	0x08011966
 800c6d4:	2230      	movs	r2, #48	; 0x30
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800c6dc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c6e0:	aa1c      	add	r2, sp, #112	; 0x70
 800c6e2:	ab1b      	add	r3, sp, #108	; 0x6c
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	9a04      	ldr	r2, [sp, #16]
 800c6e8:	9310      	str	r3, [sp, #64]	; 0x40
 800c6ea:	2a01      	cmp	r2, #1
 800c6ec:	eb03 0902 	add.w	r9, r3, r2
 800c6f0:	dc02      	bgt.n	800c6f8 <_vfprintf_r+0xf40>
 800c6f2:	f015 0701 	ands.w	r7, r5, #1
 800c6f6:	d032      	beq.n	800c75e <_vfprintf_r+0xfa6>
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	2700      	movs	r7, #0
 800c6fc:	4499      	add	r9, r3
 800c6fe:	e02e      	b.n	800c75e <_vfprintf_r+0xfa6>
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	2b66      	cmp	r3, #102	; 0x66
 800c704:	d113      	bne.n	800c72e <_vfprintf_r+0xf76>
 800c706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c708:	2b00      	cmp	r3, #0
 800c70a:	dd07      	ble.n	800c71c <_vfprintf_r+0xf64>
 800c70c:	f1b9 0f00 	cmp.w	r9, #0
 800c710:	d101      	bne.n	800c716 <_vfprintf_r+0xf5e>
 800c712:	07ee      	lsls	r6, r5, #31
 800c714:	d521      	bpl.n	800c75a <_vfprintf_r+0xfa2>
 800c716:	9a08      	ldr	r2, [sp, #32]
 800c718:	4413      	add	r3, r2
 800c71a:	e006      	b.n	800c72a <_vfprintf_r+0xf72>
 800c71c:	f1b9 0f00 	cmp.w	r9, #0
 800c720:	d101      	bne.n	800c726 <_vfprintf_r+0xf6e>
 800c722:	07ed      	lsls	r5, r5, #31
 800c724:	d514      	bpl.n	800c750 <_vfprintf_r+0xf98>
 800c726:	9b08      	ldr	r3, [sp, #32]
 800c728:	3301      	adds	r3, #1
 800c72a:	444b      	add	r3, r9
 800c72c:	e015      	b.n	800c75a <_vfprintf_r+0xfa2>
 800c72e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c730:	9a04      	ldr	r2, [sp, #16]
 800c732:	4293      	cmp	r3, r2
 800c734:	db03      	blt.n	800c73e <_vfprintf_r+0xf86>
 800c736:	07e8      	lsls	r0, r5, #31
 800c738:	d50d      	bpl.n	800c756 <_vfprintf_r+0xf9e>
 800c73a:	9a08      	ldr	r2, [sp, #32]
 800c73c:	e006      	b.n	800c74c <_vfprintf_r+0xf94>
 800c73e:	9a04      	ldr	r2, [sp, #16]
 800c740:	9908      	ldr	r1, [sp, #32]
 800c742:	2b00      	cmp	r3, #0
 800c744:	440a      	add	r2, r1
 800c746:	dc05      	bgt.n	800c754 <_vfprintf_r+0xf9c>
 800c748:	f1c3 0301 	rsb	r3, r3, #1
 800c74c:	4413      	add	r3, r2
 800c74e:	e002      	b.n	800c756 <_vfprintf_r+0xf9e>
 800c750:	2301      	movs	r3, #1
 800c752:	e002      	b.n	800c75a <_vfprintf_r+0xfa2>
 800c754:	4613      	mov	r3, r2
 800c756:	2267      	movs	r2, #103	; 0x67
 800c758:	9202      	str	r2, [sp, #8]
 800c75a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800c75c:	4699      	mov	r9, r3
 800c75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c760:	b113      	cbz	r3, 800c768 <_vfprintf_r+0xfb0>
 800c762:	232d      	movs	r3, #45	; 0x2d
 800c764:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c768:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c76a:	2600      	movs	r6, #0
 800c76c:	f7ff bb4e 	b.w	800be0c <_vfprintf_r+0x654>
 800c770:	2200      	movs	r2, #0
 800c772:	2300      	movs	r3, #0
 800c774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c778:	f7f4 f9cc 	bl	8000b14 <__aeabi_dcmplt>
 800c77c:	b110      	cbz	r0, 800c784 <_vfprintf_r+0xfcc>
 800c77e:	232d      	movs	r3, #45	; 0x2d
 800c780:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c784:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <_vfprintf_r+0xfec>)
 800c786:	4a08      	ldr	r2, [pc, #32]	; (800c7a8 <_vfprintf_r+0xff0>)
 800c788:	e6e2      	b.n	800c550 <_vfprintf_r+0xd98>
 800c78a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c78c:	1a1b      	subs	r3, r3, r0
 800c78e:	9304      	str	r3, [sp, #16]
 800c790:	e75e      	b.n	800c650 <_vfprintf_r+0xe98>
 800c792:	ea56 0207 	orrs.w	r2, r6, r7
 800c796:	f47f aaac 	bne.w	800bcf2 <_vfprintf_r+0x53a>
 800c79a:	f7ff bab1 	b.w	800bd00 <_vfprintf_r+0x548>
 800c79e:	b03d      	add	sp, #244	; 0xf4
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a4:	0801195a 	.word	0x0801195a
 800c7a8:	0801195e 	.word	0x0801195e

0800c7ac <__sbprintf>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	8989      	ldrh	r1, [r1, #12]
 800c7b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800c7b6:	f021 0102 	bic.w	r1, r1, #2
 800c7ba:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c7be:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c7c0:	9119      	str	r1, [sp, #100]	; 0x64
 800c7c2:	89e1      	ldrh	r1, [r4, #14]
 800c7c4:	f8ad 100e 	strh.w	r1, [sp, #14]
 800c7c8:	6a21      	ldr	r1, [r4, #32]
 800c7ca:	9108      	str	r1, [sp, #32]
 800c7cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c7ce:	910a      	str	r1, [sp, #40]	; 0x28
 800c7d0:	a91a      	add	r1, sp, #104	; 0x68
 800c7d2:	9100      	str	r1, [sp, #0]
 800c7d4:	9104      	str	r1, [sp, #16]
 800c7d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c7da:	9102      	str	r1, [sp, #8]
 800c7dc:	9105      	str	r1, [sp, #20]
 800c7de:	2100      	movs	r1, #0
 800c7e0:	9106      	str	r1, [sp, #24]
 800c7e2:	4669      	mov	r1, sp
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	f7fe ffe7 	bl	800b7b8 <_vfprintf_r>
 800c7ea:	1e05      	subs	r5, r0, #0
 800c7ec:	db07      	blt.n	800c7fe <__sbprintf+0x52>
 800c7ee:	4669      	mov	r1, sp
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 ff41 	bl	800d678 <_fflush_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	bf18      	it	ne
 800c7fa:	f04f 35ff 	movne.w	r5, #4294967295
 800c7fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c802:	065b      	lsls	r3, r3, #25
 800c804:	bf48      	it	mi
 800c806:	89a3      	ldrhmi	r3, [r4, #12]
 800c808:	4628      	mov	r0, r5
 800c80a:	bf44      	itt	mi
 800c80c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800c810:	81a3      	strhmi	r3, [r4, #12]
 800c812:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800c816:	bd70      	pop	{r4, r5, r6, pc}

0800c818 <__swsetup_r>:
 800c818:	4b32      	ldr	r3, [pc, #200]	; (800c8e4 <__swsetup_r+0xcc>)
 800c81a:	b570      	push	{r4, r5, r6, lr}
 800c81c:	681d      	ldr	r5, [r3, #0]
 800c81e:	4606      	mov	r6, r0
 800c820:	460c      	mov	r4, r1
 800c822:	b125      	cbz	r5, 800c82e <__swsetup_r+0x16>
 800c824:	69ab      	ldr	r3, [r5, #24]
 800c826:	b913      	cbnz	r3, 800c82e <__swsetup_r+0x16>
 800c828:	4628      	mov	r0, r5
 800c82a:	f000 ff8f 	bl	800d74c <__sinit>
 800c82e:	4b2e      	ldr	r3, [pc, #184]	; (800c8e8 <__swsetup_r+0xd0>)
 800c830:	429c      	cmp	r4, r3
 800c832:	d101      	bne.n	800c838 <__swsetup_r+0x20>
 800c834:	686c      	ldr	r4, [r5, #4]
 800c836:	e008      	b.n	800c84a <__swsetup_r+0x32>
 800c838:	4b2c      	ldr	r3, [pc, #176]	; (800c8ec <__swsetup_r+0xd4>)
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d101      	bne.n	800c842 <__swsetup_r+0x2a>
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	e003      	b.n	800c84a <__swsetup_r+0x32>
 800c842:	4b2b      	ldr	r3, [pc, #172]	; (800c8f0 <__swsetup_r+0xd8>)
 800c844:	429c      	cmp	r4, r3
 800c846:	bf08      	it	eq
 800c848:	68ec      	ldreq	r4, [r5, #12]
 800c84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c84e:	b29a      	uxth	r2, r3
 800c850:	0715      	lsls	r5, r2, #28
 800c852:	d41d      	bmi.n	800c890 <__swsetup_r+0x78>
 800c854:	06d0      	lsls	r0, r2, #27
 800c856:	d402      	bmi.n	800c85e <__swsetup_r+0x46>
 800c858:	2209      	movs	r2, #9
 800c85a:	6032      	str	r2, [r6, #0]
 800c85c:	e03a      	b.n	800c8d4 <__swsetup_r+0xbc>
 800c85e:	0751      	lsls	r1, r2, #29
 800c860:	d512      	bpl.n	800c888 <__swsetup_r+0x70>
 800c862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c864:	b141      	cbz	r1, 800c878 <__swsetup_r+0x60>
 800c866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c86a:	4299      	cmp	r1, r3
 800c86c:	d002      	beq.n	800c874 <__swsetup_r+0x5c>
 800c86e:	4630      	mov	r0, r6
 800c870:	f001 f834 	bl	800d8dc <_free_r>
 800c874:	2300      	movs	r3, #0
 800c876:	6363      	str	r3, [r4, #52]	; 0x34
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	2300      	movs	r3, #0
 800c882:	6063      	str	r3, [r4, #4]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	6023      	str	r3, [r4, #0]
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	f043 0308 	orr.w	r3, r3, #8
 800c88e:	81a3      	strh	r3, [r4, #12]
 800c890:	6923      	ldr	r3, [r4, #16]
 800c892:	b94b      	cbnz	r3, 800c8a8 <__swsetup_r+0x90>
 800c894:	89a3      	ldrh	r3, [r4, #12]
 800c896:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c89a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c89e:	d003      	beq.n	800c8a8 <__swsetup_r+0x90>
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f001 fa7a 	bl	800dd9c <__smakebuf_r>
 800c8a8:	89a2      	ldrh	r2, [r4, #12]
 800c8aa:	f012 0301 	ands.w	r3, r2, #1
 800c8ae:	d005      	beq.n	800c8bc <__swsetup_r+0xa4>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	60a3      	str	r3, [r4, #8]
 800c8b4:	6963      	ldr	r3, [r4, #20]
 800c8b6:	425b      	negs	r3, r3
 800c8b8:	61a3      	str	r3, [r4, #24]
 800c8ba:	e003      	b.n	800c8c4 <__swsetup_r+0xac>
 800c8bc:	0792      	lsls	r2, r2, #30
 800c8be:	bf58      	it	pl
 800c8c0:	6963      	ldrpl	r3, [r4, #20]
 800c8c2:	60a3      	str	r3, [r4, #8]
 800c8c4:	6923      	ldr	r3, [r4, #16]
 800c8c6:	b95b      	cbnz	r3, 800c8e0 <__swsetup_r+0xc8>
 800c8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8cc:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800c8d0:	b280      	uxth	r0, r0
 800c8d2:	b130      	cbz	r0, 800c8e2 <__swsetup_r+0xca>
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	bd70      	pop	{r4, r5, r6, pc}
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	20010120 	.word	0x20010120
 800c8e8:	08011acc 	.word	0x08011acc
 800c8ec:	08011aec 	.word	0x08011aec
 800c8f0:	08011b0c 	.word	0x08011b0c

0800c8f4 <quorem>:
 800c8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f8:	6903      	ldr	r3, [r0, #16]
 800c8fa:	690c      	ldr	r4, [r1, #16]
 800c8fc:	429c      	cmp	r4, r3
 800c8fe:	4680      	mov	r8, r0
 800c900:	f300 8083 	bgt.w	800ca0a <quorem+0x116>
 800c904:	3c01      	subs	r4, #1
 800c906:	f101 0714 	add.w	r7, r1, #20
 800c90a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800c90e:	f100 0614 	add.w	r6, r0, #20
 800c912:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c916:	eb06 030e 	add.w	r3, r6, lr
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	3501      	adds	r5, #1
 800c91e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c922:	fbb3 f5f5 	udiv	r5, r3, r5
 800c926:	eb07 090e 	add.w	r9, r7, lr
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	d039      	beq.n	800c9a2 <quorem+0xae>
 800c92e:	f04f 0a00 	mov.w	sl, #0
 800c932:	4638      	mov	r0, r7
 800c934:	46b4      	mov	ip, r6
 800c936:	46d3      	mov	fp, sl
 800c938:	f850 2b04 	ldr.w	r2, [r0], #4
 800c93c:	b293      	uxth	r3, r2
 800c93e:	fb05 a303 	mla	r3, r5, r3, sl
 800c942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c946:	b29b      	uxth	r3, r3
 800c948:	ebc3 030b 	rsb	r3, r3, fp
 800c94c:	0c12      	lsrs	r2, r2, #16
 800c94e:	f8bc b000 	ldrh.w	fp, [ip]
 800c952:	fb05 a202 	mla	r2, r5, r2, sl
 800c956:	fa13 f38b 	uxtah	r3, r3, fp
 800c95a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c95e:	fa1f fb82 	uxth.w	fp, r2
 800c962:	f8dc 2000 	ldr.w	r2, [ip]
 800c966:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c96a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c96e:	b29b      	uxth	r3, r3
 800c970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c974:	4581      	cmp	r9, r0
 800c976:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c97a:	f84c 3b04 	str.w	r3, [ip], #4
 800c97e:	d2db      	bcs.n	800c938 <quorem+0x44>
 800c980:	f856 300e 	ldr.w	r3, [r6, lr]
 800c984:	b96b      	cbnz	r3, 800c9a2 <quorem+0xae>
 800c986:	9b01      	ldr	r3, [sp, #4]
 800c988:	3b04      	subs	r3, #4
 800c98a:	429e      	cmp	r6, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	d302      	bcc.n	800c996 <quorem+0xa2>
 800c990:	f8c8 4010 	str.w	r4, [r8, #16]
 800c994:	e005      	b.n	800c9a2 <quorem+0xae>
 800c996:	6812      	ldr	r2, [r2, #0]
 800c998:	3b04      	subs	r3, #4
 800c99a:	2a00      	cmp	r2, #0
 800c99c:	d1f8      	bne.n	800c990 <quorem+0x9c>
 800c99e:	3c01      	subs	r4, #1
 800c9a0:	e7f3      	b.n	800c98a <quorem+0x96>
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	f001 fe89 	bl	800e6ba <__mcmp>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	db2c      	blt.n	800ca06 <quorem+0x112>
 800c9ac:	3501      	adds	r5, #1
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f04f 0e00 	mov.w	lr, #0
 800c9b4:	f857 1b04 	ldr.w	r1, [r7], #4
 800c9b8:	f8d0 c000 	ldr.w	ip, [r0]
 800c9bc:	b28a      	uxth	r2, r1
 800c9be:	ebc2 030e 	rsb	r3, r2, lr
 800c9c2:	0c09      	lsrs	r1, r1, #16
 800c9c4:	fa13 f38c 	uxtah	r3, r3, ip
 800c9c8:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800c9cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9d6:	45b9      	cmp	r9, r7
 800c9d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c9dc:	f840 3b04 	str.w	r3, [r0], #4
 800c9e0:	d2e8      	bcs.n	800c9b4 <quorem+0xc0>
 800c9e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c9e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c9ea:	b962      	cbnz	r2, 800ca06 <quorem+0x112>
 800c9ec:	3b04      	subs	r3, #4
 800c9ee:	429e      	cmp	r6, r3
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	d302      	bcc.n	800c9fa <quorem+0x106>
 800c9f4:	f8c8 4010 	str.w	r4, [r8, #16]
 800c9f8:	e005      	b.n	800ca06 <quorem+0x112>
 800c9fa:	6812      	ldr	r2, [r2, #0]
 800c9fc:	3b04      	subs	r3, #4
 800c9fe:	2a00      	cmp	r2, #0
 800ca00:	d1f8      	bne.n	800c9f4 <quorem+0x100>
 800ca02:	3c01      	subs	r4, #1
 800ca04:	e7f3      	b.n	800c9ee <quorem+0xfa>
 800ca06:	4628      	mov	r0, r5
 800ca08:	e000      	b.n	800ca0c <quorem+0x118>
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	b003      	add	sp, #12
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	0000      	movs	r0, r0
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <_dtoa_r>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	ec59 8b10 	vmov	r8, r9, d0
 800ca20:	b097      	sub	sp, #92	; 0x5c
 800ca22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca24:	9106      	str	r1, [sp, #24]
 800ca26:	4682      	mov	sl, r0
 800ca28:	9209      	str	r2, [sp, #36]	; 0x24
 800ca2a:	9310      	str	r3, [sp, #64]	; 0x40
 800ca2c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800ca2e:	e9cd 8900 	strd	r8, r9, [sp]
 800ca32:	b945      	cbnz	r5, 800ca46 <_dtoa_r+0x2e>
 800ca34:	2010      	movs	r0, #16
 800ca36:	f001 f9ed 	bl	800de14 <malloc>
 800ca3a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800ca3e:	6045      	str	r5, [r0, #4]
 800ca40:	6085      	str	r5, [r0, #8]
 800ca42:	6005      	str	r5, [r0, #0]
 800ca44:	60c5      	str	r5, [r0, #12]
 800ca46:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800ca4a:	6819      	ldr	r1, [r3, #0]
 800ca4c:	b159      	cbz	r1, 800ca66 <_dtoa_r+0x4e>
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	604a      	str	r2, [r1, #4]
 800ca52:	2301      	movs	r3, #1
 800ca54:	4093      	lsls	r3, r2
 800ca56:	608b      	str	r3, [r1, #8]
 800ca58:	4650      	mov	r0, sl
 800ca5a:	f001 fc55 	bl	800e308 <_Bfree>
 800ca5e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	9b01      	ldr	r3, [sp, #4]
 800ca68:	4a9f      	ldr	r2, [pc, #636]	; (800cce8 <_dtoa_r+0x2d0>)
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	bfbf      	itttt	lt
 800ca6e:	2301      	movlt	r3, #1
 800ca70:	6023      	strlt	r3, [r4, #0]
 800ca72:	9b01      	ldrlt	r3, [sp, #4]
 800ca74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca78:	bfb8      	it	lt
 800ca7a:	9301      	strlt	r3, [sp, #4]
 800ca7c:	9f01      	ldr	r7, [sp, #4]
 800ca7e:	bfa4      	itt	ge
 800ca80:	2300      	movge	r3, #0
 800ca82:	6023      	strge	r3, [r4, #0]
 800ca84:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800ca88:	0d1b      	lsrs	r3, r3, #20
 800ca8a:	051b      	lsls	r3, r3, #20
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d11d      	bne.n	800cacc <_dtoa_r+0xb4>
 800ca90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca92:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	b943      	cbnz	r3, 800caae <_dtoa_r+0x96>
 800ca9c:	4a93      	ldr	r2, [pc, #588]	; (800ccec <_dtoa_r+0x2d4>)
 800ca9e:	4b94      	ldr	r3, [pc, #592]	; (800ccf0 <_dtoa_r+0x2d8>)
 800caa0:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800caa4:	2800      	cmp	r0, #0
 800caa6:	bf14      	ite	ne
 800caa8:	4618      	movne	r0, r3
 800caaa:	4610      	moveq	r0, r2
 800caac:	e000      	b.n	800cab0 <_dtoa_r+0x98>
 800caae:	4890      	ldr	r0, [pc, #576]	; (800ccf0 <_dtoa_r+0x2d8>)
 800cab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 854a 	beq.w	800d54c <_dtoa_r+0xb34>
 800cab8:	78c3      	ldrb	r3, [r0, #3]
 800caba:	b113      	cbz	r3, 800cac2 <_dtoa_r+0xaa>
 800cabc:	f100 0308 	add.w	r3, r0, #8
 800cac0:	e000      	b.n	800cac4 <_dtoa_r+0xac>
 800cac2:	1cc3      	adds	r3, r0, #3
 800cac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	f000 bd40 	b.w	800d54c <_dtoa_r+0xb34>
 800cacc:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cad0:	2200      	movs	r2, #0
 800cad2:	2300      	movs	r3, #0
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	f7f4 f812 	bl	8000b00 <__aeabi_dcmpeq>
 800cadc:	4680      	mov	r8, r0
 800cade:	b158      	cbz	r0, 800caf8 <_dtoa_r+0xe0>
 800cae0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cae2:	2301      	movs	r3, #1
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 8522 	beq.w	800d532 <_dtoa_r+0xb1a>
 800caee:	4881      	ldr	r0, [pc, #516]	; (800ccf4 <_dtoa_r+0x2dc>)
 800caf0:	6018      	str	r0, [r3, #0]
 800caf2:	3801      	subs	r0, #1
 800caf4:	f000 bd2a 	b.w	800d54c <_dtoa_r+0xb34>
 800caf8:	aa14      	add	r2, sp, #80	; 0x50
 800cafa:	a915      	add	r1, sp, #84	; 0x54
 800cafc:	ec45 4b10 	vmov	d0, r4, r5
 800cb00:	4650      	mov	r0, sl
 800cb02:	f001 fe55 	bl	800e7b0 <__d2b>
 800cb06:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb0a:	9002      	str	r0, [sp, #8]
 800cb0c:	b15e      	cbz	r6, 800cb26 <_dtoa_r+0x10e>
 800cb0e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cb12:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cb16:	4620      	mov	r0, r4
 800cb18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb1c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800cb20:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800cb24:	e01d      	b.n	800cb62 <_dtoa_r+0x14a>
 800cb26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb28:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800cb2a:	441e      	add	r6, r3
 800cb2c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800cb30:	2b20      	cmp	r3, #32
 800cb32:	dd0a      	ble.n	800cb4a <_dtoa_r+0x132>
 800cb34:	9a00      	ldr	r2, [sp, #0]
 800cb36:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800cb3a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800cb3e:	fa22 f000 	lsr.w	r0, r2, r0
 800cb42:	fa07 f303 	lsl.w	r3, r7, r3
 800cb46:	4318      	orrs	r0, r3
 800cb48:	e004      	b.n	800cb54 <_dtoa_r+0x13c>
 800cb4a:	f1c3 0020 	rsb	r0, r3, #32
 800cb4e:	9b00      	ldr	r3, [sp, #0]
 800cb50:	fa03 f000 	lsl.w	r0, r3, r0
 800cb54:	f7f3 fcf6 	bl	8000544 <__aeabi_ui2d>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cb5e:	3e01      	subs	r6, #1
 800cb60:	9311      	str	r3, [sp, #68]	; 0x44
 800cb62:	2200      	movs	r2, #0
 800cb64:	4b64      	ldr	r3, [pc, #400]	; (800ccf8 <_dtoa_r+0x2e0>)
 800cb66:	f7f3 fbaf 	bl	80002c8 <__aeabi_dsub>
 800cb6a:	a359      	add	r3, pc, #356	; (adr r3, 800ccd0 <_dtoa_r+0x2b8>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fd5e 	bl	8000630 <__aeabi_dmul>
 800cb74:	a358      	add	r3, pc, #352	; (adr r3, 800ccd8 <_dtoa_r+0x2c0>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	f7f3 fba7 	bl	80002cc <__adddf3>
 800cb7e:	4604      	mov	r4, r0
 800cb80:	4630      	mov	r0, r6
 800cb82:	460d      	mov	r5, r1
 800cb84:	f7f3 fcee 	bl	8000564 <__aeabi_i2d>
 800cb88:	a355      	add	r3, pc, #340	; (adr r3, 800cce0 <_dtoa_r+0x2c8>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fd4f 	bl	8000630 <__aeabi_dmul>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	4620      	mov	r0, r4
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7f3 fb97 	bl	80002cc <__adddf3>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	460d      	mov	r5, r1
 800cba2:	f7f3 fff5 	bl	8000b90 <__aeabi_d2iz>
 800cba6:	2200      	movs	r2, #0
 800cba8:	4683      	mov	fp, r0
 800cbaa:	2300      	movs	r3, #0
 800cbac:	4620      	mov	r0, r4
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f7f3 ffb0 	bl	8000b14 <__aeabi_dcmplt>
 800cbb4:	b158      	cbz	r0, 800cbce <_dtoa_r+0x1b6>
 800cbb6:	4658      	mov	r0, fp
 800cbb8:	f7f3 fcd4 	bl	8000564 <__aeabi_i2d>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	f7f3 ff9c 	bl	8000b00 <__aeabi_dcmpeq>
 800cbc8:	b908      	cbnz	r0, 800cbce <_dtoa_r+0x1b6>
 800cbca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbce:	f1bb 0f16 	cmp.w	fp, #22
 800cbd2:	d80d      	bhi.n	800cbf0 <_dtoa_r+0x1d8>
 800cbd4:	4949      	ldr	r1, [pc, #292]	; (800ccfc <_dtoa_r+0x2e4>)
 800cbd6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cbda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe2:	f7f3 ffb5 	bl	8000b50 <__aeabi_dcmpgt>
 800cbe6:	b130      	cbz	r0, 800cbf6 <_dtoa_r+0x1de>
 800cbe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbec:	2300      	movs	r3, #0
 800cbee:	e000      	b.n	800cbf2 <_dtoa_r+0x1da>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	930d      	str	r3, [sp, #52]	; 0x34
 800cbf4:	e000      	b.n	800cbf8 <_dtoa_r+0x1e0>
 800cbf6:	900d      	str	r0, [sp, #52]	; 0x34
 800cbf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbfa:	1b9e      	subs	r6, r3, r6
 800cbfc:	1e73      	subs	r3, r6, #1
 800cbfe:	9305      	str	r3, [sp, #20]
 800cc00:	bf43      	ittte	mi
 800cc02:	f1c3 0900 	rsbmi	r9, r3, #0
 800cc06:	2300      	movmi	r3, #0
 800cc08:	9305      	strmi	r3, [sp, #20]
 800cc0a:	f04f 0900 	movpl.w	r9, #0
 800cc0e:	f1bb 0f00 	cmp.w	fp, #0
 800cc12:	db07      	blt.n	800cc24 <_dtoa_r+0x20c>
 800cc14:	9b05      	ldr	r3, [sp, #20]
 800cc16:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800cc1a:	445b      	add	r3, fp
 800cc1c:	9305      	str	r3, [sp, #20]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9307      	str	r3, [sp, #28]
 800cc22:	e006      	b.n	800cc32 <_dtoa_r+0x21a>
 800cc24:	f1cb 0300 	rsb	r3, fp, #0
 800cc28:	9307      	str	r3, [sp, #28]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	ebcb 0909 	rsb	r9, fp, r9
 800cc30:	930c      	str	r3, [sp, #48]	; 0x30
 800cc32:	9b06      	ldr	r3, [sp, #24]
 800cc34:	2b09      	cmp	r3, #9
 800cc36:	d827      	bhi.n	800cc88 <_dtoa_r+0x270>
 800cc38:	2b05      	cmp	r3, #5
 800cc3a:	bfc4      	itt	gt
 800cc3c:	3b04      	subgt	r3, #4
 800cc3e:	9306      	strgt	r3, [sp, #24]
 800cc40:	9b06      	ldr	r3, [sp, #24]
 800cc42:	f1a3 0302 	sub.w	r3, r3, #2
 800cc46:	bfcc      	ite	gt
 800cc48:	2500      	movgt	r5, #0
 800cc4a:	2501      	movle	r5, #1
 800cc4c:	2b03      	cmp	r3, #3
 800cc4e:	d820      	bhi.n	800cc92 <_dtoa_r+0x27a>
 800cc50:	e8df f003 	tbb	[pc, r3]
 800cc54:	04020e06 	.word	0x04020e06
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e002      	b.n	800cc62 <_dtoa_r+0x24a>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e008      	b.n	800cc72 <_dtoa_r+0x25a>
 800cc60:	2300      	movs	r3, #0
 800cc62:	9308      	str	r3, [sp, #32]
 800cc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	dd1c      	ble.n	800cca4 <_dtoa_r+0x28c>
 800cc6a:	9303      	str	r3, [sp, #12]
 800cc6c:	4698      	mov	r8, r3
 800cc6e:	e01e      	b.n	800ccae <_dtoa_r+0x296>
 800cc70:	2300      	movs	r3, #0
 800cc72:	9308      	str	r3, [sp, #32]
 800cc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc76:	445b      	add	r3, fp
 800cc78:	f103 0801 	add.w	r8, r3, #1
 800cc7c:	9303      	str	r3, [sp, #12]
 800cc7e:	4643      	mov	r3, r8
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	bfb8      	it	lt
 800cc84:	2301      	movlt	r3, #1
 800cc86:	e012      	b.n	800ccae <_dtoa_r+0x296>
 800cc88:	2501      	movs	r5, #1
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	9306      	str	r3, [sp, #24]
 800cc8e:	9508      	str	r5, [sp, #32]
 800cc90:	e001      	b.n	800cc96 <_dtoa_r+0x27e>
 800cc92:	2301      	movs	r3, #1
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9a:	9303      	str	r3, [sp, #12]
 800cc9c:	4698      	mov	r8, r3
 800cc9e:	2200      	movs	r2, #0
 800cca0:	2312      	movs	r3, #18
 800cca2:	e003      	b.n	800ccac <_dtoa_r+0x294>
 800cca4:	2301      	movs	r3, #1
 800cca6:	9303      	str	r3, [sp, #12]
 800cca8:	4698      	mov	r8, r3
 800ccaa:	461a      	mov	r2, r3
 800ccac:	9209      	str	r2, [sp, #36]	; 0x24
 800ccae:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	6062      	str	r2, [r4, #4]
 800ccb6:	2104      	movs	r1, #4
 800ccb8:	f101 0214 	add.w	r2, r1, #20
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d81f      	bhi.n	800cd00 <_dtoa_r+0x2e8>
 800ccc0:	6862      	ldr	r2, [r4, #4]
 800ccc2:	3201      	adds	r2, #1
 800ccc4:	6062      	str	r2, [r4, #4]
 800ccc6:	0049      	lsls	r1, r1, #1
 800ccc8:	e7f6      	b.n	800ccb8 <_dtoa_r+0x2a0>
 800ccca:	bf00      	nop
 800cccc:	f3af 8000 	nop.w
 800ccd0:	636f4361 	.word	0x636f4361
 800ccd4:	3fd287a7 	.word	0x3fd287a7
 800ccd8:	8b60c8b3 	.word	0x8b60c8b3
 800ccdc:	3fc68a28 	.word	0x3fc68a28
 800cce0:	509f79fb 	.word	0x509f79fb
 800cce4:	3fd34413 	.word	0x3fd34413
 800cce8:	7ff00000 	.word	0x7ff00000
 800ccec:	08011abf 	.word	0x08011abf
 800ccf0:	08011ac8 	.word	0x08011ac8
 800ccf4:	0801198d 	.word	0x0801198d
 800ccf8:	3ff80000 	.word	0x3ff80000
 800ccfc:	08011b38 	.word	0x08011b38
 800cd00:	6861      	ldr	r1, [r4, #4]
 800cd02:	4650      	mov	r0, sl
 800cd04:	f001 facb 	bl	800e29e <_Balloc>
 800cd08:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800cd0c:	6020      	str	r0, [r4, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	9304      	str	r3, [sp, #16]
 800cd12:	f1b8 0f0e 	cmp.w	r8, #14
 800cd16:	f200 815d 	bhi.w	800cfd4 <_dtoa_r+0x5bc>
 800cd1a:	2d00      	cmp	r5, #0
 800cd1c:	f000 815a 	beq.w	800cfd4 <_dtoa_r+0x5bc>
 800cd20:	ed9d 7b00 	vldr	d7, [sp]
 800cd24:	f1bb 0f00 	cmp.w	fp, #0
 800cd28:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800cd2c:	dd31      	ble.n	800cd92 <_dtoa_r+0x37a>
 800cd2e:	4aa0      	ldr	r2, [pc, #640]	; (800cfb0 <_dtoa_r+0x598>)
 800cd30:	f00b 030f 	and.w	r3, fp, #15
 800cd34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd38:	ed93 7b00 	vldr	d7, [r3]
 800cd3c:	ea4f 142b 	mov.w	r4, fp, asr #4
 800cd40:	06e2      	lsls	r2, r4, #27
 800cd42:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cd46:	d50c      	bpl.n	800cd62 <_dtoa_r+0x34a>
 800cd48:	4b9a      	ldr	r3, [pc, #616]	; (800cfb4 <_dtoa_r+0x59c>)
 800cd4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd52:	f7f3 fd97 	bl	8000884 <__aeabi_ddiv>
 800cd56:	f004 040f 	and.w	r4, r4, #15
 800cd5a:	e9cd 0100 	strd	r0, r1, [sp]
 800cd5e:	2603      	movs	r6, #3
 800cd60:	e000      	b.n	800cd64 <_dtoa_r+0x34c>
 800cd62:	2602      	movs	r6, #2
 800cd64:	4d93      	ldr	r5, [pc, #588]	; (800cfb4 <_dtoa_r+0x59c>)
 800cd66:	b16c      	cbz	r4, 800cd84 <_dtoa_r+0x36c>
 800cd68:	07e3      	lsls	r3, r4, #31
 800cd6a:	d508      	bpl.n	800cd7e <_dtoa_r+0x366>
 800cd6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd74:	f7f3 fc5c 	bl	8000630 <__aeabi_dmul>
 800cd78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cd7c:	3601      	adds	r6, #1
 800cd7e:	1064      	asrs	r4, r4, #1
 800cd80:	3508      	adds	r5, #8
 800cd82:	e7f0      	b.n	800cd66 <_dtoa_r+0x34e>
 800cd84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd8c:	f7f3 fd7a 	bl	8000884 <__aeabi_ddiv>
 800cd90:	e020      	b.n	800cdd4 <_dtoa_r+0x3bc>
 800cd92:	f1cb 0400 	rsb	r4, fp, #0
 800cd96:	b304      	cbz	r4, 800cdda <_dtoa_r+0x3c2>
 800cd98:	4b85      	ldr	r3, [pc, #532]	; (800cfb0 <_dtoa_r+0x598>)
 800cd9a:	4d86      	ldr	r5, [pc, #536]	; (800cfb4 <_dtoa_r+0x59c>)
 800cd9c:	f004 020f 	and.w	r2, r4, #15
 800cda0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cdac:	f7f3 fc40 	bl	8000630 <__aeabi_dmul>
 800cdb0:	e9cd 0100 	strd	r0, r1, [sp]
 800cdb4:	1124      	asrs	r4, r4, #4
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	2602      	movs	r6, #2
 800cdba:	b154      	cbz	r4, 800cdd2 <_dtoa_r+0x3ba>
 800cdbc:	07e7      	lsls	r7, r4, #31
 800cdbe:	d505      	bpl.n	800cdcc <_dtoa_r+0x3b4>
 800cdc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdc4:	f7f3 fc34 	bl	8000630 <__aeabi_dmul>
 800cdc8:	3601      	adds	r6, #1
 800cdca:	2301      	movs	r3, #1
 800cdcc:	1064      	asrs	r4, r4, #1
 800cdce:	3508      	adds	r5, #8
 800cdd0:	e7f3      	b.n	800cdba <_dtoa_r+0x3a2>
 800cdd2:	b11b      	cbz	r3, 800cddc <_dtoa_r+0x3c4>
 800cdd4:	e9cd 0100 	strd	r0, r1, [sp]
 800cdd8:	e000      	b.n	800cddc <_dtoa_r+0x3c4>
 800cdda:	2602      	movs	r6, #2
 800cddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdde:	b1eb      	cbz	r3, 800ce1c <_dtoa_r+0x404>
 800cde0:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cde4:	2200      	movs	r2, #0
 800cde6:	4b74      	ldr	r3, [pc, #464]	; (800cfb8 <_dtoa_r+0x5a0>)
 800cde8:	4620      	mov	r0, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	f7f3 fe92 	bl	8000b14 <__aeabi_dcmplt>
 800cdf0:	b1a0      	cbz	r0, 800ce1c <_dtoa_r+0x404>
 800cdf2:	f1b8 0f00 	cmp.w	r8, #0
 800cdf6:	d011      	beq.n	800ce1c <_dtoa_r+0x404>
 800cdf8:	9b03      	ldr	r3, [sp, #12]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f340 80e6 	ble.w	800cfcc <_dtoa_r+0x5b4>
 800ce00:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ce04:	930a      	str	r3, [sp, #40]	; 0x28
 800ce06:	2200      	movs	r2, #0
 800ce08:	4b6c      	ldr	r3, [pc, #432]	; (800cfbc <_dtoa_r+0x5a4>)
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fc0f 	bl	8000630 <__aeabi_dmul>
 800ce12:	3601      	adds	r6, #1
 800ce14:	e9cd 0100 	strd	r0, r1, [sp]
 800ce18:	9f03      	ldr	r7, [sp, #12]
 800ce1a:	e002      	b.n	800ce22 <_dtoa_r+0x40a>
 800ce1c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ce20:	4647      	mov	r7, r8
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7f3 fb9e 	bl	8000564 <__aeabi_i2d>
 800ce28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2c:	f7f3 fc00 	bl	8000630 <__aeabi_dmul>
 800ce30:	2200      	movs	r2, #0
 800ce32:	4b63      	ldr	r3, [pc, #396]	; (800cfc0 <_dtoa_r+0x5a8>)
 800ce34:	f7f3 fa4a 	bl	80002cc <__adddf3>
 800ce38:	4604      	mov	r4, r0
 800ce3a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ce3e:	b9cf      	cbnz	r7, 800ce74 <_dtoa_r+0x45c>
 800ce40:	2200      	movs	r2, #0
 800ce42:	4b60      	ldr	r3, [pc, #384]	; (800cfc4 <_dtoa_r+0x5ac>)
 800ce44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce48:	f7f3 fa3e 	bl	80002c8 <__aeabi_dsub>
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	462b      	mov	r3, r5
 800ce50:	e9cd 0100 	strd	r0, r1, [sp]
 800ce54:	f7f3 fe7c 	bl	8000b50 <__aeabi_dcmpgt>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	f040 8241 	bne.w	800d2e0 <_dtoa_r+0x8c8>
 800ce5e:	4622      	mov	r2, r4
 800ce60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ce64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce68:	f7f3 fe54 	bl	8000b14 <__aeabi_dcmplt>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	f040 822e 	bne.w	800d2ce <_dtoa_r+0x8b6>
 800ce72:	e0ab      	b.n	800cfcc <_dtoa_r+0x5b4>
 800ce74:	9a08      	ldr	r2, [sp, #32]
 800ce76:	4b4e      	ldr	r3, [pc, #312]	; (800cfb0 <_dtoa_r+0x598>)
 800ce78:	1e79      	subs	r1, r7, #1
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	d04a      	beq.n	800cf14 <_dtoa_r+0x4fc>
 800ce7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	2000      	movs	r0, #0
 800ce88:	494f      	ldr	r1, [pc, #316]	; (800cfc8 <_dtoa_r+0x5b0>)
 800ce8a:	f7f3 fcfb 	bl	8000884 <__aeabi_ddiv>
 800ce8e:	4622      	mov	r2, r4
 800ce90:	462b      	mov	r3, r5
 800ce92:	f7f3 fa19 	bl	80002c8 <__aeabi_dsub>
 800ce96:	9c04      	ldr	r4, [sp, #16]
 800ce98:	4605      	mov	r5, r0
 800ce9a:	460e      	mov	r6, r1
 800ce9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea0:	f7f3 fe76 	bl	8000b90 <__aeabi_d2iz>
 800cea4:	9012      	str	r0, [sp, #72]	; 0x48
 800cea6:	f7f3 fb5d 	bl	8000564 <__aeabi_i2d>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceb2:	f7f3 fa09 	bl	80002c8 <__aeabi_dsub>
 800ceb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceb8:	3330      	adds	r3, #48	; 0x30
 800ceba:	f804 3b01 	strb.w	r3, [r4], #1
 800cebe:	462a      	mov	r2, r5
 800cec0:	4633      	mov	r3, r6
 800cec2:	e9cd 0100 	strd	r0, r1, [sp]
 800cec6:	f7f3 fe25 	bl	8000b14 <__aeabi_dcmplt>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	f040 8321 	bne.w	800d512 <_dtoa_r+0xafa>
 800ced0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ced4:	2000      	movs	r0, #0
 800ced6:	4938      	ldr	r1, [pc, #224]	; (800cfb8 <_dtoa_r+0x5a0>)
 800ced8:	f7f3 f9f6 	bl	80002c8 <__aeabi_dsub>
 800cedc:	462a      	mov	r2, r5
 800cede:	4633      	mov	r3, r6
 800cee0:	f7f3 fe18 	bl	8000b14 <__aeabi_dcmplt>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f040 80d2 	bne.w	800d08e <_dtoa_r+0x676>
 800ceea:	9b04      	ldr	r3, [sp, #16]
 800ceec:	1ae3      	subs	r3, r4, r3
 800ceee:	42bb      	cmp	r3, r7
 800cef0:	da6c      	bge.n	800cfcc <_dtoa_r+0x5b4>
 800cef2:	2200      	movs	r2, #0
 800cef4:	4b31      	ldr	r3, [pc, #196]	; (800cfbc <_dtoa_r+0x5a4>)
 800cef6:	4628      	mov	r0, r5
 800cef8:	4631      	mov	r1, r6
 800cefa:	f7f3 fb99 	bl	8000630 <__aeabi_dmul>
 800cefe:	2200      	movs	r2, #0
 800cf00:	4605      	mov	r5, r0
 800cf02:	460e      	mov	r6, r1
 800cf04:	4b2d      	ldr	r3, [pc, #180]	; (800cfbc <_dtoa_r+0x5a4>)
 800cf06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf0a:	f7f3 fb91 	bl	8000630 <__aeabi_dmul>
 800cf0e:	e9cd 0100 	strd	r0, r1, [sp]
 800cf12:	e7c3      	b.n	800ce9c <_dtoa_r+0x484>
 800cf14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cf18:	4622      	mov	r2, r4
 800cf1a:	462b      	mov	r3, r5
 800cf1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf20:	f7f3 fb86 	bl	8000630 <__aeabi_dmul>
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800cf2a:	19dc      	adds	r4, r3, r7
 800cf2c:	461d      	mov	r5, r3
 800cf2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf32:	f7f3 fe2d 	bl	8000b90 <__aeabi_d2iz>
 800cf36:	4606      	mov	r6, r0
 800cf38:	f7f3 fb14 	bl	8000564 <__aeabi_i2d>
 800cf3c:	3630      	adds	r6, #48	; 0x30
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf46:	f7f3 f9bf 	bl	80002c8 <__aeabi_dsub>
 800cf4a:	f805 6b01 	strb.w	r6, [r5], #1
 800cf4e:	42ac      	cmp	r4, r5
 800cf50:	e9cd 0100 	strd	r0, r1, [sp]
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	d123      	bne.n	800cfa2 <_dtoa_r+0x58a>
 800cf5a:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <_dtoa_r+0x5b0>)
 800cf5c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800cf60:	f7f3 f9b4 	bl	80002cc <__adddf3>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf6c:	f7f3 fdf0 	bl	8000b50 <__aeabi_dcmpgt>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	f040 808c 	bne.w	800d08e <_dtoa_r+0x676>
 800cf76:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	4912      	ldr	r1, [pc, #72]	; (800cfc8 <_dtoa_r+0x5b0>)
 800cf7e:	f7f3 f9a3 	bl	80002c8 <__aeabi_dsub>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf8a:	f7f3 fdc3 	bl	8000b14 <__aeabi_dcmplt>
 800cf8e:	b1e8      	cbz	r0, 800cfcc <_dtoa_r+0x5b4>
 800cf90:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800cf94:	2b30      	cmp	r3, #48	; 0x30
 800cf96:	f104 32ff 	add.w	r2, r4, #4294967295
 800cf9a:	f040 82ba 	bne.w	800d512 <_dtoa_r+0xafa>
 800cf9e:	4614      	mov	r4, r2
 800cfa0:	e7f6      	b.n	800cf90 <_dtoa_r+0x578>
 800cfa2:	4b06      	ldr	r3, [pc, #24]	; (800cfbc <_dtoa_r+0x5a4>)
 800cfa4:	f7f3 fb44 	bl	8000630 <__aeabi_dmul>
 800cfa8:	e9cd 0100 	strd	r0, r1, [sp]
 800cfac:	e7bf      	b.n	800cf2e <_dtoa_r+0x516>
 800cfae:	bf00      	nop
 800cfb0:	08011b38 	.word	0x08011b38
 800cfb4:	08011c00 	.word	0x08011c00
 800cfb8:	3ff00000 	.word	0x3ff00000
 800cfbc:	40240000 	.word	0x40240000
 800cfc0:	401c0000 	.word	0x401c0000
 800cfc4:	40140000 	.word	0x40140000
 800cfc8:	3fe00000 	.word	0x3fe00000
 800cfcc:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800cfd0:	e88d 0018 	stmia.w	sp, {r3, r4}
 800cfd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	db7c      	blt.n	800d0d4 <_dtoa_r+0x6bc>
 800cfda:	f1bb 0f0e 	cmp.w	fp, #14
 800cfde:	dc79      	bgt.n	800d0d4 <_dtoa_r+0x6bc>
 800cfe0:	4b8f      	ldr	r3, [pc, #572]	; (800d220 <_dtoa_r+0x808>)
 800cfe2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cfe6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cfea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	da14      	bge.n	800d01a <_dtoa_r+0x602>
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	dc11      	bgt.n	800d01a <_dtoa_r+0x602>
 800cff6:	f040 816c 	bne.w	800d2d2 <_dtoa_r+0x8ba>
 800cffa:	2200      	movs	r2, #0
 800cffc:	4b89      	ldr	r3, [pc, #548]	; (800d224 <_dtoa_r+0x80c>)
 800cffe:	4630      	mov	r0, r6
 800d000:	4639      	mov	r1, r7
 800d002:	f7f3 fb15 	bl	8000630 <__aeabi_dmul>
 800d006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d00a:	f7f3 fd97 	bl	8000b3c <__aeabi_dcmpge>
 800d00e:	4645      	mov	r5, r8
 800d010:	4646      	mov	r6, r8
 800d012:	2800      	cmp	r0, #0
 800d014:	f040 815f 	bne.w	800d2d6 <_dtoa_r+0x8be>
 800d018:	e166      	b.n	800d2e8 <_dtoa_r+0x8d0>
 800d01a:	9c04      	ldr	r4, [sp, #16]
 800d01c:	4632      	mov	r2, r6
 800d01e:	463b      	mov	r3, r7
 800d020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d024:	f7f3 fc2e 	bl	8000884 <__aeabi_ddiv>
 800d028:	f7f3 fdb2 	bl	8000b90 <__aeabi_d2iz>
 800d02c:	4605      	mov	r5, r0
 800d02e:	f7f3 fa99 	bl	8000564 <__aeabi_i2d>
 800d032:	4632      	mov	r2, r6
 800d034:	463b      	mov	r3, r7
 800d036:	f7f3 fafb 	bl	8000630 <__aeabi_dmul>
 800d03a:	460b      	mov	r3, r1
 800d03c:	4602      	mov	r2, r0
 800d03e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d042:	f7f3 f941 	bl	80002c8 <__aeabi_dsub>
 800d046:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800d04a:	f804 eb01 	strb.w	lr, [r4], #1
 800d04e:	9b04      	ldr	r3, [sp, #16]
 800d050:	ebc3 0e04 	rsb	lr, r3, r4
 800d054:	45f0      	cmp	r8, lr
 800d056:	e9cd 0100 	strd	r0, r1, [sp]
 800d05a:	d12e      	bne.n	800d0ba <_dtoa_r+0x6a2>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	f7f3 f934 	bl	80002cc <__adddf3>
 800d064:	4680      	mov	r8, r0
 800d066:	4689      	mov	r9, r1
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
 800d06c:	4630      	mov	r0, r6
 800d06e:	4639      	mov	r1, r7
 800d070:	f7f3 fd50 	bl	8000b14 <__aeabi_dcmplt>
 800d074:	b978      	cbnz	r0, 800d096 <_dtoa_r+0x67e>
 800d076:	4642      	mov	r2, r8
 800d078:	464b      	mov	r3, r9
 800d07a:	4630      	mov	r0, r6
 800d07c:	4639      	mov	r1, r7
 800d07e:	f7f3 fd3f 	bl	8000b00 <__aeabi_dcmpeq>
 800d082:	2800      	cmp	r0, #0
 800d084:	f000 8247 	beq.w	800d516 <_dtoa_r+0xafe>
 800d088:	07e9      	lsls	r1, r5, #31
 800d08a:	d404      	bmi.n	800d096 <_dtoa_r+0x67e>
 800d08c:	e243      	b.n	800d516 <_dtoa_r+0xafe>
 800d08e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d092:	e000      	b.n	800d096 <_dtoa_r+0x67e>
 800d094:	461c      	mov	r4, r3
 800d096:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800d09a:	2a39      	cmp	r2, #57	; 0x39
 800d09c:	f104 33ff 	add.w	r3, r4, #4294967295
 800d0a0:	d107      	bne.n	800d0b2 <_dtoa_r+0x69a>
 800d0a2:	9a04      	ldr	r2, [sp, #16]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d1f5      	bne.n	800d094 <_dtoa_r+0x67c>
 800d0a8:	9904      	ldr	r1, [sp, #16]
 800d0aa:	2230      	movs	r2, #48	; 0x30
 800d0ac:	f10b 0b01 	add.w	fp, fp, #1
 800d0b0:	700a      	strb	r2, [r1, #0]
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	3201      	adds	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
 800d0b8:	e22d      	b.n	800d516 <_dtoa_r+0xafe>
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	4b5a      	ldr	r3, [pc, #360]	; (800d228 <_dtoa_r+0x810>)
 800d0be:	f7f3 fab7 	bl	8000630 <__aeabi_dmul>
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	e9cd 0100 	strd	r0, r1, [sp]
 800d0ca:	f7f3 fd19 	bl	8000b00 <__aeabi_dcmpeq>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d0a4      	beq.n	800d01c <_dtoa_r+0x604>
 800d0d2:	e220      	b.n	800d516 <_dtoa_r+0xafe>
 800d0d4:	9a08      	ldr	r2, [sp, #32]
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	d02d      	beq.n	800d136 <_dtoa_r+0x71e>
 800d0da:	9a06      	ldr	r2, [sp, #24]
 800d0dc:	2a01      	cmp	r2, #1
 800d0de:	dc0a      	bgt.n	800d0f6 <_dtoa_r+0x6de>
 800d0e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d0e2:	b112      	cbz	r2, 800d0ea <_dtoa_r+0x6d2>
 800d0e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0e8:	e002      	b.n	800d0f0 <_dtoa_r+0x6d8>
 800d0ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0ec:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0f0:	9d07      	ldr	r5, [sp, #28]
 800d0f2:	464c      	mov	r4, r9
 800d0f4:	e015      	b.n	800d122 <_dtoa_r+0x70a>
 800d0f6:	9b07      	ldr	r3, [sp, #28]
 800d0f8:	f108 35ff 	add.w	r5, r8, #4294967295
 800d0fc:	42ab      	cmp	r3, r5
 800d0fe:	bfbf      	itttt	lt
 800d100:	9b07      	ldrlt	r3, [sp, #28]
 800d102:	9507      	strlt	r5, [sp, #28]
 800d104:	1aea      	sublt	r2, r5, r3
 800d106:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d108:	bfb7      	itett	lt
 800d10a:	189b      	addlt	r3, r3, r2
 800d10c:	1b5d      	subge	r5, r3, r5
 800d10e:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d110:	2500      	movlt	r5, #0
 800d112:	f1b8 0f00 	cmp.w	r8, #0
 800d116:	bfb9      	ittee	lt
 800d118:	ebc8 0409 	rsblt	r4, r8, r9
 800d11c:	2300      	movlt	r3, #0
 800d11e:	464c      	movge	r4, r9
 800d120:	4643      	movge	r3, r8
 800d122:	9a05      	ldr	r2, [sp, #20]
 800d124:	2101      	movs	r1, #1
 800d126:	441a      	add	r2, r3
 800d128:	4650      	mov	r0, sl
 800d12a:	4499      	add	r9, r3
 800d12c:	9205      	str	r2, [sp, #20]
 800d12e:	f001 f98a 	bl	800e446 <__i2b>
 800d132:	4606      	mov	r6, r0
 800d134:	e002      	b.n	800d13c <_dtoa_r+0x724>
 800d136:	9d07      	ldr	r5, [sp, #28]
 800d138:	9e08      	ldr	r6, [sp, #32]
 800d13a:	464c      	mov	r4, r9
 800d13c:	b15c      	cbz	r4, 800d156 <_dtoa_r+0x73e>
 800d13e:	9b05      	ldr	r3, [sp, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	dd08      	ble.n	800d156 <_dtoa_r+0x73e>
 800d144:	42a3      	cmp	r3, r4
 800d146:	9a05      	ldr	r2, [sp, #20]
 800d148:	bfa8      	it	ge
 800d14a:	4623      	movge	r3, r4
 800d14c:	ebc3 0909 	rsb	r9, r3, r9
 800d150:	1ae4      	subs	r4, r4, r3
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	9305      	str	r3, [sp, #20]
 800d156:	9b07      	ldr	r3, [sp, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	dd1d      	ble.n	800d198 <_dtoa_r+0x780>
 800d15c:	9b08      	ldr	r3, [sp, #32]
 800d15e:	b1ab      	cbz	r3, 800d18c <_dtoa_r+0x774>
 800d160:	b185      	cbz	r5, 800d184 <_dtoa_r+0x76c>
 800d162:	4631      	mov	r1, r6
 800d164:	462a      	mov	r2, r5
 800d166:	4650      	mov	r0, sl
 800d168:	f001 fa08 	bl	800e57c <__pow5mult>
 800d16c:	9a02      	ldr	r2, [sp, #8]
 800d16e:	4601      	mov	r1, r0
 800d170:	4606      	mov	r6, r0
 800d172:	4650      	mov	r0, sl
 800d174:	f001 f970 	bl	800e458 <__multiply>
 800d178:	9902      	ldr	r1, [sp, #8]
 800d17a:	4607      	mov	r7, r0
 800d17c:	4650      	mov	r0, sl
 800d17e:	f001 f8c3 	bl	800e308 <_Bfree>
 800d182:	9702      	str	r7, [sp, #8]
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	1b5a      	subs	r2, r3, r5
 800d188:	d006      	beq.n	800d198 <_dtoa_r+0x780>
 800d18a:	e000      	b.n	800d18e <_dtoa_r+0x776>
 800d18c:	9a07      	ldr	r2, [sp, #28]
 800d18e:	9902      	ldr	r1, [sp, #8]
 800d190:	4650      	mov	r0, sl
 800d192:	f001 f9f3 	bl	800e57c <__pow5mult>
 800d196:	9002      	str	r0, [sp, #8]
 800d198:	2101      	movs	r1, #1
 800d19a:	4650      	mov	r0, sl
 800d19c:	f001 f953 	bl	800e446 <__i2b>
 800d1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	b35b      	cbz	r3, 800d1fe <_dtoa_r+0x7e6>
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	4601      	mov	r1, r0
 800d1aa:	4650      	mov	r0, sl
 800d1ac:	f001 f9e6 	bl	800e57c <__pow5mult>
 800d1b0:	9b06      	ldr	r3, [sp, #24]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	dc18      	bgt.n	800d1ea <_dtoa_r+0x7d2>
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	b983      	cbnz	r3, 800d1de <_dtoa_r+0x7c6>
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1c2:	b973      	cbnz	r3, 800d1e2 <_dtoa_r+0x7ca>
 800d1c4:	9b01      	ldr	r3, [sp, #4]
 800d1c6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800d1ca:	0d3f      	lsrs	r7, r7, #20
 800d1cc:	053f      	lsls	r7, r7, #20
 800d1ce:	b14f      	cbz	r7, 800d1e4 <_dtoa_r+0x7cc>
 800d1d0:	9b05      	ldr	r3, [sp, #20]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	f109 0901 	add.w	r9, r9, #1
 800d1d8:	9305      	str	r3, [sp, #20]
 800d1da:	2701      	movs	r7, #1
 800d1dc:	e002      	b.n	800d1e4 <_dtoa_r+0x7cc>
 800d1de:	2700      	movs	r7, #0
 800d1e0:	e000      	b.n	800d1e4 <_dtoa_r+0x7cc>
 800d1e2:	9f00      	ldr	r7, [sp, #0]
 800d1e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1e6:	b173      	cbz	r3, 800d206 <_dtoa_r+0x7ee>
 800d1e8:	e000      	b.n	800d1ec <_dtoa_r+0x7d4>
 800d1ea:	2700      	movs	r7, #0
 800d1ec:	692b      	ldr	r3, [r5, #16]
 800d1ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d1f2:	6918      	ldr	r0, [r3, #16]
 800d1f4:	f001 f8da 	bl	800e3ac <__hi0bits>
 800d1f8:	f1c0 0020 	rsb	r0, r0, #32
 800d1fc:	e004      	b.n	800d208 <_dtoa_r+0x7f0>
 800d1fe:	9b06      	ldr	r3, [sp, #24]
 800d200:	2b01      	cmp	r3, #1
 800d202:	ddd9      	ble.n	800d1b8 <_dtoa_r+0x7a0>
 800d204:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d206:	2001      	movs	r0, #1
 800d208:	9b05      	ldr	r3, [sp, #20]
 800d20a:	4418      	add	r0, r3
 800d20c:	f010 001f 	ands.w	r0, r0, #31
 800d210:	d00e      	beq.n	800d230 <_dtoa_r+0x818>
 800d212:	f1c0 0320 	rsb	r3, r0, #32
 800d216:	2b04      	cmp	r3, #4
 800d218:	dd08      	ble.n	800d22c <_dtoa_r+0x814>
 800d21a:	f1c0 001c 	rsb	r0, r0, #28
 800d21e:	e008      	b.n	800d232 <_dtoa_r+0x81a>
 800d220:	08011b38 	.word	0x08011b38
 800d224:	40140000 	.word	0x40140000
 800d228:	40240000 	.word	0x40240000
 800d22c:	d006      	beq.n	800d23c <_dtoa_r+0x824>
 800d22e:	4618      	mov	r0, r3
 800d230:	301c      	adds	r0, #28
 800d232:	9b05      	ldr	r3, [sp, #20]
 800d234:	4403      	add	r3, r0
 800d236:	4481      	add	r9, r0
 800d238:	4404      	add	r4, r0
 800d23a:	9305      	str	r3, [sp, #20]
 800d23c:	f1b9 0f00 	cmp.w	r9, #0
 800d240:	dd05      	ble.n	800d24e <_dtoa_r+0x836>
 800d242:	464a      	mov	r2, r9
 800d244:	9902      	ldr	r1, [sp, #8]
 800d246:	4650      	mov	r0, sl
 800d248:	f001 f9e6 	bl	800e618 <__lshift>
 800d24c:	9002      	str	r0, [sp, #8]
 800d24e:	9b05      	ldr	r3, [sp, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	dd05      	ble.n	800d260 <_dtoa_r+0x848>
 800d254:	4629      	mov	r1, r5
 800d256:	461a      	mov	r2, r3
 800d258:	4650      	mov	r0, sl
 800d25a:	f001 f9dd 	bl	800e618 <__lshift>
 800d25e:	4605      	mov	r5, r0
 800d260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d262:	b1eb      	cbz	r3, 800d2a0 <_dtoa_r+0x888>
 800d264:	4629      	mov	r1, r5
 800d266:	9802      	ldr	r0, [sp, #8]
 800d268:	f001 fa27 	bl	800e6ba <__mcmp>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	da17      	bge.n	800d2a0 <_dtoa_r+0x888>
 800d270:	2300      	movs	r3, #0
 800d272:	220a      	movs	r2, #10
 800d274:	9902      	ldr	r1, [sp, #8]
 800d276:	4650      	mov	r0, sl
 800d278:	f001 f85d 	bl	800e336 <__multadd>
 800d27c:	9b08      	ldr	r3, [sp, #32]
 800d27e:	9002      	str	r0, [sp, #8]
 800d280:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8158 	beq.w	800d53a <_dtoa_r+0xb22>
 800d28a:	2300      	movs	r3, #0
 800d28c:	4631      	mov	r1, r6
 800d28e:	220a      	movs	r2, #10
 800d290:	4650      	mov	r0, sl
 800d292:	f001 f850 	bl	800e336 <__multadd>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	4606      	mov	r6, r0
 800d29c:	dc37      	bgt.n	800d30e <_dtoa_r+0x8f6>
 800d29e:	e033      	b.n	800d308 <_dtoa_r+0x8f0>
 800d2a0:	f1b8 0f00 	cmp.w	r8, #0
 800d2a4:	dc2a      	bgt.n	800d2fc <_dtoa_r+0x8e4>
 800d2a6:	9b06      	ldr	r3, [sp, #24]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	dd27      	ble.n	800d2fc <_dtoa_r+0x8e4>
 800d2ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	b983      	cbnz	r3, 800d2d6 <_dtoa_r+0x8be>
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	2205      	movs	r2, #5
 800d2b8:	4650      	mov	r0, sl
 800d2ba:	f001 f83c 	bl	800e336 <__multadd>
 800d2be:	4601      	mov	r1, r0
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	9802      	ldr	r0, [sp, #8]
 800d2c4:	f001 f9f9 	bl	800e6ba <__mcmp>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	dc0d      	bgt.n	800d2e8 <_dtoa_r+0x8d0>
 800d2cc:	e003      	b.n	800d2d6 <_dtoa_r+0x8be>
 800d2ce:	463d      	mov	r5, r7
 800d2d0:	e000      	b.n	800d2d4 <_dtoa_r+0x8bc>
 800d2d2:	2500      	movs	r5, #0
 800d2d4:	462e      	mov	r6, r5
 800d2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d8:	9c04      	ldr	r4, [sp, #16]
 800d2da:	ea6f 0b03 	mvn.w	fp, r3
 800d2de:	e00a      	b.n	800d2f6 <_dtoa_r+0x8de>
 800d2e0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d2e4:	463d      	mov	r5, r7
 800d2e6:	463e      	mov	r6, r7
 800d2e8:	9b04      	ldr	r3, [sp, #16]
 800d2ea:	9a04      	ldr	r2, [sp, #16]
 800d2ec:	1c5c      	adds	r4, r3, #1
 800d2ee:	2331      	movs	r3, #49	; 0x31
 800d2f0:	7013      	strb	r3, [r2, #0]
 800d2f2:	f10b 0b01 	add.w	fp, fp, #1
 800d2f6:	46b0      	mov	r8, r6
 800d2f8:	2600      	movs	r6, #0
 800d2fa:	e0f7      	b.n	800d4ec <_dtoa_r+0xad4>
 800d2fc:	9b08      	ldr	r3, [sp, #32]
 800d2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d302:	b923      	cbnz	r3, 800d30e <_dtoa_r+0x8f6>
 800d304:	9c04      	ldr	r4, [sp, #16]
 800d306:	e0b1      	b.n	800d46c <_dtoa_r+0xa54>
 800d308:	9b06      	ldr	r3, [sp, #24]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	dcd0      	bgt.n	800d2b0 <_dtoa_r+0x898>
 800d30e:	2c00      	cmp	r4, #0
 800d310:	dd05      	ble.n	800d31e <_dtoa_r+0x906>
 800d312:	4631      	mov	r1, r6
 800d314:	4622      	mov	r2, r4
 800d316:	4650      	mov	r0, sl
 800d318:	f001 f97e 	bl	800e618 <__lshift>
 800d31c:	4606      	mov	r6, r0
 800d31e:	b19f      	cbz	r7, 800d348 <_dtoa_r+0x930>
 800d320:	6871      	ldr	r1, [r6, #4]
 800d322:	4650      	mov	r0, sl
 800d324:	f000 ffbb 	bl	800e29e <_Balloc>
 800d328:	6932      	ldr	r2, [r6, #16]
 800d32a:	3202      	adds	r2, #2
 800d32c:	4604      	mov	r4, r0
 800d32e:	0092      	lsls	r2, r2, #2
 800d330:	f106 010c 	add.w	r1, r6, #12
 800d334:	300c      	adds	r0, #12
 800d336:	f7fd f915 	bl	800a564 <memcpy>
 800d33a:	2201      	movs	r2, #1
 800d33c:	4621      	mov	r1, r4
 800d33e:	4650      	mov	r0, sl
 800d340:	f001 f96a 	bl	800e618 <__lshift>
 800d344:	4680      	mov	r8, r0
 800d346:	e000      	b.n	800d34a <_dtoa_r+0x932>
 800d348:	46b0      	mov	r8, r6
 800d34a:	9b00      	ldr	r3, [sp, #0]
 800d34c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	9305      	str	r3, [sp, #20]
 800d356:	4629      	mov	r1, r5
 800d358:	9802      	ldr	r0, [sp, #8]
 800d35a:	f7ff facb 	bl	800c8f4 <quorem>
 800d35e:	4631      	mov	r1, r6
 800d360:	4604      	mov	r4, r0
 800d362:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800d366:	9802      	ldr	r0, [sp, #8]
 800d368:	f001 f9a7 	bl	800e6ba <__mcmp>
 800d36c:	4642      	mov	r2, r8
 800d36e:	9000      	str	r0, [sp, #0]
 800d370:	4629      	mov	r1, r5
 800d372:	4650      	mov	r0, sl
 800d374:	f001 f9bd 	bl	800e6f2 <__mdiff>
 800d378:	68c3      	ldr	r3, [r0, #12]
 800d37a:	4602      	mov	r2, r0
 800d37c:	b93b      	cbnz	r3, 800d38e <_dtoa_r+0x976>
 800d37e:	4601      	mov	r1, r0
 800d380:	9007      	str	r0, [sp, #28]
 800d382:	9802      	ldr	r0, [sp, #8]
 800d384:	f001 f999 	bl	800e6ba <__mcmp>
 800d388:	9a07      	ldr	r2, [sp, #28]
 800d38a:	4603      	mov	r3, r0
 800d38c:	e000      	b.n	800d390 <_dtoa_r+0x978>
 800d38e:	2301      	movs	r3, #1
 800d390:	4611      	mov	r1, r2
 800d392:	4650      	mov	r0, sl
 800d394:	9307      	str	r3, [sp, #28]
 800d396:	f000 ffb7 	bl	800e308 <_Bfree>
 800d39a:	9b07      	ldr	r3, [sp, #28]
 800d39c:	b94b      	cbnz	r3, 800d3b2 <_dtoa_r+0x99a>
 800d39e:	9a06      	ldr	r2, [sp, #24]
 800d3a0:	b93a      	cbnz	r2, 800d3b2 <_dtoa_r+0x99a>
 800d3a2:	9a05      	ldr	r2, [sp, #20]
 800d3a4:	b92a      	cbnz	r2, 800d3b2 <_dtoa_r+0x99a>
 800d3a6:	2f39      	cmp	r7, #57	; 0x39
 800d3a8:	d028      	beq.n	800d3fc <_dtoa_r+0x9e4>
 800d3aa:	9b00      	ldr	r3, [sp, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	dc1a      	bgt.n	800d3e6 <_dtoa_r+0x9ce>
 800d3b0:	e01b      	b.n	800d3ea <_dtoa_r+0x9d2>
 800d3b2:	9a00      	ldr	r2, [sp, #0]
 800d3b4:	2a00      	cmp	r2, #0
 800d3b6:	db04      	blt.n	800d3c2 <_dtoa_r+0x9aa>
 800d3b8:	d11a      	bne.n	800d3f0 <_dtoa_r+0x9d8>
 800d3ba:	9a06      	ldr	r2, [sp, #24]
 800d3bc:	b9c2      	cbnz	r2, 800d3f0 <_dtoa_r+0x9d8>
 800d3be:	9a05      	ldr	r2, [sp, #20]
 800d3c0:	b9b2      	cbnz	r2, 800d3f0 <_dtoa_r+0x9d8>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	dd11      	ble.n	800d3ea <_dtoa_r+0x9d2>
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	9902      	ldr	r1, [sp, #8]
 800d3ca:	4650      	mov	r0, sl
 800d3cc:	f001 f924 	bl	800e618 <__lshift>
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	9002      	str	r0, [sp, #8]
 800d3d4:	f001 f971 	bl	800e6ba <__mcmp>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	dc02      	bgt.n	800d3e2 <_dtoa_r+0x9ca>
 800d3dc:	d105      	bne.n	800d3ea <_dtoa_r+0x9d2>
 800d3de:	07fa      	lsls	r2, r7, #31
 800d3e0:	d503      	bpl.n	800d3ea <_dtoa_r+0x9d2>
 800d3e2:	2f39      	cmp	r7, #57	; 0x39
 800d3e4:	d00a      	beq.n	800d3fc <_dtoa_r+0x9e4>
 800d3e6:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800d3ea:	f109 0401 	add.w	r4, r9, #1
 800d3ee:	e00c      	b.n	800d40a <_dtoa_r+0x9f2>
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f109 0401 	add.w	r4, r9, #1
 800d3f6:	dd0b      	ble.n	800d410 <_dtoa_r+0x9f8>
 800d3f8:	2f39      	cmp	r7, #57	; 0x39
 800d3fa:	d105      	bne.n	800d408 <_dtoa_r+0x9f0>
 800d3fc:	2339      	movs	r3, #57	; 0x39
 800d3fe:	f889 3000 	strb.w	r3, [r9]
 800d402:	f109 0901 	add.w	r9, r9, #1
 800d406:	e054      	b.n	800d4b2 <_dtoa_r+0xa9a>
 800d408:	3701      	adds	r7, #1
 800d40a:	f889 7000 	strb.w	r7, [r9]
 800d40e:	e06d      	b.n	800d4ec <_dtoa_r+0xad4>
 800d410:	9b04      	ldr	r3, [sp, #16]
 800d412:	9a03      	ldr	r2, [sp, #12]
 800d414:	f804 7c01 	strb.w	r7, [r4, #-1]
 800d418:	1ae3      	subs	r3, r4, r3
 800d41a:	4293      	cmp	r3, r2
 800d41c:	46a1      	mov	r9, r4
 800d41e:	d03a      	beq.n	800d496 <_dtoa_r+0xa7e>
 800d420:	2300      	movs	r3, #0
 800d422:	220a      	movs	r2, #10
 800d424:	9902      	ldr	r1, [sp, #8]
 800d426:	4650      	mov	r0, sl
 800d428:	f000 ff85 	bl	800e336 <__multadd>
 800d42c:	4546      	cmp	r6, r8
 800d42e:	9002      	str	r0, [sp, #8]
 800d430:	f04f 0300 	mov.w	r3, #0
 800d434:	f04f 020a 	mov.w	r2, #10
 800d438:	4631      	mov	r1, r6
 800d43a:	4650      	mov	r0, sl
 800d43c:	d104      	bne.n	800d448 <_dtoa_r+0xa30>
 800d43e:	f000 ff7a 	bl	800e336 <__multadd>
 800d442:	4606      	mov	r6, r0
 800d444:	4680      	mov	r8, r0
 800d446:	e786      	b.n	800d356 <_dtoa_r+0x93e>
 800d448:	f000 ff75 	bl	800e336 <__multadd>
 800d44c:	4641      	mov	r1, r8
 800d44e:	4606      	mov	r6, r0
 800d450:	2300      	movs	r3, #0
 800d452:	220a      	movs	r2, #10
 800d454:	4650      	mov	r0, sl
 800d456:	f000 ff6e 	bl	800e336 <__multadd>
 800d45a:	4680      	mov	r8, r0
 800d45c:	e77b      	b.n	800d356 <_dtoa_r+0x93e>
 800d45e:	2300      	movs	r3, #0
 800d460:	220a      	movs	r2, #10
 800d462:	9902      	ldr	r1, [sp, #8]
 800d464:	4650      	mov	r0, sl
 800d466:	f000 ff66 	bl	800e336 <__multadd>
 800d46a:	9002      	str	r0, [sp, #8]
 800d46c:	4629      	mov	r1, r5
 800d46e:	9802      	ldr	r0, [sp, #8]
 800d470:	f7ff fa40 	bl	800c8f4 <quorem>
 800d474:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800d478:	f804 7b01 	strb.w	r7, [r4], #1
 800d47c:	9b04      	ldr	r3, [sp, #16]
 800d47e:	9a03      	ldr	r2, [sp, #12]
 800d480:	1ae3      	subs	r3, r4, r3
 800d482:	4293      	cmp	r3, r2
 800d484:	dbeb      	blt.n	800d45e <_dtoa_r+0xa46>
 800d486:	9b04      	ldr	r3, [sp, #16]
 800d488:	2a01      	cmp	r2, #1
 800d48a:	bfac      	ite	ge
 800d48c:	189b      	addge	r3, r3, r2
 800d48e:	3301      	addlt	r3, #1
 800d490:	46b0      	mov	r8, r6
 800d492:	4699      	mov	r9, r3
 800d494:	2600      	movs	r6, #0
 800d496:	2201      	movs	r2, #1
 800d498:	9902      	ldr	r1, [sp, #8]
 800d49a:	4650      	mov	r0, sl
 800d49c:	f001 f8bc 	bl	800e618 <__lshift>
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	9002      	str	r0, [sp, #8]
 800d4a4:	f001 f909 	bl	800e6ba <__mcmp>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	dc02      	bgt.n	800d4b2 <_dtoa_r+0xa9a>
 800d4ac:	d115      	bne.n	800d4da <_dtoa_r+0xac2>
 800d4ae:	07fb      	lsls	r3, r7, #31
 800d4b0:	d513      	bpl.n	800d4da <_dtoa_r+0xac2>
 800d4b2:	464c      	mov	r4, r9
 800d4b4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d4b8:	2b39      	cmp	r3, #57	; 0x39
 800d4ba:	f104 32ff 	add.w	r2, r4, #4294967295
 800d4be:	d109      	bne.n	800d4d4 <_dtoa_r+0xabc>
 800d4c0:	9b04      	ldr	r3, [sp, #16]
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d104      	bne.n	800d4d0 <_dtoa_r+0xab8>
 800d4c6:	f10b 0b01 	add.w	fp, fp, #1
 800d4ca:	2331      	movs	r3, #49	; 0x31
 800d4cc:	9a04      	ldr	r2, [sp, #16]
 800d4ce:	e002      	b.n	800d4d6 <_dtoa_r+0xabe>
 800d4d0:	4614      	mov	r4, r2
 800d4d2:	e7ef      	b.n	800d4b4 <_dtoa_r+0xa9c>
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	7013      	strb	r3, [r2, #0]
 800d4d8:	e008      	b.n	800d4ec <_dtoa_r+0xad4>
 800d4da:	464c      	mov	r4, r9
 800d4dc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d4e0:	2b30      	cmp	r3, #48	; 0x30
 800d4e2:	f104 32ff 	add.w	r2, r4, #4294967295
 800d4e6:	d101      	bne.n	800d4ec <_dtoa_r+0xad4>
 800d4e8:	4614      	mov	r4, r2
 800d4ea:	e7f7      	b.n	800d4dc <_dtoa_r+0xac4>
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4650      	mov	r0, sl
 800d4f0:	f000 ff0a 	bl	800e308 <_Bfree>
 800d4f4:	f1b8 0f00 	cmp.w	r8, #0
 800d4f8:	d00d      	beq.n	800d516 <_dtoa_r+0xafe>
 800d4fa:	b12e      	cbz	r6, 800d508 <_dtoa_r+0xaf0>
 800d4fc:	4546      	cmp	r6, r8
 800d4fe:	d003      	beq.n	800d508 <_dtoa_r+0xaf0>
 800d500:	4631      	mov	r1, r6
 800d502:	4650      	mov	r0, sl
 800d504:	f000 ff00 	bl	800e308 <_Bfree>
 800d508:	4641      	mov	r1, r8
 800d50a:	4650      	mov	r0, sl
 800d50c:	f000 fefc 	bl	800e308 <_Bfree>
 800d510:	e001      	b.n	800d516 <_dtoa_r+0xafe>
 800d512:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d516:	9902      	ldr	r1, [sp, #8]
 800d518:	4650      	mov	r0, sl
 800d51a:	f000 fef5 	bl	800e308 <_Bfree>
 800d51e:	2300      	movs	r3, #0
 800d520:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d522:	7023      	strb	r3, [r4, #0]
 800d524:	f10b 0301 	add.w	r3, fp, #1
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d52c:	b11b      	cbz	r3, 800d536 <_dtoa_r+0xb1e>
 800d52e:	601c      	str	r4, [r3, #0]
 800d530:	e001      	b.n	800d536 <_dtoa_r+0xb1e>
 800d532:	4808      	ldr	r0, [pc, #32]	; (800d554 <_dtoa_r+0xb3c>)
 800d534:	e00a      	b.n	800d54c <_dtoa_r+0xb34>
 800d536:	9804      	ldr	r0, [sp, #16]
 800d538:	e008      	b.n	800d54c <_dtoa_r+0xb34>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f73f aee1 	bgt.w	800d304 <_dtoa_r+0x8ec>
 800d542:	9b06      	ldr	r3, [sp, #24]
 800d544:	2b02      	cmp	r3, #2
 800d546:	f77f aedd 	ble.w	800d304 <_dtoa_r+0x8ec>
 800d54a:	e6b1      	b.n	800d2b0 <_dtoa_r+0x898>
 800d54c:	b017      	add	sp, #92	; 0x5c
 800d54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d552:	bf00      	nop
 800d554:	0801198c 	.word	0x0801198c

0800d558 <__sflush_r>:
 800d558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d55c:	b293      	uxth	r3, r2
 800d55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d562:	4605      	mov	r5, r0
 800d564:	0718      	lsls	r0, r3, #28
 800d566:	460c      	mov	r4, r1
 800d568:	d460      	bmi.n	800d62c <__sflush_r+0xd4>
 800d56a:	684b      	ldr	r3, [r1, #4]
 800d56c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d570:	2b00      	cmp	r3, #0
 800d572:	818a      	strh	r2, [r1, #12]
 800d574:	dc02      	bgt.n	800d57c <__sflush_r+0x24>
 800d576:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dd17      	ble.n	800d5ac <__sflush_r+0x54>
 800d57c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d57e:	b1ae      	cbz	r6, 800d5ac <__sflush_r+0x54>
 800d580:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d584:	2300      	movs	r3, #0
 800d586:	b292      	uxth	r2, r2
 800d588:	682f      	ldr	r7, [r5, #0]
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	b10a      	cbz	r2, 800d592 <__sflush_r+0x3a>
 800d58e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d590:	e015      	b.n	800d5be <__sflush_r+0x66>
 800d592:	6a21      	ldr	r1, [r4, #32]
 800d594:	2301      	movs	r3, #1
 800d596:	4628      	mov	r0, r5
 800d598:	47b0      	blx	r6
 800d59a:	1c41      	adds	r1, r0, #1
 800d59c:	d10f      	bne.n	800d5be <__sflush_r+0x66>
 800d59e:	682b      	ldr	r3, [r5, #0]
 800d5a0:	b16b      	cbz	r3, 800d5be <__sflush_r+0x66>
 800d5a2:	2b1d      	cmp	r3, #29
 800d5a4:	d001      	beq.n	800d5aa <__sflush_r+0x52>
 800d5a6:	2b16      	cmp	r3, #22
 800d5a8:	d103      	bne.n	800d5b2 <__sflush_r+0x5a>
 800d5aa:	602f      	str	r7, [r5, #0]
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	075a      	lsls	r2, r3, #29
 800d5c2:	d505      	bpl.n	800d5d0 <__sflush_r+0x78>
 800d5c4:	6863      	ldr	r3, [r4, #4]
 800d5c6:	1ac0      	subs	r0, r0, r3
 800d5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5ca:	b10b      	cbz	r3, 800d5d0 <__sflush_r+0x78>
 800d5cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5ce:	1ac0      	subs	r0, r0, r3
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5d6:	6a21      	ldr	r1, [r4, #32]
 800d5d8:	4628      	mov	r0, r5
 800d5da:	47b0      	blx	r6
 800d5dc:	1c43      	adds	r3, r0, #1
 800d5de:	89a3      	ldrh	r3, [r4, #12]
 800d5e0:	d106      	bne.n	800d5f0 <__sflush_r+0x98>
 800d5e2:	6829      	ldr	r1, [r5, #0]
 800d5e4:	291d      	cmp	r1, #29
 800d5e6:	d83e      	bhi.n	800d666 <__sflush_r+0x10e>
 800d5e8:	4a22      	ldr	r2, [pc, #136]	; (800d674 <__sflush_r+0x11c>)
 800d5ea:	40ca      	lsrs	r2, r1
 800d5ec:	07d6      	lsls	r6, r2, #31
 800d5ee:	d53a      	bpl.n	800d666 <__sflush_r+0x10e>
 800d5f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5f4:	b21b      	sxth	r3, r3
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	6062      	str	r2, [r4, #4]
 800d5fa:	04d9      	lsls	r1, r3, #19
 800d5fc:	6922      	ldr	r2, [r4, #16]
 800d5fe:	81a3      	strh	r3, [r4, #12]
 800d600:	6022      	str	r2, [r4, #0]
 800d602:	d504      	bpl.n	800d60e <__sflush_r+0xb6>
 800d604:	1c42      	adds	r2, r0, #1
 800d606:	d101      	bne.n	800d60c <__sflush_r+0xb4>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b903      	cbnz	r3, 800d60e <__sflush_r+0xb6>
 800d60c:	6560      	str	r0, [r4, #84]	; 0x54
 800d60e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d610:	602f      	str	r7, [r5, #0]
 800d612:	2900      	cmp	r1, #0
 800d614:	d0ca      	beq.n	800d5ac <__sflush_r+0x54>
 800d616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d61a:	4299      	cmp	r1, r3
 800d61c:	d002      	beq.n	800d624 <__sflush_r+0xcc>
 800d61e:	4628      	mov	r0, r5
 800d620:	f000 f95c 	bl	800d8dc <_free_r>
 800d624:	2000      	movs	r0, #0
 800d626:	6360      	str	r0, [r4, #52]	; 0x34
 800d628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62c:	690f      	ldr	r7, [r1, #16]
 800d62e:	2f00      	cmp	r7, #0
 800d630:	d0bc      	beq.n	800d5ac <__sflush_r+0x54>
 800d632:	079b      	lsls	r3, r3, #30
 800d634:	680e      	ldr	r6, [r1, #0]
 800d636:	bf08      	it	eq
 800d638:	694b      	ldreq	r3, [r1, #20]
 800d63a:	600f      	str	r7, [r1, #0]
 800d63c:	bf18      	it	ne
 800d63e:	2300      	movne	r3, #0
 800d640:	ebc7 0806 	rsb	r8, r7, r6
 800d644:	608b      	str	r3, [r1, #8]
 800d646:	e002      	b.n	800d64e <__sflush_r+0xf6>
 800d648:	4407      	add	r7, r0
 800d64a:	ebc0 0808 	rsb	r8, r0, r8
 800d64e:	f1b8 0f00 	cmp.w	r8, #0
 800d652:	ddab      	ble.n	800d5ac <__sflush_r+0x54>
 800d654:	4643      	mov	r3, r8
 800d656:	463a      	mov	r2, r7
 800d658:	6a21      	ldr	r1, [r4, #32]
 800d65a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b0      	blx	r6
 800d660:	2800      	cmp	r0, #0
 800d662:	dcf1      	bgt.n	800d648 <__sflush_r+0xf0>
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66a:	81a3      	strh	r3, [r4, #12]
 800d66c:	f04f 30ff 	mov.w	r0, #4294967295
 800d670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d674:	20400001 	.word	0x20400001

0800d678 <_fflush_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	690b      	ldr	r3, [r1, #16]
 800d67c:	4605      	mov	r5, r0
 800d67e:	460c      	mov	r4, r1
 800d680:	b1db      	cbz	r3, 800d6ba <_fflush_r+0x42>
 800d682:	b118      	cbz	r0, 800d68c <_fflush_r+0x14>
 800d684:	6983      	ldr	r3, [r0, #24]
 800d686:	b90b      	cbnz	r3, 800d68c <_fflush_r+0x14>
 800d688:	f000 f860 	bl	800d74c <__sinit>
 800d68c:	4b0c      	ldr	r3, [pc, #48]	; (800d6c0 <_fflush_r+0x48>)
 800d68e:	429c      	cmp	r4, r3
 800d690:	d101      	bne.n	800d696 <_fflush_r+0x1e>
 800d692:	686c      	ldr	r4, [r5, #4]
 800d694:	e008      	b.n	800d6a8 <_fflush_r+0x30>
 800d696:	4b0b      	ldr	r3, [pc, #44]	; (800d6c4 <_fflush_r+0x4c>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	d101      	bne.n	800d6a0 <_fflush_r+0x28>
 800d69c:	68ac      	ldr	r4, [r5, #8]
 800d69e:	e003      	b.n	800d6a8 <_fflush_r+0x30>
 800d6a0:	4b09      	ldr	r3, [pc, #36]	; (800d6c8 <_fflush_r+0x50>)
 800d6a2:	429c      	cmp	r4, r3
 800d6a4:	bf08      	it	eq
 800d6a6:	68ec      	ldreq	r4, [r5, #12]
 800d6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ac:	b12b      	cbz	r3, 800d6ba <_fflush_r+0x42>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6b6:	f7ff bf4f 	b.w	800d558 <__sflush_r>
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	bd38      	pop	{r3, r4, r5, pc}
 800d6be:	bf00      	nop
 800d6c0:	08011acc 	.word	0x08011acc
 800d6c4:	08011aec 	.word	0x08011aec
 800d6c8:	08011b0c 	.word	0x08011b0c

0800d6cc <_cleanup_r>:
 800d6cc:	4901      	ldr	r1, [pc, #4]	; (800d6d4 <_cleanup_r+0x8>)
 800d6ce:	f000 bb0d 	b.w	800dcec <_fwalk_reent>
 800d6d2:	bf00      	nop
 800d6d4:	0800ee45 	.word	0x0800ee45

0800d6d8 <std.isra.0>:
 800d6d8:	2300      	movs	r3, #0
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	4604      	mov	r4, r0
 800d6de:	6003      	str	r3, [r0, #0]
 800d6e0:	6043      	str	r3, [r0, #4]
 800d6e2:	6083      	str	r3, [r0, #8]
 800d6e4:	8181      	strh	r1, [r0, #12]
 800d6e6:	6643      	str	r3, [r0, #100]	; 0x64
 800d6e8:	81c2      	strh	r2, [r0, #14]
 800d6ea:	6103      	str	r3, [r0, #16]
 800d6ec:	6143      	str	r3, [r0, #20]
 800d6ee:	6183      	str	r3, [r0, #24]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	2208      	movs	r2, #8
 800d6f4:	305c      	adds	r0, #92	; 0x5c
 800d6f6:	f7fc ff40 	bl	800a57a <memset>
 800d6fa:	4b05      	ldr	r3, [pc, #20]	; (800d710 <std.isra.0+0x38>)
 800d6fc:	6263      	str	r3, [r4, #36]	; 0x24
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <std.isra.0+0x3c>)
 800d700:	62a3      	str	r3, [r4, #40]	; 0x28
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <std.isra.0+0x40>)
 800d704:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d706:	4b05      	ldr	r3, [pc, #20]	; (800d71c <std.isra.0+0x44>)
 800d708:	6224      	str	r4, [r4, #32]
 800d70a:	6323      	str	r3, [r4, #48]	; 0x30
 800d70c:	bd10      	pop	{r4, pc}
 800d70e:	bf00      	nop
 800d710:	0800ebbd 	.word	0x0800ebbd
 800d714:	0800ebdf 	.word	0x0800ebdf
 800d718:	0800ec17 	.word	0x0800ec17
 800d71c:	0800ec3b 	.word	0x0800ec3b

0800d720 <__sfmoreglue>:
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	2368      	movs	r3, #104	; 0x68
 800d724:	1e4d      	subs	r5, r1, #1
 800d726:	435d      	muls	r5, r3
 800d728:	460e      	mov	r6, r1
 800d72a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d72e:	f000 fb79 	bl	800de24 <_malloc_r>
 800d732:	4604      	mov	r4, r0
 800d734:	b140      	cbz	r0, 800d748 <__sfmoreglue+0x28>
 800d736:	2100      	movs	r1, #0
 800d738:	e880 0042 	stmia.w	r0, {r1, r6}
 800d73c:	300c      	adds	r0, #12
 800d73e:	60a0      	str	r0, [r4, #8]
 800d740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d744:	f7fc ff19 	bl	800a57a <memset>
 800d748:	4620      	mov	r0, r4
 800d74a:	bd70      	pop	{r4, r5, r6, pc}

0800d74c <__sinit>:
 800d74c:	6983      	ldr	r3, [r0, #24]
 800d74e:	b510      	push	{r4, lr}
 800d750:	4604      	mov	r4, r0
 800d752:	bb4b      	cbnz	r3, 800d7a8 <__sinit+0x5c>
 800d754:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 800d758:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 800d75c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800d760:	4b12      	ldr	r3, [pc, #72]	; (800d7ac <__sinit+0x60>)
 800d762:	4a13      	ldr	r2, [pc, #76]	; (800d7b0 <__sinit+0x64>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6282      	str	r2, [r0, #40]	; 0x28
 800d768:	4298      	cmp	r0, r3
 800d76a:	bf04      	itt	eq
 800d76c:	2301      	moveq	r3, #1
 800d76e:	6183      	streq	r3, [r0, #24]
 800d770:	f000 f820 	bl	800d7b4 <__sfp>
 800d774:	6060      	str	r0, [r4, #4]
 800d776:	4620      	mov	r0, r4
 800d778:	f000 f81c 	bl	800d7b4 <__sfp>
 800d77c:	60a0      	str	r0, [r4, #8]
 800d77e:	4620      	mov	r0, r4
 800d780:	f000 f818 	bl	800d7b4 <__sfp>
 800d784:	2200      	movs	r2, #0
 800d786:	60e0      	str	r0, [r4, #12]
 800d788:	2104      	movs	r1, #4
 800d78a:	6860      	ldr	r0, [r4, #4]
 800d78c:	f7ff ffa4 	bl	800d6d8 <std.isra.0>
 800d790:	2201      	movs	r2, #1
 800d792:	2109      	movs	r1, #9
 800d794:	68a0      	ldr	r0, [r4, #8]
 800d796:	f7ff ff9f 	bl	800d6d8 <std.isra.0>
 800d79a:	2202      	movs	r2, #2
 800d79c:	2112      	movs	r1, #18
 800d79e:	68e0      	ldr	r0, [r4, #12]
 800d7a0:	f7ff ff9a 	bl	800d6d8 <std.isra.0>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	61a3      	str	r3, [r4, #24]
 800d7a8:	bd10      	pop	{r4, pc}
 800d7aa:	bf00      	nop
 800d7ac:	08011944 	.word	0x08011944
 800d7b0:	0800d6cd 	.word	0x0800d6cd

0800d7b4 <__sfp>:
 800d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b6:	4b1c      	ldr	r3, [pc, #112]	; (800d828 <__sfp+0x74>)
 800d7b8:	681e      	ldr	r6, [r3, #0]
 800d7ba:	69b3      	ldr	r3, [r6, #24]
 800d7bc:	4607      	mov	r7, r0
 800d7be:	b913      	cbnz	r3, 800d7c6 <__sfp+0x12>
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f7ff ffc3 	bl	800d74c <__sinit>
 800d7c6:	36d8      	adds	r6, #216	; 0xd8
 800d7c8:	68b4      	ldr	r4, [r6, #8]
 800d7ca:	6873      	ldr	r3, [r6, #4]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	d404      	bmi.n	800d7da <__sfp+0x26>
 800d7d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7d4:	b17d      	cbz	r5, 800d7f6 <__sfp+0x42>
 800d7d6:	3468      	adds	r4, #104	; 0x68
 800d7d8:	e7f8      	b.n	800d7cc <__sfp+0x18>
 800d7da:	6833      	ldr	r3, [r6, #0]
 800d7dc:	b10b      	cbz	r3, 800d7e2 <__sfp+0x2e>
 800d7de:	6836      	ldr	r6, [r6, #0]
 800d7e0:	e7f2      	b.n	800d7c8 <__sfp+0x14>
 800d7e2:	2104      	movs	r1, #4
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	f7ff ff9b 	bl	800d720 <__sfmoreglue>
 800d7ea:	6030      	str	r0, [r6, #0]
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d1f6      	bne.n	800d7de <__sfp+0x2a>
 800d7f0:	230c      	movs	r3, #12
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7fa:	81e3      	strh	r3, [r4, #14]
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	6665      	str	r5, [r4, #100]	; 0x64
 800d802:	6025      	str	r5, [r4, #0]
 800d804:	60a5      	str	r5, [r4, #8]
 800d806:	6065      	str	r5, [r4, #4]
 800d808:	6125      	str	r5, [r4, #16]
 800d80a:	6165      	str	r5, [r4, #20]
 800d80c:	61a5      	str	r5, [r4, #24]
 800d80e:	2208      	movs	r2, #8
 800d810:	4629      	mov	r1, r5
 800d812:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d816:	f7fc feb0 	bl	800a57a <memset>
 800d81a:	6365      	str	r5, [r4, #52]	; 0x34
 800d81c:	63a5      	str	r5, [r4, #56]	; 0x38
 800d81e:	64a5      	str	r5, [r4, #72]	; 0x48
 800d820:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d822:	4620      	mov	r0, r4
 800d824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d826:	bf00      	nop
 800d828:	08011944 	.word	0x08011944

0800d82c <__sfp_lock_acquire>:
 800d82c:	4770      	bx	lr

0800d82e <__sfp_lock_release>:
 800d82e:	4770      	bx	lr

0800d830 <_malloc_trim_r>:
 800d830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d834:	4f25      	ldr	r7, [pc, #148]	; (800d8cc <_malloc_trim_r+0x9c>)
 800d836:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d8d8 <_malloc_trim_r+0xa8>
 800d83a:	4689      	mov	r9, r1
 800d83c:	4606      	mov	r6, r0
 800d83e:	f000 fd2c 	bl	800e29a <__malloc_lock>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	685d      	ldr	r5, [r3, #4]
 800d846:	f1a8 0411 	sub.w	r4, r8, #17
 800d84a:	f025 0503 	bic.w	r5, r5, #3
 800d84e:	442c      	add	r4, r5
 800d850:	ebc9 0404 	rsb	r4, r9, r4
 800d854:	fbb4 f4f8 	udiv	r4, r4, r8
 800d858:	3c01      	subs	r4, #1
 800d85a:	fb08 f404 	mul.w	r4, r8, r4
 800d85e:	4544      	cmp	r4, r8
 800d860:	da05      	bge.n	800d86e <_malloc_trim_r+0x3e>
 800d862:	4630      	mov	r0, r6
 800d864:	f000 fd1a 	bl	800e29c <__malloc_unlock>
 800d868:	2000      	movs	r0, #0
 800d86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d86e:	2100      	movs	r1, #0
 800d870:	4630      	mov	r0, r6
 800d872:	f001 f993 	bl	800eb9c <_sbrk_r>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	442b      	add	r3, r5
 800d87a:	4298      	cmp	r0, r3
 800d87c:	d1f1      	bne.n	800d862 <_malloc_trim_r+0x32>
 800d87e:	4261      	negs	r1, r4
 800d880:	4630      	mov	r0, r6
 800d882:	f001 f98b 	bl	800eb9c <_sbrk_r>
 800d886:	3001      	adds	r0, #1
 800d888:	d110      	bne.n	800d8ac <_malloc_trim_r+0x7c>
 800d88a:	2100      	movs	r1, #0
 800d88c:	4630      	mov	r0, r6
 800d88e:	f001 f985 	bl	800eb9c <_sbrk_r>
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	1a83      	subs	r3, r0, r2
 800d896:	2b0f      	cmp	r3, #15
 800d898:	dde3      	ble.n	800d862 <_malloc_trim_r+0x32>
 800d89a:	490d      	ldr	r1, [pc, #52]	; (800d8d0 <_malloc_trim_r+0xa0>)
 800d89c:	6809      	ldr	r1, [r1, #0]
 800d89e:	1a40      	subs	r0, r0, r1
 800d8a0:	490c      	ldr	r1, [pc, #48]	; (800d8d4 <_malloc_trim_r+0xa4>)
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	6008      	str	r0, [r1, #0]
 800d8a8:	6053      	str	r3, [r2, #4]
 800d8aa:	e7da      	b.n	800d862 <_malloc_trim_r+0x32>
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	4a09      	ldr	r2, [pc, #36]	; (800d8d4 <_malloc_trim_r+0xa4>)
 800d8b0:	1b2d      	subs	r5, r5, r4
 800d8b2:	f045 0501 	orr.w	r5, r5, #1
 800d8b6:	605d      	str	r5, [r3, #4]
 800d8b8:	6813      	ldr	r3, [r2, #0]
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	1b1c      	subs	r4, r3, r4
 800d8be:	6014      	str	r4, [r2, #0]
 800d8c0:	f000 fcec 	bl	800e29c <__malloc_unlock>
 800d8c4:	2001      	movs	r0, #1
 800d8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20010184 	.word	0x20010184
 800d8d0:	20010590 	.word	0x20010590
 800d8d4:	2001462c 	.word	0x2001462c
 800d8d8:	00000080 	.word	0x00000080

0800d8dc <_free_r>:
 800d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	4688      	mov	r8, r1
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	f000 80ad 	beq.w	800da44 <_free_r+0x168>
 800d8ea:	f000 fcd6 	bl	800e29a <__malloc_lock>
 800d8ee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800d8f2:	4d55      	ldr	r5, [pc, #340]	; (800da48 <_free_r+0x16c>)
 800d8f4:	f022 0001 	bic.w	r0, r2, #1
 800d8f8:	f1a8 0308 	sub.w	r3, r8, #8
 800d8fc:	181f      	adds	r7, r3, r0
 800d8fe:	68a9      	ldr	r1, [r5, #8]
 800d900:	687e      	ldr	r6, [r7, #4]
 800d902:	428f      	cmp	r7, r1
 800d904:	f026 0603 	bic.w	r6, r6, #3
 800d908:	f002 0201 	and.w	r2, r2, #1
 800d90c:	d11b      	bne.n	800d946 <_free_r+0x6a>
 800d90e:	4430      	add	r0, r6
 800d910:	b93a      	cbnz	r2, 800d922 <_free_r+0x46>
 800d912:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800d916:	1a9b      	subs	r3, r3, r2
 800d918:	4410      	add	r0, r2
 800d91a:	6899      	ldr	r1, [r3, #8]
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	60ca      	str	r2, [r1, #12]
 800d920:	6091      	str	r1, [r2, #8]
 800d922:	f040 0201 	orr.w	r2, r0, #1
 800d926:	605a      	str	r2, [r3, #4]
 800d928:	60ab      	str	r3, [r5, #8]
 800d92a:	4b48      	ldr	r3, [pc, #288]	; (800da4c <_free_r+0x170>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4298      	cmp	r0, r3
 800d930:	d304      	bcc.n	800d93c <_free_r+0x60>
 800d932:	4b47      	ldr	r3, [pc, #284]	; (800da50 <_free_r+0x174>)
 800d934:	4620      	mov	r0, r4
 800d936:	6819      	ldr	r1, [r3, #0]
 800d938:	f7ff ff7a 	bl	800d830 <_malloc_trim_r>
 800d93c:	4620      	mov	r0, r4
 800d93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d942:	f000 bcab 	b.w	800e29c <__malloc_unlock>
 800d946:	607e      	str	r6, [r7, #4]
 800d948:	b97a      	cbnz	r2, 800d96a <_free_r+0x8e>
 800d94a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800d94e:	1a5b      	subs	r3, r3, r1
 800d950:	4408      	add	r0, r1
 800d952:	6899      	ldr	r1, [r3, #8]
 800d954:	f105 0e08 	add.w	lr, r5, #8
 800d958:	4571      	cmp	r1, lr
 800d95a:	d008      	beq.n	800d96e <_free_r+0x92>
 800d95c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d960:	f8c1 e00c 	str.w	lr, [r1, #12]
 800d964:	f8ce 1008 	str.w	r1, [lr, #8]
 800d968:	e002      	b.n	800d970 <_free_r+0x94>
 800d96a:	2200      	movs	r2, #0
 800d96c:	e000      	b.n	800d970 <_free_r+0x94>
 800d96e:	2201      	movs	r2, #1
 800d970:	19b9      	adds	r1, r7, r6
 800d972:	6849      	ldr	r1, [r1, #4]
 800d974:	07c9      	lsls	r1, r1, #31
 800d976:	d40e      	bmi.n	800d996 <_free_r+0xba>
 800d978:	4430      	add	r0, r6
 800d97a:	68b9      	ldr	r1, [r7, #8]
 800d97c:	b942      	cbnz	r2, 800d990 <_free_r+0xb4>
 800d97e:	4e35      	ldr	r6, [pc, #212]	; (800da54 <_free_r+0x178>)
 800d980:	42b1      	cmp	r1, r6
 800d982:	d105      	bne.n	800d990 <_free_r+0xb4>
 800d984:	616b      	str	r3, [r5, #20]
 800d986:	612b      	str	r3, [r5, #16]
 800d988:	2201      	movs	r2, #1
 800d98a:	60d9      	str	r1, [r3, #12]
 800d98c:	6099      	str	r1, [r3, #8]
 800d98e:	e002      	b.n	800d996 <_free_r+0xba>
 800d990:	68fe      	ldr	r6, [r7, #12]
 800d992:	60ce      	str	r6, [r1, #12]
 800d994:	60b1      	str	r1, [r6, #8]
 800d996:	f040 0101 	orr.w	r1, r0, #1
 800d99a:	6059      	str	r1, [r3, #4]
 800d99c:	5018      	str	r0, [r3, r0]
 800d99e:	2a00      	cmp	r2, #0
 800d9a0:	d1cc      	bne.n	800d93c <_free_r+0x60>
 800d9a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d9a6:	d212      	bcs.n	800d9ce <_free_r+0xf2>
 800d9a8:	08c0      	lsrs	r0, r0, #3
 800d9aa:	1081      	asrs	r1, r0, #2
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	fa02 f101 	lsl.w	r1, r2, r1
 800d9b2:	686a      	ldr	r2, [r5, #4]
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	430a      	orrs	r2, r1
 800d9b8:	606a      	str	r2, [r5, #4]
 800d9ba:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800d9be:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800d9c2:	6099      	str	r1, [r3, #8]
 800d9c4:	3a08      	subs	r2, #8
 800d9c6:	60da      	str	r2, [r3, #12]
 800d9c8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800d9cc:	e038      	b.n	800da40 <_free_r+0x164>
 800d9ce:	0a42      	lsrs	r2, r0, #9
 800d9d0:	2a04      	cmp	r2, #4
 800d9d2:	d802      	bhi.n	800d9da <_free_r+0xfe>
 800d9d4:	0982      	lsrs	r2, r0, #6
 800d9d6:	3238      	adds	r2, #56	; 0x38
 800d9d8:	e015      	b.n	800da06 <_free_r+0x12a>
 800d9da:	2a14      	cmp	r2, #20
 800d9dc:	d801      	bhi.n	800d9e2 <_free_r+0x106>
 800d9de:	325b      	adds	r2, #91	; 0x5b
 800d9e0:	e011      	b.n	800da06 <_free_r+0x12a>
 800d9e2:	2a54      	cmp	r2, #84	; 0x54
 800d9e4:	d802      	bhi.n	800d9ec <_free_r+0x110>
 800d9e6:	0b02      	lsrs	r2, r0, #12
 800d9e8:	326e      	adds	r2, #110	; 0x6e
 800d9ea:	e00c      	b.n	800da06 <_free_r+0x12a>
 800d9ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d9f0:	d802      	bhi.n	800d9f8 <_free_r+0x11c>
 800d9f2:	0bc2      	lsrs	r2, r0, #15
 800d9f4:	3277      	adds	r2, #119	; 0x77
 800d9f6:	e006      	b.n	800da06 <_free_r+0x12a>
 800d9f8:	f240 5154 	movw	r1, #1364	; 0x554
 800d9fc:	428a      	cmp	r2, r1
 800d9fe:	bf9a      	itte	ls
 800da00:	0c82      	lsrls	r2, r0, #18
 800da02:	327c      	addls	r2, #124	; 0x7c
 800da04:	227e      	movhi	r2, #126	; 0x7e
 800da06:	1c51      	adds	r1, r2, #1
 800da08:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800da0c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800da10:	4f0d      	ldr	r7, [pc, #52]	; (800da48 <_free_r+0x16c>)
 800da12:	428e      	cmp	r6, r1
 800da14:	d10b      	bne.n	800da2e <_free_r+0x152>
 800da16:	2101      	movs	r1, #1
 800da18:	1092      	asrs	r2, r2, #2
 800da1a:	fa01 f202 	lsl.w	r2, r1, r2
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	4311      	orrs	r1, r2
 800da22:	6079      	str	r1, [r7, #4]
 800da24:	4631      	mov	r1, r6
 800da26:	e008      	b.n	800da3a <_free_r+0x15e>
 800da28:	6889      	ldr	r1, [r1, #8]
 800da2a:	428e      	cmp	r6, r1
 800da2c:	d004      	beq.n	800da38 <_free_r+0x15c>
 800da2e:	684a      	ldr	r2, [r1, #4]
 800da30:	f022 0203 	bic.w	r2, r2, #3
 800da34:	4290      	cmp	r0, r2
 800da36:	d3f7      	bcc.n	800da28 <_free_r+0x14c>
 800da38:	68ce      	ldr	r6, [r1, #12]
 800da3a:	60de      	str	r6, [r3, #12]
 800da3c:	6099      	str	r1, [r3, #8]
 800da3e:	60b3      	str	r3, [r6, #8]
 800da40:	60cb      	str	r3, [r1, #12]
 800da42:	e77b      	b.n	800d93c <_free_r+0x60>
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da48:	20010184 	.word	0x20010184
 800da4c:	2001058c 	.word	0x2001058c
 800da50:	20014628 	.word	0x20014628
 800da54:	2001018c 	.word	0x2001018c

0800da58 <__sfvwrite_r>:
 800da58:	6893      	ldr	r3, [r2, #8]
 800da5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5e:	4606      	mov	r6, r0
 800da60:	460c      	mov	r4, r1
 800da62:	4690      	mov	r8, r2
 800da64:	b90b      	cbnz	r3, 800da6a <__sfvwrite_r+0x12>
 800da66:	2000      	movs	r0, #0
 800da68:	e13b      	b.n	800dce2 <__sfvwrite_r+0x28a>
 800da6a:	898b      	ldrh	r3, [r1, #12]
 800da6c:	0718      	lsls	r0, r3, #28
 800da6e:	d50f      	bpl.n	800da90 <__sfvwrite_r+0x38>
 800da70:	690b      	ldr	r3, [r1, #16]
 800da72:	b16b      	cbz	r3, 800da90 <__sfvwrite_r+0x38>
 800da74:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 800da78:	f8d8 b000 	ldr.w	fp, [r8]
 800da7c:	f009 0502 	and.w	r5, r9, #2
 800da80:	b2ad      	uxth	r5, r5
 800da82:	b355      	cbz	r5, 800dada <__sfvwrite_r+0x82>
 800da84:	f04f 0900 	mov.w	r9, #0
 800da88:	464f      	mov	r7, r9
 800da8a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800dce8 <__sfvwrite_r+0x290>
 800da8e:	e01b      	b.n	800dac8 <__sfvwrite_r+0x70>
 800da90:	4621      	mov	r1, r4
 800da92:	4630      	mov	r0, r6
 800da94:	f7fe fec0 	bl	800c818 <__swsetup_r>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d0eb      	beq.n	800da74 <__sfvwrite_r+0x1c>
 800da9c:	e11f      	b.n	800dcde <__sfvwrite_r+0x286>
 800da9e:	4557      	cmp	r7, sl
 800daa0:	463b      	mov	r3, r7
 800daa2:	464a      	mov	r2, r9
 800daa4:	bf28      	it	cs
 800daa6:	4653      	movcs	r3, sl
 800daa8:	6a21      	ldr	r1, [r4, #32]
 800daaa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800daac:	4630      	mov	r0, r6
 800daae:	47a8      	blx	r5
 800dab0:	2800      	cmp	r0, #0
 800dab2:	f340 8110 	ble.w	800dcd6 <__sfvwrite_r+0x27e>
 800dab6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800daba:	4481      	add	r9, r0
 800dabc:	1a3f      	subs	r7, r7, r0
 800dabe:	1a18      	subs	r0, r3, r0
 800dac0:	f8c8 0008 	str.w	r0, [r8, #8]
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0ce      	beq.n	800da66 <__sfvwrite_r+0xe>
 800dac8:	2f00      	cmp	r7, #0
 800daca:	d1e8      	bne.n	800da9e <__sfvwrite_r+0x46>
 800dacc:	f8db 9000 	ldr.w	r9, [fp]
 800dad0:	f8db 7004 	ldr.w	r7, [fp, #4]
 800dad4:	f10b 0b08 	add.w	fp, fp, #8
 800dad8:	e7f6      	b.n	800dac8 <__sfvwrite_r+0x70>
 800dada:	f019 0901 	ands.w	r9, r9, #1
 800dade:	d003      	beq.n	800dae8 <__sfvwrite_r+0x90>
 800dae0:	9500      	str	r5, [sp, #0]
 800dae2:	46a9      	mov	r9, r5
 800dae4:	46aa      	mov	sl, r5
 800dae6:	e0bd      	b.n	800dc64 <__sfvwrite_r+0x20c>
 800dae8:	464f      	mov	r7, r9
 800daea:	b937      	cbnz	r7, 800dafa <__sfvwrite_r+0xa2>
 800daec:	f8db 9000 	ldr.w	r9, [fp]
 800daf0:	f8db 7004 	ldr.w	r7, [fp, #4]
 800daf4:	f10b 0b08 	add.w	fp, fp, #8
 800daf8:	e7f7      	b.n	800daea <__sfvwrite_r+0x92>
 800dafa:	89a2      	ldrh	r2, [r4, #12]
 800dafc:	68a5      	ldr	r5, [r4, #8]
 800dafe:	0591      	lsls	r1, r2, #22
 800db00:	d552      	bpl.n	800dba8 <__sfvwrite_r+0x150>
 800db02:	42af      	cmp	r7, r5
 800db04:	d342      	bcc.n	800db8c <__sfvwrite_r+0x134>
 800db06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db0a:	d03d      	beq.n	800db88 <__sfvwrite_r+0x130>
 800db0c:	6921      	ldr	r1, [r4, #16]
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	1a5b      	subs	r3, r3, r1
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	6963      	ldr	r3, [r4, #20]
 800db16:	2002      	movs	r0, #2
 800db18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db1c:	fb93 faf0 	sdiv	sl, r3, r0
 800db20:	9b00      	ldr	r3, [sp, #0]
 800db22:	3301      	adds	r3, #1
 800db24:	443b      	add	r3, r7
 800db26:	459a      	cmp	sl, r3
 800db28:	bf38      	it	cc
 800db2a:	469a      	movcc	sl, r3
 800db2c:	0553      	lsls	r3, r2, #21
 800db2e:	d510      	bpl.n	800db52 <__sfvwrite_r+0xfa>
 800db30:	4651      	mov	r1, sl
 800db32:	4630      	mov	r0, r6
 800db34:	f000 f976 	bl	800de24 <_malloc_r>
 800db38:	4605      	mov	r5, r0
 800db3a:	b1c0      	cbz	r0, 800db6e <__sfvwrite_r+0x116>
 800db3c:	9a00      	ldr	r2, [sp, #0]
 800db3e:	6921      	ldr	r1, [r4, #16]
 800db40:	f7fc fd10 	bl	800a564 <memcpy>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	e010      	b.n	800db74 <__sfvwrite_r+0x11c>
 800db52:	4652      	mov	r2, sl
 800db54:	4630      	mov	r0, r6
 800db56:	f000 fe79 	bl	800e84c <_realloc_r>
 800db5a:	4605      	mov	r5, r0
 800db5c:	b950      	cbnz	r0, 800db74 <__sfvwrite_r+0x11c>
 800db5e:	6921      	ldr	r1, [r4, #16]
 800db60:	4630      	mov	r0, r6
 800db62:	f7ff febb 	bl	800d8dc <_free_r>
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db6c:	81a3      	strh	r3, [r4, #12]
 800db6e:	230c      	movs	r3, #12
 800db70:	6033      	str	r3, [r6, #0]
 800db72:	e0b0      	b.n	800dcd6 <__sfvwrite_r+0x27e>
 800db74:	9b00      	ldr	r3, [sp, #0]
 800db76:	6125      	str	r5, [r4, #16]
 800db78:	441d      	add	r5, r3
 800db7a:	ebc3 030a 	rsb	r3, r3, sl
 800db7e:	6025      	str	r5, [r4, #0]
 800db80:	f8c4 a014 	str.w	sl, [r4, #20]
 800db84:	463d      	mov	r5, r7
 800db86:	60a3      	str	r3, [r4, #8]
 800db88:	42af      	cmp	r7, r5
 800db8a:	d200      	bcs.n	800db8e <__sfvwrite_r+0x136>
 800db8c:	463d      	mov	r5, r7
 800db8e:	462a      	mov	r2, r5
 800db90:	4649      	mov	r1, r9
 800db92:	6820      	ldr	r0, [r4, #0]
 800db94:	f000 fb66 	bl	800e264 <memmove>
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	1b5b      	subs	r3, r3, r5
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	441d      	add	r5, r3
 800dba2:	6025      	str	r5, [r4, #0]
 800dba4:	463d      	mov	r5, r7
 800dba6:	e029      	b.n	800dbfc <__sfvwrite_r+0x1a4>
 800dba8:	6820      	ldr	r0, [r4, #0]
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	4298      	cmp	r0, r3
 800dbae:	d802      	bhi.n	800dbb6 <__sfvwrite_r+0x15e>
 800dbb0:	6962      	ldr	r2, [r4, #20]
 800dbb2:	4297      	cmp	r7, r2
 800dbb4:	d213      	bcs.n	800dbde <__sfvwrite_r+0x186>
 800dbb6:	42bd      	cmp	r5, r7
 800dbb8:	bf28      	it	cs
 800dbba:	463d      	movcs	r5, r7
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	f000 fb50 	bl	800e264 <memmove>
 800dbc4:	68a3      	ldr	r3, [r4, #8]
 800dbc6:	6822      	ldr	r2, [r4, #0]
 800dbc8:	1b5b      	subs	r3, r3, r5
 800dbca:	442a      	add	r2, r5
 800dbcc:	60a3      	str	r3, [r4, #8]
 800dbce:	6022      	str	r2, [r4, #0]
 800dbd0:	b9a3      	cbnz	r3, 800dbfc <__sfvwrite_r+0x1a4>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff fd4f 	bl	800d678 <_fflush_r>
 800dbda:	b178      	cbz	r0, 800dbfc <__sfvwrite_r+0x1a4>
 800dbdc:	e07b      	b.n	800dcd6 <__sfvwrite_r+0x27e>
 800dbde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dbe2:	42bb      	cmp	r3, r7
 800dbe4:	bf28      	it	cs
 800dbe6:	463b      	movcs	r3, r7
 800dbe8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800dbea:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbee:	6a21      	ldr	r1, [r4, #32]
 800dbf0:	4353      	muls	r3, r2
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	464a      	mov	r2, r9
 800dbf6:	47a8      	blx	r5
 800dbf8:	1e05      	subs	r5, r0, #0
 800dbfa:	dd6c      	ble.n	800dcd6 <__sfvwrite_r+0x27e>
 800dbfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc00:	44a9      	add	r9, r5
 800dc02:	1b7f      	subs	r7, r7, r5
 800dc04:	1b5d      	subs	r5, r3, r5
 800dc06:	f8c8 5008 	str.w	r5, [r8, #8]
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	f47f af6d 	bne.w	800daea <__sfvwrite_r+0x92>
 800dc10:	e729      	b.n	800da66 <__sfvwrite_r+0xe>
 800dc12:	9b00      	ldr	r3, [sp, #0]
 800dc14:	b383      	cbz	r3, 800dc78 <__sfvwrite_r+0x220>
 800dc16:	6820      	ldr	r0, [r4, #0]
 800dc18:	6921      	ldr	r1, [r4, #16]
 800dc1a:	6962      	ldr	r2, [r4, #20]
 800dc1c:	4555      	cmp	r5, sl
 800dc1e:	462b      	mov	r3, r5
 800dc20:	bf28      	it	cs
 800dc22:	4653      	movcs	r3, sl
 800dc24:	4288      	cmp	r0, r1
 800dc26:	d936      	bls.n	800dc96 <__sfvwrite_r+0x23e>
 800dc28:	68a7      	ldr	r7, [r4, #8]
 800dc2a:	4417      	add	r7, r2
 800dc2c:	42bb      	cmp	r3, r7
 800dc2e:	dd32      	ble.n	800dc96 <__sfvwrite_r+0x23e>
 800dc30:	4649      	mov	r1, r9
 800dc32:	463a      	mov	r2, r7
 800dc34:	f000 fb16 	bl	800e264 <memmove>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	443b      	add	r3, r7
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	4621      	mov	r1, r4
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7ff fd19 	bl	800d678 <_fflush_r>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d145      	bne.n	800dcd6 <__sfvwrite_r+0x27e>
 800dc4a:	1bed      	subs	r5, r5, r7
 800dc4c:	d03c      	beq.n	800dcc8 <__sfvwrite_r+0x270>
 800dc4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc52:	44b9      	add	r9, r7
 800dc54:	ebc7 0a0a 	rsb	sl, r7, sl
 800dc58:	1bdf      	subs	r7, r3, r7
 800dc5a:	f8c8 7008 	str.w	r7, [r8, #8]
 800dc5e:	2f00      	cmp	r7, #0
 800dc60:	f43f af01 	beq.w	800da66 <__sfvwrite_r+0xe>
 800dc64:	f1ba 0f00 	cmp.w	sl, #0
 800dc68:	d1d3      	bne.n	800dc12 <__sfvwrite_r+0x1ba>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e89b 0600 	ldmia.w	fp, {r9, sl}
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	f10b 0b08 	add.w	fp, fp, #8
 800dc76:	e7f5      	b.n	800dc64 <__sfvwrite_r+0x20c>
 800dc78:	4652      	mov	r2, sl
 800dc7a:	210a      	movs	r1, #10
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	f7f2 facf 	bl	8000220 <memchr>
 800dc82:	b118      	cbz	r0, 800dc8c <__sfvwrite_r+0x234>
 800dc84:	3001      	adds	r0, #1
 800dc86:	ebc9 0500 	rsb	r5, r9, r0
 800dc8a:	e001      	b.n	800dc90 <__sfvwrite_r+0x238>
 800dc8c:	f10a 0501 	add.w	r5, sl, #1
 800dc90:	2301      	movs	r3, #1
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	e7bf      	b.n	800dc16 <__sfvwrite_r+0x1be>
 800dc96:	4293      	cmp	r3, r2
 800dc98:	db08      	blt.n	800dcac <__sfvwrite_r+0x254>
 800dc9a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800dc9c:	6a21      	ldr	r1, [r4, #32]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	4630      	mov	r0, r6
 800dca2:	464a      	mov	r2, r9
 800dca4:	47b8      	blx	r7
 800dca6:	1e07      	subs	r7, r0, #0
 800dca8:	dccf      	bgt.n	800dc4a <__sfvwrite_r+0x1f2>
 800dcaa:	e014      	b.n	800dcd6 <__sfvwrite_r+0x27e>
 800dcac:	461a      	mov	r2, r3
 800dcae:	4649      	mov	r1, r9
 800dcb0:	9301      	str	r3, [sp, #4]
 800dcb2:	f000 fad7 	bl	800e264 <memmove>
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	68a2      	ldr	r2, [r4, #8]
 800dcba:	1ad2      	subs	r2, r2, r3
 800dcbc:	60a2      	str	r2, [r4, #8]
 800dcbe:	6822      	ldr	r2, [r4, #0]
 800dcc0:	441a      	add	r2, r3
 800dcc2:	6022      	str	r2, [r4, #0]
 800dcc4:	461f      	mov	r7, r3
 800dcc6:	e7c0      	b.n	800dc4a <__sfvwrite_r+0x1f2>
 800dcc8:	4621      	mov	r1, r4
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7ff fcd4 	bl	800d678 <_fflush_r>
 800dcd0:	b908      	cbnz	r0, 800dcd6 <__sfvwrite_r+0x27e>
 800dcd2:	9500      	str	r5, [sp, #0]
 800dcd4:	e7bb      	b.n	800dc4e <__sfvwrite_r+0x1f6>
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	f04f 30ff 	mov.w	r0, #4294967295
 800dce2:	b003      	add	sp, #12
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	7ffffc00 	.word	0x7ffffc00

0800dcec <_fwalk_reent>:
 800dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf0:	4680      	mov	r8, r0
 800dcf2:	4689      	mov	r9, r1
 800dcf4:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800dcf8:	2600      	movs	r6, #0
 800dcfa:	b194      	cbz	r4, 800dd22 <_fwalk_reent+0x36>
 800dcfc:	68a5      	ldr	r5, [r4, #8]
 800dcfe:	6867      	ldr	r7, [r4, #4]
 800dd00:	3f01      	subs	r7, #1
 800dd02:	d40c      	bmi.n	800dd1e <_fwalk_reent+0x32>
 800dd04:	89ab      	ldrh	r3, [r5, #12]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d907      	bls.n	800dd1a <_fwalk_reent+0x2e>
 800dd0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	d003      	beq.n	800dd1a <_fwalk_reent+0x2e>
 800dd12:	4629      	mov	r1, r5
 800dd14:	4640      	mov	r0, r8
 800dd16:	47c8      	blx	r9
 800dd18:	4306      	orrs	r6, r0
 800dd1a:	3568      	adds	r5, #104	; 0x68
 800dd1c:	e7f0      	b.n	800dd00 <_fwalk_reent+0x14>
 800dd1e:	6824      	ldr	r4, [r4, #0]
 800dd20:	e7eb      	b.n	800dcfa <_fwalk_reent+0xe>
 800dd22:	4630      	mov	r0, r6
 800dd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dd28 <__locale_charset>:
 800dd28:	4800      	ldr	r0, [pc, #0]	; (800dd2c <__locale_charset+0x4>)
 800dd2a:	4770      	bx	lr
 800dd2c:	20010160 	.word	0x20010160

0800dd30 <__locale_mb_cur_max>:
 800dd30:	4b01      	ldr	r3, [pc, #4]	; (800dd38 <__locale_mb_cur_max+0x8>)
 800dd32:	6818      	ldr	r0, [r3, #0]
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	20010180 	.word	0x20010180

0800dd3c <_localeconv_r>:
 800dd3c:	4800      	ldr	r0, [pc, #0]	; (800dd40 <_localeconv_r+0x4>)
 800dd3e:	4770      	bx	lr
 800dd40:	20010128 	.word	0x20010128

0800dd44 <__swhatbuf_r>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	460e      	mov	r6, r1
 800dd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	b090      	sub	sp, #64	; 0x40
 800dd50:	4614      	mov	r4, r2
 800dd52:	461d      	mov	r5, r3
 800dd54:	da0a      	bge.n	800dd6c <__swhatbuf_r+0x28>
 800dd56:	89b3      	ldrh	r3, [r6, #12]
 800dd58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	b298      	uxth	r0, r3
 800dd60:	602a      	str	r2, [r5, #0]
 800dd62:	b1b0      	cbz	r0, 800dd92 <__swhatbuf_r+0x4e>
 800dd64:	2340      	movs	r3, #64	; 0x40
 800dd66:	6023      	str	r3, [r4, #0]
 800dd68:	4610      	mov	r0, r2
 800dd6a:	e015      	b.n	800dd98 <__swhatbuf_r+0x54>
 800dd6c:	aa01      	add	r2, sp, #4
 800dd6e:	f001 f90b 	bl	800ef88 <_fstat_r>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	dbef      	blt.n	800dd56 <__swhatbuf_r+0x12>
 800dd76:	9a02      	ldr	r2, [sp, #8]
 800dd78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dd7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dd80:	425a      	negs	r2, r3
 800dd82:	415a      	adcs	r2, r3
 800dd84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd88:	602a      	str	r2, [r5, #0]
 800dd8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dd8e:	6023      	str	r3, [r4, #0]
 800dd90:	e002      	b.n	800dd98 <__swhatbuf_r+0x54>
 800dd92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	b010      	add	sp, #64	; 0x40
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}

0800dd9c <__smakebuf_r>:
 800dd9c:	898b      	ldrh	r3, [r1, #12]
 800dd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dda0:	079e      	lsls	r6, r3, #30
 800dda2:	4605      	mov	r5, r0
 800dda4:	460c      	mov	r4, r1
 800dda6:	d410      	bmi.n	800ddca <__smakebuf_r+0x2e>
 800dda8:	ab01      	add	r3, sp, #4
 800ddaa:	466a      	mov	r2, sp
 800ddac:	f7ff ffca 	bl	800dd44 <__swhatbuf_r>
 800ddb0:	9900      	ldr	r1, [sp, #0]
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f000 f835 	bl	800de24 <_malloc_r>
 800ddba:	b968      	cbnz	r0, 800ddd8 <__smakebuf_r+0x3c>
 800ddbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc0:	059a      	lsls	r2, r3, #22
 800ddc2:	d422      	bmi.n	800de0a <__smakebuf_r+0x6e>
 800ddc4:	f043 0302 	orr.w	r3, r3, #2
 800ddc8:	81a3      	strh	r3, [r4, #12]
 800ddca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddce:	6023      	str	r3, [r4, #0]
 800ddd0:	6123      	str	r3, [r4, #16]
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	6163      	str	r3, [r4, #20]
 800ddd6:	e018      	b.n	800de0a <__smakebuf_r+0x6e>
 800ddd8:	4b0d      	ldr	r3, [pc, #52]	; (800de10 <__smakebuf_r+0x74>)
 800ddda:	62ab      	str	r3, [r5, #40]	; 0x28
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	6020      	str	r0, [r4, #0]
 800dde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dde4:	81a3      	strh	r3, [r4, #12]
 800dde6:	9b00      	ldr	r3, [sp, #0]
 800dde8:	6163      	str	r3, [r4, #20]
 800ddea:	9b01      	ldr	r3, [sp, #4]
 800ddec:	6120      	str	r0, [r4, #16]
 800ddee:	b14b      	cbz	r3, 800de04 <__smakebuf_r+0x68>
 800ddf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	f001 f8d9 	bl	800efac <_isatty_r>
 800ddfa:	b118      	cbz	r0, 800de04 <__smakebuf_r+0x68>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	f043 0301 	orr.w	r3, r3, #1
 800de02:	81a3      	strh	r3, [r4, #12]
 800de04:	89a0      	ldrh	r0, [r4, #12]
 800de06:	4330      	orrs	r0, r6
 800de08:	81a0      	strh	r0, [r4, #12]
 800de0a:	b002      	add	sp, #8
 800de0c:	bd70      	pop	{r4, r5, r6, pc}
 800de0e:	bf00      	nop
 800de10:	0800d6cd 	.word	0x0800d6cd

0800de14 <malloc>:
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <malloc+0xc>)
 800de16:	4601      	mov	r1, r0
 800de18:	6818      	ldr	r0, [r3, #0]
 800de1a:	f000 b803 	b.w	800de24 <_malloc_r>
 800de1e:	bf00      	nop
 800de20:	20010120 	.word	0x20010120

0800de24 <_malloc_r>:
 800de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	f101 040b 	add.w	r4, r1, #11
 800de2c:	2c16      	cmp	r4, #22
 800de2e:	b085      	sub	sp, #20
 800de30:	4681      	mov	r9, r0
 800de32:	d903      	bls.n	800de3c <_malloc_r+0x18>
 800de34:	f034 0407 	bics.w	r4, r4, #7
 800de38:	d501      	bpl.n	800de3e <_malloc_r+0x1a>
 800de3a:	e002      	b.n	800de42 <_malloc_r+0x1e>
 800de3c:	2410      	movs	r4, #16
 800de3e:	428c      	cmp	r4, r1
 800de40:	d203      	bcs.n	800de4a <_malloc_r+0x26>
 800de42:	230c      	movs	r3, #12
 800de44:	f8c9 3000 	str.w	r3, [r9]
 800de48:	e1ea      	b.n	800e220 <_malloc_r+0x3fc>
 800de4a:	4648      	mov	r0, r9
 800de4c:	f000 fa25 	bl	800e29a <__malloc_lock>
 800de50:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800de54:	4d9e      	ldr	r5, [pc, #632]	; (800e0d0 <_malloc_r+0x2ac>)
 800de56:	d217      	bcs.n	800de88 <_malloc_r+0x64>
 800de58:	f104 0208 	add.w	r2, r4, #8
 800de5c:	442a      	add	r2, r5
 800de5e:	f1a2 0108 	sub.w	r1, r2, #8
 800de62:	6856      	ldr	r6, [r2, #4]
 800de64:	428e      	cmp	r6, r1
 800de66:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800de6a:	d102      	bne.n	800de72 <_malloc_r+0x4e>
 800de6c:	68d6      	ldr	r6, [r2, #12]
 800de6e:	42b2      	cmp	r2, r6
 800de70:	d008      	beq.n	800de84 <_malloc_r+0x60>
 800de72:	6873      	ldr	r3, [r6, #4]
 800de74:	68f2      	ldr	r2, [r6, #12]
 800de76:	68b1      	ldr	r1, [r6, #8]
 800de78:	f023 0303 	bic.w	r3, r3, #3
 800de7c:	60ca      	str	r2, [r1, #12]
 800de7e:	4433      	add	r3, r6
 800de80:	6091      	str	r1, [r2, #8]
 800de82:	e02f      	b.n	800dee4 <_malloc_r+0xc0>
 800de84:	3302      	adds	r3, #2
 800de86:	e03d      	b.n	800df04 <_malloc_r+0xe0>
 800de88:	0a63      	lsrs	r3, r4, #9
 800de8a:	d01a      	beq.n	800dec2 <_malloc_r+0x9e>
 800de8c:	2b04      	cmp	r3, #4
 800de8e:	d802      	bhi.n	800de96 <_malloc_r+0x72>
 800de90:	09a3      	lsrs	r3, r4, #6
 800de92:	3338      	adds	r3, #56	; 0x38
 800de94:	e018      	b.n	800dec8 <_malloc_r+0xa4>
 800de96:	2b14      	cmp	r3, #20
 800de98:	d801      	bhi.n	800de9e <_malloc_r+0x7a>
 800de9a:	335b      	adds	r3, #91	; 0x5b
 800de9c:	e014      	b.n	800dec8 <_malloc_r+0xa4>
 800de9e:	2b54      	cmp	r3, #84	; 0x54
 800dea0:	d802      	bhi.n	800dea8 <_malloc_r+0x84>
 800dea2:	0b23      	lsrs	r3, r4, #12
 800dea4:	336e      	adds	r3, #110	; 0x6e
 800dea6:	e00f      	b.n	800dec8 <_malloc_r+0xa4>
 800dea8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800deac:	d802      	bhi.n	800deb4 <_malloc_r+0x90>
 800deae:	0be3      	lsrs	r3, r4, #15
 800deb0:	3377      	adds	r3, #119	; 0x77
 800deb2:	e009      	b.n	800dec8 <_malloc_r+0xa4>
 800deb4:	f240 5254 	movw	r2, #1364	; 0x554
 800deb8:	4293      	cmp	r3, r2
 800deba:	d804      	bhi.n	800dec6 <_malloc_r+0xa2>
 800debc:	0ca3      	lsrs	r3, r4, #18
 800debe:	337c      	adds	r3, #124	; 0x7c
 800dec0:	e002      	b.n	800dec8 <_malloc_r+0xa4>
 800dec2:	233f      	movs	r3, #63	; 0x3f
 800dec4:	e000      	b.n	800dec8 <_malloc_r+0xa4>
 800dec6:	237e      	movs	r3, #126	; 0x7e
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800dece:	f1a2 0008 	sub.w	r0, r2, #8
 800ded2:	6856      	ldr	r6, [r2, #4]
 800ded4:	e00c      	b.n	800def0 <_malloc_r+0xcc>
 800ded6:	2900      	cmp	r1, #0
 800ded8:	68f1      	ldr	r1, [r6, #12]
 800deda:	db08      	blt.n	800deee <_malloc_r+0xca>
 800dedc:	68b3      	ldr	r3, [r6, #8]
 800dede:	60d9      	str	r1, [r3, #12]
 800dee0:	608b      	str	r3, [r1, #8]
 800dee2:	18b3      	adds	r3, r6, r2
 800dee4:	685a      	ldr	r2, [r3, #4]
 800dee6:	f042 0201 	orr.w	r2, r2, #1
 800deea:	605a      	str	r2, [r3, #4]
 800deec:	e1a3      	b.n	800e236 <_malloc_r+0x412>
 800deee:	460e      	mov	r6, r1
 800def0:	4286      	cmp	r6, r0
 800def2:	d006      	beq.n	800df02 <_malloc_r+0xde>
 800def4:	6872      	ldr	r2, [r6, #4]
 800def6:	f022 0203 	bic.w	r2, r2, #3
 800defa:	1b11      	subs	r1, r2, r4
 800defc:	290f      	cmp	r1, #15
 800defe:	ddea      	ble.n	800ded6 <_malloc_r+0xb2>
 800df00:	3b01      	subs	r3, #1
 800df02:	3301      	adds	r3, #1
 800df04:	4a72      	ldr	r2, [pc, #456]	; (800e0d0 <_malloc_r+0x2ac>)
 800df06:	692e      	ldr	r6, [r5, #16]
 800df08:	f102 0708 	add.w	r7, r2, #8
 800df0c:	42be      	cmp	r6, r7
 800df0e:	4639      	mov	r1, r7
 800df10:	d079      	beq.n	800e006 <_malloc_r+0x1e2>
 800df12:	6870      	ldr	r0, [r6, #4]
 800df14:	f020 0003 	bic.w	r0, r0, #3
 800df18:	ebc4 0e00 	rsb	lr, r4, r0
 800df1c:	f1be 0f0f 	cmp.w	lr, #15
 800df20:	dd0d      	ble.n	800df3e <_malloc_r+0x11a>
 800df22:	1933      	adds	r3, r6, r4
 800df24:	f044 0401 	orr.w	r4, r4, #1
 800df28:	6074      	str	r4, [r6, #4]
 800df2a:	6153      	str	r3, [r2, #20]
 800df2c:	6113      	str	r3, [r2, #16]
 800df2e:	f04e 0201 	orr.w	r2, lr, #1
 800df32:	60df      	str	r7, [r3, #12]
 800df34:	609f      	str	r7, [r3, #8]
 800df36:	605a      	str	r2, [r3, #4]
 800df38:	f843 e00e 	str.w	lr, [r3, lr]
 800df3c:	e17b      	b.n	800e236 <_malloc_r+0x412>
 800df3e:	f1be 0f00 	cmp.w	lr, #0
 800df42:	6157      	str	r7, [r2, #20]
 800df44:	6117      	str	r7, [r2, #16]
 800df46:	db05      	blt.n	800df54 <_malloc_r+0x130>
 800df48:	4430      	add	r0, r6
 800df4a:	6843      	ldr	r3, [r0, #4]
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	6043      	str	r3, [r0, #4]
 800df52:	e170      	b.n	800e236 <_malloc_r+0x412>
 800df54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800df58:	d215      	bcs.n	800df86 <_malloc_r+0x162>
 800df5a:	08c0      	lsrs	r0, r0, #3
 800df5c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800df60:	2701      	movs	r7, #1
 800df62:	fa07 fe0e 	lsl.w	lr, r7, lr
 800df66:	6857      	ldr	r7, [r2, #4]
 800df68:	3001      	adds	r0, #1
 800df6a:	ea4e 0707 	orr.w	r7, lr, r7
 800df6e:	6057      	str	r7, [r2, #4]
 800df70:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 800df74:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800df78:	f8c6 e008 	str.w	lr, [r6, #8]
 800df7c:	3f08      	subs	r7, #8
 800df7e:	60f7      	str	r7, [r6, #12]
 800df80:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 800df84:	e03d      	b.n	800e002 <_malloc_r+0x1de>
 800df86:	0a42      	lsrs	r2, r0, #9
 800df88:	2a04      	cmp	r2, #4
 800df8a:	d802      	bhi.n	800df92 <_malloc_r+0x16e>
 800df8c:	0982      	lsrs	r2, r0, #6
 800df8e:	3238      	adds	r2, #56	; 0x38
 800df90:	e015      	b.n	800dfbe <_malloc_r+0x19a>
 800df92:	2a14      	cmp	r2, #20
 800df94:	d801      	bhi.n	800df9a <_malloc_r+0x176>
 800df96:	325b      	adds	r2, #91	; 0x5b
 800df98:	e011      	b.n	800dfbe <_malloc_r+0x19a>
 800df9a:	2a54      	cmp	r2, #84	; 0x54
 800df9c:	d802      	bhi.n	800dfa4 <_malloc_r+0x180>
 800df9e:	0b02      	lsrs	r2, r0, #12
 800dfa0:	326e      	adds	r2, #110	; 0x6e
 800dfa2:	e00c      	b.n	800dfbe <_malloc_r+0x19a>
 800dfa4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800dfa8:	d802      	bhi.n	800dfb0 <_malloc_r+0x18c>
 800dfaa:	0bc2      	lsrs	r2, r0, #15
 800dfac:	3277      	adds	r2, #119	; 0x77
 800dfae:	e006      	b.n	800dfbe <_malloc_r+0x19a>
 800dfb0:	f240 5754 	movw	r7, #1364	; 0x554
 800dfb4:	42ba      	cmp	r2, r7
 800dfb6:	bf9a      	itte	ls
 800dfb8:	0c82      	lsrls	r2, r0, #18
 800dfba:	327c      	addls	r2, #124	; 0x7c
 800dfbc:	227e      	movhi	r2, #126	; 0x7e
 800dfbe:	1c57      	adds	r7, r2, #1
 800dfc0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800dfc4:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800dfc8:	f8df c104 	ldr.w	ip, [pc, #260]	; 800e0d0 <_malloc_r+0x2ac>
 800dfcc:	45be      	cmp	lr, r7
 800dfce:	d10d      	bne.n	800dfec <_malloc_r+0x1c8>
 800dfd0:	2001      	movs	r0, #1
 800dfd2:	1092      	asrs	r2, r2, #2
 800dfd4:	fa00 f202 	lsl.w	r2, r0, r2
 800dfd8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800dfdc:	4310      	orrs	r0, r2
 800dfde:	f8cc 0004 	str.w	r0, [ip, #4]
 800dfe2:	4672      	mov	r2, lr
 800dfe4:	e009      	b.n	800dffa <_malloc_r+0x1d6>
 800dfe6:	68bf      	ldr	r7, [r7, #8]
 800dfe8:	45be      	cmp	lr, r7
 800dfea:	d004      	beq.n	800dff6 <_malloc_r+0x1d2>
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	f022 0203 	bic.w	r2, r2, #3
 800dff2:	4290      	cmp	r0, r2
 800dff4:	d3f7      	bcc.n	800dfe6 <_malloc_r+0x1c2>
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	46be      	mov	lr, r7
 800dffa:	60f2      	str	r2, [r6, #12]
 800dffc:	f8c6 e008 	str.w	lr, [r6, #8]
 800e000:	6096      	str	r6, [r2, #8]
 800e002:	f8ce 600c 	str.w	r6, [lr, #12]
 800e006:	2001      	movs	r0, #1
 800e008:	109a      	asrs	r2, r3, #2
 800e00a:	fa00 f202 	lsl.w	r2, r0, r2
 800e00e:	6868      	ldr	r0, [r5, #4]
 800e010:	4282      	cmp	r2, r0
 800e012:	d85f      	bhi.n	800e0d4 <_malloc_r+0x2b0>
 800e014:	4202      	tst	r2, r0
 800e016:	d106      	bne.n	800e026 <_malloc_r+0x202>
 800e018:	f023 0303 	bic.w	r3, r3, #3
 800e01c:	0052      	lsls	r2, r2, #1
 800e01e:	4202      	tst	r2, r0
 800e020:	f103 0304 	add.w	r3, r3, #4
 800e024:	d0fa      	beq.n	800e01c <_malloc_r+0x1f8>
 800e026:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800e02a:	46c2      	mov	sl, r8
 800e02c:	469c      	mov	ip, r3
 800e02e:	f8da 600c 	ldr.w	r6, [sl, #12]
 800e032:	4556      	cmp	r6, sl
 800e034:	d02c      	beq.n	800e090 <_malloc_r+0x26c>
 800e036:	6870      	ldr	r0, [r6, #4]
 800e038:	68f7      	ldr	r7, [r6, #12]
 800e03a:	f020 0003 	bic.w	r0, r0, #3
 800e03e:	ebc4 0e00 	rsb	lr, r4, r0
 800e042:	f1be 0f0f 	cmp.w	lr, #15
 800e046:	dd11      	ble.n	800e06c <_malloc_r+0x248>
 800e048:	1933      	adds	r3, r6, r4
 800e04a:	f044 0401 	orr.w	r4, r4, #1
 800e04e:	6074      	str	r4, [r6, #4]
 800e050:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800e054:	60d7      	str	r7, [r2, #12]
 800e056:	60ba      	str	r2, [r7, #8]
 800e058:	f04e 0201 	orr.w	r2, lr, #1
 800e05c:	616b      	str	r3, [r5, #20]
 800e05e:	612b      	str	r3, [r5, #16]
 800e060:	60d9      	str	r1, [r3, #12]
 800e062:	6099      	str	r1, [r3, #8]
 800e064:	605a      	str	r2, [r3, #4]
 800e066:	f843 e00e 	str.w	lr, [r3, lr]
 800e06a:	e00b      	b.n	800e084 <_malloc_r+0x260>
 800e06c:	f1be 0f00 	cmp.w	lr, #0
 800e070:	db0c      	blt.n	800e08c <_malloc_r+0x268>
 800e072:	1833      	adds	r3, r6, r0
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	f042 0201 	orr.w	r2, r2, #1
 800e07a:	605a      	str	r2, [r3, #4]
 800e07c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800e080:	60df      	str	r7, [r3, #12]
 800e082:	60bb      	str	r3, [r7, #8]
 800e084:	4648      	mov	r0, r9
 800e086:	f000 f909 	bl	800e29c <__malloc_unlock>
 800e08a:	e0d8      	b.n	800e23e <_malloc_r+0x41a>
 800e08c:	463e      	mov	r6, r7
 800e08e:	e7d0      	b.n	800e032 <_malloc_r+0x20e>
 800e090:	f10c 0c01 	add.w	ip, ip, #1
 800e094:	f01c 0f03 	tst.w	ip, #3
 800e098:	f10a 0a08 	add.w	sl, sl, #8
 800e09c:	d1c7      	bne.n	800e02e <_malloc_r+0x20a>
 800e09e:	0798      	lsls	r0, r3, #30
 800e0a0:	d104      	bne.n	800e0ac <_malloc_r+0x288>
 800e0a2:	686b      	ldr	r3, [r5, #4]
 800e0a4:	ea23 0302 	bic.w	r3, r3, r2
 800e0a8:	606b      	str	r3, [r5, #4]
 800e0aa:	e005      	b.n	800e0b8 <_malloc_r+0x294>
 800e0ac:	f858 0908 	ldr.w	r0, [r8], #-8
 800e0b0:	4580      	cmp	r8, r0
 800e0b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0b6:	d0f2      	beq.n	800e09e <_malloc_r+0x27a>
 800e0b8:	6868      	ldr	r0, [r5, #4]
 800e0ba:	0052      	lsls	r2, r2, #1
 800e0bc:	4282      	cmp	r2, r0
 800e0be:	d809      	bhi.n	800e0d4 <_malloc_r+0x2b0>
 800e0c0:	b142      	cbz	r2, 800e0d4 <_malloc_r+0x2b0>
 800e0c2:	4663      	mov	r3, ip
 800e0c4:	4202      	tst	r2, r0
 800e0c6:	d1ae      	bne.n	800e026 <_malloc_r+0x202>
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	0052      	lsls	r2, r2, #1
 800e0cc:	e7fa      	b.n	800e0c4 <_malloc_r+0x2a0>
 800e0ce:	bf00      	nop
 800e0d0:	20010184 	.word	0x20010184
 800e0d4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800e0d8:	f8db 6004 	ldr.w	r6, [fp, #4]
 800e0dc:	f026 0603 	bic.w	r6, r6, #3
 800e0e0:	42b4      	cmp	r4, r6
 800e0e2:	d803      	bhi.n	800e0ec <_malloc_r+0x2c8>
 800e0e4:	1b33      	subs	r3, r6, r4
 800e0e6:	2b0f      	cmp	r3, #15
 800e0e8:	f300 809c 	bgt.w	800e224 <_malloc_r+0x400>
 800e0ec:	4a56      	ldr	r2, [pc, #344]	; (800e248 <_malloc_r+0x424>)
 800e0ee:	4957      	ldr	r1, [pc, #348]	; (800e24c <_malloc_r+0x428>)
 800e0f0:	6812      	ldr	r2, [r2, #0]
 800e0f2:	6808      	ldr	r0, [r1, #0]
 800e0f4:	9101      	str	r1, [sp, #4]
 800e0f6:	f102 0810 	add.w	r8, r2, #16
 800e0fa:	4a55      	ldr	r2, [pc, #340]	; (800e250 <_malloc_r+0x42c>)
 800e0fc:	9203      	str	r2, [sp, #12]
 800e0fe:	3001      	adds	r0, #1
 800e100:	bf18      	it	ne
 800e102:	f102 31ff 	addne.w	r1, r2, #4294967295
 800e106:	44a0      	add	r8, r4
 800e108:	bf1e      	ittt	ne
 800e10a:	4488      	addne	r8, r1
 800e10c:	4251      	negne	r1, r2
 800e10e:	ea01 0808 	andne.w	r8, r1, r8
 800e112:	eb0b 0306 	add.w	r3, fp, r6
 800e116:	4641      	mov	r1, r8
 800e118:	4648      	mov	r0, r9
 800e11a:	9302      	str	r3, [sp, #8]
 800e11c:	f000 fd3e 	bl	800eb9c <_sbrk_r>
 800e120:	1c42      	adds	r2, r0, #1
 800e122:	4607      	mov	r7, r0
 800e124:	d06f      	beq.n	800e206 <_malloc_r+0x3e2>
 800e126:	9b02      	ldr	r3, [sp, #8]
 800e128:	9a03      	ldr	r2, [sp, #12]
 800e12a:	4283      	cmp	r3, r0
 800e12c:	d901      	bls.n	800e132 <_malloc_r+0x30e>
 800e12e:	45ab      	cmp	fp, r5
 800e130:	d169      	bne.n	800e206 <_malloc_r+0x3e2>
 800e132:	f8df a128 	ldr.w	sl, [pc, #296]	; 800e25c <_malloc_r+0x438>
 800e136:	f8df c128 	ldr.w	ip, [pc, #296]	; 800e260 <_malloc_r+0x43c>
 800e13a:	f8da 0000 	ldr.w	r0, [sl]
 800e13e:	42bb      	cmp	r3, r7
 800e140:	4440      	add	r0, r8
 800e142:	f8ca 0000 	str.w	r0, [sl]
 800e146:	d108      	bne.n	800e15a <_malloc_r+0x336>
 800e148:	ea13 0f0c 	tst.w	r3, ip
 800e14c:	d105      	bne.n	800e15a <_malloc_r+0x336>
 800e14e:	68ab      	ldr	r3, [r5, #8]
 800e150:	4446      	add	r6, r8
 800e152:	f046 0601 	orr.w	r6, r6, #1
 800e156:	605e      	str	r6, [r3, #4]
 800e158:	e049      	b.n	800e1ee <_malloc_r+0x3ca>
 800e15a:	9901      	ldr	r1, [sp, #4]
 800e15c:	f8d1 e000 	ldr.w	lr, [r1]
 800e160:	f1be 3fff 	cmp.w	lr, #4294967295
 800e164:	bf15      	itete	ne
 800e166:	1afb      	subne	r3, r7, r3
 800e168:	4b38      	ldreq	r3, [pc, #224]	; (800e24c <_malloc_r+0x428>)
 800e16a:	181b      	addne	r3, r3, r0
 800e16c:	601f      	streq	r7, [r3, #0]
 800e16e:	bf18      	it	ne
 800e170:	f8ca 3000 	strne.w	r3, [sl]
 800e174:	f017 0307 	ands.w	r3, r7, #7
 800e178:	bf1c      	itt	ne
 800e17a:	f1c3 0308 	rsbne	r3, r3, #8
 800e17e:	18ff      	addne	r7, r7, r3
 800e180:	44b8      	add	r8, r7
 800e182:	441a      	add	r2, r3
 800e184:	ea08 080c 	and.w	r8, r8, ip
 800e188:	ebc8 0802 	rsb	r8, r8, r2
 800e18c:	4641      	mov	r1, r8
 800e18e:	4648      	mov	r0, r9
 800e190:	f000 fd04 	bl	800eb9c <_sbrk_r>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	bf04      	itt	eq
 800e198:	4638      	moveq	r0, r7
 800e19a:	f04f 0800 	moveq.w	r8, #0
 800e19e:	f8da 3000 	ldr.w	r3, [sl]
 800e1a2:	60af      	str	r7, [r5, #8]
 800e1a4:	1bc2      	subs	r2, r0, r7
 800e1a6:	4442      	add	r2, r8
 800e1a8:	4443      	add	r3, r8
 800e1aa:	f042 0201 	orr.w	r2, r2, #1
 800e1ae:	45ab      	cmp	fp, r5
 800e1b0:	f8ca 3000 	str.w	r3, [sl]
 800e1b4:	607a      	str	r2, [r7, #4]
 800e1b6:	d01a      	beq.n	800e1ee <_malloc_r+0x3ca>
 800e1b8:	2e0f      	cmp	r6, #15
 800e1ba:	d802      	bhi.n	800e1c2 <_malloc_r+0x39e>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	607b      	str	r3, [r7, #4]
 800e1c0:	e021      	b.n	800e206 <_malloc_r+0x3e2>
 800e1c2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e1c6:	3e0c      	subs	r6, #12
 800e1c8:	f026 0607 	bic.w	r6, r6, #7
 800e1cc:	f003 0301 	and.w	r3, r3, #1
 800e1d0:	4333      	orrs	r3, r6
 800e1d2:	f8cb 3004 	str.w	r3, [fp, #4]
 800e1d6:	eb0b 0306 	add.w	r3, fp, r6
 800e1da:	2205      	movs	r2, #5
 800e1dc:	2e0f      	cmp	r6, #15
 800e1de:	605a      	str	r2, [r3, #4]
 800e1e0:	609a      	str	r2, [r3, #8]
 800e1e2:	d904      	bls.n	800e1ee <_malloc_r+0x3ca>
 800e1e4:	f10b 0108 	add.w	r1, fp, #8
 800e1e8:	4648      	mov	r0, r9
 800e1ea:	f7ff fb77 	bl	800d8dc <_free_r>
 800e1ee:	4a19      	ldr	r2, [pc, #100]	; (800e254 <_malloc_r+0x430>)
 800e1f0:	f8da 3000 	ldr.w	r3, [sl]
 800e1f4:	6811      	ldr	r1, [r2, #0]
 800e1f6:	428b      	cmp	r3, r1
 800e1f8:	bf88      	it	hi
 800e1fa:	6013      	strhi	r3, [r2, #0]
 800e1fc:	4a16      	ldr	r2, [pc, #88]	; (800e258 <_malloc_r+0x434>)
 800e1fe:	6811      	ldr	r1, [r2, #0]
 800e200:	428b      	cmp	r3, r1
 800e202:	bf88      	it	hi
 800e204:	6013      	strhi	r3, [r2, #0]
 800e206:	68ab      	ldr	r3, [r5, #8]
 800e208:	685a      	ldr	r2, [r3, #4]
 800e20a:	f022 0203 	bic.w	r2, r2, #3
 800e20e:	4294      	cmp	r4, r2
 800e210:	eba2 0304 	sub.w	r3, r2, r4
 800e214:	d801      	bhi.n	800e21a <_malloc_r+0x3f6>
 800e216:	2b0f      	cmp	r3, #15
 800e218:	dc04      	bgt.n	800e224 <_malloc_r+0x400>
 800e21a:	4648      	mov	r0, r9
 800e21c:	f000 f83e 	bl	800e29c <__malloc_unlock>
 800e220:	2600      	movs	r6, #0
 800e222:	e00c      	b.n	800e23e <_malloc_r+0x41a>
 800e224:	68ae      	ldr	r6, [r5, #8]
 800e226:	f044 0201 	orr.w	r2, r4, #1
 800e22a:	4434      	add	r4, r6
 800e22c:	f043 0301 	orr.w	r3, r3, #1
 800e230:	6072      	str	r2, [r6, #4]
 800e232:	60ac      	str	r4, [r5, #8]
 800e234:	6063      	str	r3, [r4, #4]
 800e236:	4648      	mov	r0, r9
 800e238:	f000 f830 	bl	800e29c <__malloc_unlock>
 800e23c:	3608      	adds	r6, #8
 800e23e:	4630      	mov	r0, r6
 800e240:	b005      	add	sp, #20
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	bf00      	nop
 800e248:	20014628 	.word	0x20014628
 800e24c:	20010590 	.word	0x20010590
 800e250:	00000080 	.word	0x00000080
 800e254:	20014624 	.word	0x20014624
 800e258:	20014620 	.word	0x20014620
 800e25c:	2001462c 	.word	0x2001462c
 800e260:	0000007f 	.word	0x0000007f

0800e264 <memmove>:
 800e264:	4288      	cmp	r0, r1
 800e266:	b510      	push	{r4, lr}
 800e268:	eb01 0302 	add.w	r3, r1, r2
 800e26c:	d801      	bhi.n	800e272 <memmove+0xe>
 800e26e:	1e42      	subs	r2, r0, #1
 800e270:	e00b      	b.n	800e28a <memmove+0x26>
 800e272:	4298      	cmp	r0, r3
 800e274:	d2fb      	bcs.n	800e26e <memmove+0xa>
 800e276:	1881      	adds	r1, r0, r2
 800e278:	1ad2      	subs	r2, r2, r3
 800e27a:	42d3      	cmn	r3, r2
 800e27c:	d004      	beq.n	800e288 <memmove+0x24>
 800e27e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e282:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e286:	e7f8      	b.n	800e27a <memmove+0x16>
 800e288:	bd10      	pop	{r4, pc}
 800e28a:	4299      	cmp	r1, r3
 800e28c:	d004      	beq.n	800e298 <memmove+0x34>
 800e28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e292:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e296:	e7f8      	b.n	800e28a <memmove+0x26>
 800e298:	bd10      	pop	{r4, pc}

0800e29a <__malloc_lock>:
 800e29a:	4770      	bx	lr

0800e29c <__malloc_unlock>:
 800e29c:	4770      	bx	lr

0800e29e <_Balloc>:
 800e29e:	b570      	push	{r4, r5, r6, lr}
 800e2a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	460e      	mov	r6, r1
 800e2a6:	b93d      	cbnz	r5, 800e2b8 <_Balloc+0x1a>
 800e2a8:	2010      	movs	r0, #16
 800e2aa:	f7ff fdb3 	bl	800de14 <malloc>
 800e2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800e2b0:	6045      	str	r5, [r0, #4]
 800e2b2:	6085      	str	r5, [r0, #8]
 800e2b4:	6005      	str	r5, [r0, #0]
 800e2b6:	60c5      	str	r5, [r0, #12]
 800e2b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e2ba:	68eb      	ldr	r3, [r5, #12]
 800e2bc:	b143      	cbz	r3, 800e2d0 <_Balloc+0x32>
 800e2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e2c6:	b178      	cbz	r0, 800e2e8 <_Balloc+0x4a>
 800e2c8:	6802      	ldr	r2, [r0, #0]
 800e2ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e2ce:	e017      	b.n	800e300 <_Balloc+0x62>
 800e2d0:	2221      	movs	r2, #33	; 0x21
 800e2d2:	2104      	movs	r1, #4
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f000 fd77 	bl	800edc8 <_calloc_r>
 800e2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2dc:	60e8      	str	r0, [r5, #12]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1ec      	bne.n	800e2be <_Balloc+0x20>
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	fa01 f506 	lsl.w	r5, r1, r6
 800e2ee:	1d6a      	adds	r2, r5, #5
 800e2f0:	0092      	lsls	r2, r2, #2
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 fd68 	bl	800edc8 <_calloc_r>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d0f3      	beq.n	800e2e4 <_Balloc+0x46>
 800e2fc:	6046      	str	r6, [r0, #4]
 800e2fe:	6085      	str	r5, [r0, #8]
 800e300:	2300      	movs	r3, #0
 800e302:	6103      	str	r3, [r0, #16]
 800e304:	60c3      	str	r3, [r0, #12]
 800e306:	bd70      	pop	{r4, r5, r6, pc}

0800e308 <_Bfree>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e30c:	4606      	mov	r6, r0
 800e30e:	460d      	mov	r5, r1
 800e310:	b93c      	cbnz	r4, 800e322 <_Bfree+0x1a>
 800e312:	2010      	movs	r0, #16
 800e314:	f7ff fd7e 	bl	800de14 <malloc>
 800e318:	6270      	str	r0, [r6, #36]	; 0x24
 800e31a:	6044      	str	r4, [r0, #4]
 800e31c:	6084      	str	r4, [r0, #8]
 800e31e:	6004      	str	r4, [r0, #0]
 800e320:	60c4      	str	r4, [r0, #12]
 800e322:	b13d      	cbz	r5, 800e334 <_Bfree+0x2c>
 800e324:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e326:	686a      	ldr	r2, [r5, #4]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e32e:	6029      	str	r1, [r5, #0]
 800e330:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e334:	bd70      	pop	{r4, r5, r6, pc}

0800e336 <__multadd>:
 800e336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33a:	690d      	ldr	r5, [r1, #16]
 800e33c:	461f      	mov	r7, r3
 800e33e:	4606      	mov	r6, r0
 800e340:	460c      	mov	r4, r1
 800e342:	f101 0e14 	add.w	lr, r1, #20
 800e346:	2300      	movs	r3, #0
 800e348:	f8de 0000 	ldr.w	r0, [lr]
 800e34c:	b281      	uxth	r1, r0
 800e34e:	fb02 7101 	mla	r1, r2, r1, r7
 800e352:	0c0f      	lsrs	r7, r1, #16
 800e354:	0c00      	lsrs	r0, r0, #16
 800e356:	fb02 7000 	mla	r0, r2, r0, r7
 800e35a:	b289      	uxth	r1, r1
 800e35c:	3301      	adds	r3, #1
 800e35e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e362:	429d      	cmp	r5, r3
 800e364:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e368:	f84e 1b04 	str.w	r1, [lr], #4
 800e36c:	dcec      	bgt.n	800e348 <__multadd+0x12>
 800e36e:	b1d7      	cbz	r7, 800e3a6 <__multadd+0x70>
 800e370:	68a3      	ldr	r3, [r4, #8]
 800e372:	429d      	cmp	r5, r3
 800e374:	db12      	blt.n	800e39c <__multadd+0x66>
 800e376:	6861      	ldr	r1, [r4, #4]
 800e378:	4630      	mov	r0, r6
 800e37a:	3101      	adds	r1, #1
 800e37c:	f7ff ff8f 	bl	800e29e <_Balloc>
 800e380:	6922      	ldr	r2, [r4, #16]
 800e382:	3202      	adds	r2, #2
 800e384:	f104 010c 	add.w	r1, r4, #12
 800e388:	4680      	mov	r8, r0
 800e38a:	0092      	lsls	r2, r2, #2
 800e38c:	300c      	adds	r0, #12
 800e38e:	f7fc f8e9 	bl	800a564 <memcpy>
 800e392:	4621      	mov	r1, r4
 800e394:	4630      	mov	r0, r6
 800e396:	f7ff ffb7 	bl	800e308 <_Bfree>
 800e39a:	4644      	mov	r4, r8
 800e39c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	615f      	str	r7, [r3, #20]
 800e3a4:	6125      	str	r5, [r4, #16]
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3ac <__hi0bits>:
 800e3ac:	0c03      	lsrs	r3, r0, #16
 800e3ae:	041b      	lsls	r3, r3, #16
 800e3b0:	b913      	cbnz	r3, 800e3b8 <__hi0bits+0xc>
 800e3b2:	0400      	lsls	r0, r0, #16
 800e3b4:	2310      	movs	r3, #16
 800e3b6:	e000      	b.n	800e3ba <__hi0bits+0xe>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e3be:	bf04      	itt	eq
 800e3c0:	0200      	lsleq	r0, r0, #8
 800e3c2:	3308      	addeq	r3, #8
 800e3c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e3c8:	bf04      	itt	eq
 800e3ca:	0100      	lsleq	r0, r0, #4
 800e3cc:	3304      	addeq	r3, #4
 800e3ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e3d2:	bf04      	itt	eq
 800e3d4:	0080      	lsleq	r0, r0, #2
 800e3d6:	3302      	addeq	r3, #2
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	db03      	blt.n	800e3e4 <__hi0bits+0x38>
 800e3dc:	0042      	lsls	r2, r0, #1
 800e3de:	d503      	bpl.n	800e3e8 <__hi0bits+0x3c>
 800e3e0:	1c58      	adds	r0, r3, #1
 800e3e2:	4770      	bx	lr
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	4770      	bx	lr
 800e3e8:	2020      	movs	r0, #32
 800e3ea:	4770      	bx	lr

0800e3ec <__lo0bits>:
 800e3ec:	6803      	ldr	r3, [r0, #0]
 800e3ee:	f013 0207 	ands.w	r2, r3, #7
 800e3f2:	d00b      	beq.n	800e40c <__lo0bits+0x20>
 800e3f4:	07d9      	lsls	r1, r3, #31
 800e3f6:	d422      	bmi.n	800e43e <__lo0bits+0x52>
 800e3f8:	079a      	lsls	r2, r3, #30
 800e3fa:	bf4b      	itete	mi
 800e3fc:	085b      	lsrmi	r3, r3, #1
 800e3fe:	089b      	lsrpl	r3, r3, #2
 800e400:	6003      	strmi	r3, [r0, #0]
 800e402:	6003      	strpl	r3, [r0, #0]
 800e404:	bf4c      	ite	mi
 800e406:	2001      	movmi	r0, #1
 800e408:	2002      	movpl	r0, #2
 800e40a:	4770      	bx	lr
 800e40c:	b299      	uxth	r1, r3
 800e40e:	b909      	cbnz	r1, 800e414 <__lo0bits+0x28>
 800e410:	0c1b      	lsrs	r3, r3, #16
 800e412:	2210      	movs	r2, #16
 800e414:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e418:	bf04      	itt	eq
 800e41a:	0a1b      	lsreq	r3, r3, #8
 800e41c:	3208      	addeq	r2, #8
 800e41e:	0719      	lsls	r1, r3, #28
 800e420:	bf04      	itt	eq
 800e422:	091b      	lsreq	r3, r3, #4
 800e424:	3204      	addeq	r2, #4
 800e426:	0799      	lsls	r1, r3, #30
 800e428:	bf04      	itt	eq
 800e42a:	089b      	lsreq	r3, r3, #2
 800e42c:	3202      	addeq	r2, #2
 800e42e:	07d9      	lsls	r1, r3, #31
 800e430:	d402      	bmi.n	800e438 <__lo0bits+0x4c>
 800e432:	085b      	lsrs	r3, r3, #1
 800e434:	d005      	beq.n	800e442 <__lo0bits+0x56>
 800e436:	3201      	adds	r2, #1
 800e438:	6003      	str	r3, [r0, #0]
 800e43a:	4610      	mov	r0, r2
 800e43c:	4770      	bx	lr
 800e43e:	2000      	movs	r0, #0
 800e440:	4770      	bx	lr
 800e442:	2020      	movs	r0, #32
 800e444:	4770      	bx	lr

0800e446 <__i2b>:
 800e446:	b510      	push	{r4, lr}
 800e448:	460c      	mov	r4, r1
 800e44a:	2101      	movs	r1, #1
 800e44c:	f7ff ff27 	bl	800e29e <_Balloc>
 800e450:	2201      	movs	r2, #1
 800e452:	6144      	str	r4, [r0, #20]
 800e454:	6102      	str	r2, [r0, #16]
 800e456:	bd10      	pop	{r4, pc}

0800e458 <__multiply>:
 800e458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45c:	4614      	mov	r4, r2
 800e45e:	690a      	ldr	r2, [r1, #16]
 800e460:	6923      	ldr	r3, [r4, #16]
 800e462:	429a      	cmp	r2, r3
 800e464:	bfb8      	it	lt
 800e466:	460b      	movlt	r3, r1
 800e468:	4688      	mov	r8, r1
 800e46a:	bfbc      	itt	lt
 800e46c:	46a0      	movlt	r8, r4
 800e46e:	461c      	movlt	r4, r3
 800e470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e474:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e478:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e47c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e480:	eb07 0609 	add.w	r6, r7, r9
 800e484:	429e      	cmp	r6, r3
 800e486:	bfc8      	it	gt
 800e488:	3101      	addgt	r1, #1
 800e48a:	f7ff ff08 	bl	800e29e <_Balloc>
 800e48e:	f100 0514 	add.w	r5, r0, #20
 800e492:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800e496:	462b      	mov	r3, r5
 800e498:	2200      	movs	r2, #0
 800e49a:	4563      	cmp	r3, ip
 800e49c:	d202      	bcs.n	800e4a4 <__multiply+0x4c>
 800e49e:	f843 2b04 	str.w	r2, [r3], #4
 800e4a2:	e7fa      	b.n	800e49a <__multiply+0x42>
 800e4a4:	f104 0214 	add.w	r2, r4, #20
 800e4a8:	f108 0114 	add.w	r1, r8, #20
 800e4ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e4b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	9b00      	ldr	r3, [sp, #0]
 800e4b8:	9201      	str	r2, [sp, #4]
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d957      	bls.n	800e56e <__multiply+0x116>
 800e4be:	f8b2 b000 	ldrh.w	fp, [r2]
 800e4c2:	f1bb 0f00 	cmp.w	fp, #0
 800e4c6:	d023      	beq.n	800e510 <__multiply+0xb8>
 800e4c8:	4689      	mov	r9, r1
 800e4ca:	46ae      	mov	lr, r5
 800e4cc:	f04f 0800 	mov.w	r8, #0
 800e4d0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e4d4:	f8be a000 	ldrh.w	sl, [lr]
 800e4d8:	b2a3      	uxth	r3, r4
 800e4da:	fb0b a303 	mla	r3, fp, r3, sl
 800e4de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e4e2:	f8de 4000 	ldr.w	r4, [lr]
 800e4e6:	4443      	add	r3, r8
 800e4e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e4ec:	fb0b 840a 	mla	r4, fp, sl, r8
 800e4f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e4f4:	46f2      	mov	sl, lr
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e4fc:	454f      	cmp	r7, r9
 800e4fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e502:	f84a 3b04 	str.w	r3, [sl], #4
 800e506:	d901      	bls.n	800e50c <__multiply+0xb4>
 800e508:	46d6      	mov	lr, sl
 800e50a:	e7e1      	b.n	800e4d0 <__multiply+0x78>
 800e50c:	f8ce 8004 	str.w	r8, [lr, #4]
 800e510:	9b01      	ldr	r3, [sp, #4]
 800e512:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e516:	3204      	adds	r2, #4
 800e518:	f1ba 0f00 	cmp.w	sl, #0
 800e51c:	d021      	beq.n	800e562 <__multiply+0x10a>
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	462c      	mov	r4, r5
 800e522:	4689      	mov	r9, r1
 800e524:	f04f 0800 	mov.w	r8, #0
 800e528:	f8b9 e000 	ldrh.w	lr, [r9]
 800e52c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800e530:	fb0a be0e 	mla	lr, sl, lr, fp
 800e534:	44f0      	add	r8, lr
 800e536:	46a3      	mov	fp, r4
 800e538:	b29b      	uxth	r3, r3
 800e53a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e53e:	f84b 3b04 	str.w	r3, [fp], #4
 800e542:	f859 3b04 	ldr.w	r3, [r9], #4
 800e546:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800e54a:	0c1b      	lsrs	r3, r3, #16
 800e54c:	fb0a e303 	mla	r3, sl, r3, lr
 800e550:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800e554:	454f      	cmp	r7, r9
 800e556:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800e55a:	d901      	bls.n	800e560 <__multiply+0x108>
 800e55c:	465c      	mov	r4, fp
 800e55e:	e7e3      	b.n	800e528 <__multiply+0xd0>
 800e560:	6063      	str	r3, [r4, #4]
 800e562:	3504      	adds	r5, #4
 800e564:	e7a7      	b.n	800e4b6 <__multiply+0x5e>
 800e566:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800e56a:	b913      	cbnz	r3, 800e572 <__multiply+0x11a>
 800e56c:	3e01      	subs	r6, #1
 800e56e:	2e00      	cmp	r6, #0
 800e570:	dcf9      	bgt.n	800e566 <__multiply+0x10e>
 800e572:	6106      	str	r6, [r0, #16]
 800e574:	b003      	add	sp, #12
 800e576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e57c <__pow5mult>:
 800e57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e580:	4615      	mov	r5, r2
 800e582:	f012 0203 	ands.w	r2, r2, #3
 800e586:	4606      	mov	r6, r0
 800e588:	460f      	mov	r7, r1
 800e58a:	d007      	beq.n	800e59c <__pow5mult+0x20>
 800e58c:	3a01      	subs	r2, #1
 800e58e:	4c21      	ldr	r4, [pc, #132]	; (800e614 <__pow5mult+0x98>)
 800e590:	2300      	movs	r3, #0
 800e592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e596:	f7ff fece 	bl	800e336 <__multadd>
 800e59a:	4607      	mov	r7, r0
 800e59c:	10ad      	asrs	r5, r5, #2
 800e59e:	d036      	beq.n	800e60e <__pow5mult+0x92>
 800e5a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e5a2:	b93c      	cbnz	r4, 800e5b4 <__pow5mult+0x38>
 800e5a4:	2010      	movs	r0, #16
 800e5a6:	f7ff fc35 	bl	800de14 <malloc>
 800e5aa:	6270      	str	r0, [r6, #36]	; 0x24
 800e5ac:	6044      	str	r4, [r0, #4]
 800e5ae:	6084      	str	r4, [r0, #8]
 800e5b0:	6004      	str	r4, [r0, #0]
 800e5b2:	60c4      	str	r4, [r0, #12]
 800e5b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e5b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5bc:	b94c      	cbnz	r4, 800e5d2 <__pow5mult+0x56>
 800e5be:	f240 2171 	movw	r1, #625	; 0x271
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f7ff ff3f 	bl	800e446 <__i2b>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	6003      	str	r3, [r0, #0]
 800e5d2:	f04f 0800 	mov.w	r8, #0
 800e5d6:	07eb      	lsls	r3, r5, #31
 800e5d8:	d50a      	bpl.n	800e5f0 <__pow5mult+0x74>
 800e5da:	4639      	mov	r1, r7
 800e5dc:	4622      	mov	r2, r4
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7ff ff3a 	bl	800e458 <__multiply>
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	4681      	mov	r9, r0
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f7ff fe8d 	bl	800e308 <_Bfree>
 800e5ee:	464f      	mov	r7, r9
 800e5f0:	106d      	asrs	r5, r5, #1
 800e5f2:	d00c      	beq.n	800e60e <__pow5mult+0x92>
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	b108      	cbz	r0, 800e5fc <__pow5mult+0x80>
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	e7ec      	b.n	800e5d6 <__pow5mult+0x5a>
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	4621      	mov	r1, r4
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff ff29 	bl	800e458 <__multiply>
 800e606:	6020      	str	r0, [r4, #0]
 800e608:	f8c0 8000 	str.w	r8, [r0]
 800e60c:	e7f4      	b.n	800e5f8 <__pow5mult+0x7c>
 800e60e:	4638      	mov	r0, r7
 800e610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e614:	08011c28 	.word	0x08011c28

0800e618 <__lshift>:
 800e618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e61c:	460c      	mov	r4, r1
 800e61e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e622:	6926      	ldr	r6, [r4, #16]
 800e624:	6849      	ldr	r1, [r1, #4]
 800e626:	68a3      	ldr	r3, [r4, #8]
 800e628:	4456      	add	r6, sl
 800e62a:	4607      	mov	r7, r0
 800e62c:	4691      	mov	r9, r2
 800e62e:	1c75      	adds	r5, r6, #1
 800e630:	42ab      	cmp	r3, r5
 800e632:	da02      	bge.n	800e63a <__lshift+0x22>
 800e634:	3101      	adds	r1, #1
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	e7fa      	b.n	800e630 <__lshift+0x18>
 800e63a:	4638      	mov	r0, r7
 800e63c:	f7ff fe2f 	bl	800e29e <_Balloc>
 800e640:	2300      	movs	r3, #0
 800e642:	4680      	mov	r8, r0
 800e644:	f100 0114 	add.w	r1, r0, #20
 800e648:	461a      	mov	r2, r3
 800e64a:	4553      	cmp	r3, sl
 800e64c:	da03      	bge.n	800e656 <__lshift+0x3e>
 800e64e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e652:	3301      	adds	r3, #1
 800e654:	e7f9      	b.n	800e64a <__lshift+0x32>
 800e656:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800e65a:	6920      	ldr	r0, [r4, #16]
 800e65c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e660:	f019 091f 	ands.w	r9, r9, #31
 800e664:	f104 0114 	add.w	r1, r4, #20
 800e668:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800e66c:	d014      	beq.n	800e698 <__lshift+0x80>
 800e66e:	f1c9 0c20 	rsb	ip, r9, #32
 800e672:	2200      	movs	r2, #0
 800e674:	6808      	ldr	r0, [r1, #0]
 800e676:	fa00 f009 	lsl.w	r0, r0, r9
 800e67a:	4302      	orrs	r2, r0
 800e67c:	469a      	mov	sl, r3
 800e67e:	f843 2b04 	str.w	r2, [r3], #4
 800e682:	f851 2b04 	ldr.w	r2, [r1], #4
 800e686:	458e      	cmp	lr, r1
 800e688:	fa22 f20c 	lsr.w	r2, r2, ip
 800e68c:	d8f2      	bhi.n	800e674 <__lshift+0x5c>
 800e68e:	f8ca 2004 	str.w	r2, [sl, #4]
 800e692:	b142      	cbz	r2, 800e6a6 <__lshift+0x8e>
 800e694:	1cb5      	adds	r5, r6, #2
 800e696:	e006      	b.n	800e6a6 <__lshift+0x8e>
 800e698:	3b04      	subs	r3, #4
 800e69a:	f851 2b04 	ldr.w	r2, [r1], #4
 800e69e:	f843 2f04 	str.w	r2, [r3, #4]!
 800e6a2:	458e      	cmp	lr, r1
 800e6a4:	d8f9      	bhi.n	800e69a <__lshift+0x82>
 800e6a6:	3d01      	subs	r5, #1
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f7ff fe2a 	bl	800e308 <_Bfree>
 800e6b4:	4640      	mov	r0, r8
 800e6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e6ba <__mcmp>:
 800e6ba:	6903      	ldr	r3, [r0, #16]
 800e6bc:	690a      	ldr	r2, [r1, #16]
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	d111      	bne.n	800e6e8 <__mcmp+0x2e>
 800e6c4:	0092      	lsls	r2, r2, #2
 800e6c6:	3014      	adds	r0, #20
 800e6c8:	3114      	adds	r1, #20
 800e6ca:	1883      	adds	r3, r0, r2
 800e6cc:	440a      	add	r2, r1
 800e6ce:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800e6d2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e6d6:	428c      	cmp	r4, r1
 800e6d8:	d002      	beq.n	800e6e0 <__mcmp+0x26>
 800e6da:	d307      	bcc.n	800e6ec <__mcmp+0x32>
 800e6dc:	2001      	movs	r0, #1
 800e6de:	bd10      	pop	{r4, pc}
 800e6e0:	4298      	cmp	r0, r3
 800e6e2:	d3f4      	bcc.n	800e6ce <__mcmp+0x14>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	bd10      	pop	{r4, pc}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	bd10      	pop	{r4, pc}
 800e6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f0:	bd10      	pop	{r4, pc}

0800e6f2 <__mdiff>:
 800e6f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4615      	mov	r5, r2
 800e700:	f7ff ffdb 	bl	800e6ba <__mcmp>
 800e704:	1e06      	subs	r6, r0, #0
 800e706:	d108      	bne.n	800e71a <__mdiff+0x28>
 800e708:	4631      	mov	r1, r6
 800e70a:	4638      	mov	r0, r7
 800e70c:	f7ff fdc7 	bl	800e29e <_Balloc>
 800e710:	2301      	movs	r3, #1
 800e712:	6103      	str	r3, [r0, #16]
 800e714:	6146      	str	r6, [r0, #20]
 800e716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e71a:	bfbc      	itt	lt
 800e71c:	4623      	movlt	r3, r4
 800e71e:	462c      	movlt	r4, r5
 800e720:	4638      	mov	r0, r7
 800e722:	6861      	ldr	r1, [r4, #4]
 800e724:	bfba      	itte	lt
 800e726:	461d      	movlt	r5, r3
 800e728:	2601      	movlt	r6, #1
 800e72a:	2600      	movge	r6, #0
 800e72c:	f7ff fdb7 	bl	800e29e <_Balloc>
 800e730:	692b      	ldr	r3, [r5, #16]
 800e732:	60c6      	str	r6, [r0, #12]
 800e734:	6926      	ldr	r6, [r4, #16]
 800e736:	f105 0914 	add.w	r9, r5, #20
 800e73a:	3414      	adds	r4, #20
 800e73c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800e740:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e744:	f100 0514 	add.w	r5, r0, #20
 800e748:	f04f 0c00 	mov.w	ip, #0
 800e74c:	f854 3b04 	ldr.w	r3, [r4], #4
 800e750:	f859 2b04 	ldr.w	r2, [r9], #4
 800e754:	fa1c f183 	uxtah	r1, ip, r3
 800e758:	fa1f fe82 	uxth.w	lr, r2
 800e75c:	0c12      	lsrs	r2, r2, #16
 800e75e:	ebce 0101 	rsb	r1, lr, r1
 800e762:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800e766:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e76a:	b289      	uxth	r1, r1
 800e76c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e770:	45c8      	cmp	r8, r9
 800e772:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e776:	46a6      	mov	lr, r4
 800e778:	f845 3b04 	str.w	r3, [r5], #4
 800e77c:	d8e6      	bhi.n	800e74c <__mdiff+0x5a>
 800e77e:	45be      	cmp	lr, r7
 800e780:	d20e      	bcs.n	800e7a0 <__mdiff+0xae>
 800e782:	f85e 1b04 	ldr.w	r1, [lr], #4
 800e786:	fa1c f281 	uxtah	r2, ip, r1
 800e78a:	1413      	asrs	r3, r2, #16
 800e78c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800e790:	b292      	uxth	r2, r2
 800e792:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e796:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e79a:	f845 2b04 	str.w	r2, [r5], #4
 800e79e:	e7ee      	b.n	800e77e <__mdiff+0x8c>
 800e7a0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e7a4:	b90b      	cbnz	r3, 800e7aa <__mdiff+0xb8>
 800e7a6:	3e01      	subs	r6, #1
 800e7a8:	e7fa      	b.n	800e7a0 <__mdiff+0xae>
 800e7aa:	6106      	str	r6, [r0, #16]
 800e7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e7b0 <__d2b>:
 800e7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7b4:	460e      	mov	r6, r1
 800e7b6:	2101      	movs	r1, #1
 800e7b8:	ec59 8b10 	vmov	r8, r9, d0
 800e7bc:	4615      	mov	r5, r2
 800e7be:	f7ff fd6e 	bl	800e29e <_Balloc>
 800e7c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e7c6:	4607      	mov	r7, r0
 800e7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7cc:	b10c      	cbz	r4, 800e7d2 <__d2b+0x22>
 800e7ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	f1b8 0f00 	cmp.w	r8, #0
 800e7d8:	d019      	beq.n	800e80e <__d2b+0x5e>
 800e7da:	a802      	add	r0, sp, #8
 800e7dc:	f840 8d08 	str.w	r8, [r0, #-8]!
 800e7e0:	f7ff fe04 	bl	800e3ec <__lo0bits>
 800e7e4:	9b00      	ldr	r3, [sp, #0]
 800e7e6:	b148      	cbz	r0, 800e7fc <__d2b+0x4c>
 800e7e8:	9a01      	ldr	r2, [sp, #4]
 800e7ea:	f1c0 0120 	rsb	r1, r0, #32
 800e7ee:	fa02 f101 	lsl.w	r1, r2, r1
 800e7f2:	430b      	orrs	r3, r1
 800e7f4:	40c2      	lsrs	r2, r0
 800e7f6:	617b      	str	r3, [r7, #20]
 800e7f8:	9201      	str	r2, [sp, #4]
 800e7fa:	e000      	b.n	800e7fe <__d2b+0x4e>
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	9b01      	ldr	r3, [sp, #4]
 800e800:	61bb      	str	r3, [r7, #24]
 800e802:	2b00      	cmp	r3, #0
 800e804:	bf14      	ite	ne
 800e806:	2102      	movne	r1, #2
 800e808:	2101      	moveq	r1, #1
 800e80a:	6139      	str	r1, [r7, #16]
 800e80c:	e007      	b.n	800e81e <__d2b+0x6e>
 800e80e:	a801      	add	r0, sp, #4
 800e810:	f7ff fdec 	bl	800e3ec <__lo0bits>
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	617b      	str	r3, [r7, #20]
 800e818:	2101      	movs	r1, #1
 800e81a:	6139      	str	r1, [r7, #16]
 800e81c:	3020      	adds	r0, #32
 800e81e:	b134      	cbz	r4, 800e82e <__d2b+0x7e>
 800e820:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e824:	4404      	add	r4, r0
 800e826:	6034      	str	r4, [r6, #0]
 800e828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e82c:	e009      	b.n	800e842 <__d2b+0x92>
 800e82e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e832:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e836:	6030      	str	r0, [r6, #0]
 800e838:	6918      	ldr	r0, [r3, #16]
 800e83a:	f7ff fdb7 	bl	800e3ac <__hi0bits>
 800e83e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e842:	6028      	str	r0, [r5, #0]
 800e844:	4638      	mov	r0, r7
 800e846:	b003      	add	sp, #12
 800e848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e84c <_realloc_r>:
 800e84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e850:	4681      	mov	r9, r0
 800e852:	460c      	mov	r4, r1
 800e854:	b929      	cbnz	r1, 800e862 <_realloc_r+0x16>
 800e856:	4611      	mov	r1, r2
 800e858:	b003      	add	sp, #12
 800e85a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85e:	f7ff bae1 	b.w	800de24 <_malloc_r>
 800e862:	9201      	str	r2, [sp, #4]
 800e864:	f7ff fd19 	bl	800e29a <__malloc_lock>
 800e868:	9a01      	ldr	r2, [sp, #4]
 800e86a:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800e86e:	f102 080b 	add.w	r8, r2, #11
 800e872:	f1b8 0f16 	cmp.w	r8, #22
 800e876:	f1a4 0b08 	sub.w	fp, r4, #8
 800e87a:	f02e 0503 	bic.w	r5, lr, #3
 800e87e:	d903      	bls.n	800e888 <_realloc_r+0x3c>
 800e880:	f038 0807 	bics.w	r8, r8, #7
 800e884:	d502      	bpl.n	800e88c <_realloc_r+0x40>
 800e886:	e003      	b.n	800e890 <_realloc_r+0x44>
 800e888:	f04f 0810 	mov.w	r8, #16
 800e88c:	4590      	cmp	r8, r2
 800e88e:	d204      	bcs.n	800e89a <_realloc_r+0x4e>
 800e890:	230c      	movs	r3, #12
 800e892:	f8c9 3000 	str.w	r3, [r9]
 800e896:	2000      	movs	r0, #0
 800e898:	e17d      	b.n	800eb96 <_realloc_r+0x34a>
 800e89a:	45a8      	cmp	r8, r5
 800e89c:	f340 8150 	ble.w	800eb40 <_realloc_r+0x2f4>
 800e8a0:	4ba6      	ldr	r3, [pc, #664]	; (800eb3c <_realloc_r+0x2f0>)
 800e8a2:	6898      	ldr	r0, [r3, #8]
 800e8a4:	eb0b 0105 	add.w	r1, fp, r5
 800e8a8:	4281      	cmp	r1, r0
 800e8aa:	684f      	ldr	r7, [r1, #4]
 800e8ac:	d005      	beq.n	800e8ba <_realloc_r+0x6e>
 800e8ae:	f027 0601 	bic.w	r6, r7, #1
 800e8b2:	440e      	add	r6, r1
 800e8b4:	6876      	ldr	r6, [r6, #4]
 800e8b6:	07f6      	lsls	r6, r6, #31
 800e8b8:	d426      	bmi.n	800e908 <_realloc_r+0xbc>
 800e8ba:	f027 0a03 	bic.w	sl, r7, #3
 800e8be:	4281      	cmp	r1, r0
 800e8c0:	eb05 070a 	add.w	r7, r5, sl
 800e8c4:	d118      	bne.n	800e8f8 <_realloc_r+0xac>
 800e8c6:	f108 0610 	add.w	r6, r8, #16
 800e8ca:	42b7      	cmp	r7, r6
 800e8cc:	db1f      	blt.n	800e90e <_realloc_r+0xc2>
 800e8ce:	eb0b 0008 	add.w	r0, fp, r8
 800e8d2:	ebc8 0707 	rsb	r7, r8, r7
 800e8d6:	f047 0701 	orr.w	r7, r7, #1
 800e8da:	6098      	str	r0, [r3, #8]
 800e8dc:	6047      	str	r7, [r0, #4]
 800e8de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	ea43 0308 	orr.w	r3, r3, r8
 800e8ea:	4648      	mov	r0, r9
 800e8ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8f0:	f7ff fcd4 	bl	800e29c <__malloc_unlock>
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	e14e      	b.n	800eb96 <_realloc_r+0x34a>
 800e8f8:	45b8      	cmp	r8, r7
 800e8fa:	dc08      	bgt.n	800e90e <_realloc_r+0xc2>
 800e8fc:	68cb      	ldr	r3, [r1, #12]
 800e8fe:	688a      	ldr	r2, [r1, #8]
 800e900:	463d      	mov	r5, r7
 800e902:	60d3      	str	r3, [r2, #12]
 800e904:	609a      	str	r2, [r3, #8]
 800e906:	e11b      	b.n	800eb40 <_realloc_r+0x2f4>
 800e908:	f04f 0a00 	mov.w	sl, #0
 800e90c:	4651      	mov	r1, sl
 800e90e:	f01e 0f01 	tst.w	lr, #1
 800e912:	f040 80c3 	bne.w	800ea9c <_realloc_r+0x250>
 800e916:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800e91a:	ebc7 070b 	rsb	r7, r7, fp
 800e91e:	687e      	ldr	r6, [r7, #4]
 800e920:	f026 0603 	bic.w	r6, r6, #3
 800e924:	442e      	add	r6, r5
 800e926:	2900      	cmp	r1, #0
 800e928:	f000 8083 	beq.w	800ea32 <_realloc_r+0x1e6>
 800e92c:	4281      	cmp	r1, r0
 800e92e:	44b2      	add	sl, r6
 800e930:	d147      	bne.n	800e9c2 <_realloc_r+0x176>
 800e932:	f108 0110 	add.w	r1, r8, #16
 800e936:	458a      	cmp	sl, r1
 800e938:	db7b      	blt.n	800ea32 <_realloc_r+0x1e6>
 800e93a:	463e      	mov	r6, r7
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800e942:	60ca      	str	r2, [r1, #12]
 800e944:	6091      	str	r1, [r2, #8]
 800e946:	1f2a      	subs	r2, r5, #4
 800e948:	2a24      	cmp	r2, #36	; 0x24
 800e94a:	d825      	bhi.n	800e998 <_realloc_r+0x14c>
 800e94c:	2a13      	cmp	r2, #19
 800e94e:	d91b      	bls.n	800e988 <_realloc_r+0x13c>
 800e950:	6821      	ldr	r1, [r4, #0]
 800e952:	60b9      	str	r1, [r7, #8]
 800e954:	6861      	ldr	r1, [r4, #4]
 800e956:	60f9      	str	r1, [r7, #12]
 800e958:	2a1b      	cmp	r2, #27
 800e95a:	d803      	bhi.n	800e964 <_realloc_r+0x118>
 800e95c:	f107 0210 	add.w	r2, r7, #16
 800e960:	3408      	adds	r4, #8
 800e962:	e012      	b.n	800e98a <_realloc_r+0x13e>
 800e964:	68a1      	ldr	r1, [r4, #8]
 800e966:	6139      	str	r1, [r7, #16]
 800e968:	68e1      	ldr	r1, [r4, #12]
 800e96a:	6179      	str	r1, [r7, #20]
 800e96c:	2a24      	cmp	r2, #36	; 0x24
 800e96e:	bf01      	itttt	eq
 800e970:	6922      	ldreq	r2, [r4, #16]
 800e972:	61ba      	streq	r2, [r7, #24]
 800e974:	6961      	ldreq	r1, [r4, #20]
 800e976:	61f9      	streq	r1, [r7, #28]
 800e978:	bf19      	ittee	ne
 800e97a:	f107 0218 	addne.w	r2, r7, #24
 800e97e:	3410      	addne	r4, #16
 800e980:	f107 0220 	addeq.w	r2, r7, #32
 800e984:	3418      	addeq	r4, #24
 800e986:	e000      	b.n	800e98a <_realloc_r+0x13e>
 800e988:	4632      	mov	r2, r6
 800e98a:	6821      	ldr	r1, [r4, #0]
 800e98c:	6011      	str	r1, [r2, #0]
 800e98e:	6861      	ldr	r1, [r4, #4]
 800e990:	6051      	str	r1, [r2, #4]
 800e992:	68a1      	ldr	r1, [r4, #8]
 800e994:	6091      	str	r1, [r2, #8]
 800e996:	e005      	b.n	800e9a4 <_realloc_r+0x158>
 800e998:	4621      	mov	r1, r4
 800e99a:	4630      	mov	r0, r6
 800e99c:	9301      	str	r3, [sp, #4]
 800e99e:	f7ff fc61 	bl	800e264 <memmove>
 800e9a2:	9b01      	ldr	r3, [sp, #4]
 800e9a4:	eb07 0208 	add.w	r2, r7, r8
 800e9a8:	ebc8 0a0a 	rsb	sl, r8, sl
 800e9ac:	609a      	str	r2, [r3, #8]
 800e9ae:	f04a 0301 	orr.w	r3, sl, #1
 800e9b2:	6053      	str	r3, [r2, #4]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f003 0301 	and.w	r3, r3, #1
 800e9ba:	ea43 0308 	orr.w	r3, r3, r8
 800e9be:	607b      	str	r3, [r7, #4]
 800e9c0:	e0b6      	b.n	800eb30 <_realloc_r+0x2e4>
 800e9c2:	45d0      	cmp	r8, sl
 800e9c4:	dc35      	bgt.n	800ea32 <_realloc_r+0x1e6>
 800e9c6:	68cb      	ldr	r3, [r1, #12]
 800e9c8:	688a      	ldr	r2, [r1, #8]
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	60d3      	str	r3, [r2, #12]
 800e9ce:	609a      	str	r2, [r3, #8]
 800e9d0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	60d3      	str	r3, [r2, #12]
 800e9d8:	609a      	str	r2, [r3, #8]
 800e9da:	1f2a      	subs	r2, r5, #4
 800e9dc:	2a24      	cmp	r2, #36	; 0x24
 800e9de:	d823      	bhi.n	800ea28 <_realloc_r+0x1dc>
 800e9e0:	2a13      	cmp	r2, #19
 800e9e2:	d91a      	bls.n	800ea1a <_realloc_r+0x1ce>
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	60bb      	str	r3, [r7, #8]
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	60fb      	str	r3, [r7, #12]
 800e9ec:	2a1b      	cmp	r2, #27
 800e9ee:	d803      	bhi.n	800e9f8 <_realloc_r+0x1ac>
 800e9f0:	f107 0010 	add.w	r0, r7, #16
 800e9f4:	3408      	adds	r4, #8
 800e9f6:	e010      	b.n	800ea1a <_realloc_r+0x1ce>
 800e9f8:	68a3      	ldr	r3, [r4, #8]
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	68e3      	ldr	r3, [r4, #12]
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	2a24      	cmp	r2, #36	; 0x24
 800ea02:	bf01      	itttt	eq
 800ea04:	6923      	ldreq	r3, [r4, #16]
 800ea06:	61bb      	streq	r3, [r7, #24]
 800ea08:	6963      	ldreq	r3, [r4, #20]
 800ea0a:	61fb      	streq	r3, [r7, #28]
 800ea0c:	bf19      	ittee	ne
 800ea0e:	f107 0018 	addne.w	r0, r7, #24
 800ea12:	3410      	addne	r4, #16
 800ea14:	f107 0020 	addeq.w	r0, r7, #32
 800ea18:	3418      	addeq	r4, #24
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	6003      	str	r3, [r0, #0]
 800ea1e:	6863      	ldr	r3, [r4, #4]
 800ea20:	6043      	str	r3, [r0, #4]
 800ea22:	68a3      	ldr	r3, [r4, #8]
 800ea24:	6083      	str	r3, [r0, #8]
 800ea26:	e002      	b.n	800ea2e <_realloc_r+0x1e2>
 800ea28:	4621      	mov	r1, r4
 800ea2a:	f7ff fc1b 	bl	800e264 <memmove>
 800ea2e:	4655      	mov	r5, sl
 800ea30:	e02e      	b.n	800ea90 <_realloc_r+0x244>
 800ea32:	45b0      	cmp	r8, r6
 800ea34:	dc32      	bgt.n	800ea9c <_realloc_r+0x250>
 800ea36:	4638      	mov	r0, r7
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ea3e:	60d3      	str	r3, [r2, #12]
 800ea40:	609a      	str	r2, [r3, #8]
 800ea42:	1f2a      	subs	r2, r5, #4
 800ea44:	2a24      	cmp	r2, #36	; 0x24
 800ea46:	d825      	bhi.n	800ea94 <_realloc_r+0x248>
 800ea48:	2a13      	cmp	r2, #19
 800ea4a:	d91a      	bls.n	800ea82 <_realloc_r+0x236>
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	60bb      	str	r3, [r7, #8]
 800ea50:	6863      	ldr	r3, [r4, #4]
 800ea52:	60fb      	str	r3, [r7, #12]
 800ea54:	2a1b      	cmp	r2, #27
 800ea56:	d803      	bhi.n	800ea60 <_realloc_r+0x214>
 800ea58:	f107 0010 	add.w	r0, r7, #16
 800ea5c:	3408      	adds	r4, #8
 800ea5e:	e010      	b.n	800ea82 <_realloc_r+0x236>
 800ea60:	68a3      	ldr	r3, [r4, #8]
 800ea62:	613b      	str	r3, [r7, #16]
 800ea64:	68e3      	ldr	r3, [r4, #12]
 800ea66:	617b      	str	r3, [r7, #20]
 800ea68:	2a24      	cmp	r2, #36	; 0x24
 800ea6a:	bf01      	itttt	eq
 800ea6c:	6923      	ldreq	r3, [r4, #16]
 800ea6e:	61bb      	streq	r3, [r7, #24]
 800ea70:	6963      	ldreq	r3, [r4, #20]
 800ea72:	61fb      	streq	r3, [r7, #28]
 800ea74:	bf19      	ittee	ne
 800ea76:	f107 0018 	addne.w	r0, r7, #24
 800ea7a:	3410      	addne	r4, #16
 800ea7c:	f107 0020 	addeq.w	r0, r7, #32
 800ea80:	3418      	addeq	r4, #24
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	6003      	str	r3, [r0, #0]
 800ea86:	6863      	ldr	r3, [r4, #4]
 800ea88:	6043      	str	r3, [r0, #4]
 800ea8a:	68a3      	ldr	r3, [r4, #8]
 800ea8c:	6083      	str	r3, [r0, #8]
 800ea8e:	4635      	mov	r5, r6
 800ea90:	46bb      	mov	fp, r7
 800ea92:	e055      	b.n	800eb40 <_realloc_r+0x2f4>
 800ea94:	4621      	mov	r1, r4
 800ea96:	f7ff fbe5 	bl	800e264 <memmove>
 800ea9a:	e7f8      	b.n	800ea8e <_realloc_r+0x242>
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4648      	mov	r0, r9
 800eaa0:	f7ff f9c0 	bl	800de24 <_malloc_r>
 800eaa4:	4606      	mov	r6, r0
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d042      	beq.n	800eb30 <_realloc_r+0x2e4>
 800eaaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800eaae:	f023 0301 	bic.w	r3, r3, #1
 800eab2:	f1a0 0208 	sub.w	r2, r0, #8
 800eab6:	445b      	add	r3, fp
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d105      	bne.n	800eac8 <_realloc_r+0x27c>
 800eabc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800eac0:	f023 0303 	bic.w	r3, r3, #3
 800eac4:	441d      	add	r5, r3
 800eac6:	e03b      	b.n	800eb40 <_realloc_r+0x2f4>
 800eac8:	1f2a      	subs	r2, r5, #4
 800eaca:	2a24      	cmp	r2, #36	; 0x24
 800eacc:	d829      	bhi.n	800eb22 <_realloc_r+0x2d6>
 800eace:	2a13      	cmp	r2, #19
 800ead0:	d91e      	bls.n	800eb10 <_realloc_r+0x2c4>
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	6003      	str	r3, [r0, #0]
 800ead6:	6863      	ldr	r3, [r4, #4]
 800ead8:	6043      	str	r3, [r0, #4]
 800eada:	2a1b      	cmp	r2, #27
 800eadc:	d804      	bhi.n	800eae8 <_realloc_r+0x29c>
 800eade:	f100 0308 	add.w	r3, r0, #8
 800eae2:	f104 0208 	add.w	r2, r4, #8
 800eae6:	e015      	b.n	800eb14 <_realloc_r+0x2c8>
 800eae8:	68a3      	ldr	r3, [r4, #8]
 800eaea:	6083      	str	r3, [r0, #8]
 800eaec:	68e3      	ldr	r3, [r4, #12]
 800eaee:	60c3      	str	r3, [r0, #12]
 800eaf0:	2a24      	cmp	r2, #36	; 0x24
 800eaf2:	bf01      	itttt	eq
 800eaf4:	6923      	ldreq	r3, [r4, #16]
 800eaf6:	6103      	streq	r3, [r0, #16]
 800eaf8:	6961      	ldreq	r1, [r4, #20]
 800eafa:	6141      	streq	r1, [r0, #20]
 800eafc:	bf19      	ittee	ne
 800eafe:	f100 0310 	addne.w	r3, r0, #16
 800eb02:	f104 0210 	addne.w	r2, r4, #16
 800eb06:	f100 0318 	addeq.w	r3, r0, #24
 800eb0a:	f104 0218 	addeq.w	r2, r4, #24
 800eb0e:	e001      	b.n	800eb14 <_realloc_r+0x2c8>
 800eb10:	4603      	mov	r3, r0
 800eb12:	4622      	mov	r2, r4
 800eb14:	6811      	ldr	r1, [r2, #0]
 800eb16:	6019      	str	r1, [r3, #0]
 800eb18:	6851      	ldr	r1, [r2, #4]
 800eb1a:	6059      	str	r1, [r3, #4]
 800eb1c:	6892      	ldr	r2, [r2, #8]
 800eb1e:	609a      	str	r2, [r3, #8]
 800eb20:	e002      	b.n	800eb28 <_realloc_r+0x2dc>
 800eb22:	4621      	mov	r1, r4
 800eb24:	f7ff fb9e 	bl	800e264 <memmove>
 800eb28:	4621      	mov	r1, r4
 800eb2a:	4648      	mov	r0, r9
 800eb2c:	f7fe fed6 	bl	800d8dc <_free_r>
 800eb30:	4648      	mov	r0, r9
 800eb32:	f7ff fbb3 	bl	800e29c <__malloc_unlock>
 800eb36:	4630      	mov	r0, r6
 800eb38:	e02d      	b.n	800eb96 <_realloc_r+0x34a>
 800eb3a:	bf00      	nop
 800eb3c:	20010184 	.word	0x20010184
 800eb40:	ebc8 0205 	rsb	r2, r8, r5
 800eb44:	2a0f      	cmp	r2, #15
 800eb46:	f8db 3004 	ldr.w	r3, [fp, #4]
 800eb4a:	d914      	bls.n	800eb76 <_realloc_r+0x32a>
 800eb4c:	f003 0301 	and.w	r3, r3, #1
 800eb50:	eb0b 0108 	add.w	r1, fp, r8
 800eb54:	ea43 0308 	orr.w	r3, r3, r8
 800eb58:	f8cb 3004 	str.w	r3, [fp, #4]
 800eb5c:	f042 0301 	orr.w	r3, r2, #1
 800eb60:	440a      	add	r2, r1
 800eb62:	604b      	str	r3, [r1, #4]
 800eb64:	6853      	ldr	r3, [r2, #4]
 800eb66:	f043 0301 	orr.w	r3, r3, #1
 800eb6a:	6053      	str	r3, [r2, #4]
 800eb6c:	3108      	adds	r1, #8
 800eb6e:	4648      	mov	r0, r9
 800eb70:	f7fe feb4 	bl	800d8dc <_free_r>
 800eb74:	e00a      	b.n	800eb8c <_realloc_r+0x340>
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	432b      	orrs	r3, r5
 800eb7c:	eb0b 0205 	add.w	r2, fp, r5
 800eb80:	f8cb 3004 	str.w	r3, [fp, #4]
 800eb84:	6853      	ldr	r3, [r2, #4]
 800eb86:	f043 0301 	orr.w	r3, r3, #1
 800eb8a:	6053      	str	r3, [r2, #4]
 800eb8c:	4648      	mov	r0, r9
 800eb8e:	f7ff fb85 	bl	800e29c <__malloc_unlock>
 800eb92:	f10b 0008 	add.w	r0, fp, #8
 800eb96:	b003      	add	sp, #12
 800eb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb9c <_sbrk_r>:
 800eb9c:	b538      	push	{r3, r4, r5, lr}
 800eb9e:	4c06      	ldr	r4, [pc, #24]	; (800ebb8 <_sbrk_r+0x1c>)
 800eba0:	2300      	movs	r3, #0
 800eba2:	4605      	mov	r5, r0
 800eba4:	4608      	mov	r0, r1
 800eba6:	6023      	str	r3, [r4, #0]
 800eba8:	f7f2 fec2 	bl	8001930 <_sbrk>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	d102      	bne.n	800ebb6 <_sbrk_r+0x1a>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	b103      	cbz	r3, 800ebb6 <_sbrk_r+0x1a>
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	bd38      	pop	{r3, r4, r5, pc}
 800ebb8:	2001491c 	.word	0x2001491c

0800ebbc <__sread>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc4:	f000 fa14 	bl	800eff0 <_read_r>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	bfab      	itete	ge
 800ebcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebce:	89a3      	ldrhlt	r3, [r4, #12]
 800ebd0:	181b      	addge	r3, r3, r0
 800ebd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebd6:	bfac      	ite	ge
 800ebd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebda:	81a3      	strhlt	r3, [r4, #12]
 800ebdc:	bd10      	pop	{r4, pc}

0800ebde <__swrite>:
 800ebde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe2:	461f      	mov	r7, r3
 800ebe4:	898b      	ldrh	r3, [r1, #12]
 800ebe6:	05db      	lsls	r3, r3, #23
 800ebe8:	4605      	mov	r5, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	4616      	mov	r6, r2
 800ebee:	d505      	bpl.n	800ebfc <__swrite+0x1e>
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf8:	f000 f9e8 	bl	800efcc <_lseek_r>
 800ebfc:	89a3      	ldrh	r3, [r4, #12]
 800ebfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec06:	81a3      	strh	r3, [r4, #12]
 800ec08:	4632      	mov	r2, r6
 800ec0a:	463b      	mov	r3, r7
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec12:	f000 b8c7 	b.w	800eda4 <_write_r>

0800ec16 <__sseek>:
 800ec16:	b510      	push	{r4, lr}
 800ec18:	460c      	mov	r4, r1
 800ec1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec1e:	f000 f9d5 	bl	800efcc <_lseek_r>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	89a3      	ldrh	r3, [r4, #12]
 800ec26:	bf15      	itete	ne
 800ec28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec32:	81a3      	strheq	r3, [r4, #12]
 800ec34:	bf18      	it	ne
 800ec36:	81a3      	strhne	r3, [r4, #12]
 800ec38:	bd10      	pop	{r4, pc}

0800ec3a <__sclose>:
 800ec3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3e:	f000 b8f1 	b.w	800ee24 <_close_r>

0800ec42 <__ssprint_r>:
 800ec42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec46:	4693      	mov	fp, r2
 800ec48:	6892      	ldr	r2, [r2, #8]
 800ec4a:	4681      	mov	r9, r0
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	b34a      	cbz	r2, 800eca4 <__ssprint_r+0x62>
 800ec50:	2300      	movs	r3, #0
 800ec52:	f8db a000 	ldr.w	sl, [fp]
 800ec56:	9301      	str	r3, [sp, #4]
 800ec58:	461f      	mov	r7, r3
 800ec5a:	e006      	b.n	800ec6a <__ssprint_r+0x28>
 800ec5c:	f8da 3000 	ldr.w	r3, [sl]
 800ec60:	f8da 7004 	ldr.w	r7, [sl, #4]
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	f10a 0a08 	add.w	sl, sl, #8
 800ec6a:	2f00      	cmp	r7, #0
 800ec6c:	d0f6      	beq.n	800ec5c <__ssprint_r+0x1a>
 800ec6e:	68a6      	ldr	r6, [r4, #8]
 800ec70:	42b7      	cmp	r7, r6
 800ec72:	d360      	bcc.n	800ed36 <__ssprint_r+0xf4>
 800ec74:	89a0      	ldrh	r0, [r4, #12]
 800ec76:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800ec7a:	d117      	bne.n	800ecac <__ssprint_r+0x6a>
 800ec7c:	42b7      	cmp	r7, r6
 800ec7e:	d35a      	bcc.n	800ed36 <__ssprint_r+0xf4>
 800ec80:	4632      	mov	r2, r6
 800ec82:	9901      	ldr	r1, [sp, #4]
 800ec84:	6820      	ldr	r0, [r4, #0]
 800ec86:	f7ff faed 	bl	800e264 <memmove>
 800ec8a:	68a2      	ldr	r2, [r4, #8]
 800ec8c:	1b92      	subs	r2, r2, r6
 800ec8e:	60a2      	str	r2, [r4, #8]
 800ec90:	6822      	ldr	r2, [r4, #0]
 800ec92:	4416      	add	r6, r2
 800ec94:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ec98:	6026      	str	r6, [r4, #0]
 800ec9a:	1bd7      	subs	r7, r2, r7
 800ec9c:	f8cb 7008 	str.w	r7, [fp, #8]
 800eca0:	2f00      	cmp	r7, #0
 800eca2:	d1db      	bne.n	800ec5c <__ssprint_r+0x1a>
 800eca4:	2000      	movs	r0, #0
 800eca6:	f8cb 0004 	str.w	r0, [fp, #4]
 800ecaa:	e046      	b.n	800ed3a <__ssprint_r+0xf8>
 800ecac:	6825      	ldr	r5, [r4, #0]
 800ecae:	6921      	ldr	r1, [r4, #16]
 800ecb0:	ebc1 0805 	rsb	r8, r1, r5
 800ecb4:	f108 0201 	add.w	r2, r8, #1
 800ecb8:	6965      	ldr	r5, [r4, #20]
 800ecba:	443a      	add	r2, r7
 800ecbc:	2302      	movs	r3, #2
 800ecbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecc2:	fb95 f5f3 	sdiv	r5, r5, r3
 800ecc6:	4295      	cmp	r5, r2
 800ecc8:	bf38      	it	cc
 800ecca:	4615      	movcc	r5, r2
 800eccc:	0543      	lsls	r3, r0, #21
 800ecce:	d510      	bpl.n	800ecf2 <__ssprint_r+0xb0>
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	f7ff f8a6 	bl	800de24 <_malloc_r>
 800ecd8:	4606      	mov	r6, r0
 800ecda:	b1a0      	cbz	r0, 800ed06 <__ssprint_r+0xc4>
 800ecdc:	4642      	mov	r2, r8
 800ecde:	6921      	ldr	r1, [r4, #16]
 800ece0:	f7fb fc40 	bl	800a564 <memcpy>
 800ece4:	89a2      	ldrh	r2, [r4, #12]
 800ece6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ecea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ecee:	81a2      	strh	r2, [r4, #12]
 800ecf0:	e018      	b.n	800ed24 <__ssprint_r+0xe2>
 800ecf2:	462a      	mov	r2, r5
 800ecf4:	4648      	mov	r0, r9
 800ecf6:	f7ff fda9 	bl	800e84c <_realloc_r>
 800ecfa:	4606      	mov	r6, r0
 800ecfc:	b990      	cbnz	r0, 800ed24 <__ssprint_r+0xe2>
 800ecfe:	6921      	ldr	r1, [r4, #16]
 800ed00:	4648      	mov	r0, r9
 800ed02:	f7fe fdeb 	bl	800d8dc <_free_r>
 800ed06:	220c      	movs	r2, #12
 800ed08:	f8c9 2000 	str.w	r2, [r9]
 800ed0c:	89a2      	ldrh	r2, [r4, #12]
 800ed0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed12:	81a2      	strh	r2, [r4, #12]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f8cb 2008 	str.w	r2, [fp, #8]
 800ed1a:	f8cb 2004 	str.w	r2, [fp, #4]
 800ed1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed22:	e00a      	b.n	800ed3a <__ssprint_r+0xf8>
 800ed24:	6126      	str	r6, [r4, #16]
 800ed26:	6165      	str	r5, [r4, #20]
 800ed28:	4446      	add	r6, r8
 800ed2a:	ebc8 0505 	rsb	r5, r8, r5
 800ed2e:	6026      	str	r6, [r4, #0]
 800ed30:	60a5      	str	r5, [r4, #8]
 800ed32:	463e      	mov	r6, r7
 800ed34:	e7a2      	b.n	800ec7c <__ssprint_r+0x3a>
 800ed36:	463e      	mov	r6, r7
 800ed38:	e7a2      	b.n	800ec80 <__ssprint_r+0x3e>
 800ed3a:	b003      	add	sp, #12
 800ed3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed40 <__sprint_r>:
 800ed40:	6893      	ldr	r3, [r2, #8]
 800ed42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed46:	4680      	mov	r8, r0
 800ed48:	460f      	mov	r7, r1
 800ed4a:	4614      	mov	r4, r2
 800ed4c:	b91b      	cbnz	r3, 800ed56 <__sprint_r+0x16>
 800ed4e:	6053      	str	r3, [r2, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed56:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ed58:	049d      	lsls	r5, r3, #18
 800ed5a:	d51c      	bpl.n	800ed96 <__sprint_r+0x56>
 800ed5c:	6815      	ldr	r5, [r2, #0]
 800ed5e:	68a0      	ldr	r0, [r4, #8]
 800ed60:	3508      	adds	r5, #8
 800ed62:	b1d0      	cbz	r0, 800ed9a <__sprint_r+0x5a>
 800ed64:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800ed68:	f855 ac08 	ldr.w	sl, [r5, #-8]
 800ed6c:	08b6      	lsrs	r6, r6, #2
 800ed6e:	f04f 0900 	mov.w	r9, #0
 800ed72:	454e      	cmp	r6, r9
 800ed74:	dd0a      	ble.n	800ed8c <__sprint_r+0x4c>
 800ed76:	463a      	mov	r2, r7
 800ed78:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	f000 f8f2 	bl	800ef66 <_fputwc_r>
 800ed82:	1c43      	adds	r3, r0, #1
 800ed84:	d009      	beq.n	800ed9a <__sprint_r+0x5a>
 800ed86:	f109 0901 	add.w	r9, r9, #1
 800ed8a:	e7f2      	b.n	800ed72 <__sprint_r+0x32>
 800ed8c:	68a3      	ldr	r3, [r4, #8]
 800ed8e:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 800ed92:	60a6      	str	r6, [r4, #8]
 800ed94:	e7e3      	b.n	800ed5e <__sprint_r+0x1e>
 800ed96:	f7fe fe5f 	bl	800da58 <__sfvwrite_r>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	60a3      	str	r3, [r4, #8]
 800ed9e:	6063      	str	r3, [r4, #4]
 800eda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eda4 <_write_r>:
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4c07      	ldr	r4, [pc, #28]	; (800edc4 <_write_r+0x20>)
 800eda8:	4605      	mov	r5, r0
 800edaa:	4608      	mov	r0, r1
 800edac:	4611      	mov	r1, r2
 800edae:	2200      	movs	r2, #0
 800edb0:	6022      	str	r2, [r4, #0]
 800edb2:	461a      	mov	r2, r3
 800edb4:	f7f2 fda0 	bl	80018f8 <_write>
 800edb8:	1c43      	adds	r3, r0, #1
 800edba:	d102      	bne.n	800edc2 <_write_r+0x1e>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	b103      	cbz	r3, 800edc2 <_write_r+0x1e>
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	bd38      	pop	{r3, r4, r5, pc}
 800edc4:	2001491c 	.word	0x2001491c

0800edc8 <_calloc_r>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	4351      	muls	r1, r2
 800edcc:	f7ff f82a 	bl	800de24 <_malloc_r>
 800edd0:	4604      	mov	r4, r0
 800edd2:	b320      	cbz	r0, 800ee1e <_calloc_r+0x56>
 800edd4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800edd8:	f022 0203 	bic.w	r2, r2, #3
 800eddc:	3a04      	subs	r2, #4
 800edde:	2a24      	cmp	r2, #36	; 0x24
 800ede0:	d81a      	bhi.n	800ee18 <_calloc_r+0x50>
 800ede2:	2a13      	cmp	r2, #19
 800ede4:	d912      	bls.n	800ee0c <_calloc_r+0x44>
 800ede6:	2100      	movs	r1, #0
 800ede8:	2a1b      	cmp	r2, #27
 800edea:	6001      	str	r1, [r0, #0]
 800edec:	6041      	str	r1, [r0, #4]
 800edee:	d802      	bhi.n	800edf6 <_calloc_r+0x2e>
 800edf0:	f100 0308 	add.w	r3, r0, #8
 800edf4:	e00b      	b.n	800ee0e <_calloc_r+0x46>
 800edf6:	2a24      	cmp	r2, #36	; 0x24
 800edf8:	6081      	str	r1, [r0, #8]
 800edfa:	60c1      	str	r1, [r0, #12]
 800edfc:	bf11      	iteee	ne
 800edfe:	f100 0310 	addne.w	r3, r0, #16
 800ee02:	6101      	streq	r1, [r0, #16]
 800ee04:	f100 0318 	addeq.w	r3, r0, #24
 800ee08:	6141      	streq	r1, [r0, #20]
 800ee0a:	e000      	b.n	800ee0e <_calloc_r+0x46>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2200      	movs	r2, #0
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	605a      	str	r2, [r3, #4]
 800ee14:	609a      	str	r2, [r3, #8]
 800ee16:	e002      	b.n	800ee1e <_calloc_r+0x56>
 800ee18:	2100      	movs	r1, #0
 800ee1a:	f7fb fbae 	bl	800a57a <memset>
 800ee1e:	4620      	mov	r0, r4
 800ee20:	bd10      	pop	{r4, pc}
	...

0800ee24 <_close_r>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4c06      	ldr	r4, [pc, #24]	; (800ee40 <_close_r+0x1c>)
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	4608      	mov	r0, r1
 800ee2e:	6023      	str	r3, [r4, #0]
 800ee30:	f7f2 fdaa 	bl	8001988 <_close>
 800ee34:	1c43      	adds	r3, r0, #1
 800ee36:	d102      	bne.n	800ee3e <_close_r+0x1a>
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	b103      	cbz	r3, 800ee3e <_close_r+0x1a>
 800ee3c:	602b      	str	r3, [r5, #0]
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	2001491c 	.word	0x2001491c

0800ee44 <_fclose_r>:
 800ee44:	b570      	push	{r4, r5, r6, lr}
 800ee46:	4605      	mov	r5, r0
 800ee48:	460c      	mov	r4, r1
 800ee4a:	b909      	cbnz	r1, 800ee50 <_fclose_r+0xc>
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}
 800ee50:	b118      	cbz	r0, 800ee5a <_fclose_r+0x16>
 800ee52:	6983      	ldr	r3, [r0, #24]
 800ee54:	b90b      	cbnz	r3, 800ee5a <_fclose_r+0x16>
 800ee56:	f7fe fc79 	bl	800d74c <__sinit>
 800ee5a:	4b20      	ldr	r3, [pc, #128]	; (800eedc <_fclose_r+0x98>)
 800ee5c:	429c      	cmp	r4, r3
 800ee5e:	d101      	bne.n	800ee64 <_fclose_r+0x20>
 800ee60:	686c      	ldr	r4, [r5, #4]
 800ee62:	e008      	b.n	800ee76 <_fclose_r+0x32>
 800ee64:	4b1e      	ldr	r3, [pc, #120]	; (800eee0 <_fclose_r+0x9c>)
 800ee66:	429c      	cmp	r4, r3
 800ee68:	d101      	bne.n	800ee6e <_fclose_r+0x2a>
 800ee6a:	68ac      	ldr	r4, [r5, #8]
 800ee6c:	e003      	b.n	800ee76 <_fclose_r+0x32>
 800ee6e:	4b1d      	ldr	r3, [pc, #116]	; (800eee4 <_fclose_r+0xa0>)
 800ee70:	429c      	cmp	r4, r3
 800ee72:	bf08      	it	eq
 800ee74:	68ec      	ldreq	r4, [r5, #12]
 800ee76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d0e6      	beq.n	800ee4c <_fclose_r+0x8>
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4628      	mov	r0, r5
 800ee82:	f7fe fb69 	bl	800d558 <__sflush_r>
 800ee86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ee88:	4606      	mov	r6, r0
 800ee8a:	b133      	cbz	r3, 800ee9a <_fclose_r+0x56>
 800ee8c:	6a21      	ldr	r1, [r4, #32]
 800ee8e:	4628      	mov	r0, r5
 800ee90:	4798      	blx	r3
 800ee92:	2800      	cmp	r0, #0
 800ee94:	bfb8      	it	lt
 800ee96:	f04f 36ff 	movlt.w	r6, #4294967295
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	061b      	lsls	r3, r3, #24
 800ee9e:	d503      	bpl.n	800eea8 <_fclose_r+0x64>
 800eea0:	6921      	ldr	r1, [r4, #16]
 800eea2:	4628      	mov	r0, r5
 800eea4:	f7fe fd1a 	bl	800d8dc <_free_r>
 800eea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeaa:	b141      	cbz	r1, 800eebe <_fclose_r+0x7a>
 800eeac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <_fclose_r+0x76>
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f7fe fd11 	bl	800d8dc <_free_r>
 800eeba:	2300      	movs	r3, #0
 800eebc:	6363      	str	r3, [r4, #52]	; 0x34
 800eebe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eec0:	b121      	cbz	r1, 800eecc <_fclose_r+0x88>
 800eec2:	4628      	mov	r0, r5
 800eec4:	f7fe fd0a 	bl	800d8dc <_free_r>
 800eec8:	2300      	movs	r3, #0
 800eeca:	64a3      	str	r3, [r4, #72]	; 0x48
 800eecc:	f7fe fcae 	bl	800d82c <__sfp_lock_acquire>
 800eed0:	2300      	movs	r3, #0
 800eed2:	81a3      	strh	r3, [r4, #12]
 800eed4:	f7fe fcab 	bl	800d82e <__sfp_lock_release>
 800eed8:	4630      	mov	r0, r6
 800eeda:	bd70      	pop	{r4, r5, r6, pc}
 800eedc:	08011acc 	.word	0x08011acc
 800eee0:	08011aec 	.word	0x08011aec
 800eee4:	08011b0c 	.word	0x08011b0c

0800eee8 <__fputwc>:
 800eee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eeec:	4680      	mov	r8, r0
 800eeee:	460e      	mov	r6, r1
 800eef0:	4614      	mov	r4, r2
 800eef2:	f7fe ff1d 	bl	800dd30 <__locale_mb_cur_max>
 800eef6:	2801      	cmp	r0, #1
 800eef8:	d106      	bne.n	800ef08 <__fputwc+0x20>
 800eefa:	1e73      	subs	r3, r6, #1
 800eefc:	2bfe      	cmp	r3, #254	; 0xfe
 800eefe:	d803      	bhi.n	800ef08 <__fputwc+0x20>
 800ef00:	f88d 6004 	strb.w	r6, [sp, #4]
 800ef04:	4605      	mov	r5, r0
 800ef06:	e00e      	b.n	800ef26 <__fputwc+0x3e>
 800ef08:	4632      	mov	r2, r6
 800ef0a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800ef0e:	a901      	add	r1, sp, #4
 800ef10:	4640      	mov	r0, r8
 800ef12:	f000 f8dd 	bl	800f0d0 <_wcrtomb_r>
 800ef16:	1c42      	adds	r2, r0, #1
 800ef18:	4605      	mov	r5, r0
 800ef1a:	d104      	bne.n	800ef26 <__fputwc+0x3e>
 800ef1c:	89a3      	ldrh	r3, [r4, #12]
 800ef1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef22:	81a3      	strh	r3, [r4, #12]
 800ef24:	e01c      	b.n	800ef60 <__fputwc+0x78>
 800ef26:	2700      	movs	r7, #0
 800ef28:	42af      	cmp	r7, r5
 800ef2a:	d018      	beq.n	800ef5e <__fputwc+0x76>
 800ef2c:	ab01      	add	r3, sp, #4
 800ef2e:	5cf9      	ldrb	r1, [r7, r3]
 800ef30:	68a3      	ldr	r3, [r4, #8]
 800ef32:	3b01      	subs	r3, #1
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	60a3      	str	r3, [r4, #8]
 800ef38:	da04      	bge.n	800ef44 <__fputwc+0x5c>
 800ef3a:	69a2      	ldr	r2, [r4, #24]
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	db06      	blt.n	800ef4e <__fputwc+0x66>
 800ef40:	290a      	cmp	r1, #10
 800ef42:	d004      	beq.n	800ef4e <__fputwc+0x66>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	1c5a      	adds	r2, r3, #1
 800ef48:	6022      	str	r2, [r4, #0]
 800ef4a:	7019      	strb	r1, [r3, #0]
 800ef4c:	e005      	b.n	800ef5a <__fputwc+0x72>
 800ef4e:	4622      	mov	r2, r4
 800ef50:	4640      	mov	r0, r8
 800ef52:	f000 f85f 	bl	800f014 <__swbuf_r>
 800ef56:	1c43      	adds	r3, r0, #1
 800ef58:	d002      	beq.n	800ef60 <__fputwc+0x78>
 800ef5a:	3701      	adds	r7, #1
 800ef5c:	e7e4      	b.n	800ef28 <__fputwc+0x40>
 800ef5e:	4630      	mov	r0, r6
 800ef60:	b002      	add	sp, #8
 800ef62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef66 <_fputwc_r>:
 800ef66:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800ef6a:	b410      	push	{r4}
 800ef6c:	049c      	lsls	r4, r3, #18
 800ef6e:	d406      	bmi.n	800ef7e <_fputwc_r+0x18>
 800ef70:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800ef72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ef76:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800ef7a:	8193      	strh	r3, [r2, #12]
 800ef7c:	6654      	str	r4, [r2, #100]	; 0x64
 800ef7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef82:	f7ff bfb1 	b.w	800eee8 <__fputwc>
	...

0800ef88 <_fstat_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	4c07      	ldr	r4, [pc, #28]	; (800efa8 <_fstat_r+0x20>)
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	4605      	mov	r5, r0
 800ef90:	4608      	mov	r0, r1
 800ef92:	4611      	mov	r1, r2
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	f7f2 fd03 	bl	80019a0 <_fstat>
 800ef9a:	1c43      	adds	r3, r0, #1
 800ef9c:	d102      	bne.n	800efa4 <_fstat_r+0x1c>
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	b103      	cbz	r3, 800efa4 <_fstat_r+0x1c>
 800efa2:	602b      	str	r3, [r5, #0]
 800efa4:	bd38      	pop	{r3, r4, r5, pc}
 800efa6:	bf00      	nop
 800efa8:	2001491c 	.word	0x2001491c

0800efac <_isatty_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	4c06      	ldr	r4, [pc, #24]	; (800efc8 <_isatty_r+0x1c>)
 800efb0:	2300      	movs	r3, #0
 800efb2:	4605      	mov	r5, r0
 800efb4:	4608      	mov	r0, r1
 800efb6:	6023      	str	r3, [r4, #0]
 800efb8:	f7f2 fd02 	bl	80019c0 <_isatty>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d102      	bne.n	800efc6 <_isatty_r+0x1a>
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	b103      	cbz	r3, 800efc6 <_isatty_r+0x1a>
 800efc4:	602b      	str	r3, [r5, #0]
 800efc6:	bd38      	pop	{r3, r4, r5, pc}
 800efc8:	2001491c 	.word	0x2001491c

0800efcc <_lseek_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4c07      	ldr	r4, [pc, #28]	; (800efec <_lseek_r+0x20>)
 800efd0:	4605      	mov	r5, r0
 800efd2:	4608      	mov	r0, r1
 800efd4:	4611      	mov	r1, r2
 800efd6:	2200      	movs	r2, #0
 800efd8:	6022      	str	r2, [r4, #0]
 800efda:	461a      	mov	r2, r3
 800efdc:	f7f2 fcfc 	bl	80019d8 <_lseek>
 800efe0:	1c43      	adds	r3, r0, #1
 800efe2:	d102      	bne.n	800efea <_lseek_r+0x1e>
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	b103      	cbz	r3, 800efea <_lseek_r+0x1e>
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	2001491c 	.word	0x2001491c

0800eff0 <_read_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4c07      	ldr	r4, [pc, #28]	; (800f010 <_read_r+0x20>)
 800eff4:	4605      	mov	r5, r0
 800eff6:	4608      	mov	r0, r1
 800eff8:	4611      	mov	r1, r2
 800effa:	2200      	movs	r2, #0
 800effc:	6022      	str	r2, [r4, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	f7f2 fc5e 	bl	80018c0 <_read>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d102      	bne.n	800f00e <_read_r+0x1e>
 800f008:	6823      	ldr	r3, [r4, #0]
 800f00a:	b103      	cbz	r3, 800f00e <_read_r+0x1e>
 800f00c:	602b      	str	r3, [r5, #0]
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	2001491c 	.word	0x2001491c

0800f014 <__swbuf_r>:
 800f014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f016:	460f      	mov	r7, r1
 800f018:	4614      	mov	r4, r2
 800f01a:	4606      	mov	r6, r0
 800f01c:	b118      	cbz	r0, 800f026 <__swbuf_r+0x12>
 800f01e:	6983      	ldr	r3, [r0, #24]
 800f020:	b90b      	cbnz	r3, 800f026 <__swbuf_r+0x12>
 800f022:	f7fe fb93 	bl	800d74c <__sinit>
 800f026:	4b27      	ldr	r3, [pc, #156]	; (800f0c4 <__swbuf_r+0xb0>)
 800f028:	429c      	cmp	r4, r3
 800f02a:	d101      	bne.n	800f030 <__swbuf_r+0x1c>
 800f02c:	6874      	ldr	r4, [r6, #4]
 800f02e:	e008      	b.n	800f042 <__swbuf_r+0x2e>
 800f030:	4b25      	ldr	r3, [pc, #148]	; (800f0c8 <__swbuf_r+0xb4>)
 800f032:	429c      	cmp	r4, r3
 800f034:	d101      	bne.n	800f03a <__swbuf_r+0x26>
 800f036:	68b4      	ldr	r4, [r6, #8]
 800f038:	e003      	b.n	800f042 <__swbuf_r+0x2e>
 800f03a:	4b24      	ldr	r3, [pc, #144]	; (800f0cc <__swbuf_r+0xb8>)
 800f03c:	429c      	cmp	r4, r3
 800f03e:	bf08      	it	eq
 800f040:	68f4      	ldreq	r4, [r6, #12]
 800f042:	69a3      	ldr	r3, [r4, #24]
 800f044:	60a3      	str	r3, [r4, #8]
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	0719      	lsls	r1, r3, #28
 800f04a:	d50e      	bpl.n	800f06a <__swbuf_r+0x56>
 800f04c:	6923      	ldr	r3, [r4, #16]
 800f04e:	b163      	cbz	r3, 800f06a <__swbuf_r+0x56>
 800f050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f054:	049a      	lsls	r2, r3, #18
 800f056:	b2fd      	uxtb	r5, r7
 800f058:	d410      	bmi.n	800f07c <__swbuf_r+0x68>
 800f05a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f05e:	81a3      	strh	r3, [r4, #12]
 800f060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f066:	6663      	str	r3, [r4, #100]	; 0x64
 800f068:	e008      	b.n	800f07c <__swbuf_r+0x68>
 800f06a:	4621      	mov	r1, r4
 800f06c:	4630      	mov	r0, r6
 800f06e:	f7fd fbd3 	bl	800c818 <__swsetup_r>
 800f072:	2800      	cmp	r0, #0
 800f074:	d0ec      	beq.n	800f050 <__swbuf_r+0x3c>
 800f076:	f04f 30ff 	mov.w	r0, #4294967295
 800f07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	6920      	ldr	r0, [r4, #16]
 800f080:	1a18      	subs	r0, r3, r0
 800f082:	6963      	ldr	r3, [r4, #20]
 800f084:	4298      	cmp	r0, r3
 800f086:	db05      	blt.n	800f094 <__swbuf_r+0x80>
 800f088:	4621      	mov	r1, r4
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7fe faf4 	bl	800d678 <_fflush_r>
 800f090:	2800      	cmp	r0, #0
 800f092:	d1f0      	bne.n	800f076 <__swbuf_r+0x62>
 800f094:	68a3      	ldr	r3, [r4, #8]
 800f096:	3b01      	subs	r3, #1
 800f098:	60a3      	str	r3, [r4, #8]
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	6022      	str	r2, [r4, #0]
 800f0a0:	701f      	strb	r7, [r3, #0]
 800f0a2:	6962      	ldr	r2, [r4, #20]
 800f0a4:	1c43      	adds	r3, r0, #1
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d004      	beq.n	800f0b4 <__swbuf_r+0xa0>
 800f0aa:	89a3      	ldrh	r3, [r4, #12]
 800f0ac:	07db      	lsls	r3, r3, #31
 800f0ae:	d507      	bpl.n	800f0c0 <__swbuf_r+0xac>
 800f0b0:	2d0a      	cmp	r5, #10
 800f0b2:	d105      	bne.n	800f0c0 <__swbuf_r+0xac>
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	f7fe fade 	bl	800d678 <_fflush_r>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d1da      	bne.n	800f076 <__swbuf_r+0x62>
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0c4:	08011acc 	.word	0x08011acc
 800f0c8:	08011aec 	.word	0x08011aec
 800f0cc:	08011b0c 	.word	0x08011b0c

0800f0d0 <_wcrtomb_r>:
 800f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d4:	461d      	mov	r5, r3
 800f0d6:	4b0f      	ldr	r3, [pc, #60]	; (800f114 <_wcrtomb_r+0x44>)
 800f0d8:	b086      	sub	sp, #24
 800f0da:	4604      	mov	r4, r0
 800f0dc:	4690      	mov	r8, r2
 800f0de:	460e      	mov	r6, r1
 800f0e0:	681f      	ldr	r7, [r3, #0]
 800f0e2:	b931      	cbnz	r1, 800f0f2 <_wcrtomb_r+0x22>
 800f0e4:	f7fe fe20 	bl	800dd28 <__locale_charset>
 800f0e8:	9500      	str	r5, [sp, #0]
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	4632      	mov	r2, r6
 800f0ee:	a903      	add	r1, sp, #12
 800f0f0:	e005      	b.n	800f0fe <_wcrtomb_r+0x2e>
 800f0f2:	f7fe fe19 	bl	800dd28 <__locale_charset>
 800f0f6:	9500      	str	r5, [sp, #0]
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	4642      	mov	r2, r8
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4620      	mov	r0, r4
 800f100:	47b8      	blx	r7
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	bf01      	itttt	eq
 800f106:	2300      	moveq	r3, #0
 800f108:	602b      	streq	r3, [r5, #0]
 800f10a:	238a      	moveq	r3, #138	; 0x8a
 800f10c:	6023      	streq	r3, [r4, #0]
 800f10e:	b006      	add	sp, #24
 800f110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f114:	20010594 	.word	0x20010594

0800f118 <__ascii_wctomb>:
 800f118:	b149      	cbz	r1, 800f12e <__ascii_wctomb+0x16>
 800f11a:	2aff      	cmp	r2, #255	; 0xff
 800f11c:	bf85      	ittet	hi
 800f11e:	238a      	movhi	r3, #138	; 0x8a
 800f120:	6003      	strhi	r3, [r0, #0]
 800f122:	700a      	strbls	r2, [r1, #0]
 800f124:	f04f 30ff 	movhi.w	r0, #4294967295
 800f128:	bf98      	it	ls
 800f12a:	2001      	movls	r0, #1
 800f12c:	4770      	bx	lr
 800f12e:	4608      	mov	r0, r1
 800f130:	4770      	bx	lr
 800f132:	0000      	movs	r0, r0
 800f134:	0000      	movs	r0, r0
	...

0800f138 <cos>:
 800f138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f13a:	ec51 0b10 	vmov	r0, r1, d0
 800f13e:	4a1e      	ldr	r2, [pc, #120]	; (800f1b8 <cos+0x80>)
 800f140:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f144:	4293      	cmp	r3, r2
 800f146:	dc02      	bgt.n	800f14e <cos+0x16>
 800f148:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800f1b0 <cos+0x78>
 800f14c:	e016      	b.n	800f17c <cos+0x44>
 800f14e:	4a1b      	ldr	r2, [pc, #108]	; (800f1bc <cos+0x84>)
 800f150:	4293      	cmp	r3, r2
 800f152:	dd05      	ble.n	800f160 <cos+0x28>
 800f154:	ee10 2a10 	vmov	r2, s0
 800f158:	460b      	mov	r3, r1
 800f15a:	f7f1 f8b5 	bl	80002c8 <__aeabi_dsub>
 800f15e:	e021      	b.n	800f1a4 <cos+0x6c>
 800f160:	4668      	mov	r0, sp
 800f162:	f000 f9b5 	bl	800f4d0 <__ieee754_rem_pio2>
 800f166:	f000 0003 	and.w	r0, r0, #3
 800f16a:	2801      	cmp	r0, #1
 800f16c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f170:	ed9d 0b00 	vldr	d0, [sp]
 800f174:	d005      	beq.n	800f182 <cos+0x4a>
 800f176:	2802      	cmp	r0, #2
 800f178:	d006      	beq.n	800f188 <cos+0x50>
 800f17a:	b970      	cbnz	r0, 800f19a <cos+0x62>
 800f17c:	f000 fc5c 	bl	800fa38 <__kernel_cos>
 800f180:	e00e      	b.n	800f1a0 <cos+0x68>
 800f182:	f001 f891 	bl	80102a8 <__kernel_sin>
 800f186:	e001      	b.n	800f18c <cos+0x54>
 800f188:	f000 fc56 	bl	800fa38 <__kernel_cos>
 800f18c:	ec53 2b10 	vmov	r2, r3, d0
 800f190:	ee10 0a10 	vmov	r0, s0
 800f194:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f198:	e004      	b.n	800f1a4 <cos+0x6c>
 800f19a:	2001      	movs	r0, #1
 800f19c:	f001 f884 	bl	80102a8 <__kernel_sin>
 800f1a0:	ec51 0b10 	vmov	r0, r1, d0
 800f1a4:	ec41 0b10 	vmov	d0, r0, r1
 800f1a8:	b005      	add	sp, #20
 800f1aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1ae:	bf00      	nop
	...
 800f1b8:	3fe921fb 	.word	0x3fe921fb
 800f1bc:	7fefffff 	.word	0x7fefffff

0800f1c0 <sin>:
 800f1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1c2:	ec51 0b10 	vmov	r0, r1, d0
 800f1c6:	4a20      	ldr	r2, [pc, #128]	; (800f248 <sin+0x88>)
 800f1c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	dc03      	bgt.n	800f1d8 <sin+0x18>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800f240 <sin+0x80>
 800f1d6:	e017      	b.n	800f208 <sin+0x48>
 800f1d8:	4a1c      	ldr	r2, [pc, #112]	; (800f24c <sin+0x8c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	dd05      	ble.n	800f1ea <sin+0x2a>
 800f1de:	ee10 2a10 	vmov	r2, s0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	f7f1 f870 	bl	80002c8 <__aeabi_dsub>
 800f1e8:	e022      	b.n	800f230 <sin+0x70>
 800f1ea:	4668      	mov	r0, sp
 800f1ec:	f000 f970 	bl	800f4d0 <__ieee754_rem_pio2>
 800f1f0:	f000 0003 	and.w	r0, r0, #3
 800f1f4:	2801      	cmp	r0, #1
 800f1f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1fa:	ed9d 0b00 	vldr	d0, [sp]
 800f1fe:	d008      	beq.n	800f212 <sin+0x52>
 800f200:	2802      	cmp	r0, #2
 800f202:	d009      	beq.n	800f218 <sin+0x58>
 800f204:	b960      	cbnz	r0, 800f220 <sin+0x60>
 800f206:	2001      	movs	r0, #1
 800f208:	f001 f84e 	bl	80102a8 <__kernel_sin>
 800f20c:	ec51 0b10 	vmov	r0, r1, d0
 800f210:	e00e      	b.n	800f230 <sin+0x70>
 800f212:	f000 fc11 	bl	800fa38 <__kernel_cos>
 800f216:	e7f9      	b.n	800f20c <sin+0x4c>
 800f218:	2001      	movs	r0, #1
 800f21a:	f001 f845 	bl	80102a8 <__kernel_sin>
 800f21e:	e001      	b.n	800f224 <sin+0x64>
 800f220:	f000 fc0a 	bl	800fa38 <__kernel_cos>
 800f224:	ec53 2b10 	vmov	r2, r3, d0
 800f228:	ee10 0a10 	vmov	r0, s0
 800f22c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f230:	ec41 0b10 	vmov	d0, r0, r1
 800f234:	b005      	add	sp, #20
 800f236:	f85d fb04 	ldr.w	pc, [sp], #4
 800f23a:	bf00      	nop
 800f23c:	f3af 8000 	nop.w
	...
 800f248:	3fe921fb 	.word	0x3fe921fb
 800f24c:	7fefffff 	.word	0x7fefffff

0800f250 <atan2>:
 800f250:	f000 b85e 	b.w	800f310 <__ieee754_atan2>

0800f254 <sqrt>:
 800f254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f258:	ed2d 8b02 	vpush	{d8}
 800f25c:	b08b      	sub	sp, #44	; 0x2c
 800f25e:	ec55 4b10 	vmov	r4, r5, d0
 800f262:	f000 fb33 	bl	800f8cc <__ieee754_sqrt>
 800f266:	4b27      	ldr	r3, [pc, #156]	; (800f304 <sqrt+0xb0>)
 800f268:	eeb0 8a40 	vmov.f32	s16, s0
 800f26c:	eef0 8a60 	vmov.f32	s17, s1
 800f270:	f993 6000 	ldrsb.w	r6, [r3]
 800f274:	1c73      	adds	r3, r6, #1
 800f276:	d03b      	beq.n	800f2f0 <sqrt+0x9c>
 800f278:	4622      	mov	r2, r4
 800f27a:	462b      	mov	r3, r5
 800f27c:	4620      	mov	r0, r4
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 fc70 	bl	8000b64 <__aeabi_dcmpun>
 800f284:	4607      	mov	r7, r0
 800f286:	2800      	cmp	r0, #0
 800f288:	d132      	bne.n	800f2f0 <sqrt+0x9c>
 800f28a:	f04f 0800 	mov.w	r8, #0
 800f28e:	f04f 0900 	mov.w	r9, #0
 800f292:	4642      	mov	r2, r8
 800f294:	464b      	mov	r3, r9
 800f296:	4620      	mov	r0, r4
 800f298:	4629      	mov	r1, r5
 800f29a:	f7f1 fc3b 	bl	8000b14 <__aeabi_dcmplt>
 800f29e:	b338      	cbz	r0, 800f2f0 <sqrt+0x9c>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4b18      	ldr	r3, [pc, #96]	; (800f308 <sqrt+0xb4>)
 800f2a6:	9301      	str	r3, [sp, #4]
 800f2a8:	9708      	str	r7, [sp, #32]
 800f2aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f2ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f2b2:	b916      	cbnz	r6, 800f2ba <sqrt+0x66>
 800f2b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800f2b8:	e009      	b.n	800f2ce <sqrt+0x7a>
 800f2ba:	4642      	mov	r2, r8
 800f2bc:	464b      	mov	r3, r9
 800f2be:	4640      	mov	r0, r8
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	f7f1 fadf 	bl	8000884 <__aeabi_ddiv>
 800f2c6:	2e02      	cmp	r6, #2
 800f2c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f2cc:	d003      	beq.n	800f2d6 <sqrt+0x82>
 800f2ce:	4668      	mov	r0, sp
 800f2d0:	f001 fad6 	bl	8010880 <matherr>
 800f2d4:	b918      	cbnz	r0, 800f2de <sqrt+0x8a>
 800f2d6:	f7fb f919 	bl	800a50c <__errno>
 800f2da:	2321      	movs	r3, #33	; 0x21
 800f2dc:	6003      	str	r3, [r0, #0]
 800f2de:	9b08      	ldr	r3, [sp, #32]
 800f2e0:	b11b      	cbz	r3, 800f2ea <sqrt+0x96>
 800f2e2:	f7fb f913 	bl	800a50c <__errno>
 800f2e6:	9b08      	ldr	r3, [sp, #32]
 800f2e8:	6003      	str	r3, [r0, #0]
 800f2ea:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f2ee:	e003      	b.n	800f2f8 <sqrt+0xa4>
 800f2f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f2f4:	eef0 0a68 	vmov.f32	s1, s17
 800f2f8:	b00b      	add	sp, #44	; 0x2c
 800f2fa:	ecbd 8b02 	vpop	{d8}
 800f2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f302:	bf00      	nop
 800f304:	20010598 	.word	0x20010598
 800f308:	08011c34 	.word	0x08011c34
 800f30c:	00000000 	.word	0x00000000

0800f310 <__ieee754_atan2>:
 800f310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f314:	ec57 6b11 	vmov	r6, r7, d1
 800f318:	4273      	negs	r3, r6
 800f31a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f31e:	4333      	orrs	r3, r6
 800f320:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800f4c8 <__ieee754_atan2+0x1b8>
 800f324:	ec51 0b10 	vmov	r0, r1, d0
 800f328:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f32c:	4563      	cmp	r3, ip
 800f32e:	ee11 8a10 	vmov	r8, s2
 800f332:	ee10 9a10 	vmov	r9, s0
 800f336:	468e      	mov	lr, r1
 800f338:	d807      	bhi.n	800f34a <__ieee754_atan2+0x3a>
 800f33a:	4244      	negs	r4, r0
 800f33c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f340:	4304      	orrs	r4, r0
 800f342:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f346:	4564      	cmp	r4, ip
 800f348:	d906      	bls.n	800f358 <__ieee754_atan2+0x48>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	4630      	mov	r0, r6
 800f350:	4639      	mov	r1, r7
 800f352:	f7f0 ffbb 	bl	80002cc <__adddf3>
 800f356:	e08d      	b.n	800f474 <__ieee754_atan2+0x164>
 800f358:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f35c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f360:	4334      	orrs	r4, r6
 800f362:	d103      	bne.n	800f36c <__ieee754_atan2+0x5c>
 800f364:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f368:	f001 b85a 	b.w	8010420 <atan>
 800f36c:	17bc      	asrs	r4, r7, #30
 800f36e:	f004 0402 	and.w	r4, r4, #2
 800f372:	ea59 0903 	orrs.w	r9, r9, r3
 800f376:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f37a:	d104      	bne.n	800f386 <__ieee754_atan2+0x76>
 800f37c:	2c02      	cmp	r4, #2
 800f37e:	d06c      	beq.n	800f45a <__ieee754_atan2+0x14a>
 800f380:	2c03      	cmp	r4, #3
 800f382:	d177      	bne.n	800f474 <__ieee754_atan2+0x164>
 800f384:	e023      	b.n	800f3ce <__ieee754_atan2+0xbe>
 800f386:	ea58 0802 	orrs.w	r8, r8, r2
 800f38a:	d026      	beq.n	800f3da <__ieee754_atan2+0xca>
 800f38c:	4562      	cmp	r2, ip
 800f38e:	d122      	bne.n	800f3d6 <__ieee754_atan2+0xc6>
 800f390:	4293      	cmp	r3, r2
 800f392:	d111      	bne.n	800f3b8 <__ieee754_atan2+0xa8>
 800f394:	2c02      	cmp	r4, #2
 800f396:	d007      	beq.n	800f3a8 <__ieee754_atan2+0x98>
 800f398:	2c03      	cmp	r4, #3
 800f39a:	d009      	beq.n	800f3b0 <__ieee754_atan2+0xa0>
 800f39c:	2c01      	cmp	r4, #1
 800f39e:	d160      	bne.n	800f462 <__ieee754_atan2+0x152>
 800f3a0:	a137      	add	r1, pc, #220	; (adr r1, 800f480 <__ieee754_atan2+0x170>)
 800f3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a6:	e065      	b.n	800f474 <__ieee754_atan2+0x164>
 800f3a8:	a137      	add	r1, pc, #220	; (adr r1, 800f488 <__ieee754_atan2+0x178>)
 800f3aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ae:	e061      	b.n	800f474 <__ieee754_atan2+0x164>
 800f3b0:	a137      	add	r1, pc, #220	; (adr r1, 800f490 <__ieee754_atan2+0x180>)
 800f3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b6:	e05d      	b.n	800f474 <__ieee754_atan2+0x164>
 800f3b8:	2c02      	cmp	r4, #2
 800f3ba:	d04e      	beq.n	800f45a <__ieee754_atan2+0x14a>
 800f3bc:	2c03      	cmp	r4, #3
 800f3be:	d006      	beq.n	800f3ce <__ieee754_atan2+0xbe>
 800f3c0:	2c01      	cmp	r4, #1
 800f3c2:	f04f 0000 	mov.w	r0, #0
 800f3c6:	d150      	bne.n	800f46a <__ieee754_atan2+0x15a>
 800f3c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f3cc:	e052      	b.n	800f474 <__ieee754_atan2+0x164>
 800f3ce:	a132      	add	r1, pc, #200	; (adr r1, 800f498 <__ieee754_atan2+0x188>)
 800f3d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3d4:	e04e      	b.n	800f474 <__ieee754_atan2+0x164>
 800f3d6:	4563      	cmp	r3, ip
 800f3d8:	d106      	bne.n	800f3e8 <__ieee754_atan2+0xd8>
 800f3da:	f1be 0f00 	cmp.w	lr, #0
 800f3de:	da46      	bge.n	800f46e <__ieee754_atan2+0x15e>
 800f3e0:	a12f      	add	r1, pc, #188	; (adr r1, 800f4a0 <__ieee754_atan2+0x190>)
 800f3e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3e6:	e045      	b.n	800f474 <__ieee754_atan2+0x164>
 800f3e8:	1a9b      	subs	r3, r3, r2
 800f3ea:	151b      	asrs	r3, r3, #20
 800f3ec:	2b3c      	cmp	r3, #60	; 0x3c
 800f3ee:	dc10      	bgt.n	800f412 <__ieee754_atan2+0x102>
 800f3f0:	2f00      	cmp	r7, #0
 800f3f2:	da01      	bge.n	800f3f8 <__ieee754_atan2+0xe8>
 800f3f4:	333c      	adds	r3, #60	; 0x3c
 800f3f6:	db10      	blt.n	800f41a <__ieee754_atan2+0x10a>
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	463b      	mov	r3, r7
 800f3fc:	f7f1 fa42 	bl	8000884 <__aeabi_ddiv>
 800f400:	ec41 0b10 	vmov	d0, r0, r1
 800f404:	f001 f9b0 	bl	8010768 <fabs>
 800f408:	f001 f80a 	bl	8010420 <atan>
 800f40c:	ec51 0b10 	vmov	r0, r1, d0
 800f410:	e005      	b.n	800f41e <__ieee754_atan2+0x10e>
 800f412:	a125      	add	r1, pc, #148	; (adr r1, 800f4a8 <__ieee754_atan2+0x198>)
 800f414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f418:	e001      	b.n	800f41e <__ieee754_atan2+0x10e>
 800f41a:	2000      	movs	r0, #0
 800f41c:	2100      	movs	r1, #0
 800f41e:	2c01      	cmp	r4, #1
 800f420:	d00b      	beq.n	800f43a <__ieee754_atan2+0x12a>
 800f422:	2c02      	cmp	r4, #2
 800f424:	d00c      	beq.n	800f440 <__ieee754_atan2+0x130>
 800f426:	b32c      	cbz	r4, 800f474 <__ieee754_atan2+0x164>
 800f428:	a321      	add	r3, pc, #132	; (adr r3, 800f4b0 <__ieee754_atan2+0x1a0>)
 800f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42e:	f7f0 ff4b 	bl	80002c8 <__aeabi_dsub>
 800f432:	a321      	add	r3, pc, #132	; (adr r3, 800f4b8 <__ieee754_atan2+0x1a8>)
 800f434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f438:	e00c      	b.n	800f454 <__ieee754_atan2+0x144>
 800f43a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f43e:	e019      	b.n	800f474 <__ieee754_atan2+0x164>
 800f440:	a31b      	add	r3, pc, #108	; (adr r3, 800f4b0 <__ieee754_atan2+0x1a0>)
 800f442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f446:	f7f0 ff3f 	bl	80002c8 <__aeabi_dsub>
 800f44a:	4602      	mov	r2, r0
 800f44c:	460b      	mov	r3, r1
 800f44e:	a11a      	add	r1, pc, #104	; (adr r1, 800f4b8 <__ieee754_atan2+0x1a8>)
 800f450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f454:	f7f0 ff38 	bl	80002c8 <__aeabi_dsub>
 800f458:	e00c      	b.n	800f474 <__ieee754_atan2+0x164>
 800f45a:	a117      	add	r1, pc, #92	; (adr r1, 800f4b8 <__ieee754_atan2+0x1a8>)
 800f45c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f460:	e008      	b.n	800f474 <__ieee754_atan2+0x164>
 800f462:	a117      	add	r1, pc, #92	; (adr r1, 800f4c0 <__ieee754_atan2+0x1b0>)
 800f464:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f468:	e004      	b.n	800f474 <__ieee754_atan2+0x164>
 800f46a:	2100      	movs	r1, #0
 800f46c:	e002      	b.n	800f474 <__ieee754_atan2+0x164>
 800f46e:	a10e      	add	r1, pc, #56	; (adr r1, 800f4a8 <__ieee754_atan2+0x198>)
 800f470:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f474:	ec41 0b10 	vmov	d0, r0, r1
 800f478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47c:	f3af 8000 	nop.w
 800f480:	54442d18 	.word	0x54442d18
 800f484:	bfe921fb 	.word	0xbfe921fb
 800f488:	7f3321d2 	.word	0x7f3321d2
 800f48c:	4002d97c 	.word	0x4002d97c
 800f490:	7f3321d2 	.word	0x7f3321d2
 800f494:	c002d97c 	.word	0xc002d97c
 800f498:	54442d18 	.word	0x54442d18
 800f49c:	c00921fb 	.word	0xc00921fb
 800f4a0:	54442d18 	.word	0x54442d18
 800f4a4:	bff921fb 	.word	0xbff921fb
 800f4a8:	54442d18 	.word	0x54442d18
 800f4ac:	3ff921fb 	.word	0x3ff921fb
 800f4b0:	33145c07 	.word	0x33145c07
 800f4b4:	3ca1a626 	.word	0x3ca1a626
 800f4b8:	54442d18 	.word	0x54442d18
 800f4bc:	400921fb 	.word	0x400921fb
 800f4c0:	54442d18 	.word	0x54442d18
 800f4c4:	3fe921fb 	.word	0x3fe921fb
 800f4c8:	7ff00000 	.word	0x7ff00000
 800f4cc:	00000000 	.word	0x00000000

0800f4d0 <__ieee754_rem_pio2>:
 800f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d4:	ec55 4b10 	vmov	r4, r5, d0
 800f4d8:	4bc7      	ldr	r3, [pc, #796]	; (800f7f8 <__ieee754_rem_pio2+0x328>)
 800f4da:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f4de:	4598      	cmp	r8, r3
 800f4e0:	b08d      	sub	sp, #52	; 0x34
 800f4e2:	4682      	mov	sl, r0
 800f4e4:	46ab      	mov	fp, r5
 800f4e6:	dc06      	bgt.n	800f4f6 <__ieee754_rem_pio2+0x26>
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	ed8a 0b00 	vstr	d0, [sl]
 800f4f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f4f4:	e160      	b.n	800f7b8 <__ieee754_rem_pio2+0x2e8>
 800f4f6:	4bc1      	ldr	r3, [pc, #772]	; (800f7fc <__ieee754_rem_pio2+0x32c>)
 800f4f8:	4598      	cmp	r8, r3
 800f4fa:	dc71      	bgt.n	800f5e0 <__ieee754_rem_pio2+0x110>
 800f4fc:	2d00      	cmp	r5, #0
 800f4fe:	a3b0      	add	r3, pc, #704	; (adr r3, 800f7c0 <__ieee754_rem_pio2+0x2f0>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	ee10 0a10 	vmov	r0, s0
 800f508:	4629      	mov	r1, r5
 800f50a:	4ebd      	ldr	r6, [pc, #756]	; (800f800 <__ieee754_rem_pio2+0x330>)
 800f50c:	dd33      	ble.n	800f576 <__ieee754_rem_pio2+0xa6>
 800f50e:	f7f0 fedb 	bl	80002c8 <__aeabi_dsub>
 800f512:	45b0      	cmp	r8, r6
 800f514:	4604      	mov	r4, r0
 800f516:	460d      	mov	r5, r1
 800f518:	d010      	beq.n	800f53c <__ieee754_rem_pio2+0x6c>
 800f51a:	a3ab      	add	r3, pc, #684	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x2f8>)
 800f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f520:	f7f0 fed2 	bl	80002c8 <__aeabi_dsub>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	e9ca 2300 	strd	r2, r3, [sl]
 800f52c:	4620      	mov	r0, r4
 800f52e:	4629      	mov	r1, r5
 800f530:	f7f0 feca 	bl	80002c8 <__aeabi_dsub>
 800f534:	a3a4      	add	r3, pc, #656	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x2f8>)
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	e016      	b.n	800f56a <__ieee754_rem_pio2+0x9a>
 800f53c:	a3a4      	add	r3, pc, #656	; (adr r3, 800f7d0 <__ieee754_rem_pio2+0x300>)
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	f7f0 fec1 	bl	80002c8 <__aeabi_dsub>
 800f546:	a3a4      	add	r3, pc, #656	; (adr r3, 800f7d8 <__ieee754_rem_pio2+0x308>)
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	4604      	mov	r4, r0
 800f54e:	460d      	mov	r5, r1
 800f550:	f7f0 feba 	bl	80002c8 <__aeabi_dsub>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	e9ca 2300 	strd	r2, r3, [sl]
 800f55c:	4620      	mov	r0, r4
 800f55e:	4629      	mov	r1, r5
 800f560:	f7f0 feb2 	bl	80002c8 <__aeabi_dsub>
 800f564:	a39c      	add	r3, pc, #624	; (adr r3, 800f7d8 <__ieee754_rem_pio2+0x308>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f7f0 fead 	bl	80002c8 <__aeabi_dsub>
 800f56e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f572:	2001      	movs	r0, #1
 800f574:	e1a2      	b.n	800f8bc <__ieee754_rem_pio2+0x3ec>
 800f576:	f7f0 fea9 	bl	80002cc <__adddf3>
 800f57a:	45b0      	cmp	r8, r6
 800f57c:	4604      	mov	r4, r0
 800f57e:	460d      	mov	r5, r1
 800f580:	d010      	beq.n	800f5a4 <__ieee754_rem_pio2+0xd4>
 800f582:	a391      	add	r3, pc, #580	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x2f8>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f0 fea0 	bl	80002cc <__adddf3>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	e9ca 2300 	strd	r2, r3, [sl]
 800f594:	4620      	mov	r0, r4
 800f596:	4629      	mov	r1, r5
 800f598:	f7f0 fe96 	bl	80002c8 <__aeabi_dsub>
 800f59c:	a38a      	add	r3, pc, #552	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x2f8>)
 800f59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a2:	e016      	b.n	800f5d2 <__ieee754_rem_pio2+0x102>
 800f5a4:	a38a      	add	r3, pc, #552	; (adr r3, 800f7d0 <__ieee754_rem_pio2+0x300>)
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	f7f0 fe8f 	bl	80002cc <__adddf3>
 800f5ae:	a38a      	add	r3, pc, #552	; (adr r3, 800f7d8 <__ieee754_rem_pio2+0x308>)
 800f5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	460d      	mov	r5, r1
 800f5b8:	f7f0 fe88 	bl	80002cc <__adddf3>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	e9ca 2300 	strd	r2, r3, [sl]
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	4629      	mov	r1, r5
 800f5c8:	f7f0 fe7e 	bl	80002c8 <__aeabi_dsub>
 800f5cc:	a382      	add	r3, pc, #520	; (adr r3, 800f7d8 <__ieee754_rem_pio2+0x308>)
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	f7f0 fe7b 	bl	80002cc <__adddf3>
 800f5d6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f5da:	f04f 30ff 	mov.w	r0, #4294967295
 800f5de:	e16d      	b.n	800f8bc <__ieee754_rem_pio2+0x3ec>
 800f5e0:	4b88      	ldr	r3, [pc, #544]	; (800f804 <__ieee754_rem_pio2+0x334>)
 800f5e2:	4598      	cmp	r8, r3
 800f5e4:	f300 80da 	bgt.w	800f79c <__ieee754_rem_pio2+0x2cc>
 800f5e8:	f001 f8be 	bl	8010768 <fabs>
 800f5ec:	ec55 4b10 	vmov	r4, r5, d0
 800f5f0:	ee10 0a10 	vmov	r0, s0
 800f5f4:	a37a      	add	r3, pc, #488	; (adr r3, 800f7e0 <__ieee754_rem_pio2+0x310>)
 800f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fa:	4629      	mov	r1, r5
 800f5fc:	f7f1 f818 	bl	8000630 <__aeabi_dmul>
 800f600:	2200      	movs	r2, #0
 800f602:	4b81      	ldr	r3, [pc, #516]	; (800f808 <__ieee754_rem_pio2+0x338>)
 800f604:	f7f0 fe62 	bl	80002cc <__adddf3>
 800f608:	f7f1 fac2 	bl	8000b90 <__aeabi_d2iz>
 800f60c:	4681      	mov	r9, r0
 800f60e:	f7f0 ffa9 	bl	8000564 <__aeabi_i2d>
 800f612:	a36b      	add	r3, pc, #428	; (adr r3, 800f7c0 <__ieee754_rem_pio2+0x2f0>)
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f61c:	f7f1 f808 	bl	8000630 <__aeabi_dmul>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	4620      	mov	r0, r4
 800f626:	4629      	mov	r1, r5
 800f628:	f7f0 fe4e 	bl	80002c8 <__aeabi_dsub>
 800f62c:	a366      	add	r3, pc, #408	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x2f8>)
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	4604      	mov	r4, r0
 800f634:	460d      	mov	r5, r1
 800f636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f63a:	f7f0 fff9 	bl	8000630 <__aeabi_dmul>
 800f63e:	f1b9 0f1f 	cmp.w	r9, #31
 800f642:	4606      	mov	r6, r0
 800f644:	460f      	mov	r7, r1
 800f646:	dc06      	bgt.n	800f656 <__ieee754_rem_pio2+0x186>
 800f648:	f109 32ff 	add.w	r2, r9, #4294967295
 800f64c:	4b6f      	ldr	r3, [pc, #444]	; (800f80c <__ieee754_rem_pio2+0x33c>)
 800f64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f652:	4598      	cmp	r8, r3
 800f654:	d172      	bne.n	800f73c <__ieee754_rem_pio2+0x26c>
 800f656:	463b      	mov	r3, r7
 800f658:	4632      	mov	r2, r6
 800f65a:	4620      	mov	r0, r4
 800f65c:	4629      	mov	r1, r5
 800f65e:	f7f0 fe33 	bl	80002c8 <__aeabi_dsub>
 800f662:	ea4f 5828 	mov.w	r8, r8, asr #20
 800f666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f66a:	ebc3 0308 	rsb	r3, r3, r8
 800f66e:	2b10      	cmp	r3, #16
 800f670:	e9ca 0100 	strd	r0, r1, [sl]
 800f674:	dd6d      	ble.n	800f752 <__ieee754_rem_pio2+0x282>
 800f676:	a356      	add	r3, pc, #344	; (adr r3, 800f7d0 <__ieee754_rem_pio2+0x300>)
 800f678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f680:	f7f0 ffd6 	bl	8000630 <__aeabi_dmul>
 800f684:	4606      	mov	r6, r0
 800f686:	460f      	mov	r7, r1
 800f688:	4602      	mov	r2, r0
 800f68a:	460b      	mov	r3, r1
 800f68c:	4620      	mov	r0, r4
 800f68e:	4629      	mov	r1, r5
 800f690:	f7f0 fe1a 	bl	80002c8 <__aeabi_dsub>
 800f694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f7f0 fe12 	bl	80002c8 <__aeabi_dsub>
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	463b      	mov	r3, r7
 800f6a8:	f7f0 fe0e 	bl	80002c8 <__aeabi_dsub>
 800f6ac:	a34a      	add	r3, pc, #296	; (adr r3, 800f7d8 <__ieee754_rem_pio2+0x308>)
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	460d      	mov	r5, r1
 800f6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ba:	f7f0 ffb9 	bl	8000630 <__aeabi_dmul>
 800f6be:	4622      	mov	r2, r4
 800f6c0:	462b      	mov	r3, r5
 800f6c2:	f7f0 fe01 	bl	80002c8 <__aeabi_dsub>
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6d2:	f7f0 fdf9 	bl	80002c8 <__aeabi_dsub>
 800f6d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6da:	ebc3 0808 	rsb	r8, r3, r8
 800f6de:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 800f6e2:	e9ca 0100 	strd	r0, r1, [sl]
 800f6e6:	dd32      	ble.n	800f74e <__ieee754_rem_pio2+0x27e>
 800f6e8:	a33f      	add	r3, pc, #252	; (adr r3, 800f7e8 <__ieee754_rem_pio2+0x318>)
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f2:	f7f0 ff9d 	bl	8000630 <__aeabi_dmul>
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	460f      	mov	r7, r1
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f702:	f7f0 fde1 	bl	80002c8 <__aeabi_dsub>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4604      	mov	r4, r0
 800f70c:	460d      	mov	r5, r1
 800f70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f712:	f7f0 fdd9 	bl	80002c8 <__aeabi_dsub>
 800f716:	4632      	mov	r2, r6
 800f718:	463b      	mov	r3, r7
 800f71a:	f7f0 fdd5 	bl	80002c8 <__aeabi_dsub>
 800f71e:	a334      	add	r3, pc, #208	; (adr r3, 800f7f0 <__ieee754_rem_pio2+0x320>)
 800f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f724:	4606      	mov	r6, r0
 800f726:	460f      	mov	r7, r1
 800f728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f72c:	f7f0 ff80 	bl	8000630 <__aeabi_dmul>
 800f730:	4632      	mov	r2, r6
 800f732:	463b      	mov	r3, r7
 800f734:	f7f0 fdc8 	bl	80002c8 <__aeabi_dsub>
 800f738:	4606      	mov	r6, r0
 800f73a:	460f      	mov	r7, r1
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	4620      	mov	r0, r4
 800f742:	4629      	mov	r1, r5
 800f744:	f7f0 fdc0 	bl	80002c8 <__aeabi_dsub>
 800f748:	e9ca 0100 	strd	r0, r1, [sl]
 800f74c:	e001      	b.n	800f752 <__ieee754_rem_pio2+0x282>
 800f74e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f752:	ed9a 7b00 	vldr	d7, [sl]
 800f756:	4620      	mov	r0, r4
 800f758:	ec53 2b17 	vmov	r2, r3, d7
 800f75c:	4629      	mov	r1, r5
 800f75e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f762:	f7f0 fdb1 	bl	80002c8 <__aeabi_dsub>
 800f766:	4632      	mov	r2, r6
 800f768:	463b      	mov	r3, r7
 800f76a:	f7f0 fdad 	bl	80002c8 <__aeabi_dsub>
 800f76e:	f1bb 0f00 	cmp.w	fp, #0
 800f772:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f776:	f280 80a0 	bge.w	800f8ba <__ieee754_rem_pio2+0x3ea>
 800f77a:	9b02      	ldr	r3, [sp, #8]
 800f77c:	f8ca 3000 	str.w	r3, [sl]
 800f780:	9b03      	ldr	r3, [sp, #12]
 800f782:	f8ca 0008 	str.w	r0, [sl, #8]
 800f786:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f78a:	f8ca 3004 	str.w	r3, [sl, #4]
 800f78e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f792:	f8ca 300c 	str.w	r3, [sl, #12]
 800f796:	f1c9 0000 	rsb	r0, r9, #0
 800f79a:	e08f      	b.n	800f8bc <__ieee754_rem_pio2+0x3ec>
 800f79c:	4b1c      	ldr	r3, [pc, #112]	; (800f810 <__ieee754_rem_pio2+0x340>)
 800f79e:	4598      	cmp	r8, r3
 800f7a0:	dd38      	ble.n	800f814 <__ieee754_rem_pio2+0x344>
 800f7a2:	ee10 2a10 	vmov	r2, s0
 800f7a6:	462b      	mov	r3, r5
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	f7f0 fd8c 	bl	80002c8 <__aeabi_dsub>
 800f7b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f7b4:	e9ca 0100 	strd	r0, r1, [sl]
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	e07f      	b.n	800f8bc <__ieee754_rem_pio2+0x3ec>
 800f7bc:	f3af 8000 	nop.w
 800f7c0:	54400000 	.word	0x54400000
 800f7c4:	3ff921fb 	.word	0x3ff921fb
 800f7c8:	1a626331 	.word	0x1a626331
 800f7cc:	3dd0b461 	.word	0x3dd0b461
 800f7d0:	1a600000 	.word	0x1a600000
 800f7d4:	3dd0b461 	.word	0x3dd0b461
 800f7d8:	2e037073 	.word	0x2e037073
 800f7dc:	3ba3198a 	.word	0x3ba3198a
 800f7e0:	6dc9c883 	.word	0x6dc9c883
 800f7e4:	3fe45f30 	.word	0x3fe45f30
 800f7e8:	2e000000 	.word	0x2e000000
 800f7ec:	3ba3198a 	.word	0x3ba3198a
 800f7f0:	252049c1 	.word	0x252049c1
 800f7f4:	397b839a 	.word	0x397b839a
 800f7f8:	3fe921fb 	.word	0x3fe921fb
 800f7fc:	4002d97b 	.word	0x4002d97b
 800f800:	3ff921fb 	.word	0x3ff921fb
 800f804:	413921fb 	.word	0x413921fb
 800f808:	3fe00000 	.word	0x3fe00000
 800f80c:	08011c3c 	.word	0x08011c3c
 800f810:	7fefffff 	.word	0x7fefffff
 800f814:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f818:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f81c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f820:	4620      	mov	r0, r4
 800f822:	460d      	mov	r5, r1
 800f824:	f7f1 f9b4 	bl	8000b90 <__aeabi_d2iz>
 800f828:	f7f0 fe9c 	bl	8000564 <__aeabi_i2d>
 800f82c:	4602      	mov	r2, r0
 800f82e:	460b      	mov	r3, r1
 800f830:	4620      	mov	r0, r4
 800f832:	4629      	mov	r1, r5
 800f834:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f838:	f7f0 fd46 	bl	80002c8 <__aeabi_dsub>
 800f83c:	2200      	movs	r2, #0
 800f83e:	4b21      	ldr	r3, [pc, #132]	; (800f8c4 <__ieee754_rem_pio2+0x3f4>)
 800f840:	f7f0 fef6 	bl	8000630 <__aeabi_dmul>
 800f844:	460d      	mov	r5, r1
 800f846:	4604      	mov	r4, r0
 800f848:	f7f1 f9a2 	bl	8000b90 <__aeabi_d2iz>
 800f84c:	f7f0 fe8a 	bl	8000564 <__aeabi_i2d>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4620      	mov	r0, r4
 800f856:	4629      	mov	r1, r5
 800f858:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f85c:	f7f0 fd34 	bl	80002c8 <__aeabi_dsub>
 800f860:	2200      	movs	r2, #0
 800f862:	4b18      	ldr	r3, [pc, #96]	; (800f8c4 <__ieee754_rem_pio2+0x3f4>)
 800f864:	f7f0 fee4 	bl	8000630 <__aeabi_dmul>
 800f868:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f86c:	ad0c      	add	r5, sp, #48	; 0x30
 800f86e:	2403      	movs	r4, #3
 800f870:	2200      	movs	r2, #0
 800f872:	2300      	movs	r3, #0
 800f874:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 800f878:	1e67      	subs	r7, r4, #1
 800f87a:	f7f1 f941 	bl	8000b00 <__aeabi_dcmpeq>
 800f87e:	b108      	cbz	r0, 800f884 <__ieee754_rem_pio2+0x3b4>
 800f880:	463c      	mov	r4, r7
 800f882:	e7f5      	b.n	800f870 <__ieee754_rem_pio2+0x3a0>
 800f884:	4b10      	ldr	r3, [pc, #64]	; (800f8c8 <__ieee754_rem_pio2+0x3f8>)
 800f886:	9301      	str	r3, [sp, #4]
 800f888:	2302      	movs	r3, #2
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	4632      	mov	r2, r6
 800f88e:	4623      	mov	r3, r4
 800f890:	4651      	mov	r1, sl
 800f892:	a806      	add	r0, sp, #24
 800f894:	f000 f9b8 	bl	800fc08 <__kernel_rem_pio2>
 800f898:	f1bb 0f00 	cmp.w	fp, #0
 800f89c:	da0e      	bge.n	800f8bc <__ieee754_rem_pio2+0x3ec>
 800f89e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f8a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8a6:	f8ca 3004 	str.w	r3, [sl, #4]
 800f8aa:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f8ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8b2:	f8ca 300c 	str.w	r3, [sl, #12]
 800f8b6:	4240      	negs	r0, r0
 800f8b8:	e000      	b.n	800f8bc <__ieee754_rem_pio2+0x3ec>
 800f8ba:	4648      	mov	r0, r9
 800f8bc:	b00d      	add	sp, #52	; 0x34
 800f8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c2:	bf00      	nop
 800f8c4:	41700000 	.word	0x41700000
 800f8c8:	08011cbc 	.word	0x08011cbc

0800f8cc <__ieee754_sqrt>:
 800f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	4957      	ldr	r1, [pc, #348]	; (800fa30 <__ieee754_sqrt+0x164>)
 800f8d2:	4f57      	ldr	r7, [pc, #348]	; (800fa30 <__ieee754_sqrt+0x164>)
 800f8d4:	ec55 4b10 	vmov	r4, r5, d0
 800f8d8:	4029      	ands	r1, r5
 800f8da:	42b9      	cmp	r1, r7
 800f8dc:	462a      	mov	r2, r5
 800f8de:	462b      	mov	r3, r5
 800f8e0:	4626      	mov	r6, r4
 800f8e2:	d10c      	bne.n	800f8fe <__ieee754_sqrt+0x32>
 800f8e4:	ee10 2a10 	vmov	r2, s0
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	ee10 0a10 	vmov	r0, s0
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f7f0 fe9e 	bl	8000630 <__aeabi_dmul>
 800f8f4:	4622      	mov	r2, r4
 800f8f6:	462b      	mov	r3, r5
 800f8f8:	f7f0 fce8 	bl	80002cc <__adddf3>
 800f8fc:	e094      	b.n	800fa28 <__ieee754_sqrt+0x15c>
 800f8fe:	2d00      	cmp	r5, #0
 800f900:	dc11      	bgt.n	800f926 <__ieee754_sqrt+0x5a>
 800f902:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800f906:	4321      	orrs	r1, r4
 800f908:	f000 808b 	beq.w	800fa22 <__ieee754_sqrt+0x156>
 800f90c:	b15d      	cbz	r5, 800f926 <__ieee754_sqrt+0x5a>
 800f90e:	ee10 2a10 	vmov	r2, s0
 800f912:	462b      	mov	r3, r5
 800f914:	4620      	mov	r0, r4
 800f916:	4629      	mov	r1, r5
 800f918:	f7f0 fcd6 	bl	80002c8 <__aeabi_dsub>
 800f91c:	4602      	mov	r2, r0
 800f91e:	460b      	mov	r3, r1
 800f920:	f7f0 ffb0 	bl	8000884 <__aeabi_ddiv>
 800f924:	e080      	b.n	800fa28 <__ieee754_sqrt+0x15c>
 800f926:	1512      	asrs	r2, r2, #20
 800f928:	d112      	bne.n	800f950 <__ieee754_sqrt+0x84>
 800f92a:	b91b      	cbnz	r3, 800f934 <__ieee754_sqrt+0x68>
 800f92c:	0af3      	lsrs	r3, r6, #11
 800f92e:	3a15      	subs	r2, #21
 800f930:	0576      	lsls	r6, r6, #21
 800f932:	e7fa      	b.n	800f92a <__ieee754_sqrt+0x5e>
 800f934:	2100      	movs	r1, #0
 800f936:	02d8      	lsls	r0, r3, #11
 800f938:	d402      	bmi.n	800f940 <__ieee754_sqrt+0x74>
 800f93a:	005b      	lsls	r3, r3, #1
 800f93c:	3101      	adds	r1, #1
 800f93e:	e7fa      	b.n	800f936 <__ieee754_sqrt+0x6a>
 800f940:	1e48      	subs	r0, r1, #1
 800f942:	1a12      	subs	r2, r2, r0
 800f944:	f1c1 0020 	rsb	r0, r1, #32
 800f948:	fa26 f000 	lsr.w	r0, r6, r0
 800f94c:	4303      	orrs	r3, r0
 800f94e:	408e      	lsls	r6, r1
 800f950:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f958:	07d1      	lsls	r1, r2, #31
 800f95a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f95e:	bf42      	ittt	mi
 800f960:	005b      	lslmi	r3, r3, #1
 800f962:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 800f966:	0076      	lslmi	r6, r6, #1
 800f968:	1055      	asrs	r5, r2, #1
 800f96a:	f04f 0e00 	mov.w	lr, #0
 800f96e:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 800f972:	4413      	add	r3, r2
 800f974:	0076      	lsls	r6, r6, #1
 800f976:	2216      	movs	r2, #22
 800f978:	4677      	mov	r7, lr
 800f97a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f97e:	1878      	adds	r0, r7, r1
 800f980:	4298      	cmp	r0, r3
 800f982:	bfde      	ittt	le
 800f984:	1a1b      	suble	r3, r3, r0
 800f986:	1847      	addle	r7, r0, r1
 800f988:	448e      	addle	lr, r1
 800f98a:	005b      	lsls	r3, r3, #1
 800f98c:	3a01      	subs	r2, #1
 800f98e:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 800f992:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f996:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800f99a:	d1f0      	bne.n	800f97e <__ieee754_sqrt+0xb2>
 800f99c:	2420      	movs	r4, #32
 800f99e:	4694      	mov	ip, r2
 800f9a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f9a4:	429f      	cmp	r7, r3
 800f9a6:	eb01 000c 	add.w	r0, r1, ip
 800f9aa:	db02      	blt.n	800f9b2 <__ieee754_sqrt+0xe6>
 800f9ac:	d116      	bne.n	800f9dc <__ieee754_sqrt+0x110>
 800f9ae:	42b0      	cmp	r0, r6
 800f9b0:	d813      	bhi.n	800f9da <__ieee754_sqrt+0x10e>
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	eb00 0c01 	add.w	ip, r0, r1
 800f9b8:	da05      	bge.n	800f9c6 <__ieee754_sqrt+0xfa>
 800f9ba:	f1bc 0f00 	cmp.w	ip, #0
 800f9be:	db02      	blt.n	800f9c6 <__ieee754_sqrt+0xfa>
 800f9c0:	f107 0801 	add.w	r8, r7, #1
 800f9c4:	e000      	b.n	800f9c8 <__ieee754_sqrt+0xfc>
 800f9c6:	46b8      	mov	r8, r7
 800f9c8:	1bdb      	subs	r3, r3, r7
 800f9ca:	42b0      	cmp	r0, r6
 800f9cc:	bf88      	it	hi
 800f9ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f9d2:	1a36      	subs	r6, r6, r0
 800f9d4:	440a      	add	r2, r1
 800f9d6:	4647      	mov	r7, r8
 800f9d8:	e000      	b.n	800f9dc <__ieee754_sqrt+0x110>
 800f9da:	463b      	mov	r3, r7
 800f9dc:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 800f9e0:	3c01      	subs	r4, #1
 800f9e2:	4403      	add	r3, r0
 800f9e4:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800f9e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f9ec:	d1da      	bne.n	800f9a4 <__ieee754_sqrt+0xd8>
 800f9ee:	4333      	orrs	r3, r6
 800f9f0:	d007      	beq.n	800fa02 <__ieee754_sqrt+0x136>
 800f9f2:	1c53      	adds	r3, r2, #1
 800f9f4:	bf13      	iteet	ne
 800f9f6:	f002 0301 	andne.w	r3, r2, #1
 800f9fa:	f10e 0e01 	addeq.w	lr, lr, #1
 800f9fe:	4622      	moveq	r2, r4
 800fa00:	18d2      	addne	r2, r2, r3
 800fa02:	ea4f 046e 	mov.w	r4, lr, asr #1
 800fa06:	0853      	lsrs	r3, r2, #1
 800fa08:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 800fa0c:	f01e 0f01 	tst.w	lr, #1
 800fa10:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 800fa14:	bf18      	it	ne
 800fa16:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 800fa1a:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 800fa1e:	4618      	mov	r0, r3
 800fa20:	e002      	b.n	800fa28 <__ieee754_sqrt+0x15c>
 800fa22:	ee10 0a10 	vmov	r0, s0
 800fa26:	4629      	mov	r1, r5
 800fa28:	ec41 0b10 	vmov	d0, r0, r1
 800fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa30:	7ff00000 	.word	0x7ff00000
 800fa34:	00000000 	.word	0x00000000

0800fa38 <__kernel_cos>:
 800fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3c:	ec59 8b10 	vmov	r8, r9, d0
 800fa40:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800fa44:	b085      	sub	sp, #20
 800fa46:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800fa4a:	ed8d 1b00 	vstr	d1, [sp]
 800fa4e:	da07      	bge.n	800fa60 <__kernel_cos+0x28>
 800fa50:	ee10 0a10 	vmov	r0, s0
 800fa54:	4649      	mov	r1, r9
 800fa56:	f7f1 f89b 	bl	8000b90 <__aeabi_d2iz>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	f000 80a6 	beq.w	800fbac <__kernel_cos+0x174>
 800fa60:	4642      	mov	r2, r8
 800fa62:	464b      	mov	r3, r9
 800fa64:	4640      	mov	r0, r8
 800fa66:	4649      	mov	r1, r9
 800fa68:	f7f0 fde2 	bl	8000630 <__aeabi_dmul>
 800fa6c:	a359      	add	r3, pc, #356	; (adr r3, 800fbd4 <__kernel_cos+0x19c>)
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	4604      	mov	r4, r0
 800fa74:	460d      	mov	r5, r1
 800fa76:	f7f0 fddb 	bl	8000630 <__aeabi_dmul>
 800fa7a:	a358      	add	r3, pc, #352	; (adr r3, 800fbdc <__kernel_cos+0x1a4>)
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	f7f0 fc24 	bl	80002cc <__adddf3>
 800fa84:	4622      	mov	r2, r4
 800fa86:	462b      	mov	r3, r5
 800fa88:	f7f0 fdd2 	bl	8000630 <__aeabi_dmul>
 800fa8c:	a355      	add	r3, pc, #340	; (adr r3, 800fbe4 <__kernel_cos+0x1ac>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	f7f0 fc19 	bl	80002c8 <__aeabi_dsub>
 800fa96:	4622      	mov	r2, r4
 800fa98:	462b      	mov	r3, r5
 800fa9a:	f7f0 fdc9 	bl	8000630 <__aeabi_dmul>
 800fa9e:	a353      	add	r3, pc, #332	; (adr r3, 800fbec <__kernel_cos+0x1b4>)
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	f7f0 fc12 	bl	80002cc <__adddf3>
 800faa8:	4622      	mov	r2, r4
 800faaa:	462b      	mov	r3, r5
 800faac:	f7f0 fdc0 	bl	8000630 <__aeabi_dmul>
 800fab0:	a350      	add	r3, pc, #320	; (adr r3, 800fbf4 <__kernel_cos+0x1bc>)
 800fab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab6:	f7f0 fc07 	bl	80002c8 <__aeabi_dsub>
 800faba:	4622      	mov	r2, r4
 800fabc:	462b      	mov	r3, r5
 800fabe:	f7f0 fdb7 	bl	8000630 <__aeabi_dmul>
 800fac2:	a34e      	add	r3, pc, #312	; (adr r3, 800fbfc <__kernel_cos+0x1c4>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fc00 	bl	80002cc <__adddf3>
 800facc:	462b      	mov	r3, r5
 800face:	4622      	mov	r2, r4
 800fad0:	f7f0 fdae 	bl	8000630 <__aeabi_dmul>
 800fad4:	4b3a      	ldr	r3, [pc, #232]	; (800fbc0 <__kernel_cos+0x188>)
 800fad6:	429f      	cmp	r7, r3
 800fad8:	4682      	mov	sl, r0
 800fada:	468b      	mov	fp, r1
 800fadc:	dc26      	bgt.n	800fb2c <__kernel_cos+0xf4>
 800fade:	2200      	movs	r2, #0
 800fae0:	4b38      	ldr	r3, [pc, #224]	; (800fbc4 <__kernel_cos+0x18c>)
 800fae2:	4620      	mov	r0, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	f7f0 fda3 	bl	8000630 <__aeabi_dmul>
 800faea:	4652      	mov	r2, sl
 800faec:	4606      	mov	r6, r0
 800faee:	460f      	mov	r7, r1
 800faf0:	465b      	mov	r3, fp
 800faf2:	4620      	mov	r0, r4
 800faf4:	4629      	mov	r1, r5
 800faf6:	f7f0 fd9b 	bl	8000630 <__aeabi_dmul>
 800fafa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fafe:	4604      	mov	r4, r0
 800fb00:	460d      	mov	r5, r1
 800fb02:	4640      	mov	r0, r8
 800fb04:	4649      	mov	r1, r9
 800fb06:	f7f0 fd93 	bl	8000630 <__aeabi_dmul>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4629      	mov	r1, r5
 800fb12:	f7f0 fbd9 	bl	80002c8 <__aeabi_dsub>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	4639      	mov	r1, r7
 800fb1e:	f7f0 fbd3 	bl	80002c8 <__aeabi_dsub>
 800fb22:	4602      	mov	r2, r0
 800fb24:	460b      	mov	r3, r1
 800fb26:	2000      	movs	r0, #0
 800fb28:	4927      	ldr	r1, [pc, #156]	; (800fbc8 <__kernel_cos+0x190>)
 800fb2a:	e03c      	b.n	800fba6 <__kernel_cos+0x16e>
 800fb2c:	4b27      	ldr	r3, [pc, #156]	; (800fbcc <__kernel_cos+0x194>)
 800fb2e:	4926      	ldr	r1, [pc, #152]	; (800fbc8 <__kernel_cos+0x190>)
 800fb30:	429f      	cmp	r7, r3
 800fb32:	bfd7      	itett	le
 800fb34:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800fb38:	4f25      	ldrgt	r7, [pc, #148]	; (800fbd0 <__kernel_cos+0x198>)
 800fb3a:	2200      	movle	r2, #0
 800fb3c:	4616      	movle	r6, r2
 800fb3e:	bfd4      	ite	le
 800fb40:	461f      	movle	r7, r3
 800fb42:	2600      	movgt	r6, #0
 800fb44:	4632      	mov	r2, r6
 800fb46:	463b      	mov	r3, r7
 800fb48:	2000      	movs	r0, #0
 800fb4a:	f7f0 fbbd 	bl	80002c8 <__aeabi_dsub>
 800fb4e:	2200      	movs	r2, #0
 800fb50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb54:	4b1b      	ldr	r3, [pc, #108]	; (800fbc4 <__kernel_cos+0x18c>)
 800fb56:	4620      	mov	r0, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	f7f0 fd69 	bl	8000630 <__aeabi_dmul>
 800fb5e:	4632      	mov	r2, r6
 800fb60:	463b      	mov	r3, r7
 800fb62:	f7f0 fbb1 	bl	80002c8 <__aeabi_dsub>
 800fb66:	4652      	mov	r2, sl
 800fb68:	4606      	mov	r6, r0
 800fb6a:	460f      	mov	r7, r1
 800fb6c:	465b      	mov	r3, fp
 800fb6e:	4620      	mov	r0, r4
 800fb70:	4629      	mov	r1, r5
 800fb72:	f7f0 fd5d 	bl	8000630 <__aeabi_dmul>
 800fb76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	4640      	mov	r0, r8
 800fb80:	4649      	mov	r1, r9
 800fb82:	f7f0 fd55 	bl	8000630 <__aeabi_dmul>
 800fb86:	4602      	mov	r2, r0
 800fb88:	460b      	mov	r3, r1
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	f7f0 fb9b 	bl	80002c8 <__aeabi_dsub>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	4630      	mov	r0, r6
 800fb98:	4639      	mov	r1, r7
 800fb9a:	f7f0 fb95 	bl	80002c8 <__aeabi_dsub>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fba6:	f7f0 fb8f 	bl	80002c8 <__aeabi_dsub>
 800fbaa:	e001      	b.n	800fbb0 <__kernel_cos+0x178>
 800fbac:	4906      	ldr	r1, [pc, #24]	; (800fbc8 <__kernel_cos+0x190>)
 800fbae:	2000      	movs	r0, #0
 800fbb0:	ec41 0b10 	vmov	d0, r0, r1
 800fbb4:	b005      	add	sp, #20
 800fbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbba:	bf00      	nop
 800fbbc:	f3af 8000 	nop.w
 800fbc0:	3fd33332 	.word	0x3fd33332
 800fbc4:	3fe00000 	.word	0x3fe00000
 800fbc8:	3ff00000 	.word	0x3ff00000
 800fbcc:	3fe90000 	.word	0x3fe90000
 800fbd0:	3fd20000 	.word	0x3fd20000
 800fbd4:	be8838d4 	.word	0xbe8838d4
 800fbd8:	bda8fae9 	.word	0xbda8fae9
 800fbdc:	bdb4b1c4 	.word	0xbdb4b1c4
 800fbe0:	3e21ee9e 	.word	0x3e21ee9e
 800fbe4:	809c52ad 	.word	0x809c52ad
 800fbe8:	3e927e4f 	.word	0x3e927e4f
 800fbec:	19cb1590 	.word	0x19cb1590
 800fbf0:	3efa01a0 	.word	0x3efa01a0
 800fbf4:	16c15177 	.word	0x16c15177
 800fbf8:	3f56c16c 	.word	0x3f56c16c
 800fbfc:	5555554c 	.word	0x5555554c
 800fc00:	3fa55555 	.word	0x3fa55555
 800fc04:	00000000 	.word	0x00000000

0800fc08 <__kernel_rem_pio2>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fc10:	2418      	movs	r4, #24
 800fc12:	9306      	str	r3, [sp, #24]
 800fc14:	9101      	str	r1, [sp, #4]
 800fc16:	4bba      	ldr	r3, [pc, #744]	; (800ff00 <__kernel_rem_pio2+0x2f8>)
 800fc18:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800fc1a:	9009      	str	r0, [sp, #36]	; 0x24
 800fc1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc20:	9302      	str	r3, [sp, #8]
 800fc22:	9b06      	ldr	r3, [sp, #24]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	9305      	str	r3, [sp, #20]
 800fc28:	1ed3      	subs	r3, r2, #3
 800fc2a:	fb93 f4f4 	sdiv	r4, r3, r4
 800fc2e:	f06f 0317 	mvn.w	r3, #23
 800fc32:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800fc36:	fb04 3303 	mla	r3, r4, r3, r3
 800fc3a:	eb03 0802 	add.w	r8, r3, r2
 800fc3e:	9b02      	ldr	r3, [sp, #8]
 800fc40:	9a05      	ldr	r2, [sp, #20]
 800fc42:	eb03 0a02 	add.w	sl, r3, r2
 800fc46:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800fc48:	1aa7      	subs	r7, r4, r2
 800fc4a:	ae20      	add	r6, sp, #128	; 0x80
 800fc4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fc50:	2500      	movs	r5, #0
 800fc52:	4555      	cmp	r5, sl
 800fc54:	dc0c      	bgt.n	800fc70 <__kernel_rem_pio2+0x68>
 800fc56:	42ef      	cmn	r7, r5
 800fc58:	d404      	bmi.n	800fc64 <__kernel_rem_pio2+0x5c>
 800fc5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fc5e:	f7f0 fc81 	bl	8000564 <__aeabi_i2d>
 800fc62:	e001      	b.n	800fc68 <__kernel_rem_pio2+0x60>
 800fc64:	2000      	movs	r0, #0
 800fc66:	2100      	movs	r1, #0
 800fc68:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc6c:	3501      	adds	r5, #1
 800fc6e:	e7f0      	b.n	800fc52 <__kernel_rem_pio2+0x4a>
 800fc70:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800fc74:	2600      	movs	r6, #0
 800fc76:	9b02      	ldr	r3, [sp, #8]
 800fc78:	429e      	cmp	r6, r3
 800fc7a:	dc27      	bgt.n	800fccc <__kernel_rem_pio2+0xc4>
 800fc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc7e:	9304      	str	r3, [sp, #16]
 800fc80:	9b06      	ldr	r3, [sp, #24]
 800fc82:	199d      	adds	r5, r3, r6
 800fc84:	ab20      	add	r3, sp, #128	; 0x80
 800fc86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fc8a:	9308      	str	r3, [sp, #32]
 800fc8c:	f04f 0900 	mov.w	r9, #0
 800fc90:	f04f 0a00 	mov.w	sl, #0
 800fc94:	2700      	movs	r7, #0
 800fc96:	9b05      	ldr	r3, [sp, #20]
 800fc98:	429f      	cmp	r7, r3
 800fc9a:	dc13      	bgt.n	800fcc4 <__kernel_rem_pio2+0xbc>
 800fc9c:	9908      	ldr	r1, [sp, #32]
 800fc9e:	9d04      	ldr	r5, [sp, #16]
 800fca0:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800fca4:	9108      	str	r1, [sp, #32]
 800fca6:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800fcaa:	9504      	str	r5, [sp, #16]
 800fcac:	f7f0 fcc0 	bl	8000630 <__aeabi_dmul>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4648      	mov	r0, r9
 800fcb6:	4651      	mov	r1, sl
 800fcb8:	f7f0 fb08 	bl	80002cc <__adddf3>
 800fcbc:	3701      	adds	r7, #1
 800fcbe:	4681      	mov	r9, r0
 800fcc0:	468a      	mov	sl, r1
 800fcc2:	e7e8      	b.n	800fc96 <__kernel_rem_pio2+0x8e>
 800fcc4:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 800fcc8:	3601      	adds	r6, #1
 800fcca:	e7d4      	b.n	800fc76 <__kernel_rem_pio2+0x6e>
 800fccc:	9b02      	ldr	r3, [sp, #8]
 800fcce:	f8dd b008 	ldr.w	fp, [sp, #8]
 800fcd2:	aa0c      	add	r2, sp, #48	; 0x30
 800fcd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcd8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcda:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800fcdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fce0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fce2:	ab98      	add	r3, sp, #608	; 0x260
 800fce4:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 800fce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fcec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcf0:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fcf4:	aa98      	add	r2, sp, #608	; 0x260
 800fcf6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fcfa:	eb02 0903 	add.w	r9, r2, r3
 800fcfe:	9308      	str	r3, [sp, #32]
 800fd00:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800fd04:	f04f 0a00 	mov.w	sl, #0
 800fd08:	ebca 030b 	rsb	r3, sl, fp
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	dd25      	ble.n	800fd5c <__kernel_rem_pio2+0x154>
 800fd10:	2200      	movs	r2, #0
 800fd12:	4b7c      	ldr	r3, [pc, #496]	; (800ff04 <__kernel_rem_pio2+0x2fc>)
 800fd14:	4630      	mov	r0, r6
 800fd16:	4639      	mov	r1, r7
 800fd18:	f7f0 fc8a 	bl	8000630 <__aeabi_dmul>
 800fd1c:	f7f0 ff38 	bl	8000b90 <__aeabi_d2iz>
 800fd20:	f7f0 fc20 	bl	8000564 <__aeabi_i2d>
 800fd24:	2200      	movs	r2, #0
 800fd26:	4b78      	ldr	r3, [pc, #480]	; (800ff08 <__kernel_rem_pio2+0x300>)
 800fd28:	4604      	mov	r4, r0
 800fd2a:	460d      	mov	r5, r1
 800fd2c:	f7f0 fc80 	bl	8000630 <__aeabi_dmul>
 800fd30:	4602      	mov	r2, r0
 800fd32:	460b      	mov	r3, r1
 800fd34:	4630      	mov	r0, r6
 800fd36:	4639      	mov	r1, r7
 800fd38:	f7f0 fac6 	bl	80002c8 <__aeabi_dsub>
 800fd3c:	f7f0 ff28 	bl	8000b90 <__aeabi_d2iz>
 800fd40:	ab0c      	add	r3, sp, #48	; 0x30
 800fd42:	4629      	mov	r1, r5
 800fd44:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800fd48:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f7f0 fabd 	bl	80002cc <__adddf3>
 800fd52:	f10a 0a01 	add.w	sl, sl, #1
 800fd56:	4606      	mov	r6, r0
 800fd58:	460f      	mov	r7, r1
 800fd5a:	e7d5      	b.n	800fd08 <__kernel_rem_pio2+0x100>
 800fd5c:	ec47 6b10 	vmov	d0, r6, r7
 800fd60:	4640      	mov	r0, r8
 800fd62:	f000 fd91 	bl	8010888 <scalbn>
 800fd66:	ec55 4b10 	vmov	r4, r5, d0
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fd70:	ee10 0a10 	vmov	r0, s0
 800fd74:	4629      	mov	r1, r5
 800fd76:	f7f0 fc5b 	bl	8000630 <__aeabi_dmul>
 800fd7a:	ec41 0b10 	vmov	d0, r0, r1
 800fd7e:	f000 fcfb 	bl	8010778 <floor>
 800fd82:	2200      	movs	r2, #0
 800fd84:	ec51 0b10 	vmov	r0, r1, d0
 800fd88:	4b60      	ldr	r3, [pc, #384]	; (800ff0c <__kernel_rem_pio2+0x304>)
 800fd8a:	f7f0 fc51 	bl	8000630 <__aeabi_dmul>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4620      	mov	r0, r4
 800fd94:	4629      	mov	r1, r5
 800fd96:	f7f0 fa97 	bl	80002c8 <__aeabi_dsub>
 800fd9a:	460d      	mov	r5, r1
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	f7f0 fef7 	bl	8000b90 <__aeabi_d2iz>
 800fda2:	9004      	str	r0, [sp, #16]
 800fda4:	f7f0 fbde 	bl	8000564 <__aeabi_i2d>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4620      	mov	r0, r4
 800fdae:	4629      	mov	r1, r5
 800fdb0:	f7f0 fa8a 	bl	80002c8 <__aeabi_dsub>
 800fdb4:	f1b8 0f00 	cmp.w	r8, #0
 800fdb8:	4606      	mov	r6, r0
 800fdba:	460f      	mov	r7, r1
 800fdbc:	dd15      	ble.n	800fdea <__kernel_rem_pio2+0x1e2>
 800fdbe:	f10b 31ff 	add.w	r1, fp, #4294967295
 800fdc2:	ab0c      	add	r3, sp, #48	; 0x30
 800fdc4:	f1c8 0018 	rsb	r0, r8, #24
 800fdc8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800fdcc:	9c04      	ldr	r4, [sp, #16]
 800fdce:	fa42 f300 	asr.w	r3, r2, r0
 800fdd2:	441c      	add	r4, r3
 800fdd4:	4083      	lsls	r3, r0
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	aa0c      	add	r2, sp, #48	; 0x30
 800fdda:	f1c8 0017 	rsb	r0, r8, #23
 800fdde:	9404      	str	r4, [sp, #16]
 800fde0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fde4:	fa43 fa00 	asr.w	sl, r3, r0
 800fde8:	e00f      	b.n	800fe0a <__kernel_rem_pio2+0x202>
 800fdea:	d107      	bne.n	800fdfc <__kernel_rem_pio2+0x1f4>
 800fdec:	f10b 33ff 	add.w	r3, fp, #4294967295
 800fdf0:	aa0c      	add	r2, sp, #48	; 0x30
 800fdf2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fdf6:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 800fdfa:	e006      	b.n	800fe0a <__kernel_rem_pio2+0x202>
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4b44      	ldr	r3, [pc, #272]	; (800ff10 <__kernel_rem_pio2+0x308>)
 800fe00:	f7f0 fe9c 	bl	8000b3c <__aeabi_dcmpge>
 800fe04:	b928      	cbnz	r0, 800fe12 <__kernel_rem_pio2+0x20a>
 800fe06:	4682      	mov	sl, r0
 800fe08:	e052      	b.n	800feb0 <__kernel_rem_pio2+0x2a8>
 800fe0a:	f1ba 0f00 	cmp.w	sl, #0
 800fe0e:	dc02      	bgt.n	800fe16 <__kernel_rem_pio2+0x20e>
 800fe10:	e04e      	b.n	800feb0 <__kernel_rem_pio2+0x2a8>
 800fe12:	f04f 0a02 	mov.w	sl, #2
 800fe16:	9b04      	ldr	r3, [sp, #16]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	9304      	str	r3, [sp, #16]
 800fe1e:	4614      	mov	r4, r2
 800fe20:	4593      	cmp	fp, r2
 800fe22:	dd11      	ble.n	800fe48 <__kernel_rem_pio2+0x240>
 800fe24:	ab0c      	add	r3, sp, #48	; 0x30
 800fe26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe2a:	b91c      	cbnz	r4, 800fe34 <__kernel_rem_pio2+0x22c>
 800fe2c:	b153      	cbz	r3, 800fe44 <__kernel_rem_pio2+0x23c>
 800fe2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fe32:	e003      	b.n	800fe3c <__kernel_rem_pio2+0x234>
 800fe34:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 800fe38:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800fe3c:	a90c      	add	r1, sp, #48	; 0x30
 800fe3e:	2401      	movs	r4, #1
 800fe40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe44:	3201      	adds	r2, #1
 800fe46:	e7eb      	b.n	800fe20 <__kernel_rem_pio2+0x218>
 800fe48:	f1b8 0f00 	cmp.w	r8, #0
 800fe4c:	dd17      	ble.n	800fe7e <__kernel_rem_pio2+0x276>
 800fe4e:	f1b8 0f01 	cmp.w	r8, #1
 800fe52:	d00a      	beq.n	800fe6a <__kernel_rem_pio2+0x262>
 800fe54:	f1b8 0f02 	cmp.w	r8, #2
 800fe58:	d111      	bne.n	800fe7e <__kernel_rem_pio2+0x276>
 800fe5a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fe5e:	ab0c      	add	r3, sp, #48	; 0x30
 800fe60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fe68:	e006      	b.n	800fe78 <__kernel_rem_pio2+0x270>
 800fe6a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fe6e:	ab0c      	add	r3, sp, #48	; 0x30
 800fe70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fe78:	a90c      	add	r1, sp, #48	; 0x30
 800fe7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe7e:	f1ba 0f02 	cmp.w	sl, #2
 800fe82:	d115      	bne.n	800feb0 <__kernel_rem_pio2+0x2a8>
 800fe84:	4632      	mov	r2, r6
 800fe86:	463b      	mov	r3, r7
 800fe88:	2000      	movs	r0, #0
 800fe8a:	4922      	ldr	r1, [pc, #136]	; (800ff14 <__kernel_rem_pio2+0x30c>)
 800fe8c:	f7f0 fa1c 	bl	80002c8 <__aeabi_dsub>
 800fe90:	4606      	mov	r6, r0
 800fe92:	460f      	mov	r7, r1
 800fe94:	b164      	cbz	r4, 800feb0 <__kernel_rem_pio2+0x2a8>
 800fe96:	4640      	mov	r0, r8
 800fe98:	ed9f 0b17 	vldr	d0, [pc, #92]	; 800fef8 <__kernel_rem_pio2+0x2f0>
 800fe9c:	f000 fcf4 	bl	8010888 <scalbn>
 800fea0:	4630      	mov	r0, r6
 800fea2:	4639      	mov	r1, r7
 800fea4:	ec53 2b10 	vmov	r2, r3, d0
 800fea8:	f7f0 fa0e 	bl	80002c8 <__aeabi_dsub>
 800feac:	4606      	mov	r6, r0
 800feae:	460f      	mov	r7, r1
 800feb0:	2200      	movs	r2, #0
 800feb2:	2300      	movs	r3, #0
 800feb4:	4630      	mov	r0, r6
 800feb6:	4639      	mov	r1, r7
 800feb8:	f7f0 fe22 	bl	8000b00 <__aeabi_dcmpeq>
 800febc:	2800      	cmp	r0, #0
 800febe:	d074      	beq.n	800ffaa <__kernel_rem_pio2+0x3a2>
 800fec0:	f10b 31ff 	add.w	r1, fp, #4294967295
 800fec4:	460b      	mov	r3, r1
 800fec6:	2200      	movs	r2, #0
 800fec8:	9802      	ldr	r0, [sp, #8]
 800feca:	4283      	cmp	r3, r0
 800fecc:	db05      	blt.n	800feda <__kernel_rem_pio2+0x2d2>
 800fece:	a80c      	add	r0, sp, #48	; 0x30
 800fed0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fed4:	3b01      	subs	r3, #1
 800fed6:	4302      	orrs	r2, r0
 800fed8:	e7f6      	b.n	800fec8 <__kernel_rem_pio2+0x2c0>
 800feda:	2a00      	cmp	r2, #0
 800fedc:	d158      	bne.n	800ff90 <__kernel_rem_pio2+0x388>
 800fede:	2301      	movs	r3, #1
 800fee0:	f06f 0103 	mvn.w	r1, #3
 800fee4:	fb01 f203 	mul.w	r2, r1, r3
 800fee8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800feea:	5882      	ldr	r2, [r0, r2]
 800feec:	b9a2      	cbnz	r2, 800ff18 <__kernel_rem_pio2+0x310>
 800feee:	3301      	adds	r3, #1
 800fef0:	e7f8      	b.n	800fee4 <__kernel_rem_pio2+0x2dc>
 800fef2:	bf00      	nop
 800fef4:	f3af 8000 	nop.w
 800fef8:	00000000 	.word	0x00000000
 800fefc:	3ff00000 	.word	0x3ff00000
 800ff00:	08011dc4 	.word	0x08011dc4
 800ff04:	3e700000 	.word	0x3e700000
 800ff08:	41700000 	.word	0x41700000
 800ff0c:	40200000 	.word	0x40200000
 800ff10:	3fe00000 	.word	0x3fe00000
 800ff14:	3ff00000 	.word	0x3ff00000
 800ff18:	9a08      	ldr	r2, [sp, #32]
 800ff1a:	a998      	add	r1, sp, #608	; 0x260
 800ff1c:	440a      	add	r2, r1
 800ff1e:	3a98      	subs	r2, #152	; 0x98
 800ff20:	9204      	str	r2, [sp, #16]
 800ff22:	9a06      	ldr	r2, [sp, #24]
 800ff24:	445b      	add	r3, fp
 800ff26:	eb02 050b 	add.w	r5, r2, fp
 800ff2a:	aa20      	add	r2, sp, #128	; 0x80
 800ff2c:	f10b 0601 	add.w	r6, fp, #1
 800ff30:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ff34:	9308      	str	r3, [sp, #32]
 800ff36:	9b08      	ldr	r3, [sp, #32]
 800ff38:	429e      	cmp	r6, r3
 800ff3a:	dc27      	bgt.n	800ff8c <__kernel_rem_pio2+0x384>
 800ff3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ff42:	f7f0 fb0f 	bl	8000564 <__aeabi_i2d>
 800ff46:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ff4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4c:	46a9      	mov	r9, r5
 800ff4e:	461c      	mov	r4, r3
 800ff50:	2700      	movs	r7, #0
 800ff52:	f04f 0a00 	mov.w	sl, #0
 800ff56:	f04f 0b00 	mov.w	fp, #0
 800ff5a:	9b05      	ldr	r3, [sp, #20]
 800ff5c:	429f      	cmp	r7, r3
 800ff5e:	dc0f      	bgt.n	800ff80 <__kernel_rem_pio2+0x378>
 800ff60:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800ff64:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ff68:	f7f0 fb62 	bl	8000630 <__aeabi_dmul>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	4650      	mov	r0, sl
 800ff72:	4659      	mov	r1, fp
 800ff74:	f7f0 f9aa 	bl	80002cc <__adddf3>
 800ff78:	3701      	adds	r7, #1
 800ff7a:	4682      	mov	sl, r0
 800ff7c:	468b      	mov	fp, r1
 800ff7e:	e7ec      	b.n	800ff5a <__kernel_rem_pio2+0x352>
 800ff80:	9b04      	ldr	r3, [sp, #16]
 800ff82:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 800ff86:	3601      	adds	r6, #1
 800ff88:	9304      	str	r3, [sp, #16]
 800ff8a:	e7d4      	b.n	800ff36 <__kernel_rem_pio2+0x32e>
 800ff8c:	469b      	mov	fp, r3
 800ff8e:	e6a8      	b.n	800fce2 <__kernel_rem_pio2+0xda>
 800ff90:	f1a8 0818 	sub.w	r8, r8, #24
 800ff94:	468b      	mov	fp, r1
 800ff96:	ab0c      	add	r3, sp, #48	; 0x30
 800ff98:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d13c      	bne.n	801001a <__kernel_rem_pio2+0x412>
 800ffa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ffa4:	f1a8 0818 	sub.w	r8, r8, #24
 800ffa8:	e7f5      	b.n	800ff96 <__kernel_rem_pio2+0x38e>
 800ffaa:	f1c8 0000 	rsb	r0, r8, #0
 800ffae:	ec47 6b10 	vmov	d0, r6, r7
 800ffb2:	f000 fc69 	bl	8010888 <scalbn>
 800ffb6:	ec55 4b10 	vmov	r4, r5, d0
 800ffba:	2200      	movs	r2, #0
 800ffbc:	4bb6      	ldr	r3, [pc, #728]	; (8010298 <__kernel_rem_pio2+0x690>)
 800ffbe:	ee10 0a10 	vmov	r0, s0
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	f7f0 fdba 	bl	8000b3c <__aeabi_dcmpge>
 800ffc8:	b300      	cbz	r0, 801000c <__kernel_rem_pio2+0x404>
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4bb3      	ldr	r3, [pc, #716]	; (801029c <__kernel_rem_pio2+0x694>)
 800ffce:	4620      	mov	r0, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	f7f0 fb2d 	bl	8000630 <__aeabi_dmul>
 800ffd6:	f7f0 fddb 	bl	8000b90 <__aeabi_d2iz>
 800ffda:	4606      	mov	r6, r0
 800ffdc:	f7f0 fac2 	bl	8000564 <__aeabi_i2d>
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	4bad      	ldr	r3, [pc, #692]	; (8010298 <__kernel_rem_pio2+0x690>)
 800ffe4:	f7f0 fb24 	bl	8000630 <__aeabi_dmul>
 800ffe8:	460b      	mov	r3, r1
 800ffea:	4602      	mov	r2, r0
 800ffec:	4629      	mov	r1, r5
 800ffee:	4620      	mov	r0, r4
 800fff0:	f7f0 f96a 	bl	80002c8 <__aeabi_dsub>
 800fff4:	f7f0 fdcc 	bl	8000b90 <__aeabi_d2iz>
 800fff8:	ab0c      	add	r3, sp, #48	; 0x30
 800fffa:	f108 0818 	add.w	r8, r8, #24
 800fffe:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8010002:	f10b 0b01 	add.w	fp, fp, #1
 8010006:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 801000a:	e006      	b.n	801001a <__kernel_rem_pio2+0x412>
 801000c:	4620      	mov	r0, r4
 801000e:	4629      	mov	r1, r5
 8010010:	f7f0 fdbe 	bl	8000b90 <__aeabi_d2iz>
 8010014:	ab0c      	add	r3, sp, #48	; 0x30
 8010016:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 801001a:	4640      	mov	r0, r8
 801001c:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8010288 <__kernel_rem_pio2+0x680>
 8010020:	f000 fc32 	bl	8010888 <scalbn>
 8010024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010028:	9305      	str	r3, [sp, #20]
 801002a:	9a05      	ldr	r2, [sp, #20]
 801002c:	ab98      	add	r3, sp, #608	; 0x260
 801002e:	189f      	adds	r7, r3, r2
 8010030:	ec55 4b10 	vmov	r4, r5, d0
 8010034:	3f98      	subs	r7, #152	; 0x98
 8010036:	465e      	mov	r6, fp
 8010038:	2e00      	cmp	r6, #0
 801003a:	db14      	blt.n	8010066 <__kernel_rem_pio2+0x45e>
 801003c:	ab0c      	add	r3, sp, #48	; 0x30
 801003e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010042:	f7f0 fa8f 	bl	8000564 <__aeabi_i2d>
 8010046:	4622      	mov	r2, r4
 8010048:	462b      	mov	r3, r5
 801004a:	f7f0 faf1 	bl	8000630 <__aeabi_dmul>
 801004e:	2200      	movs	r2, #0
 8010050:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010054:	4b91      	ldr	r3, [pc, #580]	; (801029c <__kernel_rem_pio2+0x694>)
 8010056:	4620      	mov	r0, r4
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 fae9 	bl	8000630 <__aeabi_dmul>
 801005e:	3e01      	subs	r6, #1
 8010060:	4604      	mov	r4, r0
 8010062:	460d      	mov	r5, r1
 8010064:	e7e8      	b.n	8010038 <__kernel_rem_pio2+0x430>
 8010066:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 801006a:	2400      	movs	r4, #0
 801006c:	4645      	mov	r5, r8
 801006e:	ebbb 0704 	subs.w	r7, fp, r4
 8010072:	d424      	bmi.n	80100be <__kernel_rem_pio2+0x4b6>
 8010074:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8010290 <__kernel_rem_pio2+0x688>
 8010078:	ed8d 7b06 	vstr	d7, [sp, #24]
 801007c:	ab70      	add	r3, sp, #448	; 0x1c0
 801007e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80102a0 <__kernel_rem_pio2+0x698>
 8010082:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010086:	2600      	movs	r6, #0
 8010088:	9b02      	ldr	r3, [sp, #8]
 801008a:	429e      	cmp	r6, r3
 801008c:	dc11      	bgt.n	80100b2 <__kernel_rem_pio2+0x4aa>
 801008e:	42a6      	cmp	r6, r4
 8010090:	dc0f      	bgt.n	80100b2 <__kernel_rem_pio2+0x4aa>
 8010092:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8010096:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801009a:	f7f0 fac9 	bl	8000630 <__aeabi_dmul>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100a6:	f7f0 f911 	bl	80002cc <__adddf3>
 80100aa:	3601      	adds	r6, #1
 80100ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100b0:	e7ea      	b.n	8010088 <__kernel_rem_pio2+0x480>
 80100b2:	ed9d 7b06 	vldr	d7, [sp, #24]
 80100b6:	3401      	adds	r4, #1
 80100b8:	eca8 7b02 	vstmia	r8!, {d7}
 80100bc:	e7d7      	b.n	801006e <__kernel_rem_pio2+0x466>
 80100be:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80100c0:	2b03      	cmp	r3, #3
 80100c2:	f200 80d8 	bhi.w	8010276 <__kernel_rem_pio2+0x66e>
 80100c6:	e8df f003 	tbb	[pc, r3]
 80100ca:	0810      	.short	0x0810
 80100cc:	0208      	.short	0x0208
 80100ce:	9a05      	ldr	r2, [sp, #20]
 80100d0:	ab48      	add	r3, sp, #288	; 0x120
 80100d2:	189c      	adds	r4, r3, r2
 80100d4:	46a0      	mov	r8, r4
 80100d6:	46d9      	mov	r9, fp
 80100d8:	e056      	b.n	8010188 <__kernel_rem_pio2+0x580>
 80100da:	9c05      	ldr	r4, [sp, #20]
 80100dc:	ab48      	add	r3, sp, #288	; 0x120
 80100de:	3408      	adds	r4, #8
 80100e0:	441c      	add	r4, r3
 80100e2:	465d      	mov	r5, fp
 80100e4:	2000      	movs	r0, #0
 80100e6:	2100      	movs	r1, #0
 80100e8:	e01d      	b.n	8010126 <__kernel_rem_pio2+0x51e>
 80100ea:	9b05      	ldr	r3, [sp, #20]
 80100ec:	aa98      	add	r2, sp, #608	; 0x260
 80100ee:	4413      	add	r3, r2
 80100f0:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 80100f4:	2000      	movs	r0, #0
 80100f6:	2100      	movs	r1, #0
 80100f8:	f1bb 0f00 	cmp.w	fp, #0
 80100fc:	db06      	blt.n	801010c <__kernel_rem_pio2+0x504>
 80100fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010102:	f7f0 f8e3 	bl	80002cc <__adddf3>
 8010106:	f10b 3bff 	add.w	fp, fp, #4294967295
 801010a:	e7f5      	b.n	80100f8 <__kernel_rem_pio2+0x4f0>
 801010c:	f1ba 0f00 	cmp.w	sl, #0
 8010110:	d003      	beq.n	801011a <__kernel_rem_pio2+0x512>
 8010112:	4602      	mov	r2, r0
 8010114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010118:	e001      	b.n	801011e <__kernel_rem_pio2+0x516>
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	9901      	ldr	r1, [sp, #4]
 8010120:	e9c1 2300 	strd	r2, r3, [r1]
 8010124:	e0a7      	b.n	8010276 <__kernel_rem_pio2+0x66e>
 8010126:	2d00      	cmp	r5, #0
 8010128:	db05      	blt.n	8010136 <__kernel_rem_pio2+0x52e>
 801012a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801012e:	f7f0 f8cd 	bl	80002cc <__adddf3>
 8010132:	3d01      	subs	r5, #1
 8010134:	e7f7      	b.n	8010126 <__kernel_rem_pio2+0x51e>
 8010136:	f1ba 0f00 	cmp.w	sl, #0
 801013a:	d003      	beq.n	8010144 <__kernel_rem_pio2+0x53c>
 801013c:	4602      	mov	r2, r0
 801013e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010142:	e001      	b.n	8010148 <__kernel_rem_pio2+0x540>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	9c01      	ldr	r4, [sp, #4]
 801014a:	e9c4 2300 	strd	r2, r3, [r4]
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010156:	f7f0 f8b7 	bl	80002c8 <__aeabi_dsub>
 801015a:	ad4a      	add	r5, sp, #296	; 0x128
 801015c:	2401      	movs	r4, #1
 801015e:	45a3      	cmp	fp, r4
 8010160:	db05      	blt.n	801016e <__kernel_rem_pio2+0x566>
 8010162:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010166:	f7f0 f8b1 	bl	80002cc <__adddf3>
 801016a:	3401      	adds	r4, #1
 801016c:	e7f7      	b.n	801015e <__kernel_rem_pio2+0x556>
 801016e:	f1ba 0f00 	cmp.w	sl, #0
 8010172:	d003      	beq.n	801017c <__kernel_rem_pio2+0x574>
 8010174:	4602      	mov	r2, r0
 8010176:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801017a:	e001      	b.n	8010180 <__kernel_rem_pio2+0x578>
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	9901      	ldr	r1, [sp, #4]
 8010182:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8010186:	e076      	b.n	8010276 <__kernel_rem_pio2+0x66e>
 8010188:	f1b9 0f00 	cmp.w	r9, #0
 801018c:	dd20      	ble.n	80101d0 <__kernel_rem_pio2+0x5c8>
 801018e:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8010192:	ed98 7b02 	vldr	d7, [r8, #8]
 8010196:	4630      	mov	r0, r6
 8010198:	ec53 2b17 	vmov	r2, r3, d7
 801019c:	4639      	mov	r1, r7
 801019e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101a2:	f7f0 f893 	bl	80002cc <__adddf3>
 80101a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	4630      	mov	r0, r6
 80101b0:	4639      	mov	r1, r7
 80101b2:	f7f0 f889 	bl	80002c8 <__aeabi_dsub>
 80101b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ba:	f7f0 f887 	bl	80002cc <__adddf3>
 80101be:	ed9d 7b06 	vldr	d7, [sp, #24]
 80101c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80101c6:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80101ca:	ed88 7b00 	vstr	d7, [r8]
 80101ce:	e7db      	b.n	8010188 <__kernel_rem_pio2+0x580>
 80101d0:	465e      	mov	r6, fp
 80101d2:	2e01      	cmp	r6, #1
 80101d4:	dd1f      	ble.n	8010216 <__kernel_rem_pio2+0x60e>
 80101d6:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 80101da:	ed94 7b02 	vldr	d7, [r4, #8]
 80101de:	4640      	mov	r0, r8
 80101e0:	ec53 2b17 	vmov	r2, r3, d7
 80101e4:	4649      	mov	r1, r9
 80101e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101ea:	f7f0 f86f 	bl	80002cc <__adddf3>
 80101ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	4640      	mov	r0, r8
 80101f8:	4649      	mov	r1, r9
 80101fa:	f7f0 f865 	bl	80002c8 <__aeabi_dsub>
 80101fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010202:	f7f0 f863 	bl	80002cc <__adddf3>
 8010206:	ed9d 7b06 	vldr	d7, [sp, #24]
 801020a:	3e01      	subs	r6, #1
 801020c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010210:	ed84 7b00 	vstr	d7, [r4]
 8010214:	e7dd      	b.n	80101d2 <__kernel_rem_pio2+0x5ca>
 8010216:	9c05      	ldr	r4, [sp, #20]
 8010218:	ab48      	add	r3, sp, #288	; 0x120
 801021a:	3408      	adds	r4, #8
 801021c:	441c      	add	r4, r3
 801021e:	2000      	movs	r0, #0
 8010220:	2100      	movs	r1, #0
 8010222:	f1bb 0f01 	cmp.w	fp, #1
 8010226:	dd06      	ble.n	8010236 <__kernel_rem_pio2+0x62e>
 8010228:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801022c:	f7f0 f84e 	bl	80002cc <__adddf3>
 8010230:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010234:	e7f5      	b.n	8010222 <__kernel_rem_pio2+0x61a>
 8010236:	f1ba 0f00 	cmp.w	sl, #0
 801023a:	d10b      	bne.n	8010254 <__kernel_rem_pio2+0x64c>
 801023c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8010240:	9c01      	ldr	r4, [sp, #4]
 8010242:	e9c4 2300 	strd	r2, r3, [r4]
 8010246:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 801024a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 801024e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010252:	e010      	b.n	8010276 <__kernel_rem_pio2+0x66e>
 8010254:	9a01      	ldr	r2, [sp, #4]
 8010256:	682b      	ldr	r3, [r5, #0]
 8010258:	6013      	str	r3, [r2, #0]
 801025a:	686b      	ldr	r3, [r5, #4]
 801025c:	6110      	str	r0, [r2, #16]
 801025e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010262:	6053      	str	r3, [r2, #4]
 8010264:	68ab      	ldr	r3, [r5, #8]
 8010266:	6093      	str	r3, [r2, #8]
 8010268:	68eb      	ldr	r3, [r5, #12]
 801026a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801026e:	60d3      	str	r3, [r2, #12]
 8010270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010274:	6153      	str	r3, [r2, #20]
 8010276:	9b04      	ldr	r3, [sp, #16]
 8010278:	f003 0007 	and.w	r0, r3, #7
 801027c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	f3af 8000 	nop.w
 8010288:	00000000 	.word	0x00000000
 801028c:	3ff00000 	.word	0x3ff00000
	...
 8010298:	41700000 	.word	0x41700000
 801029c:	3e700000 	.word	0x3e700000
 80102a0:	08011dd8 	.word	0x08011dd8
 80102a4:	00000000 	.word	0x00000000

080102a8 <__kernel_sin>:
 80102a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ac:	ec55 4b10 	vmov	r4, r5, d0
 80102b0:	b085      	sub	sp, #20
 80102b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80102b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80102ba:	ed8d 1b00 	vstr	d1, [sp]
 80102be:	9002      	str	r0, [sp, #8]
 80102c0:	da07      	bge.n	80102d2 <__kernel_sin+0x2a>
 80102c2:	ee10 0a10 	vmov	r0, s0
 80102c6:	4629      	mov	r1, r5
 80102c8:	f7f0 fc62 	bl	8000b90 <__aeabi_d2iz>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	f000 8081 	beq.w	80103d4 <__kernel_sin+0x12c>
 80102d2:	4622      	mov	r2, r4
 80102d4:	462b      	mov	r3, r5
 80102d6:	4620      	mov	r0, r4
 80102d8:	4629      	mov	r1, r5
 80102da:	f7f0 f9a9 	bl	8000630 <__aeabi_dmul>
 80102de:	4682      	mov	sl, r0
 80102e0:	468b      	mov	fp, r1
 80102e2:	4602      	mov	r2, r0
 80102e4:	460b      	mov	r3, r1
 80102e6:	4620      	mov	r0, r4
 80102e8:	4629      	mov	r1, r5
 80102ea:	f7f0 f9a1 	bl	8000630 <__aeabi_dmul>
 80102ee:	a341      	add	r3, pc, #260	; (adr r3, 80103f4 <__kernel_sin+0x14c>)
 80102f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f4:	4680      	mov	r8, r0
 80102f6:	4689      	mov	r9, r1
 80102f8:	4650      	mov	r0, sl
 80102fa:	4659      	mov	r1, fp
 80102fc:	f7f0 f998 	bl	8000630 <__aeabi_dmul>
 8010300:	a33e      	add	r3, pc, #248	; (adr r3, 80103fc <__kernel_sin+0x154>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	f7ef ffdf 	bl	80002c8 <__aeabi_dsub>
 801030a:	4652      	mov	r2, sl
 801030c:	465b      	mov	r3, fp
 801030e:	f7f0 f98f 	bl	8000630 <__aeabi_dmul>
 8010312:	a33c      	add	r3, pc, #240	; (adr r3, 8010404 <__kernel_sin+0x15c>)
 8010314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010318:	f7ef ffd8 	bl	80002cc <__adddf3>
 801031c:	4652      	mov	r2, sl
 801031e:	465b      	mov	r3, fp
 8010320:	f7f0 f986 	bl	8000630 <__aeabi_dmul>
 8010324:	a339      	add	r3, pc, #228	; (adr r3, 801040c <__kernel_sin+0x164>)
 8010326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032a:	f7ef ffcd 	bl	80002c8 <__aeabi_dsub>
 801032e:	4652      	mov	r2, sl
 8010330:	465b      	mov	r3, fp
 8010332:	f7f0 f97d 	bl	8000630 <__aeabi_dmul>
 8010336:	a337      	add	r3, pc, #220	; (adr r3, 8010414 <__kernel_sin+0x16c>)
 8010338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033c:	f7ef ffc6 	bl	80002cc <__adddf3>
 8010340:	9b02      	ldr	r3, [sp, #8]
 8010342:	4606      	mov	r6, r0
 8010344:	460f      	mov	r7, r1
 8010346:	b99b      	cbnz	r3, 8010370 <__kernel_sin+0xc8>
 8010348:	4602      	mov	r2, r0
 801034a:	460b      	mov	r3, r1
 801034c:	4650      	mov	r0, sl
 801034e:	4659      	mov	r1, fp
 8010350:	f7f0 f96e 	bl	8000630 <__aeabi_dmul>
 8010354:	a324      	add	r3, pc, #144	; (adr r3, 80103e8 <__kernel_sin+0x140>)
 8010356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035a:	f7ef ffb5 	bl	80002c8 <__aeabi_dsub>
 801035e:	4642      	mov	r2, r8
 8010360:	464b      	mov	r3, r9
 8010362:	f7f0 f965 	bl	8000630 <__aeabi_dmul>
 8010366:	4622      	mov	r2, r4
 8010368:	462b      	mov	r3, r5
 801036a:	f7ef ffaf 	bl	80002cc <__adddf3>
 801036e:	e033      	b.n	80103d8 <__kernel_sin+0x130>
 8010370:	2200      	movs	r2, #0
 8010372:	4b1f      	ldr	r3, [pc, #124]	; (80103f0 <__kernel_sin+0x148>)
 8010374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010378:	f7f0 f95a 	bl	8000630 <__aeabi_dmul>
 801037c:	4632      	mov	r2, r6
 801037e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010382:	463b      	mov	r3, r7
 8010384:	4640      	mov	r0, r8
 8010386:	4649      	mov	r1, r9
 8010388:	f7f0 f952 	bl	8000630 <__aeabi_dmul>
 801038c:	4602      	mov	r2, r0
 801038e:	460b      	mov	r3, r1
 8010390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010394:	f7ef ff98 	bl	80002c8 <__aeabi_dsub>
 8010398:	4652      	mov	r2, sl
 801039a:	465b      	mov	r3, fp
 801039c:	f7f0 f948 	bl	8000630 <__aeabi_dmul>
 80103a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103a4:	f7ef ff90 	bl	80002c8 <__aeabi_dsub>
 80103a8:	a30f      	add	r3, pc, #60	; (adr r3, 80103e8 <__kernel_sin+0x140>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	4606      	mov	r6, r0
 80103b0:	460f      	mov	r7, r1
 80103b2:	4640      	mov	r0, r8
 80103b4:	4649      	mov	r1, r9
 80103b6:	f7f0 f93b 	bl	8000630 <__aeabi_dmul>
 80103ba:	4602      	mov	r2, r0
 80103bc:	460b      	mov	r3, r1
 80103be:	4630      	mov	r0, r6
 80103c0:	4639      	mov	r1, r7
 80103c2:	f7ef ff83 	bl	80002cc <__adddf3>
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	4620      	mov	r0, r4
 80103cc:	4629      	mov	r1, r5
 80103ce:	f7ef ff7b 	bl	80002c8 <__aeabi_dsub>
 80103d2:	e001      	b.n	80103d8 <__kernel_sin+0x130>
 80103d4:	4620      	mov	r0, r4
 80103d6:	4629      	mov	r1, r5
 80103d8:	ec41 0b10 	vmov	d0, r0, r1
 80103dc:	b005      	add	sp, #20
 80103de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e2:	bf00      	nop
 80103e4:	f3af 8000 	nop.w
 80103e8:	55555549 	.word	0x55555549
 80103ec:	3fc55555 	.word	0x3fc55555
 80103f0:	3fe00000 	.word	0x3fe00000
 80103f4:	5acfd57c 	.word	0x5acfd57c
 80103f8:	3de5d93a 	.word	0x3de5d93a
 80103fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8010400:	3e5ae5e6 	.word	0x3e5ae5e6
 8010404:	57b1fe7d 	.word	0x57b1fe7d
 8010408:	3ec71de3 	.word	0x3ec71de3
 801040c:	19c161d5 	.word	0x19c161d5
 8010410:	3f2a01a0 	.word	0x3f2a01a0
 8010414:	1110f8a6 	.word	0x1110f8a6
 8010418:	3f811111 	.word	0x3f811111
 801041c:	00000000 	.word	0x00000000

08010420 <atan>:
 8010420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010424:	ec55 4b10 	vmov	r4, r5, d0
 8010428:	4bc5      	ldr	r3, [pc, #788]	; (8010740 <atan+0x320>)
 801042a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801042e:	429e      	cmp	r6, r3
 8010430:	46ab      	mov	fp, r5
 8010432:	dd13      	ble.n	801045c <atan+0x3c>
 8010434:	4ac3      	ldr	r2, [pc, #780]	; (8010744 <atan+0x324>)
 8010436:	4296      	cmp	r6, r2
 8010438:	dc01      	bgt.n	801043e <atan+0x1e>
 801043a:	d107      	bne.n	801044c <atan+0x2c>
 801043c:	b134      	cbz	r4, 801044c <atan+0x2c>
 801043e:	4622      	mov	r2, r4
 8010440:	462b      	mov	r3, r5
 8010442:	4620      	mov	r0, r4
 8010444:	4629      	mov	r1, r5
 8010446:	f7ef ff41 	bl	80002cc <__adddf3>
 801044a:	e13c      	b.n	80106c6 <atan+0x2a6>
 801044c:	f1bb 0f00 	cmp.w	fp, #0
 8010450:	f300 8133 	bgt.w	80106ba <atan+0x29a>
 8010454:	a19e      	add	r1, pc, #632	; (adr r1, 80106d0 <atan+0x2b0>)
 8010456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801045a:	e134      	b.n	80106c6 <atan+0x2a6>
 801045c:	4bba      	ldr	r3, [pc, #744]	; (8010748 <atan+0x328>)
 801045e:	429e      	cmp	r6, r3
 8010460:	dc14      	bgt.n	801048c <atan+0x6c>
 8010462:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010466:	429e      	cmp	r6, r3
 8010468:	f300 8082 	bgt.w	8010570 <atan+0x150>
 801046c:	a39a      	add	r3, pc, #616	; (adr r3, 80106d8 <atan+0x2b8>)
 801046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010472:	ee10 0a10 	vmov	r0, s0
 8010476:	4629      	mov	r1, r5
 8010478:	f7ef ff28 	bl	80002cc <__adddf3>
 801047c:	2200      	movs	r2, #0
 801047e:	4bb3      	ldr	r3, [pc, #716]	; (801074c <atan+0x32c>)
 8010480:	f7f0 fb66 	bl	8000b50 <__aeabi_dcmpgt>
 8010484:	2800      	cmp	r0, #0
 8010486:	f040 811c 	bne.w	80106c2 <atan+0x2a2>
 801048a:	e071      	b.n	8010570 <atan+0x150>
 801048c:	f000 f96c 	bl	8010768 <fabs>
 8010490:	4baf      	ldr	r3, [pc, #700]	; (8010750 <atan+0x330>)
 8010492:	429e      	cmp	r6, r3
 8010494:	ec55 4b10 	vmov	r4, r5, d0
 8010498:	dc3d      	bgt.n	8010516 <atan+0xf6>
 801049a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801049e:	429e      	cmp	r6, r3
 80104a0:	dc1f      	bgt.n	80104e2 <atan+0xc2>
 80104a2:	ee10 2a10 	vmov	r2, s0
 80104a6:	ee10 0a10 	vmov	r0, s0
 80104aa:	462b      	mov	r3, r5
 80104ac:	4629      	mov	r1, r5
 80104ae:	f7ef ff0d 	bl	80002cc <__adddf3>
 80104b2:	2200      	movs	r2, #0
 80104b4:	4ba5      	ldr	r3, [pc, #660]	; (801074c <atan+0x32c>)
 80104b6:	f7ef ff07 	bl	80002c8 <__aeabi_dsub>
 80104ba:	2200      	movs	r2, #0
 80104bc:	4606      	mov	r6, r0
 80104be:	460f      	mov	r7, r1
 80104c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80104c4:	4620      	mov	r0, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7ef ff00 	bl	80002cc <__adddf3>
 80104cc:	4602      	mov	r2, r0
 80104ce:	460b      	mov	r3, r1
 80104d0:	4630      	mov	r0, r6
 80104d2:	4639      	mov	r1, r7
 80104d4:	f7f0 f9d6 	bl	8000884 <__aeabi_ddiv>
 80104d8:	f04f 0a00 	mov.w	sl, #0
 80104dc:	4604      	mov	r4, r0
 80104de:	460d      	mov	r5, r1
 80104e0:	e048      	b.n	8010574 <atan+0x154>
 80104e2:	ee10 0a10 	vmov	r0, s0
 80104e6:	2200      	movs	r2, #0
 80104e8:	4b98      	ldr	r3, [pc, #608]	; (801074c <atan+0x32c>)
 80104ea:	4629      	mov	r1, r5
 80104ec:	f7ef feec 	bl	80002c8 <__aeabi_dsub>
 80104f0:	2200      	movs	r2, #0
 80104f2:	4606      	mov	r6, r0
 80104f4:	460f      	mov	r7, r1
 80104f6:	4b95      	ldr	r3, [pc, #596]	; (801074c <atan+0x32c>)
 80104f8:	4620      	mov	r0, r4
 80104fa:	4629      	mov	r1, r5
 80104fc:	f7ef fee6 	bl	80002cc <__adddf3>
 8010500:	4602      	mov	r2, r0
 8010502:	460b      	mov	r3, r1
 8010504:	4630      	mov	r0, r6
 8010506:	4639      	mov	r1, r7
 8010508:	f7f0 f9bc 	bl	8000884 <__aeabi_ddiv>
 801050c:	f04f 0a01 	mov.w	sl, #1
 8010510:	4604      	mov	r4, r0
 8010512:	460d      	mov	r5, r1
 8010514:	e02e      	b.n	8010574 <atan+0x154>
 8010516:	4b8f      	ldr	r3, [pc, #572]	; (8010754 <atan+0x334>)
 8010518:	429e      	cmp	r6, r3
 801051a:	dc1d      	bgt.n	8010558 <atan+0x138>
 801051c:	ee10 0a10 	vmov	r0, s0
 8010520:	2200      	movs	r2, #0
 8010522:	4b8d      	ldr	r3, [pc, #564]	; (8010758 <atan+0x338>)
 8010524:	4629      	mov	r1, r5
 8010526:	f7ef fecf 	bl	80002c8 <__aeabi_dsub>
 801052a:	2200      	movs	r2, #0
 801052c:	4606      	mov	r6, r0
 801052e:	460f      	mov	r7, r1
 8010530:	4b89      	ldr	r3, [pc, #548]	; (8010758 <atan+0x338>)
 8010532:	4620      	mov	r0, r4
 8010534:	4629      	mov	r1, r5
 8010536:	f7f0 f87b 	bl	8000630 <__aeabi_dmul>
 801053a:	2200      	movs	r2, #0
 801053c:	4b83      	ldr	r3, [pc, #524]	; (801074c <atan+0x32c>)
 801053e:	f7ef fec5 	bl	80002cc <__adddf3>
 8010542:	4602      	mov	r2, r0
 8010544:	460b      	mov	r3, r1
 8010546:	4630      	mov	r0, r6
 8010548:	4639      	mov	r1, r7
 801054a:	f7f0 f99b 	bl	8000884 <__aeabi_ddiv>
 801054e:	f04f 0a02 	mov.w	sl, #2
 8010552:	4604      	mov	r4, r0
 8010554:	460d      	mov	r5, r1
 8010556:	e00d      	b.n	8010574 <atan+0x154>
 8010558:	462b      	mov	r3, r5
 801055a:	ee10 2a10 	vmov	r2, s0
 801055e:	2000      	movs	r0, #0
 8010560:	497e      	ldr	r1, [pc, #504]	; (801075c <atan+0x33c>)
 8010562:	f7f0 f98f 	bl	8000884 <__aeabi_ddiv>
 8010566:	f04f 0a03 	mov.w	sl, #3
 801056a:	4604      	mov	r4, r0
 801056c:	460d      	mov	r5, r1
 801056e:	e001      	b.n	8010574 <atan+0x154>
 8010570:	f04f 3aff 	mov.w	sl, #4294967295
 8010574:	4622      	mov	r2, r4
 8010576:	462b      	mov	r3, r5
 8010578:	4620      	mov	r0, r4
 801057a:	4629      	mov	r1, r5
 801057c:	f7f0 f858 	bl	8000630 <__aeabi_dmul>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4680      	mov	r8, r0
 8010586:	4689      	mov	r9, r1
 8010588:	f7f0 f852 	bl	8000630 <__aeabi_dmul>
 801058c:	a354      	add	r3, pc, #336	; (adr r3, 80106e0 <atan+0x2c0>)
 801058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010592:	4606      	mov	r6, r0
 8010594:	460f      	mov	r7, r1
 8010596:	f7f0 f84b 	bl	8000630 <__aeabi_dmul>
 801059a:	a353      	add	r3, pc, #332	; (adr r3, 80106e8 <atan+0x2c8>)
 801059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a0:	f7ef fe94 	bl	80002cc <__adddf3>
 80105a4:	4632      	mov	r2, r6
 80105a6:	463b      	mov	r3, r7
 80105a8:	f7f0 f842 	bl	8000630 <__aeabi_dmul>
 80105ac:	a350      	add	r3, pc, #320	; (adr r3, 80106f0 <atan+0x2d0>)
 80105ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b2:	f7ef fe8b 	bl	80002cc <__adddf3>
 80105b6:	4632      	mov	r2, r6
 80105b8:	463b      	mov	r3, r7
 80105ba:	f7f0 f839 	bl	8000630 <__aeabi_dmul>
 80105be:	a34e      	add	r3, pc, #312	; (adr r3, 80106f8 <atan+0x2d8>)
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	f7ef fe82 	bl	80002cc <__adddf3>
 80105c8:	4632      	mov	r2, r6
 80105ca:	463b      	mov	r3, r7
 80105cc:	f7f0 f830 	bl	8000630 <__aeabi_dmul>
 80105d0:	a34b      	add	r3, pc, #300	; (adr r3, 8010700 <atan+0x2e0>)
 80105d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d6:	f7ef fe79 	bl	80002cc <__adddf3>
 80105da:	4632      	mov	r2, r6
 80105dc:	463b      	mov	r3, r7
 80105de:	f7f0 f827 	bl	8000630 <__aeabi_dmul>
 80105e2:	a349      	add	r3, pc, #292	; (adr r3, 8010708 <atan+0x2e8>)
 80105e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e8:	f7ef fe70 	bl	80002cc <__adddf3>
 80105ec:	4642      	mov	r2, r8
 80105ee:	464b      	mov	r3, r9
 80105f0:	f7f0 f81e 	bl	8000630 <__aeabi_dmul>
 80105f4:	a346      	add	r3, pc, #280	; (adr r3, 8010710 <atan+0x2f0>)
 80105f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fa:	4680      	mov	r8, r0
 80105fc:	4689      	mov	r9, r1
 80105fe:	4630      	mov	r0, r6
 8010600:	4639      	mov	r1, r7
 8010602:	f7f0 f815 	bl	8000630 <__aeabi_dmul>
 8010606:	a344      	add	r3, pc, #272	; (adr r3, 8010718 <atan+0x2f8>)
 8010608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060c:	f7ef fe5c 	bl	80002c8 <__aeabi_dsub>
 8010610:	4632      	mov	r2, r6
 8010612:	463b      	mov	r3, r7
 8010614:	f7f0 f80c 	bl	8000630 <__aeabi_dmul>
 8010618:	a341      	add	r3, pc, #260	; (adr r3, 8010720 <atan+0x300>)
 801061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061e:	f7ef fe53 	bl	80002c8 <__aeabi_dsub>
 8010622:	4632      	mov	r2, r6
 8010624:	463b      	mov	r3, r7
 8010626:	f7f0 f803 	bl	8000630 <__aeabi_dmul>
 801062a:	a33f      	add	r3, pc, #252	; (adr r3, 8010728 <atan+0x308>)
 801062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010630:	f7ef fe4a 	bl	80002c8 <__aeabi_dsub>
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	f7ef fffa 	bl	8000630 <__aeabi_dmul>
 801063c:	a33c      	add	r3, pc, #240	; (adr r3, 8010730 <atan+0x310>)
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	f7ef fe41 	bl	80002c8 <__aeabi_dsub>
 8010646:	4632      	mov	r2, r6
 8010648:	463b      	mov	r3, r7
 801064a:	f7ef fff1 	bl	8000630 <__aeabi_dmul>
 801064e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	d10e      	bne.n	8010676 <atan+0x256>
 8010658:	4640      	mov	r0, r8
 801065a:	4649      	mov	r1, r9
 801065c:	f7ef fe36 	bl	80002cc <__adddf3>
 8010660:	4622      	mov	r2, r4
 8010662:	462b      	mov	r3, r5
 8010664:	f7ef ffe4 	bl	8000630 <__aeabi_dmul>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	4620      	mov	r0, r4
 801066e:	4629      	mov	r1, r5
 8010670:	f7ef fe2a 	bl	80002c8 <__aeabi_dsub>
 8010674:	e027      	b.n	80106c6 <atan+0x2a6>
 8010676:	4640      	mov	r0, r8
 8010678:	4649      	mov	r1, r9
 801067a:	f7ef fe27 	bl	80002cc <__adddf3>
 801067e:	4622      	mov	r2, r4
 8010680:	462b      	mov	r3, r5
 8010682:	f7ef ffd5 	bl	8000630 <__aeabi_dmul>
 8010686:	4e36      	ldr	r6, [pc, #216]	; (8010760 <atan+0x340>)
 8010688:	4b36      	ldr	r3, [pc, #216]	; (8010764 <atan+0x344>)
 801068a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801068e:	4456      	add	r6, sl
 8010690:	449a      	add	sl, r3
 8010692:	e9da 2300 	ldrd	r2, r3, [sl]
 8010696:	f7ef fe17 	bl	80002c8 <__aeabi_dsub>
 801069a:	4622      	mov	r2, r4
 801069c:	462b      	mov	r3, r5
 801069e:	f7ef fe13 	bl	80002c8 <__aeabi_dsub>
 80106a2:	4602      	mov	r2, r0
 80106a4:	460b      	mov	r3, r1
 80106a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80106aa:	f7ef fe0d 	bl	80002c8 <__aeabi_dsub>
 80106ae:	f1bb 0f00 	cmp.w	fp, #0
 80106b2:	da08      	bge.n	80106c6 <atan+0x2a6>
 80106b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80106b8:	e005      	b.n	80106c6 <atan+0x2a6>
 80106ba:	a11f      	add	r1, pc, #124	; (adr r1, 8010738 <atan+0x318>)
 80106bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106c0:	e001      	b.n	80106c6 <atan+0x2a6>
 80106c2:	4620      	mov	r0, r4
 80106c4:	4629      	mov	r1, r5
 80106c6:	ec41 0b10 	vmov	d0, r0, r1
 80106ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ce:	bf00      	nop
 80106d0:	54442d18 	.word	0x54442d18
 80106d4:	bff921fb 	.word	0xbff921fb
 80106d8:	8800759c 	.word	0x8800759c
 80106dc:	7e37e43c 	.word	0x7e37e43c
 80106e0:	e322da11 	.word	0xe322da11
 80106e4:	3f90ad3a 	.word	0x3f90ad3a
 80106e8:	24760deb 	.word	0x24760deb
 80106ec:	3fa97b4b 	.word	0x3fa97b4b
 80106f0:	a0d03d51 	.word	0xa0d03d51
 80106f4:	3fb10d66 	.word	0x3fb10d66
 80106f8:	c54c206e 	.word	0xc54c206e
 80106fc:	3fb745cd 	.word	0x3fb745cd
 8010700:	920083ff 	.word	0x920083ff
 8010704:	3fc24924 	.word	0x3fc24924
 8010708:	5555550d 	.word	0x5555550d
 801070c:	3fd55555 	.word	0x3fd55555
 8010710:	2c6a6c2f 	.word	0x2c6a6c2f
 8010714:	bfa2b444 	.word	0xbfa2b444
 8010718:	52defd9a 	.word	0x52defd9a
 801071c:	3fadde2d 	.word	0x3fadde2d
 8010720:	af749a6d 	.word	0xaf749a6d
 8010724:	3fb3b0f2 	.word	0x3fb3b0f2
 8010728:	fe231671 	.word	0xfe231671
 801072c:	3fbc71c6 	.word	0x3fbc71c6
 8010730:	9998ebc4 	.word	0x9998ebc4
 8010734:	3fc99999 	.word	0x3fc99999
 8010738:	54442d18 	.word	0x54442d18
 801073c:	3ff921fb 	.word	0x3ff921fb
 8010740:	440fffff 	.word	0x440fffff
 8010744:	7ff00000 	.word	0x7ff00000
 8010748:	3fdbffff 	.word	0x3fdbffff
 801074c:	3ff00000 	.word	0x3ff00000
 8010750:	3ff2ffff 	.word	0x3ff2ffff
 8010754:	40037fff 	.word	0x40037fff
 8010758:	3ff80000 	.word	0x3ff80000
 801075c:	bff00000 	.word	0xbff00000
 8010760:	08011e38 	.word	0x08011e38
 8010764:	08011e18 	.word	0x08011e18

08010768 <fabs>:
 8010768:	ec53 2b10 	vmov	r2, r3, d0
 801076c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010770:	ec43 2b10 	vmov	d0, r2, r3
 8010774:	4770      	bx	lr
	...

08010778 <floor>:
 8010778:	ec51 0b10 	vmov	r0, r1, d0
 801077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010788:	2e13      	cmp	r6, #19
 801078a:	ee10 8a10 	vmov	r8, s0
 801078e:	460c      	mov	r4, r1
 8010790:	ee10 5a10 	vmov	r5, s0
 8010794:	dc33      	bgt.n	80107fe <floor+0x86>
 8010796:	2e00      	cmp	r6, #0
 8010798:	da16      	bge.n	80107c8 <floor+0x50>
 801079a:	a335      	add	r3, pc, #212	; (adr r3, 8010870 <floor+0xf8>)
 801079c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a0:	f7ef fd94 	bl	80002cc <__adddf3>
 80107a4:	2200      	movs	r2, #0
 80107a6:	2300      	movs	r3, #0
 80107a8:	f7f0 f9d2 	bl	8000b50 <__aeabi_dcmpgt>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d057      	beq.n	8010860 <floor+0xe8>
 80107b0:	2c00      	cmp	r4, #0
 80107b2:	da53      	bge.n	801085c <floor+0xe4>
 80107b4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80107b8:	ea53 0308 	orrs.w	r3, r3, r8
 80107bc:	4b2e      	ldr	r3, [pc, #184]	; (8010878 <floor+0x100>)
 80107be:	f04f 0500 	mov.w	r5, #0
 80107c2:	bf18      	it	ne
 80107c4:	461c      	movne	r4, r3
 80107c6:	e04b      	b.n	8010860 <floor+0xe8>
 80107c8:	4f2c      	ldr	r7, [pc, #176]	; (801087c <floor+0x104>)
 80107ca:	4137      	asrs	r7, r6
 80107cc:	ea01 0307 	and.w	r3, r1, r7
 80107d0:	4303      	orrs	r3, r0
 80107d2:	d047      	beq.n	8010864 <floor+0xec>
 80107d4:	a326      	add	r3, pc, #152	; (adr r3, 8010870 <floor+0xf8>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7ef fd77 	bl	80002cc <__adddf3>
 80107de:	2200      	movs	r2, #0
 80107e0:	2300      	movs	r3, #0
 80107e2:	f7f0 f9b5 	bl	8000b50 <__aeabi_dcmpgt>
 80107e6:	b3d8      	cbz	r0, 8010860 <floor+0xe8>
 80107e8:	2c00      	cmp	r4, #0
 80107ea:	bfbe      	ittt	lt
 80107ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80107f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80107f4:	19a4      	addlt	r4, r4, r6
 80107f6:	ea24 0407 	bic.w	r4, r4, r7
 80107fa:	2500      	movs	r5, #0
 80107fc:	e030      	b.n	8010860 <floor+0xe8>
 80107fe:	2e33      	cmp	r6, #51	; 0x33
 8010800:	dd08      	ble.n	8010814 <floor+0x9c>
 8010802:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010806:	d12d      	bne.n	8010864 <floor+0xec>
 8010808:	ee10 2a10 	vmov	r2, s0
 801080c:	460b      	mov	r3, r1
 801080e:	f7ef fd5d 	bl	80002cc <__adddf3>
 8010812:	e027      	b.n	8010864 <floor+0xec>
 8010814:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010818:	f04f 33ff 	mov.w	r3, #4294967295
 801081c:	fa23 f707 	lsr.w	r7, r3, r7
 8010820:	4238      	tst	r0, r7
 8010822:	d01f      	beq.n	8010864 <floor+0xec>
 8010824:	a312      	add	r3, pc, #72	; (adr r3, 8010870 <floor+0xf8>)
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	f7ef fd4f 	bl	80002cc <__adddf3>
 801082e:	2200      	movs	r2, #0
 8010830:	2300      	movs	r3, #0
 8010832:	f7f0 f98d 	bl	8000b50 <__aeabi_dcmpgt>
 8010836:	b198      	cbz	r0, 8010860 <floor+0xe8>
 8010838:	2c00      	cmp	r4, #0
 801083a:	da0c      	bge.n	8010856 <floor+0xde>
 801083c:	2e14      	cmp	r6, #20
 801083e:	d101      	bne.n	8010844 <floor+0xcc>
 8010840:	3401      	adds	r4, #1
 8010842:	e008      	b.n	8010856 <floor+0xde>
 8010844:	2301      	movs	r3, #1
 8010846:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801084a:	fa03 f606 	lsl.w	r6, r3, r6
 801084e:	4435      	add	r5, r6
 8010850:	45a8      	cmp	r8, r5
 8010852:	bf88      	it	hi
 8010854:	18e4      	addhi	r4, r4, r3
 8010856:	ea25 0507 	bic.w	r5, r5, r7
 801085a:	e001      	b.n	8010860 <floor+0xe8>
 801085c:	2500      	movs	r5, #0
 801085e:	462c      	mov	r4, r5
 8010860:	4621      	mov	r1, r4
 8010862:	4628      	mov	r0, r5
 8010864:	ec41 0b10 	vmov	d0, r0, r1
 8010868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801086c:	f3af 8000 	nop.w
 8010870:	8800759c 	.word	0x8800759c
 8010874:	7e37e43c 	.word	0x7e37e43c
 8010878:	bff00000 	.word	0xbff00000
 801087c:	000fffff 	.word	0x000fffff

08010880 <matherr>:
 8010880:	2000      	movs	r0, #0
 8010882:	4770      	bx	lr
 8010884:	0000      	movs	r0, r0
	...

08010888 <scalbn>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	ec55 4b10 	vmov	r4, r5, d0
 801088e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010892:	4606      	mov	r6, r0
 8010894:	462b      	mov	r3, r5
 8010896:	b9a2      	cbnz	r2, 80108c2 <scalbn+0x3a>
 8010898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801089c:	4323      	orrs	r3, r4
 801089e:	d059      	beq.n	8010954 <scalbn+0xcc>
 80108a0:	2200      	movs	r2, #0
 80108a2:	4b33      	ldr	r3, [pc, #204]	; (8010970 <scalbn+0xe8>)
 80108a4:	4629      	mov	r1, r5
 80108a6:	ee10 0a10 	vmov	r0, s0
 80108aa:	f7ef fec1 	bl	8000630 <__aeabi_dmul>
 80108ae:	4a31      	ldr	r2, [pc, #196]	; (8010974 <scalbn+0xec>)
 80108b0:	4296      	cmp	r6, r2
 80108b2:	4604      	mov	r4, r0
 80108b4:	460d      	mov	r5, r1
 80108b6:	460b      	mov	r3, r1
 80108b8:	da0f      	bge.n	80108da <scalbn+0x52>
 80108ba:	a329      	add	r3, pc, #164	; (adr r3, 8010960 <scalbn+0xd8>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	e045      	b.n	801094e <scalbn+0xc6>
 80108c2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80108c6:	428a      	cmp	r2, r1
 80108c8:	d10a      	bne.n	80108e0 <scalbn+0x58>
 80108ca:	ee10 2a10 	vmov	r2, s0
 80108ce:	462b      	mov	r3, r5
 80108d0:	4620      	mov	r0, r4
 80108d2:	4629      	mov	r1, r5
 80108d4:	f7ef fcfa 	bl	80002cc <__adddf3>
 80108d8:	e03e      	b.n	8010958 <scalbn+0xd0>
 80108da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80108de:	3a36      	subs	r2, #54	; 0x36
 80108e0:	4432      	add	r2, r6
 80108e2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80108e6:	428a      	cmp	r2, r1
 80108e8:	dd02      	ble.n	80108f0 <scalbn+0x68>
 80108ea:	ec45 4b11 	vmov	d1, r4, r5
 80108ee:	e011      	b.n	8010914 <scalbn+0x8c>
 80108f0:	2a00      	cmp	r2, #0
 80108f2:	dd06      	ble.n	8010902 <scalbn+0x7a>
 80108f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010900:	e028      	b.n	8010954 <scalbn+0xcc>
 8010902:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010906:	da17      	bge.n	8010938 <scalbn+0xb0>
 8010908:	f24c 3350 	movw	r3, #50000	; 0xc350
 801090c:	429e      	cmp	r6, r3
 801090e:	ec45 4b11 	vmov	d1, r4, r5
 8010912:	dd07      	ble.n	8010924 <scalbn+0x9c>
 8010914:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8010968 <scalbn+0xe0>
 8010918:	f000 f830 	bl	801097c <copysign>
 801091c:	a312      	add	r3, pc, #72	; (adr r3, 8010968 <scalbn+0xe0>)
 801091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010922:	e006      	b.n	8010932 <scalbn+0xaa>
 8010924:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010960 <scalbn+0xd8>
 8010928:	f000 f828 	bl	801097c <copysign>
 801092c:	a30c      	add	r3, pc, #48	; (adr r3, 8010960 <scalbn+0xd8>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	ec51 0b10 	vmov	r0, r1, d0
 8010936:	e00a      	b.n	801094e <scalbn+0xc6>
 8010938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801093c:	3236      	adds	r2, #54	; 0x36
 801093e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010942:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010946:	4b0c      	ldr	r3, [pc, #48]	; (8010978 <scalbn+0xf0>)
 8010948:	4620      	mov	r0, r4
 801094a:	4629      	mov	r1, r5
 801094c:	2200      	movs	r2, #0
 801094e:	f7ef fe6f 	bl	8000630 <__aeabi_dmul>
 8010952:	e001      	b.n	8010958 <scalbn+0xd0>
 8010954:	4620      	mov	r0, r4
 8010956:	4629      	mov	r1, r5
 8010958:	ec41 0b10 	vmov	d0, r0, r1
 801095c:	bd70      	pop	{r4, r5, r6, pc}
 801095e:	bf00      	nop
 8010960:	c2f8f359 	.word	0xc2f8f359
 8010964:	01a56e1f 	.word	0x01a56e1f
 8010968:	8800759c 	.word	0x8800759c
 801096c:	7e37e43c 	.word	0x7e37e43c
 8010970:	43500000 	.word	0x43500000
 8010974:	ffff3cb0 	.word	0xffff3cb0
 8010978:	3c900000 	.word	0x3c900000

0801097c <copysign>:
 801097c:	ec53 2b10 	vmov	r2, r3, d0
 8010980:	ee11 0a90 	vmov	r0, s3
 8010984:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010988:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801098c:	ea41 0300 	orr.w	r3, r1, r0
 8010990:	ec43 2b10 	vmov	d0, r2, r3
 8010994:	4770      	bx	lr
	...

08010998 <_init>:
 8010998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801099a:	bf00      	nop
 801099c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801099e:	bc08      	pop	{r3}
 80109a0:	469e      	mov	lr, r3
 80109a2:	4770      	bx	lr

080109a4 <_fini>:
 80109a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a6:	bf00      	nop
 80109a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109aa:	bc08      	pop	{r3}
 80109ac:	469e      	mov	lr, r3
 80109ae:	4770      	bx	lr
