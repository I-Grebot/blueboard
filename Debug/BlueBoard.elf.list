
BlueBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013500  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a8  080136d0  080136d0  000236d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015878  08015878  00025878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015880  08015880  00025880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015884  08015884  00025884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000059c  20010000  08015888  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  0003059c  2**0
                  CONTENTS
  8 .sram2        00000000  2004c000  2004c000  0003059c  2**0
                  CONTENTS
  9 .bss          0000443c  200105a0  200105a0  000305a0  2**3
                  ALLOC
 10 ._user_heap_stack 00001100  200149dc  200149dc  000305a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003059c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019185  00000000  00000000  000305cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a39  00000000  00000000  00049751  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed8  00000000  00000000  0004e190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bb0  00000000  00000000  00050068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d64b  00000000  00000000  00051c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000089b4  00000000  00000000  0005f263  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00067c17  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009314  00000000  00000000  00067c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200105a0 	.word	0x200105a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080136b8 	.word	0x080136b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200105a4 	.word	0x200105a4
 800020c:	080136b8 	.word	0x080136b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_uldivmod>:
 8000cc0:	b953      	cbnz	r3, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc2:	b94a      	cbnz	r2, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	2800      	cmpeq	r0, #0
 8000cca:	bf1c      	itt	ne
 8000ccc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd4:	f000 b97e 	b.w	8000fd4 <__aeabi_idiv0>
 8000cd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce0:	f000 f806 	bl	8000cf0 <__udivmoddi4>
 8000ce4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cec:	b004      	add	sp, #16
 8000cee:	4770      	bx	lr

08000cf0 <__udivmoddi4>:
 8000cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	460e      	mov	r6, r1
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	9d08      	ldr	r5, [sp, #32]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d150      	bne.n	8000da2 <__udivmoddi4+0xb2>
 8000d00:	428a      	cmp	r2, r1
 8000d02:	4617      	mov	r7, r2
 8000d04:	d96c      	bls.n	8000de0 <__udivmoddi4+0xf0>
 8000d06:	fab2 fe82 	clz	lr, r2
 8000d0a:	f1be 0f00 	cmp.w	lr, #0
 8000d0e:	d00b      	beq.n	8000d28 <__udivmoddi4+0x38>
 8000d10:	f1ce 0420 	rsb	r4, lr, #32
 8000d14:	fa20 f404 	lsr.w	r4, r0, r4
 8000d18:	fa01 f60e 	lsl.w	r6, r1, lr
 8000d1c:	ea44 0c06 	orr.w	ip, r4, r6
 8000d20:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	fbbc f0f9 	udiv	r0, ip, r9
 8000d32:	fa1f f887 	uxth.w	r8, r7
 8000d36:	fb09 c610 	mls	r6, r9, r0, ip
 8000d3a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d3e:	fb00 f308 	mul.w	r3, r0, r8
 8000d42:	42b3      	cmp	r3, r6
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x6a>
 8000d46:	19f6      	adds	r6, r6, r7
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	f080 8122 	bcs.w	8000f94 <__udivmoddi4+0x2a4>
 8000d50:	42b3      	cmp	r3, r6
 8000d52:	f240 811f 	bls.w	8000f94 <__udivmoddi4+0x2a4>
 8000d56:	3802      	subs	r0, #2
 8000d58:	443e      	add	r6, r7
 8000d5a:	1af6      	subs	r6, r6, r3
 8000d5c:	b2a2      	uxth	r2, r4
 8000d5e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d62:	fb09 6613 	mls	r6, r9, r3, r6
 8000d66:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d6a:	fb03 f808 	mul.w	r8, r3, r8
 8000d6e:	45a0      	cmp	r8, r4
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x96>
 8000d72:	19e4      	adds	r4, r4, r7
 8000d74:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d78:	f080 810a 	bcs.w	8000f90 <__udivmoddi4+0x2a0>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f240 8107 	bls.w	8000f90 <__udivmoddi4+0x2a0>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	ebc8 0404 	rsb	r4, r8, r4
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d062      	beq.n	8000e5a <__udivmoddi4+0x16a>
 8000d94:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d98:	2300      	movs	r3, #0
 8000d9a:	602c      	str	r4, [r5, #0]
 8000d9c:	606b      	str	r3, [r5, #4]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0xc6>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d055      	beq.n	8000e56 <__udivmoddi4+0x166>
 8000daa:	2100      	movs	r1, #0
 8000dac:	e885 0041 	stmia.w	r5, {r0, r6}
 8000db0:	4608      	mov	r0, r1
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f183 	clz	r1, r3
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	f040 8090 	bne.w	8000ee0 <__udivmoddi4+0x1f0>
 8000dc0:	42b3      	cmp	r3, r6
 8000dc2:	d302      	bcc.n	8000dca <__udivmoddi4+0xda>
 8000dc4:	4282      	cmp	r2, r0
 8000dc6:	f200 80f8 	bhi.w	8000fba <__udivmoddi4+0x2ca>
 8000dca:	1a84      	subs	r4, r0, r2
 8000dcc:	eb66 0603 	sbc.w	r6, r6, r3
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	46b4      	mov	ip, r6
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	d040      	beq.n	8000e5a <__udivmoddi4+0x16a>
 8000dd8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	b912      	cbnz	r2, 8000de8 <__udivmoddi4+0xf8>
 8000de2:	2701      	movs	r7, #1
 8000de4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000de8:	fab7 fe87 	clz	lr, r7
 8000dec:	f1be 0f00 	cmp.w	lr, #0
 8000df0:	d135      	bne.n	8000e5e <__udivmoddi4+0x16e>
 8000df2:	1bf3      	subs	r3, r6, r7
 8000df4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df8:	fa1f fc87 	uxth.w	ip, r7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e02:	0c22      	lsrs	r2, r4, #16
 8000e04:	fb08 3610 	mls	r6, r8, r0, r3
 8000e08:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000e0c:	fb0c f300 	mul.w	r3, ip, r0
 8000e10:	42b3      	cmp	r3, r6
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x134>
 8000e14:	19f6      	adds	r6, r6, r7
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x132>
 8000e1c:	42b3      	cmp	r3, r6
 8000e1e:	f200 80ce 	bhi.w	8000fbe <__udivmoddi4+0x2ce>
 8000e22:	4610      	mov	r0, r2
 8000e24:	1af6      	subs	r6, r6, r3
 8000e26:	b2a2      	uxth	r2, r4
 8000e28:	fbb6 f3f8 	udiv	r3, r6, r8
 8000e2c:	fb08 6613 	mls	r6, r8, r3, r6
 8000e30:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000e34:	fb0c fc03 	mul.w	ip, ip, r3
 8000e38:	45a4      	cmp	ip, r4
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x15c>
 8000e3c:	19e4      	adds	r4, r4, r7
 8000e3e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x15a>
 8000e44:	45a4      	cmp	ip, r4
 8000e46:	f200 80b5 	bhi.w	8000fb4 <__udivmoddi4+0x2c4>
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	ebcc 0404 	rsb	r4, ip, r4
 8000e50:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e54:	e79c      	b.n	8000d90 <__udivmoddi4+0xa0>
 8000e56:	4629      	mov	r1, r5
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	f1ce 0120 	rsb	r1, lr, #32
 8000e62:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e6a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e72:	40ce      	lsrs	r6, r1
 8000e74:	ea49 0903 	orr.w	r9, r9, r3
 8000e78:	fbb6 faf8 	udiv	sl, r6, r8
 8000e7c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e80:	fb08 661a 	mls	r6, r8, sl, r6
 8000e84:	fa1f fc87 	uxth.w	ip, r7
 8000e88:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e8c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e90:	429a      	cmp	r2, r3
 8000e92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1be>
 8000e98:	19db      	adds	r3, r3, r7
 8000e9a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e9e:	f080 8087 	bcs.w	8000fb0 <__udivmoddi4+0x2c0>
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	f240 8084 	bls.w	8000fb0 <__udivmoddi4+0x2c0>
 8000ea8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000eac:	443b      	add	r3, r7
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	fa1f f989 	uxth.w	r9, r9
 8000eb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ebc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000ec0:	fb01 f60c 	mul.w	r6, r1, ip
 8000ec4:	429e      	cmp	r6, r3
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x1e8>
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	f101 32ff 	add.w	r2, r1, #4294967295
 8000ece:	d26b      	bcs.n	8000fa8 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d969      	bls.n	8000fa8 <__udivmoddi4+0x2b8>
 8000ed4:	3902      	subs	r1, #2
 8000ed6:	443b      	add	r3, r7
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000ede:	e78e      	b.n	8000dfe <__udivmoddi4+0x10e>
 8000ee0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ee4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	4323      	orrs	r3, r4
 8000eec:	fa20 f70e 	lsr.w	r7, r0, lr
 8000ef0:	fa06 f401 	lsl.w	r4, r6, r1
 8000ef4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ef8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000efc:	433c      	orrs	r4, r7
 8000efe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000f02:	0c27      	lsrs	r7, r4, #16
 8000f04:	fb0c 6619 	mls	r6, ip, r9, r6
 8000f08:	fa1f f883 	uxth.w	r8, r3
 8000f0c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000f10:	fb09 f708 	mul.w	r7, r9, r8
 8000f14:	42b7      	cmp	r7, r6
 8000f16:	fa02 f201 	lsl.w	r2, r2, r1
 8000f1a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x242>
 8000f20:	18f6      	adds	r6, r6, r3
 8000f22:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f26:	d241      	bcs.n	8000fac <__udivmoddi4+0x2bc>
 8000f28:	42b7      	cmp	r7, r6
 8000f2a:	d93f      	bls.n	8000fac <__udivmoddi4+0x2bc>
 8000f2c:	f1a9 0902 	sub.w	r9, r9, #2
 8000f30:	441e      	add	r6, r3
 8000f32:	1bf6      	subs	r6, r6, r7
 8000f34:	b2a0      	uxth	r0, r4
 8000f36:	fbb6 f4fc 	udiv	r4, r6, ip
 8000f3a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000f3e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f42:	fb04 f808 	mul.w	r8, r4, r8
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d907      	bls.n	8000f5a <__udivmoddi4+0x26a>
 8000f4a:	18ff      	adds	r7, r7, r3
 8000f4c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f50:	d228      	bcs.n	8000fa4 <__udivmoddi4+0x2b4>
 8000f52:	45b8      	cmp	r8, r7
 8000f54:	d926      	bls.n	8000fa4 <__udivmoddi4+0x2b4>
 8000f56:	3c02      	subs	r4, #2
 8000f58:	441f      	add	r7, r3
 8000f5a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f5e:	ebc8 0707 	rsb	r7, r8, r7
 8000f62:	fba0 8902 	umull	r8, r9, r0, r2
 8000f66:	454f      	cmp	r7, r9
 8000f68:	4644      	mov	r4, r8
 8000f6a:	464e      	mov	r6, r9
 8000f6c:	d314      	bcc.n	8000f98 <__udivmoddi4+0x2a8>
 8000f6e:	d029      	beq.n	8000fc4 <__udivmoddi4+0x2d4>
 8000f70:	b365      	cbz	r5, 8000fcc <__udivmoddi4+0x2dc>
 8000f72:	ebba 0304 	subs.w	r3, sl, r4
 8000f76:	eb67 0706 	sbc.w	r7, r7, r6
 8000f7a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f7e:	40cb      	lsrs	r3, r1
 8000f80:	40cf      	lsrs	r7, r1
 8000f82:	ea4e 0303 	orr.w	r3, lr, r3
 8000f86:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f90:	4613      	mov	r3, r2
 8000f92:	e6f8      	b.n	8000d86 <__udivmoddi4+0x96>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6e0      	b.n	8000d5a <__udivmoddi4+0x6a>
 8000f98:	ebb8 0402 	subs.w	r4, r8, r2
 8000f9c:	eb69 0603 	sbc.w	r6, r9, r3
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7e5      	b.n	8000f70 <__udivmoddi4+0x280>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	e7d8      	b.n	8000f5a <__udivmoddi4+0x26a>
 8000fa8:	4611      	mov	r1, r2
 8000faa:	e795      	b.n	8000ed8 <__udivmoddi4+0x1e8>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7c0      	b.n	8000f32 <__udivmoddi4+0x242>
 8000fb0:	468a      	mov	sl, r1
 8000fb2:	e77c      	b.n	8000eae <__udivmoddi4+0x1be>
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e748      	b.n	8000e4c <__udivmoddi4+0x15c>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e70a      	b.n	8000dd4 <__udivmoddi4+0xe4>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	443e      	add	r6, r7
 8000fc2:	e72f      	b.n	8000e24 <__udivmoddi4+0x134>
 8000fc4:	45c2      	cmp	sl, r8
 8000fc6:	d3e7      	bcc.n	8000f98 <__udivmoddi4+0x2a8>
 8000fc8:	463e      	mov	r6, r7
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x280>
 8000fcc:	4629      	mov	r1, r5
 8000fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fdc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fe0:	4905      	ldr	r1, [pc, #20]	; (8000ff8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <NVIC_SystemReset+0x20>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <NVIC_SystemReset+0x24>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60cb      	str	r3, [r1, #12]
 8000ff0:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ff4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 8000ff6:	e7fd      	b.n	8000ff4 <NVIC_SystemReset+0x1c>
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	05fa0004 	.word	0x05fa0004

08001000 <OS_SHL_RegisterCommands>:
 * -----------------------------------------------------------------------------
 */


void OS_SHL_RegisterCommands( void )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    FreeRTOS_CLIRegisterCommand( &xSys );
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <OS_SHL_RegisterCommands+0x70>)
 8001006:	f008 fd0d 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xVar );
 800100a:	481a      	ldr	r0, [pc, #104]	; (8001074 <OS_SHL_RegisterCommands+0x74>)
 800100c:	f008 fd0a 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xSet );
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <OS_SHL_RegisterCommands+0x78>)
 8001012:	f008 fd07 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xGet );
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <OS_SHL_RegisterCommands+0x7c>)
 8001018:	f008 fd04 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xPrb );
 800101c:	4818      	ldr	r0, [pc, #96]	; (8001080 <OS_SHL_RegisterCommands+0x80>)
 800101e:	f008 fd01 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xSto );
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <OS_SHL_RegisterCommands+0x84>)
 8001024:	f008 fcfe 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xPow );
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <OS_SHL_RegisterCommands+0x88>)
 800102a:	f008 fcfb 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xMot );
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <OS_SHL_RegisterCommands+0x8c>)
 8001030:	f008 fcf8 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xDsv );
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <OS_SHL_RegisterCommands+0x90>)
 8001036:	f008 fcf5 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAsv );
 800103a:	4816      	ldr	r0, [pc, #88]	; (8001094 <OS_SHL_RegisterCommands+0x94>)
 800103c:	f008 fcf2 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xMon );
 8001040:	4815      	ldr	r0, [pc, #84]	; (8001098 <OS_SHL_RegisterCommands+0x98>)
 8001042:	f008 fcef 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xDio );
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <OS_SHL_RegisterCommands+0x9c>)
 8001048:	f008 fcec 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xHmi );
 800104c:	4814      	ldr	r0, [pc, #80]	; (80010a0 <OS_SHL_RegisterCommands+0xa0>)
 800104e:	f008 fce9 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xLed );
 8001052:	4814      	ldr	r0, [pc, #80]	; (80010a4 <OS_SHL_RegisterCommands+0xa4>)
 8001054:	f008 fce6 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAvs );
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <OS_SHL_RegisterCommands+0xa8>)
 800105a:	f008 fce3 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xAvd );
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <OS_SHL_RegisterCommands+0xac>)
 8001060:	f008 fce0 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand( &xStr );
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <OS_SHL_RegisterCommands+0xb0>)
 8001066:	f008 fcdd 	bl	8009a24 <FreeRTOS_CLIRegisterCommand>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08014f20 	.word	0x08014f20
 8001074:	08014f30 	.word	0x08014f30
 8001078:	08014f40 	.word	0x08014f40
 800107c:	08014f50 	.word	0x08014f50
 8001080:	08014f60 	.word	0x08014f60
 8001084:	08014f70 	.word	0x08014f70
 8001088:	08014f80 	.word	0x08014f80
 800108c:	08014f90 	.word	0x08014f90
 8001090:	08014fa0 	.word	0x08014fa0
 8001094:	08014fb0 	.word	0x08014fb0
 8001098:	08014fc0 	.word	0x08014fc0
 800109c:	08014fd0 	.word	0x08014fd0
 80010a0:	08014fe0 	.word	0x08014fe0
 80010a4:	08014ff0 	.word	0x08014ff0
 80010a8:	08015000 	.word	0x08015000
 80010ac:	08015010 	.word	0x08015010
 80010b0:	08015020 	.word	0x08015020

080010b4 <OS_SHL_SysCmd>:
 * Commands functions
 * -----------------------------------------------------------------------------
 */

static BaseType_t OS_SHL_SysCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
    const char *const pcHeader_list =
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <OS_SHL_SysCmd+0xe4>)
 80010c2:	61bb      	str	r3, [r7, #24]

    char* pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	461a      	mov	r2, r3
 80010ca:	2101      	movs	r1, #1
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f008 fd71 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80010d2:	6178      	str	r0, [r7, #20]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	461a      	mov	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	4413      	add	r3, r2
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

    /* 'RESET' Sub-command: reset the microcontroller */
    if(!strcasecmp(pcParameter1, "reset")) {
 80010e0:	492e      	ldr	r1, [pc, #184]	; (800119c <OS_SHL_SysCmd+0xe8>)
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f00a ffb8 	bl	800c058 <strcasecmp>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d108      	bne.n	8001100 <OS_SHL_SysCmd+0x4c>
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_SYS_PFX"Resetting..."SHELL_EOL);
 80010ee:	4a2c      	ldr	r2, [pc, #176]	; (80011a0 <OS_SHL_SysCmd+0xec>)
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f00a ff5a 	bl	800bfac <snprintf>
        NVIC_SystemReset(); /* Auto-kill */
 80010f8:	f7ff ff6e 	bl	8000fd8 <NVIC_SystemReset>
        return pdFALSE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e047      	b.n	8001190 <OS_SHL_SysCmd+0xdc>

    /* 'TASKS-LIST' Sub-command: display tasks informations */
    } else if(!strcasecmp(pcParameter1, "tasks-list")) {
 8001100:	4928      	ldr	r1, [pc, #160]	; (80011a4 <OS_SHL_SysCmd+0xf0>)
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f00a ffa8 	bl	800c058 <strcasecmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d12d      	bne.n	800116a <OS_SHL_SysCmd+0xb6>

        /* Generate a table of task stats. */
        strcpy( pcWriteBuffer, "Task" );
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <OS_SHL_SysCmd+0xf4>)
 8001112:	6810      	ldr	r0, [r2, #0]
 8001114:	6018      	str	r0, [r3, #0]
 8001116:	7912      	ldrb	r2, [r2, #4]
 8001118:	711a      	strb	r2, [r3, #4]
        pcWriteBuffer += strlen( pcWriteBuffer );
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff f878 	bl	8000210 <strlen>
 8001120:	4602      	mov	r2, r0
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

        /* Minus three for the null terminator and half the number of characters in
        "Task" so the column lines up with the centre of the heading. */
        configASSERT( configMAX_TASK_NAME_LEN > 3 );
        for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 8001128:	2304      	movs	r3, #4
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	e00b      	b.n	8001146 <OS_SHL_SysCmd+0x92>
        {
            /* Add a space to align columns after the task's name. */
            *pcWriteBuffer = ' ';
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2220      	movs	r2, #32
 8001132:	701a      	strb	r2, [r3, #0]
            pcWriteBuffer++;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]

            /* Ensure always terminated. */
            *pcWriteBuffer = 0x00;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
        pcWriteBuffer += strlen( pcWriteBuffer );

        /* Minus three for the null terminator and half the number of characters in
        "Task" so the column lines up with the centre of the heading. */
        configASSERT( configMAX_TASK_NAME_LEN > 3 );
        for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b0c      	cmp	r3, #12
 800114a:	ddf0      	ble.n	800112e <OS_SHL_SysCmd+0x7a>

            /* Ensure always terminated. */
            *pcWriteBuffer = 0x00;
        }
        // TODO add SHELL_SYS_PFX for each entry
        strcpy( pcWriteBuffer, pcHeader_list );
 800114c:	69b9      	ldr	r1, [r7, #24]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f00a ffa0 	bl	800c094 <strcpy>
        vTaskList( pcWriteBuffer + strlen( pcHeader_list ) );
 8001154:	69b8      	ldr	r0, [r7, #24]
 8001156:	f7ff f85b 	bl	8000210 <strlen>
 800115a:	4602      	mov	r2, r0
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f008 f881 	bl	8009268 <vTaskList>
        return pdFALSE;
 8001166:	2300      	movs	r3, #0
 8001168:	e012      	b.n	8001190 <OS_SHL_SysCmd+0xdc>

    /* 'TASKS-STATS' Sub-command: display tasks statistics */
    } else if(!strcasecmp(pcParameter1, "tasks-stats")) {
 800116a:	4910      	ldr	r1, [pc, #64]	; (80011ac <OS_SHL_SysCmd+0xf8>)
 800116c:	6978      	ldr	r0, [r7, #20]
 800116e:	f00a ff73 	bl	800c058 <strcasecmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d104      	bne.n	8001182 <OS_SHL_SysCmd+0xce>
        HW_SYS_GetRunTimeStats( pcWriteBuffer );
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f00a f847 	bl	800b20c <HW_SYS_GetRunTimeStats>
        return pdFALSE;
 800117e:	2300      	movs	r3, #0
 8001180:	e006      	b.n	8001190 <OS_SHL_SysCmd+0xdc>

    /* Error case */
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Unknown system command %s"SHELL_EOL, pcParameter1);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <OS_SHL_SysCmd+0xfc>)
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f00a ff0f 	bl	800bfac <snprintf>
        return pdFALSE;
 800118e:	2300      	movs	r3, #0
    }

}
 8001190:	4618      	mov	r0, r3
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	08013f5c 	.word	0x08013f5c
 800119c:	08013fb4 	.word	0x08013fb4
 80011a0:	08013fbc 	.word	0x08013fbc
 80011a4:	08013fd4 	.word	0x08013fd4
 80011a8:	08013fe0 	.word	0x08013fe0
 80011ac:	08013fe8 	.word	0x08013fe8
 80011b0:	08013ff4 	.word	0x08013ff4

080011b4 <OS_SHL_VarCmd>:

static BaseType_t OS_SHL_VarCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
    return OS_SHL_GetVariablesList(pcWriteBuffer, xWriteBufferLen);
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 fc40 	bl	8001a48 <OS_SHL_GetVariablesList>
 80011c8:	4603      	mov	r3, r0

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <OS_SHL_SetCmd>:

static BaseType_t OS_SHL_SetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;
    OS_SHL_VarItemTypeDef* var;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	461a      	mov	r2, r3
 80011e6:	2101      	movs	r1, #1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f008 fce3 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80011ee:	6278      	str	r0, [r7, #36]	; 0x24
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	461a      	mov	r2, r3
 80011f6:	2102      	movs	r1, #2
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f008 fcdb 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80011fe:	6238      	str	r0, [r7, #32]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	461a      	mov	r2, r3
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	4413      	add	r3, r2
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	461a      	mov	r2, r3
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	4413      	add	r3, r2
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]

    /* Find the variable by its name */
        if(OS_SHL_FindVariableByName(pcParameter1, &var) == pdTRUE)
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001220:	f000 fc94 	bl	8001b4c <OS_SHL_FindVariableByName>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d116      	bne.n	8001258 <OS_SHL_SetCmd+0x84>
        {
            if(OS_SHL_SetVariable(var, pcParameter2) == pdTRUE)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	6a39      	ldr	r1, [r7, #32]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fcd6 	bl	8001be0 <OS_SHL_SetVariable>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d105      	bne.n	8001246 <OS_SHL_SetCmd+0x72>
            {
                snprintf(pcWriteBuffer, xWriteBufferLen, "");
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <OS_SHL_SetCmd+0x9c>)
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f00a feb4 	bl	800bfac <snprintf>
 8001244:	e00e      	b.n	8001264 <OS_SHL_SetCmd+0x90>

            /* Error during set */
            } else {
                snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Error while setting variable '%s' to %s"SHELL_EOL, pcParameter1, pcParameter2);
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <OS_SHL_SetCmd+0xa0>)
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f00a feab 	bl	800bfac <snprintf>
 8001256:	e005      	b.n	8001264 <OS_SHL_SetCmd+0x90>
            }

        /* Not found */
        } else {
            snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Could not find variable '%s'"SHELL_EOL, pcParameter1);
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <OS_SHL_SetCmd+0xa4>)
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f00a fea4 	bl	800bfac <snprintf>
        }

        /* This is always a one-shot print */
        return pdFALSE;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08014018 	.word	0x08014018
 8001274:	0801401c 	.word	0x0801401c
 8001278:	0801404c 	.word	0x0801404c

0800127c <OS_SHL_GetCmd>:

static BaseType_t OS_SHL_GetCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b092      	sub	sp, #72	; 0x48
 8001280:	af02      	add	r7, sp, #8
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
    char* pcParameter1;
    BaseType_t xParameter1StringLength;

    OS_SHL_VarItemTypeDef* var;
    char valueStr[32];
    const size_t valueStrLen = sizeof(valueStr) / sizeof(char);
 8001288:	2320      	movs	r3, #32
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 800128c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001290:	461a      	mov	r2, r3
 8001292:	2101      	movs	r1, #1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f008 fc8d 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 800129a:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Terminate string */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	461a      	mov	r2, r3
 80012a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a2:	4413      	add	r3, r2
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]

    /* Find the variable by its name */
    if(OS_SHL_FindVariableByName(pcParameter1, &var) == pdTRUE)
 80012a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ac:	4619      	mov	r1, r3
 80012ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012b0:	f000 fc4c 	bl	8001b4c <OS_SHL_FindVariableByName>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d11c      	bne.n	80012f4 <OS_SHL_GetCmd+0x78>
    {
        if(OS_SHL_GetVariable(var, valueStr, valueStrLen) == pdTRUE)
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	f107 0110 	add.w	r1, r7, #16
 80012c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fd04 	bl	8001cd0 <OS_SHL_GetVariable>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10b      	bne.n	80012e6 <OS_SHL_GetCmd+0x6a>
        {
            snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_GET_PFX"%s=%s"SHELL_EOL, var->name, valueStr);
 80012ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <OS_SHL_GetCmd+0x90>)
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f00a fe64 	bl	800bfac <snprintf>
 80012e4:	e00c      	b.n	8001300 <OS_SHL_GetCmd+0x84>
        } else {
            snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Error while reading variable '%s'"SHELL_EOL, pcParameter1);
 80012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <OS_SHL_GetCmd+0x94>)
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f00a fe5d 	bl	800bfac <snprintf>
 80012f2:	e005      	b.n	8001300 <OS_SHL_GetCmd+0x84>
        }

    /* Not found */
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Could not find variable '%s'"SHELL_EOL, pcParameter1);
 80012f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <OS_SHL_GetCmd+0x98>)
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f00a fe56 	bl	800bfac <snprintf>
    }

    /* This is always a one-shot print */
    return pdFALSE;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	08014074 	.word	0x08014074
 8001310:	08014084 	.word	0x08014084
 8001314:	0801404c 	.word	0x0801404c

08001318 <OS_SHL_PrbCmd>:

static BaseType_t OS_SHL_PrbCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b092      	sub	sp, #72	; 0x48
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    UBaseType_t lParameterNumber;

    uint32_t id;
    OS_SHL_VarItemTypeDef* var;
    char valueStr[32];
    const size_t valueStrLen = sizeof(valueStr) / sizeof(char);
 8001324:	2320      	movs	r3, #32
 8001326:	643b      	str	r3, [r7, #64]	; 0x40

    snprintf(pcWriteBuffer, xWriteBufferLen, SHELL_PRB_PFX);
 8001328:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <OS_SHL_PrbCmd+0xbc>)
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f00a fe3d 	bl	800bfac <snprintf>
    pcWriteBuffer += strlen(pcWriteBuffer);
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7fe ff6c 	bl	8000210 <strlen>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]

    // Get parameters one by one
    lParameterNumber = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
    while((pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, lParameterNumber, &lParameterStringLength )) != NULL)
 8001344:	e035      	b.n	80013b2 <OS_SHL_PrbCmd+0x9a>
    {
       // Convert ID string to int
       id = strtoul(pcParameter, NULL, 10);
 8001346:	220a      	movs	r2, #10
 8001348:	2100      	movs	r1, #0
 800134a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800134c:	f00b fef0 	bl	800d130 <strtoul>
 8001350:	63b8      	str	r0, [r7, #56]	; 0x38

       if(OS_SHL_FindVariableById(id, &var) == pdTRUE)
 8001352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001356:	4619      	mov	r1, r3
 8001358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800135a:	f000 fc23 	bl	8001ba4 <OS_SHL_FindVariableById>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d117      	bne.n	8001394 <OS_SHL_PrbCmd+0x7c>
       {
           if(OS_SHL_GetVariable(var, valueStr, valueStrLen) == pdTRUE)
 8001364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001366:	f107 0110 	add.w	r1, r7, #16
 800136a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fcaf 	bl	8001cd0 <OS_SHL_GetVariable>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d107      	bne.n	8001388 <OS_SHL_PrbCmd+0x70>
           {
               snprintf(pcWriteBuffer, xWriteBufferLen, "%s ", valueStr);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <OS_SHL_PrbCmd+0xc0>)
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f00a fe13 	bl	800bfac <snprintf>
 8001386:	e00a      	b.n	800139e <OS_SHL_PrbCmd+0x86>
           } else {
               snprintf(pcWriteBuffer, xWriteBufferLen, "--");
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <OS_SHL_PrbCmd+0xc4>)
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f00a fe0d 	bl	800bfac <snprintf>
 8001392:	e004      	b.n	800139e <OS_SHL_PrbCmd+0x86>
           }

       // Not found
       } else {
           snprintf(pcWriteBuffer, xWriteBufferLen, "--");
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <OS_SHL_PrbCmd+0xc4>)
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f00a fe07 	bl	800bfac <snprintf>
       }

       pcWriteBuffer += strlen(pcWriteBuffer);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7fe ff36 	bl	8000210 <strlen>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
       lParameterNumber++;
 80013ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ae:	3301      	adds	r3, #1
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
    snprintf(pcWriteBuffer, xWriteBufferLen, SHELL_PRB_PFX);
    pcWriteBuffer += strlen(pcWriteBuffer);

    // Get parameters one by one
    lParameterNumber = 1;
    while((pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, lParameterNumber, &lParameterStringLength )) != NULL)
 80013b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b6:	461a      	mov	r2, r3
 80013b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f008 fbfa 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80013c0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1be      	bne.n	8001346 <OS_SHL_PrbCmd+0x2e>
       pcWriteBuffer += strlen(pcWriteBuffer);
       lParameterNumber++;
    }

    // Always one-shot
    return pdFALSE;
 80013c8:	2300      	movs	r3, #0

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3748      	adds	r7, #72	; 0x48
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	080140b0 	.word	0x080140b0
 80013d8:	080140b8 	.word	0x080140b8
 80013dc:	080140bc 	.word	0x080140bc

080013e0 <OS_SHL_StoCmd>:




static BaseType_t OS_SHL_StoCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <OS_SHL_PowCmd>:

static BaseType_t OS_SHL_PowCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
    char* pcParameter1;
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;
    uint8_t allSupplies = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HW_PWR_TypeDef powerSupply;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	461a      	mov	r2, r3
 8001414:	2101      	movs	r1, #1
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f008 fbcc 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 800141c:	6238      	str	r0, [r7, #32]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	461a      	mov	r2, r3
 8001424:	2102      	movs	r1, #2
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f008 fbc4 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 800142c:	61f8      	str	r0, [r7, #28]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	461a      	mov	r2, r3
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	4413      	add	r3, r2
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]

    /* Decode <no> argument */
    if(!strcasecmp(pcParameter1, "1")) {
 8001446:	493f      	ldr	r1, [pc, #252]	; (8001544 <OS_SHL_PowCmd+0x148>)
 8001448:	6a38      	ldr	r0, [r7, #32]
 800144a:	f00a fe05 	bl	800c058 <strcasecmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <OS_SHL_PowCmd+0x60>
        powerSupply = HW_PWR_VP1;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800145a:	e028      	b.n	80014ae <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "2")) {
 800145c:	493a      	ldr	r1, [pc, #232]	; (8001548 <OS_SHL_PowCmd+0x14c>)
 800145e:	6a38      	ldr	r0, [r7, #32]
 8001460:	f00a fdfa 	bl	800c058 <strcasecmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <OS_SHL_PowCmd+0x76>
        powerSupply = HW_PWR_VP2;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001470:	e01d      	b.n	80014ae <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "3")) {
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <OS_SHL_PowCmd+0x150>)
 8001474:	6a38      	ldr	r0, [r7, #32]
 8001476:	f00a fdef 	bl	800c058 <strcasecmp>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <OS_SHL_PowCmd+0x8c>
        powerSupply = HW_PWR_VP3;
 8001480:	2302      	movs	r3, #2
 8001482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001486:	e012      	b.n	80014ae <OS_SHL_PowCmd+0xb2>
    } else if(!strcasecmp(pcParameter1, "ALL")) {
 8001488:	4931      	ldr	r1, [pc, #196]	; (8001550 <OS_SHL_PowCmd+0x154>)
 800148a:	6a38      	ldr	r0, [r7, #32]
 800148c:	f00a fde4 	bl	800c058 <strcasecmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <OS_SHL_PowCmd+0xa2>
        allSupplies = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800149c:	e007      	b.n	80014ae <OS_SHL_PowCmd+0xb2>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Could not define power-supply no to %s"SHELL_EOL, pcParameter1);
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	4a2c      	ldr	r2, [pc, #176]	; (8001554 <OS_SHL_PowCmd+0x158>)
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f00a fd81 	bl	800bfac <snprintf>
        return pdFALSE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e046      	b.n	800153c <OS_SHL_PowCmd+0x140>
    }

    /* Decode <state> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 80014ae:	492a      	ldr	r1, [pc, #168]	; (8001558 <OS_SHL_PowCmd+0x15c>)
 80014b0:	69f8      	ldr	r0, [r7, #28]
 80014b2:	f00a fdd1 	bl	800c058 <strcasecmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d113      	bne.n	80014e4 <OS_SHL_PowCmd+0xe8>
        if(!allSupplies) {
 80014bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <OS_SHL_PowCmd+0xd4>
            HW_PWR_Disable(powerSupply);
 80014c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014c8:	4618      	mov	r0, r3
 80014ca:	f009 fcef 	bl	800aeac <HW_PWR_Disable>
 80014ce:	e02c      	b.n	800152a <OS_SHL_PowCmd+0x12e>
        } else {
            HW_PWR_Disable(HW_PWR_VP1);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f009 fceb 	bl	800aeac <HW_PWR_Disable>
            HW_PWR_Disable(HW_PWR_VP2);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f009 fce8 	bl	800aeac <HW_PWR_Disable>
            HW_PWR_Disable(HW_PWR_VP3);
 80014dc:	2002      	movs	r0, #2
 80014de:	f009 fce5 	bl	800aeac <HW_PWR_Disable>
 80014e2:	e022      	b.n	800152a <OS_SHL_PowCmd+0x12e>
        }
    } else if(!strcasecmp(pcParameter2, "ON")) {
 80014e4:	491d      	ldr	r1, [pc, #116]	; (800155c <OS_SHL_PowCmd+0x160>)
 80014e6:	69f8      	ldr	r0, [r7, #28]
 80014e8:	f00a fdb6 	bl	800c058 <strcasecmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <OS_SHL_PowCmd+0x11e>
        if(!allSupplies) {
 80014f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <OS_SHL_PowCmd+0x10a>
            HW_PWR_Enable(powerSupply);
 80014fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 fcba 	bl	800ae78 <HW_PWR_Enable>
 8001504:	e011      	b.n	800152a <OS_SHL_PowCmd+0x12e>
        } else {
            HW_PWR_Enable(HW_PWR_VP1);
 8001506:	2000      	movs	r0, #0
 8001508:	f009 fcb6 	bl	800ae78 <HW_PWR_Enable>
            HW_PWR_Enable(HW_PWR_VP2);
 800150c:	2001      	movs	r0, #1
 800150e:	f009 fcb3 	bl	800ae78 <HW_PWR_Enable>
            HW_PWR_Enable(HW_PWR_VP3);
 8001512:	2002      	movs	r0, #2
 8001514:	f009 fcb0 	bl	800ae78 <HW_PWR_Enable>
 8001518:	e007      	b.n	800152a <OS_SHL_PowCmd+0x12e>
        }
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Could not define power-supply state to %s"SHELL_EOL, pcParameter2);
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4a10      	ldr	r2, [pc, #64]	; (8001560 <OS_SHL_PowCmd+0x164>)
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f00a fd43 	bl	800bfac <snprintf>
        return pdFALSE;
 8001526:	2300      	movs	r3, #0
 8001528:	e008      	b.n	800153c <OS_SHL_PowCmd+0x140>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_POW_PFX"Defined power-supply %s to %s"SHELL_EOL, pcParameter1, pcParameter2);
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <OS_SHL_PowCmd+0x168>)
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f00a fd39 	bl	800bfac <snprintf>
    return pdFALSE;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	080140c0 	.word	0x080140c0
 8001548:	080140c4 	.word	0x080140c4
 800154c:	080140c8 	.word	0x080140c8
 8001550:	080140cc 	.word	0x080140cc
 8001554:	080140d0 	.word	0x080140d0
 8001558:	08014100 	.word	0x08014100
 800155c:	08014104 	.word	0x08014104
 8001560:	08014108 	.word	0x08014108
 8001564:	0801413c 	.word	0x0801413c

08001568 <OS_SHL_MotCmd>:

// Motor control. Not reentrant function
static BaseType_t OS_SHL_MotCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    /* Note that the use of the static parameter means this function is not reentrant. */
    static BaseType_t lParameterNumber = 0;

        if( lParameterNumber == 0 )
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d115      	bne.n	80015a8 <OS_SHL_MotCmd+0x40>
        {
            /* lParameterNumber is 0, so this is the first time the function has been
            called since the command was entered.  Return the string "The parameters
            were:" before returning any parameter strings. */
            sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a2b      	ldr	r2, [pc, #172]	; (800162c <OS_SHL_MotCmd+0xc4>)
 8001580:	461c      	mov	r4, r3
 8001582:	4615      	mov	r5, r2
 8001584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001586:	6020      	str	r0, [r4, #0]
 8001588:	6061      	str	r1, [r4, #4]
 800158a:	60a2      	str	r2, [r4, #8]
 800158c:	60e3      	str	r3, [r4, #12]
 800158e:	6828      	ldr	r0, [r5, #0]
 8001590:	6120      	str	r0, [r4, #16]
 8001592:	88ab      	ldrh	r3, [r5, #4]
 8001594:	79aa      	ldrb	r2, [r5, #6]
 8001596:	82a3      	strh	r3, [r4, #20]
 8001598:	4613      	mov	r3, r2
 800159a:	75a3      	strb	r3, [r4, #22]

            /* Next time the function is called the first parameter will be echoed
            back. */
            lParameterNumber = 1L;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

            /* There is more data to be returned as no parameters have been echoed
            back yet, so set xReturn to pdPASS so the function will be called again. */
            xReturn = pdPASS;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e03a      	b.n	800161e <OS_SHL_MotCmd+0xb6>
        }
        else
        {
            /* lParameter is not 0, so holds the number of the parameter that should
            be returned.  Obtain the complete parameter string. */
            pcParameter = FreeRTOS_CLIGetParameter
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	461a      	mov	r2, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f008 fafd 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80015ba:	61b8      	str	r0, [r7, #24]
                                lParameterNumber,
                                /* Store the parameter string length. */
                                &lParameterStringLength
                            );

            if( pcParameter != NULL )
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d025      	beq.n	800160e <OS_SHL_MotCmd+0xa6>
            {
                /* There was another parameter to return.  Copy it into pcWriteBuffer.
                in the format "[number]: [Parameter String". */
                memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	2100      	movs	r1, #0
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f00a fc69 	bl	800be9e <memset>
                sprintf( pcWriteBuffer, "%ld: ", lParameterNumber );
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <OS_SHL_MotCmd+0xc8>)
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f00a fd1b 	bl	800c010 <sprintf>
                strncat( pcWriteBuffer, pcParameter, lParameterStringLength );
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	461a      	mov	r2, r3
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f00a fd5f 	bl	800c0a4 <strncat>
                strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f7fe fe12 	bl	8000210 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <OS_SHL_MotCmd+0xcc>)
 80015f6:	8811      	ldrh	r1, [r2, #0]
 80015f8:	7892      	ldrb	r2, [r2, #2]
 80015fa:	8019      	strh	r1, [r3, #0]
 80015fc:	709a      	strb	r2, [r3, #2]

                /* There might be more parameters to return after this one, so again
                set xReturn to pdTRUE. */
                xReturn = pdTRUE;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
                lParameterNumber++;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e007      	b.n	800161e <OS_SHL_MotCmd+0xb6>
            }
            else
            {
                /* No more parameters were found.  Make sure the write buffer does
                not contain a valid string to prevent junk being printed out. */
                pcWriteBuffer[ 0 ] = 0x00;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]

                /* There is no more data to return, so this time set xReturn to
                pdFALSE. */
                xReturn = pdFALSE;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]

                /* Start over the next time this command is executed. */
                lParameterNumber = 0;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <OS_SHL_MotCmd+0xc0>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
            }
        }

        return xReturn;
 800161e:	69fb      	ldr	r3, [r7, #28]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	200105bc 	.word	0x200105bc
 800162c:	08014164 	.word	0x08014164
 8001630:	0801417c 	.word	0x0801417c
 8001634:	08014184 	.word	0x08014184

08001638 <OS_SHL_DsvCmd>:

static BaseType_t OS_SHL_DsvCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <OS_SHL_AsvCmd>:

static BaseType_t OS_SHL_AsvCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <OS_SHL_MonCmd>:

static BaseType_t OS_SHL_MonCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <OS_SHL_DioCmd>:

static BaseType_t OS_SHL_DioCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <OS_SHL_HmiCmd>:

static BaseType_t OS_SHL_HmiCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <OS_SHL_LedCmd>:


static BaseType_t OS_SHL_LedCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
    char* pcParameter2;
    BaseType_t xParameter1StringLength;
    BaseType_t xParameter2StringLength;

    /* Get parameters */
    pcParameter1 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	461a      	mov	r2, r3
 80016d6:	2101      	movs	r1, #1
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f008 fa6b 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80016de:	61f8      	str	r0, [r7, #28]
    pcParameter2 = (char*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	461a      	mov	r2, r3
 80016e6:	2102      	movs	r1, #2
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f008 fa63 	bl	8009bb4 <FreeRTOS_CLIGetParameter>
 80016ee:	61b8      	str	r0, [r7, #24]

    /* Terminate both strings */
    pcParameter1[ xParameter1StringLength ] = 0x00;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	461a      	mov	r2, r3
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    /* Decode <mode> argument */
    if(!strcasecmp(pcParameter1, "STATIC")) {
 8001708:	494a      	ldr	r1, [pc, #296]	; (8001834 <OS_SHL_LedCmd+0x170>)
 800170a:	69f8      	ldr	r0, [r7, #28]
 800170c:	f00a fca4 	bl	800c058 <strcasecmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <OS_SHL_LedCmd+0x5a>
        LedSetMode(HW_LED_STATIC);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 fe44 	bl	80023a4 <LedSetMode>
 800171c:	e01d      	b.n	800175a <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_SLOW")) {
 800171e:	4946      	ldr	r1, [pc, #280]	; (8001838 <OS_SHL_LedCmd+0x174>)
 8001720:	69f8      	ldr	r0, [r7, #28]
 8001722:	f00a fc99 	bl	800c058 <strcasecmp>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <OS_SHL_LedCmd+0x70>
        LedSetMode(HW_LED_BLINK_SLOW);
 800172c:	2001      	movs	r0, #1
 800172e:	f000 fe39 	bl	80023a4 <LedSetMode>
 8001732:	e012      	b.n	800175a <OS_SHL_LedCmd+0x96>
    } else if(!strcasecmp(pcParameter1, "BLINK_FAST")) {
 8001734:	4941      	ldr	r1, [pc, #260]	; (800183c <OS_SHL_LedCmd+0x178>)
 8001736:	69f8      	ldr	r0, [r7, #28]
 8001738:	f00a fc8e 	bl	800c058 <strcasecmp>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <OS_SHL_LedCmd+0x86>
        LedSetMode(HW_LED_BLINK_FAST);
 8001742:	2002      	movs	r0, #2
 8001744:	f000 fe2e 	bl	80023a4 <LedSetMode>
 8001748:	e007      	b.n	800175a <OS_SHL_LedCmd+0x96>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Could not set LED mode to %s"SHELL_EOL, pcParameter1);
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4a3c      	ldr	r2, [pc, #240]	; (8001840 <OS_SHL_LedCmd+0x17c>)
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f00a fc2b 	bl	800bfac <snprintf>
        return pdFALSE;
 8001756:	2300      	movs	r3, #0
 8001758:	e068      	b.n	800182c <OS_SHL_LedCmd+0x168>
    }

    /* Decode <color> argument */
    if(!strcasecmp(pcParameter2, "OFF")) {
 800175a:	493a      	ldr	r1, [pc, #232]	; (8001844 <OS_SHL_LedCmd+0x180>)
 800175c:	69b8      	ldr	r0, [r7, #24]
 800175e:	f00a fc7b 	bl	800c058 <strcasecmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d103      	bne.n	8001770 <OS_SHL_LedCmd+0xac>
        LedSetColor(HW_LED_OFF);
 8001768:	2000      	movs	r0, #0
 800176a:	f000 fdfd 	bl	8002368 <LedSetColor>
 800176e:	e054      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "WHITE")) {
 8001770:	4935      	ldr	r1, [pc, #212]	; (8001848 <OS_SHL_LedCmd+0x184>)
 8001772:	69b8      	ldr	r0, [r7, #24]
 8001774:	f00a fc70 	bl	800c058 <strcasecmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <OS_SHL_LedCmd+0xc2>
        LedSetColor(HW_LED_WHITE);
 800177e:	2008      	movs	r0, #8
 8001780:	f000 fdf2 	bl	8002368 <LedSetColor>
 8001784:	e049      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "RED")) {
 8001786:	4931      	ldr	r1, [pc, #196]	; (800184c <OS_SHL_LedCmd+0x188>)
 8001788:	69b8      	ldr	r0, [r7, #24]
 800178a:	f00a fc65 	bl	800c058 <strcasecmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <OS_SHL_LedCmd+0xd8>
        LedSetColor(HW_LED_RED);
 8001794:	2001      	movs	r0, #1
 8001796:	f000 fde7 	bl	8002368 <LedSetColor>
 800179a:	e03e      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "GREEN")) {
 800179c:	492c      	ldr	r1, [pc, #176]	; (8001850 <OS_SHL_LedCmd+0x18c>)
 800179e:	69b8      	ldr	r0, [r7, #24]
 80017a0:	f00a fc5a 	bl	800c058 <strcasecmp>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <OS_SHL_LedCmd+0xee>
        LedSetColor(HW_LED_GREEN);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f000 fddc 	bl	8002368 <LedSetColor>
 80017b0:	e033      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "BLUE")) {
 80017b2:	4928      	ldr	r1, [pc, #160]	; (8001854 <OS_SHL_LedCmd+0x190>)
 80017b4:	69b8      	ldr	r0, [r7, #24]
 80017b6:	f00a fc4f 	bl	800c058 <strcasecmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <OS_SHL_LedCmd+0x104>
        LedSetColor(HW_LED_BLUE);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 fdd1 	bl	8002368 <LedSetColor>
 80017c6:	e028      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "CYAN")) {
 80017c8:	4923      	ldr	r1, [pc, #140]	; (8001858 <OS_SHL_LedCmd+0x194>)
 80017ca:	69b8      	ldr	r0, [r7, #24]
 80017cc:	f00a fc44 	bl	800c058 <strcasecmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <OS_SHL_LedCmd+0x11a>
        LedSetColor(HW_LED_CYAN);
 80017d6:	2004      	movs	r0, #4
 80017d8:	f000 fdc6 	bl	8002368 <LedSetColor>
 80017dc:	e01d      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "MAGENTA")) {
 80017de:	491f      	ldr	r1, [pc, #124]	; (800185c <OS_SHL_LedCmd+0x198>)
 80017e0:	69b8      	ldr	r0, [r7, #24]
 80017e2:	f00a fc39 	bl	800c058 <strcasecmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <OS_SHL_LedCmd+0x130>
        LedSetColor(HW_LED_MAGENTA);
 80017ec:	2007      	movs	r0, #7
 80017ee:	f000 fdbb 	bl	8002368 <LedSetColor>
 80017f2:	e012      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else if(!strcasecmp(pcParameter2, "YELLOW")) {
 80017f4:	491a      	ldr	r1, [pc, #104]	; (8001860 <OS_SHL_LedCmd+0x19c>)
 80017f6:	69b8      	ldr	r0, [r7, #24]
 80017f8:	f00a fc2e 	bl	800c058 <strcasecmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <OS_SHL_LedCmd+0x146>
        LedSetColor(HW_LED_YELLOW);
 8001802:	2005      	movs	r0, #5
 8001804:	f000 fdb0 	bl	8002368 <LedSetColor>
 8001808:	e007      	b.n	800181a <OS_SHL_LedCmd+0x156>
    } else {
        snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_ERR_PFX"Could not set LED color to %s"SHELL_EOL, pcParameter2);
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4a15      	ldr	r2, [pc, #84]	; (8001864 <OS_SHL_LedCmd+0x1a0>)
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f00a fbcb 	bl	800bfac <snprintf>
        return pdFALSE;
 8001816:	2300      	movs	r3, #0
 8001818:	e008      	b.n	800182c <OS_SHL_LedCmd+0x168>
    }

    snprintf( pcWriteBuffer, xWriteBufferLen, SHELL_LED_PFX"Defined LED to %s %s"SHELL_EOL, pcParameter1, pcParameter2);
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <OS_SHL_LedCmd+0x1a4>)
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f00a fbc1 	bl	800bfac <snprintf>
    return pdFALSE;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	08014188 	.word	0x08014188
 8001838:	08014190 	.word	0x08014190
 800183c:	0801419c 	.word	0x0801419c
 8001840:	080141a8 	.word	0x080141a8
 8001844:	08014100 	.word	0x08014100
 8001848:	080141d0 	.word	0x080141d0
 800184c:	080141d8 	.word	0x080141d8
 8001850:	080141dc 	.word	0x080141dc
 8001854:	080141e4 	.word	0x080141e4
 8001858:	080141ec 	.word	0x080141ec
 800185c:	080141f4 	.word	0x080141f4
 8001860:	080141fc 	.word	0x080141fc
 8001864:	08014204 	.word	0x08014204
 8001868:	0801422c 	.word	0x0801422c

0800186c <OS_SHL_AvsCmd>:

static BaseType_t OS_SHL_AvsCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <OS_SHL_AvdCmd>:

static BaseType_t OS_SHL_AvdCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <OS_SHL_StrCmd>:

static BaseType_t OS_SHL_StrCmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
    return pdFALSE;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <OS_SHL_GetTypeAsString>:

/*
 * Converts a type into a printable string
 */
const char* OS_SHL_GetTypeAsString(const OS_SHL_VarTypeEnum type)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
    switch(type)
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b0b      	cmp	r3, #11
 80018ce:	d833      	bhi.n	8001938 <OS_SHL_GetTypeAsString+0x78>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <OS_SHL_GetTypeAsString+0x18>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	08001909 	.word	0x08001909
 80018dc:	0800190d 	.word	0x0800190d
 80018e0:	08001911 	.word	0x08001911
 80018e4:	08001915 	.word	0x08001915
 80018e8:	08001919 	.word	0x08001919
 80018ec:	0800191d 	.word	0x0800191d
 80018f0:	08001921 	.word	0x08001921
 80018f4:	08001925 	.word	0x08001925
 80018f8:	08001929 	.word	0x08001929
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	08001931 	.word	0x08001931
 8001904:	08001935 	.word	0x08001935
    {
        case TYPE_BOOL:     return "bool";
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <OS_SHL_GetTypeAsString+0x88>)
 800190a:	e016      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_CHAR:     return "char";
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <OS_SHL_GetTypeAsString+0x8c>)
 800190e:	e014      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_UINT8:    return "uint8";
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <OS_SHL_GetTypeAsString+0x90>)
 8001912:	e012      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_INT8:     return "int8";
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <OS_SHL_GetTypeAsString+0x94>)
 8001916:	e010      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_UINT16:   return "uint16";
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <OS_SHL_GetTypeAsString+0x98>)
 800191a:	e00e      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_INT16:    return "int16";
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <OS_SHL_GetTypeAsString+0x9c>)
 800191e:	e00c      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_UINT32:   return "uint32";
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <OS_SHL_GetTypeAsString+0xa0>)
 8001922:	e00a      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_INT32:    return "int32";
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <OS_SHL_GetTypeAsString+0xa4>)
 8001926:	e008      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_UINT64:   return "uint64";
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <OS_SHL_GetTypeAsString+0xa8>)
 800192a:	e006      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_INT64:    return "int64";
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <OS_SHL_GetTypeAsString+0xac>)
 800192e:	e004      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_FLOAT:    return "float";
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <OS_SHL_GetTypeAsString+0xb0>)
 8001932:	e002      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        case TYPE_DOUBLE:   return "double";
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <OS_SHL_GetTypeAsString+0xb4>)
 8001936:	e000      	b.n	800193a <OS_SHL_GetTypeAsString+0x7a>
        default:            return "NC"; // Error
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <OS_SHL_GetTypeAsString+0xb8>)
    }
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	0801424c 	.word	0x0801424c
 800194c:	08014254 	.word	0x08014254
 8001950:	0801425c 	.word	0x0801425c
 8001954:	08014264 	.word	0x08014264
 8001958:	0801426c 	.word	0x0801426c
 800195c:	08014274 	.word	0x08014274
 8001960:	0801427c 	.word	0x0801427c
 8001964:	08014284 	.word	0x08014284
 8001968:	0801428c 	.word	0x0801428c
 800196c:	08014294 	.word	0x08014294
 8001970:	0801429c 	.word	0x0801429c
 8001974:	080142a4 	.word	0x080142a4
 8001978:	080142ac 	.word	0x080142ac

0800197c <OS_SHL_GetTypeSize>:

/*
 * Returns the size of a type. 0 if the type is not known
 */
size_t OS_SHL_GetTypeSize(const OS_SHL_VarTypeEnum type)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
    switch(type)
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b0b      	cmp	r3, #11
 800198a:	d833      	bhi.n	80019f4 <OS_SHL_GetTypeSize+0x78>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <OS_SHL_GetTypeSize+0x18>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019c5 	.word	0x080019c5
 8001998:	080019c9 	.word	0x080019c9
 800199c:	080019cd 	.word	0x080019cd
 80019a0:	080019d1 	.word	0x080019d1
 80019a4:	080019d5 	.word	0x080019d5
 80019a8:	080019d9 	.word	0x080019d9
 80019ac:	080019dd 	.word	0x080019dd
 80019b0:	080019e1 	.word	0x080019e1
 80019b4:	080019e5 	.word	0x080019e5
 80019b8:	080019e9 	.word	0x080019e9
 80019bc:	080019ed 	.word	0x080019ed
 80019c0:	080019f1 	.word	0x080019f1
    {
        case TYPE_BOOL:     return sizeof(bool);
 80019c4:	2301      	movs	r3, #1
 80019c6:	e016      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_CHAR:     return sizeof(char);
 80019c8:	2301      	movs	r3, #1
 80019ca:	e014      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_UINT8:    return sizeof(uint8_t);
 80019cc:	2301      	movs	r3, #1
 80019ce:	e012      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_INT8:     return sizeof(int8_t);
 80019d0:	2301      	movs	r3, #1
 80019d2:	e010      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_UINT16:   return sizeof(uint16_t);
 80019d4:	2302      	movs	r3, #2
 80019d6:	e00e      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_INT16:    return sizeof(int16_t);
 80019d8:	2302      	movs	r3, #2
 80019da:	e00c      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_UINT32:   return sizeof(uint32_t);
 80019dc:	2304      	movs	r3, #4
 80019de:	e00a      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_INT32:    return sizeof(int32_t);
 80019e0:	2304      	movs	r3, #4
 80019e2:	e008      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_UINT64:   return sizeof(uint64_t);
 80019e4:	2308      	movs	r3, #8
 80019e6:	e006      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_INT64:    return sizeof(int64_t);
 80019e8:	2308      	movs	r3, #8
 80019ea:	e004      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_FLOAT:    return sizeof(float);
 80019ec:	2304      	movs	r3, #4
 80019ee:	e002      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        case TYPE_DOUBLE:   return sizeof(double);
 80019f0:	2308      	movs	r3, #8
 80019f2:	e000      	b.n	80019f6 <OS_SHL_GetTypeSize+0x7a>
        default:            return 0; // Error
 80019f4:	2300      	movs	r3, #0
    }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <OS_SHL_GetAccessAsString>:

/*
 * Converts an access type into a printable string
 */
const char* OS_SHL_GetAccessAsString(const OS_SHL_VarAccessEnum acc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    switch(acc)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d004      	beq.n	8001a1e <OS_SHL_GetAccessAsString+0x1a>
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d006      	beq.n	8001a26 <OS_SHL_GetAccessAsString+0x22>
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <OS_SHL_GetAccessAsString+0x1e>
 8001a1c:	e005      	b.n	8001a2a <OS_SHL_GetAccessAsString+0x26>
    {
        case ACC_RD: return "RD";
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <OS_SHL_GetAccessAsString+0x34>)
 8001a20:	e004      	b.n	8001a2c <OS_SHL_GetAccessAsString+0x28>
        case ACC_WR: return "WR";
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <OS_SHL_GetAccessAsString+0x38>)
 8001a24:	e002      	b.n	8001a2c <OS_SHL_GetAccessAsString+0x28>
        case ACC_RQ: return "RQ";
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <OS_SHL_GetAccessAsString+0x3c>)
 8001a28:	e000      	b.n	8001a2c <OS_SHL_GetAccessAsString+0x28>
        default:     return "NC"; // Error
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <OS_SHL_GetAccessAsString+0x40>)
    }
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	080142b0 	.word	0x080142b0
 8001a3c:	080142b4 	.word	0x080142b4
 8001a40:	080142b8 	.word	0x080142b8
 8001a44:	080142ac 	.word	0x080142ac

08001a48 <OS_SHL_GetVariablesList>:

/*
 * Print in the buffer string the list of every variable that are accessible
 */
BaseType_t OS_SHL_GetVariablesList(char* ret, size_t retLength)
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af04      	add	r7, sp, #16
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    const char* header = "      ID. Type     Acc.  Name                                     Unit            Value"SHELL_EOL
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <OS_SHL_GetVariablesList+0xe8>)
 8001a54:	60fb      	str	r3, [r7, #12]

    /* Local handlers for outputting variables one at a time */
    static const OS_SHL_VarItemTypeDef* var = NULL;
    static size_t id;

    if(var == NULL)
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d110      	bne.n	8001a80 <OS_SHL_GetVariablesList+0x38>
    {
        var = OS_SHL_varList;
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001a60:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <OS_SHL_GetVariablesList+0xf0>)
 8001a62:	601a      	str	r2, [r3, #0]
        id = 0;
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <OS_SHL_GetVariablesList+0xf4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

        /* Header */
        strcpy(ret, header);
 8001a6a:	68f9      	ldr	r1, [r7, #12]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f00a fb11 	bl	800c094 <strcpy>
        ret += strlen(ret);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7fe fbcc 	bl	8000210 <strlen>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	607b      	str	r3, [r7, #4]
    }

    /* Display the variable */
    snprintf(ret, retLength, SHELL_VAR_PFX"%3u %-8s %-5s %-40s %-16s",
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <OS_SHL_GetVariablesList+0xf4>)
 8001a82:	681c      	ldr	r4, [r3, #0]
            id,
            OS_SHL_GetTypeAsString(var->type),
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
        strcpy(ret, header);
        ret += strlen(ret);
    }

    /* Display the variable */
    snprintf(ret, retLength, SHELL_VAR_PFX"%3u %-8s %-5s %-40s %-16s",
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff18 	bl	80018c0 <OS_SHL_GetTypeAsString>
 8001a90:	4605      	mov	r5, r0
            id,
            OS_SHL_GetTypeAsString(var->type),
            OS_SHL_GetAccessAsString(var->access),
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
        strcpy(ret, header);
        ret += strlen(ret);
    }

    /* Display the variable */
    snprintf(ret, retLength, SHELL_VAR_PFX"%3u %-8s %-5s %-40s %-16s",
 8001a96:	795b      	ldrb	r3, [r3, #5]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ffb3 	bl	8001a04 <OS_SHL_GetAccessAsString>
 8001a9e:	4601      	mov	r1, r0
            id,
            OS_SHL_GetTypeAsString(var->type),
            OS_SHL_GetAccessAsString(var->access),
            var->name,
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
        strcpy(ret, header);
        ret += strlen(ret);
    }

    /* Display the variable */
    snprintf(ret, retLength, SHELL_VAR_PFX"%3u %-8s %-5s %-40s %-16s",
 8001aa4:	681b      	ldr	r3, [r3, #0]
            id,
            OS_SHL_GetTypeAsString(var->type),
            OS_SHL_GetAccessAsString(var->access),
            var->name,
            var->unit);
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001aa8:	6812      	ldr	r2, [r2, #0]
        strcpy(ret, header);
        ret += strlen(ret);
    }

    /* Display the variable */
    snprintf(ret, retLength, SHELL_VAR_PFX"%3u %-8s %-5s %-40s %-16s",
 8001aaa:	68d2      	ldr	r2, [r2, #12]
 8001aac:	9203      	str	r2, [sp, #12]
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	9101      	str	r1, [sp, #4]
 8001ab2:	9500      	str	r5, [sp, #0]
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <OS_SHL_GetVariablesList+0xf8>)
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f00a fa76 	bl	800bfac <snprintf>
            id,
            OS_SHL_GetTypeAsString(var->type),
            OS_SHL_GetAccessAsString(var->access),
            var->name,
            var->unit);
    ret += strlen(ret);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7fe fba5 	bl	8000210 <strlen>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	607b      	str	r3, [r7, #4]
    OS_SHL_GetVariable(var, ret, retLength);
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f8fa 	bl	8001cd0 <OS_SHL_GetVariable>
    ret += strlen(ret);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7fe fb97 	bl	8000210 <strlen>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	607b      	str	r3, [r7, #4]
    snprintf(ret, retLength, SHELL_EOL);
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <OS_SHL_GetVariablesList+0xfc>)
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f00a fa5c 	bl	800bfac <snprintf>

    /* There are still items to process, move to the next one */
    id++;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <OS_SHL_GetVariablesList+0xf4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <OS_SHL_GetVariablesList+0xf4>)
 8001afc:	6013      	str	r3, [r2, #0]
    if(id < OS_SHL_varListLength)
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <OS_SHL_GetVariablesList+0xf4>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <OS_SHL_GetVariablesList+0x100>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d206      	bcs.n	8001b18 <OS_SHL_GetVariablesList+0xd0>
    {
        var++;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001b12:	6013      	str	r3, [r2, #0]
        return pdTRUE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e006      	b.n	8001b26 <OS_SHL_GetVariablesList+0xde>

    /* We have finished */
    } else {
        var = NULL;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <OS_SHL_GetVariablesList+0xec>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
        id = 0;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <OS_SHL_GetVariablesList+0xf4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
        return pdFALSE;
 8001b24:	2300      	movs	r3, #0
    }

}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	080142bc 	.word	0x080142bc
 8001b34:	200105c0 	.word	0x200105c0
 8001b38:	08015030 	.word	0x08015030
 8001b3c:	200105c4 	.word	0x200105c4
 8001b40:	08014374 	.word	0x08014374
 8001b44:	08014394 	.word	0x08014394
 8001b48:	080152d0 	.word	0x080152d0

08001b4c <OS_SHL_FindVariableByName>:
 * Lookup a variable by its name.
 * Returns pdFALSE if not found.
 * pdTRUE is returned otherwise and var is set to the found variable structure address.
 */
BaseType_t OS_SHL_FindVariableByName(char* name, const OS_SHL_VarItemTypeDef** var)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
    OS_SHL_VarItemTypeDef* lookup = OS_SHL_varList;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <OS_SHL_FindVariableByName+0x50>)
 8001b58:	60fb      	str	r3, [r7, #12]
    size_t id = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]

    do {
        /* Match! */
        if(strcasecmp(name, lookup->name) == 0) {
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f00a fa77 	bl	800c058 <strcasecmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <OS_SHL_FindVariableByName+0x2e>
            *var = lookup;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	601a      	str	r2, [r3, #0]
            return pdTRUE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00b      	b.n	8001b92 <OS_SHL_FindVariableByName+0x46>
        }

        /* Next */
        id++;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
        lookup++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3310      	adds	r3, #16
 8001b84:	60fb      	str	r3, [r7, #12]

    } while(id < OS_SHL_varListLength);
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <OS_SHL_FindVariableByName+0x54>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3e6      	bcc.n	8001b5e <OS_SHL_FindVariableByName+0x12>

    /* Not found */
    return pdFALSE;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08015030 	.word	0x08015030
 8001ba0:	080152d0 	.word	0x080152d0

08001ba4 <OS_SHL_FindVariableById>:

/*
 * Fast lookup of a variable by its index
 */
BaseType_t OS_SHL_FindVariableById(size_t id, const OS_SHL_VarItemTypeDef** var)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    if(id < OS_SHL_varListLength)
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <OS_SHL_FindVariableById+0x34>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <OS_SHL_FindVariableById+0x24>
    {
        *var = OS_SHL_varList + id;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <OS_SHL_FindVariableById+0x38>)
 8001bbe:	441a      	add	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
        return pdTRUE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <OS_SHL_FindVariableById+0x26>
    } else {
        return pdFALSE;
 8001bc8:	2300      	movs	r3, #0
    }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	080152d0 	.word	0x080152d0
 8001bdc:	08015030 	.word	0x08015030

08001be0 <OS_SHL_SetVariable>:

/*
 * Set a variable value based on the input string
 */
BaseType_t OS_SHL_SetVariable(OS_SHL_VarItemTypeDef const* var, char* value)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b08d      	sub	sp, #52	; 0x34
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    int64_t valueTmpLongInt;
    float valueTmpFloat;
    double valueTmpDouble;
    void* valueTmp;

    if((size = OS_SHL_GetTypeSize(var->type)) == 0)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fec4 	bl	800197c <OS_SHL_GetTypeSize>
 8001bf4:	62b8      	str	r0, [r7, #40]	; 0x28
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <OS_SHL_SetVariable+0x20>
        return pdFALSE; // Size Error
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e061      	b.n	8001cc4 <OS_SHL_SetVariable+0xe4>

    if(var->access == ACC_RD)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	795b      	ldrb	r3, [r3, #5]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <OS_SHL_SetVariable+0x2c>
        return pdFALSE; // Read-Only error
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e05b      	b.n	8001cc4 <OS_SHL_SetVariable+0xe4>

    // Depends on the type
    switch(var->type)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	2b0b      	cmp	r3, #11
 8001c12:	d84d      	bhi.n	8001cb0 <OS_SHL_SetVariable+0xd0>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <OS_SHL_SetVariable+0x3c>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c4d 	.word	0x08001c4d
 8001c20:	08001c4d 	.word	0x08001c4d
 8001c24:	08001c4d 	.word	0x08001c4d
 8001c28:	08001c4d 	.word	0x08001c4d
 8001c2c:	08001c4d 	.word	0x08001c4d
 8001c30:	08001c4d 	.word	0x08001c4d
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c4d 	.word	0x08001c4d
 8001c3c:	08001c63 	.word	0x08001c63
 8001c40:	08001c63 	.word	0x08001c63
 8001c44:	08001c7d 	.word	0x08001c7d
 8001c48:	08001c95 	.word	0x08001c95
        case TYPE_INT8:
        case TYPE_UINT16:
        case TYPE_INT16:
        case TYPE_UINT32:
        case TYPE_INT32:
            valueTmpInt = strtol(value, NULL, 10);
 8001c4c:	220a      	movs	r2, #10
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	f00b f92b 	bl	800ceac <strtol>
 8001c56:	4603      	mov	r3, r0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
            valueTmp = &valueTmpInt;
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8001c60:	e028      	b.n	8001cb4 <OS_SHL_SetVariable+0xd4>

        case TYPE_INT64:
        case TYPE_UINT64:
            valueTmpLongInt = strtoll(value, NULL, 10);
 8001c62:	220a      	movs	r2, #10
 8001c64:	2100      	movs	r1, #0
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f00b f92a 	bl	800cec0 <strtoll>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	e9c7 3406 	strd	r3, r4, [r7, #24]
            valueTmp = &valueTmpLongInt;
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8001c7a:	e01b      	b.n	8001cb4 <OS_SHL_SetVariable+0xd4>

        case TYPE_FLOAT:
            valueTmpFloat = strtof(value, NULL);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	6838      	ldr	r0, [r7, #0]
 8001c80:	f00b f86e 	bl	800cd60 <strtof>
 8001c84:	eef0 7a40 	vmov.f32	s15, s0
 8001c88:	edc7 7a05 	vstr	s15, [r7, #20]
            valueTmp = &valueTmpFloat;
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8001c92:	e00f      	b.n	8001cb4 <OS_SHL_SetVariable+0xd4>

        case TYPE_DOUBLE:
            valueTmpDouble = strtod(value, NULL);
 8001c94:	2100      	movs	r1, #0
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f00b f85a 	bl	800cd50 <strtod>
 8001c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ca0:	eef0 7a60 	vmov.f32	s15, s1
 8001ca4:	ed87 7b02 	vstr	d7, [r7, #8]
            valueTmp = &valueTmpDouble;
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8001cae:	e001      	b.n	8001cb4 <OS_SHL_SetVariable+0xd4>

        // Type Error
        default:
            return pdFALSE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e007      	b.n	8001cc4 <OS_SHL_SetVariable+0xe4>
    }

    // Actual copy
    memcpy(var->var, valueTmp, size);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00a f8e3 	bl	800be88 <memcpy>

    return pdTRUE;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3734      	adds	r7, #52	; 0x34
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	0000      	movs	r0, r0
	...

08001cd0 <OS_SHL_GetVariable>:
/*
 * Decode a variable path/name and write its current value
 * into the result string.
 */
BaseType_t OS_SHL_GetVariable(OS_SHL_VarItemTypeDef const* var, char* ret, size_t retLength)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b08b      	sub	sp, #44	; 0x2c
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
    BaseType_t retValue = pdTRUE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
    size_t size;
    void* value;


    if((size = OS_SHL_GetTypeSize(var->type)) == 0)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	791b      	ldrb	r3, [r3, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fe49 	bl	800197c <OS_SHL_GetTypeSize>
 8001cea:	61b8      	str	r0, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <OS_SHL_GetVariable+0x26>
        return pdFALSE; // Size Error
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e09d      	b.n	8001e32 <OS_SHL_GetVariable+0x162>

    if((value = malloc(size)) == NULL){} // FIXME: Apparently always returns NULL...
 8001cf6:	69b8      	ldr	r0, [r7, #24]
 8001cf8:	f009 fe96 	bl	800ba28 <malloc>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	617b      	str	r3, [r7, #20]
        //return pdFALSE; // Malloc Error

    memcpy(value, var->var, size);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4619      	mov	r1, r3
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f00a f8bd 	bl	800be88 <memcpy>

    // Depends on the type
    switch(var->type)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	2b0b      	cmp	r3, #11
 8001d14:	f200 8086 	bhi.w	8001e24 <OS_SHL_GetVariable+0x154>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <OS_SHL_GetVariable+0x50>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d51 	.word	0x08001d51
 8001d24:	08001d61 	.word	0x08001d61
 8001d28:	08001d71 	.word	0x08001d71
 8001d2c:	08001d81 	.word	0x08001d81
 8001d30:	08001d93 	.word	0x08001d93
 8001d34:	08001da3 	.word	0x08001da3
 8001d38:	08001db5 	.word	0x08001db5
 8001d3c:	08001dc5 	.word	0x08001dc5
 8001d40:	08001dd5 	.word	0x08001dd5
 8001d44:	08001de9 	.word	0x08001de9
 8001d48:	08001dfd 	.word	0x08001dfd
 8001d4c:	08001e11 	.word	0x08001e11
    {
        case TYPE_BOOL:     snprintf(ret, retLength, "%u",   *((bool*) value)); break;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <OS_SHL_GetVariable+0x178>)
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	68b8      	ldr	r0, [r7, #8]
 8001d5a:	f00a f927 	bl	800bfac <snprintf>
 8001d5e:	e064      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_CHAR:     snprintf(ret, retLength, "%c",   *((char*) value)); break;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <OS_SHL_GetVariable+0x17c>)
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f00a f91f 	bl	800bfac <snprintf>
 8001d6e:	e05c      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_UINT8:    snprintf(ret, retLength, "%u",   *((uint8_t*) value)); break;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <OS_SHL_GetVariable+0x178>)
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	f00a f917 	bl	800bfac <snprintf>
 8001d7e:	e054      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_INT8:     snprintf(ret, retLength, "%d",   *((int8_t*) value)); break;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f993 3000 	ldrsb.w	r3, [r3]
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <OS_SHL_GetVariable+0x180>)
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	68b8      	ldr	r0, [r7, #8]
 8001d8c:	f00a f90e 	bl	800bfac <snprintf>
 8001d90:	e04b      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_UINT16:   snprintf(ret, retLength, "%u",   *((uint16_t*) value)); break;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <OS_SHL_GetVariable+0x178>)
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f00a f906 	bl	800bfac <snprintf>
 8001da0:	e043      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_INT16:    snprintf(ret, retLength, "%d",   *((int16_t*) value)); break;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da8:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <OS_SHL_GetVariable+0x180>)
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f00a f8fd 	bl	800bfac <snprintf>
 8001db2:	e03a      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_UINT32:   snprintf(ret, retLength, "%lu",  *((uint32_t*) value)); break;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <OS_SHL_GetVariable+0x184>)
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	68b8      	ldr	r0, [r7, #8]
 8001dbe:	f00a f8f5 	bl	800bfac <snprintf>
 8001dc2:	e032      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_INT32:    snprintf(ret, retLength, "%ld",  *((int32_t*) value)); break;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <OS_SHL_GetVariable+0x188>)
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	68b8      	ldr	r0, [r7, #8]
 8001dce:	f00a f8ed 	bl	800bfac <snprintf>
 8001dd2:	e02a      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_UINT64:   snprintf(ret, retLength, "%llu", *((uint64_t*) value)); break;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	cb18      	ldmia	r3, {r3, r4}
 8001dd8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <OS_SHL_GetVariable+0x18c>)
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68b8      	ldr	r0, [r7, #8]
 8001de2:	f00a f8e3 	bl	800bfac <snprintf>
 8001de6:	e020      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_INT64:    snprintf(ret, retLength, "%lld", *((int64_t*) value)); break;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	cb18      	ldmia	r3, {r3, r4}
 8001dec:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <OS_SHL_GetVariable+0x190>)
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f00a f8d9 	bl	800bfac <snprintf>
 8001dfa:	e016      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_FLOAT:    snprintf(ret, retLength, "%3f",   PI); break;     // FIXME
 8001dfc:	a410      	add	r4, pc, #64	; (adr r4, 8001e40 <OS_SHL_GetVariable+0x170>)
 8001dfe:	cc18      	ldmia	r4, {r3, r4}
 8001e00:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001e04:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <OS_SHL_GetVariable+0x194>)
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	f00a f8cf 	bl	800bfac <snprintf>
 8001e0e:	e00c      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        case TYPE_DOUBLE:   snprintf(ret, retLength, "%5lf",   PI); break;    // FIXME
 8001e10:	a40b      	add	r4, pc, #44	; (adr r4, 8001e40 <OS_SHL_GetVariable+0x170>)
 8001e12:	cc18      	ldmia	r4, {r3, r4}
 8001e14:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <OS_SHL_GetVariable+0x198>)
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68b8      	ldr	r0, [r7, #8]
 8001e1e:	f00a f8c5 	bl	800bfac <snprintf>
 8001e22:	e002      	b.n	8001e2a <OS_SHL_GetVariable+0x15a>
        default:            retValue = pdFALSE; break; // Type Error
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	bf00      	nop
    }

    free(value);
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f009 fe04 	bl	800ba38 <free>
    return retValue;
 8001e30:	69fb      	ldr	r3, [r7, #28]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	5444261e 	.word	0x5444261e
 8001e44:	400921fb 	.word	0x400921fb
 8001e48:	08014398 	.word	0x08014398
 8001e4c:	0801439c 	.word	0x0801439c
 8001e50:	080143a0 	.word	0x080143a0
 8001e54:	080143a4 	.word	0x080143a4
 8001e58:	080143a8 	.word	0x080143a8
 8001e5c:	080143ac 	.word	0x080143ac
 8001e60:	080143b4 	.word	0x080143b4
 8001e64:	080143bc 	.word	0x080143bc
 8001e68:	080143c0 	.word	0x080143c0

08001e6c <vApplicationMallocFailedHook>:
 */

#include "blueboard.h"

void vApplicationMallocFailedHook( void )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 8001e70:	4902      	ldr	r1, [pc, #8]	; (8001e7c <vApplicationMallocFailedHook+0x10>)
 8001e72:	2022      	movs	r0, #34	; 0x22
 8001e74:	f000 f814 	bl	8001ea0 <vAssertCalled>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	080147a8 	.word	0x080147a8

08001e80 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    function is called if a stack overflow is detected. */

    /* Force an assert. */
    configASSERT( ( volatile void * ) NULL );
 8001e8a:	4904      	ldr	r1, [pc, #16]	; (8001e9c <vApplicationStackOverflowHook+0x1c>)
 8001e8c:	2030      	movs	r0, #48	; 0x30
 8001e8e:	f000 f807 	bl	8001ea0 <vAssertCalled>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	080147a8 	.word	0x080147a8

08001ea0 <vAssertCalled>:
    ( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]

    ( void ) pcFile;
    ( void ) ulLine;

    taskENTER_CRITICAL();
 8001eae:	f004 ff93 	bl	8006dd8 <vPortEnterCritical>
    {
        /* Set ul to a non-zero value using the debugger to step out of this
        function. */
        while( ul == 0 )
 8001eb2:	e000      	b.n	8001eb6 <vAssertCalled+0x16>
 8001eb4:	bf00      	nop
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0fb      	beq.n	8001eb4 <vAssertCalled+0x14>
        {
            __NOP();
        }
    }
    taskEXIT_CRITICAL();
 8001ebc:	f004 ffb8 	bl	8006e30 <vPortExitCritical>
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_read>:
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e008      	b.n	8001eec <_read+0x24>
    {
        //*ptr++ = __io_getchar();
        //*ptr++ = HW_DBG_Get();
        HW_DBG_Get((ptr++));
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	60ba      	str	r2, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f008 fa3d 	bl	800a360 <HW_DBG_Get>

int _read (int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf2      	blt.n	8001eda <_read+0x12>
        //*ptr++ = __io_getchar();
        //*ptr++ = HW_DBG_Get();
        HW_DBG_Get((ptr++));
    }

return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop

08001f00 <_write>:

int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f008 f9c6 	bl	800a2ac <HW_DBG_Put>

int _write(int file, char *ptr, int len)
{
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
    {
        //__io_putchar(*ptr++);
        HW_DBG_Put((*ptr++));
    }
    return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x50>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x16>
        heap_end = &end;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <_sbrk+0x50>)
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <_sbrk+0x54>)
 8001f4c:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <_sbrk+0x50>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <_sbrk+0x50>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	466a      	mov	r2, sp
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d907      	bls.n	8001f72 <_sbrk+0x3a>
    {
//      write(1, "Heap and stack collision\n", 25);
//      abort();
        errno = ENOMEM;
 8001f62:	f009 fd35 	bl	800b9d0 <__errno>
 8001f66:	4602      	mov	r2, r0
 8001f68:	230c      	movs	r3, #12
 8001f6a:	6013      	str	r3, [r2, #0]
        return (caddr_t) -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	e006      	b.n	8001f80 <_sbrk+0x48>
    }

    heap_end += incr;
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <_sbrk+0x50>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <_sbrk+0x50>)
 8001f7c:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200105c8 	.word	0x200105c8
 8001f8c:	200149dc 	.word	0x200149dc

08001f90 <_close>:

int _close(int file)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    return -1;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb8:	605a      	str	r2, [r3, #4]
    return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_isatty>:

int _isatty(int file)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
    return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop

08001ffc <OS_CreateASVTask>:
static void OS_ASVTask(void *pvParameters);
void ASV_Create(ASV_ControlTypeDef* ASV, HW_ASV_ChannelTypeDef channel, uint16_t min_Position, uint16_t max_Position);


void OS_CreateASVTask(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af02      	add	r7, sp, #8
	xASVMsgQueue = xQueueCreate( MAX_ASV_IN_QUEUE, sizeof(ASV_ControlTypeDef));
 8002002:	2200      	movs	r2, #0
 8002004:	2108      	movs	r1, #8
 8002006:	2005      	movs	r0, #5
 8002008:	f005 fa10 	bl	800742c <xQueueGenericCreate>
 800200c:	4602      	mov	r2, r0
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <OS_CreateASVTask+0x84>)
 8002010:	601a      	str	r2, [r3, #0]
    if(xASVMsgQueue==NULL)
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <OS_CreateASVTask+0x84>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <OS_CreateASVTask+0x26>
    {
    	printf("insufficient heap RAM available for ASVMsgQueue\r\n");
 800201a:	481a      	ldr	r0, [pc, #104]	; (8002084 <OS_CreateASVTask+0x88>)
 800201c:	f009 ffae 	bl	800bf7c <puts>
    	while(1);
 8002020:	e7fe      	b.n	8002020 <OS_CreateASVTask+0x24>
    }
    ASV_Create(&parasol, HW_ASV_CHANNEL1, 1400, 2300);
 8002022:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002026:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800202a:	2100      	movs	r1, #0
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <OS_CreateASVTask+0x8c>)
 800202e:	f000 f859 	bl	80020e4 <ASV_Create>
    ASV_Create(&centralIndex, HW_ASV_CHANNEL2, MIN_INDEX, MAX_INDEX);
 8002032:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002036:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800203a:	2101      	movs	r1, #1
 800203c:	4813      	ldr	r0, [pc, #76]	; (800208c <OS_CreateASVTask+0x90>)
 800203e:	f000 f851 	bl	80020e4 <ASV_Create>
    ASV_Create(&leftArm, HW_ASV_CHANNEL4, 2000, 4000);
 8002042:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002046:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800204a:	2103      	movs	r1, #3
 800204c:	4810      	ldr	r0, [pc, #64]	; (8002090 <OS_CreateASVTask+0x94>)
 800204e:	f000 f849 	bl	80020e4 <ASV_Create>
    ASV_Create(&rightArm, HW_ASV_CHANNEL2, 2000, 4000);
 8002052:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002056:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800205a:	2101      	movs	r1, #1
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <OS_CreateASVTask+0x98>)
 800205e:	f000 f841 	bl	80020e4 <ASV_Create>



	xTaskCreate(OS_ASVTask, "ANALOG SERVO", 350, NULL, OS_TASK_PRIORITY_ASV, NULL );
 8002062:	2300      	movs	r3, #0
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2302      	movs	r3, #2
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <OS_CreateASVTask+0x9c>)
 8002072:	480a      	ldr	r0, [pc, #40]	; (800209c <OS_CreateASVTask+0xa0>)
 8002074:	f005 ff5e 	bl	8007f34 <xTaskCreate>
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200105cc 	.word	0x200105cc
 8002084:	080147cc 	.word	0x080147cc
 8002088:	200105e8 	.word	0x200105e8
 800208c:	200105e0 	.word	0x200105e0
 8002090:	200105d0 	.word	0x200105d0
 8002094:	200105d8 	.word	0x200105d8
 8002098:	08014800 	.word	0x08014800
 800209c:	080020a1 	.word	0x080020a1

080020a0 <OS_ASVTask>:

static void OS_ASVTask( void *pvParameters )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    ( void ) pvParameters;

    for( ;; )
    {
    	/* Block on the queue to wait for data to arrive */
    	xQueueReceive(xASVMsgQueue, &ASV_To_Manage, portMAX_DELAY);
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <OS_ASVTask+0x40>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	f107 0108 	add.w	r1, r7, #8
 80020b0:	2300      	movs	r3, #0
 80020b2:	f04f 32ff 	mov.w	r2, #4294967295
 80020b6:	f005 fbdd 	bl	8007874 <xQueueGenericReceive>
    	if (ASV_To_Manage.current_Position > ASV_To_Manage.max_Position)
 80020ba:	897a      	ldrh	r2, [r7, #10]
 80020bc:	89fb      	ldrh	r3, [r7, #14]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d901      	bls.n	80020c6 <OS_ASVTask+0x26>
    		ASV_To_Manage.current_Position = ASV_To_Manage.max_Position;
 80020c2:	89fb      	ldrh	r3, [r7, #14]
 80020c4:	817b      	strh	r3, [r7, #10]
    	if (ASV_To_Manage.current_Position < ASV_To_Manage.min_Position)
 80020c6:	897a      	ldrh	r2, [r7, #10]
 80020c8:	89bb      	ldrh	r3, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d201      	bcs.n	80020d2 <OS_ASVTask+0x32>
    		ASV_To_Manage.current_Position = ASV_To_Manage.min_Position;
 80020ce:	89bb      	ldrh	r3, [r7, #12]
 80020d0:	817b      	strh	r3, [r7, #10]

    	HW_ASV_SetPwmPulseLength(ASV_To_Manage.channel,ASV_To_Manage.current_Position);
 80020d2:	7a3b      	ldrb	r3, [r7, #8]
 80020d4:	897a      	ldrh	r2, [r7, #10]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f007 ffb7 	bl	800a04c <HW_ASV_SetPwmPulseLength>
    }
 80020de:	e7e3      	b.n	80020a8 <OS_ASVTask+0x8>
 80020e0:	200105cc 	.word	0x200105cc

080020e4 <ASV_Create>:
}

void ASV_Create(ASV_ControlTypeDef* ASV, HW_ASV_ChannelTypeDef channel, uint16_t min_Position, uint16_t max_Position)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	72fb      	strb	r3, [r7, #11]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
	ASV->channel = channel;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	7afa      	ldrb	r2, [r7, #11]
 8002102:	701a      	strb	r2, [r3, #0]
	ASV->max_Position = max_Position;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	80da      	strh	r2, [r3, #6]
	ASV->min_Position = min_Position;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	893a      	ldrh	r2, [r7, #8]
 800210e:	809a      	strh	r2, [r3, #4]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <OS_CreateDSVTask>:
static void OS_DSVTask(void *pvParameters);
void DSV_Create(DSV_ControlTypeDef* DSV, uint8_t id, uint16_t min_Position, uint16_t max_Position);


void OS_CreateDSVTask(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af02      	add	r7, sp, #8
	xDSVMsgQueue = xQueueCreate( MAX_DSV_IN_QUEUE, sizeof(DSV_ControlTypeDef));
 8002122:	2200      	movs	r2, #0
 8002124:	2108      	movs	r1, #8
 8002126:	2005      	movs	r0, #5
 8002128:	f005 f980 	bl	800742c <xQueueGenericCreate>
 800212c:	4602      	mov	r2, r0
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <OS_CreateDSVTask+0x60>)
 8002130:	601a      	str	r2, [r3, #0]
    if(xDSVMsgQueue==NULL)
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <OS_CreateDSVTask+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <OS_CreateDSVTask+0x26>
    {
    	printf("insufficient heap RAM available for DSVMsgQueue\r\n");
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <OS_CreateDSVTask+0x64>)
 800213c:	f009 ff1e 	bl	800bf7c <puts>
    	while(1);
 8002140:	e7fe      	b.n	8002140 <OS_CreateDSVTask+0x24>
    }
	xTaskCreate(OS_DSVTask, "DIGITAL SERVO", 350, NULL, OS_TASK_PRIORITY_DSV, NULL );
 8002142:	2300      	movs	r3, #0
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2302      	movs	r3, #2
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2300      	movs	r3, #0
 800214c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <OS_CreateDSVTask+0x68>)
 8002152:	480d      	ldr	r0, [pc, #52]	; (8002188 <OS_CreateDSVTask+0x6c>)
 8002154:	f005 feee 	bl	8007f34 <xTaskCreate>

    DSV_Create(&servo1, 23, 0, 1023);
 8002158:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800215c:	2200      	movs	r2, #0
 800215e:	2117      	movs	r1, #23
 8002160:	480a      	ldr	r0, [pc, #40]	; (800218c <OS_CreateDSVTask+0x70>)
 8002162:	f000 f841 	bl	80021e8 <DSV_Create>
    DSV_Create(&servo2, 42, 0, 1023);
 8002166:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800216a:	2200      	movs	r2, #0
 800216c:	212a      	movs	r1, #42	; 0x2a
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <OS_CreateDSVTask+0x74>)
 8002170:	f000 f83a 	bl	80021e8 <DSV_Create>
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200105f0 	.word	0x200105f0
 8002180:	08014810 	.word	0x08014810
 8002184:	08014844 	.word	0x08014844
 8002188:	08002195 	.word	0x08002195
 800218c:	200105f4 	.word	0x200105f4
 8002190:	200105fc 	.word	0x200105fc

08002194 <OS_DSVTask>:

static void OS_DSVTask( void *pvParameters )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    ( void ) pvParameters;

    for( ;; )
    {
    	/* Block on the queue to wait for data to arrive */
    	xQueueReceive(xDSVMsgQueue, &DSV_To_Manage, portMAX_DELAY);
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <OS_DSVTask+0x50>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	f107 0108 	add.w	r1, r7, #8
 80021a4:	2300      	movs	r3, #0
 80021a6:	f04f 32ff 	mov.w	r2, #4294967295
 80021aa:	f005 fb63 	bl	8007874 <xQueueGenericReceive>
    	if (DSV_To_Manage.current_Position > DSV_To_Manage.max_Position)
 80021ae:	897a      	ldrh	r2, [r7, #10]
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d901      	bls.n	80021ba <OS_DSVTask+0x26>
    		DSV_To_Manage.current_Position = DSV_To_Manage.max_Position;
 80021b6:	89fb      	ldrh	r3, [r7, #14]
 80021b8:	817b      	strh	r3, [r7, #10]
    	if (DSV_To_Manage.current_Position < DSV_To_Manage.min_Position)
 80021ba:	897a      	ldrh	r2, [r7, #10]
 80021bc:	89bb      	ldrh	r3, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d201      	bcs.n	80021c6 <OS_DSVTask+0x32>
    		DSV_To_Manage.current_Position = DSV_To_Manage.min_Position;
 80021c2:	89bb      	ldrh	r3, [r7, #12]
 80021c4:	817b      	strh	r3, [r7, #10]

    	xl_320_set_position(DSV_To_Manage.id, DSV_To_Manage.current_Position);
 80021c6:	7a3b      	ldrb	r3, [r7, #8]
 80021c8:	897a      	ldrh	r2, [r7, #10]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f009 fbe1 	bl	800b994 <xl_320_set_position>
    	vTaskDelay(5/portTICK_RATE_MS);
 80021d2:	2005      	movs	r0, #5
 80021d4:	f006 f8de 	bl	8008394 <vTaskDelay>
    	xl_320_set_led(DSV_To_Manage.id, XL_320_LED_BLUE);
 80021d8:	7a3b      	ldrb	r3, [r7, #8]
 80021da:	2104      	movs	r1, #4
 80021dc:	4618      	mov	r0, r3
 80021de:	f009 fbc5 	bl	800b96c <xl_320_set_led>
    }
 80021e2:	e7db      	b.n	800219c <OS_DSVTask+0x8>
 80021e4:	200105f0 	.word	0x200105f0

080021e8 <DSV_Create>:
}

void DSV_Create(DSV_ControlTypeDef* DSV, uint8_t id, uint16_t min_Position, uint16_t max_Position)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	72fb      	strb	r3, [r7, #11]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
	DSV->id = id;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	7afa      	ldrb	r2, [r7, #11]
 8002206:	701a      	strb	r2, [r3, #0]
	DSV->max_Position = max_Position;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	80da      	strh	r2, [r3, #6]
	DSV->min_Position = min_Position;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	893a      	ldrh	r2, [r7, #8]
 8002212:	809a      	strh	r2, [r3, #4]
	xl_320_set_control_mode(DSV->id, XL_320_JOIN_MODE);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2102      	movs	r1, #2
 800221a:	4618      	mov	r0, r3
 800221c:	f009 fb92 	bl	800b944 <xl_320_set_control_mode>
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <OS_CreateAvoidanceTask>:
//bool av_compute_opponent_position(void);
//void do_avoidance(void);


void OS_CreateAvoidanceTask(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af02      	add	r7, sp, #8

    xTaskCreate(OS_AvoidanceTask, "AVOIDANCE", 250, NULL, OS_TASK_PRIORITY_AVOIDANCE, NULL );
 800222e:	2300      	movs	r3, #0
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2304      	movs	r3, #4
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	22fa      	movs	r2, #250	; 0xfa
 800223a:	4903      	ldr	r1, [pc, #12]	; (8002248 <OS_CreateAvoidanceTask+0x20>)
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <OS_CreateAvoidanceTask+0x24>)
 800223e:	f005 fe79 	bl	8007f34 <xTaskCreate>
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08014854 	.word	0x08014854
 800224c:	08002251 	.word	0x08002251

08002250 <OS_AvoidanceTask>:

static void OS_AvoidanceTask( void *pvParameters )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    TickType_t xNextWakeTime;

    av_init();
 8002258:	f000 f85e 	bl	8002318 <av_init>

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 800225c:	f006 fa12 	bl	8008684 <xTaskGetTickCount>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
    	av.det_front_left = IND4_VALUE;
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	4829      	ldr	r0, [pc, #164]	; (8002310 <OS_AvoidanceTask+0xc0>)
 800226a:	f002 ffe1 	bl	8005230 <GPIO_ReadInputDataBit>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <OS_AvoidanceTask+0xc4>)
 800227c:	71da      	strb	r2, [r3, #7]
    	av.det_front_center = IND7_VALUE;
 800227e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002282:	4823      	ldr	r0, [pc, #140]	; (8002310 <OS_AvoidanceTask+0xc0>)
 8002284:	f002 ffd4 	bl	8005230 <GPIO_ReadInputDataBit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <OS_AvoidanceTask+0xc4>)
 8002296:	721a      	strb	r2, [r3, #8]
    	av.det_front_right = IND6_VALUE;
 8002298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229c:	481c      	ldr	r0, [pc, #112]	; (8002310 <OS_AvoidanceTask+0xc0>)
 800229e:	f002 ffc7 	bl	8005230 <GPIO_ReadInputDataBit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <OS_AvoidanceTask+0xc4>)
 80022b0:	725a      	strb	r2, [r3, #9]
    	av.det_back_left = IND1_VALUE;
 80022b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022b6:	4816      	ldr	r0, [pc, #88]	; (8002310 <OS_AvoidanceTask+0xc0>)
 80022b8:	f002 ffba 	bl	8005230 <GPIO_ReadInputDataBit>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <OS_AvoidanceTask+0xc4>)
 80022ca:	729a      	strb	r2, [r3, #10]
    	av.det_back_center = IND2_VALUE;
 80022cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022d0:	480f      	ldr	r0, [pc, #60]	; (8002310 <OS_AvoidanceTask+0xc0>)
 80022d2:	f002 ffad 	bl	8005230 <GPIO_ReadInputDataBit>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <OS_AvoidanceTask+0xc4>)
 80022e4:	72da      	strb	r2, [r3, #11]
    	av.det_back_right = IND3_VALUE;
 80022e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <OS_AvoidanceTask+0xc0>)
 80022ec:	f002 ffa0 	bl	8005230 <GPIO_ReadInputDataBit>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <OS_AvoidanceTask+0xc4>)
 80022fe:	731a      	strb	r2, [r3, #12]
    	}*/


//    	do_avoidance();

    	vTaskDelayUntil( &xNextWakeTime, IND_SCAN_PERIOD_TICK);
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2164      	movs	r1, #100	; 0x64
 8002306:	4618      	mov	r0, r3
 8002308:	f005 ffd6 	bl	80082b8 <vTaskDelayUntil>
    }
 800230c:	e7aa      	b.n	8002264 <OS_AvoidanceTask+0x14>
 800230e:	bf00      	nop
 8002310:	40020c00 	.word	0x40020c00
 8002314:	2001470c 	.word	0x2001470c

08002318 <av_init>:
}

static void av_init(void) {
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
    av.state = AV_STATE_CLEAR;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <av_init+0x4c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
    av.action_done = 0;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <av_init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	749a      	strb	r2, [r3, #18]
    av.timer_ms = 0;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <av_init+0x4c>)
 800232a:	2200      	movs	r2, #0
 800232c:	81da      	strh	r2, [r3, #14]
    av.timer_opp_validity_ms = 0;
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <av_init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	821a      	strh	r2, [r3, #16]

    av.mask_front_left = true;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <av_init+0x4c>)
 8002336:	2201      	movs	r2, #1
 8002338:	705a      	strb	r2, [r3, #1]
    av.mask_front_center = true;
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <av_init+0x4c>)
 800233c:	2201      	movs	r2, #1
 800233e:	709a      	strb	r2, [r3, #2]
    av.mask_front_right = true;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <av_init+0x4c>)
 8002342:	2201      	movs	r2, #1
 8002344:	70da      	strb	r2, [r3, #3]
    av.mask_back_left = true;
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <av_init+0x4c>)
 8002348:	2201      	movs	r2, #1
 800234a:	711a      	strb	r2, [r3, #4]
    av.mask_back_center = true;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <av_init+0x4c>)
 800234e:	2201      	movs	r2, #1
 8002350:	715a      	strb	r2, [r3, #5]
    av.mask_back_right = true;
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <av_init+0x4c>)
 8002354:	2201      	movs	r2, #1
 8002356:	719a      	strb	r2, [r3, #6]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2001470c 	.word	0x2001470c

08002368 <LedSetColor>:
        }
    }
}

void LedSetColor(HW_LED_ColorTypeDef color)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedColorMutex, 10);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <LedSetColor+0x34>)
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	220a      	movs	r2, #10
 800237a:	2100      	movs	r1, #0
 800237c:	f005 fa7a 	bl	8007874 <xQueueGenericReceive>
	LedColor = color;
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <LedSetColor+0x38>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedColorMutex);
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <LedSetColor+0x34>)
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	f005 f8da 	bl	8007548 <xQueueGenericSend>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20010604 	.word	0x20010604
 80023a0:	2001060c 	.word	0x2001060c

080023a4 <LedSetMode>:

void LedSetMode(HW_LED_ModeTypeDef mode)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(xLedModeMutex, 10);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <LedSetMode+0x34>)
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	220a      	movs	r2, #10
 80023b6:	2100      	movs	r1, #0
 80023b8:	f005 fa5c 	bl	8007874 <xQueueGenericReceive>
	LedMode = mode;
 80023bc:	4a07      	ldr	r2, [pc, #28]	; (80023dc <LedSetMode+0x38>)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	7013      	strb	r3, [r2, #0]
	xSemaphoreGive(xLedModeMutex);
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <LedSetMode+0x34>)
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	f005 f8bc 	bl	8007548 <xQueueGenericSend>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20010608 	.word	0x20010608
 80023dc:	2001060d 	.word	0x2001060d

080023e0 <OS_CreateMotionTask>:
static void AVS_Init(void);
static void AVS_CsTask(void *pvParameters);
static bool motion_is_traj_done(wp_t *waypoint);

void OS_CreateMotionTask(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af02      	add	r7, sp, #8
    /* Initialize global variables */
    memset(&robot, 0, sizeof(RobotTypeDef));
 80023e6:	f44f 7218 	mov.w	r2, #608	; 0x260
 80023ea:	2100      	movs	r1, #0
 80023ec:	4817      	ldr	r0, [pc, #92]	; (800244c <OS_CreateMotionTask+0x6c>)
 80023ee:	f009 fd56 	bl	800be9e <memset>
	vCreateAllMutex();
 80023f2:	f000 fb2f 	bl	8002a54 <vCreateAllMutex>
    AVS_Init();
 80023f6:	f000 f87b 	bl	80024f0 <AVS_Init>
	xTaskCreate(AVS_CsTask, "AVERSIVE", 500, NULL, OS_TASK_PRIORITY_AVERSIVE, NULL );
 80023fa:	2300      	movs	r3, #0
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2304      	movs	r3, #4
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002408:	4911      	ldr	r1, [pc, #68]	; (8002450 <OS_CreateMotionTask+0x70>)
 800240a:	4812      	ldr	r0, [pc, #72]	; (8002454 <OS_CreateMotionTask+0x74>)
 800240c:	f005 fd92 	bl	8007f34 <xTaskCreate>

	xWaypointQueue = xQueueCreate( MAX_WP_IN_QUEUE, sizeof(wp_t));
 8002410:	2200      	movs	r2, #0
 8002412:	2114      	movs	r1, #20
 8002414:	2005      	movs	r0, #5
 8002416:	f005 f809 	bl	800742c <xQueueGenericCreate>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <OS_CreateMotionTask+0x78>)
 800241e:	601a      	str	r2, [r3, #0]
    if(xWaypointQueue==NULL)
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <OS_CreateMotionTask+0x78>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <OS_CreateMotionTask+0x50>
    {
    	printf("insufficient heap RAM available for xELTQueue\r\n");
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <OS_CreateMotionTask+0x7c>)
 800242a:	f009 fda7 	bl	800bf7c <puts>
    	while(1);
 800242e:	e7fe      	b.n	800242e <OS_CreateMotionTask+0x4e>
    }
	xTaskCreate(OS_MotionTask, "MOTION", 500, NULL, OS_TASK_PRIORITY_MOTION, NULL );
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2303      	movs	r3, #3
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2300      	movs	r3, #0
 800243a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <OS_CreateMotionTask+0x80>)
 8002440:	4808      	ldr	r0, [pc, #32]	; (8002464 <OS_CreateMotionTask+0x84>)
 8002442:	f005 fd77 	bl	8007f34 <xTaskCreate>

}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20014720 	.word	0x20014720
 8002450:	08014860 	.word	0x08014860
 8002454:	08002771 	.word	0x08002771
 8002458:	20010624 	.word	0x20010624
 800245c:	0801486c 	.word	0x0801486c
 8002460:	0801489c 	.word	0x0801489c
 8002464:	08002469 	.word	0x08002469

08002468 <OS_MotionTask>:

static void OS_MotionTask( void *pvParameters )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    /* Remove compiler warning about unused parameter. */
    ( void ) pvParameters;

    for( ;; )
    {
    	xQueueReceive(xWaypointQueue, &current_waypoint, portMAX_DELAY);
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <OS_MotionTask+0x78>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	2300      	movs	r3, #0
 8002476:	f04f 32ff 	mov.w	r2, #4294967295
 800247a:	491a      	ldr	r1, [pc, #104]	; (80024e4 <OS_MotionTask+0x7c>)
 800247c:	f005 f9fa 	bl	8007874 <xQueueGenericReceive>

    	// Handle avoidance blockage
        av.mask_back_left = true;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <OS_MotionTask+0x80>)
 8002482:	2201      	movs	r2, #1
 8002484:	711a      	strb	r2, [r3, #4]
        av.mask_back_right = true;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <OS_MotionTask+0x80>)
 8002488:	2201      	movs	r2, #1
 800248a:	719a      	strb	r2, [r3, #6]
        av.mask_front_center = true;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <OS_MotionTask+0x80>)
 800248e:	2201      	movs	r2, #1
 8002490:	709a      	strb	r2, [r3, #2]
        av.mask_front_left = true;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <OS_MotionTask+0x80>)
 8002494:	2201      	movs	r2, #1
 8002496:	705a      	strb	r2, [r3, #1]
        av.mask_front_right = true;
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <OS_MotionTask+0x80>)
 800249a:	2201      	movs	r2, #1
 800249c:	70da      	strb	r2, [r3, #3]

        motion_send_wp(&current_waypoint);
 800249e:	4811      	ldr	r0, [pc, #68]	; (80024e4 <OS_MotionTask+0x7c>)
 80024a0:	f000 fba4 	bl	8002bec <motion_send_wp>

        while(!motion_is_traj_done(&current_waypoint))
 80024a4:	e002      	b.n	80024ac <OS_MotionTask+0x44>
        {
        	vTaskDelay(MOTION_CONTROL_PERIOD_TICKS);
 80024a6:	2032      	movs	r0, #50	; 0x32
 80024a8:	f005 ff74 	bl	8008394 <vTaskDelay>
        av.mask_front_left = true;
        av.mask_front_right = true;

        motion_send_wp(&current_waypoint);

        while(!motion_is_traj_done(&current_waypoint))
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <OS_MotionTask+0x7c>)
 80024ae:	f000 fb89 	bl	8002bc4 <motion_is_traj_done>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f083 0301 	eor.w	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f3      	bne.n	80024a6 <OS_MotionTask+0x3e>
        {
        	vTaskDelay(MOTION_CONTROL_PERIOD_TICKS);
        }

        av.mask_back_left = false;
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <OS_MotionTask+0x80>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	711a      	strb	r2, [r3, #4]
        av.mask_back_right = false;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <OS_MotionTask+0x80>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	719a      	strb	r2, [r3, #6]
        av.mask_front_center = false;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <OS_MotionTask+0x80>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	709a      	strb	r2, [r3, #2]
        av.mask_front_left = false;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <OS_MotionTask+0x80>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
        av.mask_front_right = false;
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <OS_MotionTask+0x80>)
 80024d8:	2200      	movs	r2, #0
 80024da:	70da      	strb	r2, [r3, #3]
    } // traj done
 80024dc:	e7c8      	b.n	8002470 <OS_MotionTask+0x8>
 80024de:	bf00      	nop
 80024e0:	20010624 	.word	0x20010624
 80024e4:	20010628 	.word	0x20010628
 80024e8:	2001470c 	.word	0x2001470c
 80024ec:	00000000 	.word	0x00000000

080024f0 <AVS_Init>:
        //sprintf(cBuffer,"%ld\t%ld\t%lf\t%lf\t%lf\r\n", HW_ENC_GetChannel(HW_ENC_CHANNEL1),HW_ENC_GetChannel(HW_ENC_CHANNEL2),position_get_a_rad_double(&robot.cs.pos),position_get_x_double(&robot.cs.pos),position_get_y_double(&robot.cs.pos));
        //OS_DebugTaskPrint(cBuffer);
}

void AVS_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af02      	add	r7, sp, #8
    /* Robot System */
    rs_init(&robot.cs.rs);
 80024f6:	488a      	ldr	r0, [pc, #552]	; (8002720 <AVS_Init+0x230>)
 80024f8:	f001 fc22 	bl	8003d40 <rs_init>
    rs_set_left_pwm(&robot.cs.rs,  (void*) HW_MOT_SetMotorSpeedFastDecay, (void*) MOT_CHANNEL_LEFT);
 80024fc:	2200      	movs	r2, #0
 80024fe:	4989      	ldr	r1, [pc, #548]	; (8002724 <AVS_Init+0x234>)
 8002500:	4887      	ldr	r0, [pc, #540]	; (8002720 <AVS_Init+0x230>)
 8002502:	f001 fc2b 	bl	8003d5c <rs_set_left_pwm>
    rs_set_right_pwm(&robot.cs.rs, (void*) HW_MOT_SetMotorSpeedFastDecay, (void*) MOT_CHANNEL_RIGHT);
 8002506:	2201      	movs	r2, #1
 8002508:	4986      	ldr	r1, [pc, #536]	; (8002724 <AVS_Init+0x234>)
 800250a:	4885      	ldr	r0, [pc, #532]	; (8002720 <AVS_Init+0x230>)
 800250c:	f001 fc38 	bl	8003d80 <rs_set_right_pwm>

    /* External Encoders */
    rs_set_left_ext_encoder(&robot.cs.rs,  (void*) HW_ENC_GetChannel, (void*) ENC_CHANNEL_LEFT,  PHYS_ROBOT_ENCODER_LEFT_GAIN);
 8002510:	ed9f 0b77 	vldr	d0, [pc, #476]	; 80026f0 <AVS_Init+0x200>
 8002514:	2200      	movs	r2, #0
 8002516:	4984      	ldr	r1, [pc, #528]	; (8002728 <AVS_Init+0x238>)
 8002518:	4881      	ldr	r0, [pc, #516]	; (8002720 <AVS_Init+0x230>)
 800251a:	f001 fc43 	bl	8003da4 <rs_set_left_ext_encoder>
    rs_set_right_ext_encoder(&robot.cs.rs, (void*) HW_ENC_GetChannel, (void*) ENC_CHANNEL_RIGHT, PHYS_ROBOT_ENCODER_RIGHT_GAIN);
 800251e:	ed9f 0b76 	vldr	d0, [pc, #472]	; 80026f8 <AVS_Init+0x208>
 8002522:	2201      	movs	r2, #1
 8002524:	4980      	ldr	r1, [pc, #512]	; (8002728 <AVS_Init+0x238>)
 8002526:	487e      	ldr	r0, [pc, #504]	; (8002720 <AVS_Init+0x230>)
 8002528:	f001 fc56 	bl	8003dd8 <rs_set_right_ext_encoder>
    rs_set_flags(&robot.cs.rs, RS_USE_EXT);
 800252c:	2101      	movs	r1, #1
 800252e:	487c      	ldr	r0, [pc, #496]	; (8002720 <AVS_Init+0x230>)
 8002530:	f001 fd08 	bl	8003f44 <rs_set_flags>

    /* Position Manager */
    position_init(&robot.cs.pos);
 8002534:	487d      	ldr	r0, [pc, #500]	; (800272c <AVS_Init+0x23c>)
 8002536:	f001 f983 	bl	8003840 <position_init>
    position_set_physical_params(&robot.cs.pos, PHYS_ROBOT_ENCODERS_TRACK_MM, PHYS_ROBOT_NB_IMP_PER_MM);
 800253a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002700 <AVS_Init+0x210>
 800253e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8002708 <AVS_Init+0x218>
 8002542:	487a      	ldr	r0, [pc, #488]	; (800272c <AVS_Init+0x23c>)
 8002544:	f001 f998 	bl	8003878 <position_set_physical_params>
    position_set_related_robot_system(&robot.cs.pos, &robot.cs.rs);
 8002548:	4975      	ldr	r1, [pc, #468]	; (8002720 <AVS_Init+0x230>)
 800254a:	4878      	ldr	r0, [pc, #480]	; (800272c <AVS_Init+0x23c>)
 800254c:	f001 f986 	bl	800385c <position_set_related_robot_system>
    position_use_ext(&robot.cs.pos);
 8002550:	4876      	ldr	r0, [pc, #472]	; (800272c <AVS_Init+0x23c>)
 8002552:	f001 f9a9 	bl	80038a8 <position_use_ext>
    //position_set_centrifugal_coef(&robot.cs.pos, PHYS_ROBOT_CENTRIFUGAL_COEF);

    /* Control System filter in Distance */
    pid_init(&robot.cs.pid_d);
 8002556:	4876      	ldr	r0, [pc, #472]	; (8002730 <AVS_Init+0x240>)
 8002558:	f000 fe9e 	bl	8003298 <pid_init>
    pid_set_gains(&robot.cs.pid_d, PHYS_CS_D_PID_KP, PHYS_CS_D_PID_KI, PHYS_CS_D_PID_KD);
 800255c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002560:	2200      	movs	r2, #0
 8002562:	f242 7110 	movw	r1, #10000	; 0x2710
 8002566:	4872      	ldr	r0, [pc, #456]	; (8002730 <AVS_Init+0x240>)
 8002568:	f000 feaa 	bl	80032c0 <pid_set_gains>
    pid_set_maximums(&robot.cs.pid_d, PHYS_CS_D_PID_MAX_IN, PHYS_CS_D_PID_MAX_I, PHYS_CS_D_PID_MAX_OUT);
 800256c:	2300      	movs	r3, #0
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	2100      	movs	r1, #0
 8002574:	486e      	ldr	r0, [pc, #440]	; (8002730 <AVS_Init+0x240>)
 8002576:	f000 febf 	bl	80032f8 <pid_set_maximums>
    pid_set_out_shift(&robot.cs.pid_d, PHYS_CS_D_PID_OUT_SHIFT);
 800257a:	210c      	movs	r1, #12
 800257c:	486c      	ldr	r0, [pc, #432]	; (8002730 <AVS_Init+0x240>)
 800257e:	f000 fed1 	bl	8003324 <pid_set_out_shift>
    pid_set_derivate_filter(&robot.cs.pid_d, PHYS_CS_D_PID_DRV_FILTER);
 8002582:	2104      	movs	r1, #4
 8002584:	486a      	ldr	r0, [pc, #424]	; (8002730 <AVS_Init+0x240>)
 8002586:	f000 fedd 	bl	8003344 <pid_set_derivate_filter>
    quadramp_init(&robot.cs.qr_d);
 800258a:	486a      	ldr	r0, [pc, #424]	; (8002734 <AVS_Init+0x244>)
 800258c:	f000 ffa4 	bl	80034d8 <quadramp_init>
    quadramp_set_1st_order_vars(&robot.cs.qr_d, PHYS_CS_D_QUAD_POS_SPEED, PHYS_CS_D_QUAD_NEG_SPEED);
 8002590:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002594:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002598:	4866      	ldr	r0, [pc, #408]	; (8002734 <AVS_Init+0x244>)
 800259a:	f000 ffbd 	bl	8003518 <quadramp_set_1st_order_vars>
    quadramp_set_2nd_order_vars(&robot.cs.qr_d, PHYS_CS_D_QUAD_POS_ACCEL, PHYS_CS_D_QUAD_NEG_ACCEL);
 800259e:	2214      	movs	r2, #20
 80025a0:	2114      	movs	r1, #20
 80025a2:	4864      	ldr	r0, [pc, #400]	; (8002734 <AVS_Init+0x244>)
 80025a4:	f000 ffa6 	bl	80034f4 <quadramp_set_2nd_order_vars>
    cs_init(&robot.cs.cs_d);
 80025a8:	4863      	ldr	r0, [pc, #396]	; (8002738 <AVS_Init+0x248>)
 80025aa:	f000 fd71 	bl	8003090 <cs_init>
    cs_set_consign_filter(&robot.cs.cs_d, quadramp_do_filter, &robot.cs.qr_d);
 80025ae:	4a61      	ldr	r2, [pc, #388]	; (8002734 <AVS_Init+0x244>)
 80025b0:	4962      	ldr	r1, [pc, #392]	; (800273c <AVS_Init+0x24c>)
 80025b2:	4861      	ldr	r0, [pc, #388]	; (8002738 <AVS_Init+0x248>)
 80025b4:	f000 fd9e 	bl	80030f4 <cs_set_consign_filter>
    cs_set_correct_filter(&robot.cs.cs_d, pid_do_filter, &robot.cs.pid_d);
 80025b8:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <AVS_Init+0x240>)
 80025ba:	4961      	ldr	r1, [pc, #388]	; (8002740 <AVS_Init+0x250>)
 80025bc:	485e      	ldr	r0, [pc, #376]	; (8002738 <AVS_Init+0x248>)
 80025be:	f000 fdab 	bl	8003118 <cs_set_correct_filter>
    cs_set_process_in(&robot.cs.cs_d, rs_set_distance, &robot.cs.rs);
 80025c2:	4a57      	ldr	r2, [pc, #348]	; (8002720 <AVS_Init+0x230>)
 80025c4:	495f      	ldr	r1, [pc, #380]	; (8002744 <AVS_Init+0x254>)
 80025c6:	485c      	ldr	r0, [pc, #368]	; (8002738 <AVS_Init+0x248>)
 80025c8:	f000 fdb8 	bl	800313c <cs_set_process_in>
    cs_set_process_out(&robot.cs.cs_d, rs_get_distance, &robot.cs.rs);
 80025cc:	4a54      	ldr	r2, [pc, #336]	; (8002720 <AVS_Init+0x230>)
 80025ce:	495e      	ldr	r1, [pc, #376]	; (8002748 <AVS_Init+0x258>)
 80025d0:	4859      	ldr	r0, [pc, #356]	; (8002738 <AVS_Init+0x248>)
 80025d2:	f000 fdc5 	bl	8003160 <cs_set_process_out>
    cs_set_consign(&robot.cs.cs_d, 0);
 80025d6:	2100      	movs	r1, #0
 80025d8:	4857      	ldr	r0, [pc, #348]	; (8002738 <AVS_Init+0x248>)
 80025da:	f000 fe4f 	bl	800327c <cs_set_consign>

    /* Control System filter in Angle */
    pid_init(&robot.cs.pid_a);
 80025de:	485b      	ldr	r0, [pc, #364]	; (800274c <AVS_Init+0x25c>)
 80025e0:	f000 fe5a 	bl	8003298 <pid_init>
    pid_set_gains(&robot.cs.pid_a, PHYS_CS_A_PID_KP, PHYS_CS_A_PID_KI, PHYS_CS_A_PID_KD);
 80025e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e8:	2200      	movs	r2, #0
 80025ea:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80025ee:	4857      	ldr	r0, [pc, #348]	; (800274c <AVS_Init+0x25c>)
 80025f0:	f000 fe66 	bl	80032c0 <pid_set_gains>
    pid_set_maximums(&robot.cs.pid_a, PHYS_CS_A_PID_MAX_IN, PHYS_CS_A_PID_MAX_I, PHYS_CS_A_PID_MAX_OUT);
 80025f4:	2300      	movs	r3, #0
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	2100      	movs	r1, #0
 80025fc:	4853      	ldr	r0, [pc, #332]	; (800274c <AVS_Init+0x25c>)
 80025fe:	f000 fe7b 	bl	80032f8 <pid_set_maximums>
    pid_set_out_shift(&robot.cs.pid_a, PHYS_CS_A_PID_OUT_SHIFT);
 8002602:	210b      	movs	r1, #11
 8002604:	4851      	ldr	r0, [pc, #324]	; (800274c <AVS_Init+0x25c>)
 8002606:	f000 fe8d 	bl	8003324 <pid_set_out_shift>
    pid_set_derivate_filter(&robot.cs.pid_a, PHYS_CS_A_PID_DRV_FILTER);
 800260a:	2104      	movs	r1, #4
 800260c:	484f      	ldr	r0, [pc, #316]	; (800274c <AVS_Init+0x25c>)
 800260e:	f000 fe99 	bl	8003344 <pid_set_derivate_filter>
    quadramp_init(&robot.cs.qr_a);
 8002612:	484f      	ldr	r0, [pc, #316]	; (8002750 <AVS_Init+0x260>)
 8002614:	f000 ff60 	bl	80034d8 <quadramp_init>
    quadramp_set_1st_order_vars(&robot.cs.qr_a, PHYS_CS_A_QUAD_POS_SPEED, PHYS_CS_A_QUAD_NEG_SPEED);
 8002618:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800261c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002620:	484b      	ldr	r0, [pc, #300]	; (8002750 <AVS_Init+0x260>)
 8002622:	f000 ff79 	bl	8003518 <quadramp_set_1st_order_vars>
    quadramp_set_2nd_order_vars(&robot.cs.qr_a, PHYS_CS_A_QUAD_POS_ACCEL, PHYS_CS_A_QUAD_NEG_ACCEL);
 8002626:	2208      	movs	r2, #8
 8002628:	2108      	movs	r1, #8
 800262a:	4849      	ldr	r0, [pc, #292]	; (8002750 <AVS_Init+0x260>)
 800262c:	f000 ff62 	bl	80034f4 <quadramp_set_2nd_order_vars>
    cs_init(&robot.cs.cs_a);
 8002630:	4848      	ldr	r0, [pc, #288]	; (8002754 <AVS_Init+0x264>)
 8002632:	f000 fd2d 	bl	8003090 <cs_init>
    cs_set_consign_filter(&robot.cs.cs_a, quadramp_do_filter, &robot.cs.qr_a);
 8002636:	4a46      	ldr	r2, [pc, #280]	; (8002750 <AVS_Init+0x260>)
 8002638:	4940      	ldr	r1, [pc, #256]	; (800273c <AVS_Init+0x24c>)
 800263a:	4846      	ldr	r0, [pc, #280]	; (8002754 <AVS_Init+0x264>)
 800263c:	f000 fd5a 	bl	80030f4 <cs_set_consign_filter>
    cs_set_correct_filter(&robot.cs.cs_a, pid_do_filter, &robot.cs.pid_a);
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <AVS_Init+0x25c>)
 8002642:	493f      	ldr	r1, [pc, #252]	; (8002740 <AVS_Init+0x250>)
 8002644:	4843      	ldr	r0, [pc, #268]	; (8002754 <AVS_Init+0x264>)
 8002646:	f000 fd67 	bl	8003118 <cs_set_correct_filter>
    cs_set_process_in(&robot.cs.cs_a, rs_set_angle, &robot.cs.rs);
 800264a:	4a35      	ldr	r2, [pc, #212]	; (8002720 <AVS_Init+0x230>)
 800264c:	4942      	ldr	r1, [pc, #264]	; (8002758 <AVS_Init+0x268>)
 800264e:	4841      	ldr	r0, [pc, #260]	; (8002754 <AVS_Init+0x264>)
 8002650:	f000 fd74 	bl	800313c <cs_set_process_in>
    cs_set_process_out(&robot.cs.cs_a, rs_get_angle, &robot.cs.rs);
 8002654:	4a32      	ldr	r2, [pc, #200]	; (8002720 <AVS_Init+0x230>)
 8002656:	4941      	ldr	r1, [pc, #260]	; (800275c <AVS_Init+0x26c>)
 8002658:	483e      	ldr	r0, [pc, #248]	; (8002754 <AVS_Init+0x264>)
 800265a:	f000 fd81 	bl	8003160 <cs_set_process_out>
    cs_set_consign(&robot.cs.cs_a, 0);
 800265e:	2100      	movs	r1, #0
 8002660:	483c      	ldr	r0, [pc, #240]	; (8002754 <AVS_Init+0x264>)
 8002662:	f000 fe0b 	bl	800327c <cs_set_consign>

    /* Trajectory Manager */
    trajectory_init(&robot.cs.traj);
 8002666:	483e      	ldr	r0, [pc, #248]	; (8002760 <AVS_Init+0x270>)
 8002668:	f001 fcf4 	bl	8004054 <trajectory_init>
    trajectory_set_cs(&robot.cs.traj, &robot.cs.cs_d, &robot.cs.cs_a);
 800266c:	4a39      	ldr	r2, [pc, #228]	; (8002754 <AVS_Init+0x264>)
 800266e:	4932      	ldr	r1, [pc, #200]	; (8002738 <AVS_Init+0x248>)
 8002670:	483b      	ldr	r0, [pc, #236]	; (8002760 <AVS_Init+0x270>)
 8002672:	f001 fd03 	bl	800407c <trajectory_set_cs>
    trajectory_set_robot_params(&robot.cs.traj, &robot.cs.rs, &robot.cs.pos);
 8002676:	4a2d      	ldr	r2, [pc, #180]	; (800272c <AVS_Init+0x23c>)
 8002678:	4929      	ldr	r1, [pc, #164]	; (8002720 <AVS_Init+0x230>)
 800267a:	4839      	ldr	r0, [pc, #228]	; (8002760 <AVS_Init+0x270>)
 800267c:	f001 fd10 	bl	80040a0 <trajectory_set_robot_params>
    trajectory_set_speed(&robot.cs.traj, PHYS_TRAJ_D_DEFAULT_SPEED, PHYS_TRAJ_A_DEFAULT_SPEED);
 8002680:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002684:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002688:	4835      	ldr	r0, [pc, #212]	; (8002760 <AVS_Init+0x270>)
 800268a:	f001 fd1b 	bl	80040c4 <trajectory_set_speed>
    trajectory_set_windows(&robot.cs.traj, PHYS_TRAJ_DEFAULT_WIN_D, PHYS_TRAJ_DEFAULT_WIN_A_DEG, PHYS_TRAJ_DEFAULT_WIN_A_START_DEG);
 800268e:	ed9f 2b20 	vldr	d2, [pc, #128]	; 8002710 <AVS_Init+0x220>
 8002692:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002718 <AVS_Init+0x228>
 8002696:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002710 <AVS_Init+0x220>
 800269a:	4831      	ldr	r0, [pc, #196]	; (8002760 <AVS_Init+0x270>)
 800269c:	f001 fd28 	bl	80040f0 <trajectory_set_windows>

    /* Blocking detection */
    bd_init(&robot.cs.bd_l);
 80026a0:	4830      	ldr	r0, [pc, #192]	; (8002764 <AVS_Init+0x274>)
 80026a2:	f000 fc77 	bl	8002f94 <bd_init>
    bd_init(&robot.cs.bd_r);
 80026a6:	4830      	ldr	r0, [pc, #192]	; (8002768 <AVS_Init+0x278>)
 80026a8:	f000 fc74 	bl	8002f94 <bd_init>
    bd_set_current_thresholds(&robot.cs.bd_r, PHYS_BD_K1, PHYS_BD_K2, PHYS_BD_THR, PHYS_BD_CPT);
 80026ac:	2364      	movs	r3, #100	; 0x64
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026b4:	2228      	movs	r2, #40	; 0x28
 80026b6:	2105      	movs	r1, #5
 80026b8:	482b      	ldr	r0, [pc, #172]	; (8002768 <AVS_Init+0x278>)
 80026ba:	f000 fc79 	bl	8002fb0 <bd_set_current_thresholds>
    bd_set_current_thresholds(&robot.cs.bd_l, PHYS_BD_K1, PHYS_BD_K2, PHYS_BD_THR, PHYS_BD_CPT);
 80026be:	2364      	movs	r3, #100	; 0x64
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	2105      	movs	r1, #5
 80026ca:	4826      	ldr	r0, [pc, #152]	; (8002764 <AVS_Init+0x274>)
 80026cc:	f000 fc70 	bl	8002fb0 <bd_set_current_thresholds>
    bd_set_speed_threshold(&robot.cs.bd_l, PHYS_BD_SPD);
 80026d0:	2196      	movs	r1, #150	; 0x96
 80026d2:	4824      	ldr	r0, [pc, #144]	; (8002764 <AVS_Init+0x274>)
 80026d4:	f000 fc88 	bl	8002fe8 <bd_set_speed_threshold>
    bd_set_speed_threshold(&robot.cs.bd_r, PHYS_BD_SPD);
 80026d8:	2196      	movs	r1, #150	; 0x96
 80026da:	4823      	ldr	r0, [pc, #140]	; (8002768 <AVS_Init+0x278>)
 80026dc:	f000 fc84 	bl	8002fe8 <bd_set_speed_threshold>
    //scheduler_add_periodical_event_priority(sample_current, NULL, 25000 / SCHEDULER_UNIT, 200);  /* 25 ms */
    /* STATUS_EVENT */

    /* init struct robot */
    //robot.cs.cs_events = DO_CS | DO_RS | DO_POS | DO_BD | DO_POWER ;
    robot.cs.cs_events =  DO_RS | DO_POS | DO_BD | DO_STATUS;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <AVS_Init+0x27c>)
 80026e2:	224e      	movs	r2, #78	; 0x4e
 80026e4:	701a      	strb	r2, [r3, #0]
        //right_current = 0;
        //left_current = 0;
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	f3af 8000 	nop.w
 80026f0:	00000000 	.word	0x00000000
 80026f4:	3ff00000 	.word	0x3ff00000
 80026f8:	00000000 	.word	0x00000000
 80026fc:	bff00000 	.word	0xbff00000
 8002700:	841bf7e1 	.word	0x841bf7e1
 8002704:	40361927 	.word	0x40361927
 8002708:	00000000 	.word	0x00000000
 800270c:	40693000 	.word	0x40693000
 8002710:	00000000 	.word	0x00000000
 8002714:	403e0000 	.word	0x403e0000
 8002718:	00000000 	.word	0x00000000
 800271c:	40140000 	.word	0x40140000
 8002720:	20014724 	.word	0x20014724
 8002724:	0800add5 	.word	0x0800add5
 8002728:	0800a785 	.word	0x0800a785
 800272c:	20014770 	.word	0x20014770
 8002730:	200148c8 	.word	0x200148c8
 8002734:	200148fc 	.word	0x200148fc
 8002738:	2001488c 	.word	0x2001488c
 800273c:	0800353d 	.word	0x0800353d
 8002740:	08003379 	.word	0x08003379
 8002744:	08003e65 	.word	0x08003e65
 8002748:	08003ee1 	.word	0x08003ee1
 800274c:	2001483c 	.word	0x2001483c
 8002750:	20014870 	.word	0x20014870
 8002754:	20014800 	.word	0x20014800
 8002758:	08003e0d 	.word	0x08003e0d
 800275c:	08003ebd 	.word	0x08003ebd
 8002760:	200147b8 	.word	0x200147b8
 8002764:	20014918 	.word	0x20014918
 8002768:	20014944 	.word	0x20014944
 800276c:	20014720 	.word	0x20014720

08002770 <AVS_CsTask>:
/* Main CS Managment Task
 * TBC: might require a mutex for some variables
 * TODO: handle re-init of the task
 */
void AVS_CsTask(void *pvParameters)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
    static int32_t old_speed_a  = 0;
    static int32_t old_speed_d  = 0;
    TickType_t xNextWakeTime;

    /* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8002778:	f005 ff84 	bl	8008684 <xTaskGetTickCount>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
    ( void ) pvParameters;

    for( ;; )
    {

    	if(robot.cs.cs_events & DO_RS) {
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <AVS_CsTask+0x12c>)
 8002782:	f993 3000 	ldrsb.w	r3, [r3]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d054      	beq.n	800283a <AVS_CsTask+0xca>
    		// Manage Robot System
    		rs_update(&robot.cs.rs);
 8002790:	4843      	ldr	r0, [pc, #268]	; (80028a0 <AVS_CsTask+0x130>)
 8002792:	f001 fbe7 	bl	8003f64 <rs_update>

			robot.cs.speed_a = rs_get_angle(&robot.cs.rs) - old_a;
 8002796:	4842      	ldr	r0, [pc, #264]	; (80028a0 <AVS_CsTask+0x130>)
 8002798:	f001 fb90 	bl	8003ebc <rs_get_angle>
 800279c:	4603      	mov	r3, r0
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <AVS_CsTask+0x134>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <AVS_CsTask+0x12c>)
 80027ae:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			robot.cs.speed_d = rs_get_distance(&robot.cs.rs) - old_d;
 80027b2:	483b      	ldr	r0, [pc, #236]	; (80028a0 <AVS_CsTask+0x130>)
 80027b4:	f001 fb94 	bl	8003ee0 <rs_get_distance>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <AVS_CsTask+0x138>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	4b34      	ldr	r3, [pc, #208]	; (800289c <AVS_CsTask+0x12c>)
 80027ca:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			old_a = rs_get_angle(&robot.cs.rs);
 80027ce:	4834      	ldr	r0, [pc, #208]	; (80028a0 <AVS_CsTask+0x130>)
 80027d0:	f001 fb74 	bl	8003ebc <rs_get_angle>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <AVS_CsTask+0x134>)
 80027d8:	601a      	str	r2, [r3, #0]
			old_d = rs_get_distance(&robot.cs.rs);
 80027da:	4831      	ldr	r0, [pc, #196]	; (80028a0 <AVS_CsTask+0x130>)
 80027dc:	f001 fb80 	bl	8003ee0 <rs_get_distance>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <AVS_CsTask+0x138>)
 80027e4:	601a      	str	r2, [r3, #0]

			robot.cs.acceleration_a = robot.cs.speed_a - old_speed_a;
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <AVS_CsTask+0x12c>)
 80027e8:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <AVS_CsTask+0x13c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <AVS_CsTask+0x12c>)
 80027fe:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
			robot.cs.acceleration_d = robot.cs.speed_d - old_speed_d;
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <AVS_CsTask+0x12c>)
 8002804:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8002808:	b21b      	sxth	r3, r3
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <AVS_CsTask+0x140>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	b29b      	uxth	r3, r3
 8002816:	b21a      	sxth	r2, r3
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <AVS_CsTask+0x12c>)
 800281a:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
			old_speed_a = robot.cs.speed_a;
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <AVS_CsTask+0x12c>)
 8002820:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8002824:	b21b      	sxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <AVS_CsTask+0x13c>)
 800282a:	601a      	str	r2, [r3, #0]
			old_speed_d = robot.cs.speed_d;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <AVS_CsTask+0x12c>)
 800282e:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8002832:	b21b      	sxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <AVS_CsTask+0x140>)
 8002838:	601a      	str	r2, [r3, #0]
    	}

		if (robot.cs.cs_events & DO_POWER)
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <AVS_CsTask+0x12c>)
 800283c:	f993 3000 	ldrsb.w	r3, [r3]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <AVS_CsTask+0xf8>
		{
			// Main CS Management
			vLockDistanceConsign();
 800284a:	f000 f959 	bl	8002b00 <vLockDistanceConsign>
			cs_manage(&robot.cs.cs_d);
 800284e:	4819      	ldr	r0, [pc, #100]	; (80028b4 <AVS_CsTask+0x144>)
 8002850:	f000 fce8 	bl	8003224 <cs_manage>
			vUnlockDistanceConsign();
 8002854:	f000 f99a 	bl	8002b8c <vUnlockDistanceConsign>
			vLockAngleConsign();
 8002858:	f000 f944 	bl	8002ae4 <vLockAngleConsign>
			cs_manage(&robot.cs.cs_a);
 800285c:	4816      	ldr	r0, [pc, #88]	; (80028b8 <AVS_CsTask+0x148>)
 800285e:	f000 fce1 	bl	8003224 <cs_manage>
			vUnlockAngleConsign();
 8002862:	f000 f985 	bl	8002b70 <vUnlockAngleConsign>
 8002866:	e007      	b.n	8002878 <AVS_CsTask+0x108>
		}
		else
		{
			HW_MOT_SetMotorSpeedFastDecay(MOT_CHANNEL_LEFT, 0);
 8002868:	2100      	movs	r1, #0
 800286a:	2000      	movs	r0, #0
 800286c:	f008 fab2 	bl	800add4 <HW_MOT_SetMotorSpeedFastDecay>
			HW_MOT_SetMotorSpeedFastDecay(MOT_CHANNEL_RIGHT,0);
 8002870:	2100      	movs	r1, #0
 8002872:	2001      	movs	r0, #1
 8002874:	f008 faae 	bl	800add4 <HW_MOT_SetMotorSpeedFastDecay>
		}

		if(robot.cs.cs_events & DO_POS)
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <AVS_CsTask+0x12c>)
 800287a:	f993 3000 	ldrsb.w	r3, [r3]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <AVS_CsTask+0x11e>
		{
			position_manage(&robot.cs.pos);
 8002888:	480c      	ldr	r0, [pc, #48]	; (80028bc <AVS_CsTask+0x14c>)
 800288a:	f001 f831 	bl	80038f0 <position_manage>

		/* Blocking-detection manager: TO BE ADDED */
		/* trajectory_hardstop(pRobot.traj);*/

        /* Wakes-up when required */
        vTaskDelayUntil( &xNextWakeTime, AVERSIVE_PERIOD_TICKS);
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	2132      	movs	r1, #50	; 0x32
 8002894:	4618      	mov	r0, r3
 8002896:	f005 fd0f 	bl	80082b8 <vTaskDelayUntil>
    }
 800289a:	e771      	b.n	8002780 <AVS_CsTask+0x10>
 800289c:	20014720 	.word	0x20014720
 80028a0:	20014724 	.word	0x20014724
 80028a4:	2001063c 	.word	0x2001063c
 80028a8:	20010640 	.word	0x20010640
 80028ac:	20010644 	.word	0x20010644
 80028b0:	20010648 	.word	0x20010648
 80028b4:	2001488c 	.word	0x2001488c
 80028b8:	20014800 	.word	0x20014800
 80028bc:	20014770 	.word	0x20014770

080028c0 <Os_MotionTrajectoryNear>:
}

bool Os_MotionTrajectoryNear(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	return (bool)trajectory_in_window(&robot.cs.traj, traj_near_window_d, traj_near_window_a);
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <Os_MotionTrajectoryNear+0x38>)
 80028c6:	ed93 7b00 	vldr	d7, [r3]
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <Os_MotionTrajectoryNear+0x3c>)
 80028cc:	ed93 6b00 	vldr	d6, [r3]
 80028d0:	eeb0 1a46 	vmov.f32	s2, s12
 80028d4:	eef0 1a66 	vmov.f32	s3, s13
 80028d8:	eeb0 0a47 	vmov.f32	s0, s14
 80028dc:	eef0 0a67 	vmov.f32	s1, s15
 80028e0:	4807      	ldr	r0, [pc, #28]	; (8002900 <Os_MotionTrajectoryNear+0x40>)
 80028e2:	f002 f895 	bl	8004a10 <trajectory_in_window>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20010000 	.word	0x20010000
 80028fc:	20010008 	.word	0x20010008
 8002900:	200147b8 	.word	0x200147b8

08002904 <Os_MotionTrajectoryFinished>:

bool Os_MotionTrajectoryFinished(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	return (bool)(trajectory_finished(&robot.cs.traj)&&(robot.cs.traj.scheduler_task==NULL));
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <Os_MotionTrajectoryFinished+0x2c>)
 800290a:	f002 f859 	bl	80049c0 <trajectory_finished>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <Os_MotionTrajectoryFinished+0x1e>
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <Os_MotionTrajectoryFinished+0x30>)
 8002916:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <Os_MotionTrajectoryFinished+0x1e>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <Os_MotionTrajectoryFinished+0x20>
 8002922:	2300      	movs	r3, #0
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200147b8 	.word	0x200147b8
 8002934:	20014720 	.word	0x20014720

08002938 <OS_MotionSetSpeed>:
	traj_near_window_d = (double) window_d;
    traj_near_window_a  = (double) window_a;
}

void OS_MotionSetSpeed(int16_t speed_d, int16_t speed_a)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	460a      	mov	r2, r1
 8002942:	80fb      	strh	r3, [r7, #6]
 8002944:	4613      	mov	r3, r2
 8002946:	80bb      	strh	r3, [r7, #4]
	trajectory_set_speed(&robot.cs.traj, speed_d, speed_a);
 8002948:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800294c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002950:	4619      	mov	r1, r3
 8002952:	4803      	ldr	r0, [pc, #12]	; (8002960 <OS_MotionSetSpeed+0x28>)
 8002954:	f001 fbb6 	bl	80040c4 <trajectory_set_speed>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200147b8 	.word	0x200147b8

08002964 <OS_MotionMoveRelative>:
	robot.cs.cs_events &= ~ DO_POWER;
	robot.cs.cs_events &= ~ DO_CS;
}

void OS_MotionMoveRelative(double d_mm, double a_deg_rel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	ed87 0b02 	vstr	d0, [r7, #8]
 800296e:	ed87 1b00 	vstr	d1, [r7]
	trajectory_d_a_rel(&robot.cs.traj, d_mm, a_deg_rel);
 8002972:	ed97 1b00 	vldr	d1, [r7]
 8002976:	ed97 0b02 	vldr	d0, [r7, #8]
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <OS_MotionMoveRelative+0x24>)
 800297c:	f001 ff98 	bl	80048b0 <trajectory_d_a_rel>
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200147b8 	.word	0x200147b8

0800298c <OS_MotionGoToAuto>:

void OS_MotionGoToAuto(double pos_x, double pos_y)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	ed87 0b02 	vstr	d0, [r7, #8]
 8002996:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_xy_abs(&robot.cs.traj, pos_x, pos_y);
 800299a:	ed97 1b00 	vldr	d1, [r7]
 800299e:	ed97 0b02 	vldr	d0, [r7, #8]
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <OS_MotionGoToAuto+0x24>)
 80029a4:	f001 ffac 	bl	8004900 <trajectory_goto_xy_abs>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200147b8 	.word	0x200147b8

080029b4 <OS_MotionGoToFwd>:

void OS_MotionGoToFwd(double pos_x, double pos_y)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	ed87 0b02 	vstr	d0, [r7, #8]
 80029be:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_forward_xy_abs(&robot.cs.traj, pos_x, pos_y);
 80029c2:	ed97 1b00 	vldr	d1, [r7]
 80029c6:	ed97 0b02 	vldr	d0, [r7, #8]
 80029ca:	4803      	ldr	r0, [pc, #12]	; (80029d8 <OS_MotionGoToFwd+0x24>)
 80029cc:	f001 ffb8 	bl	8004940 <trajectory_goto_forward_xy_abs>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200147b8 	.word	0x200147b8

080029dc <OS_MotionGoToBwd>:

void OS_MotionGoToBwd(double pos_x, double pos_y)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	ed87 0b02 	vstr	d0, [r7, #8]
 80029e6:	ed87 1b00 	vstr	d1, [r7]
	trajectory_goto_backward_xy_abs(&robot.cs.traj, pos_x, pos_y);
 80029ea:	ed97 1b00 	vldr	d1, [r7]
 80029ee:	ed97 0b02 	vldr	d0, [r7, #8]
 80029f2:	4803      	ldr	r0, [pc, #12]	; (8002a00 <OS_MotionGoToBwd+0x24>)
 80029f4:	f001 ffc4 	bl	8004980 <trajectory_goto_backward_xy_abs>
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200147b8 	.word	0x200147b8

08002a04 <OS_MotionTurnToFront>:

void OS_MotionTurnToFront(double pos_x, double pos_y)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a0e:	ed87 1b00 	vstr	d1, [r7]
	trajectory_turnto_xy(&robot.cs.traj, pos_x, pos_y);
 8002a12:	ed97 1b00 	vldr	d1, [r7]
 8002a16:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <OS_MotionTurnToFront+0x24>)
 8002a1c:	f001 fe6c 	bl	80046f8 <trajectory_turnto_xy>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200147b8 	.word	0x200147b8

08002a2c <OS_MotionTurnToBehind>:

void OS_MotionTurnToBehind(double pos_x, double pos_y)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a36:	ed87 1b00 	vstr	d1, [r7]
	trajectory_turnto_xy_behind(&robot.cs.traj, pos_x, pos_y);
 8002a3a:	ed97 1b00 	vldr	d1, [r7]
 8002a3e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a42:	4803      	ldr	r0, [pc, #12]	; (8002a50 <OS_MotionTurnToBehind+0x24>)
 8002a44:	f001 fec0 	bl	80047c8 <trajectory_turnto_xy_behind>
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200147b8 	.word	0x200147b8

08002a54 <vCreateAllMutex>:

void vCreateAllMutex(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	xEncoderAngleMutex = xSemaphoreCreateMutex();
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f004 fd5d 	bl	8007518 <xQueueCreateMutex>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <vCreateAllMutex+0x44>)
 8002a62:	601a      	str	r2, [r3, #0]
	xEncoderDistanceMutex = xSemaphoreCreateMutex();
 8002a64:	2001      	movs	r0, #1
 8002a66:	f004 fd57 	bl	8007518 <xQueueCreateMutex>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <vCreateAllMutex+0x48>)
 8002a6e:	601a      	str	r2, [r3, #0]
	xAngleConsignMutex = xSemaphoreCreateMutex();
 8002a70:	2001      	movs	r0, #1
 8002a72:	f004 fd51 	bl	8007518 <xQueueCreateMutex>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <vCreateAllMutex+0x4c>)
 8002a7a:	601a      	str	r2, [r3, #0]
	xDistanceConsignMutex = xSemaphoreCreateMutex();
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f004 fd4b 	bl	8007518 <xQueueCreateMutex>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <vCreateAllMutex+0x50>)
 8002a86:	601a      	str	r2, [r3, #0]
	xRobotPositionMutex = xSemaphoreCreateMutex();
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f004 fd45 	bl	8007518 <xQueueCreateMutex>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <vCreateAllMutex+0x54>)
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20010610 	.word	0x20010610
 8002a9c:	20010614 	.word	0x20010614
 8002aa0:	20010618 	.word	0x20010618
 8002aa4:	2001061c 	.word	0x2001061c
 8002aa8:	20010620 	.word	0x20010620

08002aac <vLockEncoderAngle>:
void vLockEncoderAngle(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	xSemaphoreTake(xEncoderAngleMutex, portMAX_DELAY);
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <vLockEncoderAngle+0x18>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	2100      	movs	r1, #0
 8002abc:	f004 feda 	bl	8007874 <xQueueGenericReceive>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20010610 	.word	0x20010610

08002ac8 <vLockEncoderDistance>:
void vLockEncoderDistance(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	xSemaphoreTake(xEncoderDistanceMutex, portMAX_DELAY);
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <vLockEncoderDistance+0x18>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f004 fecc 	bl	8007874 <xQueueGenericReceive>
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20010614 	.word	0x20010614

08002ae4 <vLockAngleConsign>:
void vLockAngleConsign(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	xSemaphoreTake(xAngleConsignMutex, portMAX_DELAY);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <vLockAngleConsign+0x18>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295
 8002af2:	2100      	movs	r1, #0
 8002af4:	f004 febe 	bl	8007874 <xQueueGenericReceive>
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20010618 	.word	0x20010618

08002b00 <vLockDistanceConsign>:
void vLockDistanceConsign(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	xSemaphoreTake(xDistanceConsignMutex, portMAX_DELAY);
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <vLockDistanceConsign+0x18>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f004 feb0 	bl	8007874 <xQueueGenericReceive>
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2001061c 	.word	0x2001061c

08002b1c <vLockRobotPosition>:
void vLockRobotPosition(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	xSemaphoreTake(xRobotPositionMutex, portMAX_DELAY);
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <vLockRobotPosition+0x18>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	f004 fea2 	bl	8007874 <xQueueGenericReceive>
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20010620 	.word	0x20010620

08002b38 <vUnlockEncoderAngle>:
void vUnlockEncoderAngle(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	xSemaphoreGive(xEncoderAngleMutex);
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <vUnlockEncoderAngle+0x18>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	f004 fcff 	bl	8007548 <xQueueGenericSend>
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20010610 	.word	0x20010610

08002b54 <vUnlockEncoderDistance>:
void vUnlockEncoderDistance(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	xSemaphoreGive(xEncoderDistanceMutex);
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <vUnlockEncoderDistance+0x18>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	f004 fcf1 	bl	8007548 <xQueueGenericSend>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20010614 	.word	0x20010614

08002b70 <vUnlockAngleConsign>:
void vUnlockAngleConsign(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	xSemaphoreGive(xAngleConsignMutex);
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <vUnlockAngleConsign+0x18>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	f004 fce3 	bl	8007548 <xQueueGenericSend>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20010618 	.word	0x20010618

08002b8c <vUnlockDistanceConsign>:
void vUnlockDistanceConsign(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	xSemaphoreGive(xDistanceConsignMutex);
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <vUnlockDistanceConsign+0x18>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f004 fcd5 	bl	8007548 <xQueueGenericSend>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2001061c 	.word	0x2001061c

08002ba8 <vUnlockRobotPosition>:
void vUnlockRobotPosition(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
	xSemaphoreGive(xRobotPositionMutex);
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <vUnlockRobotPosition+0x18>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	f004 fcc7 	bl	8007548 <xQueueGenericSend>
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20010620 	.word	0x20010620

08002bc4 <motion_is_traj_done>:

void motion_set_wp(wp_t *waypoint) {
	xQueueSend(xWaypointQueue, waypoint, 0);
}

bool motion_is_traj_done(wp_t *waypoint) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	if(waypoint->trajectory_must_finish)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7cdb      	ldrb	r3, [r3, #19]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <motion_is_traj_done+0x18>
		return Os_MotionTrajectoryFinished();
 8002bd4:	f7ff fe96 	bl	8002904 <Os_MotionTrajectoryFinished>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	e002      	b.n	8002be2 <motion_is_traj_done+0x1e>
	else
		return Os_MotionTrajectoryNear();
 8002bdc:	f7ff fe70 	bl	80028c0 <Os_MotionTrajectoryNear>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop

08002bec <motion_send_wp>:
void motion_clear(void){
	wp_t lost;
	while(xQueueReceive(xWaypointQueue, &lost, 0));
}

void motion_send_wp(wp_t *waypoint) {
 8002bec:	b5b0      	push	{r4, r5, r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
    //		phys_apply_offset(&(robot.cs.pos), (waypoint->coord.abs), (waypoint->offset));
    //  }
 // }

    // Pop a waypoint and send the speed and position it
    switch(waypoint->speed) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7c9b      	ldrb	r3, [r3, #18]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d00a      	beq.n	8002c12 <motion_send_wp+0x26>
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d00f      	beq.n	8002c20 <motion_send_wp+0x34>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d113      	bne.n	8002c2c <motion_send_wp+0x40>
    	case WP_SPEED_FAST:
    		OS_MotionSetSpeed(SPEED_FAST_D, SPEED_FAST_A);
 8002c04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c08:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002c0c:	f7ff fe94 	bl	8002938 <OS_MotionSetSpeed>
    		break;
 8002c10:	e011      	b.n	8002c36 <motion_send_wp+0x4a>
    	case WP_SPEED_NORMAL:
    		OS_MotionSetSpeed(SPEED_NORMAL_D, SPEED_NORMAL_A);
 8002c12:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c16:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002c1a:	f7ff fe8d 	bl	8002938 <OS_MotionSetSpeed>
    		break;
 8002c1e:	e00a      	b.n	8002c36 <motion_send_wp+0x4a>
    	case WP_SPEED_SLOW:
    		OS_MotionSetSpeed(SPEED_SLOW_D, SPEED_SLOW_A);
 8002c20:	21c8      	movs	r1, #200	; 0xc8
 8002c22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c26:	f7ff fe87 	bl	8002938 <OS_MotionSetSpeed>
    		break;
 8002c2a:	e004      	b.n	8002c36 <motion_send_wp+0x4a>
    	case WP_SPEED_VERY_SLOW:
    	default: // this is quite an error
    		OS_MotionSetSpeed(SPEED_VERY_SLOW_D, SPEED_VERY_SLOW_A);
 8002c2c:	2164      	movs	r1, #100	; 0x64
 8002c2e:	20c8      	movs	r0, #200	; 0xc8
 8002c30:	f7ff fe82 	bl	8002938 <OS_MotionSetSpeed>
    		break;
 8002c34:	bf00      	nop
    }

    switch(waypoint->type) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	f200 8099 	bhi.w	8002d74 <motion_send_wp+0x188>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <motion_send_wp+0x5c>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c61 	.word	0x08002c61
 8002c4c:	08002c8f 	.word	0x08002c8f
 8002c50:	08002cbd 	.word	0x08002cbd
 8002c54:	08002ceb 	.word	0x08002ceb
 8002c58:	08002d47 	.word	0x08002d47
 8002c5c:	08002d19 	.word	0x08002d19
    	// "GOTO" motion (full-motions)
    	case WP_GOTO_AUTO:
    		OS_MotionGoToAuto(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fc7c 	bl	8000564 <__aeabi_i2d>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460d      	mov	r5, r1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc74 	bl	8000564 <__aeabi_i2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	ec43 2b11 	vmov	d1, r2, r3
 8002c84:	ec45 4b10 	vmov	d0, r4, r5
 8002c88:	f7ff fe80 	bl	800298c <OS_MotionGoToAuto>
    		break;
 8002c8c:	e073      	b.n	8002d76 <motion_send_wp+0x18a>
    	case WP_GOTO_FWD:
    		OS_MotionGoToFwd(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc65 	bl	8000564 <__aeabi_i2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc5d 	bl	8000564 <__aeabi_i2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	ec43 2b11 	vmov	d1, r2, r3
 8002cb2:	ec45 4b10 	vmov	d0, r4, r5
 8002cb6:	f7ff fe7d 	bl	80029b4 <OS_MotionGoToFwd>
    		break;
 8002cba:	e05c      	b.n	8002d76 <motion_send_wp+0x18a>
    	case WP_GOTO_BWD:
    		OS_MotionGoToBwd(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc4e 	bl	8000564 <__aeabi_i2d>
 8002cc8:	4604      	mov	r4, r0
 8002cca:	460d      	mov	r5, r1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc46 	bl	8000564 <__aeabi_i2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	ec43 2b11 	vmov	d1, r2, r3
 8002ce0:	ec45 4b10 	vmov	d0, r4, r5
 8002ce4:	f7ff fe7a 	bl	80029dc <OS_MotionGoToBwd>
    		break;
 8002ce8:	e045      	b.n	8002d76 <motion_send_wp+0x18a>

    	// Relative motion
    	case WP_MOVE_REL:
        // Depending on the sign of the "d", we will go forward or backward
    		OS_MotionMoveRelative(waypoint->coord.rel.d, waypoint->coord.rel.a);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fc37 	bl	8000564 <__aeabi_i2d>
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	460d      	mov	r5, r1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc2f 	bl	8000564 <__aeabi_i2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	ec43 2b11 	vmov	d1, r2, r3
 8002d0e:	ec45 4b10 	vmov	d0, r4, r5
 8002d12:	f7ff fe27 	bl	8002964 <OS_MotionMoveRelative>
    		break;
 8002d16:	e02e      	b.n	8002d76 <motion_send_wp+0x18a>

  		// "ORIENT" motions (pure rotation)
    	case WP_ORIENT_BEHIND:
    		OS_MotionTurnToBehind(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc20 	bl	8000564 <__aeabi_i2d>
 8002d24:	4604      	mov	r4, r0
 8002d26:	460d      	mov	r5, r1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc18 	bl	8000564 <__aeabi_i2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	ec43 2b11 	vmov	d1, r2, r3
 8002d3c:	ec45 4b10 	vmov	d0, r4, r5
 8002d40:	f7ff fe74 	bl	8002a2c <OS_MotionTurnToBehind>
    		break;
 8002d44:	e017      	b.n	8002d76 <motion_send_wp+0x18a>
    	case WP_ORIENT_FRONT:
    		OS_MotionTurnToFront(waypoint->coord.abs.x, waypoint->coord.abs.y);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fc09 	bl	8000564 <__aeabi_i2d>
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc01 	bl	8000564 <__aeabi_i2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	ec43 2b11 	vmov	d1, r2, r3
 8002d6a:	ec45 4b10 	vmov	d0, r4, r5
 8002d6e:	f7ff fe49 	bl	8002a04 <OS_MotionTurnToFront>
    		break;
 8002d72:	e000      	b.n	8002d76 <motion_send_wp+0x18a>

    	default:
    		// error
    		break;
 8002d74:	bf00      	nop
    } // switch
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	bf00      	nop

08002d80 <OS_SHL_Start>:
 * Shell creation
 * -----------------------------------------------------------------------------
 */

void OS_SHL_Start( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af02      	add	r7, sp, #8
    /* Reference to the support function for float printf */
    asm (".global _printf_float");

	/* Create the semaphore used to access the UART Tx. */
	xTxMutex = xSemaphoreCreateMutex();
 8002d86:	2001      	movs	r0, #1
 8002d88:	f004 fbc6 	bl	8007518 <xQueueCreateMutex>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <OS_SHL_Start+0x48>)
 8002d90:	601a      	str	r2, [r3, #0]
	configASSERT( xTxMutex );
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <OS_SHL_Start+0x48>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <OS_SHL_Start+0x22>
 8002d9a:	490c      	ldr	r1, [pc, #48]	; (8002dcc <OS_SHL_Start+0x4c>)
 8002d9c:	202e      	movs	r0, #46	; 0x2e
 8002d9e:	f7ff f87f 	bl	8001ea0 <vAssertCalled>

	/* Register Shell Commands */
	OS_SHL_RegisterCommands();
 8002da2:	f7fe f92d 	bl	8001000 <OS_SHL_RegisterCommands>

	/* Initialize configuration with default settings */
	OS_SHL_Config.echo = true;
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <OS_SHL_Start+0x50>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]

	/* Create that task that handles the console itself. */
	xTaskCreate( 	OS_SHL_Task,				/* The task that implements the command console. */
 8002dac:	2300      	movs	r3, #0
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	2301      	movs	r3, #1
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dba:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <OS_SHL_Start+0x54>)
 8002dbc:	4806      	ldr	r0, [pc, #24]	; (8002dd8 <OS_SHL_Start+0x58>)
 8002dbe:	f005 f8b9 	bl	8007f34 <xTaskCreate>
					"SHELL",	    			/* Text name assigned to the task.  This is just to assist debugging.  The kernel does not use this name itself. */
					500,						/* The size of the stack allocated to the task. */
					NULL,						/* The parameter is not used, so NULL is passed. */
					OS_TASK_PRIORITY_SHELL,		/* The priority allocated to the task. */
					NULL );						/* A handle is not required, so just pass NULL. */
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	2001064c 	.word	0x2001064c
 8002dcc:	08014a2c 	.word	0x08014a2c
 8002dd0:	20014980 	.word	0x20014980
 8002dd4:	08014a4c 	.word	0x08014a4c
 8002dd8:	08002de1 	.word	0x08002de1
 8002ddc:	00000000 	.word	0x00000000

08002de0 <OS_SHL_Task>:
 * Shell Task
 * -----------------------------------------------------------------------------
 */

static void OS_SHL_Task( void *pvParameters )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	char cRxedChar;
	uint8_t ucInputIndex = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	75fb      	strb	r3, [r7, #23]
	( void ) pvParameters;

	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console interface
	will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8002dec:	f006 fed8 	bl	8009ba0 <FreeRTOS_CLIGetOutputBuffer>
 8002df0:	6138      	str	r0, [r7, #16]

	/* Send the welcome message. */
	HW_DBG_Puts(pcWelcomeMessage);
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <OS_SHL_Task+0x118>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f007 fa97 	bl	800a328 <HW_DBG_Puts>

	printf("Test2"SHELL_EOL);
 8002dfa:	4840      	ldr	r0, [pc, #256]	; (8002efc <OS_SHL_Task+0x11c>)
 8002dfc:	f009 f85a 	bl	800beb4 <printf>
	printf("Test3: %f"SHELL_EOL,   5.751);
 8002e00:	a33b      	add	r3, pc, #236	; (adr r3, 8002ef0 <OS_SHL_Task+0x110>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	483e      	ldr	r0, [pc, #248]	; (8002f00 <OS_SHL_Task+0x120>)
 8002e08:	f009 f854 	bl	800beb4 <printf>
	for( ;; )
	{
		/* Wait for the next character.  The while loop is used in case
		INCLUDE_vTaskSuspend is not set to 1 - in which case the RX Timeout will
		be a genuine block time rather than an infinite block time. */
		while( HW_DBG_Get(&cRxedChar) != pdPASS );
 8002e0c:	bf00      	nop
 8002e0e:	f107 030b 	add.w	r3, r7, #11
 8002e12:	4618      	mov	r0, r3
 8002e14:	f007 faa4 	bl	800a360 <HW_DBG_Get>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d1f7      	bne.n	8002e0e <OS_SHL_Task+0x2e>

		/* Ensure exclusive access to the UART Tx. */
		if( xSemaphoreTake( xTxMutex, SHELL_MAX_MUTEX_WAIT ) == pdPASS )
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <OS_SHL_Task+0x124>)
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	2300      	movs	r3, #0
 8002e24:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f004 fd23 	bl	8007874 <xQueueGenericReceive>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d1eb      	bne.n	8002e0c <OS_SHL_Task+0x2c>
		{
			/* Echo the character back. */
			//if(OS_SHL_Config.echo) {
			    HW_DBG_Put(cRxedChar);
 8002e34:	7afb      	ldrb	r3, [r7, #11]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 fa38 	bl	800a2ac <HW_DBG_Put>
			//}

			/* Was it the end of the line? */
			if( cRxedChar == '\n' || cRxedChar == '\r' )
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	2b0a      	cmp	r3, #10
 8002e40:	d002      	beq.n	8002e48 <OS_SHL_Task+0x68>
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	2b0d      	cmp	r3, #13
 8002e46:	d127      	bne.n	8002e98 <OS_SHL_Task+0xb8>
			{
				/* Just to space the output from the input. */
			    //if(OS_SHL_Config.echo) {
			        HW_DBG_Puts(pcNewLine);
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <OS_SHL_Task+0x128>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 fa6c 	bl	800a328 <HW_DBG_Puts>
			    //}

				/* See if the command is empty, indicating that the last command
				is to be executed again. */
				if( ucInputIndex == 0 )
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <OS_SHL_Task+0x7e>
				{
					/* Copy the last command back into the input string. */
					strcpy( cInputString, cLastInputString );
 8002e56:	492d      	ldr	r1, [pc, #180]	; (8002f0c <OS_SHL_Task+0x12c>)
 8002e58:	482d      	ldr	r0, [pc, #180]	; (8002f10 <OS_SHL_Task+0x130>)
 8002e5a:	f009 f91b 	bl	800c094 <strcpy>
				pdFALSE	(indicating there is no more output) as it might
				generate more than one string. */
				do
				{
					/* Get the next output string from the command interpreter. */
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
 8002e5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e62:	6939      	ldr	r1, [r7, #16]
 8002e64:	482a      	ldr	r0, [pc, #168]	; (8002f10 <OS_SHL_Task+0x130>)
 8002e66:	f006 fe15 	bl	8009a94 <FreeRTOS_CLIProcessCommand>
 8002e6a:	60f8      	str	r0, [r7, #12]

					/* Write the generated string to the UART. */
					HW_DBG_Puts(pcOutputString);
 8002e6c:	6938      	ldr	r0, [r7, #16]
 8002e6e:	f007 fa5b 	bl	800a328 <HW_DBG_Puts>

				} while( xReturned != pdFALSE );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f2      	bne.n	8002e5e <OS_SHL_Task+0x7e>

				/* All the strings generated by the input command have been
				sent.  Clear the input string ready to receive the next command.
				Remember the command that was just processed first in case it is
				to be processed again. */
				strcpy( cLastInputString, cInputString );
 8002e78:	4925      	ldr	r1, [pc, #148]	; (8002f10 <OS_SHL_Task+0x130>)
 8002e7a:	4824      	ldr	r0, [pc, #144]	; (8002f0c <OS_SHL_Task+0x12c>)
 8002e7c:	f009 f90a 	bl	800c094 <strcpy>
				ucInputIndex = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]
				memset( cInputString, 0x00, SHELL_MAX_INPUT_SIZE );
 8002e84:	2264      	movs	r2, #100	; 0x64
 8002e86:	2100      	movs	r1, #0
 8002e88:	4821      	ldr	r0, [pc, #132]	; (8002f10 <OS_SHL_Task+0x130>)
 8002e8a:	f009 f808 	bl	800be9e <memset>

				//if(OS_SHL_Config.echo) {
				    HW_DBG_Puts(pcEndOfOutputMessage);
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <OS_SHL_Task+0x134>)
 8002e90:	4618      	mov	r0, r3
 8002e92:	f007 fa49 	bl	800a328 <HW_DBG_Puts>
 8002e96:	e023      	b.n	8002ee0 <OS_SHL_Task+0x100>
				//}
			}
			else
			{
				if( cRxedChar == '\r' )
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	2b0d      	cmp	r3, #13
 8002e9c:	d020      	beq.n	8002ee0 <OS_SHL_Task+0x100>
				{
					/* Ignore the character. */
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d002      	beq.n	8002eaa <OS_SHL_Task+0xca>
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea8:	d10a      	bne.n	8002ec0 <OS_SHL_Task+0xe0>
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <OS_SHL_Task+0x100>
					{
						ucInputIndex--;
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
						cInputString[ ucInputIndex ] = '\0';
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <OS_SHL_Task+0x130>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	54d1      	strb	r1, [r2, r3]
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == SHELL_ASCII_DEL ) )
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 8002ebe:	e00f      	b.n	8002ee0 <OS_SHL_Task+0x100>
				else
				{
					/* A character was entered.  Add it to the string entered so
					far.  When a \n is entered the complete	string will be
					passed to the command interpreter. */
					if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	2b1f      	cmp	r3, #31
 8002ec4:	d90c      	bls.n	8002ee0 <OS_SHL_Task+0x100>
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	2b7e      	cmp	r3, #126	; 0x7e
 8002eca:	d809      	bhi.n	8002ee0 <OS_SHL_Task+0x100>
					{
						if( ucInputIndex < SHELL_MAX_INPUT_SIZE )
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b63      	cmp	r3, #99	; 0x63
 8002ed0:	d806      	bhi.n	8002ee0 <OS_SHL_Task+0x100>
						{
							cInputString[ ucInputIndex ] = cRxedChar;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	7af9      	ldrb	r1, [r7, #11]
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <OS_SHL_Task+0x130>)
 8002ed8:	54d1      	strb	r1, [r2, r3]
							ucInputIndex++;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	3301      	adds	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
					}
				}
			}

			/* Must ensure to give the mutex back. */
			xSemaphoreGive( xTxMutex );
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <OS_SHL_Task+0x124>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f004 fb2d 	bl	8007548 <xQueueGenericSend>
		}
	}
 8002eee:	e78d      	b.n	8002e0c <OS_SHL_Task+0x2c>
 8002ef0:	24dd2f1b 	.word	0x24dd2f1b
 8002ef4:	40170106 	.word	0x40170106
 8002ef8:	080148a4 	.word	0x080148a4
 8002efc:	08014a54 	.word	0x08014a54
 8002f00:	08014a5c 	.word	0x08014a5c
 8002f04:	2001064c 	.word	0x2001064c
 8002f08:	08014a28 	.word	0x08014a28
 8002f0c:	200106b4 	.word	0x200106b4
 8002f10:	20010650 	.word	0x20010650
 8002f14:	08014a20 	.word	0x08014a20

08002f18 <rs_get_polar_from_wheels>:
/**
 * convert the values of wheels encoders (left, right) into (distance,
 * angle)
 */
void rs_get_polar_from_wheels(struct rs_polar *p_dst, struct rs_wheels *w_src)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	p_dst->distance = (w_src->right + w_src->left) / 2;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da00      	bge.n	8002f32 <rs_get_polar_from_wheels+0x1a>
 8002f30:	3301      	adds	r3, #1
 8002f32:	105b      	asrs	r3, r3, #1
 8002f34:	461a      	mov	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
	p_dst->angle    = (w_src->right - w_src->left) / 2;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da00      	bge.n	8002f4a <rs_get_polar_from_wheels+0x32>
 8002f48:	3301      	adds	r3, #1
 8002f4a:	105b      	asrs	r3, r3, #1
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	605a      	str	r2, [r3, #4]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <rs_get_wheels_from_polar>:

/**
 * convert (distance, angle) into (left, right)
 */
void rs_get_wheels_from_polar(struct rs_wheels *w_dst, struct rs_polar *p_src)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	w_dst->left  = p_src->distance - p_src->angle;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	601a      	str	r2, [r3, #0]
	w_dst->right = p_src->distance + p_src->angle;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <bd_init>:

#include <blocking_detection_manager.h>

/** init module, give the robot system to use as a parameter */
void bd_init(struct blocking_detection * bd)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	memset(bd, 0, sizeof(*bd));
 8002f9c:	222c      	movs	r2, #44	; 0x2c
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f008 ff7c 	bl	800be9e <memset>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop

08002fb0 <bd_set_current_thresholds>:

/* thresholds */
void bd_set_current_thresholds(struct blocking_detection * bd, 
			       int32_t k1, int32_t k2, 
			       uint32_t i_thres, uint16_t cpt_thres)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
	bd->k1 = k1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
	bd->k2 = k2;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	60da      	str	r2, [r3, #12]
	bd->i_thres = i_thres;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	605a      	str	r2, [r3, #4]
	bd->cpt_thres = cpt_thres;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8b3a      	ldrh	r2, [r7, #24]
 8002fd4:	821a      	strh	r2, [r3, #16]
	bd->cpt = 0;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	825a      	strh	r2, [r3, #18]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <bd_set_speed_threshold>:

/* speed threshold */
void bd_set_speed_threshold(struct blocking_detection * bd, 
			    uint16_t speed)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
	bd->speed_thres = speed;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	829a      	strh	r2, [r3, #20]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop

08003008 <safe_filter>:
 * - if pointer is null, return the IN value
 * - else apply filter
 */
static inline uint32_t
safe_filter(int32_t (*f)(void *, int32_t), void * param, int32_t value)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	int32_t (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <safe_filter+0x26>
		return f_tmp(param_tmp, value);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6938      	ldr	r0, [r7, #16]
 8003028:	4798      	blx	r3
 800302a:	4603      	mov	r3, r0
 800302c:	e000      	b.n	8003030 <safe_filter+0x28>
	}
	return value;
 800302e:	687b      	ldr	r3, [r7, #4]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <safe_getprocessout>:
 * - if pointer is null, return 0
 * - else return the value processed by the function
 */
static inline uint32_t
safe_getprocessout(int32_t (*f)(void *), void * param)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	int32_t (*f_tmp)(void *);
	void * param_tmp;
	f_tmp = f;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]
	param_tmp = param;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	60bb      	str	r3, [r7, #8]
	if (f_tmp) {
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <safe_getprocessout+0x22>
		return f_tmp(param_tmp);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	4798      	blx	r3
 8003056:	4603      	mov	r3, r0
 8003058:	e000      	b.n	800305c <safe_getprocessout+0x24>
	}
	return 0;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <safe_setprocessin>:
 * - if pointer is null, don't do anything
 * - else call the processin with the parameters
 */
static inline void
safe_setprocessin(void (*f)(void *, int32_t), void * param, int32_t value)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
	void (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <safe_setprocessin+0x22>
		f_tmp(param_tmp, value);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6938      	ldr	r0, [r7, #16]
 8003084:	4798      	blx	r3
	}
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop

08003090 <cs_init>:

/**********************************************/

void cs_init(struct cs* cs)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    cs->consign_filter = NULL;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    cs->consign_filter_params = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]

    cs->correct_filter = NULL;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    cs->correct_filter_params = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]

    cs->feedback_filter = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
    cs->feedback_filter_params = NULL;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]

    cs->process_out = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]
    cs->process_out_params = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	61da      	str	r2, [r3, #28]

    cs->process_in = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
    cs->process_in_params = NULL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

    cs->consign_value = 0;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
    cs->error_value = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	635a      	str	r2, [r3, #52]	; 0x34
    cs->out_value = 0;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38

    return;
 80030e6:	bf00      	nop
}
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <cs_set_consign_filter>:


void cs_set_consign_filter(struct cs* cs, int32_t (*consign_filter)(void*, int32_t), void* consign_filter_params)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
    cs->consign_filter = consign_filter;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	601a      	str	r2, [r3, #0]
    cs->consign_filter_params = consign_filter_params;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <cs_set_correct_filter>:



void cs_set_correct_filter(struct cs* cs, int32_t (*correct_filter)(void*, int32_t), void* correct_filter_params)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
    cs->correct_filter = correct_filter;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	609a      	str	r2, [r3, #8]
    cs->correct_filter_params = correct_filter_params;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <cs_set_process_in>:
    cs->feedback_filter_params = feedback_filter_params;
}


void cs_set_process_in(struct cs* cs, void (*process_in)(void*, int32_t), void* process_in_params)
{        
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
    cs->process_in = process_in;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	621a      	str	r2, [r3, #32]
    cs->process_in_params = process_in_params;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <cs_set_process_out>:



void cs_set_process_out(struct cs* cs, int32_t (*process_out)(void*), void* process_out_params)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
    cs->process_out = process_out;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	619a      	str	r2, [r3, #24]
    cs->process_out_params = process_out_params;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	61da      	str	r2, [r3, #28]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <cs_do_process>:



int32_t cs_do_process(struct cs* cs, int32_t consign)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]

    static int i=0;
    int32_t process_out_value = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]

    /* save the consign value into the structure */
    cs->consign_value = consign;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

    DEBUG("%d %ld ", i++, consign);

    /* if the consign filter exist */
    cs->filtered_consign_value = consign = safe_filter(cs->consign_filter, cs->consign_filter_params, consign);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7ff ff30 	bl	8003008 <safe_filter>
 80031a8:	4603      	mov	r3, r0
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
	
    DEBUG("%ld ", cs->filtered_consign_value);

    /* read the process out if defined */
    process_out_value = safe_getprocessout(cs->process_out, cs->process_out_params);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7ff ff3b 	bl	8003038 <safe_getprocessout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	60fb      	str	r3, [r7, #12]

    DEBUG("%ld ", process_out_value);

    /* apply the feedback filter if defined */
    process_out_value = safe_filter(cs->feedback_filter, cs->feedback_filter_params, process_out_value);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6918      	ldr	r0, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7ff ff19 	bl	8003008 <safe_filter>
 80031d6:	4603      	mov	r3, r0
 80031d8:	60fb      	str	r3, [r7, #12]
    cs->filtered_feedback_value = process_out_value;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

    DEBUG("%ld ", process_out_value);

    /* substract consign and process out and put it into error */
    cs->error_value = cs->filtered_consign_value - process_out_value ;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    DEBUG("%ld ", cs->error_value);

    /* apply the correct filter to error_value and put it into out_value */
    cs->out_value = safe_filter(cs->correct_filter, cs->correct_filter_params, cs->error_value);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6898      	ldr	r0, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	461a      	mov	r2, r3
 80031fa:	f7ff ff05 	bl	8003008 <safe_filter>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
 
    DEBUG("%ld\n", cs->out_value);

    /* send out_value to process in*/
    safe_setprocessin (cs->process_in, cs->process_in_params, cs->out_value);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a18      	ldr	r0, [r3, #32]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	461a      	mov	r2, r3
 8003214:	f7ff ff26 	bl	8003064 <safe_setprocessin>

    /* return the out value */
    return (cs->out_value);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <cs_manage>:



void cs_manage(void * data)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    struct cs* cs = data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60fb      	str	r3, [r7, #12]
    cs_do_process(cs, cs->consign_value);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	4619      	mov	r1, r3
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ffa4 	bl	8003184 <cs_do_process>
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <cs_get_consign>:
}



int32_t cs_get_consign(struct cs* cs)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
    int32_t tmp;
    tmp = cs->consign_value;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	60fb      	str	r3, [r7, #12]

    return tmp;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <cs_get_filtered_consign>:

int32_t cs_get_filtered_consign(struct cs* cs)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    int32_t tmp;
    tmp = cs->filtered_consign_value;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	60fb      	str	r3, [r7, #12]

    return tmp;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <cs_set_consign>:
}



void cs_set_consign(struct cs* cs, int32_t v)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
    /* set the consign */
    cs->consign_value = v;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
}        
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <pid_init>:
#include <pid.h>


/** this function will initialize all fieds of pid structure to 0 */
void pid_init(struct pid_filter *p)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	memset(p, 0, sizeof(*p));
 80032a0:	2234      	movs	r2, #52	; 0x34
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f008 fdfa 	bl	800be9e <memset>
	p->gain_P = 1 ;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	801a      	strh	r2, [r3, #0]
	p->derivate_nb_samples = 1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	71da      	strb	r2, [r3, #7]
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop

080032c0 <pid_set_gains>:
	p->prev_D = 0;
	p->prev_out = 0;
}

void pid_set_gains(struct pid_filter *p, int16_t gp, int16_t gi, int16_t gd)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	817b      	strh	r3, [r7, #10]
 80032d2:	460b      	mov	r3, r1
 80032d4:	813b      	strh	r3, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
	p->gain_P  = gp;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	897a      	ldrh	r2, [r7, #10]
 80032de:	801a      	strh	r2, [r3, #0]
	p->gain_I  = gi;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	893a      	ldrh	r2, [r7, #8]
 80032e4:	805a      	strh	r2, [r3, #2]
	p->gain_D  = gd;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	809a      	strh	r2, [r3, #4]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <pid_set_maximums>:

void pid_set_maximums(struct pid_filter *p, int32_t max_in, int32_t max_I, int32_t max_out)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
	p->max_in  = max_in;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	61da      	str	r2, [r3, #28]
	p->max_I   = max_I;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	621a      	str	r2, [r3, #32]
	p->max_out = max_out;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <pid_set_out_shift>:

void pid_set_out_shift(struct pid_filter *p, uint8_t out_shift)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
	p->out_shift=out_shift;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	719a      	strb	r2, [r3, #6]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <pid_set_derivate_filter>:

int8_t pid_set_derivate_filter(struct pid_filter *p, uint8_t nb_samples)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
	int8_t ret;
	if (nb_samples > PID_DERIVATE_FILTER_MAX_SIZE) {
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d902      	bls.n	800335c <pid_set_derivate_filter+0x18>
		ret = -1;
 8003356:	23ff      	movs	r3, #255	; 0xff
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e004      	b.n	8003366 <pid_set_derivate_filter+0x22>
	}
	else {
		p->derivate_nb_samples = nb_samples;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	71da      	strb	r2, [r3, #7]
		ret = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <pid_do_filter>:
	return ret;
}

/* first parameter should be a (struct pid_filter *) */
int32_t pid_do_filter(void * data, int32_t in)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	int32_t derivate ;
	int32_t command ;
	struct pid_filter * p = data;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]
	*
	* We can apply a filter to reduce noise on the derivate term,
	* by using a bigger period.
	*/
	
	prev_index = p->index + 1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	7a1b      	ldrb	r3, [r3, #8]
 800338a:	3301      	adds	r3, #1
 800338c:	74fb      	strb	r3, [r7, #19]
	if (prev_index >= p->derivate_nb_samples)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	79db      	ldrb	r3, [r3, #7]
 8003392:	7cfa      	ldrb	r2, [r7, #19]
 8003394:	429a      	cmp	r2, r3
 8003396:	d301      	bcc.n	800339c <pid_do_filter+0x24>
		prev_index = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	74fb      	strb	r3, [r7, #19]

	/* saturate input... it influences integral an derivate */
	if (p->max_in)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <pid_do_filter+0x52>
		S_MAX(in, p->max_in) ;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	da03      	bge.n	80033b6 <pid_do_filter+0x3e>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	e009      	b.n	80033ca <pid_do_filter+0x52>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	425a      	negs	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	dd03      	ble.n	80033ca <pid_do_filter+0x52>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	425b      	negs	r3, r3
 80033c8:	603b      	str	r3, [r7, #0]

	derivate = in - p->prev_samples[prev_index];
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	3302      	adds	r3, #2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	60bb      	str	r3, [r7, #8]
	p->integral += in ;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	441a      	add	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

	if (p->max_I)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d016      	beq.n	800341e <pid_do_filter+0xa6>
		S_MAX(p->integral, p->max_I) ;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dd04      	ble.n	8003406 <pid_do_filter+0x8e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
 8003404:	e00b      	b.n	800341e <pid_do_filter+0xa6>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	425b      	negs	r3, r3
 8003410:	429a      	cmp	r2, r3
 8003412:	da04      	bge.n	800341e <pid_do_filter+0xa6>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	425a      	negs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	629a      	str	r2, [r3, #40]	; 0x28

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	fb03 f202 	mul.w	r2, r3, r2
		p->integral * p->gain_I +
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8003436:	fb01 f303 	mul.w	r3, r1, r3

	if (p->max_I)
		S_MAX(p->integral, p->max_I) ;

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 800343a:	441a      	add	r2, r3
		p->integral * p->gain_I +
		(derivate * p->gain_D) / p->derivate_nb_samples ;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003442:	4619      	mov	r1, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	fb03 f301 	mul.w	r3, r3, r1
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	79c9      	ldrb	r1, [r1, #7]
 800344e:	fb93 f3f1 	sdiv	r3, r3, r1

	if (p->max_I)
		S_MAX(p->integral, p->max_I) ;

	/* so, command = P.coef_P + I.coef_I + D.coef_D */
	command = in * p->gain_P + 
 8003452:	4413      	add	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
		p->integral * p->gain_I +
		(derivate * p->gain_D) / p->derivate_nb_samples ;

	if ( command < 0 )
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da07      	bge.n	800346c <pid_do_filter+0xf4>
		command = -( -command >> p->out_shift );
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	425b      	negs	r3, r3
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	7992      	ldrb	r2, [r2, #6]
 8003464:	4113      	asrs	r3, r2
 8003466:	425b      	negs	r3, r3
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e005      	b.n	8003478 <pid_do_filter+0x100>
	else
		command = command >> p->out_shift ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	799b      	ldrb	r3, [r3, #6]
 8003470:	461a      	mov	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4113      	asrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

	if (p->max_out)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <pid_do_filter+0x12e>
		S_MAX (command, p->max_out) ;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	429a      	cmp	r2, r3
 8003488:	da03      	bge.n	8003492 <pid_do_filter+0x11a>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e009      	b.n	80034a6 <pid_do_filter+0x12e>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	425a      	negs	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	429a      	cmp	r2, r3
 800349c:	dd03      	ble.n	80034a6 <pid_do_filter+0x12e>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	425b      	negs	r3, r3
 80034a4:	617b      	str	r3, [r7, #20]


	/* backup of current error value (for the next calcul of derivate value) */
	p->prev_samples[p->index] = in ;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	7a1b      	ldrb	r3, [r3, #8]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	3302      	adds	r3, #2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]
	p->index = prev_index; /* next index is prev_index */
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	7cfa      	ldrb	r2, [r7, #19]
 80034ba:	721a      	strb	r2, [r3, #8]
	p->prev_D = derivate ;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
	p->prev_out = command ;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
	
	return command;
 80034c8:	697b      	ldr	r3, [r7, #20]
} 
 80034ca:	4618      	mov	r0, r3
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop

080034d8 <quadramp_init>:
#include <quadramp.h>

#define NEXT(n, i)  (((n) + (i)/(n)) >> 1)

void quadramp_init(struct quadramp_filter * q)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	memset(q, 0, sizeof(*q));
 80034e0:	221c      	movs	r2, #28
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f008 fcda 	bl	800be9e <memset>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop

080034f4 <quadramp_set_2nd_order_vars>:
}

void quadramp_set_2nd_order_vars(struct quadramp_filter * q, 
				 uint32_t var_2nd_ord_pos, 
				 uint32_t var_2nd_ord_neg)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
	q->var_2nd_ord_pos = var_2nd_ord_pos;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	601a      	str	r2, [r3, #0]
	q->var_2nd_ord_neg = var_2nd_ord_neg;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <quadramp_set_1st_order_vars>:

void quadramp_set_1st_order_vars(struct quadramp_filter * q, 
				 uint32_t var_1st_ord_pos, 
				 uint32_t var_1st_ord_neg)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
	q->var_1st_ord_pos = var_1st_ord_pos;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	609a      	str	r2, [r3, #8]
	q->var_1st_ord_neg = var_1st_ord_neg;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <quadramp_do_filter>:
 * \param data should be a (struct quadramp_filter *) pointer
 * \param in is the input of the filter
 * 
 */
int32_t quadramp_do_filter(void * data, int32_t in)
{
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	b08f      	sub	sp, #60	; 0x3c
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
	struct quadramp_filter * q = data;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	61fb      	str	r3, [r7, #28]
	int32_t d ;
	int32_t pos_target;
	int32_t var_1st_ord_pos = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t var_1st_ord_neg = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t var_2nd_ord_pos = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t var_2nd_ord_neg = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t previous_var, previous_out ;

	if ( q->var_1st_ord_pos )
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <quadramp_do_filter+0x2c>
		var_1st_ord_pos = q->var_1st_ord_pos ;  
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	633b      	str	r3, [r7, #48]	; 0x30

	if ( q->var_1st_ord_neg )
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <quadramp_do_filter+0x3c>
		var_1st_ord_neg = -q->var_1st_ord_neg ;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	425b      	negs	r3, r3
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ( q->var_2nd_ord_pos )
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <quadramp_do_filter+0x4a>
		var_2nd_ord_pos = q->var_2nd_ord_pos ;  
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28

	if ( q->var_2nd_ord_neg )
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <quadramp_do_filter+0x5a>
		var_2nd_ord_neg = -q->var_2nd_ord_neg ;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	425b      	negs	r3, r3
 8003594:	627b      	str	r3, [r7, #36]	; 0x24

	previous_var = q->previous_var;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	623b      	str	r3, [r7, #32]
	previous_out = q->previous_out;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	61bb      	str	r3, [r7, #24]

	d = in - previous_out ;
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	dd3b      	ble.n	8003628 <quadramp_do_filter+0xec>
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d038      	beq.n	8003628 <quadramp_do_filter+0xec>
		int32_t ramp_pos;
		/* var_2nd_ord_neg < 0 */
		/* real EQ : sqrt( var_2nd_ord_neg^2/4 - 2.d.var_2nd_ord_neg ) + var_2nd_ord_neg/2 */
		ramp_pos = sqrt( (var_2nd_ord_neg*var_2nd_ord_neg)/4 - 2*d*var_2nd_ord_neg ) + var_2nd_ord_neg/2;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	da00      	bge.n	80035c4 <quadramp_do_filter+0x88>
 80035c2:	3303      	adds	r3, #3
 80035c4:	109b      	asrs	r3, r3, #2
 80035c6:	4619      	mov	r1, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	1acb      	subs	r3, r1, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffc5 	bl	8000564 <__aeabi_i2d>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	ec44 3b10 	vmov	d0, r3, r4
 80035e2:	f00e fcc7 	bl	8011f74 <sqrt>
 80035e6:	ec56 5b10 	vmov	r5, r6, d0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da00      	bge.n	80035f2 <quadramp_do_filter+0xb6>
 80035f0:	3301      	adds	r3, #1
 80035f2:	105b      	asrs	r3, r3, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffb5 	bl	8000564 <__aeabi_i2d>
 80035fa:	4603      	mov	r3, r0
 80035fc:	460c      	mov	r4, r1
 80035fe:	461a      	mov	r2, r3
 8003600:	4623      	mov	r3, r4
 8003602:	4628      	mov	r0, r5
 8003604:	4631      	mov	r1, r6
 8003606:	f7fc fe61 	bl	80002cc <__adddf3>
 800360a:	4603      	mov	r3, r0
 800360c:	460c      	mov	r4, r1
 800360e:	4618      	mov	r0, r3
 8003610:	4621      	mov	r1, r4
 8003612:	f7fd fabd 	bl	8000b90 <__aeabi_d2iz>
 8003616:	4603      	mov	r3, r0
 8003618:	613b      	str	r3, [r7, #16]

		if(ramp_pos < var_1st_ord_pos)
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	429a      	cmp	r2, r3
 8003620:	da42      	bge.n	80036a8 <quadramp_do_filter+0x16c>
			var_1st_ord_pos = ramp_pos ;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
	previous_out = q->previous_out;

	d = in - previous_out ;

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 8003626:	e03f      	b.n	80036a8 <quadramp_do_filter+0x16c>

		if(ramp_pos < var_1st_ord_pos)
			var_1st_ord_pos = ramp_pos ;
	}

	else if (d < 0 && var_2nd_ord_pos) {
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	da3d      	bge.n	80036aa <quadramp_do_filter+0x16e>
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d03a      	beq.n	80036aa <quadramp_do_filter+0x16e>
		int32_t ramp_neg;
    
		/* var_2nd_ord_pos > 0 */
		/* real EQ : sqrt( var_2nd_ord_pos^2/4 - 2.d.var_2nd_ord_pos ) - var_2nd_ord_pos/2 */
		ramp_neg = -sqrt( (var_2nd_ord_pos*var_2nd_ord_pos)/4 - 2*d*var_2nd_ord_pos ) - var_2nd_ord_pos/2;
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	da00      	bge.n	8003642 <quadramp_do_filter+0x106>
 8003640:	3303      	adds	r3, #3
 8003642:	109b      	asrs	r3, r3, #2
 8003644:	4619      	mov	r1, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	1acb      	subs	r3, r1, r3
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff86 	bl	8000564 <__aeabi_i2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	ec43 2b10 	vmov	d0, r2, r3
 8003660:	f00e fc88 	bl	8011f74 <sqrt>
 8003664:	ec53 2b10 	vmov	r2, r3, d0
 8003668:	4614      	mov	r4, r2
 800366a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	da00      	bge.n	8003676 <quadramp_do_filter+0x13a>
 8003674:	3301      	adds	r3, #1
 8003676:	105b      	asrs	r3, r3, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff73 	bl	8000564 <__aeabi_i2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4620      	mov	r0, r4
 8003684:	4629      	mov	r1, r5
 8003686:	f7fc fe1f 	bl	80002c8 <__aeabi_dsub>
 800368a:	4603      	mov	r3, r0
 800368c:	460c      	mov	r4, r1
 800368e:	4618      	mov	r0, r3
 8003690:	4621      	mov	r1, r4
 8003692:	f7fd fa7d 	bl	8000b90 <__aeabi_d2iz>
 8003696:	4603      	mov	r3, r0
 8003698:	60fb      	str	r3, [r7, #12]
	
		/* ramp_neg < 0 */
		if(ramp_neg > var_1st_ord_neg)
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	429a      	cmp	r2, r3
 80036a0:	dd03      	ble.n	80036aa <quadramp_do_filter+0x16e>
			var_1st_ord_neg = ramp_neg ;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a6:	e000      	b.n	80036aa <quadramp_do_filter+0x16e>
	previous_out = q->previous_out;

	d = in - previous_out ;

	/* Deceleration ramp */
	if ( d > 0 && var_2nd_ord_neg) {
 80036a8:	bf00      	nop
			var_1st_ord_neg = ramp_neg ;
	}
    
	/* try to set the speed : can we reach the speed with our acceleration ? */
	/* si on va moins vite que la Vmax */
	if ( previous_var < var_1st_ord_pos )  {
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	429a      	cmp	r2, r3
 80036b0:	da0d      	bge.n	80036ce <quadramp_do_filter+0x192>
		/* acceleration would be to high, we reduce the speed */
		/* si rampe acceleration active ET qu'on ne peut pas atteindre Vmax,
		 * on sature Vmax a Vcourante + acceleration */
		if (var_2nd_ord_pos && ( var_1st_ord_pos - previous_var > var_2nd_ord_pos) )
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01b      	beq.n	80036f0 <quadramp_do_filter+0x1b4>
 80036b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dd15      	ble.n	80036f0 <quadramp_do_filter+0x1b4>
			var_1st_ord_pos = previous_var + var_2nd_ord_pos ;
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	4413      	add	r3, r2
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	e010      	b.n	80036f0 <quadramp_do_filter+0x1b4>
	}
	/* si on va plus vite que Vmax */
	else if ( previous_var > var_1st_ord_pos )  { 
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	429a      	cmp	r2, r3
 80036d4:	dd0c      	ble.n	80036f0 <quadramp_do_filter+0x1b4>
		/* deceleration would be to high, we increase the speed */
		/* si rampe deceleration active ET qu'on ne peut pas atteindre Vmax,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_neg && ( var_1st_ord_pos - previous_var < var_2nd_ord_neg) )
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <quadramp_do_filter+0x1b4>
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	1ad2      	subs	r2, r2, r3
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	429a      	cmp	r2, r3
 80036e6:	da03      	bge.n	80036f0 <quadramp_do_filter+0x1b4>
			var_1st_ord_pos = previous_var + var_2nd_ord_neg;
 80036e8:	6a3a      	ldr	r2, [r7, #32]
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	4413      	add	r3, r2
 80036ee:	633b      	str	r3, [r7, #48]	; 0x30
	}
  
	/* same for the neg */
	/* si on va plus vite que la Vmin (en negatif : en vrai la vitesse absolue est inferieure) */
	if ( previous_var > var_1st_ord_neg )  {
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dd0d      	ble.n	8003714 <quadramp_do_filter+0x1d8>
		/* acceleration would be to high, we reduce the speed */
		/* si rampe deceleration active ET qu'on ne peut pas atteindre Vmin,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_neg && ( var_1st_ord_neg - previous_var < var_2nd_ord_neg) )
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01b      	beq.n	8003736 <quadramp_do_filter+0x1fa>
 80036fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	1ad2      	subs	r2, r2, r3
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	429a      	cmp	r2, r3
 8003708:	da15      	bge.n	8003736 <quadramp_do_filter+0x1fa>
			var_1st_ord_neg = previous_var + var_2nd_ord_neg ;
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	4413      	add	r3, r2
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003712:	e010      	b.n	8003736 <quadramp_do_filter+0x1fa>
	}
	/* si on va moins vite que Vmin (mais vitesse absolue superieure) */
	else if ( previous_var < var_1st_ord_neg )  {
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	429a      	cmp	r2, r3
 800371a:	da0c      	bge.n	8003736 <quadramp_do_filter+0x1fa>
		/* deceleration would be to high, we increase the speed */
		/* si rampe acceleration active ET qu'on ne peut pas atteindre Vmin,
		 * on sature Vmax a Vcourante + deceleration */
		if (var_2nd_ord_pos && (var_1st_ord_neg - previous_var > var_2nd_ord_pos) )
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <quadramp_do_filter+0x1fa>
 8003722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	1ad2      	subs	r2, r2, r3
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	429a      	cmp	r2, r3
 800372c:	dd03      	ble.n	8003736 <quadramp_do_filter+0x1fa>
			var_1st_ord_neg = previous_var + var_2nd_ord_pos;
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	4413      	add	r3, r2
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/*
	 * Position consign : can we reach the position with our speed ?
	 */
	if ( /* var_1st_ord_pos &&  */d > var_1st_ord_pos ) {
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	429a      	cmp	r2, r3
 800373c:	dd06      	ble.n	800374c <quadramp_do_filter+0x210>
		pos_target = previous_out + var_1st_ord_pos ;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	4413      	add	r3, r2
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = var_1st_ord_pos ;
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	e010      	b.n	800376e <quadramp_do_filter+0x232>
	}
	else if ( /* var_1st_ord_neg &&  */d < var_1st_ord_neg ) {
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	429a      	cmp	r2, r3
 8003752:	da06      	bge.n	8003762 <quadramp_do_filter+0x226>
		pos_target = previous_out + var_1st_ord_neg ;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	4413      	add	r3, r2
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = var_1st_ord_neg ;
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	e005      	b.n	800376e <quadramp_do_filter+0x232>
	}
	else {
		pos_target = previous_out + d ;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4413      	add	r3, r2
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
		previous_var = d ;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	623b      	str	r3, [r7, #32]
	}

	// update previous_out and previous_var
	q->previous_var = previous_var;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	611a      	str	r2, [r3, #16]
	q->previous_out = pos_target;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003778:	615a      	str	r2, [r3, #20]
	q->previous_in = in;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	619a      	str	r2, [r3, #24]

	return pos_target ;
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003782:	4618      	mov	r0, r3
 8003784:	373c      	adds	r7, #60	; 0x3c
 8003786:	46bd      	mov	sp, r7
 8003788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378a:	bf00      	nop

0800378c <vect2_cart2pol>:
   return;
}

/* Convert a cartesian vector to a polar one */
void vect2_cart2pol(vect2_cart* vc, vect2_pol* vp)
{
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
   if(vc == NULL) return;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d04b      	beq.n	8003834 <vect2_cart2pol+0xa8>
   if(vp == NULL) return;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04a      	beq.n	8003838 <vect2_cart2pol+0xac>
   
   vp->r = (Real)( sqrt((vc->x)*(vc->x)+(vc->y)*(vc->y)) );
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	cb18      	ldmia	r3, {r3, r4}
 80037ac:	461a      	mov	r2, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	f7fc ff3e 	bl	8000630 <__aeabi_dmul>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	461d      	mov	r5, r3
 80037ba:	4626      	mov	r6, r4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4623      	mov	r3, r4
 80037cc:	f7fc ff30 	bl	8000630 <__aeabi_dmul>
 80037d0:	4603      	mov	r3, r0
 80037d2:	460c      	mov	r4, r1
 80037d4:	461a      	mov	r2, r3
 80037d6:	4623      	mov	r3, r4
 80037d8:	4628      	mov	r0, r5
 80037da:	4631      	mov	r1, r6
 80037dc:	f7fc fd76 	bl	80002cc <__adddf3>
 80037e0:	4603      	mov	r3, r0
 80037e2:	460c      	mov	r4, r1
 80037e4:	ec44 3b17 	vmov	d7, r3, r4
 80037e8:	eeb0 0a47 	vmov.f32	s0, s14
 80037ec:	eef0 0a67 	vmov.f32	s1, s15
 80037f0:	f00e fbc0 	bl	8011f74 <sqrt>
 80037f4:	eeb0 7a40 	vmov.f32	s14, s0
 80037f8:	eef0 7a60 	vmov.f32	s15, s1
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	ed83 7b00 	vstr	d7, [r3]
   vp->theta = (Real)atan2(vc->y,vc->x);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	ed93 7b02 	vldr	d7, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	ed93 6b00 	vldr	d6, [r3]
 800380e:	eeb0 1a46 	vmov.f32	s2, s12
 8003812:	eef0 1a66 	vmov.f32	s3, s13
 8003816:	eeb0 0a47 	vmov.f32	s0, s14
 800381a:	eef0 0a67 	vmov.f32	s1, s15
 800381e:	f00e fba7 	bl	8011f70 <atan2>
 8003822:	eeb0 7a40 	vmov.f32	s14, s0
 8003826:	eef0 7a60 	vmov.f32	s15, s1
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	ed83 7b02 	vstr	d7, [r3, #8]
   
   return;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <vect2_cart2pol+0xae>
}

/* Convert a cartesian vector to a polar one */
void vect2_cart2pol(vect2_cart* vc, vect2_pol* vp)
{
   if(vc == NULL) return;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <vect2_cart2pol+0xae>
   if(vp == NULL) return;
 8003838:	bf00      	nop
   
   vp->r = (Real)( sqrt((vc->x)*(vc->x)+(vc->y)*(vc->y)) );
   vp->theta = (Real)atan2(vc->y,vc->x);
   
   return;
}
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003840 <position_init>:
#include <position_manager.h>
#include "blueboard.h"

/** initialization of the robot_position pos, everthing is set to 0 */
void position_init(struct robot_position *pos)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	memset(pos, 0, sizeof(struct robot_position));
 8003848:	2248      	movs	r2, #72	; 0x48
 800384a:	2100      	movs	r1, #0
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f008 fb26 	bl	800be9e <memset>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <position_set_related_robot_system>:
 * Save in pos structure the pointer to the associated robot_system. 
 * The robot_system structure is used to get values from virtual encoders
 * that return angle and distance.
 */
void position_set_related_robot_system(struct robot_position *pos, struct robot_system *rs)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
	pos->rs = rs;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <position_set_physical_params>:
 *  - number of impulsions for 1 mm (distance)
 *  - number of impulsions for 1 degree (angle)
 */
void position_set_physical_params(struct robot_position *pos, double track_mm,
				  double distance_imp_per_mm)
{
 8003878:	b490      	push	{r4, r7}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6178      	str	r0, [r7, #20]
 8003880:	ed87 0b02 	vstr	d0, [r7, #8]
 8003884:	ed87 1b00 	vstr	d1, [r7]
	pos->phys.track_mm = track_mm;
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800388e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pos->phys.distance_imp_per_mm = distance_imp_per_mm;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003898:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800389c:	bf00      	nop
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc90      	pop	{r4, r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop

080038a8 <position_use_ext>:

void position_use_ext(struct robot_position *pos)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	struct rs_polar encoders;
	encoders.distance = rs_get_ext_distance(pos->rs);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fb35 	bl	8003f24 <rs_get_ext_distance>
 80038ba:	4603      	mov	r3, r0
 80038bc:	60bb      	str	r3, [r7, #8]
	encoders.angle = rs_get_ext_angle(pos->rs);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb1e 	bl	8003f04 <rs_get_ext_angle>
 80038c8:	4603      	mov	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]
	pos->prev_encoders = encoders;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3338      	adds	r3, #56	; 0x38
 80038d0:	f107 0208 	add.w	r2, r7, #8
 80038d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038d8:	e883 0003 	stmia.w	r3, {r0, r1}
	pos->use_ext = 1;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	0000      	movs	r0, r0
	...

080038f0 <position_manage>:
 * Process the absolute position (x,y,a) depending on the delta on
 * virtual encoders since last read, and depending on physical
 * parameters. The processed position is in mm.
 */
void position_manage(struct robot_position *pos)
{
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f2:	b099      	sub	sp, #100	; 0x64
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	double dx, dy;
	s16 x_s16, y_s16, a_s16;
	struct rs_polar encoders;
	struct rs_polar delta;
	struct robot_system * rs;
	rs = pos->rs;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44

	/* here we could raise an error */
	if (rs == NULL)
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8193 	beq.w	8003c2c <position_manage+0x33c>
	else {
		encoders.distance = rs_get_mot_distance(rs);
		encoders.angle = rs_get_mot_angle(rs);
	}
#else
	encoders.distance = rs_get_ext_distance(rs);
 8003906:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003908:	f000 fb0c 	bl	8003f24 <rs_get_ext_distance>
 800390c:	4603      	mov	r3, r0
 800390e:	613b      	str	r3, [r7, #16]
	encoders.angle = rs_get_ext_angle(rs);
 8003910:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003912:	f000 faf7 	bl	8003f04 <rs_get_ext_angle>
 8003916:	4603      	mov	r3, r0
 8003918:	617b      	str	r3, [r7, #20]
#endif

	/* process difference between 2 measures.
	 * No lock for prev_encoders since we are the only one to use
	 * this var XXX that's wrong now, perhaps we should lock */
	delta.distance = encoders.distance - pos->prev_encoders.distance;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	60bb      	str	r3, [r7, #8]
	delta.angle = encoders.angle - pos->prev_encoders.angle;
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	60fb      	str	r3, [r7, #12]

	pos->prev_encoders = encoders;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3338      	adds	r3, #56	; 0x38
 8003932:	f107 0210 	add.w	r2, r7, #16
 8003936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800393a:	e883 0003 	stmia.w	r3, {r0, r1}

	/* update double position */
	a = position_get_a_rad_double(pos);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9ba 	bl	8003cb8 <position_get_a_rad_double>
 8003944:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	x = position_get_x_double(pos);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f985 	bl	8003c58 <position_get_x_double>
 800394e:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
	y = position_get_y_double(pos);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f998 	bl	8003c88 <position_get_y_double>
 8003958:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

	if (delta.angle == 0) {
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d14e      	bne.n	8003a00 <position_manage+0x110>
		/* we go straight */
		dx = cos(a) * ((double) delta.distance / (pos->phys.distance_imp_per_mm)) ;
 8003962:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003966:	f00e fa77 	bl	8011e58 <cos>
 800396a:	ec56 5b10 	vmov	r5, r6, d0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fdf7 	bl	8000564 <__aeabi_i2d>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	f7fc ff80 	bl	8000884 <__aeabi_ddiv>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	461a      	mov	r2, r3
 800398a:	4623      	mov	r3, r4
 800398c:	4628      	mov	r0, r5
 800398e:	4631      	mov	r1, r6
 8003990:	f7fc fe4e 	bl	8000630 <__aeabi_dmul>
 8003994:	4603      	mov	r3, r0
 8003996:	460c      	mov	r4, r1
 8003998:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		dy = sin(a) * ((double) delta.distance / (pos->phys.distance_imp_per_mm)) ;
 800399c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80039a0:	f00e fa9e 	bl	8011ee0 <sin>
 80039a4:	ec56 5b10 	vmov	r5, r6, d0
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc fdda 	bl	8000564 <__aeabi_i2d>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	f7fc ff63 	bl	8000884 <__aeabi_ddiv>
 80039be:	4603      	mov	r3, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	461a      	mov	r2, r3
 80039c4:	4623      	mov	r3, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	4631      	mov	r1, r6
 80039ca:	f7fc fe31 	bl	8000630 <__aeabi_dmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x += dx;
 80039d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039de:	f7fc fc75 	bl	80002cc <__adddf3>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		y += dy;
 80039ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80039f2:	f7fc fc6b 	bl	80002cc <__adddf3>
 80039f6:	4603      	mov	r3, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80039fe:	e0dd      	b.n	8003bbc <position_manage+0x2cc>
	}
	else {
		/* r the radius of the circle arc */
		r = (double)delta.distance * pos->phys.track_mm / ((double) delta.angle * 2);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fdae 	bl	8000564 <__aeabi_i2d>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4623      	mov	r3, r4
 8003a12:	f7fc fe0d 	bl	8000630 <__aeabi_dmul>
 8003a16:	4603      	mov	r3, r0
 8003a18:	460c      	mov	r4, r1
 8003a1a:	4625      	mov	r5, r4
 8003a1c:	461c      	mov	r4, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fd9f 	bl	8000564 <__aeabi_i2d>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	f7fc fc4f 	bl	80002cc <__adddf3>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4620      	mov	r0, r4
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7fc ff25 	bl	8000884 <__aeabi_ddiv>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		arc_angle = 2 * (double) delta.angle / (pos->phys.track_mm * pos->phys.distance_imp_per_mm);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fc fd8d 	bl	8000564 <__aeabi_i2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	f7fc fc3d 	bl	80002cc <__adddf3>
 8003a52:	4603      	mov	r3, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	461d      	mov	r5, r3
 8003a58:	4626      	mov	r6, r4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003a66:	461a      	mov	r2, r3
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f7fc fde1 	bl	8000630 <__aeabi_dmul>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	460c      	mov	r4, r1
 8003a72:	461a      	mov	r2, r3
 8003a74:	4623      	mov	r3, r4
 8003a76:	4628      	mov	r0, r5
 8003a78:	4631      	mov	r1, r6
 8003a7a:	f7fc ff03 	bl	8000884 <__aeabi_ddiv>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	460c      	mov	r4, r1
 8003a82:	e9c7 3408 	strd	r3, r4, [r7, #32]
		
		dx = r * (-sin(a) + sin(a+arc_angle));
 8003a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a8e:	f7fc fc1d 	bl	80002cc <__adddf3>
 8003a92:	4603      	mov	r3, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	ec44 3b17 	vmov	d7, r3, r4
 8003a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a9e:	eef0 0a67 	vmov.f32	s1, s15
 8003aa2:	f00e fa1d 	bl	8011ee0 <sin>
 8003aa6:	ec55 4b10 	vmov	r4, r5, d0
 8003aaa:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003aae:	f00e fa17 	bl	8011ee0 <sin>
 8003ab2:	ec53 2b10 	vmov	r2, r3, d0
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7fc fc05 	bl	80002c8 <__aeabi_dsub>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aca:	f7fc fdb1 	bl	8000630 <__aeabi_dmul>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		dy = r * (cos(a) - cos(a+arc_angle));
 8003ad6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003ada:	f00e f9bd 	bl	8011e58 <cos>
 8003ade:	ec56 5b10 	vmov	r5, r6, d0
 8003ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ae6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003aea:	f7fc fbef 	bl	80002cc <__adddf3>
 8003aee:	4603      	mov	r3, r0
 8003af0:	460c      	mov	r4, r1
 8003af2:	ec44 3b17 	vmov	d7, r3, r4
 8003af6:	eeb0 0a47 	vmov.f32	s0, s14
 8003afa:	eef0 0a67 	vmov.f32	s1, s15
 8003afe:	f00e f9ab 	bl	8011e58 <cos>
 8003b02:	ec54 3b10 	vmov	r3, r4, d0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4623      	mov	r3, r4
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	f7fc fbdb 	bl	80002c8 <__aeabi_dsub>
 8003b12:	4603      	mov	r3, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	4618      	mov	r0, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b1e:	f7fc fd87 	bl	8000630 <__aeabi_dmul>
 8003b22:	4603      	mov	r3, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		x += dx;
 8003b2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b32:	f7fc fbcb 	bl	80002cc <__adddf3>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		y += dy;
 8003b3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b46:	f7fc fbc1 	bl	80002cc <__adddf3>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		a += arc_angle;
 8003b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b5a:	f7fc fbb7 	bl	80002cc <__adddf3>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

		if (a < -M_PI)
 8003b66:	a334      	add	r3, pc, #208	; (adr r3, 8003c38 <position_manage+0x348>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b70:	f7fc ffd0 	bl	8000b14 <__aeabi_dcmplt>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <position_manage+0x2a2>
			a += (M_PI*2);
 8003b7a:	a331      	add	r3, pc, #196	; (adr r3, 8003c40 <position_manage+0x350>)
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b84:	f7fc fba2 	bl	80002cc <__adddf3>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8003b90:	e014      	b.n	8003bbc <position_manage+0x2cc>
		else if (a > (M_PI))
 8003b92:	a32d      	add	r3, pc, #180	; (adr r3, 8003c48 <position_manage+0x358>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b9c:	f7fc ffd8 	bl	8000b50 <__aeabi_dcmpgt>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <position_manage+0x2cc>
			a -= (M_PI*2);
 8003ba6:	a326      	add	r3, pc, #152	; (adr r3, 8003c40 <position_manage+0x350>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bb0:	f7fc fb8a 	bl	80002c8 <__aeabi_dsub>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
#endif
	}

	/* update int position */
	x_s16 = (int16_t)x;
 8003bbc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bc0:	f7fc ffe6 	bl	8000b90 <__aeabi_d2iz>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	83fb      	strh	r3, [r7, #30]
	y_s16 = (int16_t)y;
 8003bc8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bcc:	f7fc ffe0 	bl	8000b90 <__aeabi_d2iz>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	83bb      	strh	r3, [r7, #28]
	a_s16 = (int16_t)(a * (360.0/(M_PI*2)));
 8003bd4:	a31e      	add	r3, pc, #120	; (adr r3, 8003c50 <position_manage+0x360>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bde:	f7fc fd27 	bl	8000630 <__aeabi_dmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	460c      	mov	r4, r1
 8003be6:	4618      	mov	r0, r3
 8003be8:	4621      	mov	r1, r4
 8003bea:	f7fc ffd1 	bl	8000b90 <__aeabi_d2iz>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	837b      	strh	r3, [r7, #26]

	vLockRobotPosition();
 8003bf2:	f7fe ff93 	bl	8002b1c <vLockRobotPosition>
	pos->pos_d.a = a;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003bfc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pos->pos_d.x = x;
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003c06:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pos->pos_d.y = y;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003c10:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pos->pos_s16.x = x_s16;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8bfa      	ldrh	r2, [r7, #30]
 8003c18:	861a      	strh	r2, [r3, #48]	; 0x30
	pos->pos_s16.y = y_s16;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8bba      	ldrh	r2, [r7, #28]
 8003c1e:	865a      	strh	r2, [r3, #50]	; 0x32
	pos->pos_s16.a = a_s16;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8b7a      	ldrh	r2, [r7, #26]
 8003c24:	869a      	strh	r2, [r3, #52]	; 0x34
	vUnlockRobotPosition();
 8003c26:	f7fe ffbf 	bl	8002ba8 <vUnlockRobotPosition>
 8003c2a:	e000      	b.n	8003c2e <position_manage+0x33e>
	struct robot_system * rs;
	rs = pos->rs;

	/* here we could raise an error */
	if (rs == NULL)
		return;
 8003c2c:	bf00      	nop
	pos->pos_d.y = y;
	pos->pos_s16.x = x_s16;
	pos->pos_s16.y = y_s16;
	pos->pos_s16.a = a_s16;
	vUnlockRobotPosition();
}
 8003c2e:	3764      	adds	r7, #100	; 0x64
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c34:	f3af 8000 	nop.w
 8003c38:	54442d18 	.word	0x54442d18
 8003c3c:	c00921fb 	.word	0xc00921fb
 8003c40:	54442d18 	.word	0x54442d18
 8003c44:	401921fb 	.word	0x401921fb
 8003c48:	54442d18 	.word	0x54442d18
 8003c4c:	400921fb 	.word	0x400921fb
 8003c50:	1a63c1f8 	.word	0x1a63c1f8
 8003c54:	404ca5dc 	.word	0x404ca5dc

08003c58 <position_get_x_double>:

/**
 * returns current x
 */
double position_get_x_double(struct robot_position *pos)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	double x;
	vLockRobotPosition();
 8003c60:	f7fe ff5c 	bl	8002b1c <vLockRobotPosition>
	x = pos->pos_d.x;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003c6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 8003c6e:	f7fe ff9b 	bl	8002ba8 <vUnlockRobotPosition>
	return x;
 8003c72:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c76:	ec44 3b17 	vmov	d7, r3, r4
}
 8003c7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c7e:	eef0 0a67 	vmov.f32	s1, s15
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd90      	pop	{r4, r7, pc}

08003c88 <position_get_y_double>:

/**
 * returns current y
 */
double position_get_y_double(struct robot_position *pos)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	double y;
	vLockRobotPosition();
 8003c90:	f7fe ff44 	bl	8002b1c <vLockRobotPosition>
	y = pos->pos_d.y;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003c9a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 8003c9e:	f7fe ff83 	bl	8002ba8 <vUnlockRobotPosition>
	return y;
 8003ca2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ca6:	ec44 3b17 	vmov	d7, r3, r4
}
 8003caa:	eeb0 0a47 	vmov.f32	s0, s14
 8003cae:	eef0 0a67 	vmov.f32	s1, s15
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}

08003cb8 <position_get_a_rad_double>:

/**
 * returns current alpha
 */
double position_get_a_rad_double(struct robot_position *pos)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	double a;
	vLockRobotPosition();
 8003cc0:	f7fe ff2c 	bl	8002b1c <vLockRobotPosition>
	a = pos->pos_d.a;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003cca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	vUnlockRobotPosition();
 8003cce:	f7fe ff6b 	bl	8002ba8 <vUnlockRobotPosition>
	return a;
 8003cd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003cd6:	ec44 3b17 	vmov	d7, r3, r4
}
 8003cda:	eeb0 0a47 	vmov.f32	s0, s14
 8003cde:	eef0 0a67 	vmov.f32	s1, s15
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}

08003ce8 <safe_setpwm>:
 * - if pointer is null, don't do anything
 * - else call the pwm with the parameters
 */
static inline void
safe_setpwm(void (*f)(void *, int32_t), void * param, int32_t value)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	void (*f_tmp)(void *, int32_t);
	void * param_tmp;
	f_tmp = f;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	617b      	str	r3, [r7, #20]
	param_tmp = param;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	613b      	str	r3, [r7, #16]
	if (f_tmp) {
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <safe_setpwm+0x22>
		f_tmp(param_tmp, value);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6938      	ldr	r0, [r7, #16]
 8003d08:	4798      	blx	r3
	}
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop

08003d14 <safe_getencoder>:
 * - if pointer is null, return 0
 * - else return the value processed by the function
 */
static inline uint32_t
safe_getencoder(int32_t (*f)(void *), void * param)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
	int32_t (*f_tmp)(void *);
	void * param_tmp;
	f_tmp = f;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60fb      	str	r3, [r7, #12]
	param_tmp = param;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	60bb      	str	r3, [r7, #8]
	if (f_tmp) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <safe_getencoder+0x22>
		return f_tmp(param_tmp);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68b8      	ldr	r0, [r7, #8]
 8003d30:	4798      	blx	r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	e000      	b.n	8003d38 <safe_getencoder+0x24>
	}
	return 0;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <rs_init>:

/** Set the structure to 0 */
void rs_init( struct robot_system * rs)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	memset(rs, 0, sizeof(struct robot_system));
 8003d48:	224c      	movs	r2, #76	; 0x4c
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f008 f8a6 	bl	800be9e <memset>
#ifdef CONFIG_MODULE_ROBOT_SYSTEM_MOT_AND_EXT
	rs_set_ratio(rs, 1.0);
#endif
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop

08003d5c <rs_set_left_pwm>:
}
#endif

/** define left PWM function and param */
void rs_set_left_pwm(struct robot_system * rs, void (*left_pwm)(void *, int32_t), void *left_pwm_param)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
	rs->left_pwm = left_pwm;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c
	rs->left_pwm_param = left_pwm_param;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <rs_set_right_pwm>:

/** define right PWM function and param */
void rs_set_right_pwm(struct robot_system * rs, void (*right_pwm)(void *, int32_t), void *right_pwm_param)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
	rs->right_pwm = right_pwm;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
	rs->right_pwm_param = right_pwm_param;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <rs_set_left_ext_encoder>:
#endif

/** define left external encoder function and param */
void rs_set_left_ext_encoder(struct robot_system * rs, int32_t (*left_ext_encoder)(void *), 
			     void *left_ext_encoder_param, double gain)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6178      	str	r0, [r7, #20]
 8003dac:	6139      	str	r1, [r7, #16]
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	ed87 0b00 	vstr	d0, [r7]
	rs->left_ext_encoder = left_ext_encoder;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
	rs->left_ext_encoder_param = left_ext_encoder_param;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
	rs->left_ext_gain = gain;
 8003dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dc4:	f7fc ff2c 	bl	8000c20 <__aeabi_d2f>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop

08003dd8 <rs_set_right_ext_encoder>:

/** define right external encoder function and param */
void rs_set_right_ext_encoder(struct robot_system * rs, int32_t (*right_ext_encoder)(void *), 
			      void *right_ext_encoder_param, double gain)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6178      	str	r0, [r7, #20]
 8003de0:	6139      	str	r1, [r7, #16]
 8003de2:	60fa      	str	r2, [r7, #12]
 8003de4:	ed87 0b00 	vstr	d0, [r7]
	rs->right_ext_encoder = right_ext_encoder;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
	rs->right_ext_encoder_param = right_ext_encoder_param;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34
	rs->right_ext_gain = gain;
 8003df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003df8:	f7fc ff12 	bl	8000c20 <__aeabi_d2f>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop

08003e0c <rs_set_angle>:
/** 
 * set the real pwms according to the specified angle (it also
 * depends on the last distance command sent) 
 */
void rs_set_angle(void * data, int32_t angle)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
	struct rs_polar p;
	struct rs_wheels w;
	struct robot_system * rs = data;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	61fb      	str	r3, [r7, #28]

	p.distance = rs->virtual_pwm.distance ;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	617b      	str	r3, [r7, #20]
	rs->virtual_pwm.angle = angle;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]

	p.angle = angle;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	61bb      	str	r3, [r7, #24]
	rs_get_wheels_from_polar(&w, &p);
 8003e2a:	f107 0214 	add.w	r2, r7, #20
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff f893 	bl	8002f60 <rs_get_wheels_from_polar>
	
	safe_setpwm(rs->left_pwm, rs->left_pwm_param, w.left);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7ff ff4f 	bl	8003ce8 <safe_setpwm>
	safe_setpwm(rs->right_pwm, rs->right_pwm_param, w.right);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4619      	mov	r1, r3
 8003e56:	f7ff ff47 	bl	8003ce8 <safe_setpwm>
}
 8003e5a:	bf00      	nop
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop

08003e64 <rs_set_distance>:
/** 
 * set the real pwms according to the specified distance (it also
 * depends on the last angle command sent) 
 */
void rs_set_distance(void * data, int32_t distance)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	struct robot_system * rs = data;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	61fb      	str	r3, [r7, #28]
	struct rs_polar p;
	struct rs_wheels w;

	p.angle = rs->virtual_pwm.angle ;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
	rs->virtual_pwm.distance = distance;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]

	p.distance = distance;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	617b      	str	r3, [r7, #20]
	rs_get_wheels_from_polar(&w, &p);
 8003e82:	f107 0214 	add.w	r2, r7, #20
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff f867 	bl	8002f60 <rs_get_wheels_from_polar>
	
	safe_setpwm(rs->left_pwm, rs->left_pwm_param, w.left);
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7ff ff23 	bl	8003ce8 <safe_setpwm>
	safe_setpwm(rs->right_pwm, rs->right_pwm_param, w.right);
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7ff ff1b 	bl	8003ce8 <safe_setpwm>
}
 8003eb2:	bf00      	nop
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop

08003ebc <rs_get_angle>:

/** 
 * get the virtual angle according to real encoders value. 
 */
int32_t rs_get_angle(void * data)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]
	int32_t angle;
	
	vLockEncoderAngle();
 8003ec8:	f7fe fdf0 	bl	8002aac <vLockEncoderAngle>
	angle = rs->virtual_encoders.angle ;	
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	60bb      	str	r3, [r7, #8]
	vUnlockEncoderAngle();
 8003ed2:	f7fe fe31 	bl	8002b38 <vUnlockEncoderAngle>
	return angle;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <rs_get_distance>:

/** 
 * get the virtual distance according to real encoders value. 
 */
int32_t rs_get_distance(void * data)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60fb      	str	r3, [r7, #12]
	int32_t distance;
	
	vLockEncoderDistance();
 8003eec:	f7fe fdec 	bl	8002ac8 <vLockEncoderDistance>
	distance = rs->virtual_encoders.distance ;	
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	60bb      	str	r3, [r7, #8]
	vUnlockEncoderDistance();
 8003ef6:	f7fe fe2d 	bl	8002b54 <vUnlockEncoderDistance>
	return distance;
 8003efa:	68bb      	ldr	r3, [r7, #8]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <rs_get_ext_angle>:

int32_t rs_get_ext_angle(void * data)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]
	int32_t angle;
	
	angle = rs->pext_prev.angle ;	
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	60bb      	str	r3, [r7, #8]
	return angle;
 8003f16:	68bb      	ldr	r3, [r7, #8]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <rs_get_ext_distance>:

int32_t rs_get_ext_distance(void * data)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]
	int32_t distance;
	
	distance = rs->pext_prev.distance ;	
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	60bb      	str	r3, [r7, #8]
	return distance;
 8003f36:	68bb      	ldr	r3, [r7, #8]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <rs_set_flags>:
	return right;
}
#endif

void rs_set_flags(struct robot_system * rs, uint8_t flags)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
	rs->flags = flags;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	701a      	strb	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop

08003f64 <rs_update>:
 * function is needed before reading the virtual encoders.The program
 * will decide if it the external encoders or the motor encoders are
 * taken in account (depending on flags, but not yet)
 */
void rs_update(void * data)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	struct robot_system * rs = data;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
	struct rs_polar pmot;
#endif
	int32_t delta_angle, delta_distance;
	
	/* read encoders */
	wext.left = safe_getencoder(rs->left_ext_encoder, rs->left_ext_encoder_param);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7ff feca 	bl	8003d14 <safe_getencoder>
 8003f80:	4603      	mov	r3, r0
 8003f82:	617b      	str	r3, [r7, #20]
	wext.right = safe_getencoder(rs->right_ext_encoder, rs->right_ext_encoder_param);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f7ff fec0 	bl	8003d14 <safe_getencoder>
 8003f94:	4603      	mov	r3, r0
 8003f96:	61bb      	str	r3, [r7, #24]
	wmot.left = safe_getencoder(rs->left_mot_encoder, rs->left_mot_encoder_param);
	wmot.right = safe_getencoder(rs->right_mot_encoder, rs->right_mot_encoder_param);
#endif
	
	/* apply gains to each wheel */
	if (! (rs->flags & RS_IGNORE_EXT_GAIN )) {
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d11d      	bne.n	8003fe0 <rs_update+0x7c>
		wext.left = (int32_t)(wext.left*rs->left_ext_gain);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fbc:	ee17 3a90 	vmov	r3, s15
 8003fc0:	617b      	str	r3, [r7, #20]
		wext.right = (int32_t)(wext.right* rs->right_ext_gain);
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fda:	ee17 3a90 	vmov	r3, s15
 8003fde:	61bb      	str	r3, [r7, #24]
		wmot.left = f64_msb_mul(f64_from_lsb(wmot.left), rs->left_mot_gain);
		wmot.right = f64_msb_mul(f64_from_lsb(wmot.right), rs->right_mot_gain);
	}
#endif

	rs_get_polar_from_wheels(&pext, &wext);
 8003fe0:	f107 0214 	add.w	r2, r7, #20
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe ff94 	bl	8002f18 <rs_get_polar_from_wheels>
	else {
		delta_angle = pmot.angle - rs->pmot_prev.angle;
		delta_distance = pmot.distance - rs->pmot_prev.distance;
	}
#else
	delta_angle = pext.angle - rs->pext_prev.angle;
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	623b      	str	r3, [r7, #32]
	delta_distance = pext.distance - rs->pext_prev.distance;
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	61fb      	str	r3, [r7, #28]
#endif

	vLockEncoderAngle();
 8004004:	f7fe fd52 	bl	8002aac <vLockEncoderAngle>
	vLockEncoderDistance();
 8004008:	f7fe fd5e 	bl	8002ac8 <vLockEncoderDistance>
	rs->virtual_encoders.angle += delta_angle;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	441a      	add	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	611a      	str	r2, [r3, #16]
	rs->virtual_encoders.distance += delta_distance;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	441a      	add	r2, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	60da      	str	r2, [r3, #12]
	vUnlockEncoderAngle();
 8004024:	f7fe fd88 	bl	8002b38 <vUnlockEncoderAngle>
	vUnlockEncoderDistance();
 8004028:	f7fe fd94 	bl	8002b54 <vUnlockEncoderDistance>

	/* don't lock too much time */
	rs->pext_prev = pext;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	3314      	adds	r3, #20
 8004030:	f107 020c 	add.w	r2, r7, #12
 8004034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004038:	e883 0003 	stmia.w	r3, {r0, r1}
	rs->wext_prev = wext;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	331c      	adds	r3, #28
 8004040:	f107 0214 	add.w	r2, r7, #20
 8004044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004048:	e883 0003 	stmia.w	r3, {r0, r1}

#ifdef CONFIG_MODULE_ROBOT_SYSTEM_MOT_AND_EXT
	rs->pmot_prev = pmot;
	rs->wmot_prev = wmot;
#endif
}
 800404c:	bf00      	nop
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <trajectory_init>:

/************ INIT FUNCS */

/** structure initialization */
void trajectory_init(struct trajectory *traj)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	memset(traj, 0, sizeof(struct trajectory));
 800405c:	2248      	movs	r2, #72	; 0x48
 800405e:	2100      	movs	r1, #0
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f007 ff1c 	bl	800be9e <memset>
	traj->state = READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
	traj->scheduler_task = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop

0800407c <trajectory_set_cs>:

/** structure initialization */
void trajectory_set_cs(struct trajectory *traj, struct cs *cs_d, 
		       struct cs *cs_a)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
	traj->csm_distance = cs_d;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
	traj->csm_angle = cs_a;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <trajectory_set_robot_params>:

/** structure initialization */
void trajectory_set_robot_params(struct trajectory *traj, 
				 struct robot_system *rs, 
				 struct robot_position *pos) 
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	traj->robot = rs;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
	traj->position = pos;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <trajectory_set_speed>:

/** set speed consign */
void trajectory_set_speed( struct trajectory *traj, int16_t d_speed, int16_t a_speed)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	803b      	strh	r3, [r7, #0]
	traj->d_speed = d_speed;
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	861a      	strh	r2, [r3, #48]	; 0x30
	traj->a_speed = a_speed;
 80040da:	883a      	ldrh	r2, [r7, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	0000      	movs	r0, r0
	...

080040f0 <trajectory_set_windows>:

/** set windows for trajectory */
void trajectory_set_windows(struct trajectory *traj, double d_win,
			    double a_win_deg, double a_start_deg)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	61f8      	str	r0, [r7, #28]
 80040f8:	ed87 0b04 	vstr	d0, [r7, #16]
 80040fc:	ed87 1b02 	vstr	d1, [r7, #8]
 8004100:	ed87 2b00 	vstr	d2, [r7]
	traj->d_win = d_win ;
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800410a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	traj->a_win_rad = RAD(a_win_deg);
 800410e:	a30e      	add	r3, pc, #56	; (adr r3, 8004148 <trajectory_set_windows+0x58>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004118:	f7fc fa8a 	bl	8000630 <__aeabi_dmul>
 800411c:	4603      	mov	r3, r0
 800411e:	460c      	mov	r4, r1
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	e9c2 3408 	strd	r3, r4, [r2, #32]
	traj->a_start_rad = RAD(a_start_deg);
 8004126:	a308      	add	r3, pc, #32	; (adr r3, 8004148 <trajectory_set_windows+0x58>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004130:	f7fc fa7e 	bl	8000630 <__aeabi_dmul>
 8004134:	4603      	mov	r3, r0
 8004136:	460c      	mov	r4, r1
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

}
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	; 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd90      	pop	{r4, r7, pc}
 8004146:	bf00      	nop
 8004148:	a2529d39 	.word	0xa2529d39
 800414c:	3f91df46 	.word	0x3f91df46

08004150 <set_quadramp_speed>:

/************ STATIC [ AND USEFUL ] FUNCS */

/** set speed consign in quadramp filter */
static void set_quadramp_speed(struct trajectory *traj, int16_t d_speed, int16_t a_speed)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
 800415c:	4613      	mov	r3, r2
 800415e:	803b      	strh	r3, [r7, #0]
	struct quadramp_filter * q_d, * q_a;
	q_d = traj->csm_distance->consign_filter_params;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]
	q_a = traj->csm_angle->consign_filter_params;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	60bb      	str	r3, [r7, #8]
	quadramp_set_1st_order_vars(q_d, ABS(d_speed), ABS(d_speed));
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	82fb      	strh	r3, [r7, #22]
 8004174:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da03      	bge.n	8004184 <set_quadramp_speed+0x34>
 800417c:	8afb      	ldrh	r3, [r7, #22]
 800417e:	425b      	negs	r3, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	82fb      	strh	r3, [r7, #22]
 8004184:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004188:	4619      	mov	r1, r3
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	82bb      	strh	r3, [r7, #20]
 800418e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	da03      	bge.n	800419e <set_quadramp_speed+0x4e>
 8004196:	8abb      	ldrh	r3, [r7, #20]
 8004198:	425b      	negs	r3, r3
 800419a:	b29b      	uxth	r3, r3
 800419c:	82bb      	strh	r3, [r7, #20]
 800419e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff f9b7 	bl	8003518 <quadramp_set_1st_order_vars>
	quadramp_set_1st_order_vars(q_a, ABS(a_speed), ABS(a_speed));
 80041aa:	883b      	ldrh	r3, [r7, #0]
 80041ac:	827b      	strh	r3, [r7, #18]
 80041ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da03      	bge.n	80041be <set_quadramp_speed+0x6e>
 80041b6:	8a7b      	ldrh	r3, [r7, #18]
 80041b8:	425b      	negs	r3, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	827b      	strh	r3, [r7, #18]
 80041be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041c2:	4619      	mov	r1, r3
 80041c4:	883b      	ldrh	r3, [r7, #0]
 80041c6:	823b      	strh	r3, [r7, #16]
 80041c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da03      	bge.n	80041d8 <set_quadramp_speed+0x88>
 80041d0:	8a3b      	ldrh	r3, [r7, #16]
 80041d2:	425b      	negs	r3, r3
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	823b      	strh	r3, [r7, #16]
 80041d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041dc:	461a      	mov	r2, r3
 80041de:	68b8      	ldr	r0, [r7, #8]
 80041e0:	f7ff f99a 	bl	8003518 <quadramp_set_1st_order_vars>
}
 80041e4:	bf00      	nop
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <get_quadramp_distance_speed>:
	return q_a->var_1st_ord_pos;
}

/** get distance speed consign in quadramp filter */
static uint32_t get_quadramp_distance_speed(struct trajectory *traj)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	struct quadramp_filter *q_d;
	q_d = traj->csm_distance->consign_filter_params;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]
	return q_d->var_1st_ord_pos;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <delete_event>:

/** remove event if any */
static void delete_event(struct trajectory *traj)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	set_quadramp_speed(traj, traj->d_speed, traj->a_speed);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004218:	b219      	sxth	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421e:	b21b      	sxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff94 	bl	8004150 <set_quadramp_speed>
	if ( traj->scheduler_task != NULL) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <delete_event+0x34>
		vTaskDelete(traj->scheduler_task);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	4618      	mov	r0, r3
 8004236:	f003 ffb3 	bl	80081a0 <vTaskDelete>
		traj->scheduler_task=NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <schedule_event>:

/** schedule the trajectory event */
static void schedule_event(struct trajectory *traj)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
	if ( traj->scheduler_task != NULL) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <schedule_event+0x26>
		DEBUG(E_TRAJECTORY, "Schedule event, already scheduled");
	}
	else {
			xTaskCreate(trajectory_manager_event, "TRAJECTORY", configMINIMAL_STACK_SIZE, traj, OS_TASK_PRIORITY_TRAJ, &traj->scheduler_task );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3344      	adds	r3, #68	; 0x44
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	2303      	movs	r3, #3
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2282      	movs	r2, #130	; 0x82
 8004266:	4904      	ldr	r1, [pc, #16]	; (8004278 <schedule_event+0x30>)
 8004268:	4804      	ldr	r0, [pc, #16]	; (800427c <schedule_event+0x34>)
 800426a:	f003 fe63 	bl	8007f34 <xTaskCreate>
	}
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	08014a68 	.word	0x08014a68
 800427c:	08004ac1 	.word	0x08004ac1

08004280 <simple_modulo_2pi>:

/** do a modulo 2.pi -> [-Pi,+Pi], knowing that 'a' is in [-3Pi,+3Pi] */  
static double simple_modulo_2pi(double a)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	ed87 0b00 	vstr	d0, [r7]
	if (a < -M_PI) {
 800428a:	a31b      	add	r3, pc, #108	; (adr r3, 80042f8 <simple_modulo_2pi+0x78>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004294:	f7fc fc3e 	bl	8000b14 <__aeabi_dcmplt>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <simple_modulo_2pi+0x36>
		a += M_2PI;
 800429e:	a318      	add	r3, pc, #96	; (adr r3, 8004300 <simple_modulo_2pi+0x80>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042a8:	f7fc f810 	bl	80002cc <__adddf3>
 80042ac:	4603      	mov	r3, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	e887 0018 	stmia.w	r7, {r3, r4}
 80042b4:	e014      	b.n	80042e0 <simple_modulo_2pi+0x60>
	}
	else if (a > M_PI) {
 80042b6:	a314      	add	r3, pc, #80	; (adr r3, 8004308 <simple_modulo_2pi+0x88>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042c0:	f7fc fc46 	bl	8000b50 <__aeabi_dcmpgt>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <simple_modulo_2pi+0x60>
		a -= M_2PI;
 80042ca:	a30d      	add	r3, pc, #52	; (adr r3, 8004300 <simple_modulo_2pi+0x80>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042d4:	f7fb fff8 	bl	80002c8 <__aeabi_dsub>
 80042d8:	4603      	mov	r3, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	e887 0018 	stmia.w	r7, {r3, r4}
	}
	return a;
 80042e0:	e897 0018 	ldmia.w	r7, {r3, r4}
 80042e4:	ec44 3b17 	vmov	d7, r3, r4
}
 80042e8:	eeb0 0a47 	vmov.f32	s0, s14
 80042ec:	eef0 0a67 	vmov.f32	s1, s15
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd90      	pop	{r4, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	54442d18 	.word	0x54442d18
 80042fc:	c00921fb 	.word	0xc00921fb
 8004300:	54442d18 	.word	0x54442d18
 8004304:	401921fb 	.word	0x401921fb
 8004308:	54442d18 	.word	0x54442d18
 800430c:	400921fb 	.word	0x400921fb

08004310 <modulo_2pi>:

/** do a modulo 2.pi -> [-Pi,+Pi] */  
static double modulo_2pi(double a)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	ed87 0b00 	vstr	d0, [r7]
        double res = a - (((int32_t) (a/M_2PI)) * M_2PI);
 800431a:	a319      	add	r3, pc, #100	; (adr r3, 8004380 <modulo_2pi+0x70>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004324:	f7fc faae 	bl	8000884 <__aeabi_ddiv>
 8004328:	4603      	mov	r3, r0
 800432a:	460c      	mov	r4, r1
 800432c:	4618      	mov	r0, r3
 800432e:	4621      	mov	r1, r4
 8004330:	f7fc fc2e 	bl	8000b90 <__aeabi_d2iz>
 8004334:	4603      	mov	r3, r0
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f914 	bl	8000564 <__aeabi_i2d>
 800433c:	a310      	add	r3, pc, #64	; (adr r3, 8004380 <modulo_2pi+0x70>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f975 	bl	8000630 <__aeabi_dmul>
 8004346:	4603      	mov	r3, r0
 8004348:	460c      	mov	r4, r1
 800434a:	461a      	mov	r2, r3
 800434c:	4623      	mov	r3, r4
 800434e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004352:	f7fb ffb9 	bl	80002c8 <__aeabi_dsub>
 8004356:	4603      	mov	r3, r0
 8004358:	460c      	mov	r4, r1
 800435a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return simple_modulo_2pi(res);
 800435e:	ed97 0b02 	vldr	d0, [r7, #8]
 8004362:	f7ff ff8d 	bl	8004280 <simple_modulo_2pi>
 8004366:	eeb0 7a40 	vmov.f32	s14, s0
 800436a:	eef0 7a60 	vmov.f32	s15, s1
}
 800436e:	eeb0 0a47 	vmov.f32	s0, s14
 8004372:	eef0 0a67 	vmov.f32	s1, s15
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}
 800437c:	f3af 8000 	nop.w
 8004380:	54442d18 	.word	0x54442d18
 8004384:	401921fb 	.word	0x401921fb

08004388 <is_robot_in_dist_window>:
}


/** near the target (dist) ? */
static uint8_t is_robot_in_dist_window(struct trajectory *traj, double d_win)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b089      	sub	sp, #36	; 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	ed87 0b00 	vstr	d0, [r7]
	double d = traj->target.pol.distance - rs_get_distance(traj->robot);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689c      	ldr	r4, [r3, #8]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fd9f 	bl	8003ee0 <rs_get_distance>
 80043a2:	4603      	mov	r3, r0
 80043a4:	1ae3      	subs	r3, r4, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f8dc 	bl	8000564 <__aeabi_i2d>
 80043ac:	4603      	mov	r3, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = ABS(d);
 80043b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80043b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043c8:	f7fc fba4 	bl	8000b14 <__aeabi_dcmplt>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <is_robot_in_dist_window+0x56>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80043e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = d / traj->position->phys.distance_imp_per_mm;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043f6:	f7fc fa45 	bl	8000884 <__aeabi_ddiv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	460c      	mov	r4, r1
 80043fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return (d < d_win);
 8004402:	2301      	movs	r3, #1
 8004404:	461c      	mov	r4, r3
 8004406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800440e:	f7fc fb81 	bl	8000b14 <__aeabi_dcmplt>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <is_robot_in_dist_window+0x94>
 8004418:	2300      	movs	r3, #0
 800441a:	461c      	mov	r4, r3
 800441c:	b2e3      	uxtb	r3, r4
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	bf00      	nop

08004428 <is_robot_in_xy_window>:

/** near the target (dist in x,y) ? */
static uint8_t is_robot_in_xy_window(struct trajectory *traj, double d_win)
{
 8004428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800442c:	b08c      	sub	sp, #48	; 0x30
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	ed87 0b00 	vstr	d0, [r7]
	double x1 = traj->target.cart.x;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800443c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double y1 = traj->target.cart.y;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004446:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double x2 = position_get_x_double(traj->position);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fc02 	bl	8003c58 <position_get_x_double>
 8004454:	ed87 0b06 	vstr	d0, [r7, #24]
	double y2 = position_get_y_double(traj->position);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fc13 	bl	8003c88 <position_get_y_double>
 8004462:	ed87 0b04 	vstr	d0, [r7, #16]
	return ( sqrt ((x2-x1) * (x2-x1) + (y2-y1) * (y2-y1)) < d_win );
 8004466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800446a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800446e:	f7fb ff2b 	bl	80002c8 <__aeabi_dsub>
 8004472:	4603      	mov	r3, r0
 8004474:	460c      	mov	r4, r1
 8004476:	4625      	mov	r5, r4
 8004478:	461c      	mov	r4, r3
 800447a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800447e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004482:	f7fb ff21 	bl	80002c8 <__aeabi_dsub>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4620      	mov	r0, r4
 800448c:	4629      	mov	r1, r5
 800448e:	f7fc f8cf 	bl	8000630 <__aeabi_dmul>
 8004492:	4603      	mov	r3, r0
 8004494:	460c      	mov	r4, r1
 8004496:	4625      	mov	r5, r4
 8004498:	461c      	mov	r4, r3
 800449a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800449e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044a2:	f7fb ff11 	bl	80002c8 <__aeabi_dsub>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4690      	mov	r8, r2
 80044ac:	4699      	mov	r9, r3
 80044ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044b6:	f7fb ff07 	bl	80002c8 <__aeabi_dsub>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4640      	mov	r0, r8
 80044c0:	4649      	mov	r1, r9
 80044c2:	f7fc f8b5 	bl	8000630 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fb fefd 	bl	80002cc <__adddf3>
 80044d2:	4603      	mov	r3, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	ec44 3b17 	vmov	d7, r3, r4
 80044da:	eeb0 0a47 	vmov.f32	s0, s14
 80044de:	eef0 0a67 	vmov.f32	s1, s15
 80044e2:	f00d fd47 	bl	8011f74 <sqrt>
 80044e6:	ec51 0b10 	vmov	r0, r1, d0
 80044ea:	2301      	movs	r3, #1
 80044ec:	461c      	mov	r4, r3
 80044ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f2:	f7fc fb0f 	bl	8000b14 <__aeabi_dcmplt>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <is_robot_in_xy_window+0xd8>
 80044fc:	2300      	movs	r3, #0
 80044fe:	461c      	mov	r4, r3
 8004500:	b2e3      	uxtb	r3, r4
}
 8004502:	4618      	mov	r0, r3
 8004504:	3730      	adds	r7, #48	; 0x30
 8004506:	46bd      	mov	sp, r7
 8004508:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800450c <is_robot_in_angle_window>:

/** near the angle target in radian ? Only valid if
 *  traj->target.pol.angle is set (i.e. an angle command, not an xy
 *  command) */
static uint8_t is_robot_in_angle_window(struct trajectory *traj, double a_win_rad)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b089      	sub	sp, #36	; 0x24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	ed87 0b00 	vstr	d0, [r7]
	double a;
	
	/* convert relative angle from imp to rad */
	a = traj->target.pol.angle - rs_get_angle(traj->robot);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68dc      	ldr	r4, [r3, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fccb 	bl	8003ebc <rs_get_angle>
 8004526:	4603      	mov	r3, r0
 8004528:	1ae3      	subs	r3, r4, r3
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f81a 	bl	8000564 <__aeabi_i2d>
 8004530:	4603      	mov	r3, r0
 8004532:	460c      	mov	r4, r1
 8004534:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a /= traj->position->phys.distance_imp_per_mm;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004540:	461a      	mov	r2, r3
 8004542:	4623      	mov	r3, r4
 8004544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004548:	f7fc f99c 	bl	8000884 <__aeabi_ddiv>
 800454c:	4603      	mov	r3, r0
 800454e:	460c      	mov	r4, r1
 8004550:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a /= traj->position->phys.track_mm;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800455c:	461a      	mov	r2, r3
 800455e:	4623      	mov	r3, r4
 8004560:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004564:	f7fc f98e 	bl	8000884 <__aeabi_ddiv>
 8004568:	4603      	mov	r3, r0
 800456a:	460c      	mov	r4, r1
 800456c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	a *= 2.;
 8004570:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	f7fb fea8 	bl	80002cc <__adddf3>
 800457c:	4603      	mov	r3, r0
 800457e:	460c      	mov	r4, r1
 8004580:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return ABS(a) < a_win_rad;
 8004584:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004588:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004598:	f7fc fabc 	bl	8000b14 <__aeabi_dcmplt>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <is_robot_in_angle_window+0xa2>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045b2:	2301      	movs	r3, #1
 80045b4:	461c      	mov	r4, r3
 80045b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ba:	f7fc faab 	bl	8000b14 <__aeabi_dcmplt>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <is_robot_in_angle_window+0xbc>
 80045c4:	2300      	movs	r3, #0
 80045c6:	461c      	mov	r4, r3
 80045c8:	b2e3      	uxtb	r3, r4
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd90      	pop	{r4, r7, pc}
 80045d2:	bf00      	nop

080045d4 <__trajectory_goto_d_a_rel>:
 *   a_rad : angle in radian
 *   flags : what to update (UPDATE_A, UPDATE_D)
 */
void __trajectory_goto_d_a_rel(struct trajectory *traj, double d_mm, 
			       double a_rad, uint8_t state, uint8_t flags)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6178      	str	r0, [r7, #20]
 80045dc:	ed87 0b02 	vstr	d0, [r7, #8]
 80045e0:	ed87 1b00 	vstr	d1, [r7]
 80045e4:	460b      	mov	r3, r1
 80045e6:	74fb      	strb	r3, [r7, #19]
 80045e8:	4613      	mov	r3, r2
 80045ea:	74bb      	strb	r3, [r7, #18]
	int32_t a_consign, d_consign;

	DEBUG(E_TRAJECTORY, "Goto DA/RS rel to d=%f a_rad=%f", d_mm, a_rad);
	delete_event(traj);
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7ff fe0d 	bl	800420c <delete_event>
	traj->state = state;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	7cfa      	ldrb	r2, [r7, #19]
 80045f6:	701a      	strb	r2, [r3, #0]
	if (flags & UPDATE_A) {
 80045f8:	7cbb      	ldrb	r3, [r7, #18]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d043      	beq.n	800468a <__trajectory_goto_d_a_rel+0xb6>
		if (flags & RESET_A) {
 8004602:	7cbb      	ldrb	r3, [r7, #18]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <__trajectory_goto_d_a_rel+0x3e>
			a_consign = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e025      	b.n	800465e <__trajectory_goto_d_a_rel+0x8a>
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	f7fc f807 	bl	8000630 <__aeabi_dmul>
 8004622:	4603      	mov	r3, r0
 8004624:	460c      	mov	r4, r1
 8004626:	4618      	mov	r0, r3
 8004628:	4621      	mov	r1, r4
					      (traj->position->phys.track_mm) / 2); 
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
	if (flags & UPDATE_A) {
		if (flags & RESET_A) {
			a_consign = 0;
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 8004632:	461a      	mov	r2, r3
 8004634:	4623      	mov	r3, r4
 8004636:	f7fb fffb 	bl	8000630 <__aeabi_dmul>
 800463a:	4603      	mov	r3, r0
 800463c:	460c      	mov	r4, r1
 800463e:	4618      	mov	r0, r3
 8004640:	4621      	mov	r1, r4
					      (traj->position->phys.track_mm) / 2); 
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800464a:	f7fc f91b 	bl	8000884 <__aeabi_ddiv>
 800464e:	4603      	mov	r3, r0
 8004650:	460c      	mov	r4, r1
	if (flags & UPDATE_A) {
		if (flags & RESET_A) {
			a_consign = 0;
		}
		else {
			a_consign = (int32_t)(a_rad * (traj->position->phys.distance_imp_per_mm) *
 8004652:	4618      	mov	r0, r3
 8004654:	4621      	mov	r1, r4
 8004656:	f7fc fa9b 	bl	8000b90 <__aeabi_d2iz>
 800465a:	4603      	mov	r3, r0
 800465c:	61fb      	str	r3, [r7, #28]
					      (traj->position->phys.track_mm) / 2); 
		}
		a_consign +=  rs_get_angle(traj->robot);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fc2a 	bl	8003ebc <rs_get_angle>
 8004668:	4602      	mov	r2, r0
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	61fb      	str	r3, [r7, #28]
		traj->target.pol.angle = a_consign;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	60da      	str	r2, [r3, #12]
		vLockAngleConsign();
 8004676:	f7fe fa35 	bl	8002ae4 <vLockAngleConsign>
		cs_set_consign(traj->csm_angle, a_consign);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe fdfb 	bl	800327c <cs_set_consign>
		vUnlockAngleConsign();
 8004686:	f7fe fa73 	bl	8002b70 <vUnlockAngleConsign>
	}
	if (flags & UPDATE_D) {
 800468a:	7cbb      	ldrb	r3, [r7, #18]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02d      	beq.n	80046f0 <__trajectory_goto_d_a_rel+0x11c>
		if (flags & RESET_D) {
 8004694:	7cbb      	ldrb	r3, [r7, #18]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <__trajectory_goto_d_a_rel+0xd0>
			d_consign = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e00f      	b.n	80046c4 <__trajectory_goto_d_a_rel+0xf0>
		}
		else {
			d_consign = (int32_t)((d_mm) * (traj->position->phys.distance_imp_per_mm));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80046ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b0:	f7fb ffbe 	bl	8000630 <__aeabi_dmul>
 80046b4:	4603      	mov	r3, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	4618      	mov	r0, r3
 80046ba:	4621      	mov	r1, r4
 80046bc:	f7fc fa68 	bl	8000b90 <__aeabi_d2iz>
 80046c0:	4603      	mov	r3, r0
 80046c2:	61bb      	str	r3, [r7, #24]
		}
		d_consign += rs_get_distance(traj->robot);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fc09 	bl	8003ee0 <rs_get_distance>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4413      	add	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
		traj->target.pol.distance = d_consign;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	609a      	str	r2, [r3, #8]
		vLockDistanceConsign();
 80046dc:	f7fe fa10 	bl	8002b00 <vLockDistanceConsign>
		cs_set_consign(traj->csm_distance, d_consign);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fdc8 	bl	800327c <cs_set_consign>
		vUnlockDistanceConsign();
 80046ec:	f7fe fa4e 	bl	8002b8c <vUnlockDistanceConsign>
	}
}
 80046f0:	bf00      	nop
 80046f2:	3724      	adds	r7, #36	; 0x24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}

080046f8 <trajectory_turnto_xy>:
				  UPDATE_A | UPDATE_D | RESET_D);
}

/** turn the robot until the point x,y is in front of us */ 
void trajectory_turnto_xy(struct trajectory *traj, double x_abs_mm, double y_abs_mm)
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	ed2d 8b02 	vpush	{d8}
 80046fe:	b08d      	sub	sp, #52	; 0x34
 8004700:	af00      	add	r7, sp, #0
 8004702:	6178      	str	r0, [r7, #20]
 8004704:	ed87 0b02 	vstr	d0, [r7, #8]
 8004708:	ed87 1b00 	vstr	d1, [r7]
	double posx = position_get_x_double(traj->position); 
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff faa1 	bl	8003c58 <position_get_x_double>
 8004716:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double posy = position_get_y_double(traj->position);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fab2 	bl	8003c88 <position_get_y_double>
 8004724:	ed87 0b08 	vstr	d0, [r7, #32]
	double posa = position_get_a_rad_double(traj->position);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fac3 	bl	8003cb8 <position_get_a_rad_double>
 8004732:	ed87 0b06 	vstr	d0, [r7, #24]

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0,
			simple_modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa),
 8004736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800473a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800473e:	f7fb fdc3 	bl	80002c8 <__aeabi_dsub>
 8004742:	4603      	mov	r3, r0
 8004744:	460c      	mov	r4, r1
 8004746:	ec44 3b18 	vmov	d8, r3, r4
 800474a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800474e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004752:	f7fb fdb9 	bl	80002c8 <__aeabi_dsub>
 8004756:	4603      	mov	r3, r0
 8004758:	460c      	mov	r4, r1
 800475a:	ec44 3b17 	vmov	d7, r3, r4
 800475e:	eeb0 1a47 	vmov.f32	s2, s14
 8004762:	eef0 1a67 	vmov.f32	s3, s15
 8004766:	eeb0 0a48 	vmov.f32	s0, s16
 800476a:	eef0 0a68 	vmov.f32	s1, s17
 800476e:	f00d fbff 	bl	8011f70 <atan2>
 8004772:	ec51 0b10 	vmov	r0, r1, d0
	double posx = position_get_x_double(traj->position); 
	double posy = position_get_y_double(traj->position);
	double posa = position_get_a_rad_double(traj->position);

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0,
 8004776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800477a:	f7fb fda5 	bl	80002c8 <__aeabi_dsub>
 800477e:	4603      	mov	r3, r0
 8004780:	460c      	mov	r4, r1
 8004782:	ec44 3b17 	vmov	d7, r3, r4
 8004786:	eeb0 0a47 	vmov.f32	s0, s14
 800478a:	eef0 0a67 	vmov.f32	s1, s15
 800478e:	f7ff fd77 	bl	8004280 <simple_modulo_2pi>
 8004792:	eeb0 7a40 	vmov.f32	s14, s0
 8004796:	eef0 7a60 	vmov.f32	s15, s1
 800479a:	2207      	movs	r2, #7
 800479c:	2101      	movs	r1, #1
 800479e:	eeb0 1a47 	vmov.f32	s2, s14
 80047a2:	eef0 1a67 	vmov.f32	s3, s15
 80047a6:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80047c0 <trajectory_turnto_xy+0xc8>
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7ff ff12 	bl	80045d4 <__trajectory_goto_d_a_rel>
			simple_modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa),
				  RUNNING_A,
				  UPDATE_A | UPDATE_D | RESET_D);
}
 80047b0:	bf00      	nop
 80047b2:	3734      	adds	r7, #52	; 0x34
 80047b4:	46bd      	mov	sp, r7
 80047b6:	ecbd 8b02 	vpop	{d8}
 80047ba:	bd90      	pop	{r4, r7, pc}
 80047bc:	f3af 8000 	nop.w
	...

080047c8 <trajectory_turnto_xy_behind>:

/** turn the robot until the point x,y is behind us */ 
void trajectory_turnto_xy_behind(struct trajectory *traj, double x_abs_mm, double y_abs_mm)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	ed2d 8b02 	vpush	{d8}
 80047ce:	b08d      	sub	sp, #52	; 0x34
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6178      	str	r0, [r7, #20]
 80047d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80047d8:	ed87 1b00 	vstr	d1, [r7]
	double posx = position_get_x_double(traj->position); 
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fa39 	bl	8003c58 <position_get_x_double>
 80047e6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double posy = position_get_y_double(traj->position);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fa4a 	bl	8003c88 <position_get_y_double>
 80047f4:	ed87 0b08 	vstr	d0, [r7, #32]
	double posa = position_get_a_rad_double(traj->position);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fa5b 	bl	8003cb8 <position_get_a_rad_double>
 8004802:	ed87 0b06 	vstr	d0, [r7, #24]

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0, 
			modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa + M_PI),
 8004806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800480a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800480e:	f7fb fd5b 	bl	80002c8 <__aeabi_dsub>
 8004812:	4603      	mov	r3, r0
 8004814:	460c      	mov	r4, r1
 8004816:	ec44 3b18 	vmov	d8, r3, r4
 800481a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800481e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004822:	f7fb fd51 	bl	80002c8 <__aeabi_dsub>
 8004826:	4603      	mov	r3, r0
 8004828:	460c      	mov	r4, r1
 800482a:	ec44 3b17 	vmov	d7, r3, r4
 800482e:	eeb0 1a47 	vmov.f32	s2, s14
 8004832:	eef0 1a67 	vmov.f32	s3, s15
 8004836:	eeb0 0a48 	vmov.f32	s0, s16
 800483a:	eef0 0a68 	vmov.f32	s1, s17
 800483e:	f00d fb97 	bl	8011f70 <atan2>
 8004842:	ec51 0b10 	vmov	r0, r1, d0
 8004846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800484a:	f7fb fd3d 	bl	80002c8 <__aeabi_dsub>
 800484e:	4603      	mov	r3, r0
 8004850:	460c      	mov	r4, r1
 8004852:	4618      	mov	r0, r3
 8004854:	4621      	mov	r1, r4
	double posx = position_get_x_double(traj->position); 
	double posy = position_get_y_double(traj->position);
	double posa = position_get_a_rad_double(traj->position);

	DEBUG(E_TRAJECTORY, "Goto Turn To xy %f %f", x_abs_mm, y_abs_mm);
	__trajectory_goto_d_a_rel(traj, 0, 
 8004856:	a314      	add	r3, pc, #80	; (adr r3, 80048a8 <trajectory_turnto_xy_behind+0xe0>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f7fb fd36 	bl	80002cc <__adddf3>
 8004860:	4603      	mov	r3, r0
 8004862:	460c      	mov	r4, r1
 8004864:	ec44 3b17 	vmov	d7, r3, r4
 8004868:	eeb0 0a47 	vmov.f32	s0, s14
 800486c:	eef0 0a67 	vmov.f32	s1, s15
 8004870:	f7ff fd4e 	bl	8004310 <modulo_2pi>
 8004874:	eeb0 7a40 	vmov.f32	s14, s0
 8004878:	eef0 7a60 	vmov.f32	s15, s1
 800487c:	2207      	movs	r2, #7
 800487e:	2101      	movs	r1, #1
 8004880:	eeb0 1a47 	vmov.f32	s2, s14
 8004884:	eef0 1a67 	vmov.f32	s3, s15
 8004888:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80048a0 <trajectory_turnto_xy_behind+0xd8>
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f7ff fea1 	bl	80045d4 <__trajectory_goto_d_a_rel>
			modulo_2pi(atan2(y_abs_mm - posy, x_abs_mm - posx) - posa + M_PI),
				  RUNNING_A,
				  UPDATE_A | UPDATE_D | RESET_D);
}
 8004892:	bf00      	nop
 8004894:	3734      	adds	r7, #52	; 0x34
 8004896:	46bd      	mov	sp, r7
 8004898:	ecbd 8b02 	vpop	{d8}
 800489c:	bd90      	pop	{r4, r7, pc}
 800489e:	bf00      	nop
	...
 80048a8:	54442d18 	.word	0x54442d18
 80048ac:	400921fb 	.word	0x400921fb

080048b0 <trajectory_d_a_rel>:
	__trajectory_goto_d_a_rel(traj, 0, a, RUNNING_A, UPDATE_A);
}

/** turn by 'a' degrees */
void trajectory_d_a_rel(struct trajectory *traj, double d_mm, double a_deg)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6178      	str	r0, [r7, #20]
 80048b8:	ed87 0b02 	vstr	d0, [r7, #8]
 80048bc:	ed87 1b00 	vstr	d1, [r7]
	__trajectory_goto_d_a_rel(traj, d_mm, RAD(a_deg),
 80048c0:	a30d      	add	r3, pc, #52	; (adr r3, 80048f8 <trajectory_d_a_rel+0x48>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ca:	f7fb feb1 	bl	8000630 <__aeabi_dmul>
 80048ce:	4603      	mov	r3, r0
 80048d0:	460c      	mov	r4, r1
 80048d2:	ec44 3b17 	vmov	d7, r3, r4
 80048d6:	2203      	movs	r2, #3
 80048d8:	2103      	movs	r1, #3
 80048da:	eeb0 1a47 	vmov.f32	s2, s14
 80048de:	eef0 1a67 	vmov.f32	s3, s15
 80048e2:	ed97 0b02 	vldr	d0, [r7, #8]
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f7ff fe74 	bl	80045d4 <__trajectory_goto_d_a_rel>
				  RUNNING_AD, UPDATE_A | UPDATE_D);
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd90      	pop	{r4, r7, pc}
 80048f4:	f3af 8000 	nop.w
 80048f8:	a2529d39 	.word	0xa2529d39
 80048fc:	3f91df46 	.word	0x3f91df46

08004900 <trajectory_goto_xy_abs>:

/************ GOTO XY, USE EVENTS */

/** goto a x,y point, using a trajectory event */
void trajectory_goto_xy_abs(struct trajectory *traj, double x, double y)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6178      	str	r0, [r7, #20]
 8004908:	ed87 0b02 	vstr	d0, [r7, #8]
 800490c:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004910:	6978      	ldr	r0, [r7, #20]
 8004912:	f7ff fc7b 	bl	800420c <delete_event>
	traj->target.cart.x = x;
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800491c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004926:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_START;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2204      	movs	r2, #4
 800492e:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 8004930:	6978      	ldr	r0, [r7, #20]
 8004932:	f7ff fc89 	bl	8004248 <schedule_event>
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd90      	pop	{r4, r7, pc}
 800493e:	bf00      	nop

08004940 <trajectory_goto_forward_xy_abs>:

/** go forward to a x,y point, using a trajectory event */
void trajectory_goto_forward_xy_abs(struct trajectory *traj, double x, double y)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6178      	str	r0, [r7, #20]
 8004948:	ed87 0b02 	vstr	d0, [r7, #8]
 800494c:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	f7ff fc5b 	bl	800420c <delete_event>
	traj->target.cart.x = x;
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800495c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004966:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_F_START;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2207      	movs	r2, #7
 800496e:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 8004970:	6978      	ldr	r0, [r7, #20]
 8004972:	f7ff fc69 	bl	8004248 <schedule_event>
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	bf00      	nop

08004980 <trajectory_goto_backward_xy_abs>:

/** go backward to a x,y point, using a trajectory event */
void trajectory_goto_backward_xy_abs(struct trajectory *traj, double x, double y)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6178      	str	r0, [r7, #20]
 8004988:	ed87 0b02 	vstr	d0, [r7, #8]
 800498c:	ed87 1b00 	vstr	d1, [r7]
	delete_event(traj);
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f7ff fc3b 	bl	800420c <delete_event>
	traj->target.cart.x = x;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800499c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	traj->target.cart.y = y;
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80049a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	traj->state = RUNNING_XY_B_START;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	220a      	movs	r2, #10
 80049ae:	701a      	strb	r2, [r3, #0]
	schedule_event(traj);
 80049b0:	6978      	ldr	r0, [r7, #20]
 80049b2:	f7ff fc49 	bl	8004248 <schedule_event>
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}
 80049be:	bf00      	nop

080049c0 <trajectory_finished>:

/** return true if the position consign is equal to the filtered
 * position consign (after quadramp filter), for angle and
 * distance. */
uint8_t trajectory_finished(struct trajectory *traj)
{
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
	return cs_get_consign(traj->csm_angle) == cs_get_filtered_consign(traj->csm_angle) &&
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fc39 	bl	8003244 <cs_get_consign>
 80049d2:	4604      	mov	r4, r0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fc41 	bl	8003260 <cs_get_filtered_consign>
 80049de:	4603      	mov	r3, r0
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d10f      	bne.n	8004a04 <trajectory_finished+0x44>
		cs_get_consign(traj->csm_distance) == cs_get_filtered_consign(traj->csm_distance) ;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fc2b 	bl	8003244 <cs_get_consign>
 80049ee:	4604      	mov	r4, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fc33 	bl	8003260 <cs_get_filtered_consign>
 80049fa:	4603      	mov	r3, r0
/** return true if the position consign is equal to the filtered
 * position consign (after quadramp filter), for angle and
 * distance. */
uint8_t trajectory_finished(struct trajectory *traj)
{
	return cs_get_consign(traj->csm_angle) == cs_get_filtered_consign(traj->csm_angle) &&
 80049fc:	429c      	cmp	r4, r3
 80049fe:	d101      	bne.n	8004a04 <trajectory_finished+0x44>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <trajectory_finished+0x46>
 8004a04:	2300      	movs	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
		cs_get_consign(traj->csm_distance) == cs_get_filtered_consign(traj->csm_distance) ;
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}

08004a10 <trajectory_in_window>:

/** return true if traj is nearly finished */
uint8_t trajectory_in_window(struct trajectory *traj, double d_win, double a_win_rad)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6178      	str	r0, [r7, #20]
 8004a18:	ed87 0b02 	vstr	d0, [r7, #8]
 8004a1c:	ed87 1b00 	vstr	d1, [r7]
	switch(traj->state) {
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	2b0b      	cmp	r3, #11
 8004a28:	d844      	bhi.n	8004ab4 <trajectory_in_window+0xa4>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <trajectory_in_window+0x20>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a6f 	.word	0x08004a6f
 8004a34:	08004a7d 	.word	0x08004a7d
 8004a38:	08004a8b 	.word	0x08004a8b
 8004a3c:	08004ab5 	.word	0x08004ab5
 8004a40:	08004ab5 	.word	0x08004ab5
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	08004ab5 	.word	0x08004ab5
 8004a4c:	08004ab5 	.word	0x08004ab5
 8004a50:	08004a61 	.word	0x08004a61
 8004a54:	08004ab5 	.word	0x08004ab5
 8004a58:	08004ab5 	.word	0x08004ab5
 8004a5c:	08004a61 	.word	0x08004a61

	case RUNNING_XY_ANGLE_OK: 
	case RUNNING_XY_F_ANGLE_OK: 
	case RUNNING_XY_B_ANGLE_OK: 
		/* if robot coordinates are near the x,y target */
		return is_robot_in_xy_window(traj, d_win);
 8004a60:	ed97 0b02 	vldr	d0, [r7, #8]
 8004a64:	6978      	ldr	r0, [r7, #20]
 8004a66:	f7ff fcdf 	bl	8004428 <is_robot_in_xy_window>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	e023      	b.n	8004ab6 <trajectory_in_window+0xa6>

	case RUNNING_A: 
		return is_robot_in_angle_window(traj, a_win_rad);
 8004a6e:	ed97 0b00 	vldr	d0, [r7]
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7ff fd4a 	bl	800450c <is_robot_in_angle_window>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	e01c      	b.n	8004ab6 <trajectory_in_window+0xa6>

	case RUNNING_D:
		return is_robot_in_dist_window(traj, d_win);
 8004a7c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004a80:	6978      	ldr	r0, [r7, #20]
 8004a82:	f7ff fc81 	bl	8004388 <is_robot_in_dist_window>
 8004a86:	4603      	mov	r3, r0
 8004a88:	e015      	b.n	8004ab6 <trajectory_in_window+0xa6>

	case RUNNING_AD:
		return is_robot_in_dist_window(traj, d_win) && 
 8004a8a:	ed97 0b02 	vldr	d0, [r7, #8]
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f7ff fc7a 	bl	8004388 <is_robot_in_dist_window>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <trajectory_in_window+0x9e>
			is_robot_in_angle_window(traj, a_win_rad);
 8004a9a:	ed97 0b00 	vldr	d0, [r7]
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f7ff fd34 	bl	800450c <is_robot_in_angle_window>
 8004aa4:	4603      	mov	r3, r0

	case RUNNING_D:
		return is_robot_in_dist_window(traj, d_win);

	case RUNNING_AD:
		return is_robot_in_dist_window(traj, d_win) && 
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <trajectory_in_window+0x9e>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <trajectory_in_window+0xa0>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e000      	b.n	8004ab6 <trajectory_in_window+0xa6>
	case RUNNING_XY_B_START:
	case RUNNING_XY_ANGLE: 
	case RUNNING_XY_F_ANGLE:
	case RUNNING_XY_B_ANGLE:
	default:
		return 0;
 8004ab4:	2300      	movs	r3, #0
	}
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop

08004ac0 <trajectory_manager_event>:

/*********** *TRAJECTORY EVENT FUNC */

/** event called for xy trajectories */
static void trajectory_manager_event(void * param)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b09e      	sub	sp, #120	; 0x78
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
	struct trajectory *traj = (struct trajectory *)param;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	65fb      	str	r3, [r7, #92]	; 0x5c
	double coef=1.0;
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	; (8004cc0 <trajectory_manager_event+0x200>)
 8004ad4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double x,y,a;
	int32_t d_consign=0, a_consign=0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	677b      	str	r3, [r7, #116]	; 0x74
 8004adc:	2300      	movs	r3, #0
 8004ade:	673b      	str	r3, [r7, #112]	; 0x70
	vect2_pol v2pol_target;

	TickType_t xNextWakeTime;

	/* Initialise xNextWakeTime - this only needs to be done once. */
    xNextWakeTime = xTaskGetTickCount();
 8004ae0:	f003 fdd0 	bl	8008684 <xTaskGetTickCount>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
        vTaskDelayUntil( &xNextWakeTime, DO_TRAJECTORY_MSEC);
 8004ae8:	f107 030c 	add.w	r3, r7, #12
 8004aec:	2164      	movs	r1, #100	; 0x64
 8004aee:	4618      	mov	r0, r3
 8004af0:	f003 fbe2 	bl	80082b8 <vTaskDelayUntil>

		x = position_get_x_double(traj->position);
 8004af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f8ad 	bl	8003c58 <position_get_x_double>
 8004afe:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		y = position_get_y_double(traj->position);
 8004b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff f8be 	bl	8003c88 <position_get_y_double>
 8004b0c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		a = position_get_a_rad_double(traj->position);
 8004b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff f8cf 	bl	8003cb8 <position_get_a_rad_double>
 8004b1a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

		/* step 1 : process new commands to quadramps */

		switch (traj->state) {
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3b04      	subs	r3, #4
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	f200 8156 	bhi.w	8004dd6 <trajectory_manager_event+0x316>
		case RUNNING_XY_B_ANGLE:
		case RUNNING_XY_B_ANGLE_OK:

			/* process the command vector from absolute target and
			 * current position */
			v2cart_pos.x = traj->target.cart.x - x;
 8004b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b34:	f7fb fbc8 	bl	80002c8 <__aeabi_dsub>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			v2cart_pos.y = traj->target.cart.y - y;
 8004b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b42:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b4a:	f7fb fbbd 	bl	80002c8 <__aeabi_dsub>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			vect2_cart2pol(&v2cart_pos, &v2pol_target);
 8004b56:	f107 0210 	add.w	r2, r7, #16
 8004b5a:	f107 0320 	add.w	r3, r7, #32
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fe13 	bl	800378c <vect2_cart2pol>
			v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta - a);
 8004b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b6e:	f7fb fbab 	bl	80002c8 <__aeabi_dsub>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	ec43 2b17 	vmov	d7, r2, r3
 8004b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b7e:	eef0 0a67 	vmov.f32	s1, s15
 8004b82:	f7ff fb7d 	bl	8004280 <simple_modulo_2pi>
 8004b86:	eeb0 7a40 	vmov.f32	s14, s0
 8004b8a:	eef0 7a60 	vmov.f32	s15, s1
 8004b8e:	ed87 7b06 	vstr	d7, [r7, #24]

			/* asked to go backwards */
			if (traj->state >= RUNNING_XY_B_START &&
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	d921      	bls.n	8004bde <trajectory_manager_event+0x11e>
				traj->state <= RUNNING_XY_B_ANGLE_OK ) {
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9c:	781b      	ldrb	r3, [r3, #0]
			v2cart_pos.y = traj->target.cart.y - y;
			vect2_cart2pol(&v2cart_pos, &v2pol_target);
			v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta - a);

			/* asked to go backwards */
			if (traj->state >= RUNNING_XY_B_START &&
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d81d      	bhi.n	8004bde <trajectory_manager_event+0x11e>
				traj->state <= RUNNING_XY_B_ANGLE_OK ) {
				v2pol_target.r = -v2pol_target.r;
 8004ba2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ba6:	4614      	mov	r4, r2
 8004ba8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004bac:	e9c7 4504 	strd	r4, r5, [r7, #16]
				v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
 8004bb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bb4:	a33c      	add	r3, pc, #240	; (adr r3, 8004ca8 <trajectory_manager_event+0x1e8>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fb87 	bl	80002cc <__adddf3>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	ec43 2b17 	vmov	d7, r2, r3
 8004bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004bca:	eef0 0a67 	vmov.f32	s1, s15
 8004bce:	f7ff fb57 	bl	8004280 <simple_modulo_2pi>
 8004bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8004bd6:	eef0 7a60 	vmov.f32	s15, s1
 8004bda:	ed87 7b06 	vstr	d7, [r7, #24]
			}

			/* if we don't need to go forward */
			if (traj->state >= RUNNING_XY_START &&
 8004bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d935      	bls.n	8004c52 <trajectory_manager_event+0x192>
				traj->state <= RUNNING_XY_ANGLE_OK ) {
 8004be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be8:	781b      	ldrb	r3, [r3, #0]
				v2pol_target.r = -v2pol_target.r;
				v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
			}

			/* if we don't need to go forward */
			if (traj->state >= RUNNING_XY_START &&
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d831      	bhi.n	8004c52 <trajectory_manager_event+0x192>
				traj->state <= RUNNING_XY_ANGLE_OK ) {
				/* If the target is behind the robot, we need to go
				 * backwards. 0.52 instead of 0.5 because we prefer to
				 * go forward */
				if ((v2pol_target.theta > 0.52*M_PI) ||
 8004bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bf2:	a32f      	add	r3, pc, #188	; (adr r3, 8004cb0 <trajectory_manager_event+0x1f0>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb ffaa 	bl	8000b50 <__aeabi_dcmpgt>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <trajectory_manager_event+0x156>
					(v2pol_target.theta < -0.52*M_PI ) ) {
 8004c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			if (traj->state >= RUNNING_XY_START &&
				traj->state <= RUNNING_XY_ANGLE_OK ) {
				/* If the target is behind the robot, we need to go
				 * backwards. 0.52 instead of 0.5 because we prefer to
				 * go forward */
				if ((v2pol_target.theta > 0.52*M_PI) ||
 8004c06:	a32c      	add	r3, pc, #176	; (adr r3, 8004cb8 <trajectory_manager_event+0x1f8>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb ff82 	bl	8000b14 <__aeabi_dcmplt>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01d      	beq.n	8004c52 <trajectory_manager_event+0x192>
					(v2pol_target.theta < -0.52*M_PI ) ) {
					v2pol_target.r = -v2pol_target.r;
 8004c16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c1a:	4690      	mov	r8, r2
 8004c1c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004c20:	e9c7 8904 	strd	r8, r9, [r7, #16]
					v2pol_target.theta = simple_modulo_2pi(v2pol_target.theta + M_PI);
 8004c24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c28:	a31f      	add	r3, pc, #124	; (adr r3, 8004ca8 <trajectory_manager_event+0x1e8>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f7fb fb4d 	bl	80002cc <__adddf3>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	ec43 2b17 	vmov	d7, r2, r3
 8004c3a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c3e:	eef0 0a67 	vmov.f32	s1, s15
 8004c42:	f7ff fb1d 	bl	8004280 <simple_modulo_2pi>
 8004c46:	eeb0 7a40 	vmov.f32	s14, s0
 8004c4a:	eef0 7a60 	vmov.f32	s15, s1
 8004c4e:	ed87 7b06 	vstr	d7, [r7, #24]
				}
			}

			/* If the robot is correctly oriented to start moving in distance */
			/* here limit dist speed depending on v2pol_target.theta */
			if (ABS(v2pol_target.theta) > traj->a_start_rad) // || ABS(v2pol_target.r) < traj->d_win)
 8004c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c66:	f7fb ff55 	bl	8000b14 <__aeabi_dcmplt>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <trajectory_manager_event+0x1bc>
 8004c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004c86:	f7fb ff63 	bl	8000b50 <__aeabi_dcmpgt>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <trajectory_manager_event+0x204>
				set_quadramp_speed(traj, 0, traj->a_speed);
 8004c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	2100      	movs	r1, #0
 8004c9a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c9c:	f7ff fa58 	bl	8004150 <set_quadramp_speed>
 8004ca0:	e053      	b.n	8004d4a <trajectory_manager_event+0x28a>
 8004ca2:	bf00      	nop
 8004ca4:	f3af 8000 	nop.w
 8004ca8:	54442d18 	.word	0x54442d18
 8004cac:	400921fb 	.word	0x400921fb
 8004cb0:	4d659f8a 	.word	0x4d659f8a
 8004cb4:	3ffa2357 	.word	0x3ffa2357
 8004cb8:	4d659f8a 	.word	0x4d659f8a
 8004cbc:	bffa2357 	.word	0xbffa2357
 8004cc0:	3ff00000 	.word	0x3ff00000
			else {
				coef = (traj->a_start_rad - ABS(v2pol_target.theta)) / traj->a_start_rad;
 8004cc4:	6dfb      	ldral	r3, [r7, #92]	; 0x5c
 8004cc6:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 8004cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004cde:	f7fb ff19 	bl	8000b14 <__aeabi_dcmplt>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <trajectory_manager_event+0x234>
 8004ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cea:	663b      	str	r3, [r7, #96]	; 0x60
 8004cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8004cf4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	f7fb fae4 	bl	80002c8 <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004d0e:	f7fb fdb9 	bl	8000884 <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				set_quadramp_speed(traj, traj->d_speed * coef, traj->a_speed);
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fc20 	bl	8000564 <__aeabi_i2d>
 8004d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d28:	f7fb fc82 	bl	8000630 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	f7fb ff2c 	bl	8000b90 <__aeabi_d2iz>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	b219      	sxth	r1, r3
 8004d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004d46:	f7ff fa03 	bl	8004150 <set_quadramp_speed>
			}

			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
 8004d4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d56:	f7fb fc6b 	bl	8000630 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb ff15 	bl	8000b90 <__aeabi_d2iz>
 8004d66:	4603      	mov	r3, r0
 8004d68:	677b      	str	r3, [r7, #116]	; 0x74
			d_consign += rs_get_distance(traj->robot);
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f8b6 	bl	8003ee0 <rs_get_distance>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d78:	4413      	add	r3, r2
 8004d7a:	677b      	str	r3, [r7, #116]	; 0x74

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 8004d7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
						  (traj->position->phys.distance_imp_per_mm) *
 8004d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 8004d88:	f7fb fc52 	bl	8000630 <__aeabi_dmul>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
						  (traj->position->phys.distance_imp_per_mm) *
						  (traj->position->phys.track_mm) / 2.2);
 8004d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
						  (traj->position->phys.distance_imp_per_mm) *
 8004d9c:	f7fb fc48 	bl	8000630 <__aeabi_dmul>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4610      	mov	r0, r2
 8004da6:	4619      	mov	r1, r3
						  (traj->position->phys.track_mm) / 2.2);
 8004da8:	a34d      	add	r3, pc, #308	; (adr r3, 8004ee0 <trajectory_manager_event+0x420>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fd69 	bl	8000884 <__aeabi_ddiv>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
			d_consign = (int32_t)(v2pol_target.r * (traj->position->phys.distance_imp_per_mm));
			d_consign += rs_get_distance(traj->robot);

			/* angle consign */
			/* XXX here we specify 2.2 instead of 2.0 to avoid oscillations */
			a_consign = (int32_t)(v2pol_target.theta *
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	f7fb fee9 	bl	8000b90 <__aeabi_d2iz>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	673b      	str	r3, [r7, #112]	; 0x70
						  (traj->position->phys.distance_imp_per_mm) *
						  (traj->position->phys.track_mm) / 2.2);
			a_consign += rs_get_angle(traj->robot);
 8004dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f878 	bl	8003ebc <rs_get_angle>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd0:	4413      	add	r3, r2
 8004dd2:	673b      	str	r3, [r7, #112]	; 0x70

			break;
 8004dd4:	e00a      	b.n	8004dec <trajectory_manager_event+0x32c>

		default:
			/* hmmm quite odd, delete the event */
			traj->scheduler_task=NULL;
 8004dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd8:	2200      	movs	r2, #0
 8004dda:	645a      	str	r2, [r3, #68]	; 0x44
			vTaskDelete(traj->scheduler_task);
 8004ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	4618      	mov	r0, r3
 8004de2:	f003 f9dd 	bl	80081a0 <vTaskDelete>
			traj->state = READY;
 8004de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
		/* step 2 : update state, or delete event if we reached the
		 * destination */

		/* XXX if target is our pos !! */

		switch (traj->state) {
 8004dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	3b04      	subs	r3, #4
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d857      	bhi.n	8004ea6 <trajectory_manager_event+0x3e6>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <trajectory_manager_event+0x33c>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e7b 	.word	0x08004e7b
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e2f 	.word	0x08004e2f
 8004e10:	08004e7b 	.word	0x08004e7b
 8004e14:	08004e21 	.word	0x08004e21
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	08004e7b 	.word	0x08004e7b
		case RUNNING_XY_START:
		case RUNNING_XY_F_START:
		case RUNNING_XY_B_START:
			/* START -> ANGLE */
			traj->state ++;
 8004e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2a:	701a      	strb	r2, [r3, #0]
			break;
 8004e2c:	e040      	b.n	8004eb0 <trajectory_manager_event+0x3f0>

		case RUNNING_XY_ANGLE:
		case RUNNING_XY_F_ANGLE:
		case RUNNING_XY_B_ANGLE: {
			struct quadramp_filter *q_a;
			q_a = traj->csm_angle->consign_filter_params;
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
			/* if d_speed is not 0, we are in start_angle_win */
			if (get_quadramp_distance_speed(traj)) {
 8004e36:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e38:	f7ff f9d8 	bl	80041ec <get_quadramp_distance_speed>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d033      	beq.n	8004eaa <trajectory_manager_event+0x3ea>
				if(is_robot_in_xy_window(traj, traj->d_win)) {
 8004e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e44:	ed93 7b06 	vldr	d7, [r3, #24]
 8004e48:	eeb0 0a47 	vmov.f32	s0, s14
 8004e4c:	eef0 0a67 	vmov.f32	s1, s15
 8004e50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e52:	f7ff fae9 	bl	8004428 <is_robot_in_xy_window>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <trajectory_manager_event+0x3ac>
					traj->scheduler_task=NULL;
 8004e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
					vTaskDelete(traj->scheduler_task);
 8004e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	4618      	mov	r0, r3
 8004e68:	f003 f99a 	bl	80081a0 <vTaskDelete>
				}
				/* ANGLE -> ANGLE_OK */
				traj->state ++;
 8004e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e76:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004e78:	e017      	b.n	8004eaa <trajectory_manager_event+0x3ea>

		case RUNNING_XY_ANGLE_OK:
		case RUNNING_XY_F_ANGLE_OK:
		case RUNNING_XY_B_ANGLE_OK:
			/* If we reached the destination */
			if(is_robot_in_xy_window(traj, traj->d_win)) {
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004e80:	eeb0 0a47 	vmov.f32	s0, s14
 8004e84:	eef0 0a67 	vmov.f32	s1, s15
 8004e88:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e8a:	f7ff facd 	bl	8004428 <is_robot_in_xy_window>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <trajectory_manager_event+0x3ee>
				traj->scheduler_task=NULL;
 8004e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
				vTaskDelete(traj->scheduler_task);
 8004e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 f97e 	bl	80081a0 <vTaskDelete>
			}
		break;
 8004ea4:	e003      	b.n	8004eae <trajectory_manager_event+0x3ee>

		default:
			break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <trajectory_manager_event+0x3f0>
					vTaskDelete(traj->scheduler_task);
				}
				/* ANGLE -> ANGLE_OK */
				traj->state ++;
			}
			break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <trajectory_manager_event+0x3f0>
			/* If we reached the destination */
			if(is_robot_in_xy_window(traj, traj->d_win)) {
				traj->scheduler_task=NULL;
				vTaskDelete(traj->scheduler_task);
			}
		break;
 8004eae:	bf00      	nop
			break;
		}

		/* step 3 : send the processed commands to cs */

		vLockAngleConsign();
 8004eb0:	f7fd fe18 	bl	8002ae4 <vLockAngleConsign>
		cs_set_consign(traj->csm_angle, a_consign);
 8004eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe f9de 	bl	800327c <cs_set_consign>
		vUnlockAngleConsign();
 8004ec0:	f7fd fe56 	bl	8002b70 <vUnlockAngleConsign>
		vLockDistanceConsign();
 8004ec4:	f7fd fe1c 	bl	8002b00 <vLockDistanceConsign>
		cs_set_consign(traj->csm_distance, d_consign);
 8004ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe f9d4 	bl	800327c <cs_set_consign>
		vUnlockDistanceConsign();
 8004ed4:	f7fd fe5a 	bl	8002b8c <vUnlockDistanceConsign>
	}
 8004ed8:	e606      	b.n	8004ae8 <trajectory_manager_event+0x28>
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w
 8004ee0:	9999999a 	.word	0x9999999a
 8004ee4:	40019999 	.word	0x40019999

08004ee8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004ef0:	4905      	ldr	r1, [pc, #20]	; (8004f08 <NVIC_PriorityGroupConfig+0x20>)
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <NVIC_PriorityGroupConfig+0x24>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60cb      	str	r3, [r1, #12]
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000ed00 	.word	0xe000ed00
 8004f0c:	05fa0000 	.word	0x05fa0000

08004f10 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <ADC_Init+0xa4>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	791b      	ldrb	r3, [r3, #4]
 8004f34:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <ADC_Init+0xa8>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004f5e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004f64:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	795b      	ldrb	r3, [r3, #5]
 8004f6a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f86:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	7d1b      	ldrb	r3, [r3, #20]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	7afb      	ldrb	r3, [r7, #11]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8004f96:	7afb      	ldrb	r3, [r7, #11]
 8004f98:	051b      	lsls	r3, r3, #20
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	fcfffeff 	.word	0xfcfffeff
 8004fb8:	c0fff7fd 	.word	0xc0fff7fd

08004fbc <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	751a      	strb	r2, [r3, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop

08004ffc <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <ADC_CommonInit+0x48>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <ADC_CommonInit+0x4c>)
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800501e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005024:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800502a:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005032:	4a04      	ldr	r2, [pc, #16]	; (8005044 <ADC_CommonInit+0x48>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6053      	str	r3, [r2, #4]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012300 	.word	0x40012300
 8005048:	fffc30e0 	.word	0xfffc30e0

0800504c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	60da      	str	r2, [r3, #12]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d006      	beq.n	8005098 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f043 0201 	orr.w	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8005096:	e005      	b.n	80050a4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 0201 	bic.w	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	609a      	str	r2, [r3, #8]
  }
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <ADC_TempSensorVrefintCmd+0x38>)
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <ADC_TempSensorVrefintCmd+0x38>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ca:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 80050cc:	e005      	b.n	80050da <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80050ce:	4a06      	ldr	r2, [pc, #24]	; (80050e8 <ADC_TempSensorVrefintCmd+0x38>)
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <ADC_TempSensorVrefintCmd+0x38>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050d8:	6053      	str	r3, [r2, #4]
  }
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012300 	.word	0x40012300

080050ec <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)FLASH_Latency);
 80050f4:	4906      	ldr	r1, [pc, #24]	; (8005110 <FLASH_SetLatency+0x24>)
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <FLASH_SetLatency+0x24>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 020f 	bic.w	r2, r3, #15
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40023c00 	.word	0x40023c00

08005114 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e076      	b.n	800521e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005130:	2201      	movs	r2, #1
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d165      	bne.n	8005218 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2103      	movs	r1, #3
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	401a      	ands	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	4619      	mov	r1, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	791b      	ldrb	r3, [r3, #4]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d003      	beq.n	800518a <GPIO_Init+0x76>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	791b      	ldrb	r3, [r3, #4]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d12e      	bne.n	80051e8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2103      	movs	r1, #3
 8005194:	fa01 f303 	lsl.w	r3, r1, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	401a      	ands	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	795b      	ldrb	r3, [r3, #5]
 80051a8:	4619      	mov	r1, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	401a      	ands	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	799b      	ldrb	r3, [r3, #6]
 80051d6:	4619      	mov	r1, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2103      	movs	r1, #3
 80051f4:	fa01 f303 	lsl.w	r3, r1, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	401a      	ands	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	79db      	ldrb	r3, [r3, #7]
 8005208:	4619      	mov	r1, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	3301      	adds	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b0f      	cmp	r3, #15
 8005222:	d985      	bls.n	8005130 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	e001      	b.n	8005256 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
 8005270:	4613      	mov	r3, r2
 8005272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8005274:	787b      	ldrb	r3, [r7, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800527a:	887a      	ldrh	r2, [r7, #2]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005280:	e003      	b.n	800528a <GPIO_WriteBit+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005282:	887b      	ldrh	r3, [r7, #2]
 8005284:	041a      	lsls	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	619a      	str	r2, [r3, #24]
  }
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop

08005298 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF14_LTDC: Connect LTDC pins to AF14 for STM32F746xx/756xx devices.
  *            @arg GPIO_AF15_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80052b0:	787a      	ldrb	r2, [r7, #1]
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80052c0:	887b      	ldrh	r3, [r7, #2]
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4618      	mov	r0, r3
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3208      	adds	r2, #8
 80052d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	210f      	movs	r1, #15
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	ea02 0103 	and.w	r1, r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f100 0208 	add.w	r2, r0, #8
 80052f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3208      	adds	r2, #8
 8005302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800530c:	887b      	ldrh	r3, [r7, #2]
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	b29b      	uxth	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3208      	adds	r2, #8
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  if (NewState != DISABLE)
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <PWR_OverDriveCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODEN;
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <PWR_OverDriveCmd+0x38>)
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <PWR_OverDriveCmd+0x38>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005346:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
  }
}
 8005348:	e005      	b.n	8005356 <PWR_OverDriveCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODEN);
 800534a:	4a06      	ldr	r2, [pc, #24]	; (8005364 <PWR_OverDriveCmd+0x38>)
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <PWR_OverDriveCmd+0x38>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
  }
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40007000 	.word	0x40007000

08005368 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  if (NewState != DISABLE)
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <PWR_OverDriveSWCmd+0x1e>
  {
    /* Enable Backup regulator */
    PWR->CR1 |= PWR_CR1_ODSWEN;
 8005378:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <PWR_OverDriveSWCmd+0x38>)
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <PWR_OverDriveSWCmd+0x38>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005382:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
  }
}
 8005384:	e005      	b.n	8005392 <PWR_OverDriveSWCmd+0x2a>
    PWR->CR1 |= PWR_CR1_ODSWEN;
  }
  else
  {
    /* Disable Backup regulator */
    PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_ODSWEN);
 8005386:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <PWR_OverDriveSWCmd+0x38>)
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <PWR_OverDriveSWCmd+0x38>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005390:	6013      	str	r3, [r2, #0]
  }
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40007000 	.word	0x40007000

080053a4 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80053ac:	2300      	movs	r3, #0
 80053ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if( PWR_FLAG & 0x80000000 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da0f      	bge.n	80053d6 <PWR_GetFlagStatus+0x32>
  {
    PWR_FLAG &= PWR_WUPF_MASK;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053bc:	607b      	str	r3, [r7, #4]
    if ((PWR->CSR2 & PWR_FLAG) != (uint32_t)RESET)
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <PWR_GetFlagStatus+0x58>)
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <PWR_GetFlagStatus+0x2c>
    {
      bitstatus = SET;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	e00d      	b.n	80053ec <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 80053d0:	2300      	movs	r3, #0
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e00a      	b.n	80053ec <PWR_GetFlagStatus+0x48>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_FLAG) != (uint32_t)RESET)
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <PWR_GetFlagStatus+0x58>)
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <PWR_GetFlagStatus+0x44>
    {
      bitstatus = SET;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	e001      	b.n	80053ec <PWR_GetFlagStatus+0x48>
    }
    else
    {
      bitstatus = RESET;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the flag status */
  return bitstatus;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40007000 	.word	0x40007000

08005400 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <RCC_HSEConfig+0x24>)
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <RCC_HSEConfig+0x24>)
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	7013      	strb	r3, [r2, #0]
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40023802 	.word	0x40023802

08005428 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8005432:	2300      	movs	r3, #0
 8005434:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800543a:	2031      	movs	r0, #49	; 0x31
 800543c:	f000 f9f6 	bl	800582c <RCC_GetFlagStatus>
 8005440:	4603      	mov	r3, r0
 8005442:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005450:	d002      	beq.n	8005458 <RCC_WaitForHSEStartUp+0x30>
 8005452:	79bb      	ldrb	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8005458:	2031      	movs	r0, #49	; 0x31
 800545a:	f000 f9e7 	bl	800582c <RCC_GetFlagStatus>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8005464:	2301      	movs	r3, #1
 8005466:	71fb      	strb	r3, [r7, #7]
 8005468:	e001      	b.n	800546e <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800546a:	2300      	movs	r3, #0
 800546c:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800546e:	79fb      	ldrb	r3, [r7, #7]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8005478:	b480      	push	{r7}
 800547a:	b08b      	sub	sp, #44	; 0x2c
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 8005486:	481c      	ldr	r0, [pc, #112]	; (80054f8 <RCC_PLLConfig+0x80>)
 8005488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	fa93 f3a3 	rbit	r3, r3
 8005494:	613b      	str	r3, [r7, #16]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 8005498:	fab3 f383 	clz	r3, r3
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	409a      	lsls	r2, r3
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	431a      	orrs	r2, r3
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	1e59      	subs	r1, r3, #1
 80054aa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80054ae:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	617b      	str	r3, [r7, #20]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
 80054c2:	431a      	orrs	r2, r3
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80054cc:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	fa93 f3a3 	rbit	r3, r3
 80054d4:	61bb      	str	r3, [r7, #24]
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 80054d6:	69bb      	ldr	r3, [r7, #24]
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
  
  RCC->PLLCFGR = 0x20000000 | PLLM | 
 80054e8:	6043      	str	r3, [r0, #4]
                (PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN)) | 
                (((PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) |
                (RCC_PLLSource) |
                (PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ));
}
 80054ea:	bf00      	nop
 80054ec:	372c      	adds	r7, #44	; 0x2c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if( NewState != DISABLE )
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <RCC_PLLCmd+0x1e>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <RCC_PLLCmd+0x38>)
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <RCC_PLLCmd+0x38>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005516:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
  }
}
 8005518:	e005      	b.n	8005526 <RCC_PLLCmd+0x2a>
  {
    SET_BIT(RCC->CR, RCC_CR_PLLON);
  }
  else
  {
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <RCC_PLLCmd+0x38>)
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <RCC_PLLCmd+0x38>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005524:	6013      	str	r3, [r2, #0]
  }
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800

08005538 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <RCC_SYSCLKConfig+0x34>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f023 0303 	bic.w	r3, r3, #3
 8005550:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800555a:	4a04      	ldr	r2, [pc, #16]	; (800556c <RCC_SYSCLKConfig+0x34>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6093      	str	r3, [r2, #8]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40023800 	.word	0x40023800

08005570 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <RCC_HCLKConfig+0x34>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005588:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <RCC_HCLKConfig+0x34>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6093      	str	r3, [r2, #8]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40023800 	.word	0x40023800

080055a8 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <RCC_PCLK1Config+0x34>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80055ca:	4a04      	ldr	r2, [pc, #16]	; (80055dc <RCC_PCLK1Config+0x34>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6093      	str	r3, [r2, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40023800 	.word	0x40023800

080055e0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <RCC_PCLK2Config+0x38>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <RCC_PCLK2Config+0x38>)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6093      	str	r3, [r2, #8]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800

0800561c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	2302      	movs	r3, #2
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	2302      	movs	r3, #2
 800563a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800563c:	4b47      	ldr	r3, [pc, #284]	; (800575c <RCC_GetClocksFreq+0x140>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b04      	cmp	r3, #4
 800564a:	d007      	beq.n	800565c <RCC_GetClocksFreq+0x40>
 800564c:	2b08      	cmp	r3, #8
 800564e:	d009      	beq.n	8005664 <RCC_GetClocksFreq+0x48>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d13f      	bne.n	80056d4 <RCC_GetClocksFreq+0xb8>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a42      	ldr	r2, [pc, #264]	; (8005760 <RCC_GetClocksFreq+0x144>)
 8005658:	601a      	str	r2, [r3, #0]
    break;
 800565a:	e03f      	b.n	80056dc <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a41      	ldr	r2, [pc, #260]	; (8005764 <RCC_GetClocksFreq+0x148>)
 8005660:	601a      	str	r2, [r3, #0]
    break;
 8005662:	e03b      	b.n	80056dc <RCC_GetClocksFreq+0xc0>
  case RCC_CFGR_SWS_PLL:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005664:	4b3d      	ldr	r3, [pc, #244]	; (800575c <RCC_GetClocksFreq+0x140>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566c:	0d9b      	lsrs	r3, r3, #22
 800566e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005670:	4b3a      	ldr	r3, [pc, #232]	; (800575c <RCC_GetClocksFreq+0x140>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005678:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00d      	beq.n	800569c <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005680:	4a38      	ldr	r2, [pc, #224]	; (8005764 <RCC_GetClocksFreq+0x148>)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	fbb2 f2f3 	udiv	r2, r2, r3
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <RCC_GetClocksFreq+0x140>)
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005690:	400b      	ands	r3, r1
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	fb03 f302 	mul.w	r3, r3, r2
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e00c      	b.n	80056b6 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800569c:	4a30      	ldr	r2, [pc, #192]	; (8005760 <RCC_GetClocksFreq+0x144>)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a4:	4b2d      	ldr	r3, [pc, #180]	; (800575c <RCC_GetClocksFreq+0x140>)
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ac:	400b      	ands	r3, r1
 80056ae:	099b      	lsrs	r3, r3, #6
 80056b0:	fb03 f302 	mul.w	r3, r3, r2
 80056b4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80056b6:	4b29      	ldr	r3, [pc, #164]	; (800575c <RCC_GetClocksFreq+0x140>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	3301      	adds	r3, #1
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
    break;
 80056d2:	e003      	b.n	80056dc <RCC_GetClocksFreq+0xc0>
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a22      	ldr	r2, [pc, #136]	; (8005760 <RCC_GetClocksFreq+0x144>)
 80056d8:	601a      	str	r2, [r3, #0]
    break;
 80056da:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80056dc:	4b1f      	ldr	r3, [pc, #124]	; (800575c <RCC_GetClocksFreq+0x140>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80056ec:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <RCC_GetClocksFreq+0x14c>)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	40da      	lsrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8005702:	4b16      	ldr	r3, [pc, #88]	; (800575c <RCC_GetClocksFreq+0x140>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800570a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	0a9b      	lsrs	r3, r3, #10
 8005710:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <RCC_GetClocksFreq+0x14c>)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	4413      	add	r3, r2
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	40da      	lsrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <RCC_GetClocksFreq+0x140>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005730:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	0b5b      	lsrs	r3, r3, #13
 8005736:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005738:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <RCC_GetClocksFreq+0x14c>)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	4413      	add	r3, r2
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	40da      	lsrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]
}
 800574e:	bf00      	nop
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	00f42400 	.word	0x00f42400
 8005764:	007a1200 	.word	0x007a1200
 8005768:	080152d4 	.word	0x080152d4

0800576c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800577e:	490a      	ldr	r1, [pc, #40]	; (80057a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8005782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4313      	orrs	r3, r2
 8005788:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800578a:	e006      	b.n	800579a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800578c:	4906      	ldr	r1, [pc, #24]	; (80057a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8005790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	43db      	mvns	r3, r3
 8005796:	4013      	ands	r3, r2
 8005798:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800

080057ac <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80057be:	490a      	ldr	r1, [pc, #40]	; (80057e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80057c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80057ca:	e006      	b.n	80057da <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80057cc:	4906      	ldr	r1, [pc, #24]	; (80057e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80057d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	4013      	ands	r3, r2
 80057d8:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800

080057ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d006      	beq.n	800580c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80057fe:	490a      	ldr	r1, [pc, #40]	; (8005828 <RCC_APB2PeriphClockCmd+0x3c>)
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <RCC_APB2PeriphClockCmd+0x3c>)
 8005802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4313      	orrs	r3, r2
 8005808:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800580a:	e006      	b.n	800581a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800580c:	4906      	ldr	r1, [pc, #24]	; (8005828 <RCC_APB2PeriphClockCmd+0x3c>)
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <RCC_APB2PeriphClockCmd+0x3c>)
 8005810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	43db      	mvns	r3, r3
 8005816:	4013      	ands	r3, r2
 8005818:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40023800 	.word	0x40023800

0800582c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800583e:	2300      	movs	r3, #0
 8005840:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	b2db      	uxtb	r3, r3
 8005848:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d103      	bne.n	8005858 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8005850:	4b12      	ldr	r3, [pc, #72]	; (800589c <RCC_GetFlagStatus+0x70>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e009      	b.n	800586c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d103      	bne.n	8005866 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <RCC_GetFlagStatus+0x70>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e002      	b.n	800586c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8005866:	4b0d      	ldr	r3, [pc, #52]	; (800589c <RCC_GetFlagStatus+0x70>)
 8005868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8005884:	2301      	movs	r3, #1
 8005886:	74fb      	strb	r3, [r7, #19]
 8005888:	e001      	b.n	800588e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800588e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005890:	4618      	mov	r0, r3
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40023800 	.word	0x40023800

080058a0 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80058ba:	609a      	str	r2, [r3, #8]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	611a      	str	r2, [r3, #16]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	615a      	str	r2, [r3, #20]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	61da      	str	r2, [r3, #28]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2207      	movs	r2, #7
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8005906:	60fb      	str	r3, [r7, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005916:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005922:	431a      	orrs	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005928:	4313      	orrs	r3, r2
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint32_t)~SPI_CR2_DS;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005942:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint32_t)(SPI_InitStruct->SPI_DataSize);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint32_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint32_t)~((uint32_t)SPI_I2SCFGR_I2SMOD);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	61da      	str	r2, [r3, #28]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d006      	beq.n	80059b4 <SPI_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
  }
}
 80059b2:	e005      	b.n	80059c0 <SPI_Cmd+0x2c>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint32_t)~((uint32_t)SPI_CR1_SPE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
  }
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <SPI_SSOutputCmd+0x20>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
  }
}
 80059ea:	e005      	b.n	80059f8 <SPI_SSOutputCmd+0x2c>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint32_t)~((uint32_t)SPI_CR2_SSOE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f023 0204 	bic.w	r2, r3, #4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	605a      	str	r2, [r3, #4]
  }
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a28      	ldr	r2, [pc, #160]	; (8005abc <TIM_TimeBaseInit+0xb8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <TIM_TimeBaseInit+0x44>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <TIM_TimeBaseInit+0xbc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00f      	beq.n	8005a48 <TIM_TimeBaseInit+0x44>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2e:	d00b      	beq.n	8005a48 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a24      	ldr	r2, [pc, #144]	; (8005ac4 <TIM_TimeBaseInit+0xc0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_TimeBaseInit+0x44>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a23      	ldr	r2, [pc, #140]	; (8005ac8 <TIM_TimeBaseInit+0xc4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a22      	ldr	r2, [pc, #136]	; (8005acc <TIM_TimeBaseInit+0xc8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint32_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <TIM_TimeBaseInit+0xcc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00c      	beq.n	8005a7c <TIM_TimeBaseInit+0x78>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <TIM_TimeBaseInit+0xd0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d008      	beq.n	8005a7c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint32_t)(~TIM_CR1_CKD);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	629a      	str	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <TIM_TimeBaseInit+0xb8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_TimeBaseInit+0x9e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <TIM_TimeBaseInit+0xbc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d103      	bne.n	8005aaa <TIM_TimeBaseInit+0xa6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	615a      	str	r2, [r3, #20]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40010400 	.word	0x40010400
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40001000 	.word	0x40001000
 8005ad4:	40001400 	.word	0x40001400

08005ad8 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d006      	beq.n	8005b48 <TIM_Cmd+0x20>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
  }
}
 8005b46:	e005      	b.n	8005b54 <TIM_Cmd+0x2c>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint32_t)~TIM_CR1_CEN;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 0201 	bic.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
  }
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <TIM_OC1Init+0xe8>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0302 	bic.w	r3, r3, #2
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <TIM_OC1Init+0xec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC1Init+0x7a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <TIM_OC1Init+0xf0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d123      	bne.n	8005c22 <TIM_OC1Init+0xc2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0308 	bic.w	r3, r3, #8
 8005be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0304 	bic.w	r3, r3, #4
 8005bf2:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	fffeff8f 	.word	0xfffeff8f
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40010400 	.word	0x40010400

08005c54 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0210 	bic.w	r2, r3, #16
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <TIM_OC2Init+0xf8>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <TIM_OC2Init+0xfc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC2Init+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <TIM_OC2Init+0x100>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d127      	bne.n	8005d24 <TIM_OC2Init+0xd0>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cee:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	feff8fff 	.word	0xfeff8fff
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400

08005d58 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4b2f      	ldr	r3, [pc, #188]	; (8005e4c <TIM_OC3Init+0xf4>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <TIM_OC3Init+0xf8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_OC3Init+0x7e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a20      	ldr	r2, [pc, #128]	; (8005e54 <TIM_OC3Init+0xfc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d127      	bne.n	8005e26 <TIM_OC3Init+0xce>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df0:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	fffeff8f 	.word	0xfffeff8f
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40010400 	.word	0x40010400

08005e58 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4b21      	ldr	r3, [pc, #132]	; (8005f14 <TIM_OC4Init+0xbc>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <TIM_OC4Init+0xc0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC4Init+0x80>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <TIM_OC4Init+0xc4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d109      	bne.n	8005eec <TIM_OC4Init+0x94>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	feff8fff 	.word	0xfeff8fff
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400

08005f20 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	605a      	str	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	60da      	str	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	611a      	str	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	615a      	str	r2, [r3, #20]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	619a      	str	r2, [r3, #24]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	61da      	str	r2, [r3, #28]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0308 	bic.w	r3, r3, #8
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	619a      	str	r2, [r3, #24]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop

0800600c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006026:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint32_t)(TIM_OCPreload << 8);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	619a      	str	r2, [r3, #24]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0308 	bic.w	r3, r3, #8
 800605e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	61da      	str	r2, [r3, #28]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint32_t TIM_OCPreload)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006096:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint32_t)(TIM_OCPreload << 8);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	61da      	str	r2, [r3, #28]
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d006      	beq.n	80060d4 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
  }  
}
 80060d2:	e005      	b.n	80060e0 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_MOE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
  }  
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint32_t TIM_IT, FunctionalState NewState)
{  
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d006      	beq.n	800610e <TIM_ITConfig+0x22>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	431a      	orrs	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint32_t)~TIM_IT;
  }
}
 800610c:	e006      	b.n	800611c <TIM_ITConfig+0x30>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint32_t)~TIM_IT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	43db      	mvns	r3, r3
 8006116:	401a      	ands	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	60da      	str	r2, [r3, #12]
  }
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint32_t TIM_IT)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint32_t)~TIM_IT;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	43da      	mvns	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	611a      	str	r2, [r3, #16]
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint32_t TIM_EncoderMode,
                                uint32_t TIM_IC1Polarity, uint32_t TIM_IC2Polarity)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
  uint32_t tmpccmr1 = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpccer = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	61fb      	str	r3, [r7, #28]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	61bb      	str	r3, [r7, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]

  /* Set the encoder Mode */
  tmpsmcr &= (uint32_t)~TIM_SMCR_SMS;
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	4b15      	ldr	r3, [pc, #84]	; (80061cc <TIM_EncoderInterfaceConfig+0x84>)
 8006178:	4013      	ands	r3, r2
 800617a:	61fb      	str	r3, [r7, #28]
  tmpsmcr |= TIM_EncoderMode;
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4313      	orrs	r3, r2
 8006182:	61fb      	str	r3, [r7, #28]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_CC2S);
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <TIM_EncoderInterfaceConfig+0x88>)
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	f240 1301 	movw	r3, #257	; 0x101
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint32_t)~TIM_CCER_CC1P) & ((uint32_t)~TIM_CCER_CC2P);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800619c:	617b      	str	r3, [r7, #20]
  tmpccer |= (uint32_t)(TIM_IC1Polarity | (uint32_t)(TIM_IC2Polarity << (uint32_t)4));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	011a      	lsls	r2, r3, #4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	fffefff8 	.word	0xfffefff8
 80061d0:	fffffcfc 	.word	0xfffffcfc

080061d4 <USART_GetClockSource>:
  *                USART_CLOCKSOURCE_SYSCLK:    USARTx use SYSCLK clock source 
  *                USART_CLOCKSOURCE_LSE:       USARTx use LSE clock source
  *                USART_CLOCKSOURCE_UNDEFINED: Undefined clock source
  */
USART_ClockSourceTypeDef USART_GetClockSource(USART_TypeDef* USARTx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 80061dc:	2310      	movs	r3, #16
 80061de:	73fb      	strb	r3, [r7, #15]
    
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4ac3      	ldr	r2, [pc, #780]	; (80064f0 <USART_GetClockSource+0x31c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d145      	bne.n	8006274 <USART_GetClockSource+0xa0>
  {
    if( IS_USART1_CLKSOURCE_PCLK2() )
 80061e8:	4bc2      	ldr	r3, [pc, #776]	; (80064f4 <USART_GetClockSource+0x320>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <USART_GetClockSource+0x36>
 80061f6:	4bbf      	ldr	r3, [pc, #764]	; (80064f4 <USART_GetClockSource+0x320>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <USART_GetClockSource+0x36>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	e244      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_SYSCLK() )
 800620a:	4bba      	ldr	r3, [pc, #744]	; (80064f4 <USART_GetClockSource+0x320>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <USART_GetClockSource+0x58>
 8006218:	4bb6      	ldr	r3, [pc, #728]	; (80064f4 <USART_GetClockSource+0x320>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <USART_GetClockSource+0x58>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8006226:	2304      	movs	r3, #4
 8006228:	73fb      	strb	r3, [r7, #15]
 800622a:	e233      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_HSI() )
 800622c:	4bb1      	ldr	r3, [pc, #708]	; (80064f4 <USART_GetClockSource+0x320>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <USART_GetClockSource+0x7a>
 800623a:	4bae      	ldr	r3, [pc, #696]	; (80064f4 <USART_GetClockSource+0x320>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <USART_GetClockSource+0x7a>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8006248:	2302      	movs	r3, #2
 800624a:	73fb      	strb	r3, [r7, #15]
 800624c:	e222      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART1_CLKSOURCE_LSE() )
 800624e:	4ba9      	ldr	r3, [pc, #676]	; (80064f4 <USART_GetClockSource+0x320>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 821b 	beq.w	8006694 <USART_GetClockSource+0x4c0>
 800625e:	4ba5      	ldr	r3, [pc, #660]	; (80064f4 <USART_GetClockSource+0x320>)
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8213 	beq.w	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 800626e:	2308      	movs	r3, #8
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	e20f      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4aa0      	ldr	r2, [pc, #640]	; (80064f8 <USART_GetClockSource+0x324>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d145      	bne.n	8006308 <USART_GetClockSource+0x134>
  {
    if( IS_USART2_CLKSOURCE_PCLK1() )
 800627c:	4b9d      	ldr	r3, [pc, #628]	; (80064f4 <USART_GetClockSource+0x320>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <USART_GetClockSource+0xca>
 800628a:	4b9a      	ldr	r3, [pc, #616]	; (80064f4 <USART_GetClockSource+0x320>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <USART_GetClockSource+0xca>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	e1fa      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_SYSCLK() )
 800629e:	4b95      	ldr	r3, [pc, #596]	; (80064f4 <USART_GetClockSource+0x320>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <USART_GetClockSource+0xec>
 80062ac:	4b91      	ldr	r3, [pc, #580]	; (80064f4 <USART_GetClockSource+0x320>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <USART_GetClockSource+0xec>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80062ba:	2304      	movs	r3, #4
 80062bc:	73fb      	strb	r3, [r7, #15]
 80062be:	e1e9      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_HSI() )
 80062c0:	4b8c      	ldr	r3, [pc, #560]	; (80064f4 <USART_GetClockSource+0x320>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <USART_GetClockSource+0x10e>
 80062ce:	4b89      	ldr	r3, [pc, #548]	; (80064f4 <USART_GetClockSource+0x320>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <USART_GetClockSource+0x10e>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 80062dc:	2302      	movs	r3, #2
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e1d8      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART2_CLKSOURCE_LSE() )
 80062e2:	4b84      	ldr	r3, [pc, #528]	; (80064f4 <USART_GetClockSource+0x320>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 81d1 	beq.w	8006694 <USART_GetClockSource+0x4c0>
 80062f2:	4b80      	ldr	r3, [pc, #512]	; (80064f4 <USART_GetClockSource+0x320>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 81c9 	beq.w	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8006302:	2308      	movs	r3, #8
 8006304:	73fb      	strb	r3, [r7, #15]
 8006306:	e1c5      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART3)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a7c      	ldr	r2, [pc, #496]	; (80064fc <USART_GetClockSource+0x328>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d145      	bne.n	800639c <USART_GetClockSource+0x1c8>
  {
    if( IS_USART3_CLKSOURCE_PCLK1() )
 8006310:	4b78      	ldr	r3, [pc, #480]	; (80064f4 <USART_GetClockSource+0x320>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <USART_GetClockSource+0x15e>
 800631e:	4b75      	ldr	r3, [pc, #468]	; (80064f4 <USART_GetClockSource+0x320>)
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <USART_GetClockSource+0x15e>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
 8006330:	e1b0      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_SYSCLK() )
 8006332:	4b70      	ldr	r3, [pc, #448]	; (80064f4 <USART_GetClockSource+0x320>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <USART_GetClockSource+0x180>
 8006340:	4b6c      	ldr	r3, [pc, #432]	; (80064f4 <USART_GetClockSource+0x320>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <USART_GetClockSource+0x180>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 800634e:	2304      	movs	r3, #4
 8006350:	73fb      	strb	r3, [r7, #15]
 8006352:	e19f      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_HSI() )
 8006354:	4b67      	ldr	r3, [pc, #412]	; (80064f4 <USART_GetClockSource+0x320>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <USART_GetClockSource+0x1a2>
 8006362:	4b64      	ldr	r3, [pc, #400]	; (80064f4 <USART_GetClockSource+0x320>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <USART_GetClockSource+0x1a2>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8006370:	2302      	movs	r3, #2
 8006372:	73fb      	strb	r3, [r7, #15]
 8006374:	e18e      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART3_CLKSOURCE_LSE() )
 8006376:	4b5f      	ldr	r3, [pc, #380]	; (80064f4 <USART_GetClockSource+0x320>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 8187 	beq.w	8006694 <USART_GetClockSource+0x4c0>
 8006386:	4b5b      	ldr	r3, [pc, #364]	; (80064f4 <USART_GetClockSource+0x320>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 817f 	beq.w	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8006396:	2308      	movs	r3, #8
 8006398:	73fb      	strb	r3, [r7, #15]
 800639a:	e17b      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART4)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a58      	ldr	r2, [pc, #352]	; (8006500 <USART_GetClockSource+0x32c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d145      	bne.n	8006430 <USART_GetClockSource+0x25c>
  {
    if( IS_UART4_CLKSOURCE_PCLK1() )
 80063a4:	4b53      	ldr	r3, [pc, #332]	; (80064f4 <USART_GetClockSource+0x320>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <USART_GetClockSource+0x1f2>
 80063b2:	4b50      	ldr	r3, [pc, #320]	; (80064f4 <USART_GetClockSource+0x320>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <USART_GetClockSource+0x1f2>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]
 80063c4:	e166      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_SYSCLK() )
 80063c6:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <USART_GetClockSource+0x320>)
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <USART_GetClockSource+0x214>
 80063d4:	4b47      	ldr	r3, [pc, #284]	; (80064f4 <USART_GetClockSource+0x320>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <USART_GetClockSource+0x214>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80063e2:	2304      	movs	r3, #4
 80063e4:	73fb      	strb	r3, [r7, #15]
 80063e6:	e155      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_HSI() )
 80063e8:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <USART_GetClockSource+0x320>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <USART_GetClockSource+0x236>
 80063f6:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <USART_GetClockSource+0x320>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <USART_GetClockSource+0x236>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8006404:	2302      	movs	r3, #2
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e144      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART4_CLKSOURCE_LSE() )
 800640a:	4b3a      	ldr	r3, [pc, #232]	; (80064f4 <USART_GetClockSource+0x320>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 813d 	beq.w	8006694 <USART_GetClockSource+0x4c0>
 800641a:	4b36      	ldr	r3, [pc, #216]	; (80064f4 <USART_GetClockSource+0x320>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8135 	beq.w	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 800642a:	2308      	movs	r3, #8
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e131      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART5)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a34      	ldr	r2, [pc, #208]	; (8006504 <USART_GetClockSource+0x330>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d145      	bne.n	80064c4 <USART_GetClockSource+0x2f0>
  {
    if( IS_UART5_CLKSOURCE_PCLK1() )
 8006438:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <USART_GetClockSource+0x320>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <USART_GetClockSource+0x286>
 8006446:	4b2b      	ldr	r3, [pc, #172]	; (80064f4 <USART_GetClockSource+0x320>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <USART_GetClockSource+0x286>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	e11c      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_SYSCLK() )
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <USART_GetClockSource+0x320>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <USART_GetClockSource+0x2a8>
 8006468:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <USART_GetClockSource+0x320>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <USART_GetClockSource+0x2a8>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8006476:	2304      	movs	r3, #4
 8006478:	73fb      	strb	r3, [r7, #15]
 800647a:	e10b      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_HSI() )
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <USART_GetClockSource+0x320>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <USART_GetClockSource+0x2ca>
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <USART_GetClockSource+0x320>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <USART_GetClockSource+0x2ca>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 8006498:	2302      	movs	r3, #2
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	e0fa      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART5_CLKSOURCE_LSE() )
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <USART_GetClockSource+0x320>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80f3 	beq.w	8006694 <USART_GetClockSource+0x4c0>
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <USART_GetClockSource+0x320>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80eb 	beq.w	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 80064be:	2308      	movs	r3, #8
 80064c0:	73fb      	strb	r3, [r7, #15]
 80064c2:	e0e7      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == USART6)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a10      	ldr	r2, [pc, #64]	; (8006508 <USART_GetClockSource+0x334>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d154      	bne.n	8006576 <USART_GetClockSource+0x3a2>
  {
    if( IS_USART6_CLKSOURCE_PCLK2() )
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <USART_GetClockSource+0x320>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d118      	bne.n	800650c <USART_GetClockSource+0x338>
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <USART_GetClockSource+0x320>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d111      	bne.n	800650c <USART_GetClockSource+0x338>
    {
      clocksource = USART_CLOCKSOURCE_PCLK2;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e0d2      	b.n	8006694 <USART_GetClockSource+0x4c0>
 80064ee:	bf00      	nop
 80064f0:	40011000 	.word	0x40011000
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40004400 	.word	0x40004400
 80064fc:	40004800 	.word	0x40004800
 8006500:	40004c00 	.word	0x40004c00
 8006504:	40005000 	.word	0x40005000
 8006508:	40011400 	.word	0x40011400
    }
    else if( IS_USART6_CLKSOURCE_SYSCLK() )
 800650c:	4b65      	ldr	r3, [pc, #404]	; (80066a4 <USART_GetClockSource+0x4d0>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <USART_GetClockSource+0x35a>
 800651a:	4b62      	ldr	r3, [pc, #392]	; (80066a4 <USART_GetClockSource+0x4d0>)
 800651c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <USART_GetClockSource+0x35a>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 8006528:	2304      	movs	r3, #4
 800652a:	73fb      	strb	r3, [r7, #15]
 800652c:	e0b2      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_HSI() )
 800652e:	4b5d      	ldr	r3, [pc, #372]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <USART_GetClockSource+0x37c>
 800653c:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <USART_GetClockSource+0x4d0>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <USART_GetClockSource+0x37c>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 800654a:	2302      	movs	r3, #2
 800654c:	73fb      	strb	r3, [r7, #15]
 800654e:	e0a1      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_USART6_CLKSOURCE_LSE() )
 8006550:	4b54      	ldr	r3, [pc, #336]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 809a 	beq.w	8006694 <USART_GetClockSource+0x4c0>
 8006560:	4b50      	ldr	r3, [pc, #320]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8092 	beq.w	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8006570:	2308      	movs	r3, #8
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e08e      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART7)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a4b      	ldr	r2, [pc, #300]	; (80066a8 <USART_GetClockSource+0x4d4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d143      	bne.n	8006606 <USART_GetClockSource+0x432>
  {
    if( IS_UART7_CLKSOURCE_PCLK1() )
 800657e:	4b49      	ldr	r3, [pc, #292]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d109      	bne.n	80065a0 <USART_GetClockSource+0x3cc>
 800658c:	4b45      	ldr	r3, [pc, #276]	; (80066a4 <USART_GetClockSource+0x4d0>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <USART_GetClockSource+0x3cc>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e079      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_SYSCLK() )
 80065a0:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <USART_GetClockSource+0x4d0>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <USART_GetClockSource+0x3ee>
 80065ae:	4b3d      	ldr	r3, [pc, #244]	; (80066a4 <USART_GetClockSource+0x4d0>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <USART_GetClockSource+0x3ee>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 80065bc:	2304      	movs	r3, #4
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	e068      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_HSI() )
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <USART_GetClockSource+0x4d0>)
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <USART_GetClockSource+0x410>
 80065d0:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <USART_GetClockSource+0x4d0>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d102      	bne.n	80065e4 <USART_GetClockSource+0x410>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 80065de:	2302      	movs	r3, #2
 80065e0:	73fb      	strb	r3, [r7, #15]
 80065e2:	e057      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART7_CLKSOURCE_LSE() )
 80065e4:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <USART_GetClockSource+0x4d0>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d050      	beq.n	8006694 <USART_GetClockSource+0x4c0>
 80065f2:	4b2c      	ldr	r3, [pc, #176]	; (80066a4 <USART_GetClockSource+0x4d0>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d049      	beq.n	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8006600:	2308      	movs	r3, #8
 8006602:	73fb      	strb	r3, [r7, #15]
 8006604:	e046      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
  }
  else if (USARTx == UART8)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a28      	ldr	r2, [pc, #160]	; (80066ac <USART_GetClockSource+0x4d8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d142      	bne.n	8006694 <USART_GetClockSource+0x4c0>
  {
    if( IS_UART8_CLKSOURCE_PCLK1() )
 800660e:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <USART_GetClockSource+0x45c>
 800661c:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <USART_GetClockSource+0x4d0>)
 800661e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d102      	bne.n	8006630 <USART_GetClockSource+0x45c>
    {
      clocksource = USART_CLOCKSOURCE_PCLK1;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
 800662e:	e031      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_SYSCLK() )
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <USART_GetClockSource+0x47e>
 800663e:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <USART_GetClockSource+0x47e>
    {
      clocksource = USART_CLOCKSOURCE_SYSCLK;
 800664c:	2304      	movs	r3, #4
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e020      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_HSI() )
 8006652:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <USART_GetClockSource+0x4a0>
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <USART_GetClockSource+0x4a0>
    {
      clocksource = USART_CLOCKSOURCE_HSI;
 800666e:	2302      	movs	r3, #2
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e00f      	b.n	8006694 <USART_GetClockSource+0x4c0>
    }
    else if( IS_UART8_CLKSOURCE_LSE() )
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <USART_GetClockSource+0x4c0>
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <USART_GetClockSource+0x4d0>)
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USART_GetClockSource+0x4c0>
    {
      clocksource = USART_CLOCKSOURCE_LSE;
 8006690:	2308      	movs	r3, #8
 8006692:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return clocksource;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40007800 	.word	0x40007800
 80066ac:	40007c00 	.word	0x40007c00

080066b0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;
  USART_ClockSourceTypeDef clocksource = USART_CLOCKSOURCE_UNDEFINED;
 80066c6:	2310      	movs	r3, #16
 80066c8:	76fb      	strb	r3, [r7, #27]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066e2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	4b47      	ldr	r3, [pc, #284]	; (800681c <USART_Init+0x16c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006710:	4313      	orrs	r3, r2
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	4313      	orrs	r3, r2
 8006716:	61fb      	str	r3, [r7, #28]
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	4313      	orrs	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800673c:	f107 0308 	add.w	r3, r7, #8
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe ff6b 	bl	800561c <RCC_GetClocksFreq>
  clocksource = USART_GetClockSource(USARTx);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fd44 	bl	80061d4 <USART_GetClockSource>
 800674c:	4603      	mov	r3, r0
 800674e:	76fb      	strb	r3, [r7, #27]
  
  if( clocksource == USART_CLOCKSOURCE_PCLK1 )
 8006750:	7efb      	ldrb	r3, [r7, #27]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <USART_Init+0xac>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	e014      	b.n	8006786 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_PCLK2 )
 800675c:	7efb      	ldrb	r3, [r7, #27]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d102      	bne.n	8006768 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	e00e      	b.n	8006786 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_SYSCLK )
 8006768:	7efb      	ldrb	r3, [r7, #27]
 800676a:	2b04      	cmp	r3, #4
 800676c:	d102      	bne.n	8006774 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.SYSCLK_Frequency;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	e008      	b.n	8006786 <USART_Init+0xd6>
  }
  else if( clocksource == USART_CLOCKSOURCE_HSI )
 8006774:	7efb      	ldrb	r3, [r7, #27]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d102      	bne.n	8006780 <USART_Init+0xd0>
  {
    apbclock = HSI_VALUE;
 800677a:	4b29      	ldr	r3, [pc, #164]	; (8006820 <USART_Init+0x170>)
 800677c:	623b      	str	r3, [r7, #32]
 800677e:	e002      	b.n	8006786 <USART_Init+0xd6>
  }
  else
  {
    apbclock = LSE_VALUE;
 8006780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006784:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d011      	beq.n	80067b6 <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	005a      	lsls	r2, r3, #1
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	fbb2 f3f3 	udiv	r3, r2, r3
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ac:	fb02 f201 	mul.w	r2, r2, r1
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e00e      	b.n	80067d4 <USART_Init+0x124>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6a3a      	ldr	r2, [r7, #32]
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80067cc:	fb02 f201 	mul.w	r2, r2, r1
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	61fb      	str	r3, [r7, #28]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	085a      	lsrs	r2, r3, #1
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d802      	bhi.n	80067e6 <USART_Init+0x136>
  {
    divider++;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	3301      	adds	r3, #1
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <USART_Init+0x15a>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	61fb      	str	r3, [r7, #28]
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006802:	4013      	ands	r3, r2
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	4313      	orrs	r3, r2
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60da      	str	r2, [r3, #12]
}
 8006812:	bf00      	nop
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	efffe9f3 	.word	0xefffe9f3
 8006820:	00f42400 	.word	0x00f42400

08006824 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800683e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800684e:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4313      	orrs	r3, r2
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop

08006870 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	60da      	str	r2, [r3, #12]
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f043 0201 	orr.w	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80068ba:	e005      	b.n	80068c8 <USART_Cmd+0x2c>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 0201 	bic.w	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]
  }
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)USART_TDR_TDR);
 80068e0:	887b      	ldrh	r3, [r7, #2]
 80068e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop

080068f8 <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)USART_RDR_RDR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	b29b      	uxth	r3, r3
 8006906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690a:	b29b      	uxth	r3, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8006918:	b480      	push	{r7}
 800691a:	b089      	sub	sp, #36	; 0x24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	121b      	asrs	r3, r3, #8
 800693e:	b2db      	uxtb	r3, r3
 8006940:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8006948:	2201      	movs	r2, #1
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d103      	bne.n	8006960 <USART_ITConfig+0x48>
  {
    usartxbase += 0x04;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	3304      	adds	r3, #4
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e005      	b.n	800696c <USART_ITConfig+0x54>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b03      	cmp	r3, #3
 8006964:	d102      	bne.n	800696c <USART_ITConfig+0x54>
  {
    usartxbase += 0x08;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	3308      	adds	r3, #8
 800696a:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <USART_ITConfig+0x68>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	6811      	ldr	r1, [r2, #0]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	430a      	orrs	r2, r1
 800697c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800697e:	e006      	b.n	800698e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	6811      	ldr	r1, [r2, #0]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	43d2      	mvns	r2, r2
 800698a:	400a      	ands	r2, r1
 800698c:	601a      	str	r2, [r3, #0]
  }
}
 800698e:	bf00      	nop
 8006990:	3724      	adds	r7, #36	; 0x24
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop

0800699c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69da      	ldr	r2, [r3, #28]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	e001      	b.n	80069c0 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80069e6:	2300      	movs	r3, #0
 80069e8:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	121b      	asrs	r3, r3, #8
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80069f8:	2201      	movs	r2, #1
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d105      	bne.n	8006a14 <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	e00d      	b.n	8006a30 <USART_GetITStatus+0x60>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d105      	bne.n	8006a26 <USART_GetITStatus+0x56>
  {
    itmask &= USARTx->CR2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4013      	ands	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e004      	b.n	8006a30 <USART_GetITStatus+0x60>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8006a36:	2201      	movs	r2, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4013      	ands	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <USART_GetITStatus+0x8c>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <USART_GetITStatus+0x8c>
  {
    bitstatus = SET;
 8006a56:	2301      	movs	r3, #1
 8006a58:	74fb      	strb	r3, [r7, #19]
 8006a5a:	e001      	b.n	8006a60 <USART_GetITStatus+0x90>
  }
  else
  {
    bitstatus = RESET;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8006a60:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop

08006a70 <USART_ClearITPendingBit>:
  *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
  *           USART_RQR (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8006a88:	2201      	movs	r2, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 0208 	add.w	r2, r3, #8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f103 0208 	add.w	r2, r3, #8
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 0208 	add.w	r2, r3, #8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	601a      	str	r2, [r3, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d103      	bne.n	8006b68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e00c      	b.n	8006b82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e002      	b.n	8006b76 <vListInsert+0x2e>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d9f6      	bls.n	8006b70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop

08006bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6892      	ldr	r2, [r2, #8]
 8006bd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6852      	ldr	r2, [r2, #4]
 8006bdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d103      	bne.n	8006bf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3b04      	subs	r3, #4
 8006c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 0201 	bic.w	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3b04      	subs	r3, #4
 8006c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c40:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <pxPortInitialiseStack+0x64>)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b14      	subs	r3, #20
 8006c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3b04      	subs	r3, #4
 8006c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f06f 0202 	mvn.w	r2, #2
 8006c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3b20      	subs	r3, #32
 8006c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c66:	68fb      	ldr	r3, [r7, #12]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	08006c79 	.word	0x08006c79

08006c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <prvTaskExitError+0x34>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d004      	beq.n	8006c92 <prvTaskExitError+0x1a>
 8006c88:	4909      	ldr	r1, [pc, #36]	; (8006cb0 <prvTaskExitError+0x38>)
 8006c8a:	f240 1005 	movw	r0, #261	; 0x105
 8006c8e:	f7fb f907 	bl	8001ea0 <vAssertCalled>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c92:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006c96:	b672      	cpsid	i
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	b662      	cpsie	i
 8006ca6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8006ca8:	e7fe      	b.n	8006ca8 <prvTaskExitError+0x30>
 8006caa:	bf00      	nop
 8006cac:	20010010 	.word	0x20010010
 8006cb0:	08014a74 	.word	0x08014a74
	...

08006cc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cc0:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <pxCurrentTCBConst2>)
 8006cc2:	6819      	ldr	r1, [r3, #0]
 8006cc4:	6808      	ldr	r0, [r1, #0]
 8006cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	f380 8809 	msr	PSP, r0
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f380 8811 	msr	BASEPRI, r0
 8006cda:	4770      	bx	lr
 8006cdc:	f3af 8000 	nop.w

08006ce0 <pxCurrentTCBConst2>:
 8006ce0:	20014338 	.word	0x20014338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ce8:	4806      	ldr	r0, [pc, #24]	; (8006d04 <prvPortStartFirstTask+0x1c>)
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	6800      	ldr	r0, [r0, #0]
 8006cee:	f380 8808 	msr	MSP, r0
 8006cf2:	b662      	cpsie	i
 8006cf4:	b661      	cpsie	f
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	df00      	svc	0
 8006d00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d02:	bf00      	nop
 8006d04:	e000ed08 	.word	0xe000ed08

08006d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <xPortStartScheduler+0xb8>)
 8006d10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22ff      	movs	r2, #255	; 0xff
 8006d1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <xPortStartScheduler+0xbc>)
 8006d34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d38:	2207      	movs	r2, #7
 8006d3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d3c:	e009      	b.n	8006d52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d3e:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dbf0      	blt.n	8006d3e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	4a19      	ldr	r2, [pc, #100]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d6e:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <xPortStartScheduler+0xc0>)
 8006d70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d7a:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <xPortStartScheduler+0xc4>)
 8006d7c:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <xPortStartScheduler+0xc4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d86:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <xPortStartScheduler+0xc4>)
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <xPortStartScheduler+0xc4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d92:	f000 f8cb 	bl	8006f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d96:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <xPortStartScheduler+0xc8>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d9c:	f000 f8e2 	bl	8006f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006da0:	4a0c      	ldr	r2, [pc, #48]	; (8006dd4 <xPortStartScheduler+0xcc>)
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <xPortStartScheduler+0xcc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006daa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dac:	f7ff ff9c 	bl	8006ce8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006db0:	f7ff ff62 	bl	8006c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	e000e400 	.word	0xe000e400
 8006dc4:	20010718 	.word	0x20010718
 8006dc8:	2001071c 	.word	0x2001071c
 8006dcc:	e000ed20 	.word	0xe000ed20
 8006dd0:	20010010 	.word	0x20010010
 8006dd4:	e000ef34 	.word	0xe000ef34

08006dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006de2:	b672      	cpsid	i
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	b662      	cpsie	i
 8006df2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <vPortEnterCritical+0x4c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <vPortEnterCritical+0x4c>)
 8006dfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <vPortEnterCritical+0x4c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d109      	bne.n	8006e1a <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e06:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <vPortEnterCritical+0x50>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <vPortEnterCritical+0x42>
 8006e10:	4906      	ldr	r1, [pc, #24]	; (8006e2c <vPortEnterCritical+0x54>)
 8006e12:	f240 1097 	movw	r0, #407	; 0x197
 8006e16:	f7fb f843 	bl	8001ea0 <vAssertCalled>
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20010010 	.word	0x20010010
 8006e28:	e000ed04 	.word	0xe000ed04
 8006e2c:	08014a74 	.word	0x08014a74

08006e30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <vPortExitCritical+0x3c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <vPortExitCritical+0x18>
 8006e3e:	490c      	ldr	r1, [pc, #48]	; (8006e70 <vPortExitCritical+0x40>)
 8006e40:	f44f 70cf 	mov.w	r0, #414	; 0x19e
 8006e44:	f7fb f82c 	bl	8001ea0 <vAssertCalled>
	uxCriticalNesting--;
 8006e48:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <vPortExitCritical+0x3c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <vPortExitCritical+0x3c>)
 8006e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <vPortExitCritical+0x3c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <vPortExitCritical+0x34>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20010010 	.word	0x20010010
 8006e70:	08014a74 	.word	0x08014a74
	...

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f01e 0f10 	tst.w	lr, #16
 8006e90:	bf08      	it	eq
 8006e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	6010      	str	r0, [r2, #0]
 8006e9c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006ea0:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006ea4:	b672      	cpsid	i
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	f001 fd4c 	bl	8008950 <vTaskSwitchContext>
 8006eb8:	f04f 0000 	mov.w	r0, #0
 8006ebc:	f380 8811 	msr	BASEPRI, r0
 8006ec0:	bc08      	pop	{r3}
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	6808      	ldr	r0, [r1, #0]
 8006ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f01e 0f10 	tst.w	lr, #16
 8006ece:	bf08      	it	eq
 8006ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ed4:	f380 8809 	msr	PSP, r0
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	20014338 	.word	0x20014338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006eee:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006ef2:	b672      	cpsid	i
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	b662      	cpsie	i
 8006f02:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f04:	f001 fc6a 	bl	80087dc <xTaskIncrementTick>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <SysTick_Handler+0x40>)
 8006f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <vPortSetupTimerInterrupt+0x28>)
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <vPortSetupTimerInterrupt+0x2c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4909      	ldr	r1, [pc, #36]	; (8006f5c <vPortSetupTimerInterrupt+0x30>)
 8006f38:	fba1 1303 	umull	r1, r3, r1, r3
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <vPortSetupTimerInterrupt+0x34>)
 8006f44:	2207      	movs	r2, #7
 8006f46:	601a      	str	r2, [r3, #0]
}
 8006f48:	bf00      	nop
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	e000e014 	.word	0xe000e014
 8006f58:	2001002c 	.word	0x2001002c
 8006f5c:	10624dd3 	.word	0x10624dd3
 8006f60:	e000e010 	.word	0xe000e010

08006f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f74 <vPortEnableVFP+0x10>
 8006f68:	6801      	ldr	r1, [r0, #0]
 8006f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6e:	6001      	str	r1, [r0, #0]
 8006f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f72:	bf00      	nop
 8006f74:	e000ed88 	.word	0xe000ed88

08006f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006f7e:	f3ef 8305 	mrs	r3, IPSR
 8006f82:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	d90e      	bls.n	8006fa8 <vPortValidateInterruptPriority+0x30>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f8a:	4a10      	ldr	r2, [pc, #64]	; (8006fcc <vPortValidateInterruptPriority+0x54>)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <vPortValidateInterruptPriority+0x58>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	78fa      	ldrb	r2, [r7, #3]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d204      	bcs.n	8006fa8 <vPortValidateInterruptPriority+0x30>
 8006f9e:	490d      	ldr	r1, [pc, #52]	; (8006fd4 <vPortValidateInterruptPriority+0x5c>)
 8006fa0:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8006fa4:	f7fa ff7c 	bl	8001ea0 <vAssertCalled>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <vPortValidateInterruptPriority+0x60>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <vPortValidateInterruptPriority+0x64>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d904      	bls.n	8006fc2 <vPortValidateInterruptPriority+0x4a>
 8006fb8:	4906      	ldr	r1, [pc, #24]	; (8006fd4 <vPortValidateInterruptPriority+0x5c>)
 8006fba:	f44f 703b 	mov.w	r0, #748	; 0x2ec
 8006fbe:	f7fa ff6f 	bl	8001ea0 <vAssertCalled>
	}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	e000e3f0 	.word	0xe000e3f0
 8006fd0:	20010718 	.word	0x20010718
 8006fd4:	08014a74 	.word	0x08014a74
 8006fd8:	e000ed0c 	.word	0xe000ed0c
 8006fdc:	2001071c 	.word	0x2001071c

08006fe0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006fec:	f001 faa4 	bl	8008538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ff0:	4b50      	ldr	r3, [pc, #320]	; (8007134 <pvPortMalloc+0x154>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ff8:	f000 f8f8 	bl	80071ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ffc:	4b4e      	ldr	r3, [pc, #312]	; (8007138 <pvPortMalloc+0x158>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4013      	ands	r3, r2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d17f      	bne.n	8007108 <pvPortMalloc+0x128>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d016      	beq.n	800703c <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800700e:	2208      	movs	r2, #8
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4413      	add	r3, r2
 8007014:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	3308      	adds	r3, #8
 8007028:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <pvPortMalloc+0x5c>
 8007034:	4941      	ldr	r1, [pc, #260]	; (800713c <pvPortMalloc+0x15c>)
 8007036:	20bb      	movs	r0, #187	; 0xbb
 8007038:	f7fa ff32 	bl	8001ea0 <vAssertCalled>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d062      	beq.n	8007108 <pvPortMalloc+0x128>
 8007042:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <pvPortMalloc+0x160>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	429a      	cmp	r2, r3
 800704a:	d85d      	bhi.n	8007108 <pvPortMalloc+0x128>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800704c:	4b3d      	ldr	r3, [pc, #244]	; (8007144 <pvPortMalloc+0x164>)
 800704e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007050:	4b3c      	ldr	r3, [pc, #240]	; (8007144 <pvPortMalloc+0x164>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007056:	e004      	b.n	8007062 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d203      	bcs.n	8007074 <pvPortMalloc+0x94>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f1      	bne.n	8007058 <pvPortMalloc+0x78>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007074:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <pvPortMalloc+0x154>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	429a      	cmp	r2, r3
 800707c:	d044      	beq.n	8007108 <pvPortMalloc+0x128>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2208      	movs	r2, #8
 8007084:	4413      	add	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	2308      	movs	r3, #8
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	429a      	cmp	r2, r3
 800709e:	d918      	bls.n	80070d2 <pvPortMalloc+0xf2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <pvPortMalloc+0xda>
 80070b2:	4922      	ldr	r1, [pc, #136]	; (800713c <pvPortMalloc+0x15c>)
 80070b4:	20e8      	movs	r0, #232	; 0xe8
 80070b6:	f7fa fef3 	bl	8001ea0 <vAssertCalled>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	1ad2      	subs	r2, r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070cc:	68b8      	ldr	r0, [r7, #8]
 80070ce:	f000 f8ef 	bl	80072b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070d2:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <pvPortMalloc+0x160>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	4a18      	ldr	r2, [pc, #96]	; (8007140 <pvPortMalloc+0x160>)
 80070de:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <pvPortMalloc+0x160>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b18      	ldr	r3, [pc, #96]	; (8007148 <pvPortMalloc+0x168>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d203      	bcs.n	80070f4 <pvPortMalloc+0x114>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ec:	4b14      	ldr	r3, [pc, #80]	; (8007140 <pvPortMalloc+0x160>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a15      	ldr	r2, [pc, #84]	; (8007148 <pvPortMalloc+0x168>)
 80070f2:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <pvPortMalloc+0x158>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007108:	f001 fa24 	bl	8008554 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <pvPortMalloc+0x136>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007112:	f7fa feab 	bl	8001e6c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <pvPortMalloc+0x14a>
 8007120:	4906      	ldr	r1, [pc, #24]	; (800713c <pvPortMalloc+0x15c>)
 8007122:	f44f 7094 	mov.w	r0, #296	; 0x128
 8007126:	f7fa febb 	bl	8001ea0 <vAssertCalled>
	return pvReturn;
 800712a:	68fb      	ldr	r3, [r7, #12]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20014328 	.word	0x20014328
 8007138:	20014334 	.word	0x20014334
 800713c:	08014aa8 	.word	0x08014aa8
 8007140:	2001432c 	.word	0x2001432c
 8007144:	20014320 	.word	0x20014320
 8007148:	20014330 	.word	0x20014330

0800714c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d03c      	beq.n	80071d8 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800715e:	2308      	movs	r3, #8
 8007160:	425b      	negs	r3, r3
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <vPortFree+0x94>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4013      	ands	r3, r2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <vPortFree+0x38>
 800717a:	491a      	ldr	r1, [pc, #104]	; (80071e4 <vPortFree+0x98>)
 800717c:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8007180:	f7fa fe8e 	bl	8001ea0 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <vPortFree+0x4a>
 800718c:	4915      	ldr	r1, [pc, #84]	; (80071e4 <vPortFree+0x98>)
 800718e:	f240 103d 	movw	r0, #317	; 0x13d
 8007192:	f7fa fe85 	bl	8001ea0 <vAssertCalled>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <vPortFree+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d019      	beq.n	80071d8 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <vPortFree+0x94>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	401a      	ands	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071bc:	f001 f9bc 	bl	8008538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <vPortFree+0x9c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <vPortFree+0x9c>)
 80071cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ce:	68b8      	ldr	r0, [r7, #8]
 80071d0:	f000 f86e 	bl	80072b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071d4:	f001 f9be 	bl	8008554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071d8:	bf00      	nop
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20014334 	.word	0x20014334
 80071e4:	08014aa8 	.word	0x08014aa8
 80071e8:	2001432c 	.word	0x2001432c

080071ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <prvHeapInit+0xac>)
 80071fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3307      	adds	r3, #7
 800720a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0307 	bic.w	r3, r3, #7
 8007212:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <prvHeapInit+0xac>)
 800721c:	4413      	add	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007224:	4a1d      	ldr	r2, [pc, #116]	; (800729c <prvHeapInit+0xb0>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800722a:	4b1c      	ldr	r3, [pc, #112]	; (800729c <prvHeapInit+0xb0>)
 800722c:	2200      	movs	r2, #0
 800722e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007238:	2208      	movs	r2, #8
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <prvHeapInit+0xb4>)
 800724c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <prvHeapInit+0xb4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <prvHeapInit+0xb4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	1ad2      	subs	r2, r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <prvHeapInit+0xb4>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <prvHeapInit+0xb8>)
 800727a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4a09      	ldr	r2, [pc, #36]	; (80072a8 <prvHeapInit+0xbc>)
 8007282:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007284:	4b09      	ldr	r3, [pc, #36]	; (80072ac <prvHeapInit+0xc0>)
 8007286:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800728a:	601a      	str	r2, [r3, #0]
}
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20010720 	.word	0x20010720
 800729c:	20014320 	.word	0x20014320
 80072a0:	20014328 	.word	0x20014328
 80072a4:	20014330 	.word	0x20014330
 80072a8:	2001432c 	.word	0x2001432c
 80072ac:	20014334 	.word	0x20014334

080072b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072b8:	4b28      	ldr	r3, [pc, #160]	; (800735c <prvInsertBlockIntoFreeList+0xac>)
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e002      	b.n	80072c4 <prvInsertBlockIntoFreeList+0x14>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d3f7      	bcc.n	80072be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d108      	bne.n	80072f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	441a      	add	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d118      	bne.n	8007338 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <prvInsertBlockIntoFreeList+0xb0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d00d      	beq.n	800732e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	441a      	add	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e008      	b.n	8007340 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <prvInsertBlockIntoFreeList+0xb0>)
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e003      	b.n	8007340 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d002      	beq.n	800734e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20014320 	.word	0x20014320
 8007360:	20014328 	.word	0x20014328

08007364 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <xQueueGenericReset+0x1e>
 8007378:	492a      	ldr	r1, [pc, #168]	; (8007424 <xQueueGenericReset+0xc0>)
 800737a:	f240 101b 	movw	r0, #283	; 0x11b
 800737e:	f7fa fd8f 	bl	8001ea0 <vAssertCalled>

	taskENTER_CRITICAL();
 8007382:	f7ff fd29 	bl	8006dd8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	441a      	add	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b2:	3b01      	subs	r3, #1
 80073b4:	68f9      	ldr	r1, [r7, #12]
 80073b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	441a      	add	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	22ff      	movs	r2, #255	; 0xff
 80073c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	22ff      	movs	r2, #255	; 0xff
 80073ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d114      	bne.n	8007402 <xQueueGenericReset+0x9e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01a      	beq.n	8007416 <xQueueGenericReset+0xb2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3310      	adds	r3, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fb95 	bl	8008b14 <xTaskRemoveFromEventList>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d012      	beq.n	8007416 <xQueueGenericReset+0xb2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <xQueueGenericReset+0xc4>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	e009      	b.n	8007416 <xQueueGenericReset+0xb2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3310      	adds	r3, #16
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fb4c 	bl	8006aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3324      	adds	r3, #36	; 0x24
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fb47 	bl	8006aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007416:	f7ff fd0b 	bl	8006e30 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800741a:	2301      	movs	r3, #1
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	08014ad4 	.word	0x08014ad4
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <xQueueGenericCreate+0x1e>
 8007440:	4914      	ldr	r1, [pc, #80]	; (8007494 <xQueueGenericCreate+0x68>)
 8007442:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8007446:	f7fa fd2b 	bl	8001ea0 <vAssertCalled>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007450:	2300      	movs	r3, #0
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	e004      	b.n	8007460 <xQueueGenericCreate+0x34>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	3354      	adds	r3, #84	; 0x54
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fdbb 	bl	8006fe0 <pvPortMalloc>
 800746a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <xQueueGenericCreate+0x5e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	3354      	adds	r3, #84	; 0x54
 8007476:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007478:	79fa      	ldrb	r2, [r7, #7]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4613      	mov	r3, r2
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f807 	bl	8007498 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800748a:	69bb      	ldr	r3, [r7, #24]
	}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	08014ad4 	.word	0x08014ad4

08007498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074c6:	2101      	movs	r1, #1
 80074c8:	69b8      	ldr	r0, [r7, #24]
 80074ca:	f7ff ff4b 	bl	8007364 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2200      	movs	r2, #0
 80074da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00e      	beq.n	8007510 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007504:	2300      	movs	r3, #0
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f81c 	bl	8007548 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007522:	2301      	movs	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	461a      	mov	r2, r3
 800752e:	6939      	ldr	r1, [r7, #16]
 8007530:	6978      	ldr	r0, [r7, #20]
 8007532:	f7ff ff7b 	bl	800742c <xQueueGenericCreate>
 8007536:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff ffd3 	bl	80074e4 <prvInitialiseMutex>

		return pxNewQueue;
 800753e:	68fb      	ldr	r3, [r7, #12]
	}
 8007540:	4618      	mov	r0, r3
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08a      	sub	sp, #40	; 0x28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <xQueueGenericSend+0x26>
 8007564:	4974      	ldr	r1, [pc, #464]	; (8007738 <xQueueGenericSend+0x1f0>)
 8007566:	f240 20d9 	movw	r0, #729	; 0x2d9
 800756a:	f7fa fc99 	bl	8001ea0 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <xQueueGenericSend+0x34>
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <xQueueGenericSend+0x38>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <xQueueGenericSend+0x3a>
 8007580:	2300      	movs	r3, #0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <xQueueGenericSend+0x48>
 8007586:	496c      	ldr	r1, [pc, #432]	; (8007738 <xQueueGenericSend+0x1f0>)
 8007588:	f240 20da 	movw	r0, #730	; 0x2da
 800758c:	f7fa fc88 	bl	8001ea0 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d103      	bne.n	800759e <xQueueGenericSend+0x56>
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <xQueueGenericSend+0x5a>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <xQueueGenericSend+0x5c>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <xQueueGenericSend+0x6a>
 80075a8:	4963      	ldr	r1, [pc, #396]	; (8007738 <xQueueGenericSend+0x1f0>)
 80075aa:	f240 20db 	movw	r0, #731	; 0x2db
 80075ae:	f7fa fc77 	bl	8001ea0 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b2:	f001 fd23 	bl	8008ffc <xTaskGetSchedulerState>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <xQueueGenericSend+0x7a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <xQueueGenericSend+0x7e>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <xQueueGenericSend+0x80>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <xQueueGenericSend+0x8e>
 80075cc:	495a      	ldr	r1, [pc, #360]	; (8007738 <xQueueGenericSend+0x1f0>)
 80075ce:	f240 20de 	movw	r0, #734	; 0x2de
 80075d2:	f7fa fc65 	bl	8001ea0 <vAssertCalled>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d6:	f7ff fbff 	bl	8006dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d302      	bcc.n	80075ec <xQueueGenericSend+0xa4>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d13d      	bne.n	8007668 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	6a38      	ldr	r0, [r7, #32]
 80075f2:	f000 fad5 	bl	8007ba0 <prvCopyDataToQueue>
 80075f6:	61f8      	str	r0, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00f      	beq.n	8007620 <xQueueGenericSend+0xd8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6a38      	ldr	r0, [r7, #32]
 8007604:	f000 fc46 	bl	8007e94 <prvNotifyQueueSetContainer>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d028      	beq.n	8007660 <xQueueGenericSend+0x118>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800760e:	4b4b      	ldr	r3, [pc, #300]	; (800773c <xQueueGenericSend+0x1f4>)
 8007610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	e01f      	b.n	8007660 <xQueueGenericSend+0x118>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	d010      	beq.n	800764a <xQueueGenericSend+0x102>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fa71 	bl	8008b14 <xTaskRemoveFromEventList>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d013      	beq.n	8007660 <xQueueGenericSend+0x118>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007638:	4b40      	ldr	r3, [pc, #256]	; (800773c <xQueueGenericSend+0x1f4>)
 800763a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	e00a      	b.n	8007660 <xQueueGenericSend+0x118>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d007      	beq.n	8007660 <xQueueGenericSend+0x118>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8007650:	4b3a      	ldr	r3, [pc, #232]	; (800773c <xQueueGenericSend+0x1f4>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007660:	f7ff fbe6 	bl	8006e30 <vPortExitCritical>
				return pdPASS;
 8007664:	2301      	movs	r3, #1
 8007666:	e063      	b.n	8007730 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800766e:	f7ff fbdf 	bl	8006e30 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007672:	2300      	movs	r3, #0
 8007674:	e05c      	b.n	8007730 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	4618      	mov	r0, r3
 8007682:	f001 faa5 	bl	8008bd0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800768a:	f7ff fbd1 	bl	8006e30 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800768e:	f000 ff53 	bl	8008538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007692:	f7ff fba1 	bl	8006dd8 <vPortEnterCritical>
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800769c:	b25b      	sxtb	r3, r3
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d103      	bne.n	80076ac <xQueueGenericSend+0x164>
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x17a>
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076c2:	f7ff fbb5 	bl	8006e30 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076c6:	1d3a      	adds	r2, r7, #4
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fa9c 	bl	8008c0c <xTaskCheckForTimeOut>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d124      	bne.n	8007724 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076da:	6a38      	ldr	r0, [r7, #32]
 80076dc:	f000 fb66 	bl	8007dac <prvIsQueueFull>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d018      	beq.n	8007718 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	3310      	adds	r3, #16
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f9c8 	bl	8008a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076f4:	6a38      	ldr	r0, [r7, #32]
 80076f6:	f000 fae3 	bl	8007cc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076fa:	f000 ff2b 	bl	8008554 <xTaskResumeAll>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	f47f af68 	bne.w	80075d6 <xQueueGenericSend+0x8e>
				{
					portYIELD_WITHIN_API();
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <xQueueGenericSend+0x1f4>)
 8007708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	e75e      	b.n	80075d6 <xQueueGenericSend+0x8e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007718:	6a38      	ldr	r0, [r7, #32]
 800771a:	f000 fad1 	bl	8007cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800771e:	f000 ff19 	bl	8008554 <xTaskResumeAll>
 8007722:	e758      	b.n	80075d6 <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007724:	6a38      	ldr	r0, [r7, #32]
 8007726:	f000 facb 	bl	8007cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800772a:	f000 ff13 	bl	8008554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800772e:	2300      	movs	r3, #0
		}
	}
}
 8007730:	4618      	mov	r0, r3
 8007732:	3728      	adds	r7, #40	; 0x28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	08014ad4 	.word	0x08014ad4
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	; 0x30
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <xQueueGenericSendFromISR+0x22>
 8007758:	4945      	ldr	r1, [pc, #276]	; (8007870 <xQueueGenericSendFromISR+0x130>)
 800775a:	f240 309f 	movw	r0, #927	; 0x39f
 800775e:	f7fa fb9f 	bl	8001ea0 <vAssertCalled>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <xQueueGenericSendFromISR+0x30>
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <xQueueGenericSendFromISR+0x34>
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <xQueueGenericSendFromISR+0x36>
 8007774:	2300      	movs	r3, #0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d104      	bne.n	8007784 <xQueueGenericSendFromISR+0x44>
 800777a:	493d      	ldr	r1, [pc, #244]	; (8007870 <xQueueGenericSendFromISR+0x130>)
 800777c:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 8007780:	f7fa fb8e 	bl	8001ea0 <vAssertCalled>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d103      	bne.n	8007792 <xQueueGenericSendFromISR+0x52>
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <xQueueGenericSendFromISR+0x56>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueGenericSendFromISR+0x58>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <xQueueGenericSendFromISR+0x66>
 800779c:	4934      	ldr	r1, [pc, #208]	; (8007870 <xQueueGenericSendFromISR+0x130>)
 800779e:	f240 30a1 	movw	r0, #929	; 0x3a1
 80077a2:	f7fa fb7d 	bl	8001ea0 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077a6:	f7ff fbe7 	bl	8006f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077aa:	f3ef 8211 	mrs	r2, BASEPRI
 80077ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077b2:	b672      	cpsid	i
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	b662      	cpsie	i
 80077c2:	61ba      	str	r2, [r7, #24]
 80077c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077c8:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <xQueueGenericSendFromISR+0x9c>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d13c      	bne.n	8007856 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e2:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ea:	f000 f9d9 	bl	8007ba0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d124      	bne.n	8007842 <xQueueGenericSendFromISR+0x102>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <xQueueGenericSendFromISR+0xdc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007804:	f000 fb46 	bl	8007e94 <prvNotifyQueueSetContainer>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d020      	beq.n	8007850 <xQueueGenericSendFromISR+0x110>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01d      	beq.n	8007850 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e019      	b.n	8007850 <xQueueGenericSendFromISR+0x110>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d015      	beq.n	8007850 <xQueueGenericSendFromISR+0x110>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	3324      	adds	r3, #36	; 0x24
 8007828:	4618      	mov	r0, r3
 800782a:	f001 f973 	bl	8008b14 <xTaskRemoveFromEventList>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <xQueueGenericSendFromISR+0x110>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <xQueueGenericSendFromISR+0x110>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e006      	b.n	8007850 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007842:	7ffb      	ldrb	r3, [r7, #31]
 8007844:	3301      	adds	r3, #1
 8007846:	b2db      	uxtb	r3, r3
 8007848:	b25a      	sxtb	r2, r3
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007850:	2301      	movs	r3, #1
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8007854:	e001      	b.n	800785a <xQueueGenericSendFromISR+0x11a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007856:	2300      	movs	r3, #0
 8007858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007866:	4618      	mov	r0, r3
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	08014ad4 	.word	0x08014ad4

08007874 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007882:	2300      	movs	r3, #0
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <xQueueGenericReceive+0x26>
 8007890:	4979      	ldr	r1, [pc, #484]	; (8007a78 <xQueueGenericReceive+0x204>)
 8007892:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8007896:	f7fa fb03 	bl	8001ea0 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <xQueueGenericReceive+0x34>
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <xQueueGenericReceive+0x38>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <xQueueGenericReceive+0x3a>
 80078ac:	2300      	movs	r3, #0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <xQueueGenericReceive+0x48>
 80078b2:	4971      	ldr	r1, [pc, #452]	; (8007a78 <xQueueGenericReceive+0x204>)
 80078b4:	f240 40dd 	movw	r0, #1245	; 0x4dd
 80078b8:	f7fa faf2 	bl	8001ea0 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078bc:	f001 fb9e 	bl	8008ffc <xTaskGetSchedulerState>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <xQueueGenericReceive+0x58>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <xQueueGenericReceive+0x5c>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <xQueueGenericReceive+0x5e>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d104      	bne.n	80078e0 <xQueueGenericReceive+0x6c>
 80078d6:	4968      	ldr	r1, [pc, #416]	; (8007a78 <xQueueGenericReceive+0x204>)
 80078d8:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 80078dc:	f7fa fae0 	bl	8001ea0 <vAssertCalled>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e0:	f7ff fa7a 	bl	8006dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d046      	beq.n	800797e <xQueueGenericReceive+0x10a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	6a38      	ldr	r0, [r7, #32]
 80078fa:	f000 f9bb 	bl	8007c74 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d121      	bne.n	8007948 <xQueueGenericReceive+0xd4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	1e5a      	subs	r2, r3, #1
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <xQueueGenericReceive+0xaa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007914:	f001 fd3e 	bl	8009394 <pvTaskIncrementMutexHeldCount>
 8007918:	4602      	mov	r2, r0
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d027      	beq.n	8007976 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	3310      	adds	r3, #16
 800792a:	4618      	mov	r0, r3
 800792c:	f001 f8f2 	bl	8008b14 <xTaskRemoveFromEventList>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01f      	beq.n	8007976 <xQueueGenericReceive+0x102>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8007936:	4b51      	ldr	r3, [pc, #324]	; (8007a7c <xQueueGenericReceive+0x208>)
 8007938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	e016      	b.n	8007976 <xQueueGenericReceive+0x102>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00f      	beq.n	8007976 <xQueueGenericReceive+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	3324      	adds	r3, #36	; 0x24
 800795a:	4618      	mov	r0, r3
 800795c:	f001 f8da 	bl	8008b14 <xTaskRemoveFromEventList>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <xQueueGenericReceive+0x102>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8007966:	4b45      	ldr	r3, [pc, #276]	; (8007a7c <xQueueGenericReceive+0x208>)
 8007968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8007976:	f7ff fa5b 	bl	8006e30 <vPortExitCritical>
				return pdPASS;
 800797a:	2301      	movs	r3, #1
 800797c:	e077      	b.n	8007a6e <xQueueGenericReceive+0x1fa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <xQueueGenericReceive+0x118>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007984:	f7ff fa54 	bl	8006e30 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007988:	2300      	movs	r3, #0
 800798a:	e070      	b.n	8007a6e <xQueueGenericReceive+0x1fa>
				}
				else if( xEntryTimeSet == pdFALSE )
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <xQueueGenericReceive+0x12c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8007992:	f107 0310 	add.w	r3, r7, #16
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f91a 	bl	8008bd0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a0:	f7ff fa46 	bl	8006e30 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a4:	f000 fdc8 	bl	8008538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a8:	f7ff fa16 	bl	8006dd8 <vPortEnterCritical>
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d103      	bne.n	80079c2 <xQueueGenericReceive+0x14e>
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d103      	bne.n	80079d8 <xQueueGenericReceive+0x164>
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d8:	f7ff fa2a 	bl	8006e30 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079dc:	1d3a      	adds	r2, r7, #4
 80079de:	f107 0310 	add.w	r3, r7, #16
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f911 	bl	8008c0c <xTaskCheckForTimeOut>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d131      	bne.n	8007a54 <xQueueGenericReceive+0x1e0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f0:	6a38      	ldr	r0, [r7, #32]
 80079f2:	f000 f9c5 	bl	8007d80 <prvIsQueueEmpty>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d025      	beq.n	8007a48 <xQueueGenericReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <xQueueGenericReceive+0x1a2>
					{
						taskENTER_CRITICAL();
 8007a04:	f7ff f9e8 	bl	8006dd8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fb13 	bl	8009038 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8007a12:	f7ff fa0d 	bl	8006e30 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 f830 	bl	8008a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a24:	6a38      	ldr	r0, [r7, #32]
 8007a26:	f000 f94b 	bl	8007cc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a2a:	f000 fd93 	bl	8008554 <xTaskResumeAll>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f47f af55 	bne.w	80078e0 <xQueueGenericReceive+0x6c>
				{
					portYIELD_WITHIN_API();
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <xQueueGenericReceive+0x208>)
 8007a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	e74b      	b.n	80078e0 <xQueueGenericReceive+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a48:	6a38      	ldr	r0, [r7, #32]
 8007a4a:	f000 f939 	bl	8007cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a4e:	f000 fd81 	bl	8008554 <xTaskResumeAll>
 8007a52:	e745      	b.n	80078e0 <xQueueGenericReceive+0x6c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8007a54:	6a38      	ldr	r0, [r7, #32]
 8007a56:	f000 f933 	bl	8007cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a5a:	f000 fd7b 	bl	8008554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a5e:	6a38      	ldr	r0, [r7, #32]
 8007a60:	f000 f98e 	bl	8007d80 <prvIsQueueEmpty>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f43f af3a 	beq.w	80078e0 <xQueueGenericReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3728      	adds	r7, #40	; 0x28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08014ad4 	.word	0x08014ad4
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08c      	sub	sp, #48	; 0x30
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <xQueueReceiveFromISR+0x20>
 8007a96:	4934      	ldr	r1, [pc, #208]	; (8007b68 <xQueueReceiveFromISR+0xe8>)
 8007a98:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 8007a9c:	f7fa fa00 	bl	8001ea0 <vAssertCalled>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <xQueueReceiveFromISR+0x2e>
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <xQueueReceiveFromISR+0x32>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <xQueueReceiveFromISR+0x34>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <xQueueReceiveFromISR+0x42>
 8007ab8:	492b      	ldr	r1, [pc, #172]	; (8007b68 <xQueueReceiveFromISR+0xe8>)
 8007aba:	f240 50a1 	movw	r0, #1441	; 0x5a1
 8007abe:	f7fa f9ef 	bl	8001ea0 <vAssertCalled>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ac2:	f7ff fa59 	bl	8006f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8007aca:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007ace:	b672      	cpsid	i
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	b662      	cpsie	i
 8007ade:	617a      	str	r2, [r7, #20]
 8007ae0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ae2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ae4:	623b      	str	r3, [r7, #32]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	61fb      	str	r3, [r7, #28]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d02d      	beq.n	8007b4e <xQueueReceiveFromISR+0xce>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007af8:	76fb      	strb	r3, [r7, #27]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afe:	f000 f8b9 	bl	8007c74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d112      	bne.n	8007b3a <xQueueReceiveFromISR+0xba>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d015      	beq.n	8007b48 <xQueueReceiveFromISR+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	3310      	adds	r3, #16
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fff7 	bl	8008b14 <xTaskRemoveFromEventList>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00d      	beq.n	8007b48 <xQueueReceiveFromISR+0xc8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <xQueueReceiveFromISR+0xc8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e006      	b.n	8007b48 <xQueueReceiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b3a:	7efb      	ldrb	r3, [r7, #27]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	b25a      	sxtb	r2, r3
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b4c:	e001      	b.n	8007b52 <xQueueReceiveFromISR+0xd2>
		}
		else
		{
			xReturn = pdFAIL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3730      	adds	r7, #48	; 0x30
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	08014ad4 	.word	0x08014ad4

08007b6c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <uxQueueMessagesWaiting+0x18>
 8007b7a:	4908      	ldr	r1, [pc, #32]	; (8007b9c <uxQueueMessagesWaiting+0x30>)
 8007b7c:	f240 602f 	movw	r0, #1583	; 0x62f
 8007b80:	f7fa f98e 	bl	8001ea0 <vAssertCalled>

	taskENTER_CRITICAL();
 8007b84:	f7ff f928 	bl	8006dd8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007b8e:	f7ff f94f 	bl	8006e30 <vPortExitCritical>

	return uxReturn;
 8007b92:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	08014ad4 	.word	0x08014ad4

08007ba0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10d      	bne.n	8007bda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d14d      	bne.n	8007c62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 faaa 	bl	8009124 <xTaskPriorityDisinherit>
 8007bd0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	605a      	str	r2, [r3, #4]
 8007bd8:	e043      	b.n	8007c62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d119      	bne.n	8007c14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6898      	ldr	r0, [r3, #8]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be8:	461a      	mov	r2, r3
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	f004 f94c 	bl	800be88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	441a      	add	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689a      	ldr	r2, [r3, #8]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d32b      	bcc.n	8007c62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	609a      	str	r2, [r3, #8]
 8007c12:	e026      	b.n	8007c62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	68d8      	ldr	r0, [r3, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68b9      	ldr	r1, [r7, #8]
 8007c20:	f004 f932 	bl	800be88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	425b      	negs	r3, r3
 8007c2e:	441a      	add	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d207      	bcs.n	8007c50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	425b      	negs	r3, r3
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d105      	bne.n	8007c62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c6a:	697b      	ldr	r3, [r7, #20]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d018      	beq.n	8007cb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	441a      	add	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d303      	bcc.n	8007ca8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68d9      	ldr	r1, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6838      	ldr	r0, [r7, #0]
 8007cb4:	f004 f8e8 	bl	800be88 <memcpy>
	}
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cc8:	f7ff f886 	bl	8006dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cd4:	e01f      	b.n	8007d16 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8d7 	bl	8007e94 <prvNotifyQueueSetContainer>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8007cec:	f000 ffe4 	bl	8008cb8 <vTaskMissedYield>
 8007cf0:	e00d      	b.n	8007d0e <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	; 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 ff08 	bl	8008b14 <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8007d0a:	f000 ffd5 	bl	8008cb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dcdb      	bgt.n	8007cd6 <prvUnlockQueue+0x16>
 8007d1e:	e000      	b.n	8007d22 <prvUnlockQueue+0x62>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8007d20:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d2a:	f7ff f881 	bl	8006e30 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d2e:	f7ff f853 	bl	8006dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d3a:	e011      	b.n	8007d60 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d012      	beq.n	8007d6a <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3310      	adds	r3, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fee3 	bl	8008b14 <xTaskRemoveFromEventList>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8007d54:	f000 ffb0 	bl	8008cb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dce9      	bgt.n	8007d3c <prvUnlockQueue+0x7c>
 8007d68:	e000      	b.n	8007d6c <prvUnlockQueue+0xac>

				--cRxLock;
			}
			else
			{
				break;
 8007d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d74:	f7ff f85c 	bl	8006e30 <vPortExitCritical>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d88:	f7ff f826 	bl	8006dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e001      	b.n	8007d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d9e:	f7ff f847 	bl	8006e30 <vPortExitCritical>

	return xReturn;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007db4:	f7ff f810 	bl	8006dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d102      	bne.n	8007dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dce:	f7ff f82f 	bl	8006e30 <vPortExitCritical>

	return xReturn;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	e014      	b.n	8007e16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dec:	4a0e      	ldr	r2, [pc, #56]	; (8007e28 <vQueueAddToRegistry+0x4c>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10b      	bne.n	8007e10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007df8:	490b      	ldr	r1, [pc, #44]	; (8007e28 <vQueueAddToRegistry+0x4c>)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e02:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <vQueueAddToRegistry+0x4c>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e0e:	e005      	b.n	8007e1c <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b07      	cmp	r3, #7
 8007e1a:	d9e7      	bls.n	8007dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	20014984 	.word	0x20014984

08007e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e3c:	f7fe ffcc 	bl	8006dd8 <vPortEnterCritical>
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d103      	bne.n	8007e56 <vQueueWaitForMessageRestricted+0x2a>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d103      	bne.n	8007e6c <vQueueWaitForMessageRestricted+0x40>
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e6c:	f7fe ffe0 	bl	8006e30 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	3324      	adds	r3, #36	; 0x24
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fe1f 	bl	8008ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7ff ff1a 	bl	8007cc0 <prvUnlockQueue>
	}
 8007e8c:	bf00      	nop
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <prvNotifyQueueSetContainer+0x24>
 8007eae:	4920      	ldr	r1, [pc, #128]	; (8007f30 <prvNotifyQueueSetContainer+0x9c>)
 8007eb0:	f640 10ce 	movw	r0, #2510	; 0x9ce
 8007eb4:	f7f9 fff4 	bl	8001ea0 <vAssertCalled>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d304      	bcc.n	8007ece <prvNotifyQueueSetContainer+0x3a>
 8007ec4:	491a      	ldr	r1, [pc, #104]	; (8007f30 <prvNotifyQueueSetContainer+0x9c>)
 8007ec6:	f640 10cf 	movw	r0, #2511	; 0x9cf
 8007eca:	f7f9 ffe9 	bl	8001ea0 <vAssertCalled>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d225      	bcs.n	8007f26 <prvNotifyQueueSetContainer+0x92>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee0:	73fb      	strb	r3, [r7, #15]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6938      	ldr	r0, [r7, #16]
 8007eea:	f7ff fe59 	bl	8007ba0 <prvCopyDataToQueue>
 8007eee:	6178      	str	r0, [r7, #20]

			if( cTxLock == queueUNLOCKED )
 8007ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d10e      	bne.n	8007f18 <prvNotifyQueueSetContainer+0x84>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <prvNotifyQueueSetContainer+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fe04 	bl	8008b14 <xTaskRemoveFromEventList>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <prvNotifyQueueSetContainer+0x92>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e006      	b.n	8007f26 <prvNotifyQueueSetContainer+0x92>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	b25a      	sxtb	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f26:	697b      	ldr	r3, [r7, #20]
	}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	08014ad4 	.word	0x08014ad4

08007f34 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08c      	sub	sp, #48	; 0x30
 8007f38:	af04      	add	r7, sp, #16
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	603b      	str	r3, [r7, #0]
 8007f40:	4613      	mov	r3, r2
 8007f42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff f849 	bl	8006fe0 <pvPortMalloc>
 8007f4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00e      	beq.n	8007f74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f56:	2060      	movs	r0, #96	; 0x60
 8007f58:	f7ff f842 	bl	8006fe0 <pvPortMalloc>
 8007f5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
 8007f6a:	e005      	b.n	8007f78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	f7ff f8ed 	bl	800714c <vPortFree>
 8007f72:	e001      	b.n	8007f78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d013      	beq.n	8007fa6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	2300      	movs	r3, #0
 8007f82:	9303      	str	r3, [sp, #12]
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	9302      	str	r3, [sp, #8]
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68b9      	ldr	r1, [r7, #8]
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f80f 	bl	8007fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f9a:	69f8      	ldr	r0, [r7, #28]
 8007f9c:	f000 f892 	bl	80080c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e002      	b.n	8007fac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007faa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fac:	69bb      	ldr	r3, [r7, #24]
	}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop

08007fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	21a5      	movs	r1, #165	; 0xa5
 8007fd2:	f003 ff64 	bl	800be9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007fe0:	440b      	add	r3, r1
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <prvInitialiseNewTask+0x4c>
 8007ffa:	4931      	ldr	r1, [pc, #196]	; (80080c0 <prvInitialiseNewTask+0x108>)
 8007ffc:	f240 302b 	movw	r0, #811	; 0x32b
 8008000:	f7f9 ff4e 	bl	8001ea0 <vAssertCalled>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e012      	b.n	8008030 <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4413      	add	r3, r2
 8008010:	7819      	ldrb	r1, [r3, #0]
 8008012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	4413      	add	r3, r2
 8008018:	3334      	adds	r3, #52	; 0x34
 800801a:	460a      	mov	r2, r1
 800801c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	4413      	add	r3, r2
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d006      	beq.n	8008038 <prvInitialiseNewTask+0x80>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	3301      	adds	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b0f      	cmp	r3, #15
 8008034:	d9e9      	bls.n	800800a <prvInitialiseNewTask+0x52>
 8008036:	e000      	b.n	800803a <prvInitialiseNewTask+0x82>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8008038:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	2b05      	cmp	r3, #5
 8008046:	d901      	bls.n	800804c <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008048:	2305      	movs	r3, #5
 800804a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	6a3a      	ldr	r2, [r7, #32]
 8008056:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	2200      	movs	r2, #0
 800805c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	3304      	adds	r3, #4
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fd3e 	bl	8006ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	3318      	adds	r3, #24
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe fd39 	bl	8006ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	f1c3 0206 	rsb	r2, r3, #6
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	2200      	movs	r2, #0
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	2200      	movs	r2, #0
 8008092:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	2200      	movs	r2, #0
 8008098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	6938      	ldr	r0, [r7, #16]
 80080a2:	f7fe fdb5 	bl	8006c10 <pxPortInitialiseStack>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <prvInitialiseNewTask+0x100>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b8:	bf00      	nop
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	08014aec 	.word	0x08014aec

080080c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080cc:	f7fe fe84 	bl	8006dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080d0:	4b2c      	ldr	r3, [pc, #176]	; (8008184 <prvAddNewTaskToReadyList+0xc0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	4a2b      	ldr	r2, [pc, #172]	; (8008184 <prvAddNewTaskToReadyList+0xc0>)
 80080d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080da:	4b2b      	ldr	r3, [pc, #172]	; (8008188 <prvAddNewTaskToReadyList+0xc4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080e2:	4a29      	ldr	r2, [pc, #164]	; (8008188 <prvAddNewTaskToReadyList+0xc4>)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080e8:	4b26      	ldr	r3, [pc, #152]	; (8008184 <prvAddNewTaskToReadyList+0xc0>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d110      	bne.n	8008112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080f0:	f000 fe06 	bl	8008d00 <prvInitialiseTaskLists>
 80080f4:	e00d      	b.n	8008112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080f6:	4b25      	ldr	r3, [pc, #148]	; (800818c <prvAddNewTaskToReadyList+0xc8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080fe:	4b22      	ldr	r3, [pc, #136]	; (8008188 <prvAddNewTaskToReadyList+0xc4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	429a      	cmp	r2, r3
 800810a:	d802      	bhi.n	8008112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800810c:	4a1e      	ldr	r2, [pc, #120]	; (8008188 <prvAddNewTaskToReadyList+0xc4>)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008112:	4b1f      	ldr	r3, [pc, #124]	; (8008190 <prvAddNewTaskToReadyList+0xcc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3301      	adds	r3, #1
 8008118:	4a1d      	ldr	r2, [pc, #116]	; (8008190 <prvAddNewTaskToReadyList+0xcc>)
 800811a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800811c:	4b1c      	ldr	r3, [pc, #112]	; (8008190 <prvAddNewTaskToReadyList+0xcc>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	2201      	movs	r2, #1
 800812a:	409a      	lsls	r2, r3
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <prvAddNewTaskToReadyList+0xd0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4313      	orrs	r3, r2
 8008132:	4a18      	ldr	r2, [pc, #96]	; (8008194 <prvAddNewTaskToReadyList+0xd0>)
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4a15      	ldr	r2, [pc, #84]	; (8008198 <prvAddNewTaskToReadyList+0xd4>)
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3304      	adds	r3, #4
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f7fe fcd7 	bl	8006b00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008152:	f7fe fe6d 	bl	8006e30 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008156:	4b0d      	ldr	r3, [pc, #52]	; (800818c <prvAddNewTaskToReadyList+0xc8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00e      	beq.n	800817c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800815e:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <prvAddNewTaskToReadyList+0xc4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	429a      	cmp	r2, r3
 800816a:	d207      	bcs.n	800817c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800816c:	4b0b      	ldr	r3, [pc, #44]	; (800819c <prvAddNewTaskToReadyList+0xd8>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20014424 	.word	0x20014424
 8008188:	20014338 	.word	0x20014338
 800818c:	20014430 	.word	0x20014430
 8008190:	20014440 	.word	0x20014440
 8008194:	2001442c 	.word	0x2001442c
 8008198:	2001433c 	.word	0x2001433c
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80081a8:	f7fe fe16 	bl	8006dd8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <vTaskDelete+0x18>
 80081b2:	4b36      	ldr	r3, [pc, #216]	; (800828c <vTaskDelete+0xec>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	e000      	b.n	80081ba <vTaskDelete+0x1a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fcfb 	bl	8006bbc <uxListRemove>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d115      	bne.n	80081f8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	492f      	ldr	r1, [pc, #188]	; (8008290 <vTaskDelete+0xf0>)
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <vTaskDelete+0x58>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	2201      	movs	r2, #1
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	43da      	mvns	r2, r3
 80081ee:	4b29      	ldr	r3, [pc, #164]	; (8008294 <vTaskDelete+0xf4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4013      	ands	r3, r2
 80081f4:	4a27      	ldr	r2, [pc, #156]	; (8008294 <vTaskDelete+0xf4>)
 80081f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3318      	adds	r3, #24
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fcd9 	bl	8006bbc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800820a:	4b23      	ldr	r3, [pc, #140]	; (8008298 <vTaskDelete+0xf8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	4a21      	ldr	r2, [pc, #132]	; (8008298 <vTaskDelete+0xf8>)
 8008212:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <vTaskDelete+0xec>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	429a      	cmp	r2, r3
 800821c:	d10b      	bne.n	8008236 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3304      	adds	r3, #4
 8008222:	4619      	mov	r1, r3
 8008224:	481d      	ldr	r0, [pc, #116]	; (800829c <vTaskDelete+0xfc>)
 8008226:	f7fe fc6b 	bl	8006b00 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800822a:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <vTaskDelete+0x100>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3301      	adds	r3, #1
 8008230:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <vTaskDelete+0x100>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e009      	b.n	800824a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008236:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <vTaskDelete+0x104>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3b01      	subs	r3, #1
 800823c:	4a19      	ldr	r2, [pc, #100]	; (80082a4 <vTaskDelete+0x104>)
 800823e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 fea5 	bl	8008f90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008246:	f000 feb3 	bl	8008fb0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800824a:	f7fe fdf1 	bl	8006e30 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800824e:	4b16      	ldr	r3, [pc, #88]	; (80082a8 <vTaskDelete+0x108>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d015      	beq.n	8008282 <vTaskDelete+0xe2>
		{
			if( pxTCB == pxCurrentTCB )
 8008256:	4b0d      	ldr	r3, [pc, #52]	; (800828c <vTaskDelete+0xec>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	429a      	cmp	r2, r3
 800825e:	d110      	bne.n	8008282 <vTaskDelete+0xe2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008260:	4b12      	ldr	r3, [pc, #72]	; (80082ac <vTaskDelete+0x10c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <vTaskDelete+0xd2>
 8008268:	4911      	ldr	r1, [pc, #68]	; (80082b0 <vTaskDelete+0x110>)
 800826a:	f240 4065 	movw	r0, #1125	; 0x465
 800826e:	f7f9 fe17 	bl	8001ea0 <vAssertCalled>
				portYIELD_WITHIN_API();
 8008272:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <vTaskDelete+0x114>)
 8008274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20014338 	.word	0x20014338
 8008290:	2001433c 	.word	0x2001433c
 8008294:	2001442c 	.word	0x2001442c
 8008298:	20014440 	.word	0x20014440
 800829c:	200143f8 	.word	0x200143f8
 80082a0:	2001440c 	.word	0x2001440c
 80082a4:	20014424 	.word	0x20014424
 80082a8:	20014430 	.word	0x20014430
 80082ac:	2001444c 	.word	0x2001444c
 80082b0:	08014aec 	.word	0x08014aec
 80082b4:	e000ed04 	.word	0xe000ed04

080082b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d104      	bne.n	80082d6 <vTaskDelayUntil+0x1e>
 80082cc:	492d      	ldr	r1, [pc, #180]	; (8008384 <vTaskDelayUntil+0xcc>)
 80082ce:	f240 4079 	movw	r0, #1145	; 0x479
 80082d2:	f7f9 fde5 	bl	8001ea0 <vAssertCalled>
		configASSERT( ( xTimeIncrement > 0U ) );
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <vTaskDelayUntil+0x2e>
 80082dc:	4929      	ldr	r1, [pc, #164]	; (8008384 <vTaskDelayUntil+0xcc>)
 80082de:	f240 407a 	movw	r0, #1146	; 0x47a
 80082e2:	f7f9 fddd 	bl	8001ea0 <vAssertCalled>
		configASSERT( uxSchedulerSuspended == 0 );
 80082e6:	4b28      	ldr	r3, [pc, #160]	; (8008388 <vTaskDelayUntil+0xd0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <vTaskDelayUntil+0x40>
 80082ee:	4925      	ldr	r1, [pc, #148]	; (8008384 <vTaskDelayUntil+0xcc>)
 80082f0:	f240 407b 	movw	r0, #1147	; 0x47b
 80082f4:	f7f9 fdd4 	bl	8001ea0 <vAssertCalled>

		vTaskSuspendAll();
 80082f8:	f000 f91e 	bl	8008538 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80082fc:	4b23      	ldr	r3, [pc, #140]	; (800838c <vTaskDelayUntil+0xd4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	4413      	add	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	429a      	cmp	r2, r3
 8008314:	d90b      	bls.n	800832e <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	429a      	cmp	r2, r3
 800831e:	d911      	bls.n	8008344 <vTaskDelayUntil+0x8c>
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	429a      	cmp	r2, r3
 8008326:	d90d      	bls.n	8008344 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	e00a      	b.n	8008344 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	429a      	cmp	r2, r3
 8008336:	d803      	bhi.n	8008340 <vTaskDelayUntil+0x88>
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	429a      	cmp	r2, r3
 800833e:	d901      	bls.n	8008344 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <vTaskDelayUntil+0xa6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2100      	movs	r1, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f82f 	bl	80093bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800835e:	f000 f8f9 	bl	8008554 <xTaskResumeAll>
 8008362:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d107      	bne.n	800837a <vTaskDelayUntil+0xc2>
		{
			portYIELD_WITHIN_API();
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <vTaskDelayUntil+0xd8>)
 800836c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800837a:	bf00      	nop
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	08014aec 	.word	0x08014aec
 8008388:	2001444c 	.word	0x2001444c
 800838c:	20014428 	.word	0x20014428
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d011      	beq.n	80083ca <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <vTaskDelay+0x54>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <vTaskDelay+0x24>
 80083ae:	490f      	ldr	r1, [pc, #60]	; (80083ec <vTaskDelay+0x58>)
 80083b0:	f240 40cf 	movw	r0, #1231	; 0x4cf
 80083b4:	f7f9 fd74 	bl	8001ea0 <vAssertCalled>
			vTaskSuspendAll();
 80083b8:	f000 f8be 	bl	8008538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083bc:	2100      	movs	r1, #0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fffc 	bl	80093bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083c4:	f000 f8c6 	bl	8008554 <xTaskResumeAll>
 80083c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d107      	bne.n	80083e0 <vTaskDelay+0x4c>
		{
			portYIELD_WITHIN_API();
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <vTaskDelay+0x5c>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	2001444c 	.word	0x2001444c
 80083ec:	08014aec 	.word	0x08014aec
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <eTaskGetState+0x1c>
 8008406:	4920      	ldr	r1, [pc, #128]	; (8008488 <eTaskGetState+0x94>)
 8008408:	f240 40fb 	movw	r0, #1275	; 0x4fb
 800840c:	f7f9 fd48 	bl	8001ea0 <vAssertCalled>

		if( pxTCB == pxCurrentTCB )
 8008410:	4b1e      	ldr	r3, [pc, #120]	; (800848c <eTaskGetState+0x98>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	429a      	cmp	r2, r3
 8008418:	d102      	bne.n	8008420 <eTaskGetState+0x2c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800841a:	2300      	movs	r3, #0
 800841c:	75fb      	strb	r3, [r7, #23]
 800841e:	e02d      	b.n	800847c <eTaskGetState+0x88>
		}
		else
		{
			taskENTER_CRITICAL();
 8008420:	f7fe fcda 	bl	8006dd8 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800842a:	f7fe fd01 	bl	8006e30 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800842e:	4b18      	ldr	r3, [pc, #96]	; (8008490 <eTaskGetState+0x9c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	429a      	cmp	r2, r3
 8008436:	d004      	beq.n	8008442 <eTaskGetState+0x4e>
 8008438:	4b16      	ldr	r3, [pc, #88]	; (8008494 <eTaskGetState+0xa0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d102      	bne.n	8008448 <eTaskGetState+0x54>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008442:	2302      	movs	r3, #2
 8008444:	75fb      	strb	r3, [r7, #23]
 8008446:	e019      	b.n	800847c <eTaskGetState+0x88>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4a13      	ldr	r2, [pc, #76]	; (8008498 <eTaskGetState+0xa4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d109      	bne.n	8008464 <eTaskGetState+0x70>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <eTaskGetState+0x6a>
					{
						eReturn = eSuspended;
 8008458:	2303      	movs	r3, #3
 800845a:	75fb      	strb	r3, [r7, #23]
 800845c:	e00e      	b.n	800847c <eTaskGetState+0x88>
					}
					else
					{
						eReturn = eBlocked;
 800845e:	2302      	movs	r3, #2
 8008460:	75fb      	strb	r3, [r7, #23]
 8008462:	e00b      	b.n	800847c <eTaskGetState+0x88>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4a0d      	ldr	r2, [pc, #52]	; (800849c <eTaskGetState+0xa8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d002      	beq.n	8008472 <eTaskGetState+0x7e>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <eTaskGetState+0x84>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008472:	2304      	movs	r3, #4
 8008474:	75fb      	strb	r3, [r7, #23]
 8008476:	e001      	b.n	800847c <eTaskGetState+0x88>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008478:	2301      	movs	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800847c:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	08014aec 	.word	0x08014aec
 800848c:	20014338 	.word	0x20014338
 8008490:	200143dc 	.word	0x200143dc
 8008494:	200143e0 	.word	0x200143e0
 8008498:	20014410 	.word	0x20014410
 800849c:	200143f8 	.word	0x200143f8

080084a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80084a6:	4b1d      	ldr	r3, [pc, #116]	; (800851c <vTaskStartScheduler+0x7c>)
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	2282      	movs	r2, #130	; 0x82
 80084b2:	491b      	ldr	r1, [pc, #108]	; (8008520 <vTaskStartScheduler+0x80>)
 80084b4:	481b      	ldr	r0, [pc, #108]	; (8008524 <vTaskStartScheduler+0x84>)
 80084b6:	f7ff fd3d 	bl	8007f34 <xTaskCreate>
 80084ba:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d102      	bne.n	80084c8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80084c2:	f000 ffe1 	bl	8009488 <xTimerCreateTimerTask>
 80084c6:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d119      	bne.n	8008502 <vTaskStartScheduler+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80084d2:	b672      	cpsid	i
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	b662      	cpsie	i
 80084e2:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <vTaskStartScheduler+0x88>)
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <vTaskStartScheduler+0x8c>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80084f2:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <vTaskStartScheduler+0x90>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80084f8:	f002 fe26 	bl	800b148 <HW_SYS_TimerRunTime_Config>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084fc:	f7fe fc04 	bl	8006d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008500:	e008      	b.n	8008514 <vTaskStartScheduler+0x74>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008508:	d104      	bne.n	8008514 <vTaskStartScheduler+0x74>
 800850a:	490a      	ldr	r1, [pc, #40]	; (8008534 <vTaskStartScheduler+0x94>)
 800850c:	f240 7084 	movw	r0, #1924	; 0x784
 8008510:	f7f9 fcc6 	bl	8001ea0 <vAssertCalled>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20014448 	.word	0x20014448
 8008520:	08014b04 	.word	0x08014b04
 8008524:	08008cd1 	.word	0x08008cd1
 8008528:	20014444 	.word	0x20014444
 800852c:	20014430 	.word	0x20014430
 8008530:	20014428 	.word	0x20014428
 8008534:	08014aec 	.word	0x08014aec

08008538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800853c:	4b04      	ldr	r3, [pc, #16]	; (8008550 <vTaskSuspendAll+0x18>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a03      	ldr	r2, [pc, #12]	; (8008550 <vTaskSuspendAll+0x18>)
 8008544:	6013      	str	r3, [r2, #0]
}
 8008546:	bf00      	nop
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	2001444c 	.word	0x2001444c

08008554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008562:	4b3e      	ldr	r3, [pc, #248]	; (800865c <xTaskResumeAll+0x108>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <xTaskResumeAll+0x20>
 800856a:	493d      	ldr	r1, [pc, #244]	; (8008660 <xTaskResumeAll+0x10c>)
 800856c:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8008570:	f7f9 fc96 	bl	8001ea0 <vAssertCalled>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008574:	f7fe fc30 	bl	8006dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008578:	4b38      	ldr	r3, [pc, #224]	; (800865c <xTaskResumeAll+0x108>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3b01      	subs	r3, #1
 800857e:	4a37      	ldr	r2, [pc, #220]	; (800865c <xTaskResumeAll+0x108>)
 8008580:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008582:	4b36      	ldr	r3, [pc, #216]	; (800865c <xTaskResumeAll+0x108>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d161      	bne.n	800864e <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800858a:	4b36      	ldr	r3, [pc, #216]	; (8008664 <xTaskResumeAll+0x110>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d05d      	beq.n	800864e <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008592:	e02e      	b.n	80085f2 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008594:	4b34      	ldr	r3, [pc, #208]	; (8008668 <xTaskResumeAll+0x114>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3318      	adds	r3, #24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe fb0b 	bl	8006bbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fb06 	bl	8006bbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	2201      	movs	r2, #1
 80085b6:	409a      	lsls	r2, r3
 80085b8:	4b2c      	ldr	r3, [pc, #176]	; (800866c <xTaskResumeAll+0x118>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4313      	orrs	r3, r2
 80085be:	4a2b      	ldr	r2, [pc, #172]	; (800866c <xTaskResumeAll+0x118>)
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4a28      	ldr	r2, [pc, #160]	; (8008670 <xTaskResumeAll+0x11c>)
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f7fe fa91 	bl	8006b00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e2:	4b24      	ldr	r3, [pc, #144]	; (8008674 <xTaskResumeAll+0x120>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80085ec:	4b22      	ldr	r3, [pc, #136]	; (8008678 <xTaskResumeAll+0x124>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085f2:	4b1d      	ldr	r3, [pc, #116]	; (8008668 <xTaskResumeAll+0x114>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1cc      	bne.n	8008594 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008600:	f000 fcd6 	bl	8008fb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008604:	4b1d      	ldr	r3, [pc, #116]	; (800867c <xTaskResumeAll+0x128>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d010      	beq.n	8008632 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008610:	f000 f8e4 	bl	80087dc <xTaskIncrementTick>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800861a:	4b17      	ldr	r3, [pc, #92]	; (8008678 <xTaskResumeAll+0x124>)
 800861c:	2201      	movs	r2, #1
 800861e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3b01      	subs	r3, #1
 8008624:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f1      	bne.n	8008610 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 800862c:	4b13      	ldr	r3, [pc, #76]	; (800867c <xTaskResumeAll+0x128>)
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <xTaskResumeAll+0x124>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800863e:	4b10      	ldr	r3, [pc, #64]	; (8008680 <xTaskResumeAll+0x12c>)
 8008640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800864e:	f7fe fbef 	bl	8006e30 <vPortExitCritical>

	return xAlreadyYielded;
 8008652:	68bb      	ldr	r3, [r7, #8]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	2001444c 	.word	0x2001444c
 8008660:	08014aec 	.word	0x08014aec
 8008664:	20014424 	.word	0x20014424
 8008668:	200143e4 	.word	0x200143e4
 800866c:	2001442c 	.word	0x2001442c
 8008670:	2001433c 	.word	0x2001433c
 8008674:	20014338 	.word	0x20014338
 8008678:	20014438 	.word	0x20014438
 800867c:	20014434 	.word	0x20014434
 8008680:	e000ed04 	.word	0xe000ed04

08008684 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <xTaskGetTickCount+0x1c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008690:	687b      	ldr	r3, [r7, #4]
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20014428 	.word	0x20014428

080086a4 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80086a8:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <uxTaskGetNumberOfTasks+0x14>)
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20014424 	.word	0x20014424

080086bc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	2306      	movs	r3, #6
 80086ce:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80086d0:	f7ff ff32 	bl	8008538 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80086d4:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <uxTaskGetSystemState+0x108>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d36b      	bcc.n	80087b6 <uxTaskGetSystemState+0xfa>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4613      	mov	r3, r2
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	461a      	mov	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	1898      	adds	r0, r3, r2
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4a32      	ldr	r2, [pc, #200]	; (80087c8 <uxTaskGetSystemState+0x10c>)
 8008700:	4413      	add	r3, r2
 8008702:	2201      	movs	r2, #1
 8008704:	4619      	mov	r1, r3
 8008706:	f000 fbd5 	bl	8008eb4 <prvListTasksWithinSingleList>
 800870a:	4602      	mov	r2, r0
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	4413      	add	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e2      	bne.n	80086de <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	4613      	mov	r3, r2
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	461a      	mov	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	1898      	adds	r0, r3, r2
 8008728:	4b28      	ldr	r3, [pc, #160]	; (80087cc <uxTaskGetSystemState+0x110>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2202      	movs	r2, #2
 800872e:	4619      	mov	r1, r3
 8008730:	f000 fbc0 	bl	8008eb4 <prvListTasksWithinSingleList>
 8008734:	4602      	mov	r2, r0
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	4613      	mov	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	461a      	mov	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	1898      	adds	r0, r3, r2
 800874c:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <uxTaskGetSystemState+0x114>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2202      	movs	r2, #2
 8008752:	4619      	mov	r1, r3
 8008754:	f000 fbae 	bl	8008eb4 <prvListTasksWithinSingleList>
 8008758:	4602      	mov	r2, r0
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4613      	mov	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	2204      	movs	r2, #4
 8008772:	4918      	ldr	r1, [pc, #96]	; (80087d4 <uxTaskGetSystemState+0x118>)
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fb9d 	bl	8008eb4 <prvListTasksWithinSingleList>
 800877a:	4602      	mov	r2, r0
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	461a      	mov	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	2203      	movs	r2, #3
 8008794:	4910      	ldr	r1, [pc, #64]	; (80087d8 <uxTaskGetSystemState+0x11c>)
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fb8c 	bl	8008eb4 <prvListTasksWithinSingleList>
 800879c:	4602      	mov	r2, r0
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <uxTaskGetSystemState+0xfa>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80087aa:	f002 fd03 	bl	800b1b4 <HW_SYS_GetRunTimeTicks>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80087b6:	f7ff fecd 	bl	8008554 <xTaskResumeAll>

		return uxTask;
 80087ba:	697b      	ldr	r3, [r7, #20]
	}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20014424 	.word	0x20014424
 80087c8:	2001433c 	.word	0x2001433c
 80087cc:	200143dc 	.word	0x200143dc
 80087d0:	200143e0 	.word	0x200143e0
 80087d4:	200143f8 	.word	0x200143f8
 80087d8:	20014410 	.word	0x20014410

080087dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e6:	4b4e      	ldr	r3, [pc, #312]	; (8008920 <xTaskIncrementTick+0x144>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f040 8087 	bne.w	80088fe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80087f0:	4b4c      	ldr	r3, [pc, #304]	; (8008924 <xTaskIncrementTick+0x148>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3301      	adds	r3, #1
 80087f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087f8:	4a4a      	ldr	r2, [pc, #296]	; (8008924 <xTaskIncrementTick+0x148>)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11a      	bne.n	800883a <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008804:	4b48      	ldr	r3, [pc, #288]	; (8008928 <xTaskIncrementTick+0x14c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <xTaskIncrementTick+0x3c>
 800880e:	4947      	ldr	r1, [pc, #284]	; (800892c <xTaskIncrementTick+0x150>)
 8008810:	f640 10d9 	movw	r0, #2521	; 0x9d9
 8008814:	f7f9 fb44 	bl	8001ea0 <vAssertCalled>
 8008818:	4b43      	ldr	r3, [pc, #268]	; (8008928 <xTaskIncrementTick+0x14c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	4b44      	ldr	r3, [pc, #272]	; (8008930 <xTaskIncrementTick+0x154>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a41      	ldr	r2, [pc, #260]	; (8008928 <xTaskIncrementTick+0x14c>)
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	4a42      	ldr	r2, [pc, #264]	; (8008930 <xTaskIncrementTick+0x154>)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	4b41      	ldr	r3, [pc, #260]	; (8008934 <xTaskIncrementTick+0x158>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	4a40      	ldr	r2, [pc, #256]	; (8008934 <xTaskIncrementTick+0x158>)
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	f000 fbbb 	bl	8008fb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800883a:	4b3f      	ldr	r3, [pc, #252]	; (8008938 <xTaskIncrementTick+0x15c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	429a      	cmp	r2, r3
 8008842:	d34d      	bcc.n	80088e0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008844:	4b38      	ldr	r3, [pc, #224]	; (8008928 <xTaskIncrementTick+0x14c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <xTaskIncrementTick+0x76>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xTaskIncrementTick+0x78>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008858:	4b37      	ldr	r3, [pc, #220]	; (8008938 <xTaskIncrementTick+0x15c>)
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	601a      	str	r2, [r3, #0]
					break;
 8008860:	e03e      	b.n	80088e0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008862:	4b31      	ldr	r3, [pc, #196]	; (8008928 <xTaskIncrementTick+0x14c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d203      	bcs.n	8008882 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800887a:	4a2f      	ldr	r2, [pc, #188]	; (8008938 <xTaskIncrementTick+0x15c>)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6013      	str	r3, [r2, #0]
						break;
 8008880:	e02e      	b.n	80088e0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe f998 	bl	8006bbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	3318      	adds	r3, #24
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe f98f 	bl	8006bbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	2201      	movs	r2, #1
 80088a4:	409a      	lsls	r2, r3
 80088a6:	4b25      	ldr	r3, [pc, #148]	; (800893c <xTaskIncrementTick+0x160>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	4a23      	ldr	r2, [pc, #140]	; (800893c <xTaskIncrementTick+0x160>)
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4a20      	ldr	r2, [pc, #128]	; (8008940 <xTaskIncrementTick+0x164>)
 80088be:	441a      	add	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f7fe f91a 	bl	8006b00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <xTaskIncrementTick+0x168>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d3b4      	bcc.n	8008844 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 80088da:	2301      	movs	r3, #1
 80088dc:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80088de:	e7b1      	b.n	8008844 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088e0:	4b18      	ldr	r3, [pc, #96]	; (8008944 <xTaskIncrementTick+0x168>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e6:	4916      	ldr	r1, [pc, #88]	; (8008940 <xTaskIncrementTick+0x164>)
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d907      	bls.n	8008908 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e004      	b.n	8008908 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80088fe:	4b12      	ldr	r3, [pc, #72]	; (8008948 <xTaskIncrementTick+0x16c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	4a10      	ldr	r2, [pc, #64]	; (8008948 <xTaskIncrementTick+0x16c>)
 8008906:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008908:	4b10      	ldr	r3, [pc, #64]	; (800894c <xTaskIncrementTick+0x170>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008914:	697b      	ldr	r3, [r7, #20]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	2001444c 	.word	0x2001444c
 8008924:	20014428 	.word	0x20014428
 8008928:	200143dc 	.word	0x200143dc
 800892c:	08014aec 	.word	0x08014aec
 8008930:	200143e0 	.word	0x200143e0
 8008934:	2001443c 	.word	0x2001443c
 8008938:	20014444 	.word	0x20014444
 800893c:	2001442c 	.word	0x2001442c
 8008940:	2001433c 	.word	0x2001433c
 8008944:	20014338 	.word	0x20014338
 8008948:	20014434 	.word	0x20014434
 800894c:	20014438 	.word	0x20014438

08008950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008956:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <vTaskSwitchContext+0x114>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800895e:	4b42      	ldr	r3, [pc, #264]	; (8008a68 <vTaskSwitchContext+0x118>)
 8008960:	2201      	movs	r2, #1
 8008962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008964:	e07a      	b.n	8008a5c <vTaskSwitchContext+0x10c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8008966:	4b40      	ldr	r3, [pc, #256]	; (8008a68 <vTaskSwitchContext+0x118>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800896c:	f002 fc22 	bl	800b1b4 <HW_SYS_GetRunTimeTicks>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	4b3d      	ldr	r3, [pc, #244]	; (8008a6c <vTaskSwitchContext+0x11c>)
 8008976:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008978:	4b3c      	ldr	r3, [pc, #240]	; (8008a6c <vTaskSwitchContext+0x11c>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4b3c      	ldr	r3, [pc, #240]	; (8008a70 <vTaskSwitchContext+0x120>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d909      	bls.n	8008998 <vTaskSwitchContext+0x48>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008984:	4b3b      	ldr	r3, [pc, #236]	; (8008a74 <vTaskSwitchContext+0x124>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800898a:	4a38      	ldr	r2, [pc, #224]	; (8008a6c <vTaskSwitchContext+0x11c>)
 800898c:	6810      	ldr	r0, [r2, #0]
 800898e:	4a38      	ldr	r2, [pc, #224]	; (8008a70 <vTaskSwitchContext+0x120>)
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	1a82      	subs	r2, r0, r2
 8008994:	440a      	add	r2, r1
 8008996:	655a      	str	r2, [r3, #84]	; 0x54
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
 8008998:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <vTaskSwitchContext+0x11c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a34      	ldr	r2, [pc, #208]	; (8008a70 <vTaskSwitchContext+0x120>)
 800899e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80089a0:	4b34      	ldr	r3, [pc, #208]	; (8008a74 <vTaskSwitchContext+0x124>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d111      	bne.n	80089dc <vTaskSwitchContext+0x8c>
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	3304      	adds	r3, #4
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d10b      	bne.n	80089dc <vTaskSwitchContext+0x8c>
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	3308      	adds	r3, #8
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d105      	bne.n	80089dc <vTaskSwitchContext+0x8c>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	330c      	adds	r3, #12
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d008      	beq.n	80089ee <vTaskSwitchContext+0x9e>
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <vTaskSwitchContext+0x124>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b24      	ldr	r3, [pc, #144]	; (8008a74 <vTaskSwitchContext+0x124>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3334      	adds	r3, #52	; 0x34
 80089e6:	4619      	mov	r1, r3
 80089e8:	4610      	mov	r0, r2
 80089ea:	f7f9 fa49 	bl	8001e80 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <vTaskSwitchContext+0x128>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	fab3 f383 	clz	r3, r3
 80089fa:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	f1c3 031f 	rsb	r3, r3, #31
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	491d      	ldr	r1, [pc, #116]	; (8008a7c <vTaskSwitchContext+0x12c>)
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <vTaskSwitchContext+0xd2>
 8008a18:	4919      	ldr	r1, [pc, #100]	; (8008a80 <vTaskSwitchContext+0x130>)
 8008a1a:	f640 20f6 	movw	r0, #2806	; 0xaf6
 8008a1e:	f7f9 fa3f 	bl	8001ea0 <vAssertCalled>
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4a13      	ldr	r2, [pc, #76]	; (8008a7c <vTaskSwitchContext+0x12c>)
 8008a2e:	4413      	add	r3, r2
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	605a      	str	r2, [r3, #4]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	3308      	adds	r3, #8
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d104      	bne.n	8008a52 <vTaskSwitchContext+0x102>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	4a06      	ldr	r2, [pc, #24]	; (8008a74 <vTaskSwitchContext+0x124>)
 8008a5a:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a5c:	bf00      	nop
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	2001444c 	.word	0x2001444c
 8008a68:	20014438 	.word	0x20014438
 8008a6c:	20014454 	.word	0x20014454
 8008a70:	20014450 	.word	0x20014450
 8008a74:	20014338 	.word	0x20014338
 8008a78:	2001442c 	.word	0x2001442c
 8008a7c:	2001433c 	.word	0x2001433c
 8008a80:	08014aec 	.word	0x08014aec

08008a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <vTaskPlaceOnEventList+0x1a>
 8008a94:	4909      	ldr	r1, [pc, #36]	; (8008abc <vTaskPlaceOnEventList+0x38>)
 8008a96:	f640 3006 	movw	r0, #2822	; 0xb06
 8008a9a:	f7f9 fa01 	bl	8001ea0 <vAssertCalled>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a9e:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <vTaskPlaceOnEventList+0x3c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3318      	adds	r3, #24
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fe f84e 	bl	8006b48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aac:	2101      	movs	r1, #1
 8008aae:	6838      	ldr	r0, [r7, #0]
 8008ab0:	f000 fc84 	bl	80093bc <prvAddCurrentTaskToDelayedList>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	08014aec 	.word	0x08014aec
 8008ac0:	20014338 	.word	0x20014338

08008ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <vTaskPlaceOnEventListRestricted+0x1c>
 8008ad6:	490d      	ldr	r1, [pc, #52]	; (8008b0c <vTaskPlaceOnEventListRestricted+0x48>)
 8008ad8:	f640 3031 	movw	r0, #2865	; 0xb31
 8008adc:	f7f9 f9e0 	bl	8001ea0 <vAssertCalled>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <vTaskPlaceOnEventListRestricted+0x4c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3318      	adds	r3, #24
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7fe f809 	bl	8006b00 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295
 8008af8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	68b8      	ldr	r0, [r7, #8]
 8008afe:	f000 fc5d 	bl	80093bc <prvAddCurrentTaskToDelayedList>
	}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08014aec 	.word	0x08014aec
 8008b10:	20014338 	.word	0x20014338

08008b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <xTaskRemoveFromEventList+0x20>
 8008b2a:	4922      	ldr	r1, [pc, #136]	; (8008bb4 <xTaskRemoveFromEventList+0xa0>)
 8008b2c:	f640 3061 	movw	r0, #2913	; 0xb61
 8008b30:	f7f9 f9b6 	bl	8001ea0 <vAssertCalled>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3318      	adds	r3, #24
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f83f 	bl	8006bbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	; (8008bb8 <xTaskRemoveFromEventList+0xa4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d11c      	bne.n	8008b80 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe f836 	bl	8006bbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	2201      	movs	r2, #1
 8008b56:	409a      	lsls	r2, r3
 8008b58:	4b18      	ldr	r3, [pc, #96]	; (8008bbc <xTaskRemoveFromEventList+0xa8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	4a17      	ldr	r2, [pc, #92]	; (8008bbc <xTaskRemoveFromEventList+0xa8>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4a14      	ldr	r2, [pc, #80]	; (8008bc0 <xTaskRemoveFromEventList+0xac>)
 8008b70:	441a      	add	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fd ffc1 	bl	8006b00 <vListInsertEnd>
 8008b7e:	e005      	b.n	8008b8c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3318      	adds	r3, #24
 8008b84:	4619      	mov	r1, r3
 8008b86:	480f      	ldr	r0, [pc, #60]	; (8008bc4 <xTaskRemoveFromEventList+0xb0>)
 8008b88:	f7fd ffba 	bl	8006b00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <xTaskRemoveFromEventList+0xb4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d905      	bls.n	8008ba6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <xTaskRemoveFromEventList+0xb8>)
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e001      	b.n	8008baa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	08014aec 	.word	0x08014aec
 8008bb8:	2001444c 	.word	0x2001444c
 8008bbc:	2001442c 	.word	0x2001442c
 8008bc0:	2001433c 	.word	0x2001433c
 8008bc4:	200143e4 	.word	0x200143e4
 8008bc8:	20014338 	.word	0x20014338
 8008bcc:	20014438 	.word	0x20014438

08008bd0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <vTaskSetTimeOutState+0x18>
 8008bde:	4908      	ldr	r1, [pc, #32]	; (8008c00 <vTaskSetTimeOutState+0x30>)
 8008be0:	f640 30c1 	movw	r0, #3009	; 0xbc1
 8008be4:	f7f9 f95c 	bl	8001ea0 <vAssertCalled>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <vTaskSetTimeOutState+0x34>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <vTaskSetTimeOutState+0x38>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	605a      	str	r2, [r3, #4]
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	08014aec 	.word	0x08014aec
 8008c04:	2001443c 	.word	0x2001443c
 8008c08:	20014428 	.word	0x20014428

08008c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <xTaskCheckForTimeOut+0x1a>
 8008c1c:	4923      	ldr	r1, [pc, #140]	; (8008cac <xTaskCheckForTimeOut+0xa0>)
 8008c1e:	f640 30cb 	movw	r0, #3019	; 0xbcb
 8008c22:	f7f9 f93d 	bl	8001ea0 <vAssertCalled>
	configASSERT( pxTicksToWait );
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <xTaskCheckForTimeOut+0x2a>
 8008c2c:	491f      	ldr	r1, [pc, #124]	; (8008cac <xTaskCheckForTimeOut+0xa0>)
 8008c2e:	f640 30cc 	movw	r0, #3020	; 0xbcc
 8008c32:	f7f9 f935 	bl	8001ea0 <vAssertCalled>

	taskENTER_CRITICAL();
 8008c36:	f7fe f8cf 	bl	8006dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <xTaskCheckForTimeOut+0xa4>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d102      	bne.n	8008c50 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e026      	b.n	8008c9e <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	4b17      	ldr	r3, [pc, #92]	; (8008cb4 <xTaskCheckForTimeOut+0xa8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d007      	beq.n	8008c6c <xTaskCheckForTimeOut+0x60>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d802      	bhi.n	8008c6c <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c66:	2301      	movs	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e018      	b.n	8008c9e <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d20e      	bcs.n	8008c9a <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6859      	ldr	r1, [r3, #4]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	1acb      	subs	r3, r1, r3
 8008c88:	441a      	add	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff ff9e 	bl	8008bd0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e001      	b.n	8008c9e <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c9e:	f7fe f8c7 	bl	8006e30 <vPortExitCritical>

	return xReturn;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	08014aec 	.word	0x08014aec
 8008cb0:	20014428 	.word	0x20014428
 8008cb4:	2001443c 	.word	0x2001443c

08008cb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cbc:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <vTaskMissedYield+0x14>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20014438 	.word	0x20014438

08008cd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cd8:	f000 f852 	bl	8008d80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cdc:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <prvIdleTask+0x28>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d9f9      	bls.n	8008cd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <prvIdleTask+0x2c>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8008cf4:	e7f0      	b.n	8008cd8 <prvIdleTask+0x8>
 8008cf6:	bf00      	nop
 8008cf8:	2001433c 	.word	0x2001433c
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	e00c      	b.n	8008d26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <prvInitialiseTaskLists+0x60>)
 8008d18:	4413      	add	r3, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd fec2 	bl	8006aa4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3301      	adds	r3, #1
 8008d24:	607b      	str	r3, [r7, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b05      	cmp	r3, #5
 8008d2a:	d9ef      	bls.n	8008d0c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d2c:	480d      	ldr	r0, [pc, #52]	; (8008d64 <prvInitialiseTaskLists+0x64>)
 8008d2e:	f7fd feb9 	bl	8006aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d32:	480d      	ldr	r0, [pc, #52]	; (8008d68 <prvInitialiseTaskLists+0x68>)
 8008d34:	f7fd feb6 	bl	8006aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d38:	480c      	ldr	r0, [pc, #48]	; (8008d6c <prvInitialiseTaskLists+0x6c>)
 8008d3a:	f7fd feb3 	bl	8006aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d3e:	480c      	ldr	r0, [pc, #48]	; (8008d70 <prvInitialiseTaskLists+0x70>)
 8008d40:	f7fd feb0 	bl	8006aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d44:	480b      	ldr	r0, [pc, #44]	; (8008d74 <prvInitialiseTaskLists+0x74>)
 8008d46:	f7fd fead 	bl	8006aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <prvInitialiseTaskLists+0x78>)
 8008d4c:	4a05      	ldr	r2, [pc, #20]	; (8008d64 <prvInitialiseTaskLists+0x64>)
 8008d4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvInitialiseTaskLists+0x7c>)
 8008d52:	4a05      	ldr	r2, [pc, #20]	; (8008d68 <prvInitialiseTaskLists+0x68>)
 8008d54:	601a      	str	r2, [r3, #0]
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	2001433c 	.word	0x2001433c
 8008d64:	200143b4 	.word	0x200143b4
 8008d68:	200143c8 	.word	0x200143c8
 8008d6c:	200143e4 	.word	0x200143e4
 8008d70:	200143f8 	.word	0x200143f8
 8008d74:	20014410 	.word	0x20014410
 8008d78:	200143dc 	.word	0x200143dc
 8008d7c:	200143e0 	.word	0x200143e0

08008d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d86:	e028      	b.n	8008dda <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8008d88:	f7ff fbd6 	bl	8008538 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8008d8c:	4b17      	ldr	r3, [pc, #92]	; (8008dec <prvCheckTasksWaitingTermination+0x6c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8008d9c:	f7ff fbda 	bl	8008554 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d119      	bne.n	8008dda <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8008da6:	f7fe f817 	bl	8006dd8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008daa:	4b10      	ldr	r3, [pc, #64]	; (8008dec <prvCheckTasksWaitingTermination+0x6c>)
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd ff00 	bl	8006bbc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <prvCheckTasksWaitingTermination+0x70>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	4a0b      	ldr	r2, [pc, #44]	; (8008df0 <prvCheckTasksWaitingTermination+0x70>)
 8008dc4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <prvCheckTasksWaitingTermination+0x74>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	4a09      	ldr	r2, [pc, #36]	; (8008df4 <prvCheckTasksWaitingTermination+0x74>)
 8008dce:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8008dd0:	f7fe f82e 	bl	8006e30 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8008dd4:	6838      	ldr	r0, [r7, #0]
 8008dd6:	f000 f8db 	bl	8008f90 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <prvCheckTasksWaitingTermination+0x74>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1d2      	bne.n	8008d88 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200143f8 	.word	0x200143f8
 8008df0:	20014424 	.word	0x20014424
 8008df4:	2001440c 	.word	0x2001440c

08008df8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <vTaskGetInfo+0x1a>
 8008e0c:	4b28      	ldr	r3, [pc, #160]	; (8008eb0 <vTaskGetInfo+0xb8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	e000      	b.n	8008e14 <vTaskGetInfo+0x1c>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	609a      	str	r2, [r3, #8]
		#if ( INCLUDE_vTaskSuspend == 1 )
		{
			/* If the task is in the suspended list then there is a chance it is
			actually just blocked indefinitely - so really it should be reported as
			being in the Blocked state. */
			if( pxTaskStatus->eCurrentState == eSuspended )
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	7b1b      	ldrb	r3, [r3, #12]
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d10a      	bne.n	8008e5c <vTaskGetInfo+0x64>
			{
				vTaskSuspendAll();
 8008e46:	f7ff fb77 	bl	8008538 <vTaskSuspendAll>
				{
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <vTaskGetInfo+0x60>
					{
						pxTaskStatus->eCurrentState = eBlocked;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2202      	movs	r2, #2
 8008e56:	731a      	strb	r2, [r3, #12]
					}
				}
				xTaskResumeAll();
 8008e58:	f7ff fb7c 	bl	8008554 <xTaskResumeAll>
		}
		#endif /* INCLUDE_vTaskSuspend */

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the value
		of eState passed into this function is eInvalid - otherwise the state is
		just set to whatever is passed in. */
		if( eState != eInvalid )
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	d003      	beq.n	8008e7a <vTaskGetInfo+0x82>
		{
			pxTaskStatus->eCurrentState = eState;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	78fa      	ldrb	r2, [r7, #3]
 8008e76:	731a      	strb	r2, [r3, #12]
 8008e78:	e006      	b.n	8008e88 <vTaskGetInfo+0x90>
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff faba 	bl	80083f4 <eTaskGetState>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <vTaskGetInfo+0xaa>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f860 	bl	8008f58 <prvTaskCheckFreeStackSpace>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8008ea0:	e002      	b.n	8008ea8 <vTaskGetInfo+0xb0>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	841a      	strh	r2, [r3, #32]
		}
	}
 8008ea8:	bf00      	nop
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20014338 	.word	0x20014338

08008eb4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08a      	sub	sp, #40	; 0x28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	71fb      	strb	r3, [r7, #7]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d03f      	beq.n	8008f4e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	623b      	str	r3, [r7, #32]
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	605a      	str	r2, [r3, #4]
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d104      	bne.n	8008ef2 <prvListTasksWithinSingleList+0x3e>
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	605a      	str	r2, [r3, #4]
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d104      	bne.n	8008f1e <prvListTasksWithinSingleList+0x6a>
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8008f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f28:	4613      	mov	r3, r2
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	461a      	mov	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1899      	adds	r1, r3, r2
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	6978      	ldr	r0, [r7, #20]
 8008f3c:	f7ff ff5c 	bl	8008df8 <vTaskGetInfo>
				uxTask++;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	3301      	adds	r3, #1
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d1d5      	bne.n	8008efa <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3728      	adds	r7, #40	; 0x28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008f64:	e005      	b.n	8008f72 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	60fb      	str	r3, [r7, #12]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2ba5      	cmp	r3, #165	; 0xa5
 8008f78:	d0f5      	beq.n	8008f66 <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	089b      	lsrs	r3, r3, #2
 8008f7e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	b29b      	uxth	r3, r3
	}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe f8d5 	bl	800714c <vPortFree>
			vPortFree( pxTCB );
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fe f8d2 	bl	800714c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <prvResetNextTaskUnblockTime+0x44>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <prvResetNextTaskUnblockTime+0x14>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <prvResetNextTaskUnblockTime+0x16>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d004      	beq.n	8008fd4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fca:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <prvResetNextTaskUnblockTime+0x48>)
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fd2:	e008      	b.n	8008fe6 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <prvResetNextTaskUnblockTime+0x44>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	4a05      	ldr	r2, [pc, #20]	; (8008ff8 <prvResetNextTaskUnblockTime+0x48>)
 8008fe4:	6013      	str	r3, [r2, #0]
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200143dc 	.word	0x200143dc
 8008ff8:	20014444 	.word	0x20014444

08008ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009002:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <xTaskGetSchedulerState+0x34>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800900a:	2301      	movs	r3, #1
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	e008      	b.n	8009022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009010:	4b08      	ldr	r3, [pc, #32]	; (8009034 <xTaskGetSchedulerState+0x38>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009018:	2302      	movs	r3, #2
 800901a:	607b      	str	r3, [r7, #4]
 800901c:	e001      	b.n	8009022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800901e:	2300      	movs	r3, #0
 8009020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009022:	687b      	ldr	r3, [r7, #4]
	}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20014430 	.word	0x20014430
 8009034:	2001444c 	.word	0x2001444c

08009038 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d062      	beq.n	8009110 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	4b32      	ldr	r3, [pc, #200]	; (8009118 <vTaskPriorityInherit+0xe0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	429a      	cmp	r2, r3
 8009056:	d25b      	bcs.n	8009110 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	db06      	blt.n	800906e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009060:	4b2d      	ldr	r3, [pc, #180]	; (8009118 <vTaskPriorityInherit+0xe0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	f1c3 0206 	rsb	r2, r3, #6
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6959      	ldr	r1, [r3, #20]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4a27      	ldr	r2, [pc, #156]	; (800911c <vTaskPriorityInherit+0xe4>)
 8009080:	4413      	add	r3, r2
 8009082:	4299      	cmp	r1, r3
 8009084:	d101      	bne.n	800908a <vTaskPriorityInherit+0x52>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <vTaskPriorityInherit+0x54>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d03a      	beq.n	8009106 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3304      	adds	r3, #4
 8009094:	4618      	mov	r0, r3
 8009096:	f7fd fd91 	bl	8006bbc <uxListRemove>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d115      	bne.n	80090cc <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	491d      	ldr	r1, [pc, #116]	; (800911c <vTaskPriorityInherit+0xe4>)
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	440b      	add	r3, r1
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10a      	bne.n	80090cc <vTaskPriorityInherit+0x94>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	2201      	movs	r2, #1
 80090bc:	fa02 f303 	lsl.w	r3, r2, r3
 80090c0:	43da      	mvns	r2, r3
 80090c2:	4b17      	ldr	r3, [pc, #92]	; (8009120 <vTaskPriorityInherit+0xe8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4013      	ands	r3, r2
 80090c8:	4a15      	ldr	r2, [pc, #84]	; (8009120 <vTaskPriorityInherit+0xe8>)
 80090ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090cc:	4b12      	ldr	r3, [pc, #72]	; (8009118 <vTaskPriorityInherit+0xe0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	2201      	movs	r2, #1
 80090dc:	409a      	lsls	r2, r3
 80090de:	4b10      	ldr	r3, [pc, #64]	; (8009120 <vTaskPriorityInherit+0xe8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	4a0e      	ldr	r2, [pc, #56]	; (8009120 <vTaskPriorityInherit+0xe8>)
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4a09      	ldr	r2, [pc, #36]	; (800911c <vTaskPriorityInherit+0xe4>)
 80090f6:	441a      	add	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fd fcfe 	bl	8006b00 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009104:	e004      	b.n	8009110 <vTaskPriorityInherit+0xd8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009106:	4b04      	ldr	r3, [pc, #16]	; (8009118 <vTaskPriorityInherit+0xe0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009110:	bf00      	nop
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20014338 	.word	0x20014338
 800911c:	2001433c 	.word	0x2001433c
 8009120:	2001442c 	.word	0x2001442c

08009124 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d062      	beq.n	8009200 <xTaskPriorityDisinherit+0xdc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800913a:	4b34      	ldr	r3, [pc, #208]	; (800920c <xTaskPriorityDisinherit+0xe8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	429a      	cmp	r2, r3
 8009142:	d004      	beq.n	800914e <xTaskPriorityDisinherit+0x2a>
 8009144:	4932      	ldr	r1, [pc, #200]	; (8009210 <xTaskPriorityDisinherit+0xec>)
 8009146:	f640 60c7 	movw	r0, #3783	; 0xec7
 800914a:	f7f8 fea9 	bl	8001ea0 <vAssertCalled>

			configASSERT( pxTCB->uxMutexesHeld );
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <xTaskPriorityDisinherit+0x3c>
 8009156:	492e      	ldr	r1, [pc, #184]	; (8009210 <xTaskPriorityDisinherit+0xec>)
 8009158:	f640 60c9 	movw	r0, #3785	; 0xec9
 800915c:	f7f8 fea0 	bl	8001ea0 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009164:	1e5a      	subs	r2, r3, #1
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009172:	429a      	cmp	r2, r3
 8009174:	d044      	beq.n	8009200 <xTaskPriorityDisinherit+0xdc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917a:	2b00      	cmp	r3, #0
 800917c:	d140      	bne.n	8009200 <xTaskPriorityDisinherit+0xdc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	3304      	adds	r3, #4
 8009182:	4618      	mov	r0, r3
 8009184:	f7fd fd1a 	bl	8006bbc <uxListRemove>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d115      	bne.n	80091ba <xTaskPriorityDisinherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009192:	4920      	ldr	r1, [pc, #128]	; (8009214 <xTaskPriorityDisinherit+0xf0>)
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xTaskPriorityDisinherit+0x96>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	2201      	movs	r2, #1
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	43da      	mvns	r2, r3
 80091b0:	4b19      	ldr	r3, [pc, #100]	; (8009218 <xTaskPriorityDisinherit+0xf4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4013      	ands	r3, r2
 80091b6:	4a18      	ldr	r2, [pc, #96]	; (8009218 <xTaskPriorityDisinherit+0xf4>)
 80091b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	f1c3 0206 	rsb	r2, r3, #6
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	2201      	movs	r2, #1
 80091d4:	409a      	lsls	r2, r3
 80091d6:	4b10      	ldr	r3, [pc, #64]	; (8009218 <xTaskPriorityDisinherit+0xf4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4313      	orrs	r3, r2
 80091dc:	4a0e      	ldr	r2, [pc, #56]	; (8009218 <xTaskPriorityDisinherit+0xf4>)
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4a09      	ldr	r2, [pc, #36]	; (8009214 <xTaskPriorityDisinherit+0xf0>)
 80091ee:	441a      	add	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fd fc82 	bl	8006b00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009200:	68fb      	ldr	r3, [r7, #12]
	}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20014338 	.word	0x20014338
 8009210:	08014aec 	.word	0x08014aec
 8009214:	2001433c 	.word	0x2001433c
 8009218:	2001442c 	.word	0x2001442c

0800921c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f002 ff33 	bl	800c094 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f6 ffee 	bl	8000210 <strlen>
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	e007      	b.n	8009248 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	2220      	movs	r2, #32
 8009240:	701a      	strb	r2, [r3, #0]
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b0e      	cmp	r3, #14
 800924c:	d9f4      	bls.n	8009238 <prvWriteNameToBuffer+0x1c>
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
	}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop

08009268 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b089      	sub	sp, #36	; 0x24
 800926c:	af02      	add	r7, sp, #8
 800926e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8009276:	4b45      	ldr	r3, [pc, #276]	; (800938c <vTaskList+0x124>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800927c:	4b43      	ldr	r3, [pc, #268]	; (800938c <vTaskList+0x124>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4618      	mov	r0, r3
 800928a:	f7fd fea9 	bl	8006fe0 <pvPortMalloc>
 800928e:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d075      	beq.n	8009382 <vTaskList+0x11a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	4619      	mov	r1, r3
 800929c:	6938      	ldr	r0, [r7, #16]
 800929e:	f7ff fa0d 	bl	80086bc <uxTaskGetSystemState>
 80092a2:	4603      	mov	r3, r0
 80092a4:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80092a6:	2300      	movs	r3, #0
 80092a8:	60bb      	str	r3, [r7, #8]
 80092aa:	e063      	b.n	8009374 <vTaskList+0x10c>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	461a      	mov	r2, r3
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	4413      	add	r3, r2
 80092bc:	7b1b      	ldrb	r3, [r3, #12]
 80092be:	3b01      	subs	r3, #1
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d817      	bhi.n	80092f4 <vTaskList+0x8c>
 80092c4:	a201      	add	r2, pc, #4	; (adr r2, 80092cc <vTaskList+0x64>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	080092e3 	.word	0x080092e3
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	080092ef 	.word	0x080092ef
				{
					case eReady:		cStatus = tskREADY_CHAR;
 80092dc:	2352      	movs	r3, #82	; 0x52
 80092de:	75fb      	strb	r3, [r7, #23]
										break;
 80092e0:	e00b      	b.n	80092fa <vTaskList+0x92>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80092e2:	2342      	movs	r3, #66	; 0x42
 80092e4:	75fb      	strb	r3, [r7, #23]
										break;
 80092e6:	e008      	b.n	80092fa <vTaskList+0x92>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80092e8:	2353      	movs	r3, #83	; 0x53
 80092ea:	75fb      	strb	r3, [r7, #23]
										break;
 80092ec:	e005      	b.n	80092fa <vTaskList+0x92>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80092ee:	2344      	movs	r3, #68	; 0x44
 80092f0:	75fb      	strb	r3, [r7, #23]
										break;
 80092f2:	e002      	b.n	80092fa <vTaskList+0x92>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
										break;
 80092f8:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	461a      	mov	r2, r3
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	4413      	add	r3, r2
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff ff84 	bl	800921c <prvWriteNameToBuffer>
 8009314:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8009316:	7df9      	ldrb	r1, [r7, #23]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	4613      	mov	r3, r2
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	461a      	mov	r2, r3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	4413      	add	r3, r2
 8009328:	6918      	ldr	r0, [r3, #16]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	4613      	mov	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	461a      	mov	r2, r3
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4413      	add	r3, r2
 800933a:	8c1b      	ldrh	r3, [r3, #32]
 800933c:	461c      	mov	r4, r3
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	461a      	mov	r2, r3
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	4413      	add	r3, r2
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	9400      	str	r4, [sp, #0]
 8009354:	4603      	mov	r3, r0
 8009356:	460a      	mov	r2, r1
 8009358:	490d      	ldr	r1, [pc, #52]	; (8009390 <vTaskList+0x128>)
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f002 fe58 	bl	800c010 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7f6 ff55 	bl	8000210 <strlen>
 8009366:	4602      	mov	r2, r0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	607b      	str	r3, [r7, #4]
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	3301      	adds	r3, #1
 8009372:	60bb      	str	r3, [r7, #8]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	429a      	cmp	r2, r3
 800937a:	d397      	bcc.n	80092ac <vTaskList+0x44>
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800937c:	6938      	ldr	r0, [r7, #16]
 800937e:	f7fd fee5 	bl	800714c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	bd90      	pop	{r4, r7, pc}
 800938a:	bf00      	nop
 800938c:	20014424 	.word	0x20014424
 8009390:	08014b0c 	.word	0x08014b0c

08009394 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093a6:	3201      	adds	r2, #1
 80093a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093ac:	681b      	ldr	r3, [r3, #0]
	}
 80093ae:	4618      	mov	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20014338 	.word	0x20014338

080093bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093c6:	4b29      	ldr	r3, [pc, #164]	; (800946c <prvAddCurrentTaskToDelayedList+0xb0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093cc:	4b28      	ldr	r3, [pc, #160]	; (8009470 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3304      	adds	r3, #4
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd fbf2 	bl	8006bbc <uxListRemove>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10b      	bne.n	80093f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80093de:	4b24      	ldr	r3, [pc, #144]	; (8009470 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	2201      	movs	r2, #1
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43da      	mvns	r2, r3
 80093ec:	4b21      	ldr	r3, [pc, #132]	; (8009474 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4013      	ands	r3, r2
 80093f2:	4a20      	ldr	r2, [pc, #128]	; (8009474 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fc:	d10a      	bne.n	8009414 <prvAddCurrentTaskToDelayedList+0x58>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d007      	beq.n	8009414 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009404:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	481a      	ldr	r0, [pc, #104]	; (8009478 <prvAddCurrentTaskToDelayedList+0xbc>)
 800940e:	f7fd fb77 	bl	8006b00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009412:	e026      	b.n	8009462 <prvAddCurrentTaskToDelayedList+0xa6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4413      	add	r3, r2
 800941a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800941c:	4b14      	ldr	r3, [pc, #80]	; (8009470 <prvAddCurrentTaskToDelayedList+0xb4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	429a      	cmp	r2, r3
 800942a:	d209      	bcs.n	8009440 <prvAddCurrentTaskToDelayedList+0x84>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942c:	4b13      	ldr	r3, [pc, #76]	; (800947c <prvAddCurrentTaskToDelayedList+0xc0>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7fd fb85 	bl	8006b48 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800943e:	e010      	b.n	8009462 <prvAddCurrentTaskToDelayedList+0xa6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009440:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3304      	adds	r3, #4
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7fd fb7b 	bl	8006b48 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009452:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	429a      	cmp	r2, r3
 800945a:	d202      	bcs.n	8009462 <prvAddCurrentTaskToDelayedList+0xa6>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800945c:	4a09      	ldr	r2, [pc, #36]	; (8009484 <prvAddCurrentTaskToDelayedList+0xc8>)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20014428 	.word	0x20014428
 8009470:	20014338 	.word	0x20014338
 8009474:	2001442c 	.word	0x2001442c
 8009478:	20014410 	.word	0x20014410
 800947c:	200143e0 	.word	0x200143e0
 8009480:	200143dc 	.word	0x200143dc
 8009484:	20014444 	.word	0x20014444

08009488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800948e:	2300      	movs	r3, #0
 8009490:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009492:	f000 fa91 	bl	80099b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009496:	4b0e      	ldr	r3, [pc, #56]	; (80094d0 <xTimerCreateTimerTask+0x48>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800949e:	4b0d      	ldr	r3, [pc, #52]	; (80094d4 <xTimerCreateTimerTask+0x4c>)
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	2305      	movs	r3, #5
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	2300      	movs	r3, #0
 80094a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80094ac:	490a      	ldr	r1, [pc, #40]	; (80094d8 <xTimerCreateTimerTask+0x50>)
 80094ae:	480b      	ldr	r0, [pc, #44]	; (80094dc <xTimerCreateTimerTask+0x54>)
 80094b0:	f7fe fd40 	bl	8007f34 <xTaskCreate>
 80094b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <xTimerCreateTimerTask+0x3e>
 80094bc:	4908      	ldr	r1, [pc, #32]	; (80094e0 <xTimerCreateTimerTask+0x58>)
 80094be:	f240 1033 	movw	r0, #307	; 0x133
 80094c2:	f7f8 fced 	bl	8001ea0 <vAssertCalled>
	return xReturn;
 80094c6:	687b      	ldr	r3, [r7, #4]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20014488 	.word	0x20014488
 80094d4:	2001448c 	.word	0x2001448c
 80094d8:	08014b34 	.word	0x08014b34
 80094dc:	080095f1 	.word	0x080095f1
 80094e0:	08014b3c 	.word	0x08014b3c

080094e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <xTimerGenericCommand+0x22>
 80094fc:	491c      	ldr	r1, [pc, #112]	; (8009570 <xTimerGenericCommand+0x8c>)
 80094fe:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8009502:	f7f8 fccd 	bl	8001ea0 <vAssertCalled>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009506:	4b1b      	ldr	r3, [pc, #108]	; (8009574 <xTimerGenericCommand+0x90>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d02a      	beq.n	8009564 <xTimerGenericCommand+0x80>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b05      	cmp	r3, #5
 800951e:	dc18      	bgt.n	8009552 <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009520:	f7ff fd6c 	bl	8008ffc <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b02      	cmp	r3, #2
 8009528:	d109      	bne.n	800953e <xTimerGenericCommand+0x5a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800952a:	4b12      	ldr	r3, [pc, #72]	; (8009574 <xTimerGenericCommand+0x90>)
 800952c:	6818      	ldr	r0, [r3, #0]
 800952e:	f107 0114 	add.w	r1, r7, #20
 8009532:	2300      	movs	r3, #0
 8009534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009536:	f7fe f807 	bl	8007548 <xQueueGenericSend>
 800953a:	6278      	str	r0, [r7, #36]	; 0x24
 800953c:	e012      	b.n	8009564 <xTimerGenericCommand+0x80>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <xTimerGenericCommand+0x90>)
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f107 0114 	add.w	r1, r7, #20
 8009546:	2300      	movs	r3, #0
 8009548:	2200      	movs	r2, #0
 800954a:	f7fd fffd 	bl	8007548 <xQueueGenericSend>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24
 8009550:	e008      	b.n	8009564 <xTimerGenericCommand+0x80>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009552:	4b08      	ldr	r3, [pc, #32]	; (8009574 <xTimerGenericCommand+0x90>)
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f107 0114 	add.w	r1, r7, #20
 800955a:	2300      	movs	r3, #0
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	f7fe f8ef 	bl	8007740 <xQueueGenericSendFromISR>
 8009562:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	08014b3c 	.word	0x08014b3c
 8009574:	20014488 	.word	0x20014488

08009578 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af02      	add	r7, sp, #8
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <prvProcessExpiredTimer+0x70>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3304      	adds	r3, #4
 8009590:	4618      	mov	r0, r3
 8009592:	f7fd fb13 	bl	8006bbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d11c      	bne.n	80095d8 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	18d1      	adds	r1, r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 f8c4 	bl	8009738 <prvInsertTimerInActiveList>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d010      	beq.n	80095d8 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095b6:	2300      	movs	r3, #0
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	2300      	movs	r3, #0
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	2100      	movs	r1, #0
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff ff8f 	bl	80094e4 <xTimerGenericCommand>
 80095c6:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <prvProcessExpiredTimer+0x60>
 80095ce:	4907      	ldr	r1, [pc, #28]	; (80095ec <prvProcessExpiredTimer+0x74>)
 80095d0:	f44f 7002 	mov.w	r0, #520	; 0x208
 80095d4:	f7f8 fc64 	bl	8001ea0 <vAssertCalled>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	4798      	blx	r3
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20014480 	.word	0x20014480
 80095ec:	08014b3c 	.word	0x08014b3c

080095f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f857 	bl	80096b0 <prvGetNextExpireTime>
 8009602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f803 	bl	8009614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800960e:	f000 f8d5 	bl	80097bc <prvProcessReceivedCommands>
	}
 8009612:	e7f1      	b.n	80095f8 <prvTimerTask+0x8>

08009614 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800961e:	f7fe ff8b 	bl	8008538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f866 	bl	80096f8 <prvSampleTimeNow>
 800962c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d130      	bne.n	8009696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <prvProcessTimerOrBlockTask+0x3c>
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	429a      	cmp	r2, r3
 8009640:	d806      	bhi.n	8009650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009642:	f7fe ff87 	bl	8008554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ff95 	bl	8009578 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800964e:	e024      	b.n	800969a <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d008      	beq.n	8009668 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009656:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <prvProcessTimerOrBlockTask+0x90>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	bf0c      	ite	eq
 8009660:	2301      	moveq	r3, #1
 8009662:	2300      	movne	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009668:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <prvProcessTimerOrBlockTask+0x94>)
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4619      	mov	r1, r3
 8009676:	f7fe fbd9 	bl	8007e2c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800967a:	f7fe ff6b 	bl	8008554 <xTaskResumeAll>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <prvProcessTimerOrBlockTask+0x98>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009694:	e001      	b.n	800969a <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8009696:	f7fe ff5d 	bl	8008554 <xTaskResumeAll>
		}
	}
}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20014484 	.word	0x20014484
 80096a8:	20014488 	.word	0x20014488
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b8:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <prvGetNextExpireTime+0x44>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bf0c      	ite	eq
 80096c2:	2301      	moveq	r3, #1
 80096c4:	2300      	movne	r3, #0
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d105      	bne.n	80096e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <prvGetNextExpireTime+0x44>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e001      	b.n	80096e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	20014480 	.word	0x20014480

080096f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009700:	f7fe ffc0 	bl	8008684 <xTaskGetTickCount>
 8009704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009706:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <prvSampleTimeNow+0x3c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	429a      	cmp	r2, r3
 800970e:	d205      	bcs.n	800971c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009710:	f000 f8f4 	bl	80098fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	e002      	b.n	8009722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009722:	4a04      	ldr	r2, [pc, #16]	; (8009734 <prvSampleTimeNow+0x3c>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009728:	68fb      	ldr	r3, [r7, #12]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20014490 	.word	0x20014490

08009738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	429a      	cmp	r2, r3
 800975c:	d812      	bhi.n	8009784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	429a      	cmp	r2, r3
 800976a:	d302      	bcc.n	8009772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	e01b      	b.n	80097aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <prvInsertTimerInActiveList+0x7c>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fd f9e3 	bl	8006b48 <vListInsert>
 8009782:	e012      	b.n	80097aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d206      	bcs.n	800979a <prvInsertTimerInActiveList+0x62>
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d302      	bcc.n	800979a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e007      	b.n	80097aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <prvInsertTimerInActiveList+0x80>)
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fd f9cf 	bl	8006b48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097aa:	697b      	ldr	r3, [r7, #20]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20014484 	.word	0x20014484
 80097b8:	20014480 	.word	0x20014480

080097bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08c      	sub	sp, #48	; 0x30
 80097c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097c2:	e087      	b.n	80098d4 <prvProcessReceivedCommands+0x118>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da13      	bge.n	80097f2 <prvProcessReceivedCommands+0x36>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	3304      	adds	r3, #4
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <prvProcessReceivedCommands+0x26>
 80097d8:	4946      	ldr	r1, [pc, #280]	; (80098f4 <prvProcessReceivedCommands+0x138>)
 80097da:	f240 20e7 	movw	r0, #743	; 0x2e7
 80097de:	f7f8 fb5f 	bl	8001ea0 <vAssertCalled>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e8:	6850      	ldr	r0, [r2, #4]
 80097ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ec:	6892      	ldr	r2, [r2, #8]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	db6d      	blt.n	80098d4 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	3304      	adds	r3, #4
 8009808:	4618      	mov	r0, r3
 800980a:	f7fd f9d7 	bl	8006bbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800980e:	1d3b      	adds	r3, r7, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff ff71 	bl	80096f8 <prvSampleTimeNow>
 8009816:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b09      	cmp	r3, #9
 800981c:	d859      	bhi.n	80098d2 <prvProcessReceivedCommands+0x116>
 800981e:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <prvProcessReceivedCommands+0x68>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	0800984d 	.word	0x0800984d
 8009828:	0800984d 	.word	0x0800984d
 800982c:	0800984d 	.word	0x0800984d
 8009830:	080098d5 	.word	0x080098d5
 8009834:	0800989f 	.word	0x0800989f
 8009838:	080098cb 	.word	0x080098cb
 800983c:	0800984d 	.word	0x0800984d
 8009840:	0800984d 	.word	0x0800984d
 8009844:	080098d5 	.word	0x080098d5
 8009848:	0800989f 	.word	0x0800989f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	18d1      	adds	r1, r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	6a38      	ldr	r0, [r7, #32]
 800985a:	f7ff ff6d 	bl	8009738 <prvInsertTimerInActiveList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d037      	beq.n	80098d4 <prvProcessReceivedCommands+0x118>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	6a38      	ldr	r0, [r7, #32]
 800986a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d12f      	bne.n	80098d4 <prvProcessReceivedCommands+0x118>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	441a      	add	r2, r3
 800987c:	2300      	movs	r3, #0
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2300      	movs	r3, #0
 8009882:	2100      	movs	r1, #0
 8009884:	6a38      	ldr	r0, [r7, #32]
 8009886:	f7ff fe2d 	bl	80094e4 <xTimerGenericCommand>
 800988a:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d120      	bne.n	80098d4 <prvProcessReceivedCommands+0x118>
 8009892:	4918      	ldr	r1, [pc, #96]	; (80098f4 <prvProcessReceivedCommands+0x138>)
 8009894:	f240 3021 	movw	r0, #801	; 0x321
 8009898:	f7f8 fb02 	bl	8001ea0 <vAssertCalled>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800989c:	e01a      	b.n	80098d4 <prvProcessReceivedCommands+0x118>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <prvProcessReceivedCommands+0xfa>
 80098ac:	4911      	ldr	r1, [pc, #68]	; (80098f4 <prvProcessReceivedCommands+0x138>)
 80098ae:	f44f 704e 	mov.w	r0, #824	; 0x338
 80098b2:	f7f8 faf5 	bl	8001ea0 <vAssertCalled>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	18d1      	adds	r1, r2, r3
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	6a38      	ldr	r0, [r7, #32]
 80098c4:	f7ff ff38 	bl	8009738 <prvInsertTimerInActiveList>
					break;
 80098c8:	e004      	b.n	80098d4 <prvProcessReceivedCommands+0x118>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80098ca:	6a38      	ldr	r0, [r7, #32]
 80098cc:	f7fd fc3e 	bl	800714c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098d0:	e000      	b.n	80098d4 <prvProcessReceivedCommands+0x118>

				default	:
					/* Don't expect to get here. */
					break;
 80098d2:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098d4:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <prvProcessReceivedCommands+0x13c>)
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	2300      	movs	r3, #0
 80098de:	2200      	movs	r2, #0
 80098e0:	f7fd ffc8 	bl	8007874 <xQueueGenericReceive>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f47f af6c 	bne.w	80097c4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 80098ec:	bf00      	nop
 80098ee:	3728      	adds	r7, #40	; 0x28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	08014b3c 	.word	0x08014b3c
 80098f8:	20014488 	.word	0x20014488

080098fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009902:	e03f      	b.n	8009984 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009904:	4b29      	ldr	r3, [pc, #164]	; (80099ac <prvSwitchTimerLists+0xb0>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800990e:	4b27      	ldr	r3, [pc, #156]	; (80099ac <prvSwitchTimerLists+0xb0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	3304      	adds	r3, #4
 800991c:	4618      	mov	r0, r3
 800991e:	f7fd f94d 	bl	8006bbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	6938      	ldr	r0, [r7, #16]
 8009928:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d128      	bne.n	8009984 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4413      	add	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	429a      	cmp	r2, r3
 8009942:	d90e      	bls.n	8009962 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009950:	4b16      	ldr	r3, [pc, #88]	; (80099ac <prvSwitchTimerLists+0xb0>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3304      	adds	r3, #4
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7fd f8f4 	bl	8006b48 <vListInsert>
 8009960:	e010      	b.n	8009984 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009962:	2300      	movs	r3, #0
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	2100      	movs	r1, #0
 800996c:	6938      	ldr	r0, [r7, #16]
 800996e:	f7ff fdb9 	bl	80094e4 <xTimerGenericCommand>
 8009972:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d104      	bne.n	8009984 <prvSwitchTimerLists+0x88>
 800997a:	490d      	ldr	r1, [pc, #52]	; (80099b0 <prvSwitchTimerLists+0xb4>)
 800997c:	f240 3092 	movw	r0, #914	; 0x392
 8009980:	f7f8 fa8e 	bl	8001ea0 <vAssertCalled>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009984:	4b09      	ldr	r3, [pc, #36]	; (80099ac <prvSwitchTimerLists+0xb0>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1ba      	bne.n	8009904 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800998e:	4b07      	ldr	r3, [pc, #28]	; (80099ac <prvSwitchTimerLists+0xb0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8009994:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <prvSwitchTimerLists+0xb8>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a04      	ldr	r2, [pc, #16]	; (80099ac <prvSwitchTimerLists+0xb0>)
 800999a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800999c:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <prvSwitchTimerLists+0xb8>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6013      	str	r3, [r2, #0]
}
 80099a2:	bf00      	nop
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20014480 	.word	0x20014480
 80099b0:	08014b3c 	.word	0x08014b3c
 80099b4:	20014484 	.word	0x20014484

080099b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099bc:	f7fd fa0c 	bl	8006dd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099c0:	4b12      	ldr	r3, [pc, #72]	; (8009a0c <prvCheckForValidListAndQueue+0x54>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11d      	bne.n	8009a04 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80099c8:	4811      	ldr	r0, [pc, #68]	; (8009a10 <prvCheckForValidListAndQueue+0x58>)
 80099ca:	f7fd f86b 	bl	8006aa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099ce:	4811      	ldr	r0, [pc, #68]	; (8009a14 <prvCheckForValidListAndQueue+0x5c>)
 80099d0:	f7fd f868 	bl	8006aa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099d4:	4b10      	ldr	r3, [pc, #64]	; (8009a18 <prvCheckForValidListAndQueue+0x60>)
 80099d6:	4a0e      	ldr	r2, [pc, #56]	; (8009a10 <prvCheckForValidListAndQueue+0x58>)
 80099d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099da:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <prvCheckForValidListAndQueue+0x64>)
 80099dc:	4a0d      	ldr	r2, [pc, #52]	; (8009a14 <prvCheckForValidListAndQueue+0x5c>)
 80099de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80099e0:	2200      	movs	r2, #0
 80099e2:	2110      	movs	r1, #16
 80099e4:	2005      	movs	r0, #5
 80099e6:	f7fd fd21 	bl	800742c <xQueueGenericCreate>
 80099ea:	4602      	mov	r2, r0
 80099ec:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <prvCheckForValidListAndQueue+0x54>)
 80099ee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <prvCheckForValidListAndQueue+0x54>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d005      	beq.n	8009a04 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <prvCheckForValidListAndQueue+0x54>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4908      	ldr	r1, [pc, #32]	; (8009a20 <prvCheckForValidListAndQueue+0x68>)
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe f9ec 	bl	8007ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a04:	f7fd fa14 	bl	8006e30 <vPortExitCritical>
}
 8009a08:	bf00      	nop
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20014488 	.word	0x20014488
 8009a10:	20014458 	.word	0x20014458
 8009a14:	2001446c 	.word	0x2001446c
 8009a18:	20014480 	.word	0x20014480
 8009a1c:	20014484 	.word	0x20014484
 8009a20:	08014b58 	.word	0x08014b58

08009a24 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d103      	bne.n	8009a3e <FreeRTOS_CLIRegisterCommand+0x1a>
 8009a36:	4915      	ldr	r1, [pc, #84]	; (8009a8c <FreeRTOS_CLIRegisterCommand+0x68>)
 8009a38:	2080      	movs	r0, #128	; 0x80
 8009a3a:	f7f8 fa31 	bl	8001ea0 <vAssertCalled>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8009a3e:	2008      	movs	r0, #8
 8009a40:	f7fd face 	bl	8006fe0 <pvPortMalloc>
 8009a44:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <FreeRTOS_CLIRegisterCommand+0x30>
 8009a4c:	490f      	ldr	r1, [pc, #60]	; (8009a8c <FreeRTOS_CLIRegisterCommand+0x68>)
 8009a4e:	2084      	movs	r0, #132	; 0x84
 8009a50:	f7f8 fa26 	bl	8001ea0 <vAssertCalled>

	if( pxNewListItem != NULL )
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d012      	beq.n	8009a80 <FreeRTOS_CLIRegisterCommand+0x5c>
	{
		taskENTER_CRITICAL();
 8009a5a:	f7fd f9bd 	bl	8006dd8 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2200      	movs	r2, #0
 8009a68:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8009a6a:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <FreeRTOS_CLIRegisterCommand+0x6c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8009a72:	4a07      	ldr	r2, [pc, #28]	; (8009a90 <FreeRTOS_CLIRegisterCommand+0x6c>)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8009a78:	f7fd f9da 	bl	8006e30 <vPortExitCritical>

		xReturn = pdPASS;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009a80:	68fb      	ldr	r3, [r7, #12]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	08014b94 	.word	0x08014b94
 8009a90:	2001001c 	.word	0x2001001c

08009a94 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8009aa4:	4b3a      	ldr	r3, [pc, #232]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d141      	bne.n	8009b30 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8009aac:	4b38      	ldr	r3, [pc, #224]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009aae:	4a39      	ldr	r2, [pc, #228]	; (8009b94 <FreeRTOS_CLIProcessCommand+0x100>)
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e037      	b.n	8009b24 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8009ab4:	4b36      	ldr	r3, [pc, #216]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8009abe:	69b8      	ldr	r0, [r7, #24]
 8009ac0:	f7f6 fba6 	bl	8000210 <strlen>
 8009ac4:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	4413      	add	r3, r2
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d005      	beq.n	8009ade <FreeRTOS_CLIProcessCommand+0x4a>
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d11d      	bne.n	8009b1a <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	69b9      	ldr	r1, [r7, #24]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f002 faf0 	bl	800c0c8 <strncmp>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d115      	bne.n	8009b1a <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8009aee:	4b28      	ldr	r3, [pc, #160]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db18      	blt.n	8009b2e <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f8e1 	bl	8009cc4 <prvGetNumberOfParameters>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d00c      	beq.n	8009b2e <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8009b18:	e009      	b.n	8009b2e <FreeRTOS_CLIProcessCommand+0x9a>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8009b1a:	4b1d      	ldr	r3, [pc, #116]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	4b1a      	ldr	r3, [pc, #104]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1c3      	bne.n	8009ab4 <FreeRTOS_CLIProcessCommand+0x20>
 8009b2c:	e000      	b.n	8009b30 <FreeRTOS_CLIProcessCommand+0x9c>
						{
							xReturn = pdFALSE;
						}
					}

					break;
 8009b2e:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8009b30:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <FreeRTOS_CLIProcessCommand+0xbc>
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d108      	bne.n	8009b50 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	4915      	ldr	r1, [pc, #84]	; (8009b98 <FreeRTOS_CLIProcessCommand+0x104>)
 8009b42:	68b8      	ldr	r0, [r7, #8]
 8009b44:	f002 fad5 	bl	800c0f2 <strncpy>
		pxCommand = NULL;
 8009b48:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e01a      	b.n	8009b86 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8009b50:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00f      	beq.n	8009b78 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8009b58:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	4798      	blx	r3
 8009b68:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8009b70:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <FreeRTOS_CLIProcessCommand+0xfc>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e006      	b.n	8009b86 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	4908      	ldr	r1, [pc, #32]	; (8009b9c <FreeRTOS_CLIProcessCommand+0x108>)
 8009b7c:	68b8      	ldr	r0, [r7, #8]
 8009b7e:	f002 fab8 	bl	800c0f2 <strncpy>
		xReturn = pdFALSE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8009b86:	69fb      	ldr	r3, [r7, #28]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	20014688 	.word	0x20014688
 8009b94:	20010014 	.word	0x20010014
 8009b98:	08014bcc 	.word	0x08014bcc
 8009b9c:	08014c24 	.word	0x08014c24

08009ba0 <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	20014494 	.word	0x20014494

08009bb4 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8009bce:	e03b      	b.n	8009c48 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d007      	beq.n	8009bee <FreeRTOS_CLIGetParameter+0x3a>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	d1f4      	bne.n	8009bd0 <FreeRTOS_CLIGetParameter+0x1c>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8009be6:	e002      	b.n	8009bee <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <FreeRTOS_CLIGetParameter+0x4a>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b20      	cmp	r3, #32
 8009bfc:	d0f4      	beq.n	8009be8 <FreeRTOS_CLIGetParameter+0x34>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d025      	beq.n	8009c52 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d119      	bne.n	8009c48 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8009c18:	e007      	b.n	8009c2a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <FreeRTOS_CLIGetParameter+0x86>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d1ef      	bne.n	8009c1a <FreeRTOS_CLIGetParameter+0x66>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
				}

				break;
 8009c46:	e006      	b.n	8009c56 <FreeRTOS_CLIGetParameter+0xa2>
UBaseType_t uxParametersFound = 0;
const char *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d3c2      	bcc.n	8009bd6 <FreeRTOS_CLIGetParameter+0x22>
 8009c50:	e002      	b.n	8009c58 <FreeRTOS_CLIGetParameter+0xa4>
				break;
			}
		}
		else
		{
			break;
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <FreeRTOS_CLIGetParameter+0xa4>
				if( *pxParameterStringLength == 0 )
				{
					pcReturn = NULL;
				}

				break;
 8009c56:	bf00      	nop
		{
			break;
		}
	}

	return pcReturn;
 8009c58:	693b      	ldr	r3, [r7, #16]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop

08009c68 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8009c74:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <prvHelpCommand+0x54>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <prvHelpCommand+0x54>)
 8009c7e:	4a10      	ldr	r2, [pc, #64]	; (8009cc0 <prvHelpCommand+0x58>)
 8009c80:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8009c82:	4b0e      	ldr	r3, [pc, #56]	; (8009cbc <prvHelpCommand+0x54>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f002 fa2f 	bl	800c0f2 <strncpy>
	pxCommand = pxCommand->pxNext;
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <prvHelpCommand+0x54>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4a08      	ldr	r2, [pc, #32]	; (8009cbc <prvHelpCommand+0x54>)
 8009c9c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <prvHelpCommand+0x54>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d102      	bne.n	8009cac <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	617b      	str	r3, [r7, #20]
 8009caa:	e001      	b.n	8009cb0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8009cac:	2301      	movs	r3, #1
 8009cae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cb0:	697b      	ldr	r3, [r7, #20]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	2001468c 	.word	0x2001468c
 8009cc0:	20010014 	.word	0x20010014

08009cc4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8009cd4:	e014      	b.n	8009d00 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d10b      	bne.n	8009cf6 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d00a      	beq.n	8009cfa <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8009ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	3301      	adds	r3, #1
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	60bb      	str	r3, [r7, #8]
 8009cf4:	e001      	b.n	8009cfa <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e6      	bne.n	8009cd6 <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d105      	bne.n	8009d1a <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 8009d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8009d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop

08009d2c <HW_ConfigAll>:
  *         module.
  * @param  None
  * @retval None
  */
static void HW_ConfigAll(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
   /*
    * Configure the Debug UART init structure:
    *   8 bits length + 1 stop bit, no parity
    *   Baudrate 115200 kbps
    */
    Debug_Config.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8009d30:	4b16      	ldr	r3, [pc, #88]	; (8009d8c <HW_ConfigAll+0x60>)
 8009d32:	220c      	movs	r2, #12
 8009d34:	611a      	str	r2, [r3, #16]
    Debug_Config.USART_BaudRate            = 115200;
 8009d36:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <HW_ConfigAll+0x60>)
 8009d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009d3c:	601a      	str	r2, [r3, #0]
    Debug_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <HW_ConfigAll+0x60>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	615a      	str	r2, [r3, #20]
    Debug_Config.USART_Parity              = USART_Parity_Even;
 8009d44:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <HW_ConfigAll+0x60>)
 8009d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d4a:	60da      	str	r2, [r3, #12]
    Debug_Config.USART_StopBits            = USART_StopBits_1;
 8009d4c:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <HW_ConfigAll+0x60>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	609a      	str	r2, [r3, #8]
    Debug_Config.USART_WordLength          = USART_WordLength_9b;
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <HW_ConfigAll+0x60>)
 8009d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d58:	605a      	str	r2, [r3, #4]
    /*
     * Configure the Digital Servo UART init structure:
     *   8 bits length + 1 stop bit, no parity
     *   Baudrate 57600 kbps
     */
     Dsv_Config.USART_Mode                = USART_Mode_Tx;
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <HW_ConfigAll+0x64>)
 8009d5c:	2208      	movs	r2, #8
 8009d5e:	611a      	str	r2, [r3, #16]
     Dsv_Config.USART_BaudRate            = 57600;
 8009d60:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <HW_ConfigAll+0x64>)
 8009d62:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8009d66:	601a      	str	r2, [r3, #0]
     Dsv_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8009d68:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <HW_ConfigAll+0x64>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	615a      	str	r2, [r3, #20]
     Dsv_Config.USART_Parity              = USART_Parity_No;
 8009d6e:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <HW_ConfigAll+0x64>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	60da      	str	r2, [r3, #12]
     Dsv_Config.USART_StopBits            = USART_StopBits_1;
 8009d74:	4b06      	ldr	r3, [pc, #24]	; (8009d90 <HW_ConfigAll+0x64>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	609a      	str	r2, [r3, #8]
     Dsv_Config.USART_WordLength          = USART_WordLength_8b;
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <HW_ConfigAll+0x64>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	605a      	str	r2, [r3, #4]
}
 8009d80:	bf00      	nop
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20014690 	.word	0x20014690
 8009d90:	200146a8 	.word	0x200146a8

08009d94 <HW_InitAll>:
  *         HW_ConfigAll() function.
  * @param  None
  * @retval None
  */
void HW_InitAll(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
    /* System Config */
    HW_CPU_CACHE_Enable();
 8009d98:	f001 f9c4 	bl	800b124 <HW_CPU_CACHE_Enable>
    HW_SystemClock_Config();
 8009d9c:	f001 f96a 	bl	800b074 <HW_SystemClock_Config>

    /* HW Modules Configurations */
    HW_ConfigAll();
 8009da0:	f7ff ffc4 	bl	8009d2c <HW_ConfigAll>

    /* HW Modules Initializations */
    HW_PWR_Init();
 8009da4:	f001 f828 	bl	800adf8 <HW_PWR_Init>
    HW_LED_Init();
 8009da8:	f000 fe08 	bl	800a9bc <HW_LED_Init>
    HW_ENC_Init();
 8009dac:	f000 fc6c 	bl	800a688 <HW_ENC_Init>
    HW_MOT_Init();
 8009db0:	f000 ff16 	bl	800abe0 <HW_MOT_Init>
    HW_ASV_Init();
 8009db4:	f000 f824 	bl	8009e00 <HW_ASV_Init>
    HW_MON_Init();
 8009db8:	f000 fe46 	bl	800aa48 <HW_MON_Init>
    HW_HMI_Init();
 8009dbc:	f000 fd42 	bl	800a844 <HW_HMI_Init>
    HW_Digital_Input_Init();
 8009dc0:	f000 fb2a 	bl	800a418 <HW_Digital_Input_Init>

    HW_DBG_Init(&Debug_Config);
 8009dc4:	4805      	ldr	r0, [pc, #20]	; (8009ddc <HW_InitAll+0x48>)
 8009dc6:	f000 f9dd 	bl	800a184 <HW_DBG_Init>
    HW_DSV_Init(&Dsv_Config);
 8009dca:	4805      	ldr	r0, [pc, #20]	; (8009de0 <HW_InitAll+0x4c>)
 8009dcc:	f000 fbfe 	bl	800a5cc <HW_DSV_Init>

    /* Set Interrupt group priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8009dd0:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009dd4:	f7fb f888 	bl	8004ee8 <NVIC_PriorityGroupConfig>
}
 8009dd8:	bf00      	nop
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20014690 	.word	0x20014690
 8009de0:	200146a8 	.word	0x200146a8

08009de4 <HW_PowerUp>:
  * @brief  Apply the power-up sequence
  * @param  None
  * @retval None
  */
void HW_PowerUp(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0

    //MOT_SLEEP_WRITE(MOT_SLEEP_OFF);
    //MOT_RESET_WRITE(MOT_RESET_ON);

    /* Enable powers */
    HW_PWR_Enable(HW_PWR_VP1);
 8009de8:	2000      	movs	r0, #0
 8009dea:	f001 f845 	bl	800ae78 <HW_PWR_Enable>
    HW_PWR_Enable(HW_PWR_VP2);
 8009dee:	2001      	movs	r0, #1
 8009df0:	f001 f842 	bl	800ae78 <HW_PWR_Enable>
    HW_PWR_Enable(HW_PWR_VP3);
 8009df4:	2002      	movs	r0, #2
 8009df6:	f001 f83f 	bl	800ae78 <HW_PWR_Enable>

    /* Enable H-bridges power */
  //  MOT_RESET_WRITE(MOT_RESET_OFF);

}
 8009dfa:	bf00      	nop
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop

08009e00 <HW_ASV_Init>:


#include "blueboard.h"

void HW_ASV_Init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b090      	sub	sp, #64	; 0x40
 8009e04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    TIM_OCInitTypeDef TIM_OCStruct;

    /* Enable ASV GPIO Clocks */
    ASV1_PWM_GPIO_CLK_ENABLE();
 8009e06:	2101      	movs	r1, #1
 8009e08:	2004      	movs	r0, #4
 8009e0a:	f7fb fcaf 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV2_PWM_GPIO_CLK_ENABLE();
 8009e0e:	2101      	movs	r1, #1
 8009e10:	2004      	movs	r0, #4
 8009e12:	f7fb fcab 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV3_PWM_GPIO_CLK_ENABLE();
 8009e16:	2101      	movs	r1, #1
 8009e18:	2004      	movs	r0, #4
 8009e1a:	f7fb fca7 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV4_PWM_GPIO_CLK_ENABLE();
 8009e1e:	2101      	movs	r1, #1
 8009e20:	2004      	movs	r0, #4
 8009e22:	f7fb fca3 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV5_PWM_GPIO_CLK_ENABLE();
 8009e26:	2101      	movs	r1, #1
 8009e28:	2001      	movs	r0, #1
 8009e2a:	f7fb fc9f 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV6_PWM_GPIO_CLK_ENABLE();
 8009e2e:	2101      	movs	r1, #1
 8009e30:	2001      	movs	r0, #1
 8009e32:	f7fb fc9b 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV7_PWM_GPIO_CLK_ENABLE();
 8009e36:	2101      	movs	r1, #1
 8009e38:	2001      	movs	r0, #1
 8009e3a:	f7fb fc97 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ASV8_PWM_GPIO_CLK_ENABLE();
 8009e3e:	2101      	movs	r1, #1
 8009e40:	2001      	movs	r0, #1
 8009e42:	f7fb fc93 	bl	800576c <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8009e46:	2302      	movs	r3, #2
 8009e48:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    GPIO_InitStruct.GPIO_Pin = ASV1_PWM_PIN;
 8009e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV1_PWM_GPIO_PORT, ASV1_PWM_PIN_SOURCE, ASV1_PWM_AF);
 8009e64:	2203      	movs	r2, #3
 8009e66:	2109      	movs	r1, #9
 8009e68:	4874      	ldr	r0, [pc, #464]	; (800a03c <HW_ASV_Init+0x23c>)
 8009e6a:	f7fb fa15 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ASV1_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e72:	4619      	mov	r1, r3
 8009e74:	4871      	ldr	r0, [pc, #452]	; (800a03c <HW_ASV_Init+0x23c>)
 8009e76:	f7fb f94d 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV2_PWM_PIN;
 8009e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV2_PWM_GPIO_PORT, ASV2_PWM_PIN_SOURCE, ASV2_PWM_AF);
 8009e80:	2203      	movs	r2, #3
 8009e82:	2108      	movs	r1, #8
 8009e84:	486d      	ldr	r0, [pc, #436]	; (800a03c <HW_ASV_Init+0x23c>)
 8009e86:	f7fb fa07 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ASV2_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009e8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e8e:	4619      	mov	r1, r3
 8009e90:	486a      	ldr	r0, [pc, #424]	; (800a03c <HW_ASV_Init+0x23c>)
 8009e92:	f7fb f93f 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8009e96:	2301      	movs	r3, #1
 8009e98:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV3_PWM_PIN;
 8009e9c:	2380      	movs	r3, #128	; 0x80
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV3_PWM_GPIO_PORT, ASV3_PWM_PIN_SOURCE, ASV3_PWM_AF);
    GPIO_Init(ASV3_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009ea0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4865      	ldr	r0, [pc, #404]	; (800a03c <HW_ASV_Init+0x23c>)
 8009ea8:	f7fb f934 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV4_PWM_PIN;
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	63bb      	str	r3, [r7, #56]	; 0x38
 //   GPIO_PinAFConfig(ASV4_PWM_GPIO_PORT, ASV4_PWM_PIN_SOURCE, ASV4_PWM_AF);
    GPIO_Init(ASV4_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009eb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4861      	ldr	r0, [pc, #388]	; (800a03c <HW_ASV_Init+0x23c>)
 8009eb8:	f7fb f92c 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.GPIO_Pin = ASV5_PWM_PIN;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV5_PWM_GPIO_PORT, ASV5_PWM_PIN_SOURCE, ASV5_PWM_AF);
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	2100      	movs	r1, #0
 8009eca:	485d      	ldr	r0, [pc, #372]	; (800a040 <HW_ASV_Init+0x240>)
 8009ecc:	f7fb f9e4 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ASV5_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	485a      	ldr	r0, [pc, #360]	; (800a040 <HW_ASV_Init+0x240>)
 8009ed8:	f7fb f91c 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV6_PWM_PIN;
 8009edc:	2302      	movs	r3, #2
 8009ede:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV6_PWM_GPIO_PORT, ASV6_PWM_PIN_SOURCE, ASV6_PWM_AF);
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	4856      	ldr	r0, [pc, #344]	; (800a040 <HW_ASV_Init+0x240>)
 8009ee6:	f7fb f9d7 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ASV6_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4853      	ldr	r0, [pc, #332]	; (800a040 <HW_ASV_Init+0x240>)
 8009ef2:	f7fb f90f 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV7_PWM_PIN;
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV7_PWM_GPIO_PORT, ASV7_PWM_PIN_SOURCE, ASV7_PWM_AF);
 8009efa:	2202      	movs	r2, #2
 8009efc:	2102      	movs	r1, #2
 8009efe:	4850      	ldr	r0, [pc, #320]	; (800a040 <HW_ASV_Init+0x240>)
 8009f00:	f7fb f9ca 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ASV7_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009f04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f08:	4619      	mov	r1, r3
 8009f0a:	484d      	ldr	r0, [pc, #308]	; (800a040 <HW_ASV_Init+0x240>)
 8009f0c:	f7fb f902 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ASV8_PWM_PIN;
 8009f10:	2308      	movs	r3, #8
 8009f12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_PinAFConfig(ASV8_PWM_GPIO_PORT, ASV8_PWM_PIN_SOURCE, ASV8_PWM_AF);
 8009f14:	2202      	movs	r2, #2
 8009f16:	2103      	movs	r1, #3
 8009f18:	4849      	ldr	r0, [pc, #292]	; (800a040 <HW_ASV_Init+0x240>)
 8009f1a:	f7fb f9bd 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ASV8_PWM_GPIO_PORT, &GPIO_InitStruct);
 8009f1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f22:	4619      	mov	r1, r3
 8009f24:	4846      	ldr	r0, [pc, #280]	; (800a040 <HW_ASV_Init+0x240>)
 8009f26:	f7fb f8f5 	bl	8005114 <GPIO_Init>

    /* Enable Timers Clocks from RCC */
    ASV_1_TO_4_TIM_CLK_ENABLE();
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	2002      	movs	r0, #2
 8009f2e:	f7fb fc5d 	bl	80057ec <RCC_APB2PeriphClockCmd>
    ASV_5_TO_8_TIM_CLK_ENABLE();
 8009f32:	2101      	movs	r1, #1
 8009f34:	2008      	movs	r0, #8
 8009f36:	f7fb fc39 	bl	80057ac <RCC_APB1PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = ASV_TIMER_PRESCALER;
 8009f42:	232f      	movs	r3, #47	; 0x2f
 8009f44:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = ASV_TIMER_PERIOD;
 8009f46:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(ASV_1_TO_4_TIM, &TIM_BaseStruct);
 8009f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f54:	4619      	mov	r1, r3
 8009f56:	483b      	ldr	r0, [pc, #236]	; (800a044 <HW_ASV_Init+0x244>)
 8009f58:	f7fb fd54 	bl	8005a04 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(ASV_5_TO_8_TIM, &TIM_BaseStruct);
 8009f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f60:	4619      	mov	r1, r3
 8009f62:	4839      	ldr	r0, [pc, #228]	; (800a048 <HW_ASV_Init+0x248>)
 8009f64:	f7fb fd4e 	bl	8005a04 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(ASV_1_TO_4_TIM, ENABLE);
 8009f68:	2101      	movs	r1, #1
 8009f6a:	4836      	ldr	r0, [pc, #216]	; (800a044 <HW_ASV_Init+0x244>)
 8009f6c:	f7fc f8a2 	bl	80060b4 <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(ASV_5_TO_8_TIM, ENABLE);
 8009f70:	2101      	movs	r1, #1
 8009f72:	4835      	ldr	r0, [pc, #212]	; (800a048 <HW_ASV_Init+0x248>)
 8009f74:	f7fc f89e 	bl	80060b4 <TIM_CtrlPWMOutputs>

    TIM_Cmd(ASV_1_TO_4_TIM, ENABLE);
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4832      	ldr	r0, [pc, #200]	; (800a044 <HW_ASV_Init+0x244>)
 8009f7c:	f7fb fdd4 	bl	8005b28 <TIM_Cmd>
    TIM_Cmd(ASV_5_TO_8_TIM, ENABLE);
 8009f80:	2101      	movs	r1, #1
 8009f82:	4831      	ldr	r0, [pc, #196]	; (800a048 <HW_ASV_Init+0x248>)
 8009f84:	f7fb fdd0 	bl	8005b28 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 8009f88:	1d3b      	adds	r3, r7, #4
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fb ffc8 	bl	8005f20 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 8009f90:	2360      	movs	r3, #96	; 0x60
 8009f92:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OCPolarity     = TIM_OCPolarity_Low;       /* Invert polarity since we have optocouplers */
 8009f94:	2302      	movs	r3, #2
 8009f96:	617b      	str	r3, [r7, #20]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009fa4:	1d3b      	adds	r3, r7, #4
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4826      	ldr	r0, [pc, #152]	; (800a044 <HW_ASV_Init+0x244>)
 8009faa:	f7fb fdd9 	bl	8005b60 <TIM_OC1Init>
    TIM_OC2Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009fae:	1d3b      	adds	r3, r7, #4
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4824      	ldr	r0, [pc, #144]	; (800a044 <HW_ASV_Init+0x244>)
 8009fb4:	f7fb fe4e 	bl	8005c54 <TIM_OC2Init>
    TIM_OC3Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009fb8:	1d3b      	adds	r3, r7, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4821      	ldr	r0, [pc, #132]	; (800a044 <HW_ASV_Init+0x244>)
 8009fbe:	f7fb fecb 	bl	8005d58 <TIM_OC3Init>
    TIM_OC4Init(ASV_1_TO_4_TIM, &TIM_OCStruct);
 8009fc2:	1d3b      	adds	r3, r7, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	481f      	ldr	r0, [pc, #124]	; (800a044 <HW_ASV_Init+0x244>)
 8009fc8:	f7fb ff46 	bl	8005e58 <TIM_OC4Init>
    TIM_OC1Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009fcc:	1d3b      	adds	r3, r7, #4
 8009fce:	4619      	mov	r1, r3
 8009fd0:	481d      	ldr	r0, [pc, #116]	; (800a048 <HW_ASV_Init+0x248>)
 8009fd2:	f7fb fdc5 	bl	8005b60 <TIM_OC1Init>
    TIM_OC2Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009fd6:	1d3b      	adds	r3, r7, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	481b      	ldr	r0, [pc, #108]	; (800a048 <HW_ASV_Init+0x248>)
 8009fdc:	f7fb fe3a 	bl	8005c54 <TIM_OC2Init>
    TIM_OC3Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009fe0:	1d3b      	adds	r3, r7, #4
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4818      	ldr	r0, [pc, #96]	; (800a048 <HW_ASV_Init+0x248>)
 8009fe6:	f7fb feb7 	bl	8005d58 <TIM_OC3Init>
    TIM_OC4Init(ASV_5_TO_8_TIM, &TIM_OCStruct);
 8009fea:	1d3b      	adds	r3, r7, #4
 8009fec:	4619      	mov	r1, r3
 8009fee:	4816      	ldr	r0, [pc, #88]	; (800a048 <HW_ASV_Init+0x248>)
 8009ff0:	f7fb ff32 	bl	8005e58 <TIM_OC4Init>

    TIM_OC1PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009ff4:	2108      	movs	r1, #8
 8009ff6:	4813      	ldr	r0, [pc, #76]	; (800a044 <HW_ASV_Init+0x244>)
 8009ff8:	f7fb ffec 	bl	8005fd4 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 8009ffc:	2108      	movs	r1, #8
 8009ffe:	4811      	ldr	r0, [pc, #68]	; (800a044 <HW_ASV_Init+0x244>)
 800a000:	f7fc f804 	bl	800600c <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 800a004:	2108      	movs	r1, #8
 800a006:	480f      	ldr	r0, [pc, #60]	; (800a044 <HW_ASV_Init+0x244>)
 800a008:	f7fc f81c 	bl	8006044 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_1_TO_4_TIM, TIM_OCPreload_Enable);
 800a00c:	2108      	movs	r1, #8
 800a00e:	480d      	ldr	r0, [pc, #52]	; (800a044 <HW_ASV_Init+0x244>)
 800a010:	f7fc f834 	bl	800607c <TIM_OC4PreloadConfig>
    TIM_OC1PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800a014:	2108      	movs	r1, #8
 800a016:	480c      	ldr	r0, [pc, #48]	; (800a048 <HW_ASV_Init+0x248>)
 800a018:	f7fb ffdc 	bl	8005fd4 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800a01c:	2108      	movs	r1, #8
 800a01e:	480a      	ldr	r0, [pc, #40]	; (800a048 <HW_ASV_Init+0x248>)
 800a020:	f7fb fff4 	bl	800600c <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800a024:	2108      	movs	r1, #8
 800a026:	4808      	ldr	r0, [pc, #32]	; (800a048 <HW_ASV_Init+0x248>)
 800a028:	f7fc f80c 	bl	8006044 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(ASV_5_TO_8_TIM, TIM_OCPreload_Enable);
 800a02c:	2108      	movs	r1, #8
 800a02e:	4806      	ldr	r0, [pc, #24]	; (800a048 <HW_ASV_Init+0x248>)
 800a030:	f7fc f824 	bl	800607c <TIM_OC4PreloadConfig>

}
 800a034:	bf00      	nop
 800a036:	3740      	adds	r7, #64	; 0x40
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40020800 	.word	0x40020800
 800a040:	40020000 	.word	0x40020000
 800a044:	40010400 	.word	0x40010400
 800a048:	40000c00 	.word	0x40000c00

0800a04c <HW_ASV_SetPwmPulseLength>:

void HW_ASV_SetPwmPulseLength(HW_ASV_ChannelTypeDef ASV_Channel, uint16_t pulseLength)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	4603      	mov	r3, r0
 800a054:	460a      	mov	r2, r1
 800a056:	71fb      	strb	r3, [r7, #7]
 800a058:	4613      	mov	r3, r2
 800a05a:	80bb      	strh	r3, [r7, #4]

    /* Configure the correct OC depending on channel selection */
    switch(ASV_Channel)
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	2b07      	cmp	r3, #7
 800a060:	d842      	bhi.n	800a0e8 <HW_ASV_SetPwmPulseLength+0x9c>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <HW_ASV_SetPwmPulseLength+0x1c>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a089 	.word	0x0800a089
 800a06c:	0800a095 	.word	0x0800a095
 800a070:	0800a0a1 	.word	0x0800a0a1
 800a074:	0800a0ad 	.word	0x0800a0ad
 800a078:	0800a0b9 	.word	0x0800a0b9
 800a07c:	0800a0c5 	.word	0x0800a0c5
 800a080:	0800a0d1 	.word	0x0800a0d1
 800a084:	0800a0dd 	.word	0x0800a0dd
    {
        case HW_ASV_CHANNEL1: ASV1_PWM_SET_PULSE(pulseLength); break;
 800a088:	88bb      	ldrh	r3, [r7, #4]
 800a08a:	4619      	mov	r1, r3
 800a08c:	4819      	ldr	r0, [pc, #100]	; (800a0f4 <HW_ASV_SetPwmPulseLength+0xa8>)
 800a08e:	f7fb ff93 	bl	8005fb8 <TIM_SetCompare4>
 800a092:	e02a      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL2: ASV2_PWM_SET_PULSE(pulseLength); break;
 800a094:	88bb      	ldrh	r3, [r7, #4]
 800a096:	4619      	mov	r1, r3
 800a098:	4816      	ldr	r0, [pc, #88]	; (800a0f4 <HW_ASV_SetPwmPulseLength+0xa8>)
 800a09a:	f7fb ff7f 	bl	8005f9c <TIM_SetCompare3>
 800a09e:	e024      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL3: ASV3_PWM_SET_PULSE(pulseLength); break;
 800a0a0:	88bb      	ldrh	r3, [r7, #4]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4813      	ldr	r0, [pc, #76]	; (800a0f4 <HW_ASV_SetPwmPulseLength+0xa8>)
 800a0a6:	f7fb ff6b 	bl	8005f80 <TIM_SetCompare2>
 800a0aa:	e01e      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL4: ASV4_PWM_SET_PULSE(pulseLength); break;
 800a0ac:	88bb      	ldrh	r3, [r7, #4]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4810      	ldr	r0, [pc, #64]	; (800a0f4 <HW_ASV_SetPwmPulseLength+0xa8>)
 800a0b2:	f7fb ff57 	bl	8005f64 <TIM_SetCompare1>
 800a0b6:	e018      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL5: ASV5_PWM_SET_PULSE(pulseLength); break;
 800a0b8:	88bb      	ldrh	r3, [r7, #4]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	480e      	ldr	r0, [pc, #56]	; (800a0f8 <HW_ASV_SetPwmPulseLength+0xac>)
 800a0be:	f7fb ff51 	bl	8005f64 <TIM_SetCompare1>
 800a0c2:	e012      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL6: ASV6_PWM_SET_PULSE(pulseLength); break;
 800a0c4:	88bb      	ldrh	r3, [r7, #4]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	480b      	ldr	r0, [pc, #44]	; (800a0f8 <HW_ASV_SetPwmPulseLength+0xac>)
 800a0ca:	f7fb ff59 	bl	8005f80 <TIM_SetCompare2>
 800a0ce:	e00c      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL7: ASV7_PWM_SET_PULSE(pulseLength); break;
 800a0d0:	88bb      	ldrh	r3, [r7, #4]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4808      	ldr	r0, [pc, #32]	; (800a0f8 <HW_ASV_SetPwmPulseLength+0xac>)
 800a0d6:	f7fb ff61 	bl	8005f9c <TIM_SetCompare3>
 800a0da:	e006      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>
        case HW_ASV_CHANNEL8: ASV8_PWM_SET_PULSE(pulseLength); break;
 800a0dc:	88bb      	ldrh	r3, [r7, #4]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4805      	ldr	r0, [pc, #20]	; (800a0f8 <HW_ASV_SetPwmPulseLength+0xac>)
 800a0e2:	f7fb ff69 	bl	8005fb8 <TIM_SetCompare4>
 800a0e6:	e000      	b.n	800a0ea <HW_ASV_SetPwmPulseLength+0x9e>

        default:
            /* Incorrect, Do nothing */
            break;
 800a0e8:	bf00      	nop
    }

}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	40010400 	.word	0x40010400
 800a0f8:	40000c00 	.word	0x40000c00

0800a0fc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800a106:	4909      	ldr	r1, [pc, #36]	; (800a12c <NVIC_EnableIRQ+0x30>)
 800a108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a10c:	095b      	lsrs	r3, r3, #5
 800a10e:	79fa      	ldrb	r2, [r7, #7]
 800a110:	f002 021f 	and.w	r2, r2, #31
 800a114:	2001      	movs	r0, #1
 800a116:	fa00 f202 	lsl.w	r2, r0, r2
 800a11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	e000e100 	.word	0xe000e100

0800a130 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800a13c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a140:	2b00      	cmp	r3, #0
 800a142:	da0b      	bge.n	800a15c <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a144:	490d      	ldr	r1, [pc, #52]	; (800a17c <NVIC_SetPriority+0x4c>)
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	f003 030f 	and.w	r3, r3, #15
 800a14c:	3b04      	subs	r3, #4
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	b2d2      	uxtb	r2, r2
 800a152:	0112      	lsls	r2, r2, #4
 800a154:	b2d2      	uxtb	r2, r2
 800a156:	440b      	add	r3, r1
 800a158:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a15a:	e009      	b.n	800a170 <NVIC_SetPriority+0x40>
{
  if((int32_t)IRQn < 0) {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a15c:	4908      	ldr	r1, [pc, #32]	; (800a180 <NVIC_SetPriority+0x50>)
 800a15e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	b2d2      	uxtb	r2, r2
 800a166:	0112      	lsls	r2, r2, #4
 800a168:	b2d2      	uxtb	r2, r2
 800a16a:	440b      	add	r3, r1
 800a16c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	e000ed00 	.word	0xe000ed00
 800a180:	e000e100 	.word	0xe000e100

0800a184 <HW_DBG_Init>:
  * @brief  Initialize the Debug UART
  * @param  None
  * @retval None
  */
void HW_DBG_Init(USART_InitTypeDef * USART_InitStruct)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable GPIOs Clock */
    DBG_TX_GPIO_CLK_ENABLE();
 800a18c:	2101      	movs	r1, #1
 800a18e:	2001      	movs	r0, #1
 800a190:	f7fb faec 	bl	800576c <RCC_AHB1PeriphClockCmd>
    DBG_RX_GPIO_CLK_ENABLE();
 800a194:	2101      	movs	r1, #1
 800a196:	2001      	movs	r0, #1
 800a198:	f7fb fae8 	bl	800576c <RCC_AHB1PeriphClockCmd>
    DBG_CTS_GPIO_CLK_ENABLE();
 800a19c:	2101      	movs	r1, #1
 800a19e:	2001      	movs	r0, #1
 800a1a0:	f7fb fae4 	bl	800576c <RCC_AHB1PeriphClockCmd>
    DBG_RTS_GPIO_CLK_ENABLE();
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	f7fb fae0 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Enable Debug USART clock */
    DBG_CLK_ENABLE();
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	2010      	movs	r0, #16
 800a1b0:	f7fb fb1c 	bl	80057ec <RCC_APB2PeriphClockCmd>

    /* Configure USART TX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_TX_PIN;
 800a1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 800a1be:	2300      	movs	r3, #0
 800a1c0:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DBG_TX_GPIO_PORT, &GPIO_InitStructure);
 800a1c6:	f107 0318 	add.w	r3, r7, #24
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4832      	ldr	r0, [pc, #200]	; (800a298 <HW_DBG_Init+0x114>)
 800a1ce:	f7fa ffa1 	bl	8005114 <GPIO_Init>

    /* Configure USART RX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RX_PIN;
 800a1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d6:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RX_GPIO_PORT, &GPIO_InitStructure);
 800a1d8:	f107 0318 	add.w	r3, r7, #24
 800a1dc:	4619      	mov	r1, r3
 800a1de:	482e      	ldr	r0, [pc, #184]	; (800a298 <HW_DBG_Init+0x114>)
 800a1e0:	f7fa ff98 	bl	8005114 <GPIO_Init>

    /* Configure USART CTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_CTS_PIN;
 800a1e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1e8:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_CTS_GPIO_PORT, &GPIO_InitStructure);
 800a1ea:	f107 0318 	add.w	r3, r7, #24
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4829      	ldr	r0, [pc, #164]	; (800a298 <HW_DBG_Init+0x114>)
 800a1f2:	f7fa ff8f 	bl	8005114 <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = DBG_RTS_PIN;
 800a1f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1fa:	61bb      	str	r3, [r7, #24]
    GPIO_Init(DBG_RTS_GPIO_PORT, &GPIO_InitStructure);
 800a1fc:	f107 0318 	add.w	r3, r7, #24
 800a200:	4619      	mov	r1, r3
 800a202:	4825      	ldr	r0, [pc, #148]	; (800a298 <HW_DBG_Init+0x114>)
 800a204:	f7fa ff86 	bl	8005114 <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(DBG_TX_GPIO_PORT,  DBG_TX_PIN_SOURCE,  DBG_TX_AF);
 800a208:	2207      	movs	r2, #7
 800a20a:	2109      	movs	r1, #9
 800a20c:	4822      	ldr	r0, [pc, #136]	; (800a298 <HW_DBG_Init+0x114>)
 800a20e:	f7fb f843 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RX_GPIO_PORT,  DBG_RX_PIN_SOURCE,  DBG_RX_AF);
 800a212:	2207      	movs	r2, #7
 800a214:	210a      	movs	r1, #10
 800a216:	4820      	ldr	r0, [pc, #128]	; (800a298 <HW_DBG_Init+0x114>)
 800a218:	f7fb f83e 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_CTS_GPIO_PORT, DBG_CTS_PIN_SOURCE, DBG_CTS_AF);
 800a21c:	2207      	movs	r2, #7
 800a21e:	210b      	movs	r1, #11
 800a220:	481d      	ldr	r0, [pc, #116]	; (800a298 <HW_DBG_Init+0x114>)
 800a222:	f7fb f839 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(DBG_RTS_GPIO_PORT, DBG_RTS_PIN_SOURCE, DBG_RTS_AF);
 800a226:	2207      	movs	r2, #7
 800a228:	210c      	movs	r1, #12
 800a22a:	481b      	ldr	r0, [pc, #108]	; (800a298 <HW_DBG_Init+0x114>)
 800a22c:	f7fb f834 	bl	8005298 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DBG_COM, USART_InitStruct);
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	481a      	ldr	r0, [pc, #104]	; (800a29c <HW_DBG_Init+0x118>)
 800a234:	f7fc fa3c 	bl	80066b0 <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 800a238:	f107 0308 	add.w	r3, r7, #8
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fc fb17 	bl	8006870 <USART_ClockStructInit>
    USART_ClockInit(DBG_COM, &USART_ClockInitStruct);
 800a242:	f107 0308 	add.w	r3, r7, #8
 800a246:	4619      	mov	r1, r3
 800a248:	4814      	ldr	r0, [pc, #80]	; (800a29c <HW_DBG_Init+0x118>)
 800a24a:	f7fc faeb 	bl	8006824 <USART_ClockInit>

    /* Create USART Queues */
    DBG_RxQueue = xQueueCreate(DBG_RX_QUEUE_LEN, sizeof(char));
 800a24e:	2200      	movs	r2, #0
 800a250:	2101      	movs	r1, #1
 800a252:	2040      	movs	r0, #64	; 0x40
 800a254:	f7fd f8ea 	bl	800742c <xQueueGenericCreate>
 800a258:	4602      	mov	r2, r0
 800a25a:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <HW_DBG_Init+0x11c>)
 800a25c:	601a      	str	r2, [r3, #0]
    DBG_TxQueue = xQueueCreate(DBG_TX_QUEUE_LEN, sizeof(char));
 800a25e:	2200      	movs	r2, #0
 800a260:	2101      	movs	r1, #1
 800a262:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a266:	f7fd f8e1 	bl	800742c <xQueueGenericCreate>
 800a26a:	4602      	mov	r2, r0
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <HW_DBG_Init+0x120>)
 800a26e:	601a      	str	r2, [r3, #0]

    /* Enable USART Interrupts */
    USART_ITConfig(DBG_COM, USART_IT_RXNE, ENABLE);
 800a270:	2201      	movs	r2, #1
 800a272:	490d      	ldr	r1, [pc, #52]	; (800a2a8 <HW_DBG_Init+0x124>)
 800a274:	4809      	ldr	r0, [pc, #36]	; (800a29c <HW_DBG_Init+0x118>)
 800a276:	f7fc fb4f 	bl	8006918 <USART_ITConfig>
    NVIC_SetPriority(DBG_IRQn, OS_ISR_PRIORITY_SER);
 800a27a:	2105      	movs	r1, #5
 800a27c:	2025      	movs	r0, #37	; 0x25
 800a27e:	f7ff ff57 	bl	800a130 <NVIC_SetPriority>
    NVIC_EnableIRQ(DBG_IRQn);
 800a282:	2025      	movs	r0, #37	; 0x25
 800a284:	f7ff ff3a 	bl	800a0fc <NVIC_EnableIRQ>

    /* Enable USART */
    USART_Cmd(DBG_COM, ENABLE);
 800a288:	2101      	movs	r1, #1
 800a28a:	4804      	ldr	r0, [pc, #16]	; (800a29c <HW_DBG_Init+0x118>)
 800a28c:	f7fc fb06 	bl	800689c <USART_Cmd>

}
 800a290:	bf00      	nop
 800a292:	3720      	adds	r7, #32
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	40020000 	.word	0x40020000
 800a29c:	40011000 	.word	0x40011000
 800a2a0:	200146c0 	.word	0x200146c0
 800a2a4:	200146c4 	.word	0x200146c4
 800a2a8:	00050105 	.word	0x00050105

0800a2ac <HW_DBG_Put>:
  * @retval pdPASS if the character was sent or added to the TX Queue
  *         pdFAIL if the TX Queue is full
  */

BaseType_t HW_DBG_Put(char ch)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	71fb      	strb	r3, [r7, #7]

    /* If the queue is empty and no message is being transmitted,
     * the line is idle so we can initiate directly the transmission.
     */
    if((uxQueueMessagesWaiting(DBG_TxQueue) == 0) &&
 800a2b6:	4b19      	ldr	r3, [pc, #100]	; (800a31c <HW_DBG_Put+0x70>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd fc56 	bl	8007b6c <uxQueueMessagesWaiting>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d113      	bne.n	800a2ee <HW_DBG_Put+0x42>
       (USART_GetFlagStatus(DBG_COM, USART_FLAG_TXE) == SET)) {
 800a2c6:	2180      	movs	r1, #128	; 0x80
 800a2c8:	4815      	ldr	r0, [pc, #84]	; (800a320 <HW_DBG_Put+0x74>)
 800a2ca:	f7fc fb67 	bl	800699c <USART_GetFlagStatus>
 800a2ce:	4603      	mov	r3, r0
{

    /* If the queue is empty and no message is being transmitted,
     * the line is idle so we can initiate directly the transmission.
     */
    if((uxQueueMessagesWaiting(DBG_TxQueue) == 0) &&
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d10c      	bne.n	800a2ee <HW_DBG_Put+0x42>
       (USART_GetFlagStatus(DBG_COM, USART_FLAG_TXE) == SET)) {

        USART_ITConfig(DBG_COM, USART_IT_TC, ENABLE);
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4913      	ldr	r1, [pc, #76]	; (800a324 <HW_DBG_Put+0x78>)
 800a2d8:	4811      	ldr	r0, [pc, #68]	; (800a320 <HW_DBG_Put+0x74>)
 800a2da:	f7fc fb1d 	bl	8006918 <USART_ITConfig>
        USART_SendData(DBG_COM, (uint16_t) ch);
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	480e      	ldr	r0, [pc, #56]	; (800a320 <HW_DBG_Put+0x74>)
 800a2e6:	f7fc faf5 	bl	80068d4 <USART_SendData>

        return pdPASS;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e011      	b.n	800a312 <HW_DBG_Put+0x66>
    /* Otherwise, at least 1 transmission is pending,
     * so we add it the the transmit queue.
     */
    } else {

        if(xQueueSend(DBG_TxQueue, &ch, DBG_TX_TIMEOUT) == pdPASS)
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <HW_DBG_Put+0x70>)
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	1df9      	adds	r1, r7, #7
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	f7fd f926 	bl	8007548 <xQueueGenericSend>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d106      	bne.n	800a310 <HW_DBG_Put+0x64>
        {
            USART_ITConfig(DBG_COM, USART_IT_TC, ENABLE);
 800a302:	2201      	movs	r2, #1
 800a304:	4907      	ldr	r1, [pc, #28]	; (800a324 <HW_DBG_Put+0x78>)
 800a306:	4806      	ldr	r0, [pc, #24]	; (800a320 <HW_DBG_Put+0x74>)
 800a308:	f7fc fb06 	bl	8006918 <USART_ITConfig>
            return pdPASS;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e000      	b.n	800a312 <HW_DBG_Put+0x66>
        } else {
            return pdFAIL;
 800a310:	2300      	movs	r3, #0
        }
    }

}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	200146c4 	.word	0x200146c4
 800a320:	40011000 	.word	0x40011000
 800a324:	00060106 	.word	0x00060106

0800a328 <HW_DBG_Puts>:
  * @brief  Send a string through Serial Interface
  * @param  str: string to send
  * @retval Pass/Fail status
  */
BaseType_t HW_DBG_Puts(const char *str)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
    while (*str)
 800a330:	e00d      	b.n	800a34e <HW_DBG_Puts+0x26>
    {
    	if((HW_DBG_Put(*str)) == pdPASS) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff ffb8 	bl	800a2ac <HW_DBG_Put>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d103      	bne.n	800a34a <HW_DBG_Puts+0x22>
    	    str++;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3301      	adds	r3, #1
 800a346:	607b      	str	r3, [r7, #4]
 800a348:	e001      	b.n	800a34e <HW_DBG_Puts+0x26>
    	} else {
    	    return pdFAIL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e004      	b.n	800a358 <HW_DBG_Puts+0x30>
  * @param  str: string to send
  * @retval Pass/Fail status
  */
BaseType_t HW_DBG_Puts(const char *str)
{
    while (*str)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1ed      	bne.n	800a332 <HW_DBG_Puts+0xa>
    	} else {
    	    return pdFAIL;
    	}
    }

    return pdPASS;
 800a356:	2301      	movs	r3, #1
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <HW_DBG_Get>:
  * @brief  Receive a byte from debug UART
  * @param  Const pointer to read value
  * @retval Pass/Fail status
  */
BaseType_t HW_DBG_Get(const char* str)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    return(xQueueReceive(DBG_RxQueue, str, DBG_RX_TIMEOUT));
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <HW_DBG_Get+0x20>)
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	2300      	movs	r3, #0
 800a36e:	220a      	movs	r2, #10
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	f7fd fa7f 	bl	8007874 <xQueueGenericReceive>
 800a376:	4603      	mov	r3, r0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	200146c0 	.word	0x200146c0

0800a384 <USART1_IRQHandler>:

/*
 * Serial Interface ISR
 */
void DBG_ISR (void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
    char rxChar;
    char txChar;

    // We have not woken a task at the start of the ISR.
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	603b      	str	r3, [r7, #0]

    // Hand RX Interrupt
    if(USART_GetITStatus(DBG_COM, USART_IT_RXNE) != RESET)
 800a38e:	491d      	ldr	r1, [pc, #116]	; (800a404 <USART1_IRQHandler+0x80>)
 800a390:	481d      	ldr	r0, [pc, #116]	; (800a408 <USART1_IRQHandler+0x84>)
 800a392:	f7fc fb1d 	bl	80069d0 <USART_GetITStatus>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00d      	beq.n	800a3b8 <USART1_IRQHandler+0x34>
    {
        // RXNE Flag cleared with the USAR_ReceiveData() call
        rxChar = USART_ReceiveData(DBG_COM);
 800a39c:	481a      	ldr	r0, [pc, #104]	; (800a408 <USART1_IRQHandler+0x84>)
 800a39e:	f7fc faab 	bl	80068f8 <USART_ReceiveData>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	71fb      	strb	r3, [r7, #7]

        // Put the received char into the Rx Queue
        xQueueSendFromISR(DBG_RxQueue, &rxChar, &xHigherPriorityTaskWoken);
 800a3a8:	4b18      	ldr	r3, [pc, #96]	; (800a40c <USART1_IRQHandler+0x88>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	1df9      	adds	r1, r7, #7
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f7fd f9c5 	bl	8007740 <xQueueGenericSendFromISR>
            // Nothing to send! Disable back the ISR
            USART_ITConfig(DBG_COM, USART_IT_TC, DISABLE);
        }

    }
}
 800a3b6:	e020      	b.n	800a3fa <USART1_IRQHandler+0x76>
        xQueueSendFromISR(DBG_RxQueue, &rxChar, &xHigherPriorityTaskWoken);

    }

    // Handle TX Interrupt
    else if(USART_GetITStatus(DBG_COM, USART_IT_TC) != RESET)
 800a3b8:	4915      	ldr	r1, [pc, #84]	; (800a410 <USART1_IRQHandler+0x8c>)
 800a3ba:	4813      	ldr	r0, [pc, #76]	; (800a408 <USART1_IRQHandler+0x84>)
 800a3bc:	f7fc fb08 	bl	80069d0 <USART_GetITStatus>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d019      	beq.n	800a3fa <USART1_IRQHandler+0x76>
    {
        // Clear IT
        USART_ClearITPendingBit(DBG_COM, USART_IT_TC);
 800a3c6:	4912      	ldr	r1, [pc, #72]	; (800a410 <USART1_IRQHandler+0x8c>)
 800a3c8:	480f      	ldr	r0, [pc, #60]	; (800a408 <USART1_IRQHandler+0x84>)
 800a3ca:	f7fc fb51 	bl	8006a70 <USART_ClearITPendingBit>

        /* Check to see if there is more data to send.
         * The TC interrupt will be re-generated at the end of the transmission.
         * Therefore, this will auto-reload until the queue is empty.
         */
        if((xQueueReceiveFromISR(DBG_TxQueue, &txChar, &xHigherPriorityTaskWoken)) == pdPASS)
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <USART1_IRQHandler+0x90>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	1db9      	adds	r1, r7, #6
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fd fb52 	bl	8007a80 <xQueueReceiveFromISR>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d106      	bne.n	800a3f0 <USART1_IRQHandler+0x6c>
        {
            USART_SendData(DBG_COM, (uint16_t) txChar);
 800a3e2:	79bb      	ldrb	r3, [r7, #6]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4807      	ldr	r0, [pc, #28]	; (800a408 <USART1_IRQHandler+0x84>)
 800a3ea:	f7fc fa73 	bl	80068d4 <USART_SendData>
            // Nothing to send! Disable back the ISR
            USART_ITConfig(DBG_COM, USART_IT_TC, DISABLE);
        }

    }
}
 800a3ee:	e004      	b.n	800a3fa <USART1_IRQHandler+0x76>
            USART_SendData(DBG_COM, (uint16_t) txChar);
        }
        else
        {
            // Nothing to send! Disable back the ISR
            USART_ITConfig(DBG_COM, USART_IT_TC, DISABLE);
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4907      	ldr	r1, [pc, #28]	; (800a410 <USART1_IRQHandler+0x8c>)
 800a3f4:	4804      	ldr	r0, [pc, #16]	; (800a408 <USART1_IRQHandler+0x84>)
 800a3f6:	f7fc fa8f 	bl	8006918 <USART_ITConfig>
        }

    }
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	00050105 	.word	0x00050105
 800a408:	40011000 	.word	0x40011000
 800a40c:	200146c0 	.word	0x200146c0
 800a410:	00060106 	.word	0x00060106
 800a414:	200146c4 	.word	0x200146c4

0800a418 <HW_Digital_Input_Init>:
  * @brief  Initialize the digital inputs
  * @param  None
  * @retval None
  */
void HW_Digital_Input_Init(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable Port Clock */
	SW1_GPIO_CLK_ENABLE();
 800a41e:	2101      	movs	r1, #1
 800a420:	2004      	movs	r0, #4
 800a422:	f7fb f9a3 	bl	800576c <RCC_AHB1PeriphClockCmd>
	SW2_GPIO_CLK_ENABLE();
 800a426:	2101      	movs	r1, #1
 800a428:	2004      	movs	r0, #4
 800a42a:	f7fb f99f 	bl	800576c <RCC_AHB1PeriphClockCmd>
	SW3_GPIO_CLK_ENABLE();
 800a42e:	2101      	movs	r1, #1
 800a430:	2010      	movs	r0, #16
 800a432:	f7fb f99b 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Configure switches as input */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 800a436:	2300      	movs	r3, #0
 800a438:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800a43a:	2302      	movs	r3, #2
 800a43c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 800a43e:	2300      	movs	r3, #0
 800a440:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = SW1_PIN;
 800a442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a446:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW1_GPIO_PORT, &GPIO_InitStructure);
 800a448:	463b      	mov	r3, r7
 800a44a:	4619      	mov	r1, r3
 800a44c:	485a      	ldr	r0, [pc, #360]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a44e:	f7fa fe61 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW2_PIN;
 800a452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a456:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW2_GPIO_PORT, &GPIO_InitStructure);
 800a458:	463b      	mov	r3, r7
 800a45a:	4619      	mov	r1, r3
 800a45c:	4856      	ldr	r0, [pc, #344]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a45e:	f7fa fe59 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = SW3_PIN;
 800a462:	2302      	movs	r3, #2
 800a464:	603b      	str	r3, [r7, #0]
    GPIO_Init(SW3_GPIO_PORT, &GPIO_InitStructure);
 800a466:	463b      	mov	r3, r7
 800a468:	4619      	mov	r1, r3
 800a46a:	4854      	ldr	r0, [pc, #336]	; (800a5bc <HW_Digital_Input_Init+0x1a4>)
 800a46c:	f7fa fe52 	bl	8005114 <GPIO_Init>

    /* Configure end stops as input */
    GPIO_InitStructure.GPIO_Pin = END1_PIN;
 800a470:	2301      	movs	r3, #1
 800a472:	603b      	str	r3, [r7, #0]
    GPIO_Init(END1_GPIO_PORT, &GPIO_InitStructure);
 800a474:	463b      	mov	r3, r7
 800a476:	4619      	mov	r1, r3
 800a478:	484f      	ldr	r0, [pc, #316]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a47a:	f7fa fe4b 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END2_PIN;
 800a47e:	2302      	movs	r3, #2
 800a480:	603b      	str	r3, [r7, #0]
    GPIO_Init(END2_GPIO_PORT, &GPIO_InitStructure);
 800a482:	463b      	mov	r3, r7
 800a484:	4619      	mov	r1, r3
 800a486:	484c      	ldr	r0, [pc, #304]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a488:	f7fa fe44 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END3_PIN;
 800a48c:	2304      	movs	r3, #4
 800a48e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END3_GPIO_PORT, &GPIO_InitStructure);
 800a490:	463b      	mov	r3, r7
 800a492:	4619      	mov	r1, r3
 800a494:	484a      	ldr	r0, [pc, #296]	; (800a5c0 <HW_Digital_Input_Init+0x1a8>)
 800a496:	f7fa fe3d 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END4_PIN;
 800a49a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a49e:	603b      	str	r3, [r7, #0]
    GPIO_Init(END4_GPIO_PORT, &GPIO_InitStructure);
 800a4a0:	463b      	mov	r3, r7
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4846      	ldr	r0, [pc, #280]	; (800a5c0 <HW_Digital_Input_Init+0x1a8>)
 800a4a6:	f7fa fe35 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END5_PIN;
 800a4aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ae:	603b      	str	r3, [r7, #0]
    GPIO_Init(END5_GPIO_PORT, &GPIO_InitStructure);
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4843      	ldr	r0, [pc, #268]	; (800a5c4 <HW_Digital_Input_Init+0x1ac>)
 800a4b6:	f7fa fe2d 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Pin = END6_PIN;
 800a4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4c2:	603b      	str	r3, [r7, #0]
    GPIO_Init(END6_GPIO_PORT, &GPIO_InitStructure);
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	483b      	ldr	r0, [pc, #236]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a4ca:	f7fa fe23 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = END7_PIN;
 800a4ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4d2:	603b      	str	r3, [r7, #0]
    GPIO_Init(END7_GPIO_PORT, &GPIO_InitStructure);
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4837      	ldr	r0, [pc, #220]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a4da:	f7fa fe1b 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = END8_PIN;
 800a4e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4ea:	603b      	str	r3, [r7, #0]
    GPIO_Init(END8_GPIO_PORT, &GPIO_InitStructure);
 800a4ec:	463b      	mov	r3, r7
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4831      	ldr	r0, [pc, #196]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a4f2:	f7fa fe0f 	bl	8005114 <GPIO_Init>

    /* Configure end industrial sensors as input */
    GPIO_InitStructure.GPIO_Pin = IND1_PIN;
 800a4f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4fa:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND1_GPIO_PORT, &GPIO_InitStructure);
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	4619      	mov	r1, r3
 800a500:	4831      	ldr	r0, [pc, #196]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a502:	f7fa fe07 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND2_PIN;
 800a506:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a50a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND2_GPIO_PORT, &GPIO_InitStructure);
 800a50c:	463b      	mov	r3, r7
 800a50e:	4619      	mov	r1, r3
 800a510:	482d      	ldr	r0, [pc, #180]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a512:	f7fa fdff 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND3_PIN;
 800a516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a51a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND3_GPIO_PORT, &GPIO_InitStructure);
 800a51c:	463b      	mov	r3, r7
 800a51e:	4619      	mov	r1, r3
 800a520:	4829      	ldr	r0, [pc, #164]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a522:	f7fa fdf7 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND4_PIN;
 800a526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a52a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND4_GPIO_PORT, &GPIO_InitStructure);
 800a52c:	463b      	mov	r3, r7
 800a52e:	4619      	mov	r1, r3
 800a530:	4825      	ldr	r0, [pc, #148]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a532:	f7fa fdef 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND5_PIN;
 800a536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a53a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND5_GPIO_PORT, &GPIO_InitStructure);
 800a53c:	463b      	mov	r3, r7
 800a53e:	4619      	mov	r1, r3
 800a540:	4821      	ldr	r0, [pc, #132]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a542:	f7fa fde7 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND6_PIN;
 800a546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND6_GPIO_PORT, &GPIO_InitStructure);
 800a54c:	463b      	mov	r3, r7
 800a54e:	4619      	mov	r1, r3
 800a550:	481d      	ldr	r0, [pc, #116]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a552:	f7fa fddf 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND7_PIN;
 800a556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a55a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND7_GPIO_PORT, &GPIO_InitStructure);
 800a55c:	463b      	mov	r3, r7
 800a55e:	4619      	mov	r1, r3
 800a560:	4819      	ldr	r0, [pc, #100]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a562:	f7fa fdd7 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND8_PIN;
 800a566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a56a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND8_GPIO_PORT, &GPIO_InitStructure);
 800a56c:	463b      	mov	r3, r7
 800a56e:	4619      	mov	r1, r3
 800a570:	4815      	ldr	r0, [pc, #84]	; (800a5c8 <HW_Digital_Input_Init+0x1b0>)
 800a572:	f7fa fdcf 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND9_PIN;
 800a576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a57a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND9_GPIO_PORT, &GPIO_InitStructure);
 800a57c:	463b      	mov	r3, r7
 800a57e:	4619      	mov	r1, r3
 800a580:	480f      	ldr	r0, [pc, #60]	; (800a5c0 <HW_Digital_Input_Init+0x1a8>)
 800a582:	f7fa fdc7 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = IND10_PIN;
 800a586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a58a:	603b      	str	r3, [r7, #0]
    GPIO_Init(IND10_GPIO_PORT, &GPIO_InitStructure);
 800a58c:	463b      	mov	r3, r7
 800a58e:	4619      	mov	r1, r3
 800a590:	480b      	ldr	r0, [pc, #44]	; (800a5c0 <HW_Digital_Input_Init+0x1a8>)
 800a592:	f7fa fdbf 	bl	8005114 <GPIO_Init>

	GPIO_WriteBit((GPIO_TypeDef*) END6_GPIO_PORT, END6_PIN, Bit_SET);
 800a596:	2201      	movs	r2, #1
 800a598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a59c:	4806      	ldr	r0, [pc, #24]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a59e:	f7fa fe61 	bl	8005264 <GPIO_WriteBit>
	GPIO_WriteBit((GPIO_TypeDef*) END7_GPIO_PORT, END7_PIN, Bit_SET);
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5a8:	4803      	ldr	r0, [pc, #12]	; (800a5b8 <HW_Digital_Input_Init+0x1a0>)
 800a5aa:	f7fa fe5b 	bl	8005264 <GPIO_WriteBit>
}
 800a5ae:	bf00      	nop
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	40020800 	.word	0x40020800
 800a5bc:	40021000 	.word	0x40021000
 800a5c0:	40020400 	.word	0x40020400
 800a5c4:	40020000 	.word	0x40020000
 800a5c8:	40020c00 	.word	0x40020c00

0800a5cc <HW_DSV_Init>:
  * @brief  Initialize the DSV UART
  * @param  None
  * @retval None
  */
void HW_DSV_Init(USART_InitTypeDef * USART_InitStruct)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_ClockInitTypeDef USART_ClockInitStruct;

    /* Enable TXRX Clock */
    DSV_TXRX_GPIO_CLK_ENABLE();
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	2002      	movs	r0, #2
 800a5d8:	f7fb f8c8 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Enable DSV USART clock */
    DSV_CLK_ENABLE();
 800a5dc:	2101      	movs	r1, #1
 800a5de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a5e2:	f7fb f8e3 	bl	80057ac <RCC_APB1PeriphClockCmd>

    /* Configure USART TXRX as alternate function */
    GPIO_InitStructure.GPIO_Pin = DSV_TXRX_PIN;
 800a5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed; /* 2 MHz */
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	777b      	strb	r3, [r7, #29]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	77fb      	strb	r3, [r7, #31]
    GPIO_Init(DSV_TXRX_GPIO_PORT, &GPIO_InitStructure);
 800a5f8:	f107 0318 	add.w	r3, r7, #24
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4812      	ldr	r0, [pc, #72]	; (800a648 <HW_DSV_Init+0x7c>)
 800a600:	f7fa fd88 	bl	8005114 <GPIO_Init>


    /* Connect Alternate functions */
    GPIO_PinAFConfig(DSV_TXRX_GPIO_PORT,  DSV_TXRX_PIN_SOURCE,  DSV_TXRX_AF);
 800a604:	2207      	movs	r2, #7
 800a606:	210a      	movs	r1, #10
 800a608:	480f      	ldr	r0, [pc, #60]	; (800a648 <HW_DSV_Init+0x7c>)
 800a60a:	f7fa fe45 	bl	8005298 <GPIO_PinAFConfig>

    /* USART configuration */
    USART_Init(DSV_COM, USART_InitStruct);
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	480e      	ldr	r0, [pc, #56]	; (800a64c <HW_DSV_Init+0x80>)
 800a612:	f7fc f84d 	bl	80066b0 <USART_Init>

    /* USART Clock default configuration */
    USART_ClockStructInit(&USART_ClockInitStruct);
 800a616:	f107 0308 	add.w	r3, r7, #8
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fc f928 	bl	8006870 <USART_ClockStructInit>
    USART_ClockInit(DSV_COM, &USART_ClockInitStruct);
 800a620:	f107 0308 	add.w	r3, r7, #8
 800a624:	4619      	mov	r1, r3
 800a626:	4809      	ldr	r0, [pc, #36]	; (800a64c <HW_DSV_Init+0x80>)
 800a628:	f7fc f8fc 	bl	8006824 <USART_ClockInit>

    /* Enable USART */
    USART_Cmd(DSV_COM, ENABLE);
 800a62c:	2101      	movs	r1, #1
 800a62e:	4807      	ldr	r0, [pc, #28]	; (800a64c <HW_DSV_Init+0x80>)
 800a630:	f7fc f934 	bl	800689c <USART_Cmd>

	xl_320_init(XL_320_TX_ONLY);
 800a634:	2001      	movs	r0, #1
 800a636:	f000 ffa3 	bl	800b580 <xl_320_init>
	xl_320_set_hw_send(HW_DSV_Put);
 800a63a:	4805      	ldr	r0, [pc, #20]	; (800a650 <HW_DSV_Init+0x84>)
 800a63c:	f000 ffbe 	bl	800b5bc <xl_320_set_hw_send>
}
 800a640:	bf00      	nop
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	40020400 	.word	0x40020400
 800a64c:	40004800 	.word	0x40004800
 800a650:	0800a655 	.word	0x0800a655

0800a654 <HW_DSV_Put>:
  * @brief  Send a byte through DSV UART and wait for end of transmission
  * @param  ch: character to send
  * @retval None
  */
void HW_DSV_Put(uint8_t ch)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
      USART_SendData(DSV_COM, (uint8_t) ch);
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	b29b      	uxth	r3, r3
 800a662:	4619      	mov	r1, r3
 800a664:	4807      	ldr	r0, [pc, #28]	; (800a684 <HW_DSV_Put+0x30>)
 800a666:	f7fc f935 	bl	80068d4 <USART_SendData>
      while(USART_GetFlagStatus(DSV_COM, USART_FLAG_TC) == RESET);
 800a66a:	bf00      	nop
 800a66c:	2140      	movs	r1, #64	; 0x40
 800a66e:	4805      	ldr	r0, [pc, #20]	; (800a684 <HW_DSV_Put+0x30>)
 800a670:	f7fc f994 	bl	800699c <USART_GetFlagStatus>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0f8      	beq.n	800a66c <HW_DSV_Put+0x18>
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40004800 	.word	0x40004800

0800a688 <HW_ENC_Init>:

static int32_t encoder1_Value, encoder2_Value;
static int16_t encoder1_Old, encoder2_Old;

void HW_ENC_Init(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Enable GPIO Clocks */
    ENC1_A_GPIO_CLK_ENABLE();
 800a68e:	2101      	movs	r1, #1
 800a690:	2002      	movs	r0, #2
 800a692:	f7fb f86b 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ENC1_B_GPIO_CLK_ENABLE();
 800a696:	2101      	movs	r1, #1
 800a698:	2002      	movs	r0, #2
 800a69a:	f7fb f867 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ENC2_A_GPIO_CLK_ENABLE();
 800a69e:	2101      	movs	r1, #1
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	f7fb f863 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ENC2_B_GPIO_CLK_ENABLE();
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	2002      	movs	r0, #2
 800a6aa:	f7fb f85f 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Configure GPIOs */
    GPIO_InitStruct.GPIO_Mode       = GPIO_Mode_AF;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType      = GPIO_OType_PP;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd       = GPIO_PuPd_NOPULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed      = GPIO_Fast_Speed;
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	717b      	strb	r3, [r7, #5]

    GPIO_InitStruct.GPIO_Pin = ENC1_A_PIN;
 800a6be:	2310      	movs	r3, #16
 800a6c0:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_A_GPIO_PORT, ENC1_A_PIN_SOURCE, ENC1_A_AF);
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	2104      	movs	r1, #4
 800a6c6:	482c      	ldr	r0, [pc, #176]	; (800a778 <HW_ENC_Init+0xf0>)
 800a6c8:	f7fa fde6 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_A_GPIO_PORT, &GPIO_InitStruct);
 800a6cc:	463b      	mov	r3, r7
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4829      	ldr	r0, [pc, #164]	; (800a778 <HW_ENC_Init+0xf0>)
 800a6d2:	f7fa fd1f 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC1_B_PIN;
 800a6d6:	2320      	movs	r3, #32
 800a6d8:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC1_B_GPIO_PORT, ENC1_B_PIN_SOURCE, ENC1_B_AF);
 800a6da:	2202      	movs	r2, #2
 800a6dc:	2105      	movs	r1, #5
 800a6de:	4826      	ldr	r0, [pc, #152]	; (800a778 <HW_ENC_Init+0xf0>)
 800a6e0:	f7fa fdda 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ENC1_B_GPIO_PORT, &GPIO_InitStruct);
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4823      	ldr	r0, [pc, #140]	; (800a778 <HW_ENC_Init+0xf0>)
 800a6ea:	f7fa fd13 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_A_PIN;
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_A_GPIO_PORT, ENC2_A_PIN_SOURCE, ENC2_A_AF);
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	2106      	movs	r1, #6
 800a6f6:	4820      	ldr	r0, [pc, #128]	; (800a778 <HW_ENC_Init+0xf0>)
 800a6f8:	f7fa fdce 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_A_GPIO_PORT, &GPIO_InitStruct);
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	4619      	mov	r1, r3
 800a700:	481d      	ldr	r0, [pc, #116]	; (800a778 <HW_ENC_Init+0xf0>)
 800a702:	f7fa fd07 	bl	8005114 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = ENC2_B_PIN;
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	603b      	str	r3, [r7, #0]
    GPIO_PinAFConfig(ENC2_B_GPIO_PORT, ENC2_B_PIN_SOURCE, ENC2_B_AF);
 800a70a:	2202      	movs	r2, #2
 800a70c:	2107      	movs	r1, #7
 800a70e:	481a      	ldr	r0, [pc, #104]	; (800a778 <HW_ENC_Init+0xf0>)
 800a710:	f7fa fdc2 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_Init(ENC2_B_GPIO_PORT, &GPIO_InitStruct);
 800a714:	463b      	mov	r3, r7
 800a716:	4619      	mov	r1, r3
 800a718:	4817      	ldr	r0, [pc, #92]	; (800a778 <HW_ENC_Init+0xf0>)
 800a71a:	f7fa fcfb 	bl	8005114 <GPIO_Init>

    /* Enable Quadrature Encoder timer clocks */
    ENC1_TIM_CLK_ENABLE();
 800a71e:	2101      	movs	r1, #1
 800a720:	2002      	movs	r0, #2
 800a722:	f7fb f843 	bl	80057ac <RCC_APB1PeriphClockCmd>
    ENC2_TIM_CLK_ENABLE();
 800a726:	2101      	movs	r1, #1
 800a728:	2004      	movs	r0, #4
 800a72a:	f7fb f83f 	bl	80057ac <RCC_APB1PeriphClockCmd>

    /* Configure Quadrature Encoder Timers */
    TIM_EncoderInterfaceConfig(ENC1_TIM,
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	2103      	movs	r1, #3
 800a734:	4811      	ldr	r0, [pc, #68]	; (800a77c <HW_ENC_Init+0xf4>)
 800a736:	f7fb fd07 	bl	8006148 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC1_TIM, 0xFFFFFFFF);
 800a73a:	f04f 31ff 	mov.w	r1, #4294967295
 800a73e:	480f      	ldr	r0, [pc, #60]	; (800a77c <HW_ENC_Init+0xf4>)
 800a740:	f7fb f9d8 	bl	8005af4 <TIM_SetAutoreload>

    TIM_EncoderInterfaceConfig(ENC2_TIM,
 800a744:	2300      	movs	r3, #0
 800a746:	2200      	movs	r2, #0
 800a748:	2103      	movs	r1, #3
 800a74a:	480d      	ldr	r0, [pc, #52]	; (800a780 <HW_ENC_Init+0xf8>)
 800a74c:	f7fb fcfc 	bl	8006148 <TIM_EncoderInterfaceConfig>
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    TIM_SetAutoreload(ENC2_TIM, 0xFFFFFFFF);
 800a750:	f04f 31ff 	mov.w	r1, #4294967295
 800a754:	480a      	ldr	r0, [pc, #40]	; (800a780 <HW_ENC_Init+0xf8>)
 800a756:	f7fb f9cd 	bl	8005af4 <TIM_SetAutoreload>

    /* Cleanup timers */
    HW_ENC_ResetChannels();
 800a75a:	f000 f861 	bl	800a820 <HW_ENC_ResetChannels>

    /* Enable Quadrature Encoders */
    TIM_Cmd(ENC1_TIM, ENABLE);
 800a75e:	2101      	movs	r1, #1
 800a760:	4806      	ldr	r0, [pc, #24]	; (800a77c <HW_ENC_Init+0xf4>)
 800a762:	f7fb f9e1 	bl	8005b28 <TIM_Cmd>
    TIM_Cmd(ENC2_TIM, ENABLE);
 800a766:	2101      	movs	r1, #1
 800a768:	4805      	ldr	r0, [pc, #20]	; (800a780 <HW_ENC_Init+0xf8>)
 800a76a:	f7fb f9dd 	bl	8005b28 <TIM_Cmd>

}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40020400 	.word	0x40020400
 800a77c:	40000400 	.word	0x40000400
 800a780:	40000800 	.word	0x40000800

0800a784 <HW_ENC_GetChannel>:

int32_t HW_ENC_GetChannel(HW_ENC_ChannelTypeDef channel)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	71fb      	strb	r3, [r7, #7]
	int16_t encoder, delta;
    switch(channel)
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HW_ENC_GetChannel+0x16>
 800a794:	2b01      	cmp	r3, #1
 800a796:	d018      	beq.n	800a7ca <HW_ENC_GetChannel+0x46>
 800a798:	e02f      	b.n	800a7fa <HW_ENC_GetChannel+0x76>
    {
    case HW_ENC_CHANNEL1:
    	encoder = (int16_t)ENC1_TIM->CNT;
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <HW_ENC_GetChannel+0x84>)
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	81fb      	strh	r3, [r7, #14]
    	delta = encoder - encoder1_Old;
 800a7a0:	89fa      	ldrh	r2, [r7, #14]
 800a7a2:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <HW_ENC_GetChannel+0x88>)
 800a7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	81bb      	strh	r3, [r7, #12]
    	encoder1_Old = encoder;
 800a7b0:	4a16      	ldr	r2, [pc, #88]	; (800a80c <HW_ENC_GetChannel+0x88>)
 800a7b2:	89fb      	ldrh	r3, [r7, #14]
 800a7b4:	8013      	strh	r3, [r2, #0]
    	encoder1_Value += (int32_t)delta;
 800a7b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a7ba:	4b15      	ldr	r3, [pc, #84]	; (800a810 <HW_ENC_GetChannel+0x8c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4413      	add	r3, r2
 800a7c0:	4a13      	ldr	r2, [pc, #76]	; (800a810 <HW_ENC_GetChannel+0x8c>)
 800a7c2:	6013      	str	r3, [r2, #0]
        return  encoder1_Value;
 800a7c4:	4b12      	ldr	r3, [pc, #72]	; (800a810 <HW_ENC_GetChannel+0x8c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	e018      	b.n	800a7fc <HW_ENC_GetChannel+0x78>
        break;

    case HW_ENC_CHANNEL2:
    	encoder = (int16_t)ENC2_TIM->CNT;
 800a7ca:	4b12      	ldr	r3, [pc, #72]	; (800a814 <HW_ENC_GetChannel+0x90>)
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	81fb      	strh	r3, [r7, #14]
    	delta = encoder - encoder2_Old;
 800a7d0:	89fa      	ldrh	r2, [r7, #14]
 800a7d2:	4b11      	ldr	r3, [pc, #68]	; (800a818 <HW_ENC_GetChannel+0x94>)
 800a7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	81bb      	strh	r3, [r7, #12]
    	encoder2_Old = encoder;
 800a7e0:	4a0d      	ldr	r2, [pc, #52]	; (800a818 <HW_ENC_GetChannel+0x94>)
 800a7e2:	89fb      	ldrh	r3, [r7, #14]
 800a7e4:	8013      	strh	r3, [r2, #0]
    	encoder2_Value += (int32_t)delta;
 800a7e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a7ea:	4b0c      	ldr	r3, [pc, #48]	; (800a81c <HW_ENC_GetChannel+0x98>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <HW_ENC_GetChannel+0x98>)
 800a7f2:	6013      	str	r3, [r2, #0]
        return  encoder2_Value;
 800a7f4:	4b09      	ldr	r3, [pc, #36]	; (800a81c <HW_ENC_GetChannel+0x98>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	e000      	b.n	800a7fc <HW_ENC_GetChannel+0x78>
        break;

    default:
        /* Error */
        return 0;
 800a7fa:	2300      	movs	r3, #0
        break;
    }

}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	40000400 	.word	0x40000400
 800a80c:	200146d0 	.word	0x200146d0
 800a810:	200146c8 	.word	0x200146c8
 800a814:	40000800 	.word	0x40000800
 800a818:	200146d2 	.word	0x200146d2
 800a81c:	200146cc 	.word	0x200146cc

0800a820 <HW_ENC_ResetChannels>:

void HW_ENC_ResetChannels(void)
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
    ENC1_TIM->CNT = 0x00000000 ;
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <HW_ENC_ResetChannels+0x1c>)
 800a826:	2200      	movs	r2, #0
 800a828:	625a      	str	r2, [r3, #36]	; 0x24
    ENC2_TIM->CNT = 0x00000000 ;
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <HW_ENC_ResetChannels+0x20>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800

0800a844 <HW_HMI_Init>:
 */

#include "blueboard.h"

void HW_HMI_Init(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08c      	sub	sp, #48	; 0x30
 800a848:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef SPI_InitStruct;

    /* Enable GPIOs Clock */
    HMI_CSN_GPIO_CLK_ENABLE();
 800a84a:	2101      	movs	r1, #1
 800a84c:	2010      	movs	r0, #16
 800a84e:	f7fa ff8d 	bl	800576c <RCC_AHB1PeriphClockCmd>
    HMI_SCK_GPIO_CLK_ENABLE();
 800a852:	2101      	movs	r1, #1
 800a854:	2010      	movs	r0, #16
 800a856:	f7fa ff89 	bl	800576c <RCC_AHB1PeriphClockCmd>
    HMI_MOSI_GPIO_CLK_ENABLE();
 800a85a:	2101      	movs	r1, #1
 800a85c:	2010      	movs	r0, #16
 800a85e:	f7fa ff85 	bl	800576c <RCC_AHB1PeriphClockCmd>
    HMI_MISO_GPIO_CLK_ENABLE();
 800a862:	2101      	movs	r1, #1
 800a864:	2010      	movs	r0, #16
 800a866:	f7fa ff81 	bl	800576c <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_IN_GPIO_CLK_ENABLE();
 800a86a:	2101      	movs	r1, #1
 800a86c:	2010      	movs	r0, #16
 800a86e:	f7fa ff7d 	bl	800576c <RCC_AHB1PeriphClockCmd>
    HMI_IRQ_OUT_GPIO_CLK_ENABLE();
 800a872:	2101      	movs	r1, #1
 800a874:	2004      	movs	r0, #4
 800a876:	f7fa ff79 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Enable Control Interface SPI clock */
    HMI_CLK_ENABLE();
 800a87a:	2101      	movs	r1, #1
 800a87c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a880:	f7fa ffb4 	bl	80057ec <RCC_APB2PeriphClockCmd>

    /* Configure HMI_CSN as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 800a884:	2310      	movs	r3, #16
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a888:	2300      	movs	r3, #0
 800a88a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a88e:	2302      	movs	r3, #2
 800a890:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 800a894:	2303      	movs	r3, #3
 800a896:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 800a8a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4842      	ldr	r0, [pc, #264]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8a8:	f7fa fc34 	bl	8005114 <GPIO_Init>

    /* Configure HMI_SCK as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_SCK_PIN;
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800a8b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	483e      	ldr	r0, [pc, #248]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8b8:	f7fa fc2c 	bl	8005114 <GPIO_Init>

    /* Configure HMI_MOSI as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MOSI_PIN;
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800a8c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	483a      	ldr	r0, [pc, #232]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8c8:	f7fa fc24 	bl	8005114 <GPIO_Init>

    /* Configure USART RTS as alternate function */
    GPIO_InitStructure.GPIO_Pin = HMI_MISO_PIN;
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(HMI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800a8d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4836      	ldr	r0, [pc, #216]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8d8:	f7fa fc1c 	bl	8005114 <GPIO_Init>

    /* Connect Alternate functions */
    GPIO_PinAFConfig(HMI_SCK_GPIO_PORT,   HMI_SCK_PIN_SOURCE,   HMI_SCK_AF);
 800a8dc:	2205      	movs	r2, #5
 800a8de:	2102      	movs	r1, #2
 800a8e0:	4833      	ldr	r0, [pc, #204]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8e2:	f7fa fcd9 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MOSI_GPIO_PORT,  HMI_MOSI_PIN_SOURCE,  HMI_MOSI_AF);
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	2106      	movs	r1, #6
 800a8ea:	4831      	ldr	r0, [pc, #196]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8ec:	f7fa fcd4 	bl	8005298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(HMI_MISO_GPIO_PORT,  HMI_MISO_PIN_SOURCE,  HMI_MISO_AF);
 800a8f0:	2205      	movs	r2, #5
 800a8f2:	2105      	movs	r1, #5
 800a8f4:	482e      	ldr	r0, [pc, #184]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a8f6:	f7fa fccf 	bl	8005298 <GPIO_PinAFConfig>

    /* Configure HMI_CSN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_CSN_PIN;
 800a8fa:	2310      	movs	r3, #16
 800a8fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed; /* 10 MHz */
 800a904:	2303      	movs	r3, #3
 800a906:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_Init(HMI_CSN_GPIO_PORT, &GPIO_InitStructure);
 800a910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a914:	4619      	mov	r1, r3
 800a916:	4826      	ldr	r0, [pc, #152]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a918:	f7fa fbfc 	bl	8005114 <GPIO_Init>

    /* Configure HMI_IRQ_IN as Digital Output */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_IN_PIN;
 800a91c:	2308      	movs	r3, #8
 800a91e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a920:	2300      	movs	r3, #0
 800a922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; /* "IN" for HMI, "OUT" for master (us) */
 800a926:	2301      	movs	r3, #1
 800a928:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_IN_GPIO_PORT, &GPIO_InitStructure);
 800a92c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a930:	4619      	mov	r1, r3
 800a932:	481f      	ldr	r0, [pc, #124]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a934:	f7fa fbee 	bl	8005114 <GPIO_Init>

    /* Configure HMI_IRQ_OUT as Digital Input */
    GPIO_InitStructure.GPIO_Pin = HMI_IRQ_OUT_PIN;
 800a938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a93e:	2300      	movs	r3, #0
 800a940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; /* "OUT" for HMI, "IN" for master (us) */
 800a944:	2300      	movs	r3, #0
 800a946:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_Init(HMI_IRQ_OUT_GPIO_PORT, &GPIO_InitStructure);
 800a94a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a94e:	4619      	mov	r1, r3
 800a950:	4818      	ldr	r0, [pc, #96]	; (800a9b4 <HW_HMI_Init+0x170>)
 800a952:	f7fa fbdf 	bl	8005114 <GPIO_Init>

    /* Default SPI Configuration */
    SPI_StructInit(&SPI_InitStruct);
 800a956:	1d3b      	adds	r3, r7, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fa ffa1 	bl	80058a0 <SPI_StructInit>

    /* Configure custom fields */
    SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 800a95e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a962:	60bb      	str	r3, [r7, #8]
    SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800a964:	2300      	movs	r3, #0
 800a966:	607b      	str	r3, [r7, #4]
    SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; /* TBC */
 800a968:	2320      	movs	r3, #32
 800a96a:	61fb      	str	r3, [r7, #28]
    SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
 800a96c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a970:	60fb      	str	r3, [r7, #12]
    SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
    SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
    SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // Internal NSS mgmt and pull internal NSS high;
 800a97a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a97e:	61bb      	str	r3, [r7, #24]
    SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 800a980:	2300      	movs	r3, #0
 800a982:	623b      	str	r3, [r7, #32]

    /* Configure SPI module */
    SPI_Init(HMI_COM, &SPI_InitStruct);
 800a984:	1d3b      	adds	r3, r7, #4
 800a986:	4619      	mov	r1, r3
 800a988:	480b      	ldr	r0, [pc, #44]	; (800a9b8 <HW_HMI_Init+0x174>)
 800a98a:	f7fa ffaf 	bl	80058ec <SPI_Init>
    SPI_SSOutputCmd(HMI_COM, ENABLE);
 800a98e:	2101      	movs	r1, #1
 800a990:	4809      	ldr	r0, [pc, #36]	; (800a9b8 <HW_HMI_Init+0x174>)
 800a992:	f7fb f81b 	bl	80059cc <SPI_SSOutputCmd>

    /* Enable SPI module */
    HMI_CSN_WRITE(HMI_FRAME_IDLE);
 800a996:	2201      	movs	r2, #1
 800a998:	2110      	movs	r1, #16
 800a99a:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <HW_HMI_Init+0x16c>)
 800a99c:	f7fa fc62 	bl	8005264 <GPIO_WriteBit>
    SPI_Cmd(HMI_COM, ENABLE);
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	4805      	ldr	r0, [pc, #20]	; (800a9b8 <HW_HMI_Init+0x174>)
 800a9a4:	f7fa fff6 	bl	8005994 <SPI_Cmd>

}
 800a9a8:	bf00      	nop
 800a9aa:	3730      	adds	r7, #48	; 0x30
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	40020800 	.word	0x40020800
 800a9b8:	40013400 	.word	0x40013400

0800a9bc <HW_LED_Init>:
  * @brief  Configure LEDs GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_LED_Init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    LEDR_GPIO_CLK_ENABLE();
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	2001      	movs	r0, #1
 800a9c6:	f7fa fed1 	bl	800576c <RCC_AHB1PeriphClockCmd>
    LEDG_GPIO_CLK_ENABLE();
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	2008      	movs	r0, #8
 800a9ce:	f7fa fecd 	bl	800576c <RCC_AHB1PeriphClockCmd>
    LEDB_GPIO_CLK_ENABLE();
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	2008      	movs	r0, #8
 800a9d6:	f7fa fec9 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all LEDs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = LEDR_PIN;
 800a9ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ee:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDR_GPIO_PORT, &GPIO_InitStructure);
 800a9f0:	463b      	mov	r3, r7
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4812      	ldr	r0, [pc, #72]	; (800aa40 <HW_LED_Init+0x84>)
 800a9f6:	f7fa fb8d 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDG_PIN;
 800a9fa:	2304      	movs	r3, #4
 800a9fc:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDG_GPIO_PORT, &GPIO_InitStructure);
 800a9fe:	463b      	mov	r3, r7
 800aa00:	4619      	mov	r1, r3
 800aa02:	4810      	ldr	r0, [pc, #64]	; (800aa44 <HW_LED_Init+0x88>)
 800aa04:	f7fa fb86 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LEDB_PIN;
 800aa08:	2380      	movs	r3, #128	; 0x80
 800aa0a:	603b      	str	r3, [r7, #0]
    GPIO_Init(LEDB_GPIO_PORT, &GPIO_InitStructure);
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	4619      	mov	r1, r3
 800aa10:	480c      	ldr	r0, [pc, #48]	; (800aa44 <HW_LED_Init+0x88>)
 800aa12:	f7fa fb7f 	bl	8005114 <GPIO_Init>

    /* Default state: LEDs OFF */
    LEDR_WRITE(LEDx_OFF);
 800aa16:	2201      	movs	r2, #1
 800aa18:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa1c:	4808      	ldr	r0, [pc, #32]	; (800aa40 <HW_LED_Init+0x84>)
 800aa1e:	f7fa fc21 	bl	8005264 <GPIO_WriteBit>
    LEDG_WRITE(LEDx_OFF);
 800aa22:	2201      	movs	r2, #1
 800aa24:	2104      	movs	r1, #4
 800aa26:	4807      	ldr	r0, [pc, #28]	; (800aa44 <HW_LED_Init+0x88>)
 800aa28:	f7fa fc1c 	bl	8005264 <GPIO_WriteBit>
    LEDB_WRITE(LEDx_OFF);
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	2180      	movs	r1, #128	; 0x80
 800aa30:	4804      	ldr	r0, [pc, #16]	; (800aa44 <HW_LED_Init+0x88>)
 800aa32:	f7fa fc17 	bl	8005264 <GPIO_WriteBit>
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	40020000 	.word	0x40020000
 800aa44:	40020c00 	.word	0x40020c00

0800aa48 <HW_MON_Init>:
 */

#include "blueboard.h"

void HW_MON_Init(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08c      	sub	sp, #48	; 0x30
 800aa4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    ADC_InitTypeDef  ADC_InitStructure;

    /* Enable ADC clock so that we can talk to it */
    MON_CLK_ENABLE();
 800aa4e:	2101      	movs	r1, #1
 800aa50:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa54:	f7fa feca 	bl	80057ec <RCC_APB2PeriphClockCmd>

    /* Enable GPIO clocks */
    ADC_CEL1_GPIO_CLK_ENABLE();
 800aa58:	2101      	movs	r1, #1
 800aa5a:	2004      	movs	r0, #4
 800aa5c:	f7fa fe86 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_CEL2_GPIO_CLK_ENABLE();
 800aa60:	2101      	movs	r1, #1
 800aa62:	2004      	movs	r0, #4
 800aa64:	f7fa fe82 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_CEL3_GPIO_CLK_ENABLE();
 800aa68:	2101      	movs	r1, #1
 800aa6a:	2002      	movs	r0, #2
 800aa6c:	f7fa fe7e 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_CEL4_GPIO_CLK_ENABLE();
 800aa70:	2101      	movs	r1, #1
 800aa72:	2002      	movs	r0, #2
 800aa74:	f7fa fe7a 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_IBAT_GPIO_CLK_ENABLE();
 800aa78:	2101      	movs	r1, #1
 800aa7a:	2004      	movs	r0, #4
 800aa7c:	f7fa fe76 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_IP1_GPIO_CLK_ENABLE();
 800aa80:	2101      	movs	r1, #1
 800aa82:	2004      	movs	r0, #4
 800aa84:	f7fa fe72 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_IP2_GPIO_CLK_ENABLE();
 800aa88:	2101      	movs	r1, #1
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	f7fa fe6e 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_IP3_GPIO_CLK_ENABLE();
 800aa90:	2101      	movs	r1, #1
 800aa92:	2001      	movs	r0, #1
 800aa94:	f7fa fe6a 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_IMOT1_GPIO_CLK_ENABLE();
 800aa98:	2101      	movs	r1, #1
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	f7fa fe66 	bl	800576c <RCC_AHB1PeriphClockCmd>
    ADC_IMOT2_GPIO_CLK_ENABLE();
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	f7fa fe62 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all Analog channels */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800aaae:	2300      	movs	r3, #0
 800aab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800aab4:	2300      	movs	r3, #0
 800aab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 800aaba:	2302      	movs	r3, #2
 800aabc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    GPIO_InitStructure.GPIO_Pin = ADC_CEL1_PIN;
 800aac0:	2310      	movs	r3, #16
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL1_GPIO_PORT, &GPIO_InitStructure);
 800aac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aac8:	4619      	mov	r1, r3
 800aaca:	4840      	ldr	r0, [pc, #256]	; (800abcc <HW_MON_Init+0x184>)
 800aacc:	f7fa fb22 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL2_PIN;
 800aad0:	2320      	movs	r3, #32
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL2_GPIO_PORT, &GPIO_InitStructure);
 800aad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aad8:	4619      	mov	r1, r3
 800aada:	483c      	ldr	r0, [pc, #240]	; (800abcc <HW_MON_Init+0x184>)
 800aadc:	f7fa fb1a 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL3_PIN;
 800aae0:	2301      	movs	r3, #1
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL3_GPIO_PORT, &GPIO_InitStructure);
 800aae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aae8:	4619      	mov	r1, r3
 800aaea:	4839      	ldr	r0, [pc, #228]	; (800abd0 <HW_MON_Init+0x188>)
 800aaec:	f7fa fb12 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_CEL4_PIN;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_CEL4_GPIO_PORT, &GPIO_InitStructure);
 800aaf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4835      	ldr	r0, [pc, #212]	; (800abd0 <HW_MON_Init+0x188>)
 800aafc:	f7fa fb0a 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IBAT_PIN;
 800ab00:	2304      	movs	r3, #4
 800ab02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IBAT_GPIO_PORT, &GPIO_InitStructure);
 800ab04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4830      	ldr	r0, [pc, #192]	; (800abcc <HW_MON_Init+0x184>)
 800ab0c:	f7fa fb02 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP1_PIN;
 800ab10:	2308      	movs	r3, #8
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP1_GPIO_PORT, &GPIO_InitStructure);
 800ab14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab18:	4619      	mov	r1, r3
 800ab1a:	482c      	ldr	r0, [pc, #176]	; (800abcc <HW_MON_Init+0x184>)
 800ab1c:	f7fa fafa 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP2_PIN;
 800ab20:	2310      	movs	r3, #16
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP2_GPIO_PORT, &GPIO_InitStructure);
 800ab24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab28:	4619      	mov	r1, r3
 800ab2a:	482a      	ldr	r0, [pc, #168]	; (800abd4 <HW_MON_Init+0x18c>)
 800ab2c:	f7fa faf2 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IP3_PIN;
 800ab30:	2320      	movs	r3, #32
 800ab32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IP3_GPIO_PORT, &GPIO_InitStructure);
 800ab34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4826      	ldr	r0, [pc, #152]	; (800abd4 <HW_MON_Init+0x18c>)
 800ab3c:	f7fa faea 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT1_PIN;
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT1_GPIO_PORT, &GPIO_InitStructure);
 800ab44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4822      	ldr	r0, [pc, #136]	; (800abd4 <HW_MON_Init+0x18c>)
 800ab4c:	f7fa fae2 	bl	8005114 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = ADC_IMOT2_PIN;
 800ab50:	2380      	movs	r3, #128	; 0x80
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_Init(ADC_IMOT2_GPIO_PORT, &GPIO_InitStructure);
 800ab54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab58:	4619      	mov	r1, r3
 800ab5a:	481e      	ldr	r0, [pc, #120]	; (800abd4 <HW_MON_Init+0x18c>)
 800ab5c:	f7fa fada 	bl	8005114 <GPIO_Init>

    /* IMPORTANT: populate default values before use */
    ADC_CommonStructInit(&ADC_CommonInitStruct);
 800ab60:	f107 0318 	add.w	r3, r7, #24
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fa fa71 	bl	800504c <ADC_CommonStructInit>
    ADC_StructInit(&ADC_InitStructure);
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fa fa25 	bl	8004fbc <ADC_StructInit>

    /* PCLK2 is the APB2 clock (96 MHz)
     * ADCCLK = PCLK2/8 = 96/8 = 12 MHz */
    ADC_CommonInitStruct.ADC_Prescaler          = ADC_Prescaler_Div8;
 800ab72:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800ab76:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStruct.ADC_Mode               = ADC_Mode_Independent;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61bb      	str	r3, [r7, #24]
    ADC_CommonInitStruct.ADC_DMAAccessMode      = ADC_DMAAccessMode_Disabled;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStruct.ADC_TwoSamplingDelay   = ADC_TwoSamplingDelay_5Cycles;
 800ab80:	2300      	movs	r3, #0
 800ab82:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInit(&ADC_CommonInitStruct);
 800ab84:	f107 0318 	add.w	r3, r7, #24
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fa fa37 	bl	8004ffc <ADC_CommonInit>

    /* Actual ADC Configuration */
    ADC_InitStructure.ADC_Resolution            = ADC_Resolution_12b;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	603b      	str	r3, [r7, #0]
    ADC_InitStructure.ADC_ScanConvMode          = DISABLE;//DISABLE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	713b      	strb	r3, [r7, #4]
    ADC_InitStructure.ADC_ContinuousConvMode    = DISABLE;
 800ab96:	2300      	movs	r3, #0
 800ab98:	717b      	strb	r3, [r7, #5]
    ADC_InitStructure.ADC_ExternalTrigConv      = ADC_Software_Start;//// //
 800ab9a:	4b0f      	ldr	r3, [pc, #60]	; (800abd8 <HW_MON_Init+0x190>)
 800ab9c:	60fb      	str	r3, [r7, #12]
    ADC_InitStructure.ADC_ExternalTrigConvEdge  = ADC_ExternalTrigConvEdge_None;//// //
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60bb      	str	r3, [r7, #8]
    ADC_InitStructure.ADC_DataAlign             = ADC_DataAlign_Right;
 800aba2:	2300      	movs	r3, #0
 800aba4:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_NbrOfConversion       = 1;//MONn;
 800aba6:	2301      	movs	r3, #1
 800aba8:	753b      	strb	r3, [r7, #20]
    ADC_Init(MON_ADC, &ADC_InitStructure);
 800abaa:	463b      	mov	r3, r7
 800abac:	4619      	mov	r1, r3
 800abae:	480b      	ldr	r0, [pc, #44]	; (800abdc <HW_MON_Init+0x194>)
 800abb0:	f7fa f9ae 	bl	8004f10 <ADC_Init>

    /* Enable Temperature and Internal VREF channels
     * VBAT Conversion cannot be activated at the same time (channel is shared)
     */
    ADC_TempSensorVrefintCmd(ENABLE);
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7fa fa7b 	bl	80050b0 <ADC_TempSensorVrefintCmd>

    /* Switch ADC ON */
    ADC_Cmd(MON_ADC, ENABLE);
 800abba:	2101      	movs	r1, #1
 800abbc:	4807      	ldr	r0, [pc, #28]	; (800abdc <HW_MON_Init+0x194>)
 800abbe:	f7fa fa5b 	bl	8005078 <ADC_Cmd>

}
 800abc2:	bf00      	nop
 800abc4:	3730      	adds	r7, #48	; 0x30
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	40020800 	.word	0x40020800
 800abd0:	40020400 	.word	0x40020400
 800abd4:	40020000 	.word	0x40020000
 800abd8:	0f000001 	.word	0x0f000001
 800abdc:	40012000 	.word	0x40012000

0800abe0 <HW_MOT_Init>:

#include "blueboard.h"


void HW_MOT_Init(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b090      	sub	sp, #64	; 0x40
 800abe4:	af00      	add	r7, sp, #0

  //  MOT_SLEEP_GPIO_CLK_ENABLE();
  //  MOT_RESET_GPIO_CLK_ENABLE();
  //  MOT_I1_GPIO_CLK_ENABLE();
  //  MOT_I0_GPIO_CLK_ENABLE();
    MOT1_IN1_GPIO_CLK_ENABLE();
 800abe6:	2101      	movs	r1, #1
 800abe8:	2010      	movs	r0, #16
 800abea:	f7fa fdbf 	bl	800576c <RCC_AHB1PeriphClockCmd>
    MOT1_IN2_GPIO_CLK_ENABLE();
 800abee:	2101      	movs	r1, #1
 800abf0:	2010      	movs	r0, #16
 800abf2:	f7fa fdbb 	bl	800576c <RCC_AHB1PeriphClockCmd>
    MOT2_IN1_GPIO_CLK_ENABLE();
 800abf6:	2101      	movs	r1, #1
 800abf8:	2010      	movs	r0, #16
 800abfa:	f7fa fdb7 	bl	800576c <RCC_AHB1PeriphClockCmd>
    MOT2_IN2_GPIO_CLK_ENABLE();
 800abfe:	2101      	movs	r1, #1
 800ac00:	2010      	movs	r0, #16
 800ac02:	f7fa fdb3 	bl	800576c <RCC_AHB1PeriphClockCmd>
  //  MOT_FAULT_GPIO_CLK_ENABLE();

    /* Common configuration for all General-Purpose Outputs */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800ac06:	2301      	movs	r3, #1
 800ac08:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    GPIO_InitStructure.GPIO_Speed = GPIO_Fast_Speed;
 800ac18:	2302      	movs	r3, #2
 800ac1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    //    GPIO_Init(MOT_I1_GPIO_PORT, &GPIO_InitStructure);

    //    GPIO_InitStructure.GPIO_Pin = MOT_I0_PIN;
    //    GPIO_Init(MOT_I0_GPIO_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
 800ac1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac22:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
 800ac24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac28:	4619      	mov	r1, r3
 800ac2a:	483e      	ldr	r0, [pc, #248]	; (800ad24 <HW_MOT_Init+0x144>)
 800ac2c:	f7fa fa72 	bl	8005114 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin = MOT2_IN2_PIN;
 800ac30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac34:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_Init(MOT2_IN2_GPIO_PORT, &GPIO_InitStructure);
 800ac36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4839      	ldr	r0, [pc, #228]	; (800ad24 <HW_MOT_Init+0x144>)
 800ac3e:	f7fa fa69 	bl	8005114 <GPIO_Init>

    /* Alternate function (PWM) */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800ac42:	2302      	movs	r3, #2
 800ac44:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    GPIO_InitStructure.GPIO_Pin = MOT1_IN1_PIN;
 800ac48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT1_IN1_GPIO_PORT, &GPIO_InitStructure);
 800ac4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac52:	4619      	mov	r1, r3
 800ac54:	4833      	ldr	r0, [pc, #204]	; (800ad24 <HW_MOT_Init+0x144>)
 800ac56:	f7fa fa5d 	bl	8005114 <GPIO_Init>
    GPIO_PinAFConfig(MOT1_IN1_GPIO_PORT, MOT1_IN1_PIN_SOURCE, MOT1_IN1_AF);
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	210d      	movs	r1, #13
 800ac5e:	4831      	ldr	r0, [pc, #196]	; (800ad24 <HW_MOT_Init+0x144>)
 800ac60:	f7fa fb1a 	bl	8005298 <GPIO_PinAFConfig>

    //    GPIO_InitStructure.GPIO_Pin = MOT1_IN2_PIN;
    //    GPIO_Init(MOT1_IN2_GPIO_PORT, &GPIO_InitStructure);
    //    GPIO_PinAFConfig(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN_SOURCE, MOT1_IN2_AF);

    GPIO_InitStructure.GPIO_Pin = MOT2_IN1_PIN;
 800ac64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_Init(MOT2_IN1_GPIO_PORT, &GPIO_InitStructure);
 800ac6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac6e:	4619      	mov	r1, r3
 800ac70:	482c      	ldr	r0, [pc, #176]	; (800ad24 <HW_MOT_Init+0x144>)
 800ac72:	f7fa fa4f 	bl	8005114 <GPIO_Init>
    GPIO_PinAFConfig(MOT2_IN1_GPIO_PORT, MOT2_IN1_PIN_SOURCE, MOT2_IN1_AF);
 800ac76:	2201      	movs	r2, #1
 800ac78:	210b      	movs	r1, #11
 800ac7a:	482a      	ldr	r0, [pc, #168]	; (800ad24 <HW_MOT_Init+0x144>)
 800ac7c:	f7fa fb0c 	bl	8005298 <GPIO_PinAFConfig>
    //    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    //    GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    //    GPIO_Init(MOT_FAULT_GPIO_PORT, &GPIO_InitStructure);

    /* Enable Timers Clocks from RCC */
    MOT_TIM_CLK_ENABLE();
 800ac80:	2101      	movs	r1, #1
 800ac82:	2001      	movs	r0, #1
 800ac84:	f7fa fdb2 	bl	80057ec <RCC_APB2PeriphClockCmd>

    /* Setup ASV Timers */
    TIM_BaseStruct.TIM_CounterMode          = TIM_CounterMode_Up;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_BaseStruct.TIM_ClockDivision        = TIM_CKD_DIV1;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
    TIM_BaseStruct.TIM_Prescaler            = MOT_TIMER_PRESCALER;
 800ac90:	2300      	movs	r3, #0
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_BaseStruct.TIM_Period               = MOT_TIMER_PERIOD;
 800ac94:	f640 739f 	movw	r3, #3999	; 0xf9f
 800ac98:	62fb      	str	r3, [r7, #44]	; 0x2c
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	637b      	str	r3, [r7, #52]	; 0x34
    TIM_TimeBaseInit(MOT_TIM, &TIM_BaseStruct);
 800ac9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca2:	4619      	mov	r1, r3
 800aca4:	4820      	ldr	r0, [pc, #128]	; (800ad28 <HW_MOT_Init+0x148>)
 800aca6:	f7fa fead 	bl	8005a04 <TIM_TimeBaseInit>

    /* Only valid but required for TIM1/TIM8 */
    TIM_CtrlPWMOutputs(MOT_TIM, ENABLE);
 800acaa:	2101      	movs	r1, #1
 800acac:	481e      	ldr	r0, [pc, #120]	; (800ad28 <HW_MOT_Init+0x148>)
 800acae:	f7fb fa01 	bl	80060b4 <TIM_CtrlPWMOutputs>

    /* Enable Motor Timer */
    TIM_Cmd(MOT_TIM, ENABLE);
 800acb2:	2101      	movs	r1, #1
 800acb4:	481c      	ldr	r0, [pc, #112]	; (800ad28 <HW_MOT_Init+0x148>)
 800acb6:	f7fa ff37 	bl	8005b28 <TIM_Cmd>

    /* Configure Output Compare modules */
    TIM_OCStructInit(&TIM_OCStruct);
 800acba:	1d3b      	adds	r3, r7, #4
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fb f92f 	bl	8005f20 <TIM_OCStructInit>
    TIM_OCStruct.TIM_OCMode         = TIM_OCMode_PWM1;
 800acc2:	2360      	movs	r3, #96	; 0x60
 800acc4:	607b      	str	r3, [r7, #4]
    TIM_OCStruct.TIM_OutputState    = TIM_OutputState_Enable;
 800acc6:	2301      	movs	r3, #1
 800acc8:	60bb      	str	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputNState   = TIM_OutputState_Enable;   /* Only valid for TIM1/TIM8 */
 800acca:	2301      	movs	r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
    TIM_OCStruct.TIM_Pulse          = 0;                        /* Default duty @ 0% */
 800acce:	2300      	movs	r3, #0
 800acd0:	613b      	str	r3, [r7, #16]

    TIM_OC1Init(MOT_TIM, &TIM_OCStruct);
 800acd2:	1d3b      	adds	r3, r7, #4
 800acd4:	4619      	mov	r1, r3
 800acd6:	4814      	ldr	r0, [pc, #80]	; (800ad28 <HW_MOT_Init+0x148>)
 800acd8:	f7fa ff42 	bl	8005b60 <TIM_OC1Init>
    TIM_OC2Init(MOT_TIM, &TIM_OCStruct);
 800acdc:	1d3b      	adds	r3, r7, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	4811      	ldr	r0, [pc, #68]	; (800ad28 <HW_MOT_Init+0x148>)
 800ace2:	f7fa ffb7 	bl	8005c54 <TIM_OC2Init>
    TIM_OC3Init(MOT_TIM, &TIM_OCStruct);
 800ace6:	1d3b      	adds	r3, r7, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	480f      	ldr	r0, [pc, #60]	; (800ad28 <HW_MOT_Init+0x148>)
 800acec:	f7fb f834 	bl	8005d58 <TIM_OC3Init>
    TIM_OC4Init(MOT_TIM, &TIM_OCStruct);
 800acf0:	1d3b      	adds	r3, r7, #4
 800acf2:	4619      	mov	r1, r3
 800acf4:	480c      	ldr	r0, [pc, #48]	; (800ad28 <HW_MOT_Init+0x148>)
 800acf6:	f7fb f8af 	bl	8005e58 <TIM_OC4Init>

    TIM_OC1PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800acfa:	2108      	movs	r1, #8
 800acfc:	480a      	ldr	r0, [pc, #40]	; (800ad28 <HW_MOT_Init+0x148>)
 800acfe:	f7fb f969 	bl	8005fd4 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800ad02:	2108      	movs	r1, #8
 800ad04:	4808      	ldr	r0, [pc, #32]	; (800ad28 <HW_MOT_Init+0x148>)
 800ad06:	f7fb f981 	bl	800600c <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800ad0a:	2108      	movs	r1, #8
 800ad0c:	4806      	ldr	r0, [pc, #24]	; (800ad28 <HW_MOT_Init+0x148>)
 800ad0e:	f7fb f999 	bl	8006044 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(MOT_TIM, TIM_OCPreload_Enable);
 800ad12:	2108      	movs	r1, #8
 800ad14:	4804      	ldr	r0, [pc, #16]	; (800ad28 <HW_MOT_Init+0x148>)
 800ad16:	f7fb f9b1 	bl	800607c <TIM_OC4PreloadConfig>
    //    MOT_SLEEP_WRITE(MOT_SLEEP_ON);
    //    MOT_RESET_WRITE(MOT_RESET_ON);

    /* Setup default bridge current */
    //    HW_MOT_SetBridgeCurrent(HW_MOT_CURRENT_100);
}
 800ad1a:	bf00      	nop
 800ad1c:	3740      	adds	r7, #64	; 0x40
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40021000 	.word	0x40021000
 800ad28:	40010000 	.word	0x40010000

0800ad2c <HW_MOT_SetMotorSpeed>:
  * @param  speed: Signed input value, the sign indicates backward or forward rotation
  * @param  fastDecay: If this param is enabled, fast decay mode is applied.
  * @retval None
  */
void HW_MOT_SetMotorSpeed(HW_MOT_ChannelTypeDef channel, int16_t speed, FunctionalState fastDecay)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	71fb      	strb	r3, [r7, #7]
 800ad36:	460b      	mov	r3, r1
 800ad38:	80bb      	strh	r3, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	71bb      	strb	r3, [r7, #6]
    uint16_t xIN1_PWM;
    uint16_t xIN2_PWM;

    /* Clamp speed value to 100% */
    if(speed > MOT_TIMER_PERIOD) {
 800ad3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ad42:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800ad46:	db03      	blt.n	800ad50 <HW_MOT_SetMotorSpeed+0x24>
        speed = MOT_TIMER_PERIOD;
 800ad48:	f640 739f 	movw	r3, #3999	; 0xf9f
 800ad4c:	80bb      	strh	r3, [r7, #4]
 800ad4e:	e007      	b.n	800ad60 <HW_MOT_SetMotorSpeed+0x34>
    } else if(speed < -MOT_TIMER_PERIOD) {
 800ad50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ad54:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 800ad58:	dc02      	bgt.n	800ad60 <HW_MOT_SetMotorSpeed+0x34>
        speed = -MOT_TIMER_PERIOD;
 800ad5a:	f24f 0361 	movw	r3, #61537	; 0xf061
 800ad5e:	80bb      	strh	r3, [r7, #4]
    }

    /* Forward rotation */
    if(speed > 0) {
 800ad60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dd04      	ble.n	800ad72 <HW_MOT_SetMotorSpeed+0x46>
 //       if(fastDecay == ENABLE) {
            xIN1_PWM = (uint16_t) speed;
 800ad68:	88bb      	ldrh	r3, [r7, #4]
 800ad6a:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = 0x0000;           /* Meaning constant 0 */
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	81bb      	strh	r3, [r7, #12]
 800ad70:	e005      	b.n	800ad7e <HW_MOT_SetMotorSpeed+0x52>
    } else {
//       if(fastDecay == ENABLE) {
//            xIN1_PWM = 0x0000;           /* Meaning constant 0 */
//            xIN2_PWM = (uint16_t) -speed;
//        } else {
            xIN1_PWM = (uint16_t) -speed;
 800ad72:	88bb      	ldrh	r3, [r7, #4]
 800ad74:	425b      	negs	r3, r3
 800ad76:	81fb      	strh	r3, [r7, #14]
            xIN2_PWM = MOT_TIMER_PERIOD; /* Meaning constant 1 */
 800ad78:	f640 739f 	movw	r3, #3999	; 0xf9f
 800ad7c:	81bb      	strh	r3, [r7, #12]
//        }

    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
 800ad7e:	79fb      	ldrb	r3, [r7, #7]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <HW_MOT_SetMotorSpeed+0x5e>
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d00e      	beq.n	800ada6 <HW_MOT_SetMotorSpeed+0x7a>
            GPIO_WriteBit(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN, xIN2_PWM);
            break;

        default:
            /* Incorrect channel: do noting */
            break;
 800ad88:	e01b      	b.n	800adc2 <HW_MOT_SetMotorSpeed+0x96>
    }

    /* Setup new PWM Compare value for the selected channel */
    switch(channel) {
        case HW_MOT_CHANNEL1:
            MOT1_IN1_SET_PULSE(xIN1_PWM);
 800ad8a:	89fb      	ldrh	r3, [r7, #14]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	480f      	ldr	r0, [pc, #60]	; (800adcc <HW_MOT_SetMotorSpeed+0xa0>)
 800ad90:	f7fb f904 	bl	8005f9c <TIM_SetCompare3>
            //MOT1_IN2_SET_PULSE(xIN2_PWM);
            GPIO_WriteBit(MOT1_IN2_GPIO_PORT, MOT1_IN2_PIN, xIN2_PWM);
 800ad94:	89bb      	ldrh	r3, [r7, #12]
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	461a      	mov	r2, r3
 800ad9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ad9e:	480c      	ldr	r0, [pc, #48]	; (800add0 <HW_MOT_SetMotorSpeed+0xa4>)
 800ada0:	f7fa fa60 	bl	8005264 <GPIO_WriteBit>
            break;
 800ada4:	e00d      	b.n	800adc2 <HW_MOT_SetMotorSpeed+0x96>

        case HW_MOT_CHANNEL2:
            MOT2_IN1_SET_PULSE(xIN1_PWM);
 800ada6:	89fb      	ldrh	r3, [r7, #14]
 800ada8:	4619      	mov	r1, r3
 800adaa:	4808      	ldr	r0, [pc, #32]	; (800adcc <HW_MOT_SetMotorSpeed+0xa0>)
 800adac:	f7fb f8e8 	bl	8005f80 <TIM_SetCompare2>
            //MOT2_IN2_SET_PULSE(xIN2_PWM);
            GPIO_WriteBit(MOT2_IN2_GPIO_PORT, MOT2_IN2_PIN, xIN2_PWM);
 800adb0:	89bb      	ldrh	r3, [r7, #12]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	461a      	mov	r2, r3
 800adb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800adba:	4805      	ldr	r0, [pc, #20]	; (800add0 <HW_MOT_SetMotorSpeed+0xa4>)
 800adbc:	f7fa fa52 	bl	8005264 <GPIO_WriteBit>
            break;
 800adc0:	bf00      	nop
        default:
            /* Incorrect channel: do noting */
            break;
    }

}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	40010000 	.word	0x40010000
 800add0:	40021000 	.word	0x40021000

0800add4 <HW_MOT_SetMotorSpeedFastDecay>:

/* Shorthand for fast-decay PWM */
void HW_MOT_SetMotorSpeedFastDecay(HW_MOT_ChannelTypeDef channel, int32_t speed)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	6039      	str	r1, [r7, #0]
 800adde:	71fb      	strb	r3, [r7, #7]
    HW_MOT_SetMotorSpeed(channel, (int16_t) speed, ENABLE);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	b219      	sxth	r1, r3
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	2201      	movs	r2, #1
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff ff9f 	bl	800ad2c <HW_MOT_SetMotorSpeed>
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop

0800adf8 <HW_PWR_Init>:
  * @brief  Configure all VPn power GPIOs (push-pull, no pull-up)
  * @param  None
  * @retval None
  */
void HW_PWR_Init(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    VP1_EN_GPIO_CLK_ENABLE();
 800adfe:	2101      	movs	r1, #1
 800ae00:	2002      	movs	r0, #2
 800ae02:	f7fa fcb3 	bl	800576c <RCC_AHB1PeriphClockCmd>
    VP2_EN_GPIO_CLK_ENABLE();
 800ae06:	2101      	movs	r1, #1
 800ae08:	2002      	movs	r0, #2
 800ae0a:	f7fa fcaf 	bl	800576c <RCC_AHB1PeriphClockCmd>
    VP3_EN_GPIO_CLK_ENABLE();
 800ae0e:	2101      	movs	r1, #1
 800ae10:	2010      	movs	r0, #16
 800ae12:	f7fa fcab 	bl	800576c <RCC_AHB1PeriphClockCmd>

    /* Common configuration for all VPn */
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800ae16:	2301      	movs	r3, #1
 800ae18:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Low_Speed;
 800ae22:	2300      	movs	r3, #0
 800ae24:	717b      	strb	r3, [r7, #5]

    GPIO_InitStructure.GPIO_Pin = VP1_EN_PIN;
 800ae26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae2a:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP1_EN_GPIO_PORT, &GPIO_InitStructure);
 800ae2c:	463b      	mov	r3, r7
 800ae2e:	4619      	mov	r1, r3
 800ae30:	480f      	ldr	r0, [pc, #60]	; (800ae70 <HW_PWR_Init+0x78>)
 800ae32:	f7fa f96f 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP2_EN_PIN;
 800ae36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3a:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP2_EN_GPIO_PORT, &GPIO_InitStructure);
 800ae3c:	463b      	mov	r3, r7
 800ae3e:	4619      	mov	r1, r3
 800ae40:	480b      	ldr	r0, [pc, #44]	; (800ae70 <HW_PWR_Init+0x78>)
 800ae42:	f7fa f967 	bl	8005114 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = VP3_EN_PIN;
 800ae46:	2301      	movs	r3, #1
 800ae48:	603b      	str	r3, [r7, #0]
    GPIO_Init(VP3_EN_GPIO_PORT, &GPIO_InitStructure);
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4809      	ldr	r0, [pc, #36]	; (800ae74 <HW_PWR_Init+0x7c>)
 800ae50:	f7fa f960 	bl	8005114 <GPIO_Init>

    /* Default state: Modules OFF */
    HW_PWR_Disable(HW_PWR_VP1);
 800ae54:	2000      	movs	r0, #0
 800ae56:	f000 f829 	bl	800aeac <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP2);
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	f000 f826 	bl	800aeac <HW_PWR_Disable>
    HW_PWR_Disable(HW_PWR_VP3);
 800ae60:	2002      	movs	r0, #2
 800ae62:	f000 f823 	bl	800aeac <HW_PWR_Disable>

}
 800ae66:	bf00      	nop
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	40020400 	.word	0x40020400
 800ae74:	40021000 	.word	0x40021000

0800ae78 <HW_PWR_Enable>:
  * @brief  Enable a VPx power-supply
  * @param  power VPx channel to enable
  * @retval None
  */
void HW_PWR_Enable(HW_PWR_TypeDef power)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_ON);
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	4a07      	ldr	r2, [pc, #28]	; (800aea4 <HW_PWR_Enable+0x2c>)
 800ae86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae8a:	79fb      	ldrb	r3, [r7, #7]
 800ae8c:	4a06      	ldr	r2, [pc, #24]	; (800aea8 <HW_PWR_Enable+0x30>)
 800ae8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae92:	2200      	movs	r2, #0
 800ae94:	4619      	mov	r1, r3
 800ae96:	f7fa f9e5 	bl	8005264 <GPIO_WriteBit>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20010020 	.word	0x20010020
 800aea8:	080152f4 	.word	0x080152f4

0800aeac <HW_PWR_Disable>:
  * @brief  Disable a VPx power-supply
  * @param  power VPx channel to disable
  * @retval None
  */
void HW_PWR_Disable(HW_PWR_TypeDef power)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteBit((GPIO_TypeDef*) HW_PWR_PORT[power], HW_PWR_PIN[power], PWRx_OFF);
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	4a07      	ldr	r2, [pc, #28]	; (800aed8 <HW_PWR_Disable+0x2c>)
 800aeba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	4a06      	ldr	r2, [pc, #24]	; (800aedc <HW_PWR_Disable+0x30>)
 800aec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec6:	2201      	movs	r2, #1
 800aec8:	4619      	mov	r1, r3
 800aeca:	f7fa f9cb 	bl	8005264 <GPIO_WriteBit>
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20010020 	.word	0x20010020
 800aedc:	080152f4 	.word	0x080152f4

0800aee0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800aeea:	4909      	ldr	r1, [pc, #36]	; (800af10 <NVIC_EnableIRQ+0x30>)
 800aeec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aef0:	095b      	lsrs	r3, r3, #5
 800aef2:	79fa      	ldrb	r2, [r7, #7]
 800aef4:	f002 021f 	and.w	r2, r2, #31
 800aef8:	2001      	movs	r0, #1
 800aefa:	fa00 f202 	lsl.w	r2, r0, r2
 800aefe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	e000e100 	.word	0xe000e100

0800af14 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800af1e:	4909      	ldr	r1, [pc, #36]	; (800af44 <NVIC_ClearPendingIRQ+0x30>)
 800af20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af24:	095b      	lsrs	r3, r3, #5
 800af26:	79fa      	ldrb	r2, [r7, #7]
 800af28:	f002 021f 	and.w	r2, r2, #31
 800af2c:	2001      	movs	r0, #1
 800af2e:	fa00 f202 	lsl.w	r2, r0, r2
 800af32:	3360      	adds	r3, #96	; 0x60
 800af34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	e000e100 	.word	0xe000e100

0800af48 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	6039      	str	r1, [r7, #0]
 800af52:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800af54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	da0b      	bge.n	800af74 <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af5c:	490d      	ldr	r1, [pc, #52]	; (800af94 <NVIC_SetPriority+0x4c>)
 800af5e:	79fb      	ldrb	r3, [r7, #7]
 800af60:	f003 030f 	and.w	r3, r3, #15
 800af64:	3b04      	subs	r3, #4
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	b2d2      	uxtb	r2, r2
 800af6a:	0112      	lsls	r2, r2, #4
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	440b      	add	r3, r1
 800af70:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800af72:	e009      	b.n	800af88 <NVIC_SetPriority+0x40>
{
  if((int32_t)IRQn < 0) {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af74:	4908      	ldr	r1, [pc, #32]	; (800af98 <NVIC_SetPriority+0x50>)
 800af76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	b2d2      	uxtb	r2, r2
 800af7e:	0112      	lsls	r2, r2, #4
 800af80:	b2d2      	uxtb	r2, r2
 800af82:	440b      	add	r3, r1
 800af84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	e000ed00 	.word	0xe000ed00
 800af98:	e000e100 	.word	0xe000e100

0800af9c <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800afa0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800afa4:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     // invalidate I-Cache
 800afa8:	4b09      	ldr	r3, [pc, #36]	; (800afd0 <SCB_EnableICache+0x34>)
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  // enable I-Cache
 800afb0:	4a07      	ldr	r2, [pc, #28]	; (800afd0 <SCB_EnableICache+0x34>)
 800afb2:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <SCB_EnableICache+0x34>)
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afba:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800afbc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800afc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800afc4:	bf00      	nop
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	e000ed00 	.word	0xe000ed00

0800afd4 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b089      	sub	sp, #36	; 0x24
 800afd8:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    SCB->CSSELR = (0UL << 1) | 0UL;         // Level 1 data cache
 800afda:	4b25      	ldr	r3, [pc, #148]	; (800b070 <SCB_EnableDCache+0x9c>)
 800afdc:	2200      	movs	r2, #0
 800afde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ccsidr  = SCB->CCSIDR;
 800afe2:	4b23      	ldr	r3, [pc, #140]	; (800b070 <SCB_EnableDCache+0x9c>)
 800afe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afe8:	617b      	str	r3, [r7, #20]
    sets    = (uint32_t)(CCSIDR_SETS(ccsidr));
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	0b5b      	lsrs	r3, r3, #13
 800afee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800aff2:	61fb      	str	r3, [r7, #28]
    sshift  = (uint32_t)(CCSIDR_LSSHIFT(ccsidr) + 4UL);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	3304      	adds	r3, #4
 800affc:	613b      	str	r3, [r7, #16]
    ways    = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	08db      	lsrs	r3, r3, #3
 800b002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b006:	60fb      	str	r3, [r7, #12]
    wshift  = (uint32_t)((uint32_t)__CLZ(ways) & 0x1FUL);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	fab3 f383 	clz	r3, r3
 800b00e:	f003 031f 	and.w	r3, r3, #31
 800b012:	60bb      	str	r3, [r7, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b014:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                   // invalidate D-Cache
         uint32_t tmpways = ways;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	61bb      	str	r3, [r7, #24]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	409a      	lsls	r2, r3
 800b022:	69f9      	ldr	r1, [r7, #28]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	fa01 f303 	lsl.w	r3, r1, r3
 800b02a:	4313      	orrs	r3, r2
 800b02c:	607b      	str	r3, [r7, #4]
              SCB->DCISW = sw;
 800b02e:	4a10      	ldr	r2, [pc, #64]	; (800b070 <SCB_EnableDCache+0x9c>)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	1e5a      	subs	r2, r3, #1
 800b03a:	61ba      	str	r2, [r7, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1ed      	bne.n	800b01c <SCB_EnableDCache+0x48>
        } while(sets--);
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	1e5a      	subs	r2, r3, #1
 800b044:	61fa      	str	r2, [r7, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1e6      	bne.n	800b018 <SCB_EnableDCache+0x44>
 800b04a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;   // enable D-Cache
 800b04e:	4a08      	ldr	r2, [pc, #32]	; (800b070 <SCB_EnableDCache+0x9c>)
 800b050:	4b07      	ldr	r3, [pc, #28]	; (800b070 <SCB_EnableDCache+0x9c>)
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b058:	6153      	str	r3, [r2, #20]
 800b05a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800b05e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800b062:	bf00      	nop
 800b064:	3724      	adds	r7, #36	; 0x24
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	e000ed00 	.word	0xe000ed00

0800b074 <HW_SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void HW_SystemClock_Config(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af02      	add	r7, sp, #8
  RCC_HSEConfig(RCC_HSE_ON);
 800b07a:	2001      	movs	r0, #1
 800b07c:	f7fa f9c0 	bl	8005400 <RCC_HSEConfig>

  if ( RCC_WaitForHSEStartUp() != SUCCESS )
 800b080:	f7fa f9d2 	bl	8005428 <RCC_WaitForHSEStartUp>
 800b084:	4603      	mov	r3, r0
 800b086:	2b01      	cmp	r3, #1
 800b088:	d000      	beq.n	800b08c <HW_SystemClock_Config+0x18>
  {
    while(1);
 800b08a:	e7fe      	b.n	800b08a <HW_SystemClock_Config+0x16>
  }

  RCC_PLLConfig(RCC_PLLSource_HSE, 8, 384, 2, 8);
 800b08c:	2308      	movs	r3, #8
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	2302      	movs	r3, #2
 800b092:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b096:	2108      	movs	r1, #8
 800b098:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b09c:	f7fa f9ec 	bl	8005478 <RCC_PLLConfig>
  RCC_PLLCmd(ENABLE);
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	f7fa fa2b 	bl	80054fc <RCC_PLLCmd>

  while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 800b0a6:	bf00      	nop
 800b0a8:	2039      	movs	r0, #57	; 0x39
 800b0aa:	f7fa fbbf 	bl	800582c <RCC_GetFlagStatus>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0f9      	beq.n	800b0a8 <HW_SystemClock_Config+0x34>

  /* Activate the OverDrive to reach the 196 MHz Frequency */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b0ba:	f7fa fb77 	bl	80057ac <RCC_APB1PeriphClockCmd>

  PWR_OverDriveCmd( ENABLE );
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f7fa f934 	bl	800532c <PWR_OverDriveCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODRDY ) == RESET );
 800b0c4:	bf00      	nop
 800b0c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b0ca:	f7fa f96b 	bl	80053a4 <PWR_GetFlagStatus>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f8      	beq.n	800b0c6 <HW_SystemClock_Config+0x52>

  while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 800b0d4:	bf00      	nop
 800b0d6:	2031      	movs	r0, #49	; 0x31
 800b0d8:	f7fa fba8 	bl	800582c <RCC_GetFlagStatus>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0f9      	beq.n	800b0d6 <HW_SystemClock_Config+0x62>

  PWR_OverDriveSWCmd(ENABLE);
 800b0e2:	2001      	movs	r0, #1
 800b0e4:	f7fa f940 	bl	8005368 <PWR_OverDriveSWCmd>

  while( PWR_GetFlagStatus( PWR_FLAG_ODSWRDY ) == RESET );
 800b0e8:	bf00      	nop
 800b0ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b0ee:	f7fa f959 	bl	80053a4 <PWR_GetFlagStatus>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0f8      	beq.n	800b0ea <HW_SystemClock_Config+0x76>

  FLASH_SetLatency(FLASH_Latency_7);
 800b0f8:	2007      	movs	r0, #7
 800b0fa:	f7f9 fff7 	bl	80050ec <FLASH_SetLatency>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800b0fe:	2002      	movs	r0, #2
 800b100:	f7fa fa1a 	bl	8005538 <RCC_SYSCLKConfig>

  RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800b104:	2000      	movs	r0, #0
 800b106:	f7fa fa33 	bl	8005570 <RCC_HCLKConfig>
  RCC_PCLK1Config(RCC_HCLK_Div4);
 800b10a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800b10e:	f7fa fa4b 	bl	80055a8 <RCC_PCLK1Config>
  RCC_PCLK2Config(RCC_HCLK_Div4);
 800b112:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800b116:	f7fa fa63 	bl	80055e0 <RCC_PCLK2Config>

  SystemCoreClockUpdate();
 800b11a:	f000 f9a1 	bl	800b460 <SystemCoreClockUpdate>
}
 800b11e:	bf00      	nop
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HW_CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
void HW_CPU_CACHE_Enable(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* Enable branch prediction */
  SCB->CCR |= (1 <<18);
 800b128:	4a06      	ldr	r2, [pc, #24]	; (800b144 <HW_CPU_CACHE_Enable+0x20>)
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <HW_CPU_CACHE_Enable+0x20>)
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b132:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b134:	f3bf 8f4f 	dsb	sy
  __DSB();

  /* Enable I-Cache */
  SCB_EnableICache();
 800b138:	f7ff ff30 	bl	800af9c <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 800b13c:	f7ff ff4a 	bl	800afd4 <SCB_EnableDCache>
}
 800b140:	bf00      	nop
 800b142:	bd80      	pop	{r7, pc}
 800b144:	e000ed00 	.word	0xe000ed00

0800b148 <HW_SYS_TimerRunTime_Config>:

void HW_SYS_TimerRunTime_Config(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;

    /* Enable timer clock */
    SYS_RUNSTATS_TIM_CLK_ENABLE();
 800b14e:	2101      	movs	r1, #1
 800b150:	2010      	movs	r0, #16
 800b152:	f7fa fb2b 	bl	80057ac <RCC_APB1PeriphClockCmd>

    /* Setup timer */
    TIM_BaseStruct.TIM_ClockDivision        = SYS_RUNSTATS_CKDIV;
 800b156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b15a:	613b      	str	r3, [r7, #16]
    TIM_BaseStruct.TIM_Prescaler            = SYS_RUNSTATS_PRESCALER;
 800b15c:	f240 43af 	movw	r3, #1199	; 0x4af
 800b160:	607b      	str	r3, [r7, #4]
    TIM_BaseStruct.TIM_Period               = 0xFFFF;
 800b162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b166:	60fb      	str	r3, [r7, #12]
    TIM_BaseStruct.TIM_RepetitionCounter    = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	617b      	str	r3, [r7, #20]
    TIM_TimeBaseInit(SYS_RUNSTATS_TIM, &TIM_BaseStruct);
 800b16c:	1d3b      	adds	r3, r7, #4
 800b16e:	4619      	mov	r1, r3
 800b170:	480e      	ldr	r0, [pc, #56]	; (800b1ac <HW_SYS_TimerRunTime_Config+0x64>)
 800b172:	f7fa fc47 	bl	8005a04 <TIM_TimeBaseInit>

    /* Configure interrupt */
    TIM_ITConfig(SYS_RUNSTATS_TIM, TIM_IT_Update, ENABLE);
 800b176:	2201      	movs	r2, #1
 800b178:	2101      	movs	r1, #1
 800b17a:	480c      	ldr	r0, [pc, #48]	; (800b1ac <HW_SYS_TimerRunTime_Config+0x64>)
 800b17c:	f7fa ffb6 	bl	80060ec <TIM_ITConfig>
    NVIC_SetPriority(SYS_RUNSTATS_IRQn, OS_ISR_PRIORITY_SYS_RUNSTATS);
 800b180:	210f      	movs	r1, #15
 800b182:	2036      	movs	r0, #54	; 0x36
 800b184:	f7ff fee0 	bl	800af48 <NVIC_SetPriority>
    NVIC_EnableIRQ(SYS_RUNSTATS_IRQn);
 800b188:	2036      	movs	r0, #54	; 0x36
 800b18a:	f7ff fea9 	bl	800aee0 <NVIC_EnableIRQ>

    /* Clear and start timer */
    sysTimerCnt = 0;
 800b18e:	4b08      	ldr	r3, [pc, #32]	; (800b1b0 <HW_SYS_TimerRunTime_Config+0x68>)
 800b190:	2200      	movs	r2, #0
 800b192:	801a      	strh	r2, [r3, #0]
    TIM_SetCounter(SYS_RUNSTATS_TIM, 0);
 800b194:	2100      	movs	r1, #0
 800b196:	4805      	ldr	r0, [pc, #20]	; (800b1ac <HW_SYS_TimerRunTime_Config+0x64>)
 800b198:	f7fa fc9e 	bl	8005ad8 <TIM_SetCounter>
    TIM_Cmd(SYS_RUNSTATS_TIM, ENABLE);
 800b19c:	2101      	movs	r1, #1
 800b19e:	4803      	ldr	r0, [pc, #12]	; (800b1ac <HW_SYS_TimerRunTime_Config+0x64>)
 800b1a0:	f7fa fcc2 	bl	8005b28 <TIM_Cmd>

}
 800b1a4:	bf00      	nop
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	40001000 	.word	0x40001000
 800b1b0:	200146d4 	.word	0x200146d4

0800b1b4 <HW_SYS_GetRunTimeTicks>:

uint32_t HW_SYS_GetRunTimeTicks(void)
{
 800b1b4:	b590      	push	{r4, r7, lr}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
    uint32_t ret;
    ret = (((uint32_t) sysTimerCnt) << 16UL) + TIM_GetCounter(SYS_RUNSTATS_TIM);
 800b1ba:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <HW_SYS_GetRunTimeTicks+0x24>)
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	041c      	lsls	r4, r3, #16
 800b1c0:	4806      	ldr	r0, [pc, #24]	; (800b1dc <HW_SYS_GetRunTimeTicks+0x28>)
 800b1c2:	f7fa fca5 	bl	8005b10 <TIM_GetCounter>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	4423      	add	r3, r4
 800b1ca:	607b      	str	r3, [r7, #4]
    return ret;
 800b1cc:	687b      	ldr	r3, [r7, #4]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd90      	pop	{r4, r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	200146d4 	.word	0x200146d4
 800b1dc:	40001000 	.word	0x40001000

0800b1e0 <TIM6_DAC_IRQHandler>:
 * Run-Time Timer Interrupt Sub-routine
 * Required to implement a 32bits timer.
 * sysTimerCnt is used as the 16 MSB of the timer.
 */
void SYS_RUNSTATS_ISR (void)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
    NVIC_ClearPendingIRQ(SYS_RUNSTATS_IRQn);
 800b1e4:	2036      	movs	r0, #54	; 0x36
 800b1e6:	f7ff fe95 	bl	800af14 <NVIC_ClearPendingIRQ>
    TIM_ClearITPendingBit(SYS_RUNSTATS_TIM, TIM_IT_Update);
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	4805      	ldr	r0, [pc, #20]	; (800b204 <TIM6_DAC_IRQHandler+0x24>)
 800b1ee:	f7fa ff9b 	bl	8006128 <TIM_ClearITPendingBit>
    sysTimerCnt++;
 800b1f2:	4b05      	ldr	r3, [pc, #20]	; (800b208 <TIM6_DAC_IRQHandler+0x28>)
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	4b03      	ldr	r3, [pc, #12]	; (800b208 <TIM6_DAC_IRQHandler+0x28>)
 800b1fc:	801a      	strh	r2, [r3, #0]
}
 800b1fe:	bf00      	nop
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	40001000 	.word	0x40001000
 800b208:	200146d4 	.word	0x200146d4

0800b20c <HW_SYS_GetRunTimeStats>:
/* This example demonstrates how a human readable table of run time stats
information is generated from raw data provided by uxTaskGetSystemState().
The human readable table is written to pcWriteBuffer.  (see the vTaskList()
API function which actually does just this). */
void HW_SYS_GetRunTimeStats(char *pcWriteBuffer)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08c      	sub	sp, #48	; 0x30
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
    const char * const pcHeader =
 800b214:	4b5c      	ldr	r3, [pc, #368]	; (800b388 <HW_SYS_GetRunTimeStats+0x17c>)
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
                    SHELL_SYS_PFX"Task                  Abs. Time    % Time"SHELL_EOL;
    const char * const pcLineSeparator =
 800b218:	4b5c      	ldr	r3, [pc, #368]	; (800b38c <HW_SYS_GetRunTimeStats+0x180>)
 800b21a:	623b      	str	r3, [r7, #32]
    volatile UBaseType_t uxArraySize, x;
    uint32_t ulTotalRunTime;
    uint32_t ulStatsAsPercentage;

   /* Make sure the write buffer does not contain a string. */
   *pcWriteBuffer = 0x00;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]

   /* Take a snapshot of the number of tasks in case it changes while this
   function is executing. */
   uxArraySize = uxTaskGetNumberOfTasks();
 800b222:	f7fd fa3f 	bl	80086a4 <uxTaskGetNumberOfTasks>
 800b226:	4603      	mov	r3, r0
 800b228:	617b      	str	r3, [r7, #20]

   /* Allocate a TaskStatus_t structure for each task.  An array could be
   allocated statically at compile time. */
   pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4613      	mov	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4618      	mov	r0, r3
 800b236:	f7fb fed3 	bl	8006fe0 <pvPortMalloc>
 800b23a:	61f8      	str	r0, [r7, #28]

   if( pxTaskStatusArray != NULL )
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 809d 	beq.w	800b37e <HW_SYS_GetRunTimeStats+0x172>
   {
      /* Generate raw status information about each task. */
      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray,
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	f107 020c 	add.w	r2, r7, #12
 800b24a:	4619      	mov	r1, r3
 800b24c:	69f8      	ldr	r0, [r7, #28]
 800b24e:	f7fd fa35 	bl	80086bc <uxTaskGetSystemState>
 800b252:	4603      	mov	r3, r0
 800b254:	617b      	str	r3, [r7, #20]
                                 uxArraySize,
                                 &ulTotalRunTime );

      /* For percentage calculations. */
      ulTotalRunTime /= 100UL;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4a4d      	ldr	r2, [pc, #308]	; (800b390 <HW_SYS_GetRunTimeStats+0x184>)
 800b25a:	fba2 2303 	umull	r2, r3, r2, r3
 800b25e:	095b      	lsrs	r3, r3, #5
 800b260:	60fb      	str	r3, [r7, #12]

      /* Avoid divide by zero errors. */
      if( ulTotalRunTime > 0 )
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8087 	beq.w	800b378 <HW_SYS_GetRunTimeStats+0x16c>
      {
          /* Header */
          sprintf( pcWriteBuffer, pcHeader );
 800b26a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fecf 	bl	800c010 <sprintf>
          pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7f4 ffcc 	bl	8000210 <strlen>
 800b278:	4602      	mov	r2, r0
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4413      	add	r3, r2
 800b27e:	607b      	str	r3, [r7, #4]
          sprintf( pcWriteBuffer, pcLineSeparator );
 800b280:	6a39      	ldr	r1, [r7, #32]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fec4 	bl	800c010 <sprintf>
          pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7f4 ffc1 	bl	8000210 <strlen>
 800b28e:	4602      	mov	r2, r0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4413      	add	r3, r2
 800b294:	607b      	str	r3, [r7, #4]

          /* For each populated position in the pxTaskStatusArray array,
          format the raw data as human readable ASCII data. */
         for( x = 0; x < uxArraySize; x++ )
 800b296:	2300      	movs	r3, #0
 800b298:	613b      	str	r3, [r7, #16]
 800b29a:	e04b      	b.n	800b334 <HW_SYS_GetRunTimeStats+0x128>
         {
            /* What percentage of the total run time has the task used?
            This will always be rounded down to the nearest integer.
            ulTotalRunTimeDiv100 has already been divided by 100. */
            ulStatsAsPercentage =
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
         for( x = 0; x < uxArraySize; x++ )
         {
            /* What percentage of the total run time has the task used?
            This will always be rounded down to the nearest integer.
            ulTotalRunTimeDiv100 has already been divided by 100. */
            ulStatsAsPercentage =
 800b2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b4:	61bb      	str	r3, [r7, #24]
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

            if( ulStatsAsPercentage > 0UL )
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01a      	beq.n	800b2f2 <HW_SYS_GetRunTimeStats+0xe6>
            {
               sprintf( pcWriteBuffer, SHELL_SYS_PFX"%-20s %10lu   %3lu%%"SHELL_EOL,
                                 pxTaskStatusArray[ x ].pcTaskName,
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	4413      	add	r3, r2
            ulStatsAsPercentage =
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

            if( ulStatsAsPercentage > 0UL )
            {
               sprintf( pcWriteBuffer, SHELL_SYS_PFX"%-20s %10lu   %3lu%%"SHELL_EOL,
 800b2cc:	6859      	ldr	r1, [r3, #4]
                                 pxTaskStatusArray[ x ].pcTaskName,
                                 pxTaskStatusArray[ x ].ulRunTimeCounter,
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	00db      	lsls	r3, r3, #3
 800b2d4:	4413      	add	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	461a      	mov	r2, r3
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
            ulStatsAsPercentage =
                  pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

            if( ulStatsAsPercentage > 0UL )
            {
               sprintf( pcWriteBuffer, SHELL_SYS_PFX"%-20s %10lu   %3lu%%"SHELL_EOL,
 800b2de:	699a      	ldr	r2, [r3, #24]
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	460a      	mov	r2, r1
 800b2e8:	492a      	ldr	r1, [pc, #168]	; (800b394 <HW_SYS_GetRunTimeStats+0x188>)
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fe90 	bl	800c010 <sprintf>
 800b2f0:	e016      	b.n	800b320 <HW_SYS_GetRunTimeStats+0x114>
            else
            {
               /* If the percentage is zero here then the task has
               consumed less than 1% of the total run time. */
               sprintf( pcWriteBuffer, SHELL_SYS_PFX"%-20s %10lu    <1%%"SHELL_EOL,
                                 pxTaskStatusArray[ x ].pcTaskName,
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	4413      	add	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
            }
            else
            {
               /* If the percentage is zero here then the task has
               consumed less than 1% of the total run time. */
               sprintf( pcWriteBuffer, SHELL_SYS_PFX"%-20s %10lu    <1%%"SHELL_EOL,
 800b302:	6859      	ldr	r1, [r3, #4]
                                 pxTaskStatusArray[ x ].pcTaskName,
                                 pxTaskStatusArray[ x ].ulRunTimeCounter );
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	4613      	mov	r3, r2
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	461a      	mov	r2, r3
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	4413      	add	r3, r2
            }
            else
            {
               /* If the percentage is zero here then the task has
               consumed less than 1% of the total run time. */
               sprintf( pcWriteBuffer, SHELL_SYS_PFX"%-20s %10lu    <1%%"SHELL_EOL,
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	460a      	mov	r2, r1
 800b318:	491f      	ldr	r1, [pc, #124]	; (800b398 <HW_SYS_GetRunTimeStats+0x18c>)
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fe78 	bl	800c010 <sprintf>
                                 pxTaskStatusArray[ x ].pcTaskName,
                                 pxTaskStatusArray[ x ].ulRunTimeCounter );
            }

            pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7f4 ff75 	bl	8000210 <strlen>
 800b326:	4602      	mov	r2, r0
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4413      	add	r3, r2
 800b32c:	607b      	str	r3, [r7, #4]
          sprintf( pcWriteBuffer, pcLineSeparator );
          pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );

          /* For each populated position in the pxTaskStatusArray array,
          format the raw data as human readable ASCII data. */
         for( x = 0; x < uxArraySize; x++ )
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	3301      	adds	r3, #1
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d3af      	bcc.n	800b29c <HW_SYS_GetRunTimeStats+0x90>

            pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
         }

         /* Footer */
         sprintf( pcWriteBuffer, pcLineSeparator );
 800b33c:	6a39      	ldr	r1, [r7, #32]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fe66 	bl	800c010 <sprintf>
         pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7f4 ff63 	bl	8000210 <strlen>
 800b34a:	4602      	mov	r2, r0
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4413      	add	r3, r2
 800b350:	607b      	str	r3, [r7, #4]
         sprintf( pcWriteBuffer,SHELL_SYS_PFX"%-20s %10lu   %3lu%%"SHELL_EOL, "TOTAL", 100*ulTotalRunTime, 100UL);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2264      	movs	r2, #100	; 0x64
 800b356:	fb02 f203 	mul.w	r2, r2, r3
 800b35a:	2364      	movs	r3, #100	; 0x64
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4613      	mov	r3, r2
 800b360:	4a0e      	ldr	r2, [pc, #56]	; (800b39c <HW_SYS_GetRunTimeStats+0x190>)
 800b362:	490c      	ldr	r1, [pc, #48]	; (800b394 <HW_SYS_GetRunTimeStats+0x188>)
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fe53 	bl	800c010 <sprintf>
         pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7f4 ff50 	bl	8000210 <strlen>
 800b370:	4602      	mov	r2, r0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	607b      	str	r3, [r7, #4]
      }

      /* The array is no longer needed, free the memory it consumes. */
      vPortFree( pxTaskStatusArray );
 800b378:	69f8      	ldr	r0, [r7, #28]
 800b37a:	f7fb fee7 	bl	800714c <vPortFree>
   }
}
 800b37e:	bf00      	nop
 800b380:	3728      	adds	r7, #40	; 0x28
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	08014c74 	.word	0x08014c74
 800b38c:	08014ca8 	.word	0x08014ca8
 800b390:	51eb851f 	.word	0x51eb851f
 800b394:	08014cdc 	.word	0x08014cdc
 800b398:	08014cfc 	.word	0x08014cfc
 800b39c:	08014d18 	.word	0x08014d18

0800b3a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b3a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b3a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b3a6:	e003      	b.n	800b3b0 <LoopCopyDataInit>

0800b3a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3ae:	3104      	adds	r1, #4

0800b3b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3b0:	480b      	ldr	r0, [pc, #44]	; (800b3e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b3b2:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b3b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b3b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b3b8:	d3f6      	bcc.n	800b3a8 <CopyDataInit>
  ldr  r2, =_sbss
 800b3ba:	4a0b      	ldr	r2, [pc, #44]	; (800b3e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b3bc:	e002      	b.n	800b3c4 <LoopFillZerobss>

0800b3be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b3be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b3c0:	f842 3b04 	str.w	r3, [r2], #4

0800b3c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b3c4:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b3c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b3c8:	d3f9      	bcc.n	800b3be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b3ca:	f000 f813 	bl	800b3f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b3ce:	f000 fb05 	bl	800b9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3d2:	f000 f8c1 	bl	800b558 <main>
  bx  lr    
 800b3d6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b3d8:	2004ff00 	.word	0x2004ff00
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800b3dc:	08015888 	.word	0x08015888
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3e0:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 800b3e4:	2001059c 	.word	0x2001059c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800b3e8:	200105a0 	.word	0x200105a0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b3ec:	200149dc 	.word	0x200149dc

0800b3f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3f0:	e7fe      	b.n	800b3f0 <ADC_IRQHandler>
	...

0800b3f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3f8:	4a15      	ldr	r2, [pc, #84]	; (800b450 <SystemInit+0x5c>)
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <SystemInit+0x5c>)
 800b3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b408:	4a12      	ldr	r2, [pc, #72]	; (800b454 <SystemInit+0x60>)
 800b40a:	4b12      	ldr	r3, [pc, #72]	; (800b454 <SystemInit+0x60>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b414:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <SystemInit+0x60>)
 800b416:	2200      	movs	r2, #0
 800b418:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b41a:	490e      	ldr	r1, [pc, #56]	; (800b454 <SystemInit+0x60>)
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <SystemInit+0x60>)
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <SystemInit+0x64>)
 800b422:	4013      	ands	r3, r2
 800b424:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b426:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <SystemInit+0x60>)
 800b428:	4a0c      	ldr	r2, [pc, #48]	; (800b45c <SystemInit+0x68>)
 800b42a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b42c:	4a09      	ldr	r2, [pc, #36]	; (800b454 <SystemInit+0x60>)
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <SystemInit+0x60>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b436:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b438:	4b06      	ldr	r3, [pc, #24]	; (800b454 <SystemInit+0x60>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b43e:	4b04      	ldr	r3, [pc, #16]	; (800b450 <SystemInit+0x5c>)
 800b440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b444:	609a      	str	r2, [r3, #8]
#endif
}
 800b446:	bf00      	nop
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	e000ed00 	.word	0xe000ed00
 800b454:	40023800 	.word	0x40023800
 800b458:	fef6ffff 	.word	0xfef6ffff
 800b45c:	24003010 	.word	0x24003010

0800b460 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800b466:	2300      	movs	r3, #0
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	2302      	movs	r3, #2
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	2300      	movs	r3, #0
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	2302      	movs	r3, #2
 800b478:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b47a:	4b32      	ldr	r3, [pc, #200]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f003 030c 	and.w	r3, r3, #12
 800b482:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b04      	cmp	r3, #4
 800b488:	d007      	beq.n	800b49a <SystemCoreClockUpdate+0x3a>
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d009      	beq.n	800b4a2 <SystemCoreClockUpdate+0x42>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d13f      	bne.n	800b512 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800b492:	4b2d      	ldr	r3, [pc, #180]	; (800b548 <SystemCoreClockUpdate+0xe8>)
 800b494:	4a2d      	ldr	r2, [pc, #180]	; (800b54c <SystemCoreClockUpdate+0xec>)
 800b496:	601a      	str	r2, [r3, #0]
      break;
 800b498:	e03f      	b.n	800b51a <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800b49a:	4b2b      	ldr	r3, [pc, #172]	; (800b548 <SystemCoreClockUpdate+0xe8>)
 800b49c:	4a2c      	ldr	r2, [pc, #176]	; (800b550 <SystemCoreClockUpdate+0xf0>)
 800b49e:	601a      	str	r2, [r3, #0]
      break;
 800b4a0:	e03b      	b.n	800b51a <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800b4a2:	4b28      	ldr	r3, [pc, #160]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4aa:	0d9b      	lsrs	r3, r3, #22
 800b4ac:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b4ae:	4b25      	ldr	r3, [pc, #148]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4b6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00d      	beq.n	800b4da <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800b4be:	4a24      	ldr	r2, [pc, #144]	; (800b550 <SystemCoreClockUpdate+0xf0>)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4c6:	4b1f      	ldr	r3, [pc, #124]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b4c8:	6859      	ldr	r1, [r3, #4]
 800b4ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b4ce:	400b      	ands	r3, r1
 800b4d0:	099b      	lsrs	r3, r3, #6
 800b4d2:	fb03 f302 	mul.w	r3, r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]
 800b4d8:	e00c      	b.n	800b4f4 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800b4da:	4a1c      	ldr	r2, [pc, #112]	; (800b54c <SystemCoreClockUpdate+0xec>)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4e2:	4b18      	ldr	r3, [pc, #96]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b4e4:	6859      	ldr	r1, [r3, #4]
 800b4e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b4ea:	400b      	ands	r3, r1
 800b4ec:	099b      	lsrs	r3, r3, #6
 800b4ee:	fb03 f302 	mul.w	r3, r3, r2
 800b4f2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b4fc:	0c1b      	lsrs	r3, r3, #16
 800b4fe:	3301      	adds	r3, #1
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50c:	4a0e      	ldr	r2, [pc, #56]	; (800b548 <SystemCoreClockUpdate+0xe8>)
 800b50e:	6013      	str	r3, [r2, #0]
      break;
 800b510:	e003      	b.n	800b51a <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800b512:	4b0d      	ldr	r3, [pc, #52]	; (800b548 <SystemCoreClockUpdate+0xe8>)
 800b514:	4a0d      	ldr	r2, [pc, #52]	; (800b54c <SystemCoreClockUpdate+0xec>)
 800b516:	601a      	str	r2, [r3, #0]
      break;
 800b518:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <SystemCoreClockUpdate+0xe4>)
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b522:	091b      	lsrs	r3, r3, #4
 800b524:	4a0b      	ldr	r2, [pc, #44]	; (800b554 <SystemCoreClockUpdate+0xf4>)
 800b526:	5cd3      	ldrb	r3, [r2, r3]
 800b528:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800b52a:	4b07      	ldr	r3, [pc, #28]	; (800b548 <SystemCoreClockUpdate+0xe8>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	fa22 f303 	lsr.w	r3, r2, r3
 800b534:	4a04      	ldr	r2, [pc, #16]	; (800b548 <SystemCoreClockUpdate+0xe8>)
 800b536:	6013      	str	r3, [r2, #0]
}
 800b538:	bf00      	nop
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	40023800 	.word	0x40023800
 800b548:	2001002c 	.word	0x2001002c
 800b54c:	00f42400 	.word	0x00f42400
 800b550:	007a1200 	.word	0x007a1200
 800b554:	080152fc 	.word	0x080152fc

0800b558 <main>:
**
********************************************************************************
*/

int main( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
    /* Configure the hardware */
    HW_InitAll();
 800b55c:	f7fe fc1a 	bl	8009d94 <HW_InitAll>

    /* Apply the Power-Up sequence*/
    HW_PowerUp();
 800b560:	f7fe fc40 	bl	8009de4 <HW_PowerUp>

    /* Start software tasks */

    //OS_CreateDebugTask();
    OS_SHL_Start();
 800b564:	f7f7 fc0c 	bl	8002d80 <OS_SHL_Start>
    //OS_CreateLedTask();
    OS_CreateMotionTask();
 800b568:	f7f6 ff3a 	bl	80023e0 <OS_CreateMotionTask>
    OS_CreateAvoidanceTask();
 800b56c:	f7f6 fe5c 	bl	8002228 <OS_CreateAvoidanceTask>
    OS_CreateASVTask();
 800b570:	f7f6 fd44 	bl	8001ffc <OS_CreateASVTask>
    OS_CreateDSVTask();
 800b574:	f7f6 fdd2 	bl	800211c <OS_CreateDSVTask>
    */



    /* Start FreeRTOS Scheduler */
    vTaskStartScheduler();
 800b578:	f7fc ff92 	bl	80084a0 <vTaskStartScheduler>


    /* Infinite loop */
    for( ;; );
 800b57c:	e7fe      	b.n	800b57c <main+0x24>
 800b57e:	bf00      	nop

0800b580 <xl_320_init>:

// -----------------------------------------------------------------------------
// First layer: handles UART data
// -----------------------------------------------------------------------------

void xl_320_init(XL_320_Com_Mode mode){
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	71fb      	strb	r3, [r7, #7]
	xl_320_cfg.mode = mode;
 800b58a:	4a0b      	ldr	r2, [pc, #44]	; (800b5b8 <xl_320_init+0x38>)
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	7013      	strb	r3, [r2, #0]
	{
		case XL_320_TX_ONLY:
		case XL_320_TXRX_ONE_PIN:
		case XL_320_TXRX_TWO_PINS:
		default:
			xl_320_cfg.hw_send_byte = NULL;
 800b590:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <xl_320_init+0x38>)
 800b592:	2200      	movs	r2, #0
 800b594:	609a      	str	r2, [r3, #8]
			xl_320_cfg.hw_receive_byte = NULL;
 800b596:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <xl_320_init+0x38>)
 800b598:	2200      	movs	r2, #0
 800b59a:	60da      	str	r2, [r3, #12]
			xl_320_cfg.hw_flush = NULL;
 800b59c:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <xl_320_init+0x38>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	611a      	str	r2, [r3, #16]
			xl_320_cfg.hw_switch = NULL;
 800b5a2:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <xl_320_init+0x38>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	605a      	str	r2, [r3, #4]
		break;
 800b5a8:	bf00      	nop
	}
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	200149c4 	.word	0x200149c4

0800b5bc <xl_320_set_hw_send>:
void xl_320_set_hw_send(void (*hw_send)(uint8_t))
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	xl_320_cfg.hw_send_byte = hw_send;
 800b5c4:	4a04      	ldr	r2, [pc, #16]	; (800b5d8 <xl_320_set_hw_send+0x1c>)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6093      	str	r3, [r2, #8]
}
 800b5ca:	bf00      	nop
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	200149c4 	.word	0x200149c4

0800b5dc <update_crc>:
{
	xl_320_cfg.hw_switch = hw_switch;
}

// Write instruction
unsigned short update_crc(unsigned short crc_accum, uint8_t *data_blk_ptr, unsigned short data_blk_size){
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	463b      	mov	r3, r7
 800b5e6:	6019      	str	r1, [r3, #0]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	1dbb      	adds	r3, r7, #6
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	1d3b      	adds	r3, r7, #4
 800b5f2:	460a      	mov	r2, r1
 800b5f4:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	4a1e      	ldr	r2, [pc, #120]	; (800b674 <update_crc+0x98>)
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	4611      	mov	r1, r2
 800b600:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b604:	461a      	mov	r2, r3
 800b606:	f000 fc3f 	bl	800be88 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 800b60a:	2300      	movs	r3, #0
 800b60c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800b610:	e023      	b.n	800b65a <update_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 800b612:	1dbb      	adds	r3, r7, #6
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	b29a      	uxth	r2, r3
 800b61a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800b61e:	4639      	mov	r1, r7
 800b620:	6809      	ldr	r1, [r1, #0]
 800b622:	440b      	add	r3, r1
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	b29b      	uxth	r3, r3
 800b628:	4053      	eors	r3, r2
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 800b632:	1dbb      	adds	r3, r7, #6
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	b21a      	sxth	r2, r3
 800b63a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800b63e:	f107 030c 	add.w	r3, r7, #12
 800b642:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b646:	b21b      	sxth	r3, r3
 800b648:	4053      	eors	r3, r2
 800b64a:	b21a      	sxth	r2, r3
 800b64c:	1dbb      	adds	r3, r7, #6
 800b64e:	801a      	strh	r2, [r3, #0]
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 800b650:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800b654:	3301      	adds	r3, #1
 800b656:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800b65a:	1d3b      	adds	r3, r7, #4
 800b65c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	429a      	cmp	r2, r3
 800b664:	d3d5      	bcc.n	800b612 <update_crc+0x36>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    }

    return crc_accum;
 800b666:	1dbb      	adds	r3, r7, #6
 800b668:	881b      	ldrh	r3, [r3, #0]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	08014d20 	.word	0x08014d20

0800b678 <xl_320_write>:

void xl_320_write(uint8_t id, uint8_t address, uint8_t* parameters, uint8_t nb_param, uint8_t instruction){
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08c      	sub	sp, #48	; 0x30
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	603a      	str	r2, [r7, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]
 800b686:	460b      	mov	r3, r1
 800b688:	71bb      	strb	r3, [r7, #6]
 800b68a:	4613      	mov	r3, r2
 800b68c:	717b      	strb	r3, [r7, #5]
    unsigned char idx_param;
    xl_320_packet_t write_packet;

    // Build the packet
    write_packet.id            = id;
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	723b      	strb	r3, [r7, #8]
    write_packet.instruction   = instruction;
 800b692:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b696:	72bb      	strb	r3, [r7, #10]
    write_packet.parameter_nb  = nb_param + 2;
 800b698:	797b      	ldrb	r3, [r7, #5]
 800b69a:	3302      	adds	r3, #2
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    write_packet.packet_length = write_packet.parameter_nb + 3;
 800b6a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	727b      	strb	r3, [r7, #9]
    write_packet.parameters[0] = (uint8_t)(address&0xFF); // LSW
 800b6ac:	79bb      	ldrb	r3, [r7, #6]
 800b6ae:	72fb      	strb	r3, [r7, #11]
    write_packet.parameters[1] = (uint8_t)((address>>8)&0xFF); // MSW
 800b6b0:	79bb      	ldrb	r3, [r7, #6]
 800b6b2:	121b      	asrs	r3, r3, #8
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	733b      	strb	r3, [r7, #12]

    for(idx_param=2; idx_param < write_packet.parameter_nb; idx_param++)
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b6be:	e011      	b.n	800b6e4 <xl_320_write+0x6c>
    {
        write_packet.parameters[idx_param] = parameters[idx_param-2];
 800b6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b6c8:	3a02      	subs	r2, #2
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	440a      	add	r2, r1
 800b6ce:	7812      	ldrb	r2, [r2, #0]
 800b6d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b6d4:	440b      	add	r3, r1
 800b6d6:	f803 2c25 	strb.w	r2, [r3, #-37]
    write_packet.parameter_nb  = nb_param + 2;
    write_packet.packet_length = write_packet.parameter_nb + 3;
    write_packet.parameters[0] = (uint8_t)(address&0xFF); // LSW
    write_packet.parameters[1] = (uint8_t)((address>>8)&0xFF); // MSW

    for(idx_param=2; idx_param < write_packet.parameter_nb; idx_param++)
 800b6da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6de:	3301      	adds	r3, #1
 800b6e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b6e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d3e7      	bcc.n	800b6c0 <xl_320_write+0x48>
    {
        write_packet.parameters[idx_param] = parameters[idx_param-2];
    }

    // Send the instruction
    xl_320_send_packet(&write_packet);
 800b6f0:	f107 0308 	add.w	r3, r7, #8
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f805 	bl	800b704 <xl_320_send_packet>
}
 800b6fa:	bf00      	nop
 800b6fc:	3730      	adds	r7, #48	; 0x30
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop

0800b704 <xl_320_send_packet>:

void xl_320_send_packet(xl_320_packet_t* packet){
 800b704:	b580      	push	{r7, lr}
 800b706:	b090      	sub	sp, #64	; 0x40
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
    unsigned short crc16;
    uint8_t buffer[XL_320_MAX_PACKET];
    uint8_t idx_buffer=0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t idx_param;
    uint8_t length;
    uint8_t stuffing=0;
 800b712:	2300      	movs	r3, #0
 800b714:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t ff = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    buffer[idx_buffer++]=XL_320_HEADER;
 800b71e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b728:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b72c:	4413      	add	r3, r2
 800b72e:	22ff      	movs	r2, #255	; 0xff
 800b730:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=XL_320_HEADER;
 800b734:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b73e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b742:	4413      	add	r3, r2
 800b744:	22ff      	movs	r2, #255	; 0xff
 800b746:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=XL_320_HEADER_2;
 800b74a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b754:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b758:	4413      	add	r3, r2
 800b75a:	22fd      	movs	r2, #253	; 0xfd
 800b75c:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=0x00;          // Reserved
 800b760:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b764:	1c5a      	adds	r2, r3, #1
 800b766:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b76a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b76e:	4413      	add	r3, r2
 800b770:	2200      	movs	r2, #0
 800b772:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=packet->id;
 800b776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b780:	4619      	mov	r1, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b78a:	440b      	add	r3, r1
 800b78c:	f803 2c34 	strb.w	r2, [r3, #-52]
    length = idx_buffer;
 800b790:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b794:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    idx_buffer +=2;
 800b798:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b79c:	3302      	adds	r3, #2
 800b79e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    buffer[idx_buffer++]=packet->instruction;
 800b7a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	789a      	ldrb	r2, [r3, #2]
 800b7b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7b6:	440b      	add	r3, r1
 800b7b8:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (idx_param=0; idx_param<packet->parameter_nb; idx_param++){
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b7c2:	e04e      	b.n	800b862 <xl_320_send_packet+0x15e>
        if (packet->parameters[idx_param] == 0xfd && ff>=2) {
 800b7c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	78db      	ldrb	r3, [r3, #3]
 800b7ce:	2bfd      	cmp	r3, #253	; 0xfd
 800b7d0:	d122      	bne.n	800b818 <xl_320_send_packet+0x114>
 800b7d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d91e      	bls.n	800b818 <xl_320_send_packet+0x114>
            ff = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            buffer[idx_buffer++]=0xfd;
 800b7e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b7ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b7ee:	4413      	add	r3, r2
 800b7f0:	22fd      	movs	r2, #253	; 0xfd
 800b7f2:	f803 2c34 	strb.w	r2, [r3, #-52]
            buffer[idx_buffer++]=0xfd;
 800b7f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b800:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b804:	4413      	add	r3, r2
 800b806:	22fd      	movs	r2, #253	; 0xfd
 800b808:	f803 2c34 	strb.w	r2, [r3, #-52]
            stuffing++;
 800b80c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b810:	3301      	adds	r3, #1
 800b812:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800b816:	e01f      	b.n	800b858 <xl_320_send_packet+0x154>
        } else {
            if (packet->parameters[idx_param] == 0xff) {
 800b818:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4413      	add	r3, r2
 800b820:	78db      	ldrb	r3, [r3, #3]
 800b822:	2bff      	cmp	r3, #255	; 0xff
 800b824:	d105      	bne.n	800b832 <xl_320_send_packet+0x12e>
                ff++;
 800b826:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b82a:	3301      	adds	r3, #1
 800b82c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800b830:	e002      	b.n	800b838 <xl_320_send_packet+0x134>
            } else {
                ff = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            }
            buffer[idx_buffer++] = packet->parameters[idx_param];
 800b838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800b842:	4619      	mov	r1, r3
 800b844:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	4413      	add	r3, r2
 800b84c:	78da      	ldrb	r2, [r3, #3]
 800b84e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b852:	440b      	add	r3, r1
 800b854:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[idx_buffer++]=0x00;          // Reserved
    buffer[idx_buffer++]=packet->id;
    length = idx_buffer;
    idx_buffer +=2;
    buffer[idx_buffer++]=packet->instruction;
    for (idx_param=0; idx_param<packet->parameter_nb; idx_param++){
 800b858:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b85c:	3301      	adds	r3, #1
 800b85e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b868:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d3a9      	bcc.n	800b7c4 <xl_320_send_packet+0xc0>
            }
            buffer[idx_buffer++] = packet->parameters[idx_param];
        }
    }

    buffer[length]=(uint8_t)((packet->packet_length+stuffing)&0xFF);
 800b870:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	7851      	ldrb	r1, [r2, #1]
 800b878:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800b87c:	440a      	add	r2, r1
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b884:	440b      	add	r3, r1
 800b886:	f803 2c34 	strb.w	r2, [r3, #-52]
    buffer[length+1]=(uint8_t)(((packet->packet_length+stuffing)>>8)&0xFF);
 800b88a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b88e:	3301      	adds	r3, #1
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7852      	ldrb	r2, [r2, #1]
 800b894:	4611      	mov	r1, r2
 800b896:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800b89a:	440a      	add	r2, r1
 800b89c:	1212      	asrs	r2, r2, #8
 800b89e:	b2d2      	uxtb	r2, r2
 800b8a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b8a4:	440b      	add	r3, r1
 800b8a6:	f803 2c34 	strb.w	r2, [r3, #-52]

    crc16 = update_crc(0, buffer,idx_buffer);
 800b8aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	f107 030c 	add.w	r3, r7, #12
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f7ff fe90 	bl	800b5dc <update_crc>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	873b      	strh	r3, [r7, #56]	; 0x38
    length = idx_buffer;
 800b8c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if(xl_320_cfg.mode==XL_320_TXRX_ONE_PIN)
 800b8c8:	4b1d      	ldr	r3, [pc, #116]	; (800b940 <xl_320_send_packet+0x23c>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d103      	bne.n	800b8d8 <xl_320_send_packet+0x1d4>
    	xl_320_cfg.hw_switch(XL_320_TX);
 800b8d0:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <xl_320_send_packet+0x23c>)
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	4798      	blx	r3
    for(idx_buffer = 0; idx_buffer<length; idx_buffer++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b8de:	e00f      	b.n	800b900 <xl_320_send_packet+0x1fc>
    {
        xl_320_cfg.hw_send_byte(buffer[idx_buffer]);
 800b8e0:	4b17      	ldr	r3, [pc, #92]	; (800b940 <xl_320_send_packet+0x23c>)
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b8e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b8ec:	440a      	add	r2, r1
 800b8ee:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	4798      	blx	r3
    crc16 = update_crc(0, buffer,idx_buffer);
    length = idx_buffer;

    if(xl_320_cfg.mode==XL_320_TXRX_ONE_PIN)
    	xl_320_cfg.hw_switch(XL_320_TX);
    for(idx_buffer = 0; idx_buffer<length; idx_buffer++)
 800b8f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b900:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b904:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b908:	429a      	cmp	r2, r3
 800b90a:	d3e9      	bcc.n	800b8e0 <xl_320_send_packet+0x1dc>
    {
        xl_320_cfg.hw_send_byte(buffer[idx_buffer]);
    }
    xl_320_cfg.hw_send_byte(crc16 & 0xFF); // CRC_L
 800b90c:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <xl_320_send_packet+0x23c>)
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
    xl_320_cfg.hw_send_byte((crc16>>8)&0xFF); // CRC_H
 800b918:	4b09      	ldr	r3, [pc, #36]	; (800b940 <xl_320_send_packet+0x23c>)
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b91e:	0a12      	lsrs	r2, r2, #8
 800b920:	b292      	uxth	r2, r2
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	4610      	mov	r0, r2
 800b926:	4798      	blx	r3
    if(xl_320_cfg.mode==XL_320_TXRX_ONE_PIN)
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <xl_320_send_packet+0x23c>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d103      	bne.n	800b938 <xl_320_send_packet+0x234>
    	xl_320_cfg.hw_switch(XL_320_RX);
 800b930:	4b03      	ldr	r3, [pc, #12]	; (800b940 <xl_320_send_packet+0x23c>)
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	2000      	movs	r0, #0
 800b936:	4798      	blx	r3
}
 800b938:	bf00      	nop
 800b93a:	3740      	adds	r7, #64	; 0x40
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	200149c4 	.word	0x200149c4

0800b944 <xl_320_set_control_mode>:
void xl_320_set_ccw_limit(uint8_t id, uint16_t ccw_limit){
    uint8_t angle[2];
    angle[0]=(uint8_t)(ccw_limit&0xFF);
    angle[1]=(uint8_t)((ccw_limit>>8)&0xFF);
     xl_320_write(id, Xl_320_ADR_CCW_LIMIT, angle, 2, XL_320_INS_WRITE);}
void xl_320_set_control_mode(uint8_t id, uint8_t mode){
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af02      	add	r7, sp, #8
 800b94a:	4603      	mov	r3, r0
 800b94c:	460a      	mov	r2, r1
 800b94e:	71fb      	strb	r3, [r7, #7]
 800b950:	4613      	mov	r3, r2
 800b952:	71bb      	strb	r3, [r7, #6]
    xl_320_write(id, Xl_320_ADR_CONTROL_MODE, &mode, 1, XL_320_INS_WRITE);}
 800b954:	1dba      	adds	r2, r7, #6
 800b956:	79f8      	ldrb	r0, [r7, #7]
 800b958:	2303      	movs	r3, #3
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	2301      	movs	r3, #1
 800b95e:	210b      	movs	r1, #11
 800b960:	f7ff fe8a 	bl	800b678 <xl_320_write>
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop

0800b96c <xl_320_set_led>:
     xl_320_write(id, Xl_320_ADR_RET_LEVEL, &level, 1, XL_320_INS_WRITE);}                       //Tested
void xl_320_set_alarm_shutdown(uint8_t id, uint8_t shutdown){
     xl_320_write(id, Xl_320_ADR_ALARM_SHUTDOWN, &shutdown, 1, XL_320_INS_WRITE);}
void xl_320_set_torque_en(uint8_t id, uint8_t torque_en){
     xl_320_write(id, Xl_320_ADR_TORQUE_EN, &torque_en, 1, XL_320_INS_WRITE);}
void xl_320_set_led(uint8_t id , uint8_t led){
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af02      	add	r7, sp, #8
 800b972:	4603      	mov	r3, r0
 800b974:	460a      	mov	r2, r1
 800b976:	71fb      	strb	r3, [r7, #7]
 800b978:	4613      	mov	r3, r2
 800b97a:	71bb      	strb	r3, [r7, #6]
    xl_320_write(id, XL_320_ADR_LED, &led, 1, XL_320_INS_WRITE);}                                 //Tested
 800b97c:	1dba      	adds	r2, r7, #6
 800b97e:	79f8      	ldrb	r0, [r7, #7]
 800b980:	2303      	movs	r3, #3
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2301      	movs	r3, #1
 800b986:	2119      	movs	r1, #25
 800b988:	f7ff fe76 	bl	800b678 <xl_320_write>
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop

0800b994 <xl_320_set_position>:
    xl_320_write(id, XL_320_ADR_D_GAIN, &D, 1, XL_320_INS_WRITE);}
void xl_320_set_I_gain(uint8_t id, uint8_t I){
    xl_320_write(id, XL_320_ADR_I_GAIN, &I, 1, XL_320_INS_WRITE);}
void xl_320_set_P_gain(uint8_t id, uint8_t P){
    xl_320_write(id, XL_320_ADR_P_GAIN, &P, 1, XL_320_INS_WRITE);}
void xl_320_set_position(uint8_t id, uint16_t position){
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af02      	add	r7, sp, #8
 800b99a:	4603      	mov	r3, r0
 800b99c:	460a      	mov	r2, r1
 800b99e:	71fb      	strb	r3, [r7, #7]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	80bb      	strh	r3, [r7, #4]
    uint8_t pos[2];
    pos[0]=(uint8_t)(position&0xFF);
 800b9a4:	88bb      	ldrh	r3, [r7, #4]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	733b      	strb	r3, [r7, #12]
    pos[1]=(uint8_t)((position>>8)&0xFF);
 800b9aa:	88bb      	ldrh	r3, [r7, #4]
 800b9ac:	0a1b      	lsrs	r3, r3, #8
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	737b      	strb	r3, [r7, #13]
     xl_320_write(id, XL_320_ADR_GOAL_POSITION, pos, 2, XL_320_INS_WRITE);
 800b9b4:	f107 020c 	add.w	r2, r7, #12
 800b9b8:	79f8      	ldrb	r0, [r7, #7]
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	2302      	movs	r3, #2
 800b9c0:	211e      	movs	r1, #30
 800b9c2:	f7ff fe59 	bl	800b678 <xl_320_write>
}
 800b9c6:	bf00      	nop
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop

0800b9d0 <__errno>:
 800b9d0:	4b01      	ldr	r3, [pc, #4]	; (800b9d8 <__errno+0x8>)
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	20010120 	.word	0x20010120

0800b9dc <__libc_init_array>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4b0e      	ldr	r3, [pc, #56]	; (800ba18 <__libc_init_array+0x3c>)
 800b9e0:	4c0e      	ldr	r4, [pc, #56]	; (800ba1c <__libc_init_array+0x40>)
 800b9e2:	1ae4      	subs	r4, r4, r3
 800b9e4:	10a4      	asrs	r4, r4, #2
 800b9e6:	2500      	movs	r5, #0
 800b9e8:	461e      	mov	r6, r3
 800b9ea:	42a5      	cmp	r5, r4
 800b9ec:	d004      	beq.n	800b9f8 <__libc_init_array+0x1c>
 800b9ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9f2:	4798      	blx	r3
 800b9f4:	3501      	adds	r5, #1
 800b9f6:	e7f8      	b.n	800b9ea <__libc_init_array+0xe>
 800b9f8:	f007 fe5e 	bl	80136b8 <_init>
 800b9fc:	4c08      	ldr	r4, [pc, #32]	; (800ba20 <__libc_init_array+0x44>)
 800b9fe:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <__libc_init_array+0x48>)
 800ba00:	1ae4      	subs	r4, r4, r3
 800ba02:	10a4      	asrs	r4, r4, #2
 800ba04:	2500      	movs	r5, #0
 800ba06:	461e      	mov	r6, r3
 800ba08:	42a5      	cmp	r5, r4
 800ba0a:	d004      	beq.n	800ba16 <__libc_init_array+0x3a>
 800ba0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba10:	4798      	blx	r3
 800ba12:	3501      	adds	r5, #1
 800ba14:	e7f8      	b.n	800ba08 <__libc_init_array+0x2c>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	08015880 	.word	0x08015880
 800ba1c:	08015880 	.word	0x08015880
 800ba20:	08015884 	.word	0x08015884
 800ba24:	08015880 	.word	0x08015880

0800ba28 <malloc>:
 800ba28:	4b02      	ldr	r3, [pc, #8]	; (800ba34 <malloc+0xc>)
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	f000 b80b 	b.w	800ba48 <_malloc_r>
 800ba32:	bf00      	nop
 800ba34:	20010120 	.word	0x20010120

0800ba38 <free>:
 800ba38:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <free+0xc>)
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	f004 bbd9 	b.w	80101f4 <_free_r>
 800ba42:	bf00      	nop
 800ba44:	20010120 	.word	0x20010120

0800ba48 <_malloc_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	f101 040b 	add.w	r4, r1, #11
 800ba50:	2c16      	cmp	r4, #22
 800ba52:	b085      	sub	sp, #20
 800ba54:	4681      	mov	r9, r0
 800ba56:	d903      	bls.n	800ba60 <_malloc_r+0x18>
 800ba58:	f034 0407 	bics.w	r4, r4, #7
 800ba5c:	d501      	bpl.n	800ba62 <_malloc_r+0x1a>
 800ba5e:	e002      	b.n	800ba66 <_malloc_r+0x1e>
 800ba60:	2410      	movs	r4, #16
 800ba62:	428c      	cmp	r4, r1
 800ba64:	d203      	bcs.n	800ba6e <_malloc_r+0x26>
 800ba66:	230c      	movs	r3, #12
 800ba68:	f8c9 3000 	str.w	r3, [r9]
 800ba6c:	e1ea      	b.n	800be44 <_malloc_r+0x3fc>
 800ba6e:	4648      	mov	r0, r9
 800ba70:	f000 fa1d 	bl	800beae <__malloc_lock>
 800ba74:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800ba78:	4d9e      	ldr	r5, [pc, #632]	; (800bcf4 <_malloc_r+0x2ac>)
 800ba7a:	d217      	bcs.n	800baac <_malloc_r+0x64>
 800ba7c:	f104 0208 	add.w	r2, r4, #8
 800ba80:	442a      	add	r2, r5
 800ba82:	f1a2 0108 	sub.w	r1, r2, #8
 800ba86:	6856      	ldr	r6, [r2, #4]
 800ba88:	428e      	cmp	r6, r1
 800ba8a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800ba8e:	d102      	bne.n	800ba96 <_malloc_r+0x4e>
 800ba90:	68d6      	ldr	r6, [r2, #12]
 800ba92:	42b2      	cmp	r2, r6
 800ba94:	d008      	beq.n	800baa8 <_malloc_r+0x60>
 800ba96:	6873      	ldr	r3, [r6, #4]
 800ba98:	68f2      	ldr	r2, [r6, #12]
 800ba9a:	68b1      	ldr	r1, [r6, #8]
 800ba9c:	f023 0303 	bic.w	r3, r3, #3
 800baa0:	60ca      	str	r2, [r1, #12]
 800baa2:	4433      	add	r3, r6
 800baa4:	6091      	str	r1, [r2, #8]
 800baa6:	e02f      	b.n	800bb08 <_malloc_r+0xc0>
 800baa8:	3302      	adds	r3, #2
 800baaa:	e03d      	b.n	800bb28 <_malloc_r+0xe0>
 800baac:	0a63      	lsrs	r3, r4, #9
 800baae:	d01a      	beq.n	800bae6 <_malloc_r+0x9e>
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d802      	bhi.n	800baba <_malloc_r+0x72>
 800bab4:	09a3      	lsrs	r3, r4, #6
 800bab6:	3338      	adds	r3, #56	; 0x38
 800bab8:	e018      	b.n	800baec <_malloc_r+0xa4>
 800baba:	2b14      	cmp	r3, #20
 800babc:	d801      	bhi.n	800bac2 <_malloc_r+0x7a>
 800babe:	335b      	adds	r3, #91	; 0x5b
 800bac0:	e014      	b.n	800baec <_malloc_r+0xa4>
 800bac2:	2b54      	cmp	r3, #84	; 0x54
 800bac4:	d802      	bhi.n	800bacc <_malloc_r+0x84>
 800bac6:	0b23      	lsrs	r3, r4, #12
 800bac8:	336e      	adds	r3, #110	; 0x6e
 800baca:	e00f      	b.n	800baec <_malloc_r+0xa4>
 800bacc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800bad0:	d802      	bhi.n	800bad8 <_malloc_r+0x90>
 800bad2:	0be3      	lsrs	r3, r4, #15
 800bad4:	3377      	adds	r3, #119	; 0x77
 800bad6:	e009      	b.n	800baec <_malloc_r+0xa4>
 800bad8:	f240 5254 	movw	r2, #1364	; 0x554
 800badc:	4293      	cmp	r3, r2
 800bade:	d804      	bhi.n	800baea <_malloc_r+0xa2>
 800bae0:	0ca3      	lsrs	r3, r4, #18
 800bae2:	337c      	adds	r3, #124	; 0x7c
 800bae4:	e002      	b.n	800baec <_malloc_r+0xa4>
 800bae6:	233f      	movs	r3, #63	; 0x3f
 800bae8:	e000      	b.n	800baec <_malloc_r+0xa4>
 800baea:	237e      	movs	r3, #126	; 0x7e
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800baf2:	f1a2 0008 	sub.w	r0, r2, #8
 800baf6:	6856      	ldr	r6, [r2, #4]
 800baf8:	e00c      	b.n	800bb14 <_malloc_r+0xcc>
 800bafa:	2900      	cmp	r1, #0
 800bafc:	68f1      	ldr	r1, [r6, #12]
 800bafe:	db08      	blt.n	800bb12 <_malloc_r+0xca>
 800bb00:	68b3      	ldr	r3, [r6, #8]
 800bb02:	60d9      	str	r1, [r3, #12]
 800bb04:	608b      	str	r3, [r1, #8]
 800bb06:	18b3      	adds	r3, r6, r2
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	f042 0201 	orr.w	r2, r2, #1
 800bb0e:	605a      	str	r2, [r3, #4]
 800bb10:	e1a3      	b.n	800be5a <_malloc_r+0x412>
 800bb12:	460e      	mov	r6, r1
 800bb14:	4286      	cmp	r6, r0
 800bb16:	d006      	beq.n	800bb26 <_malloc_r+0xde>
 800bb18:	6872      	ldr	r2, [r6, #4]
 800bb1a:	f022 0203 	bic.w	r2, r2, #3
 800bb1e:	1b11      	subs	r1, r2, r4
 800bb20:	290f      	cmp	r1, #15
 800bb22:	ddea      	ble.n	800bafa <_malloc_r+0xb2>
 800bb24:	3b01      	subs	r3, #1
 800bb26:	3301      	adds	r3, #1
 800bb28:	4a72      	ldr	r2, [pc, #456]	; (800bcf4 <_malloc_r+0x2ac>)
 800bb2a:	692e      	ldr	r6, [r5, #16]
 800bb2c:	f102 0708 	add.w	r7, r2, #8
 800bb30:	42be      	cmp	r6, r7
 800bb32:	4639      	mov	r1, r7
 800bb34:	d079      	beq.n	800bc2a <_malloc_r+0x1e2>
 800bb36:	6870      	ldr	r0, [r6, #4]
 800bb38:	f020 0003 	bic.w	r0, r0, #3
 800bb3c:	ebc4 0e00 	rsb	lr, r4, r0
 800bb40:	f1be 0f0f 	cmp.w	lr, #15
 800bb44:	dd0d      	ble.n	800bb62 <_malloc_r+0x11a>
 800bb46:	1933      	adds	r3, r6, r4
 800bb48:	f044 0401 	orr.w	r4, r4, #1
 800bb4c:	6074      	str	r4, [r6, #4]
 800bb4e:	6153      	str	r3, [r2, #20]
 800bb50:	6113      	str	r3, [r2, #16]
 800bb52:	f04e 0201 	orr.w	r2, lr, #1
 800bb56:	60df      	str	r7, [r3, #12]
 800bb58:	609f      	str	r7, [r3, #8]
 800bb5a:	605a      	str	r2, [r3, #4]
 800bb5c:	f843 e00e 	str.w	lr, [r3, lr]
 800bb60:	e17b      	b.n	800be5a <_malloc_r+0x412>
 800bb62:	f1be 0f00 	cmp.w	lr, #0
 800bb66:	6157      	str	r7, [r2, #20]
 800bb68:	6117      	str	r7, [r2, #16]
 800bb6a:	db05      	blt.n	800bb78 <_malloc_r+0x130>
 800bb6c:	4430      	add	r0, r6
 800bb6e:	6843      	ldr	r3, [r0, #4]
 800bb70:	f043 0301 	orr.w	r3, r3, #1
 800bb74:	6043      	str	r3, [r0, #4]
 800bb76:	e170      	b.n	800be5a <_malloc_r+0x412>
 800bb78:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bb7c:	d215      	bcs.n	800bbaa <_malloc_r+0x162>
 800bb7e:	08c0      	lsrs	r0, r0, #3
 800bb80:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800bb84:	2701      	movs	r7, #1
 800bb86:	fa07 fe0e 	lsl.w	lr, r7, lr
 800bb8a:	6857      	ldr	r7, [r2, #4]
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	ea4e 0707 	orr.w	r7, lr, r7
 800bb92:	6057      	str	r7, [r2, #4]
 800bb94:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 800bb98:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800bb9c:	f8c6 e008 	str.w	lr, [r6, #8]
 800bba0:	3f08      	subs	r7, #8
 800bba2:	60f7      	str	r7, [r6, #12]
 800bba4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 800bba8:	e03d      	b.n	800bc26 <_malloc_r+0x1de>
 800bbaa:	0a42      	lsrs	r2, r0, #9
 800bbac:	2a04      	cmp	r2, #4
 800bbae:	d802      	bhi.n	800bbb6 <_malloc_r+0x16e>
 800bbb0:	0982      	lsrs	r2, r0, #6
 800bbb2:	3238      	adds	r2, #56	; 0x38
 800bbb4:	e015      	b.n	800bbe2 <_malloc_r+0x19a>
 800bbb6:	2a14      	cmp	r2, #20
 800bbb8:	d801      	bhi.n	800bbbe <_malloc_r+0x176>
 800bbba:	325b      	adds	r2, #91	; 0x5b
 800bbbc:	e011      	b.n	800bbe2 <_malloc_r+0x19a>
 800bbbe:	2a54      	cmp	r2, #84	; 0x54
 800bbc0:	d802      	bhi.n	800bbc8 <_malloc_r+0x180>
 800bbc2:	0b02      	lsrs	r2, r0, #12
 800bbc4:	326e      	adds	r2, #110	; 0x6e
 800bbc6:	e00c      	b.n	800bbe2 <_malloc_r+0x19a>
 800bbc8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bbcc:	d802      	bhi.n	800bbd4 <_malloc_r+0x18c>
 800bbce:	0bc2      	lsrs	r2, r0, #15
 800bbd0:	3277      	adds	r2, #119	; 0x77
 800bbd2:	e006      	b.n	800bbe2 <_malloc_r+0x19a>
 800bbd4:	f240 5754 	movw	r7, #1364	; 0x554
 800bbd8:	42ba      	cmp	r2, r7
 800bbda:	bf9a      	itte	ls
 800bbdc:	0c82      	lsrls	r2, r0, #18
 800bbde:	327c      	addls	r2, #124	; 0x7c
 800bbe0:	227e      	movhi	r2, #126	; 0x7e
 800bbe2:	1c57      	adds	r7, r2, #1
 800bbe4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800bbe8:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800bbec:	f8df c104 	ldr.w	ip, [pc, #260]	; 800bcf4 <_malloc_r+0x2ac>
 800bbf0:	45be      	cmp	lr, r7
 800bbf2:	d10d      	bne.n	800bc10 <_malloc_r+0x1c8>
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	1092      	asrs	r2, r2, #2
 800bbf8:	fa00 f202 	lsl.w	r2, r0, r2
 800bbfc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800bc00:	4310      	orrs	r0, r2
 800bc02:	f8cc 0004 	str.w	r0, [ip, #4]
 800bc06:	4672      	mov	r2, lr
 800bc08:	e009      	b.n	800bc1e <_malloc_r+0x1d6>
 800bc0a:	68bf      	ldr	r7, [r7, #8]
 800bc0c:	45be      	cmp	lr, r7
 800bc0e:	d004      	beq.n	800bc1a <_malloc_r+0x1d2>
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	f022 0203 	bic.w	r2, r2, #3
 800bc16:	4290      	cmp	r0, r2
 800bc18:	d3f7      	bcc.n	800bc0a <_malloc_r+0x1c2>
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	46be      	mov	lr, r7
 800bc1e:	60f2      	str	r2, [r6, #12]
 800bc20:	f8c6 e008 	str.w	lr, [r6, #8]
 800bc24:	6096      	str	r6, [r2, #8]
 800bc26:	f8ce 600c 	str.w	r6, [lr, #12]
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	109a      	asrs	r2, r3, #2
 800bc2e:	fa00 f202 	lsl.w	r2, r0, r2
 800bc32:	6868      	ldr	r0, [r5, #4]
 800bc34:	4282      	cmp	r2, r0
 800bc36:	d85f      	bhi.n	800bcf8 <_malloc_r+0x2b0>
 800bc38:	4202      	tst	r2, r0
 800bc3a:	d106      	bne.n	800bc4a <_malloc_r+0x202>
 800bc3c:	f023 0303 	bic.w	r3, r3, #3
 800bc40:	0052      	lsls	r2, r2, #1
 800bc42:	4202      	tst	r2, r0
 800bc44:	f103 0304 	add.w	r3, r3, #4
 800bc48:	d0fa      	beq.n	800bc40 <_malloc_r+0x1f8>
 800bc4a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800bc4e:	46c2      	mov	sl, r8
 800bc50:	469c      	mov	ip, r3
 800bc52:	f8da 600c 	ldr.w	r6, [sl, #12]
 800bc56:	4556      	cmp	r6, sl
 800bc58:	d02c      	beq.n	800bcb4 <_malloc_r+0x26c>
 800bc5a:	6870      	ldr	r0, [r6, #4]
 800bc5c:	68f7      	ldr	r7, [r6, #12]
 800bc5e:	f020 0003 	bic.w	r0, r0, #3
 800bc62:	ebc4 0e00 	rsb	lr, r4, r0
 800bc66:	f1be 0f0f 	cmp.w	lr, #15
 800bc6a:	dd11      	ble.n	800bc90 <_malloc_r+0x248>
 800bc6c:	1933      	adds	r3, r6, r4
 800bc6e:	f044 0401 	orr.w	r4, r4, #1
 800bc72:	6074      	str	r4, [r6, #4]
 800bc74:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800bc78:	60d7      	str	r7, [r2, #12]
 800bc7a:	60ba      	str	r2, [r7, #8]
 800bc7c:	f04e 0201 	orr.w	r2, lr, #1
 800bc80:	616b      	str	r3, [r5, #20]
 800bc82:	612b      	str	r3, [r5, #16]
 800bc84:	60d9      	str	r1, [r3, #12]
 800bc86:	6099      	str	r1, [r3, #8]
 800bc88:	605a      	str	r2, [r3, #4]
 800bc8a:	f843 e00e 	str.w	lr, [r3, lr]
 800bc8e:	e00b      	b.n	800bca8 <_malloc_r+0x260>
 800bc90:	f1be 0f00 	cmp.w	lr, #0
 800bc94:	db0c      	blt.n	800bcb0 <_malloc_r+0x268>
 800bc96:	1833      	adds	r3, r6, r0
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	f042 0201 	orr.w	r2, r2, #1
 800bc9e:	605a      	str	r2, [r3, #4]
 800bca0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800bca4:	60df      	str	r7, [r3, #12]
 800bca6:	60bb      	str	r3, [r7, #8]
 800bca8:	4648      	mov	r0, r9
 800bcaa:	f000 f901 	bl	800beb0 <__malloc_unlock>
 800bcae:	e0d8      	b.n	800be62 <_malloc_r+0x41a>
 800bcb0:	463e      	mov	r6, r7
 800bcb2:	e7d0      	b.n	800bc56 <_malloc_r+0x20e>
 800bcb4:	f10c 0c01 	add.w	ip, ip, #1
 800bcb8:	f01c 0f03 	tst.w	ip, #3
 800bcbc:	f10a 0a08 	add.w	sl, sl, #8
 800bcc0:	d1c7      	bne.n	800bc52 <_malloc_r+0x20a>
 800bcc2:	0798      	lsls	r0, r3, #30
 800bcc4:	d104      	bne.n	800bcd0 <_malloc_r+0x288>
 800bcc6:	686b      	ldr	r3, [r5, #4]
 800bcc8:	ea23 0302 	bic.w	r3, r3, r2
 800bccc:	606b      	str	r3, [r5, #4]
 800bcce:	e005      	b.n	800bcdc <_malloc_r+0x294>
 800bcd0:	f858 0908 	ldr.w	r0, [r8], #-8
 800bcd4:	4580      	cmp	r8, r0
 800bcd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcda:	d0f2      	beq.n	800bcc2 <_malloc_r+0x27a>
 800bcdc:	6868      	ldr	r0, [r5, #4]
 800bcde:	0052      	lsls	r2, r2, #1
 800bce0:	4282      	cmp	r2, r0
 800bce2:	d809      	bhi.n	800bcf8 <_malloc_r+0x2b0>
 800bce4:	b142      	cbz	r2, 800bcf8 <_malloc_r+0x2b0>
 800bce6:	4663      	mov	r3, ip
 800bce8:	4202      	tst	r2, r0
 800bcea:	d1ae      	bne.n	800bc4a <_malloc_r+0x202>
 800bcec:	3304      	adds	r3, #4
 800bcee:	0052      	lsls	r2, r2, #1
 800bcf0:	e7fa      	b.n	800bce8 <_malloc_r+0x2a0>
 800bcf2:	bf00      	nop
 800bcf4:	20010124 	.word	0x20010124
 800bcf8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800bcfc:	f8db 6004 	ldr.w	r6, [fp, #4]
 800bd00:	f026 0603 	bic.w	r6, r6, #3
 800bd04:	42b4      	cmp	r4, r6
 800bd06:	d803      	bhi.n	800bd10 <_malloc_r+0x2c8>
 800bd08:	1b33      	subs	r3, r6, r4
 800bd0a:	2b0f      	cmp	r3, #15
 800bd0c:	f300 809c 	bgt.w	800be48 <_malloc_r+0x400>
 800bd10:	4a56      	ldr	r2, [pc, #344]	; (800be6c <_malloc_r+0x424>)
 800bd12:	4957      	ldr	r1, [pc, #348]	; (800be70 <_malloc_r+0x428>)
 800bd14:	6812      	ldr	r2, [r2, #0]
 800bd16:	6808      	ldr	r0, [r1, #0]
 800bd18:	9101      	str	r1, [sp, #4]
 800bd1a:	f102 0810 	add.w	r8, r2, #16
 800bd1e:	4a55      	ldr	r2, [pc, #340]	; (800be74 <_malloc_r+0x42c>)
 800bd20:	9203      	str	r2, [sp, #12]
 800bd22:	3001      	adds	r0, #1
 800bd24:	bf18      	it	ne
 800bd26:	f102 31ff 	addne.w	r1, r2, #4294967295
 800bd2a:	44a0      	add	r8, r4
 800bd2c:	bf1e      	ittt	ne
 800bd2e:	4488      	addne	r8, r1
 800bd30:	4251      	negne	r1, r2
 800bd32:	ea01 0808 	andne.w	r8, r1, r8
 800bd36:	eb0b 0306 	add.w	r3, fp, r6
 800bd3a:	4641      	mov	r1, r8
 800bd3c:	4648      	mov	r0, r9
 800bd3e:	9302      	str	r3, [sp, #8]
 800bd40:	f000 f924 	bl	800bf8c <_sbrk_r>
 800bd44:	1c42      	adds	r2, r0, #1
 800bd46:	4607      	mov	r7, r0
 800bd48:	d06f      	beq.n	800be2a <_malloc_r+0x3e2>
 800bd4a:	9b02      	ldr	r3, [sp, #8]
 800bd4c:	9a03      	ldr	r2, [sp, #12]
 800bd4e:	4283      	cmp	r3, r0
 800bd50:	d901      	bls.n	800bd56 <_malloc_r+0x30e>
 800bd52:	45ab      	cmp	fp, r5
 800bd54:	d169      	bne.n	800be2a <_malloc_r+0x3e2>
 800bd56:	f8df a128 	ldr.w	sl, [pc, #296]	; 800be80 <_malloc_r+0x438>
 800bd5a:	f8df c128 	ldr.w	ip, [pc, #296]	; 800be84 <_malloc_r+0x43c>
 800bd5e:	f8da 0000 	ldr.w	r0, [sl]
 800bd62:	42bb      	cmp	r3, r7
 800bd64:	4440      	add	r0, r8
 800bd66:	f8ca 0000 	str.w	r0, [sl]
 800bd6a:	d108      	bne.n	800bd7e <_malloc_r+0x336>
 800bd6c:	ea13 0f0c 	tst.w	r3, ip
 800bd70:	d105      	bne.n	800bd7e <_malloc_r+0x336>
 800bd72:	68ab      	ldr	r3, [r5, #8]
 800bd74:	4446      	add	r6, r8
 800bd76:	f046 0601 	orr.w	r6, r6, #1
 800bd7a:	605e      	str	r6, [r3, #4]
 800bd7c:	e049      	b.n	800be12 <_malloc_r+0x3ca>
 800bd7e:	9901      	ldr	r1, [sp, #4]
 800bd80:	f8d1 e000 	ldr.w	lr, [r1]
 800bd84:	f1be 3fff 	cmp.w	lr, #4294967295
 800bd88:	bf15      	itete	ne
 800bd8a:	1afb      	subne	r3, r7, r3
 800bd8c:	4b38      	ldreq	r3, [pc, #224]	; (800be70 <_malloc_r+0x428>)
 800bd8e:	181b      	addne	r3, r3, r0
 800bd90:	601f      	streq	r7, [r3, #0]
 800bd92:	bf18      	it	ne
 800bd94:	f8ca 3000 	strne.w	r3, [sl]
 800bd98:	f017 0307 	ands.w	r3, r7, #7
 800bd9c:	bf1c      	itt	ne
 800bd9e:	f1c3 0308 	rsbne	r3, r3, #8
 800bda2:	18ff      	addne	r7, r7, r3
 800bda4:	44b8      	add	r8, r7
 800bda6:	441a      	add	r2, r3
 800bda8:	ea08 080c 	and.w	r8, r8, ip
 800bdac:	ebc8 0802 	rsb	r8, r8, r2
 800bdb0:	4641      	mov	r1, r8
 800bdb2:	4648      	mov	r0, r9
 800bdb4:	f000 f8ea 	bl	800bf8c <_sbrk_r>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	bf04      	itt	eq
 800bdbc:	4638      	moveq	r0, r7
 800bdbe:	f04f 0800 	moveq.w	r8, #0
 800bdc2:	f8da 3000 	ldr.w	r3, [sl]
 800bdc6:	60af      	str	r7, [r5, #8]
 800bdc8:	1bc2      	subs	r2, r0, r7
 800bdca:	4442      	add	r2, r8
 800bdcc:	4443      	add	r3, r8
 800bdce:	f042 0201 	orr.w	r2, r2, #1
 800bdd2:	45ab      	cmp	fp, r5
 800bdd4:	f8ca 3000 	str.w	r3, [sl]
 800bdd8:	607a      	str	r2, [r7, #4]
 800bdda:	d01a      	beq.n	800be12 <_malloc_r+0x3ca>
 800bddc:	2e0f      	cmp	r6, #15
 800bdde:	d802      	bhi.n	800bde6 <_malloc_r+0x39e>
 800bde0:	2301      	movs	r3, #1
 800bde2:	607b      	str	r3, [r7, #4]
 800bde4:	e021      	b.n	800be2a <_malloc_r+0x3e2>
 800bde6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bdea:	3e0c      	subs	r6, #12
 800bdec:	f026 0607 	bic.w	r6, r6, #7
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	4333      	orrs	r3, r6
 800bdf6:	f8cb 3004 	str.w	r3, [fp, #4]
 800bdfa:	eb0b 0306 	add.w	r3, fp, r6
 800bdfe:	2205      	movs	r2, #5
 800be00:	2e0f      	cmp	r6, #15
 800be02:	605a      	str	r2, [r3, #4]
 800be04:	609a      	str	r2, [r3, #8]
 800be06:	d904      	bls.n	800be12 <_malloc_r+0x3ca>
 800be08:	f10b 0108 	add.w	r1, fp, #8
 800be0c:	4648      	mov	r0, r9
 800be0e:	f004 f9f1 	bl	80101f4 <_free_r>
 800be12:	4a19      	ldr	r2, [pc, #100]	; (800be78 <_malloc_r+0x430>)
 800be14:	f8da 3000 	ldr.w	r3, [sl]
 800be18:	6811      	ldr	r1, [r2, #0]
 800be1a:	428b      	cmp	r3, r1
 800be1c:	bf88      	it	hi
 800be1e:	6013      	strhi	r3, [r2, #0]
 800be20:	4a16      	ldr	r2, [pc, #88]	; (800be7c <_malloc_r+0x434>)
 800be22:	6811      	ldr	r1, [r2, #0]
 800be24:	428b      	cmp	r3, r1
 800be26:	bf88      	it	hi
 800be28:	6013      	strhi	r3, [r2, #0]
 800be2a:	68ab      	ldr	r3, [r5, #8]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	f022 0203 	bic.w	r2, r2, #3
 800be32:	4294      	cmp	r4, r2
 800be34:	eba2 0304 	sub.w	r3, r2, r4
 800be38:	d801      	bhi.n	800be3e <_malloc_r+0x3f6>
 800be3a:	2b0f      	cmp	r3, #15
 800be3c:	dc04      	bgt.n	800be48 <_malloc_r+0x400>
 800be3e:	4648      	mov	r0, r9
 800be40:	f000 f836 	bl	800beb0 <__malloc_unlock>
 800be44:	2600      	movs	r6, #0
 800be46:	e00c      	b.n	800be62 <_malloc_r+0x41a>
 800be48:	68ae      	ldr	r6, [r5, #8]
 800be4a:	f044 0201 	orr.w	r2, r4, #1
 800be4e:	4434      	add	r4, r6
 800be50:	f043 0301 	orr.w	r3, r3, #1
 800be54:	6072      	str	r2, [r6, #4]
 800be56:	60ac      	str	r4, [r5, #8]
 800be58:	6063      	str	r3, [r4, #4]
 800be5a:	4648      	mov	r0, r9
 800be5c:	f000 f828 	bl	800beb0 <__malloc_unlock>
 800be60:	3608      	adds	r6, #8
 800be62:	4630      	mov	r0, r6
 800be64:	b005      	add	sp, #20
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	bf00      	nop
 800be6c:	200146e0 	.word	0x200146e0
 800be70:	20010530 	.word	0x20010530
 800be74:	00000080 	.word	0x00000080
 800be78:	200146dc 	.word	0x200146dc
 800be7c:	200146d8 	.word	0x200146d8
 800be80:	200146e4 	.word	0x200146e4
 800be84:	0000007f 	.word	0x0000007f

0800be88 <memcpy>:
 800be88:	b510      	push	{r4, lr}
 800be8a:	1e43      	subs	r3, r0, #1
 800be8c:	440a      	add	r2, r1
 800be8e:	4291      	cmp	r1, r2
 800be90:	d004      	beq.n	800be9c <memcpy+0x14>
 800be92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be9a:	e7f8      	b.n	800be8e <memcpy+0x6>
 800be9c:	bd10      	pop	{r4, pc}

0800be9e <memset>:
 800be9e:	4402      	add	r2, r0
 800bea0:	4603      	mov	r3, r0
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d002      	beq.n	800beac <memset+0xe>
 800bea6:	f803 1b01 	strb.w	r1, [r3], #1
 800beaa:	e7fa      	b.n	800bea2 <memset+0x4>
 800beac:	4770      	bx	lr

0800beae <__malloc_lock>:
 800beae:	4770      	bx	lr

0800beb0 <__malloc_unlock>:
 800beb0:	4770      	bx	lr
	...

0800beb4 <printf>:
 800beb4:	b40f      	push	{r0, r1, r2, r3}
 800beb6:	4b0a      	ldr	r3, [pc, #40]	; (800bee0 <printf+0x2c>)
 800beb8:	b513      	push	{r0, r1, r4, lr}
 800beba:	681c      	ldr	r4, [r3, #0]
 800bebc:	b124      	cbz	r4, 800bec8 <printf+0x14>
 800bebe:	69a3      	ldr	r3, [r4, #24]
 800bec0:	b913      	cbnz	r3, 800bec8 <printf+0x14>
 800bec2:	4620      	mov	r0, r4
 800bec4:	f004 f8ce 	bl	8010064 <__sinit>
 800bec8:	ab05      	add	r3, sp, #20
 800beca:	9a04      	ldr	r2, [sp, #16]
 800becc:	68a1      	ldr	r1, [r4, #8]
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	4620      	mov	r0, r4
 800bed2:	f002 f8fd 	bl	800e0d0 <_vfprintf_r>
 800bed6:	b002      	add	sp, #8
 800bed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bedc:	b004      	add	sp, #16
 800bede:	4770      	bx	lr
 800bee0:	20010120 	.word	0x20010120

0800bee4 <_puts_r>:
 800bee4:	b530      	push	{r4, r5, lr}
 800bee6:	4605      	mov	r5, r0
 800bee8:	b089      	sub	sp, #36	; 0x24
 800beea:	4608      	mov	r0, r1
 800beec:	460c      	mov	r4, r1
 800beee:	f7f4 f98f 	bl	8000210 <strlen>
 800bef2:	4b1e      	ldr	r3, [pc, #120]	; (800bf6c <_puts_r+0x88>)
 800bef4:	9306      	str	r3, [sp, #24]
 800bef6:	2301      	movs	r3, #1
 800bef8:	9005      	str	r0, [sp, #20]
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	4418      	add	r0, r3
 800befe:	ab04      	add	r3, sp, #16
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	2302      	movs	r3, #2
 800bf04:	9404      	str	r4, [sp, #16]
 800bf06:	9003      	str	r0, [sp, #12]
 800bf08:	9302      	str	r3, [sp, #8]
 800bf0a:	b125      	cbz	r5, 800bf16 <_puts_r+0x32>
 800bf0c:	69ab      	ldr	r3, [r5, #24]
 800bf0e:	b913      	cbnz	r3, 800bf16 <_puts_r+0x32>
 800bf10:	4628      	mov	r0, r5
 800bf12:	f004 f8a7 	bl	8010064 <__sinit>
 800bf16:	69ab      	ldr	r3, [r5, #24]
 800bf18:	68ac      	ldr	r4, [r5, #8]
 800bf1a:	b913      	cbnz	r3, 800bf22 <_puts_r+0x3e>
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f004 f8a1 	bl	8010064 <__sinit>
 800bf22:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <_puts_r+0x8c>)
 800bf24:	429c      	cmp	r4, r3
 800bf26:	d101      	bne.n	800bf2c <_puts_r+0x48>
 800bf28:	686c      	ldr	r4, [r5, #4]
 800bf2a:	e008      	b.n	800bf3e <_puts_r+0x5a>
 800bf2c:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <_puts_r+0x90>)
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	d101      	bne.n	800bf36 <_puts_r+0x52>
 800bf32:	68ac      	ldr	r4, [r5, #8]
 800bf34:	e003      	b.n	800bf3e <_puts_r+0x5a>
 800bf36:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <_puts_r+0x94>)
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	bf08      	it	eq
 800bf3c:	68ec      	ldreq	r4, [r5, #12]
 800bf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf42:	049a      	lsls	r2, r3, #18
 800bf44:	d406      	bmi.n	800bf54 <_puts_r+0x70>
 800bf46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bf4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	6662      	str	r2, [r4, #100]	; 0x64
 800bf54:	aa01      	add	r2, sp, #4
 800bf56:	4621      	mov	r1, r4
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f004 fa09 	bl	8010370 <__sfvwrite_r>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	bf14      	ite	ne
 800bf62:	f04f 30ff 	movne.w	r0, #4294967295
 800bf66:	200a      	moveq	r0, #10
 800bf68:	b009      	add	sp, #36	; 0x24
 800bf6a:	bd30      	pop	{r4, r5, pc}
 800bf6c:	08015314 	.word	0x08015314
 800bf70:	080154ec 	.word	0x080154ec
 800bf74:	0801550c 	.word	0x0801550c
 800bf78:	0801552c 	.word	0x0801552c

0800bf7c <puts>:
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <puts+0xc>)
 800bf7e:	4601      	mov	r1, r0
 800bf80:	6818      	ldr	r0, [r3, #0]
 800bf82:	f7ff bfaf 	b.w	800bee4 <_puts_r>
 800bf86:	bf00      	nop
 800bf88:	20010120 	.word	0x20010120

0800bf8c <_sbrk_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4c06      	ldr	r4, [pc, #24]	; (800bfa8 <_sbrk_r+0x1c>)
 800bf90:	2300      	movs	r3, #0
 800bf92:	4605      	mov	r5, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	6023      	str	r3, [r4, #0]
 800bf98:	f7f5 ffce 	bl	8001f38 <_sbrk>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_sbrk_r+0x1a>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_sbrk_r+0x1a>
 800bfa4:	602b      	str	r3, [r5, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	200149d8 	.word	0x200149d8

0800bfac <snprintf>:
 800bfac:	b40c      	push	{r2, r3}
 800bfae:	b530      	push	{r4, r5, lr}
 800bfb0:	4b16      	ldr	r3, [pc, #88]	; (800c00c <snprintf+0x60>)
 800bfb2:	1e0c      	subs	r4, r1, #0
 800bfb4:	b09d      	sub	sp, #116	; 0x74
 800bfb6:	681d      	ldr	r5, [r3, #0]
 800bfb8:	da04      	bge.n	800bfc4 <snprintf+0x18>
 800bfba:	238b      	movs	r3, #139	; 0x8b
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc2:	e01e      	b.n	800c002 <snprintf+0x56>
 800bfc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bfc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfcc:	bf14      	ite	ne
 800bfce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfd2:	4623      	moveq	r3, r4
 800bfd4:	9304      	str	r3, [sp, #16]
 800bfd6:	9307      	str	r3, [sp, #28]
 800bfd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfdc:	9002      	str	r0, [sp, #8]
 800bfde:	9006      	str	r0, [sp, #24]
 800bfe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfe4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfe6:	ab21      	add	r3, sp, #132	; 0x84
 800bfe8:	a902      	add	r1, sp, #8
 800bfea:	4628      	mov	r0, r5
 800bfec:	9301      	str	r3, [sp, #4]
 800bfee:	f001 f8ab 	bl	800d148 <_svfprintf_r>
 800bff2:	1c43      	adds	r3, r0, #1
 800bff4:	bfbc      	itt	lt
 800bff6:	238b      	movlt	r3, #139	; 0x8b
 800bff8:	602b      	strlt	r3, [r5, #0]
 800bffa:	b114      	cbz	r4, 800c002 <snprintf+0x56>
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	2200      	movs	r2, #0
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	b01d      	add	sp, #116	; 0x74
 800c004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c008:	b002      	add	sp, #8
 800c00a:	4770      	bx	lr
 800c00c:	20010120 	.word	0x20010120

0800c010 <sprintf>:
 800c010:	b40e      	push	{r1, r2, r3}
 800c012:	b500      	push	{lr}
 800c014:	b09c      	sub	sp, #112	; 0x70
 800c016:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c01a:	ab1d      	add	r3, sp, #116	; 0x74
 800c01c:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c020:	9002      	str	r0, [sp, #8]
 800c022:	9006      	str	r0, [sp, #24]
 800c024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c028:	480a      	ldr	r0, [pc, #40]	; (800c054 <sprintf+0x44>)
 800c02a:	9104      	str	r1, [sp, #16]
 800c02c:	9107      	str	r1, [sp, #28]
 800c02e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c032:	f853 2b04 	ldr.w	r2, [r3], #4
 800c036:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c03a:	6800      	ldr	r0, [r0, #0]
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	a902      	add	r1, sp, #8
 800c040:	f001 f882 	bl	800d148 <_svfprintf_r>
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	2200      	movs	r2, #0
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	b01c      	add	sp, #112	; 0x70
 800c04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c050:	b003      	add	sp, #12
 800c052:	4770      	bx	lr
 800c054:	20010120 	.word	0x20010120

0800c058 <strcasecmp>:
 800c058:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <strcasecmp+0x38>)
 800c05a:	b530      	push	{r4, r5, lr}
 800c05c:	681d      	ldr	r5, [r3, #0]
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	18ea      	adds	r2, r5, r3
 800c064:	7852      	ldrb	r2, [r2, #1]
 800c066:	f002 0203 	and.w	r2, r2, #3
 800c06a:	2a01      	cmp	r2, #1
 800c06c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c070:	eb05 0402 	add.w	r4, r5, r2
 800c074:	bf08      	it	eq
 800c076:	3320      	addeq	r3, #32
 800c078:	7864      	ldrb	r4, [r4, #1]
 800c07a:	f004 0403 	and.w	r4, r4, #3
 800c07e:	2c01      	cmp	r4, #1
 800c080:	bf08      	it	eq
 800c082:	3220      	addeq	r2, #32
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	d101      	bne.n	800c08c <strcasecmp+0x34>
 800c088:	2a00      	cmp	r2, #0
 800c08a:	d1e8      	bne.n	800c05e <strcasecmp+0x6>
 800c08c:	4618      	mov	r0, r3
 800c08e:	bd30      	pop	{r4, r5, pc}
 800c090:	20010534 	.word	0x20010534

0800c094 <strcpy>:
 800c094:	4603      	mov	r3, r0
 800c096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c09a:	f803 2b01 	strb.w	r2, [r3], #1
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	d1f9      	bne.n	800c096 <strcpy+0x2>
 800c0a2:	4770      	bx	lr

0800c0a4 <strncat>:
 800c0a4:	b530      	push	{r4, r5, lr}
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	781c      	ldrb	r4, [r3, #0]
 800c0aa:	1c5d      	adds	r5, r3, #1
 800c0ac:	b144      	cbz	r4, 800c0c0 <strncat+0x1c>
 800c0ae:	462b      	mov	r3, r5
 800c0b0:	e7fa      	b.n	800c0a8 <strncat+0x4>
 800c0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b6:	f803 4b01 	strb.w	r4, [r3], #1
 800c0ba:	b124      	cbz	r4, 800c0c6 <strncat+0x22>
 800c0bc:	b902      	cbnz	r2, 800c0c0 <strncat+0x1c>
 800c0be:	701a      	strb	r2, [r3, #0]
 800c0c0:	f112 32ff 	adds.w	r2, r2, #4294967295
 800c0c4:	d2f5      	bcs.n	800c0b2 <strncat+0xe>
 800c0c6:	bd30      	pop	{r4, r5, pc}

0800c0c8 <strncmp>:
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	b182      	cbz	r2, 800c0ee <strncmp+0x26>
 800c0cc:	1e45      	subs	r5, r0, #1
 800c0ce:	3901      	subs	r1, #1
 800c0d0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800c0d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d106      	bne.n	800c0ea <strncmp+0x22>
 800c0dc:	43ec      	mvns	r4, r5
 800c0de:	4414      	add	r4, r2
 800c0e0:	42e0      	cmn	r0, r4
 800c0e2:	d001      	beq.n	800c0e8 <strncmp+0x20>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f3      	bne.n	800c0d0 <strncmp+0x8>
 800c0e8:	461c      	mov	r4, r3
 800c0ea:	1b18      	subs	r0, r3, r4
 800c0ec:	bd30      	pop	{r4, r5, pc}
 800c0ee:	4610      	mov	r0, r2
 800c0f0:	bd30      	pop	{r4, r5, pc}

0800c0f2 <strncpy>:
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	b142      	cbz	r2, 800c10a <strncpy+0x18>
 800c0f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fc:	f803 4b01 	strb.w	r4, [r3], #1
 800c100:	3a01      	subs	r2, #1
 800c102:	2c00      	cmp	r4, #0
 800c104:	d1f7      	bne.n	800c0f6 <strncpy+0x4>
 800c106:	441a      	add	r2, r3
 800c108:	e000      	b.n	800c10c <strncpy+0x1a>
 800c10a:	bd10      	pop	{r4, pc}
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d002      	beq.n	800c116 <strncpy+0x24>
 800c110:	f803 4b01 	strb.w	r4, [r3], #1
 800c114:	e7fa      	b.n	800c10c <strncpy+0x1a>
 800c116:	bd10      	pop	{r4, pc}

0800c118 <sulp>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	4604      	mov	r4, r0
 800c11c:	460d      	mov	r5, r1
 800c11e:	ec45 4b10 	vmov	d0, r4, r5
 800c122:	4616      	mov	r6, r2
 800c124:	f005 f902 	bl	801132c <__ulp>
 800c128:	ec51 0b10 	vmov	r0, r1, d0
 800c12c:	b17e      	cbz	r6, 800c14e <sulp+0x36>
 800c12e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c132:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c136:	2b00      	cmp	r3, #0
 800c138:	dd09      	ble.n	800c14e <sulp+0x36>
 800c13a:	051b      	lsls	r3, r3, #20
 800c13c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c140:	2400      	movs	r4, #0
 800c142:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c146:	4622      	mov	r2, r4
 800c148:	462b      	mov	r3, r5
 800c14a:	f7f4 fa71 	bl	8000630 <__aeabi_dmul>
 800c14e:	bd70      	pop	{r4, r5, r6, pc}

0800c150 <_strtod_r>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	b09d      	sub	sp, #116	; 0x74
 800c156:	2300      	movs	r3, #0
 800c158:	9002      	str	r0, [sp, #8]
 800c15a:	460c      	mov	r4, r1
 800c15c:	9213      	str	r2, [sp, #76]	; 0x4c
 800c15e:	9318      	str	r3, [sp, #96]	; 0x60
 800c160:	f04f 0a00 	mov.w	sl, #0
 800c164:	f04f 0b00 	mov.w	fp, #0
 800c168:	9117      	str	r1, [sp, #92]	; 0x5c
 800c16a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c16c:	781a      	ldrb	r2, [r3, #0]
 800c16e:	2a0d      	cmp	r2, #13
 800c170:	d805      	bhi.n	800c17e <_strtod_r+0x2e>
 800c172:	2a09      	cmp	r2, #9
 800c174:	d213      	bcs.n	800c19e <_strtod_r+0x4e>
 800c176:	2a00      	cmp	r2, #0
 800c178:	f000 81ac 	beq.w	800c4d4 <_strtod_r+0x384>
 800c17c:	e012      	b.n	800c1a4 <_strtod_r+0x54>
 800c17e:	2a2b      	cmp	r2, #43	; 0x2b
 800c180:	d004      	beq.n	800c18c <_strtod_r+0x3c>
 800c182:	2a2d      	cmp	r2, #45	; 0x2d
 800c184:	d004      	beq.n	800c190 <_strtod_r+0x40>
 800c186:	2a20      	cmp	r2, #32
 800c188:	d10c      	bne.n	800c1a4 <_strtod_r+0x54>
 800c18a:	e008      	b.n	800c19e <_strtod_r+0x4e>
 800c18c:	2200      	movs	r2, #0
 800c18e:	e000      	b.n	800c192 <_strtod_r+0x42>
 800c190:	2201      	movs	r2, #1
 800c192:	920c      	str	r2, [sp, #48]	; 0x30
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	9217      	str	r2, [sp, #92]	; 0x5c
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	b92b      	cbnz	r3, 800c1a8 <_strtod_r+0x58>
 800c19c:	e19a      	b.n	800c4d4 <_strtod_r+0x384>
 800c19e:	3301      	adds	r3, #1
 800c1a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1a2:	e7e2      	b.n	800c16a <_strtod_r+0x1a>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c1a8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c1aa:	782b      	ldrb	r3, [r5, #0]
 800c1ac:	2b30      	cmp	r3, #48	; 0x30
 800c1ae:	d15c      	bne.n	800c26a <_strtod_r+0x11a>
 800c1b0:	786b      	ldrb	r3, [r5, #1]
 800c1b2:	2b58      	cmp	r3, #88	; 0x58
 800c1b4:	d001      	beq.n	800c1ba <_strtod_r+0x6a>
 800c1b6:	2b78      	cmp	r3, #120	; 0x78
 800c1b8:	d14c      	bne.n	800c254 <_strtod_r+0x104>
 800c1ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	ab18      	add	r3, sp, #96	; 0x60
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	4aa9      	ldr	r2, [pc, #676]	; (800c468 <_strtod_r+0x318>)
 800c1c4:	9802      	ldr	r0, [sp, #8]
 800c1c6:	ab19      	add	r3, sp, #100	; 0x64
 800c1c8:	a917      	add	r1, sp, #92	; 0x5c
 800c1ca:	f004 fa84 	bl	80106d6 <__gethex>
 800c1ce:	f010 0607 	ands.w	r6, r0, #7
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	f000 8587 	beq.w	800cce6 <_strtod_r+0xb96>
 800c1d8:	2e06      	cmp	r6, #6
 800c1da:	d105      	bne.n	800c1e8 <_strtod_r+0x98>
 800c1dc:	3501      	adds	r5, #1
 800c1de:	2300      	movs	r3, #0
 800c1e0:	9517      	str	r5, [sp, #92]	; 0x5c
 800c1e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c1e4:	f000 bd7f 	b.w	800cce6 <_strtod_r+0xb96>
 800c1e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c1ea:	b13a      	cbz	r2, 800c1fc <_strtod_r+0xac>
 800c1ec:	2135      	movs	r1, #53	; 0x35
 800c1ee:	a81a      	add	r0, sp, #104	; 0x68
 800c1f0:	f005 f989 	bl	8011506 <__copybits>
 800c1f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1f6:	9802      	ldr	r0, [sp, #8]
 800c1f8:	f004 fe06 	bl	8010e08 <_Bfree>
 800c1fc:	2e06      	cmp	r6, #6
 800c1fe:	d822      	bhi.n	800c246 <_strtod_r+0xf6>
 800c200:	e8df f006 	tbb	[pc, r6]
 800c204:	18080d04 	.word	0x18080d04
 800c208:	0d1d      	.short	0x0d1d
 800c20a:	04          	.byte	0x04
 800c20b:	00          	.byte	0x00
 800c20c:	f04f 0b00 	mov.w	fp, #0
 800c210:	46da      	mov	sl, fp
 800c212:	e018      	b.n	800c246 <_strtod_r+0xf6>
 800c214:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c218:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800c21c:	e013      	b.n	800c246 <_strtod_r+0xf6>
 800c21e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c220:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c222:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c226:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c22a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c22e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c232:	e008      	b.n	800c246 <_strtod_r+0xf6>
 800c234:	f8df b234 	ldr.w	fp, [pc, #564]	; 800c46c <_strtod_r+0x31c>
 800c238:	f04f 0a00 	mov.w	sl, #0
 800c23c:	e003      	b.n	800c246 <_strtod_r+0xf6>
 800c23e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c242:	f04f 3aff 	mov.w	sl, #4294967295
 800c246:	0721      	lsls	r1, r4, #28
 800c248:	f140 854d 	bpl.w	800cce6 <_strtod_r+0xb96>
 800c24c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c250:	f000 bd49 	b.w	800cce6 <_strtod_r+0xb96>
 800c254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	9217      	str	r2, [sp, #92]	; 0x5c
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	2b30      	cmp	r3, #48	; 0x30
 800c25e:	d0f9      	beq.n	800c254 <_strtod_r+0x104>
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 8540 	beq.w	800cce6 <_strtod_r+0xb96>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <_strtod_r+0x11c>
 800c26a:	2300      	movs	r3, #0
 800c26c:	f04f 0800 	mov.w	r8, #0
 800c270:	9306      	str	r3, [sp, #24]
 800c272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c274:	9307      	str	r3, [sp, #28]
 800c276:	f8cd 8014 	str.w	r8, [sp, #20]
 800c27a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c27e:	220a      	movs	r2, #10
 800c280:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c282:	782e      	ldrb	r6, [r5, #0]
 800c284:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c288:	b2d9      	uxtb	r1, r3
 800c28a:	2909      	cmp	r1, #9
 800c28c:	d80e      	bhi.n	800c2ac <_strtod_r+0x15c>
 800c28e:	9904      	ldr	r1, [sp, #16]
 800c290:	2908      	cmp	r1, #8
 800c292:	bfdd      	ittte	le
 800c294:	9905      	ldrle	r1, [sp, #20]
 800c296:	fb02 3301 	mlale	r3, r2, r1, r3
 800c29a:	9305      	strle	r3, [sp, #20]
 800c29c:	fb02 3808 	mlagt	r8, r2, r8, r3
 800c2a0:	9b04      	ldr	r3, [sp, #16]
 800c2a2:	3501      	adds	r5, #1
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	9304      	str	r3, [sp, #16]
 800c2a8:	9517      	str	r5, [sp, #92]	; 0x5c
 800c2aa:	e7e9      	b.n	800c280 <_strtod_r+0x130>
 800c2ac:	9802      	ldr	r0, [sp, #8]
 800c2ae:	f004 fcef 	bl	8010c90 <_localeconv_r>
 800c2b2:	6807      	ldr	r7, [r0, #0]
 800c2b4:	9802      	ldr	r0, [sp, #8]
 800c2b6:	f004 fceb 	bl	8010c90 <_localeconv_r>
 800c2ba:	6800      	ldr	r0, [r0, #0]
 800c2bc:	f7f3 ffa8 	bl	8000210 <strlen>
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	f7ff feff 	bl	800c0c8 <strncmp>
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	b128      	cbz	r0, 800c2da <_strtod_r+0x18a>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	4633      	mov	r3, r6
 800c2d2:	9d04      	ldr	r5, [sp, #16]
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	e057      	b.n	800c38a <_strtod_r+0x23a>
 800c2da:	9802      	ldr	r0, [sp, #8]
 800c2dc:	f004 fcd8 	bl	8010c90 <_localeconv_r>
 800c2e0:	6800      	ldr	r0, [r0, #0]
 800c2e2:	f7f3 ff95 	bl	8000210 <strlen>
 800c2e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2e8:	181a      	adds	r2, r3, r0
 800c2ea:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2ec:	9a04      	ldr	r2, [sp, #16]
 800c2ee:	5c1b      	ldrb	r3, [r3, r0]
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d142      	bne.n	800c37a <_strtod_r+0x22a>
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	2b30      	cmp	r3, #48	; 0x30
 800c2f8:	d105      	bne.n	800c306 <_strtod_r+0x1b6>
 800c2fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2fc:	1c5a      	adds	r2, r3, #1
 800c2fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800c300:	3001      	adds	r0, #1
 800c302:	785b      	ldrb	r3, [r3, #1]
 800c304:	e7f7      	b.n	800c2f6 <_strtod_r+0x1a6>
 800c306:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c30a:	2a08      	cmp	r2, #8
 800c30c:	d843      	bhi.n	800c396 <_strtod_r+0x246>
 800c30e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c310:	9207      	str	r2, [sp, #28]
 800c312:	4602      	mov	r2, r0
 800c314:	2000      	movs	r0, #0
 800c316:	4605      	mov	r5, r0
 800c318:	3b30      	subs	r3, #48	; 0x30
 800c31a:	f100 0101 	add.w	r1, r0, #1
 800c31e:	d026      	beq.n	800c36e <_strtod_r+0x21e>
 800c320:	440a      	add	r2, r1
 800c322:	eb05 0c00 	add.w	ip, r5, r0
 800c326:	4629      	mov	r1, r5
 800c328:	260a      	movs	r6, #10
 800c32a:	4561      	cmp	r1, ip
 800c32c:	d00e      	beq.n	800c34c <_strtod_r+0x1fc>
 800c32e:	3101      	adds	r1, #1
 800c330:	f101 3eff 	add.w	lr, r1, #4294967295
 800c334:	f1be 0f08 	cmp.w	lr, #8
 800c338:	dc03      	bgt.n	800c342 <_strtod_r+0x1f2>
 800c33a:	9f05      	ldr	r7, [sp, #20]
 800c33c:	4377      	muls	r7, r6
 800c33e:	9705      	str	r7, [sp, #20]
 800c340:	e7f3      	b.n	800c32a <_strtod_r+0x1da>
 800c342:	2910      	cmp	r1, #16
 800c344:	bfd8      	it	le
 800c346:	fb06 f808 	mulle.w	r8, r6, r8
 800c34a:	e7ee      	b.n	800c32a <_strtod_r+0x1da>
 800c34c:	4428      	add	r0, r5
 800c34e:	2808      	cmp	r0, #8
 800c350:	f100 0501 	add.w	r5, r0, #1
 800c354:	dc05      	bgt.n	800c362 <_strtod_r+0x212>
 800c356:	9805      	ldr	r0, [sp, #20]
 800c358:	210a      	movs	r1, #10
 800c35a:	fb01 3300 	mla	r3, r1, r0, r3
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	e004      	b.n	800c36c <_strtod_r+0x21c>
 800c362:	2d10      	cmp	r5, #16
 800c364:	bfdc      	itt	le
 800c366:	210a      	movle	r1, #10
 800c368:	fb01 3808 	mlale	r8, r1, r8, r3
 800c36c:	2100      	movs	r1, #0
 800c36e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c370:	1c58      	adds	r0, r3, #1
 800c372:	9017      	str	r0, [sp, #92]	; 0x5c
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	4608      	mov	r0, r1
 800c378:	e002      	b.n	800c380 <_strtod_r+0x230>
 800c37a:	9d04      	ldr	r5, [sp, #16]
 800c37c:	4638      	mov	r0, r7
 800c37e:	463a      	mov	r2, r7
 800c380:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c384:	2909      	cmp	r1, #9
 800c386:	d9c7      	bls.n	800c318 <_strtod_r+0x1c8>
 800c388:	2101      	movs	r1, #1
 800c38a:	2b65      	cmp	r3, #101	; 0x65
 800c38c:	d001      	beq.n	800c392 <_strtod_r+0x242>
 800c38e:	2b45      	cmp	r3, #69	; 0x45
 800c390:	d151      	bne.n	800c436 <_strtod_r+0x2e6>
 800c392:	b96d      	cbnz	r5, 800c3b0 <_strtod_r+0x260>
 800c394:	e004      	b.n	800c3a0 <_strtod_r+0x250>
 800c396:	2b65      	cmp	r3, #101	; 0x65
 800c398:	f040 84b3 	bne.w	800cd02 <_strtod_r+0xbb2>
 800c39c:	2200      	movs	r2, #0
 800c39e:	2101      	movs	r1, #1
 800c3a0:	b928      	cbnz	r0, 800c3ae <_strtod_r+0x25e>
 800c3a2:	9b06      	ldr	r3, [sp, #24]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 8095 	beq.w	800c4d4 <_strtod_r+0x384>
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	e000      	b.n	800c3b0 <_strtod_r+0x260>
 800c3ae:	2500      	movs	r5, #0
 800c3b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c3b2:	1c63      	adds	r3, r4, #1
 800c3b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3b6:	7863      	ldrb	r3, [r4, #1]
 800c3b8:	2b2b      	cmp	r3, #43	; 0x2b
 800c3ba:	d006      	beq.n	800c3ca <_strtod_r+0x27a>
 800c3bc:	2b2d      	cmp	r3, #45	; 0x2d
 800c3be:	d002      	beq.n	800c3c6 <_strtod_r+0x276>
 800c3c0:	2600      	movs	r6, #0
 800c3c2:	9603      	str	r6, [sp, #12]
 800c3c4:	e006      	b.n	800c3d4 <_strtod_r+0x284>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e000      	b.n	800c3cc <_strtod_r+0x27c>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9303      	str	r3, [sp, #12]
 800c3ce:	1ca3      	adds	r3, r4, #2
 800c3d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3d2:	78a3      	ldrb	r3, [r4, #2]
 800c3d4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c3d8:	2e09      	cmp	r6, #9
 800c3da:	d82b      	bhi.n	800c434 <_strtod_r+0x2e4>
 800c3dc:	2b30      	cmp	r3, #48	; 0x30
 800c3de:	d104      	bne.n	800c3ea <_strtod_r+0x29a>
 800c3e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3e2:	1c5e      	adds	r6, r3, #1
 800c3e4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	e7f8      	b.n	800c3dc <_strtod_r+0x28c>
 800c3ea:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800c3ee:	2e08      	cmp	r6, #8
 800c3f0:	d821      	bhi.n	800c436 <_strtod_r+0x2e6>
 800c3f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c3f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3f8:	f04f 0c0a 	mov.w	ip, #10
 800c3fc:	461f      	mov	r7, r3
 800c3fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c400:	1c5e      	adds	r6, r3, #1
 800c402:	9617      	str	r6, [sp, #92]	; 0x5c
 800c404:	785b      	ldrb	r3, [r3, #1]
 800c406:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800c40a:	f1b9 0f09 	cmp.w	r9, #9
 800c40e:	d804      	bhi.n	800c41a <_strtod_r+0x2ca>
 800c410:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800c414:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c418:	e7f1      	b.n	800c3fe <_strtod_r+0x2ae>
 800c41a:	1bf6      	subs	r6, r6, r7
 800c41c:	2e08      	cmp	r6, #8
 800c41e:	f644 691f 	movw	r9, #19999	; 0x4e1f
 800c422:	dc02      	bgt.n	800c42a <_strtod_r+0x2da>
 800c424:	45f1      	cmp	r9, lr
 800c426:	bfa8      	it	ge
 800c428:	46f1      	movge	r9, lr
 800c42a:	9e03      	ldr	r6, [sp, #12]
 800c42c:	b12e      	cbz	r6, 800c43a <_strtod_r+0x2ea>
 800c42e:	f1c9 0900 	rsb	r9, r9, #0
 800c432:	e002      	b.n	800c43a <_strtod_r+0x2ea>
 800c434:	9417      	str	r4, [sp, #92]	; 0x5c
 800c436:	f04f 0900 	mov.w	r9, #0
 800c43a:	2d00      	cmp	r5, #0
 800c43c:	d153      	bne.n	800c4e6 <_strtod_r+0x396>
 800c43e:	2800      	cmp	r0, #0
 800c440:	f040 8451 	bne.w	800cce6 <_strtod_r+0xb96>
 800c444:	9a06      	ldr	r2, [sp, #24]
 800c446:	2a00      	cmp	r2, #0
 800c448:	f040 844d 	bne.w	800cce6 <_strtod_r+0xb96>
 800c44c:	2900      	cmp	r1, #0
 800c44e:	d141      	bne.n	800c4d4 <_strtod_r+0x384>
 800c450:	2b4e      	cmp	r3, #78	; 0x4e
 800c452:	d020      	beq.n	800c496 <_strtod_r+0x346>
 800c454:	dc02      	bgt.n	800c45c <_strtod_r+0x30c>
 800c456:	2b49      	cmp	r3, #73	; 0x49
 800c458:	d00a      	beq.n	800c470 <_strtod_r+0x320>
 800c45a:	e03b      	b.n	800c4d4 <_strtod_r+0x384>
 800c45c:	2b69      	cmp	r3, #105	; 0x69
 800c45e:	d007      	beq.n	800c470 <_strtod_r+0x320>
 800c460:	2b6e      	cmp	r3, #110	; 0x6e
 800c462:	d018      	beq.n	800c496 <_strtod_r+0x346>
 800c464:	e036      	b.n	800c4d4 <_strtod_r+0x384>
 800c466:	bf00      	nop
 800c468:	08015318 	.word	0x08015318
 800c46c:	7ff00000 	.word	0x7ff00000
 800c470:	49a8      	ldr	r1, [pc, #672]	; (800c714 <_strtod_r+0x5c4>)
 800c472:	a817      	add	r0, sp, #92	; 0x5c
 800c474:	f004 fb60 	bl	8010b38 <__match>
 800c478:	b360      	cbz	r0, 800c4d4 <_strtod_r+0x384>
 800c47a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c47c:	49a6      	ldr	r1, [pc, #664]	; (800c718 <_strtod_r+0x5c8>)
 800c47e:	3b01      	subs	r3, #1
 800c480:	a817      	add	r0, sp, #92	; 0x5c
 800c482:	9317      	str	r3, [sp, #92]	; 0x5c
 800c484:	f004 fb58 	bl	8010b38 <__match>
 800c488:	b910      	cbnz	r0, 800c490 <_strtod_r+0x340>
 800c48a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c48c:	3301      	adds	r3, #1
 800c48e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c490:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 800c734 <_strtod_r+0x5e4>
 800c494:	e01a      	b.n	800c4cc <_strtod_r+0x37c>
 800c496:	49a1      	ldr	r1, [pc, #644]	; (800c71c <_strtod_r+0x5cc>)
 800c498:	a817      	add	r0, sp, #92	; 0x5c
 800c49a:	f004 fb4d 	bl	8010b38 <__match>
 800c49e:	b1c8      	cbz	r0, 800c4d4 <_strtod_r+0x384>
 800c4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b28      	cmp	r3, #40	; 0x28
 800c4a6:	d10f      	bne.n	800c4c8 <_strtod_r+0x378>
 800c4a8:	aa1a      	add	r2, sp, #104	; 0x68
 800c4aa:	499d      	ldr	r1, [pc, #628]	; (800c720 <_strtod_r+0x5d0>)
 800c4ac:	a817      	add	r0, sp, #92	; 0x5c
 800c4ae:	f004 fb56 	bl	8010b5e <__hexnan>
 800c4b2:	2805      	cmp	r0, #5
 800c4b4:	d108      	bne.n	800c4c8 <_strtod_r+0x378>
 800c4b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c4bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c4c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c4c4:	f000 bc0f 	b.w	800cce6 <_strtod_r+0xb96>
 800c4c8:	f8df b26c 	ldr.w	fp, [pc, #620]	; 800c738 <_strtod_r+0x5e8>
 800c4cc:	f04f 0a00 	mov.w	sl, #0
 800c4d0:	f000 bc09 	b.w	800cce6 <_strtod_r+0xb96>
 800c4d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4d6:	9417      	str	r4, [sp, #92]	; 0x5c
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 840f 	beq.w	800ccfc <_strtod_r+0xbac>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	930c      	str	r3, [sp, #48]	; 0x30
 800c4e2:	f000 bc02 	b.w	800ccea <_strtod_r+0xb9a>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	9805      	ldr	r0, [sp, #20]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	bf08      	it	eq
 800c4ee:	462b      	moveq	r3, r5
 800c4f0:	2d10      	cmp	r5, #16
 800c4f2:	462c      	mov	r4, r5
 800c4f4:	ebc2 0909 	rsb	r9, r2, r9
 800c4f8:	bfa8      	it	ge
 800c4fa:	2410      	movge	r4, #16
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	f7f4 f821 	bl	8000544 <__aeabi_ui2d>
 800c502:	2c09      	cmp	r4, #9
 800c504:	4682      	mov	sl, r0
 800c506:	468b      	mov	fp, r1
 800c508:	dd13      	ble.n	800c532 <_strtod_r+0x3e2>
 800c50a:	4b86      	ldr	r3, [pc, #536]	; (800c724 <_strtod_r+0x5d4>)
 800c50c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c510:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c514:	f7f4 f88c 	bl	8000630 <__aeabi_dmul>
 800c518:	4606      	mov	r6, r0
 800c51a:	4640      	mov	r0, r8
 800c51c:	460f      	mov	r7, r1
 800c51e:	f7f4 f811 	bl	8000544 <__aeabi_ui2d>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4630      	mov	r0, r6
 800c528:	4639      	mov	r1, r7
 800c52a:	f7f3 fecf 	bl	80002cc <__adddf3>
 800c52e:	4682      	mov	sl, r0
 800c530:	468b      	mov	fp, r1
 800c532:	2d0f      	cmp	r5, #15
 800c534:	dc36      	bgt.n	800c5a4 <_strtod_r+0x454>
 800c536:	f1b9 0f00 	cmp.w	r9, #0
 800c53a:	f000 83d4 	beq.w	800cce6 <_strtod_r+0xb96>
 800c53e:	dd24      	ble.n	800c58a <_strtod_r+0x43a>
 800c540:	f1b9 0f16 	cmp.w	r9, #22
 800c544:	dc07      	bgt.n	800c556 <_strtod_r+0x406>
 800c546:	4d77      	ldr	r5, [pc, #476]	; (800c724 <_strtod_r+0x5d4>)
 800c548:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800c54c:	4652      	mov	r2, sl
 800c54e:	465b      	mov	r3, fp
 800c550:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c554:	e014      	b.n	800c580 <_strtod_r+0x430>
 800c556:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c55a:	4599      	cmp	r9, r3
 800c55c:	dc22      	bgt.n	800c5a4 <_strtod_r+0x454>
 800c55e:	4c71      	ldr	r4, [pc, #452]	; (800c724 <_strtod_r+0x5d4>)
 800c560:	f1c5 050f 	rsb	r5, r5, #15
 800c564:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c568:	ebc5 0509 	rsb	r5, r5, r9
 800c56c:	4652      	mov	r2, sl
 800c56e:	465b      	mov	r3, fp
 800c570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c574:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c578:	f7f4 f85a 	bl	8000630 <__aeabi_dmul>
 800c57c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c580:	f7f4 f856 	bl	8000630 <__aeabi_dmul>
 800c584:	4682      	mov	sl, r0
 800c586:	468b      	mov	fp, r1
 800c588:	e3ad      	b.n	800cce6 <_strtod_r+0xb96>
 800c58a:	f119 0f16 	cmn.w	r9, #22
 800c58e:	db09      	blt.n	800c5a4 <_strtod_r+0x454>
 800c590:	4d64      	ldr	r5, [pc, #400]	; (800c724 <_strtod_r+0x5d4>)
 800c592:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 800c596:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c59a:	4650      	mov	r0, sl
 800c59c:	4659      	mov	r1, fp
 800c59e:	f7f4 f971 	bl	8000884 <__aeabi_ddiv>
 800c5a2:	e7ef      	b.n	800c584 <_strtod_r+0x434>
 800c5a4:	1b2c      	subs	r4, r5, r4
 800c5a6:	444c      	add	r4, r9
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	dd57      	ble.n	800c65c <_strtod_r+0x50c>
 800c5ac:	f014 010f 	ands.w	r1, r4, #15
 800c5b0:	d00a      	beq.n	800c5c8 <_strtod_r+0x478>
 800c5b2:	4b5c      	ldr	r3, [pc, #368]	; (800c724 <_strtod_r+0x5d4>)
 800c5b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c5b8:	4652      	mov	r2, sl
 800c5ba:	465b      	mov	r3, fp
 800c5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c0:	f7f4 f836 	bl	8000630 <__aeabi_dmul>
 800c5c4:	4682      	mov	sl, r0
 800c5c6:	468b      	mov	fp, r1
 800c5c8:	f034 040f 	bics.w	r4, r4, #15
 800c5cc:	f000 80b8 	beq.w	800c740 <_strtod_r+0x5f0>
 800c5d0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800c5d4:	dd0b      	ble.n	800c5ee <_strtod_r+0x49e>
 800c5d6:	2400      	movs	r4, #0
 800c5d8:	4625      	mov	r5, r4
 800c5da:	9405      	str	r4, [sp, #20]
 800c5dc:	9404      	str	r4, [sp, #16]
 800c5de:	9a02      	ldr	r2, [sp, #8]
 800c5e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 800c734 <_strtod_r+0x5e4>
 800c5e4:	2322      	movs	r3, #34	; 0x22
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	f04f 0a00 	mov.w	sl, #0
 800c5ec:	e187      	b.n	800c8fe <_strtod_r+0x7ae>
 800c5ee:	4e4e      	ldr	r6, [pc, #312]	; (800c728 <_strtod_r+0x5d8>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	1124      	asrs	r4, r4, #4
 800c5f4:	4650      	mov	r0, sl
 800c5f6:	4659      	mov	r1, fp
 800c5f8:	4698      	mov	r8, r3
 800c5fa:	4637      	mov	r7, r6
 800c5fc:	2c01      	cmp	r4, #1
 800c5fe:	dd0b      	ble.n	800c618 <_strtod_r+0x4c8>
 800c600:	07e2      	lsls	r2, r4, #31
 800c602:	d504      	bpl.n	800c60e <_strtod_r+0x4be>
 800c604:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c608:	f7f4 f812 	bl	8000630 <__aeabi_dmul>
 800c60c:	2301      	movs	r3, #1
 800c60e:	f108 0801 	add.w	r8, r8, #1
 800c612:	1064      	asrs	r4, r4, #1
 800c614:	3608      	adds	r6, #8
 800c616:	e7f1      	b.n	800c5fc <_strtod_r+0x4ac>
 800c618:	b10b      	cbz	r3, 800c61e <_strtod_r+0x4ce>
 800c61a:	4682      	mov	sl, r0
 800c61c:	468b      	mov	fp, r1
 800c61e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c622:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800c626:	4652      	mov	r2, sl
 800c628:	465b      	mov	r3, fp
 800c62a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c62e:	f7f3 ffff 	bl	8000630 <__aeabi_dmul>
 800c632:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c636:	468b      	mov	fp, r1
 800c638:	460a      	mov	r2, r1
 800c63a:	0d1b      	lsrs	r3, r3, #20
 800c63c:	493b      	ldr	r1, [pc, #236]	; (800c72c <_strtod_r+0x5dc>)
 800c63e:	051b      	lsls	r3, r3, #20
 800c640:	428b      	cmp	r3, r1
 800c642:	4682      	mov	sl, r0
 800c644:	d8c7      	bhi.n	800c5d6 <_strtod_r+0x486>
 800c646:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c64a:	428b      	cmp	r3, r1
 800c64c:	bf86      	itte	hi
 800c64e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 800c73c <_strtod_r+0x5ec>
 800c652:	f04f 3aff 	movhi.w	sl, #4294967295
 800c656:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c65a:	e071      	b.n	800c740 <_strtod_r+0x5f0>
 800c65c:	d070      	beq.n	800c740 <_strtod_r+0x5f0>
 800c65e:	4264      	negs	r4, r4
 800c660:	f014 020f 	ands.w	r2, r4, #15
 800c664:	d00a      	beq.n	800c67c <_strtod_r+0x52c>
 800c666:	4b2f      	ldr	r3, [pc, #188]	; (800c724 <_strtod_r+0x5d4>)
 800c668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c66c:	4650      	mov	r0, sl
 800c66e:	4659      	mov	r1, fp
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f4 f906 	bl	8000884 <__aeabi_ddiv>
 800c678:	4682      	mov	sl, r0
 800c67a:	468b      	mov	fp, r1
 800c67c:	1124      	asrs	r4, r4, #4
 800c67e:	d05f      	beq.n	800c740 <_strtod_r+0x5f0>
 800c680:	2c1f      	cmp	r4, #31
 800c682:	dd04      	ble.n	800c68e <_strtod_r+0x53e>
 800c684:	2400      	movs	r4, #0
 800c686:	4625      	mov	r5, r4
 800c688:	9405      	str	r4, [sp, #20]
 800c68a:	9404      	str	r4, [sp, #16]
 800c68c:	e130      	b.n	800c8f0 <_strtod_r+0x7a0>
 800c68e:	f014 0f10 	tst.w	r4, #16
 800c692:	bf0c      	ite	eq
 800c694:	2300      	moveq	r3, #0
 800c696:	236a      	movne	r3, #106	; 0x6a
 800c698:	4e25      	ldr	r6, [pc, #148]	; (800c730 <_strtod_r+0x5e0>)
 800c69a:	9303      	str	r3, [sp, #12]
 800c69c:	4650      	mov	r0, sl
 800c69e:	4659      	mov	r1, fp
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2c00      	cmp	r4, #0
 800c6a4:	dd09      	ble.n	800c6ba <_strtod_r+0x56a>
 800c6a6:	07e2      	lsls	r2, r4, #31
 800c6a8:	d504      	bpl.n	800c6b4 <_strtod_r+0x564>
 800c6aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6ae:	f7f3 ffbf 	bl	8000630 <__aeabi_dmul>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	1064      	asrs	r4, r4, #1
 800c6b6:	3608      	adds	r6, #8
 800c6b8:	e7f3      	b.n	800c6a2 <_strtod_r+0x552>
 800c6ba:	b10b      	cbz	r3, 800c6c0 <_strtod_r+0x570>
 800c6bc:	4682      	mov	sl, r0
 800c6be:	468b      	mov	fp, r1
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	b1eb      	cbz	r3, 800c700 <_strtod_r+0x5b0>
 800c6c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c6c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	4659      	mov	r1, fp
 800c6d0:	dd16      	ble.n	800c700 <_strtod_r+0x5b0>
 800c6d2:	2b1f      	cmp	r3, #31
 800c6d4:	dd0e      	ble.n	800c6f4 <_strtod_r+0x5a4>
 800c6d6:	2b34      	cmp	r3, #52	; 0x34
 800c6d8:	bfde      	ittt	le
 800c6da:	3b20      	suble	r3, #32
 800c6dc:	f04f 32ff 	movle.w	r2, #4294967295
 800c6e0:	fa02 f303 	lslle.w	r3, r2, r3
 800c6e4:	f04f 0a00 	mov.w	sl, #0
 800c6e8:	bfcc      	ite	gt
 800c6ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c6ee:	ea03 0b01 	andle.w	fp, r3, r1
 800c6f2:	e005      	b.n	800c700 <_strtod_r+0x5b0>
 800c6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800c700:	2200      	movs	r2, #0
 800c702:	2300      	movs	r3, #0
 800c704:	4650      	mov	r0, sl
 800c706:	4659      	mov	r1, fp
 800c708:	f7f4 f9fa 	bl	8000b00 <__aeabi_dcmpeq>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d1b9      	bne.n	800c684 <_strtod_r+0x534>
 800c710:	e018      	b.n	800c744 <_strtod_r+0x5f4>
 800c712:	bf00      	nop
 800c714:	0801537d 	.word	0x0801537d
 800c718:	080154e0 	.word	0x080154e0
 800c71c:	08015385 	.word	0x08015385
 800c720:	0801532c 	.word	0x0801532c
 800c724:	08015558 	.word	0x08015558
 800c728:	08015620 	.word	0x08015620
 800c72c:	7ca00000 	.word	0x7ca00000
 800c730:	08015340 	.word	0x08015340
 800c734:	7ff00000 	.word	0x7ff00000
 800c738:	fff80000 	.word	0xfff80000
 800c73c:	7fefffff 	.word	0x7fefffff
 800c740:	2300      	movs	r3, #0
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	9b05      	ldr	r3, [sp, #20]
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	9a04      	ldr	r2, [sp, #16]
 800c74a:	9907      	ldr	r1, [sp, #28]
 800c74c:	9802      	ldr	r0, [sp, #8]
 800c74e:	462b      	mov	r3, r5
 800c750:	f004 fbac 	bl	8010eac <__s2b>
 800c754:	9005      	str	r0, [sp, #20]
 800c756:	2800      	cmp	r0, #0
 800c758:	f43f af3d 	beq.w	800c5d6 <_strtod_r+0x486>
 800c75c:	f1b9 0f00 	cmp.w	r9, #0
 800c760:	f1c9 0300 	rsb	r3, r9, #0
 800c764:	bfa8      	it	ge
 800c766:	2300      	movge	r3, #0
 800c768:	930d      	str	r3, [sp, #52]	; 0x34
 800c76a:	2400      	movs	r4, #0
 800c76c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800c770:	9312      	str	r3, [sp, #72]	; 0x48
 800c772:	4625      	mov	r5, r4
 800c774:	9b05      	ldr	r3, [sp, #20]
 800c776:	9802      	ldr	r0, [sp, #8]
 800c778:	6859      	ldr	r1, [r3, #4]
 800c77a:	f004 fb10 	bl	8010d9e <_Balloc>
 800c77e:	9004      	str	r0, [sp, #16]
 800c780:	2800      	cmp	r0, #0
 800c782:	f43f af2c 	beq.w	800c5de <_strtod_r+0x48e>
 800c786:	9b05      	ldr	r3, [sp, #20]
 800c788:	691a      	ldr	r2, [r3, #16]
 800c78a:	3202      	adds	r2, #2
 800c78c:	f103 010c 	add.w	r1, r3, #12
 800c790:	0092      	lsls	r2, r2, #2
 800c792:	300c      	adds	r0, #12
 800c794:	f7ff fb78 	bl	800be88 <memcpy>
 800c798:	aa1a      	add	r2, sp, #104	; 0x68
 800c79a:	a919      	add	r1, sp, #100	; 0x64
 800c79c:	ec4b ab10 	vmov	d0, sl, fp
 800c7a0:	9802      	ldr	r0, [sp, #8]
 800c7a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c7a6:	f004 fe36 	bl	8011416 <__d2b>
 800c7aa:	9018      	str	r0, [sp, #96]	; 0x60
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	f43f af16 	beq.w	800c5de <_strtod_r+0x48e>
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	9802      	ldr	r0, [sp, #8]
 800c7b6:	f004 fc04 	bl	8010fc2 <__i2b>
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f43f af0e 	beq.w	800c5de <_strtod_r+0x48e>
 800c7c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7c4:	9903      	ldr	r1, [sp, #12]
 800c7c6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bfad      	iteet	ge
 800c7cc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 800c7ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c7d0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 800c7d4:	eb02 0803 	addge.w	r8, r2, r3
 800c7d8:	bfb8      	it	lt
 800c7da:	1ad2      	sublt	r2, r2, r3
 800c7dc:	eba3 0301 	sub.w	r3, r3, r1
 800c7e0:	4433      	add	r3, r6
 800c7e2:	49b5      	ldr	r1, [pc, #724]	; (800cab8 <_strtod_r+0x968>)
 800c7e4:	bfa8      	it	ge
 800c7e6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	428b      	cmp	r3, r1
 800c7ec:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 800c7f0:	f280 808a 	bge.w	800c908 <_strtod_r+0x7b8>
 800c7f4:	1ac9      	subs	r1, r1, r3
 800c7f6:	291f      	cmp	r1, #31
 800c7f8:	bfc8      	it	gt
 800c7fa:	4fb0      	ldrgt	r7, [pc, #704]	; (800cabc <_strtod_r+0x96c>)
 800c7fc:	f04f 0901 	mov.w	r9, #1
 800c800:	bfd4      	ite	le
 800c802:	fa09 f301 	lslle.w	r3, r9, r1
 800c806:	1aff      	subgt	r7, r7, r3
 800c808:	eba6 0601 	sub.w	r6, r6, r1
 800c80c:	bfd9      	ittee	le
 800c80e:	9306      	strle	r3, [sp, #24]
 800c810:	2700      	movle	r7, #0
 800c812:	fa09 f707 	lslgt.w	r7, r9, r7
 800c816:	f8cd 9018 	strgt.w	r9, [sp, #24]
 800c81a:	eb08 0906 	add.w	r9, r8, r6
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	45c8      	cmp	r8, r9
 800c822:	4416      	add	r6, r2
 800c824:	441e      	add	r6, r3
 800c826:	4643      	mov	r3, r8
 800c828:	bfa8      	it	ge
 800c82a:	464b      	movge	r3, r9
 800c82c:	42b3      	cmp	r3, r6
 800c82e:	bfa8      	it	ge
 800c830:	4633      	movge	r3, r6
 800c832:	2b00      	cmp	r3, #0
 800c834:	bfc2      	ittt	gt
 800c836:	ebc3 0909 	rsbgt	r9, r3, r9
 800c83a:	1af6      	subgt	r6, r6, r3
 800c83c:	ebc3 0808 	rsbgt	r8, r3, r8
 800c840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c842:	2b00      	cmp	r3, #0
 800c844:	d164      	bne.n	800c910 <_strtod_r+0x7c0>
 800c846:	f1b9 0f00 	cmp.w	r9, #0
 800c84a:	dc7a      	bgt.n	800c942 <_strtod_r+0x7f2>
 800c84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f040 8081 	bne.w	800c956 <_strtod_r+0x806>
 800c854:	2e00      	cmp	r6, #0
 800c856:	f300 8088 	bgt.w	800c96a <_strtod_r+0x81a>
 800c85a:	f1b8 0f00 	cmp.w	r8, #0
 800c85e:	f300 808e 	bgt.w	800c97e <_strtod_r+0x82e>
 800c862:	9a04      	ldr	r2, [sp, #16]
 800c864:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c866:	9802      	ldr	r0, [sp, #8]
 800c868:	f004 fd01 	bl	801126e <__mdiff>
 800c86c:	4604      	mov	r4, r0
 800c86e:	2800      	cmp	r0, #0
 800c870:	f43f aeb5 	beq.w	800c5de <_strtod_r+0x48e>
 800c874:	68c3      	ldr	r3, [r0, #12]
 800c876:	9307      	str	r3, [sp, #28]
 800c878:	2300      	movs	r3, #0
 800c87a:	60c3      	str	r3, [r0, #12]
 800c87c:	4629      	mov	r1, r5
 800c87e:	f004 fcda 	bl	8011236 <__mcmp>
 800c882:	2800      	cmp	r0, #0
 800c884:	f280 8089 	bge.w	800c99a <_strtod_r+0x84a>
 800c888:	9b07      	ldr	r3, [sp, #28]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 8204 	bne.w	800cc98 <_strtod_r+0xb48>
 800c890:	f1ba 0f00 	cmp.w	sl, #0
 800c894:	f040 8200 	bne.w	800cc98 <_strtod_r+0xb48>
 800c898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f040 81fb 	bne.w	800cc98 <_strtod_r+0xb48>
 800c8a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8a6:	0d1b      	lsrs	r3, r3, #20
 800c8a8:	051b      	lsls	r3, r3, #20
 800c8aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c8ae:	f240 81f3 	bls.w	800cc98 <_strtod_r+0xb48>
 800c8b2:	6963      	ldr	r3, [r4, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d06c      	beq.n	800c992 <_strtod_r+0x842>
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	9802      	ldr	r0, [sp, #8]
 800c8be:	f004 fc69 	bl	8011194 <__lshift>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	f004 fcb6 	bl	8011236 <__mcmp>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	f340 81e4 	ble.w	800cc98 <_strtod_r+0xb48>
 800c8d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8d4:	9a03      	ldr	r2, [sp, #12]
 800c8d6:	0d1b      	lsrs	r3, r3, #20
 800c8d8:	051b      	lsls	r3, r3, #20
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	f000 808c 	beq.w	800c9f8 <_strtod_r+0x8a8>
 800c8e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c8e4:	f300 8088 	bgt.w	800c9f8 <_strtod_r+0x8a8>
 800c8e8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800c8ec:	f300 81d6 	bgt.w	800cc9c <_strtod_r+0xb4c>
 800c8f0:	9a02      	ldr	r2, [sp, #8]
 800c8f2:	2322      	movs	r3, #34	; 0x22
 800c8f4:	f04f 0a00 	mov.w	sl, #0
 800c8f8:	f04f 0b00 	mov.w	fp, #0
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	9b05      	ldr	r3, [sp, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	f040 81dc 	bne.w	800ccbe <_strtod_r+0xb6e>
 800c906:	e1ee      	b.n	800cce6 <_strtod_r+0xb96>
 800c908:	2301      	movs	r3, #1
 800c90a:	2700      	movs	r7, #0
 800c90c:	9306      	str	r3, [sp, #24]
 800c90e:	e784      	b.n	800c81a <_strtod_r+0x6ca>
 800c910:	4629      	mov	r1, r5
 800c912:	461a      	mov	r2, r3
 800c914:	9802      	ldr	r0, [sp, #8]
 800c916:	f004 fbef 	bl	80110f8 <__pow5mult>
 800c91a:	4605      	mov	r5, r0
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f43f ae5e 	beq.w	800c5de <_strtod_r+0x48e>
 800c922:	4601      	mov	r1, r0
 800c924:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c926:	9802      	ldr	r0, [sp, #8]
 800c928:	f004 fb54 	bl	8010fd4 <__multiply>
 800c92c:	9007      	str	r0, [sp, #28]
 800c92e:	2800      	cmp	r0, #0
 800c930:	f43f ae55 	beq.w	800c5de <_strtod_r+0x48e>
 800c934:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c936:	9802      	ldr	r0, [sp, #8]
 800c938:	f004 fa66 	bl	8010e08 <_Bfree>
 800c93c:	9b07      	ldr	r3, [sp, #28]
 800c93e:	9318      	str	r3, [sp, #96]	; 0x60
 800c940:	e781      	b.n	800c846 <_strtod_r+0x6f6>
 800c942:	464a      	mov	r2, r9
 800c944:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c946:	9802      	ldr	r0, [sp, #8]
 800c948:	f004 fc24 	bl	8011194 <__lshift>
 800c94c:	9018      	str	r0, [sp, #96]	; 0x60
 800c94e:	2800      	cmp	r0, #0
 800c950:	f47f af7c 	bne.w	800c84c <_strtod_r+0x6fc>
 800c954:	e643      	b.n	800c5de <_strtod_r+0x48e>
 800c956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c958:	9904      	ldr	r1, [sp, #16]
 800c95a:	9802      	ldr	r0, [sp, #8]
 800c95c:	f004 fbcc 	bl	80110f8 <__pow5mult>
 800c960:	9004      	str	r0, [sp, #16]
 800c962:	2800      	cmp	r0, #0
 800c964:	f47f af76 	bne.w	800c854 <_strtod_r+0x704>
 800c968:	e639      	b.n	800c5de <_strtod_r+0x48e>
 800c96a:	4632      	mov	r2, r6
 800c96c:	9904      	ldr	r1, [sp, #16]
 800c96e:	9802      	ldr	r0, [sp, #8]
 800c970:	f004 fc10 	bl	8011194 <__lshift>
 800c974:	9004      	str	r0, [sp, #16]
 800c976:	2800      	cmp	r0, #0
 800c978:	f47f af6f 	bne.w	800c85a <_strtod_r+0x70a>
 800c97c:	e62f      	b.n	800c5de <_strtod_r+0x48e>
 800c97e:	4629      	mov	r1, r5
 800c980:	4642      	mov	r2, r8
 800c982:	9802      	ldr	r0, [sp, #8]
 800c984:	f004 fc06 	bl	8011194 <__lshift>
 800c988:	4605      	mov	r5, r0
 800c98a:	2800      	cmp	r0, #0
 800c98c:	f47f af69 	bne.w	800c862 <_strtod_r+0x712>
 800c990:	e625      	b.n	800c5de <_strtod_r+0x48e>
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	2b01      	cmp	r3, #1
 800c996:	dc8f      	bgt.n	800c8b8 <_strtod_r+0x768>
 800c998:	e17e      	b.n	800cc98 <_strtod_r+0xb48>
 800c99a:	d161      	bne.n	800ca60 <_strtod_r+0x910>
 800c99c:	9a07      	ldr	r2, [sp, #28]
 800c99e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9a2:	b322      	cbz	r2, 800c9ee <_strtod_r+0x89e>
 800c9a4:	4946      	ldr	r1, [pc, #280]	; (800cac0 <_strtod_r+0x970>)
 800c9a6:	428b      	cmp	r3, r1
 800c9a8:	465a      	mov	r2, fp
 800c9aa:	d12e      	bne.n	800ca0a <_strtod_r+0x8ba>
 800c9ac:	9b03      	ldr	r3, [sp, #12]
 800c9ae:	4651      	mov	r1, sl
 800c9b0:	b163      	cbz	r3, 800c9cc <_strtod_r+0x87c>
 800c9b2:	4b44      	ldr	r3, [pc, #272]	; (800cac4 <_strtod_r+0x974>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9ba:	d807      	bhi.n	800c9cc <_strtod_r+0x87c>
 800c9bc:	0d1b      	lsrs	r3, r3, #20
 800c9be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c6:	fa00 f303 	lsl.w	r3, r0, r3
 800c9ca:	e001      	b.n	800c9d0 <_strtod_r+0x880>
 800c9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d0:	428b      	cmp	r3, r1
 800c9d2:	d11a      	bne.n	800ca0a <_strtod_r+0x8ba>
 800c9d4:	493c      	ldr	r1, [pc, #240]	; (800cac8 <_strtod_r+0x978>)
 800c9d6:	428a      	cmp	r2, r1
 800c9d8:	d102      	bne.n	800c9e0 <_strtod_r+0x890>
 800c9da:	3301      	adds	r3, #1
 800c9dc:	f43f adff 	beq.w	800c5de <_strtod_r+0x48e>
 800c9e0:	4b38      	ldr	r3, [pc, #224]	; (800cac4 <_strtod_r+0x974>)
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c9e8:	f04f 0a00 	mov.w	sl, #0
 800c9ec:	e154      	b.n	800cc98 <_strtod_r+0xb48>
 800c9ee:	b963      	cbnz	r3, 800ca0a <_strtod_r+0x8ba>
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	d109      	bne.n	800ca0a <_strtod_r+0x8ba>
 800c9f6:	e76b      	b.n	800c8d0 <_strtod_r+0x780>
 800c9f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c9fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca04:	f04f 3aff 	mov.w	sl, #4294967295
 800ca08:	e146      	b.n	800cc98 <_strtod_r+0xb48>
 800ca0a:	b117      	cbz	r7, 800ca12 <_strtod_r+0x8c2>
 800ca0c:	ea17 0f0b 	tst.w	r7, fp
 800ca10:	e002      	b.n	800ca18 <_strtod_r+0x8c8>
 800ca12:	9b06      	ldr	r3, [sp, #24]
 800ca14:	ea13 0f0a 	tst.w	r3, sl
 800ca18:	f000 813e 	beq.w	800cc98 <_strtod_r+0xb48>
 800ca1c:	9b07      	ldr	r3, [sp, #28]
 800ca1e:	9a03      	ldr	r2, [sp, #12]
 800ca20:	4650      	mov	r0, sl
 800ca22:	4659      	mov	r1, fp
 800ca24:	b153      	cbz	r3, 800ca3c <_strtod_r+0x8ec>
 800ca26:	f7ff fb77 	bl	800c118 <sulp>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca32:	f7f3 fc4b 	bl	80002cc <__adddf3>
 800ca36:	4682      	mov	sl, r0
 800ca38:	468b      	mov	fp, r1
 800ca3a:	e12d      	b.n	800cc98 <_strtod_r+0xb48>
 800ca3c:	f7ff fb6c 	bl	800c118 <sulp>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca48:	f7f3 fc3e 	bl	80002c8 <__aeabi_dsub>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	4682      	mov	sl, r0
 800ca52:	468b      	mov	fp, r1
 800ca54:	f7f4 f854 	bl	8000b00 <__aeabi_dcmpeq>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	f47f af49 	bne.w	800c8f0 <_strtod_r+0x7a0>
 800ca5e:	e11b      	b.n	800cc98 <_strtod_r+0xb48>
 800ca60:	4629      	mov	r1, r5
 800ca62:	4620      	mov	r0, r4
 800ca64:	f004 fd25 	bl	80114b2 <__ratio>
 800ca68:	ec57 6b10 	vmov	r6, r7, d0
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca72:	ee10 0a10 	vmov	r0, s0
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f4 f856 	bl	8000b28 <__aeabi_dcmple>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d042      	beq.n	800cb06 <_strtod_r+0x9b6>
 800ca80:	9b07      	ldr	r3, [sp, #28]
 800ca82:	b123      	cbz	r3, 800ca8e <_strtod_r+0x93e>
 800ca84:	f04f 0800 	mov.w	r8, #0
 800ca88:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800cacc <_strtod_r+0x97c>
 800ca8c:	e011      	b.n	800cab2 <_strtod_r+0x962>
 800ca8e:	f1ba 0f00 	cmp.w	sl, #0
 800ca92:	d103      	bne.n	800ca9c <_strtod_r+0x94c>
 800ca94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca98:	b93b      	cbnz	r3, 800caaa <_strtod_r+0x95a>
 800ca9a:	e01b      	b.n	800cad4 <_strtod_r+0x984>
 800ca9c:	f1ba 0f01 	cmp.w	sl, #1
 800caa0:	d103      	bne.n	800caaa <_strtod_r+0x95a>
 800caa2:	f1bb 0f00 	cmp.w	fp, #0
 800caa6:	f43f af23 	beq.w	800c8f0 <_strtod_r+0x7a0>
 800caaa:	f8df 9024 	ldr.w	r9, [pc, #36]	; 800cad0 <_strtod_r+0x980>
 800caae:	f04f 0800 	mov.w	r8, #0
 800cab2:	2600      	movs	r6, #0
 800cab4:	4f05      	ldr	r7, [pc, #20]	; (800cacc <_strtod_r+0x97c>)
 800cab6:	e039      	b.n	800cb2c <_strtod_r+0x9dc>
 800cab8:	fffffc02 	.word	0xfffffc02
 800cabc:	fffffbe2 	.word	0xfffffbe2
 800cac0:	000fffff 	.word	0x000fffff
 800cac4:	7ff00000 	.word	0x7ff00000
 800cac8:	7fefffff 	.word	0x7fefffff
 800cacc:	3ff00000 	.word	0x3ff00000
 800cad0:	bff00000 	.word	0xbff00000
 800cad4:	2200      	movs	r2, #0
 800cad6:	4b98      	ldr	r3, [pc, #608]	; (800cd38 <_strtod_r+0xbe8>)
 800cad8:	4630      	mov	r0, r6
 800cada:	4639      	mov	r1, r7
 800cadc:	f7f4 f81a 	bl	8000b14 <__aeabi_dcmplt>
 800cae0:	b940      	cbnz	r0, 800caf4 <_strtod_r+0x9a4>
 800cae2:	4630      	mov	r0, r6
 800cae4:	4639      	mov	r1, r7
 800cae6:	2200      	movs	r2, #0
 800cae8:	4b94      	ldr	r3, [pc, #592]	; (800cd3c <_strtod_r+0xbec>)
 800caea:	f7f3 fda1 	bl	8000630 <__aeabi_dmul>
 800caee:	4606      	mov	r6, r0
 800caf0:	460f      	mov	r7, r1
 800caf2:	e001      	b.n	800caf8 <_strtod_r+0x9a8>
 800caf4:	4f91      	ldr	r7, [pc, #580]	; (800cd3c <_strtod_r+0xbec>)
 800caf6:	2600      	movs	r6, #0
 800caf8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cafc:	9614      	str	r6, [sp, #80]	; 0x50
 800cafe:	9315      	str	r3, [sp, #84]	; 0x54
 800cb00:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800cb04:	e012      	b.n	800cb2c <_strtod_r+0x9dc>
 800cb06:	4b8d      	ldr	r3, [pc, #564]	; (800cd3c <_strtod_r+0xbec>)
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f7f3 fd8f 	bl	8000630 <__aeabi_dmul>
 800cb12:	9b07      	ldr	r3, [sp, #28]
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	b923      	cbnz	r3, 800cb24 <_strtod_r+0x9d4>
 800cb1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb1e:	900e      	str	r0, [sp, #56]	; 0x38
 800cb20:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb22:	e001      	b.n	800cb28 <_strtod_r+0x9d8>
 800cb24:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800cb28:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800cb2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb30:	0d1b      	lsrs	r3, r3, #20
 800cb32:	051b      	lsls	r3, r3, #20
 800cb34:	9306      	str	r3, [sp, #24]
 800cb36:	9a06      	ldr	r2, [sp, #24]
 800cb38:	4b81      	ldr	r3, [pc, #516]	; (800cd40 <_strtod_r+0xbf0>)
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d12b      	bne.n	800cb96 <_strtod_r+0xa46>
 800cb3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb42:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cb46:	ec4b ab10 	vmov	d0, sl, fp
 800cb4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb4e:	f004 fbed 	bl	801132c <__ulp>
 800cb52:	4640      	mov	r0, r8
 800cb54:	ec53 2b10 	vmov	r2, r3, d0
 800cb58:	4649      	mov	r1, r9
 800cb5a:	f7f3 fd69 	bl	8000630 <__aeabi_dmul>
 800cb5e:	4652      	mov	r2, sl
 800cb60:	465b      	mov	r3, fp
 800cb62:	f7f3 fbb3 	bl	80002cc <__adddf3>
 800cb66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb6a:	0d1b      	lsrs	r3, r3, #20
 800cb6c:	4a75      	ldr	r2, [pc, #468]	; (800cd44 <_strtod_r+0xbf4>)
 800cb6e:	051b      	lsls	r3, r3, #20
 800cb70:	4293      	cmp	r3, r2
 800cb72:	4682      	mov	sl, r0
 800cb74:	d90c      	bls.n	800cb90 <_strtod_r+0xa40>
 800cb76:	4b74      	ldr	r3, [pc, #464]	; (800cd48 <_strtod_r+0xbf8>)
 800cb78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d103      	bne.n	800cb86 <_strtod_r+0xa36>
 800cb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb80:	3301      	adds	r3, #1
 800cb82:	f43f ad2c 	beq.w	800c5de <_strtod_r+0x48e>
 800cb86:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800cd48 <_strtod_r+0xbf8>
 800cb8a:	f04f 3aff 	mov.w	sl, #4294967295
 800cb8e:	e072      	b.n	800cc76 <_strtod_r+0xb26>
 800cb90:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800cb94:	e038      	b.n	800cc08 <_strtod_r+0xab8>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	b333      	cbz	r3, 800cbe8 <_strtod_r+0xa98>
 800cb9a:	9b06      	ldr	r3, [sp, #24]
 800cb9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cba0:	d822      	bhi.n	800cbe8 <_strtod_r+0xa98>
 800cba2:	a35d      	add	r3, pc, #372	; (adr r3, 800cd18 <_strtod_r+0xbc8>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	4630      	mov	r0, r6
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f3 ffbc 	bl	8000b28 <__aeabi_dcmple>
 800cbb0:	b1a8      	cbz	r0, 800cbde <_strtod_r+0xa8e>
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f7f4 f813 	bl	8000be0 <__aeabi_d2uiz>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	bf08      	it	eq
 800cbbe:	2001      	moveq	r0, #1
 800cbc0:	f7f3 fcc0 	bl	8000544 <__aeabi_ui2d>
 800cbc4:	9b07      	ldr	r3, [sp, #28]
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460f      	mov	r7, r1
 800cbca:	b923      	cbnz	r3, 800cbd6 <_strtod_r+0xa86>
 800cbcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbd0:	9010      	str	r0, [sp, #64]	; 0x40
 800cbd2:	9311      	str	r3, [sp, #68]	; 0x44
 800cbd4:	e001      	b.n	800cbda <_strtod_r+0xa8a>
 800cbd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cbda:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800cbde:	9a06      	ldr	r2, [sp, #24]
 800cbe0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 800cbe4:	ebc2 0903 	rsb	r9, r2, r3
 800cbe8:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cbec:	f004 fb9e 	bl	801132c <__ulp>
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	ec53 2b10 	vmov	r2, r3, d0
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	f7f3 fd1a 	bl	8000630 <__aeabi_dmul>
 800cbfc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cc00:	f7f3 fb64 	bl	80002cc <__adddf3>
 800cc04:	4682      	mov	sl, r0
 800cc06:	468b      	mov	fp, r1
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	bba3      	cbnz	r3, 800cc76 <_strtod_r+0xb26>
 800cc0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc10:	0d1b      	lsrs	r3, r3, #20
 800cc12:	9a06      	ldr	r2, [sp, #24]
 800cc14:	051b      	lsls	r3, r3, #20
 800cc16:	429a      	cmp	r2, r3
 800cc18:	46d8      	mov	r8, fp
 800cc1a:	d12c      	bne.n	800cc76 <_strtod_r+0xb26>
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f7f3 ffb6 	bl	8000b90 <__aeabi_d2iz>
 800cc24:	f7f3 fc9e 	bl	8000564 <__aeabi_i2d>
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f7f3 fb4a 	bl	80002c8 <__aeabi_dsub>
 800cc34:	9b07      	ldr	r3, [sp, #28]
 800cc36:	4606      	mov	r6, r0
 800cc38:	460f      	mov	r7, r1
 800cc3a:	b92b      	cbnz	r3, 800cc48 <_strtod_r+0xaf8>
 800cc3c:	f1ba 0f00 	cmp.w	sl, #0
 800cc40:	d102      	bne.n	800cc48 <_strtod_r+0xaf8>
 800cc42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc46:	b183      	cbz	r3, 800cc6a <_strtod_r+0xb1a>
 800cc48:	a335      	add	r3, pc, #212	; (adr r3, 800cd20 <_strtod_r+0xbd0>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	4630      	mov	r0, r6
 800cc50:	4639      	mov	r1, r7
 800cc52:	f7f3 ff5f 	bl	8000b14 <__aeabi_dcmplt>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d131      	bne.n	800ccbe <_strtod_r+0xb6e>
 800cc5a:	a333      	add	r3, pc, #204	; (adr r3, 800cd28 <_strtod_r+0xbd8>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	4630      	mov	r0, r6
 800cc62:	4639      	mov	r1, r7
 800cc64:	f7f3 ff74 	bl	8000b50 <__aeabi_dcmpgt>
 800cc68:	e004      	b.n	800cc74 <_strtod_r+0xb24>
 800cc6a:	a331      	add	r3, pc, #196	; (adr r3, 800cd30 <_strtod_r+0xbe0>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	f7f3 ff50 	bl	8000b14 <__aeabi_dcmplt>
 800cc74:	bb18      	cbnz	r0, 800ccbe <_strtod_r+0xb6e>
 800cc76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc78:	9802      	ldr	r0, [sp, #8]
 800cc7a:	f004 f8c5 	bl	8010e08 <_Bfree>
 800cc7e:	9904      	ldr	r1, [sp, #16]
 800cc80:	9802      	ldr	r0, [sp, #8]
 800cc82:	f004 f8c1 	bl	8010e08 <_Bfree>
 800cc86:	4629      	mov	r1, r5
 800cc88:	9802      	ldr	r0, [sp, #8]
 800cc8a:	f004 f8bd 	bl	8010e08 <_Bfree>
 800cc8e:	4621      	mov	r1, r4
 800cc90:	9802      	ldr	r0, [sp, #8]
 800cc92:	f004 f8b9 	bl	8010e08 <_Bfree>
 800cc96:	e56d      	b.n	800c774 <_strtod_r+0x624>
 800cc98:	9b03      	ldr	r3, [sp, #12]
 800cc9a:	b183      	cbz	r3, 800ccbe <_strtod_r+0xb6e>
 800cc9c:	4b2b      	ldr	r3, [pc, #172]	; (800cd4c <_strtod_r+0xbfc>)
 800cc9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cca0:	2300      	movs	r3, #0
 800cca2:	930a      	str	r3, [sp, #40]	; 0x28
 800cca4:	4650      	mov	r0, sl
 800cca6:	4659      	mov	r1, fp
 800cca8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ccac:	f7f3 fcc0 	bl	8000630 <__aeabi_dmul>
 800ccb0:	4682      	mov	sl, r0
 800ccb2:	468b      	mov	fp, r1
 800ccb4:	b919      	cbnz	r1, 800ccbe <_strtod_r+0xb6e>
 800ccb6:	b910      	cbnz	r0, 800ccbe <_strtod_r+0xb6e>
 800ccb8:	9a02      	ldr	r2, [sp, #8]
 800ccba:	2322      	movs	r3, #34	; 0x22
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ccc0:	9802      	ldr	r0, [sp, #8]
 800ccc2:	f004 f8a1 	bl	8010e08 <_Bfree>
 800ccc6:	9904      	ldr	r1, [sp, #16]
 800ccc8:	9802      	ldr	r0, [sp, #8]
 800ccca:	f004 f89d 	bl	8010e08 <_Bfree>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	9802      	ldr	r0, [sp, #8]
 800ccd2:	f004 f899 	bl	8010e08 <_Bfree>
 800ccd6:	9905      	ldr	r1, [sp, #20]
 800ccd8:	9802      	ldr	r0, [sp, #8]
 800ccda:	f004 f895 	bl	8010e08 <_Bfree>
 800ccde:	4621      	mov	r1, r4
 800cce0:	9802      	ldr	r0, [sp, #8]
 800cce2:	f004 f891 	bl	8010e08 <_Bfree>
 800cce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cce8:	b113      	cbz	r3, 800ccf0 <_strtod_r+0xba0>
 800ccea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccf2:	b11b      	cbz	r3, 800ccfc <_strtod_r+0xbac>
 800ccf4:	4652      	mov	r2, sl
 800ccf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ccfa:	e007      	b.n	800cd0c <_strtod_r+0xbbc>
 800ccfc:	4652      	mov	r2, sl
 800ccfe:	465b      	mov	r3, fp
 800cd00:	e004      	b.n	800cd0c <_strtod_r+0xbbc>
 800cd02:	2500      	movs	r5, #0
 800cd04:	462a      	mov	r2, r5
 800cd06:	2101      	movs	r1, #1
 800cd08:	f7ff bb41 	b.w	800c38e <_strtod_r+0x23e>
 800cd0c:	ec43 2b10 	vmov	d0, r2, r3
 800cd10:	b01d      	add	sp, #116	; 0x74
 800cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd16:	bf00      	nop
 800cd18:	ffc00000 	.word	0xffc00000
 800cd1c:	41dfffff 	.word	0x41dfffff
 800cd20:	94a03595 	.word	0x94a03595
 800cd24:	3fdfffff 	.word	0x3fdfffff
 800cd28:	35afe535 	.word	0x35afe535
 800cd2c:	3fe00000 	.word	0x3fe00000
 800cd30:	94a03595 	.word	0x94a03595
 800cd34:	3fcfffff 	.word	0x3fcfffff
 800cd38:	3ff00000 	.word	0x3ff00000
 800cd3c:	3fe00000 	.word	0x3fe00000
 800cd40:	7fe00000 	.word	0x7fe00000
 800cd44:	7c9fffff 	.word	0x7c9fffff
 800cd48:	7fefffff 	.word	0x7fefffff
 800cd4c:	39500000 	.word	0x39500000

0800cd50 <strtod>:
 800cd50:	4b02      	ldr	r3, [pc, #8]	; (800cd5c <strtod+0xc>)
 800cd52:	460a      	mov	r2, r1
 800cd54:	4601      	mov	r1, r0
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	f7ff b9fa 	b.w	800c150 <_strtod_r>
 800cd5c:	20010120 	.word	0x20010120

0800cd60 <strtof>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4b0e      	ldr	r3, [pc, #56]	; (800cd9c <strtof+0x3c>)
 800cd64:	460a      	mov	r2, r1
 800cd66:	4601      	mov	r1, r0
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	f7ff f9f1 	bl	800c150 <_strtod_r>
 800cd6e:	ec55 4b10 	vmov	r4, r5, d0
 800cd72:	ee10 2a10 	vmov	r2, s0
 800cd76:	462b      	mov	r3, r5
 800cd78:	ee10 0a10 	vmov	r0, s0
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7f3 fef1 	bl	8000b64 <__aeabi_dcmpun>
 800cd82:	b120      	cbz	r0, 800cd8e <strtof+0x2e>
 800cd84:	2000      	movs	r0, #0
 800cd86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd8a:	f004 bda1 	b.w	80118d0 <nanf>
 800cd8e:	4620      	mov	r0, r4
 800cd90:	4629      	mov	r1, r5
 800cd92:	f7f3 ff45 	bl	8000c20 <__aeabi_d2f>
 800cd96:	ee00 0a10 	vmov	s0, r0
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	20010120 	.word	0x20010120

0800cda0 <_strtol_r>:
 800cda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda4:	4680      	mov	r8, r0
 800cda6:	4840      	ldr	r0, [pc, #256]	; (800cea8 <_strtol_r+0x108>)
 800cda8:	f8d0 9000 	ldr.w	r9, [r0]
 800cdac:	460f      	mov	r7, r1
 800cdae:	463d      	mov	r5, r7
 800cdb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdb4:	eb09 0004 	add.w	r0, r9, r4
 800cdb8:	7840      	ldrb	r0, [r0, #1]
 800cdba:	f000 0008 	and.w	r0, r0, #8
 800cdbe:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 800cdc2:	b108      	cbz	r0, 800cdc8 <_strtol_r+0x28>
 800cdc4:	462f      	mov	r7, r5
 800cdc6:	e7f2      	b.n	800cdae <_strtol_r+0xe>
 800cdc8:	2c2d      	cmp	r4, #45	; 0x2d
 800cdca:	d103      	bne.n	800cdd4 <_strtol_r+0x34>
 800cdcc:	1cbd      	adds	r5, r7, #2
 800cdce:	787c      	ldrb	r4, [r7, #1]
 800cdd0:	2601      	movs	r6, #1
 800cdd2:	e003      	b.n	800cddc <_strtol_r+0x3c>
 800cdd4:	2c2b      	cmp	r4, #43	; 0x2b
 800cdd6:	bf04      	itt	eq
 800cdd8:	787c      	ldrbeq	r4, [r7, #1]
 800cdda:	1cbd      	addeq	r5, r7, #2
 800cddc:	b113      	cbz	r3, 800cde4 <_strtol_r+0x44>
 800cdde:	2b10      	cmp	r3, #16
 800cde0:	d10a      	bne.n	800cdf8 <_strtol_r+0x58>
 800cde2:	e05b      	b.n	800ce9c <_strtol_r+0xfc>
 800cde4:	2c30      	cmp	r4, #48	; 0x30
 800cde6:	d157      	bne.n	800ce98 <_strtol_r+0xf8>
 800cde8:	7828      	ldrb	r0, [r5, #0]
 800cdea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cdee:	2858      	cmp	r0, #88	; 0x58
 800cdf0:	d14d      	bne.n	800ce8e <_strtol_r+0xee>
 800cdf2:	786c      	ldrb	r4, [r5, #1]
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	3502      	adds	r5, #2
 800cdf8:	2e00      	cmp	r6, #0
 800cdfa:	bf14      	ite	ne
 800cdfc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 800ce00:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 800ce04:	2700      	movs	r7, #0
 800ce06:	fbbc faf3 	udiv	sl, ip, r3
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	fb03 cc1a 	mls	ip, r3, sl, ip
 800ce10:	eb09 0e04 	add.w	lr, r9, r4
 800ce14:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ce18:	f01e 0f04 	tst.w	lr, #4
 800ce1c:	d001      	beq.n	800ce22 <_strtol_r+0x82>
 800ce1e:	3c30      	subs	r4, #48	; 0x30
 800ce20:	e00b      	b.n	800ce3a <_strtol_r+0x9a>
 800ce22:	f01e 0e03 	ands.w	lr, lr, #3
 800ce26:	d01b      	beq.n	800ce60 <_strtol_r+0xc0>
 800ce28:	f1be 0f01 	cmp.w	lr, #1
 800ce2c:	bf0c      	ite	eq
 800ce2e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800ce32:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800ce36:	ebce 0404 	rsb	r4, lr, r4
 800ce3a:	42a3      	cmp	r3, r4
 800ce3c:	dd10      	ble.n	800ce60 <_strtol_r+0xc0>
 800ce3e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800ce42:	d00a      	beq.n	800ce5a <_strtol_r+0xba>
 800ce44:	4550      	cmp	r0, sl
 800ce46:	d806      	bhi.n	800ce56 <_strtol_r+0xb6>
 800ce48:	d101      	bne.n	800ce4e <_strtol_r+0xae>
 800ce4a:	4564      	cmp	r4, ip
 800ce4c:	dc03      	bgt.n	800ce56 <_strtol_r+0xb6>
 800ce4e:	fb03 4000 	mla	r0, r3, r0, r4
 800ce52:	2701      	movs	r7, #1
 800ce54:	e001      	b.n	800ce5a <_strtol_r+0xba>
 800ce56:	f04f 37ff 	mov.w	r7, #4294967295
 800ce5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce5e:	e7d7      	b.n	800ce10 <_strtol_r+0x70>
 800ce60:	1c7b      	adds	r3, r7, #1
 800ce62:	d10c      	bne.n	800ce7e <_strtol_r+0xde>
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	f04f 0322 	mov.w	r3, #34	; 0x22
 800ce6a:	bf14      	ite	ne
 800ce6c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800ce70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ce74:	f8c8 3000 	str.w	r3, [r8]
 800ce78:	b92a      	cbnz	r2, 800ce86 <_strtol_r+0xe6>
 800ce7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7e:	b106      	cbz	r6, 800ce82 <_strtol_r+0xe2>
 800ce80:	4240      	negs	r0, r0
 800ce82:	b172      	cbz	r2, 800cea2 <_strtol_r+0x102>
 800ce84:	b107      	cbz	r7, 800ce88 <_strtol_r+0xe8>
 800ce86:	1e69      	subs	r1, r5, #1
 800ce88:	6011      	str	r1, [r2, #0]
 800ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8e:	2430      	movs	r4, #48	; 0x30
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1b1      	bne.n	800cdf8 <_strtol_r+0x58>
 800ce94:	2308      	movs	r3, #8
 800ce96:	e7af      	b.n	800cdf8 <_strtol_r+0x58>
 800ce98:	230a      	movs	r3, #10
 800ce9a:	e7ad      	b.n	800cdf8 <_strtol_r+0x58>
 800ce9c:	2c30      	cmp	r4, #48	; 0x30
 800ce9e:	d0a3      	beq.n	800cde8 <_strtol_r+0x48>
 800cea0:	e7aa      	b.n	800cdf8 <_strtol_r+0x58>
 800cea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea6:	bf00      	nop
 800cea8:	20010534 	.word	0x20010534

0800ceac <strtol>:
 800ceac:	4613      	mov	r3, r2
 800ceae:	460a      	mov	r2, r1
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	4802      	ldr	r0, [pc, #8]	; (800cebc <strtol+0x10>)
 800ceb4:	6800      	ldr	r0, [r0, #0]
 800ceb6:	f7ff bf73 	b.w	800cda0 <_strtol_r>
 800ceba:	bf00      	nop
 800cebc:	20010120 	.word	0x20010120

0800cec0 <strtoll>:
 800cec0:	4613      	mov	r3, r2
 800cec2:	460a      	mov	r2, r1
 800cec4:	4601      	mov	r1, r0
 800cec6:	4802      	ldr	r0, [pc, #8]	; (800ced0 <strtoll+0x10>)
 800cec8:	6800      	ldr	r0, [r0, #0]
 800ceca:	f000 b803 	b.w	800ced4 <_strtoll_r>
 800cece:	bf00      	nop
 800ced0:	20010120 	.word	0x20010120

0800ced4 <_strtoll_r>:
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	461f      	mov	r7, r3
 800ceda:	4b55      	ldr	r3, [pc, #340]	; (800d030 <_strtoll_r+0x15c>)
 800cedc:	b087      	sub	sp, #28
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	9303      	str	r3, [sp, #12]
 800cee2:	9005      	str	r0, [sp, #20]
 800cee4:	468a      	mov	sl, r1
 800cee6:	4693      	mov	fp, r2
 800cee8:	460b      	mov	r3, r1
 800ceea:	461d      	mov	r5, r3
 800ceec:	9a03      	ldr	r2, [sp, #12]
 800ceee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cef2:	4422      	add	r2, r4
 800cef4:	7852      	ldrb	r2, [r2, #1]
 800cef6:	f002 0208 	and.w	r2, r2, #8
 800cefa:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 800cefe:	b10a      	cbz	r2, 800cf04 <_strtoll_r+0x30>
 800cf00:	462b      	mov	r3, r5
 800cf02:	e7f2      	b.n	800ceea <_strtoll_r+0x16>
 800cf04:	2c2d      	cmp	r4, #45	; 0x2d
 800cf06:	d103      	bne.n	800cf10 <_strtoll_r+0x3c>
 800cf08:	1c9d      	adds	r5, r3, #2
 800cf0a:	785c      	ldrb	r4, [r3, #1]
 800cf0c:	2601      	movs	r6, #1
 800cf0e:	e003      	b.n	800cf18 <_strtoll_r+0x44>
 800cf10:	2c2b      	cmp	r4, #43	; 0x2b
 800cf12:	bf04      	itt	eq
 800cf14:	785c      	ldrbeq	r4, [r3, #1]
 800cf16:	1c9d      	addeq	r5, r3, #2
 800cf18:	b117      	cbz	r7, 800cf20 <_strtoll_r+0x4c>
 800cf1a:	2f10      	cmp	r7, #16
 800cf1c:	d10a      	bne.n	800cf34 <_strtoll_r+0x60>
 800cf1e:	e07f      	b.n	800d020 <_strtoll_r+0x14c>
 800cf20:	2c30      	cmp	r4, #48	; 0x30
 800cf22:	d17b      	bne.n	800d01c <_strtoll_r+0x148>
 800cf24:	782b      	ldrb	r3, [r5, #0]
 800cf26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf2a:	2b58      	cmp	r3, #88	; 0x58
 800cf2c:	d171      	bne.n	800d012 <_strtoll_r+0x13e>
 800cf2e:	786c      	ldrb	r4, [r5, #1]
 800cf30:	2710      	movs	r7, #16
 800cf32:	3502      	adds	r5, #2
 800cf34:	b926      	cbnz	r6, 800cf40 <_strtoll_r+0x6c>
 800cf36:	f04f 38ff 	mov.w	r8, #4294967295
 800cf3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cf3e:	e003      	b.n	800cf48 <_strtoll_r+0x74>
 800cf40:	f04f 0800 	mov.w	r8, #0
 800cf44:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800cf48:	463a      	mov	r2, r7
 800cf4a:	17fb      	asrs	r3, r7, #31
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	4649      	mov	r1, r9
 800cf50:	e9cd 2300 	strd	r2, r3, [sp]
 800cf54:	f7f3 feb4 	bl	8000cc0 <__aeabi_uldivmod>
 800cf58:	17fb      	asrs	r3, r7, #31
 800cf5a:	9204      	str	r2, [sp, #16]
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	4649      	mov	r1, r9
 800cf60:	463a      	mov	r2, r7
 800cf62:	f7f3 fead 	bl	8000cc0 <__aeabi_uldivmod>
 800cf66:	2300      	movs	r3, #0
 800cf68:	4680      	mov	r8, r0
 800cf6a:	4689      	mov	r9, r1
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	2100      	movs	r1, #0
 800cf70:	9a03      	ldr	r2, [sp, #12]
 800cf72:	4422      	add	r2, r4
 800cf74:	7852      	ldrb	r2, [r2, #1]
 800cf76:	f012 0f04 	tst.w	r2, #4
 800cf7a:	d001      	beq.n	800cf80 <_strtoll_r+0xac>
 800cf7c:	3c30      	subs	r4, #48	; 0x30
 800cf7e:	e007      	b.n	800cf90 <_strtoll_r+0xbc>
 800cf80:	f012 0203 	ands.w	r2, r2, #3
 800cf84:	d025      	beq.n	800cfd2 <_strtoll_r+0xfe>
 800cf86:	2a01      	cmp	r2, #1
 800cf88:	bf0c      	ite	eq
 800cf8a:	2237      	moveq	r2, #55	; 0x37
 800cf8c:	2257      	movne	r2, #87	; 0x57
 800cf8e:	1aa4      	subs	r4, r4, r2
 800cf90:	42a7      	cmp	r7, r4
 800cf92:	dd1e      	ble.n	800cfd2 <_strtoll_r+0xfe>
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	d019      	beq.n	800cfcc <_strtoll_r+0xf8>
 800cf98:	4589      	cmp	r9, r1
 800cf9a:	bf08      	it	eq
 800cf9c:	4580      	cmpeq	r8, r0
 800cf9e:	d313      	bcc.n	800cfc8 <_strtoll_r+0xf4>
 800cfa0:	4549      	cmp	r1, r9
 800cfa2:	bf08      	it	eq
 800cfa4:	4540      	cmpeq	r0, r8
 800cfa6:	d102      	bne.n	800cfae <_strtoll_r+0xda>
 800cfa8:	9b04      	ldr	r3, [sp, #16]
 800cfaa:	429c      	cmp	r4, r3
 800cfac:	dc0c      	bgt.n	800cfc8 <_strtoll_r+0xf4>
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	9a00      	ldr	r2, [sp, #0]
 800cfb2:	4343      	muls	r3, r0
 800cfb4:	fb02 3301 	mla	r3, r2, r1, r3
 800cfb8:	fba0 0102 	umull	r0, r1, r0, r2
 800cfbc:	4419      	add	r1, r3
 800cfbe:	1900      	adds	r0, r0, r4
 800cfc0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e001      	b.n	800cfcc <_strtoll_r+0xf8>
 800cfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfd0:	e7ce      	b.n	800cf70 <_strtoll_r+0x9c>
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	d10f      	bne.n	800cff6 <_strtoll_r+0x122>
 800cfd6:	b926      	cbnz	r6, 800cfe2 <_strtoll_r+0x10e>
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfe0:	e002      	b.n	800cfe8 <_strtoll_r+0x114>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cfe8:	9a05      	ldr	r2, [sp, #20]
 800cfea:	2322      	movs	r3, #34	; 0x22
 800cfec:	6013      	str	r3, [r2, #0]
 800cfee:	f1bb 0f00 	cmp.w	fp, #0
 800cff2:	d108      	bne.n	800d006 <_strtoll_r+0x132>
 800cff4:	e018      	b.n	800d028 <_strtoll_r+0x154>
 800cff6:	b116      	cbz	r6, 800cffe <_strtoll_r+0x12a>
 800cff8:	4240      	negs	r0, r0
 800cffa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800cffe:	f1bb 0f00 	cmp.w	fp, #0
 800d002:	d011      	beq.n	800d028 <_strtoll_r+0x154>
 800d004:	b10b      	cbz	r3, 800d00a <_strtoll_r+0x136>
 800d006:	3d01      	subs	r5, #1
 800d008:	e000      	b.n	800d00c <_strtoll_r+0x138>
 800d00a:	4655      	mov	r5, sl
 800d00c:	f8cb 5000 	str.w	r5, [fp]
 800d010:	e00a      	b.n	800d028 <_strtoll_r+0x154>
 800d012:	2430      	movs	r4, #48	; 0x30
 800d014:	2f00      	cmp	r7, #0
 800d016:	d18d      	bne.n	800cf34 <_strtoll_r+0x60>
 800d018:	2708      	movs	r7, #8
 800d01a:	e78b      	b.n	800cf34 <_strtoll_r+0x60>
 800d01c:	270a      	movs	r7, #10
 800d01e:	e789      	b.n	800cf34 <_strtoll_r+0x60>
 800d020:	2c30      	cmp	r4, #48	; 0x30
 800d022:	f43f af7f 	beq.w	800cf24 <_strtoll_r+0x50>
 800d026:	e785      	b.n	800cf34 <_strtoll_r+0x60>
 800d028:	b007      	add	sp, #28
 800d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02e:	bf00      	nop
 800d030:	20010534 	.word	0x20010534

0800d034 <_strtoul_r>:
 800d034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d038:	4680      	mov	r8, r0
 800d03a:	483c      	ldr	r0, [pc, #240]	; (800d12c <_strtoul_r+0xf8>)
 800d03c:	f8d0 9000 	ldr.w	r9, [r0]
 800d040:	460e      	mov	r6, r1
 800d042:	4635      	mov	r5, r6
 800d044:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d048:	eb09 0004 	add.w	r0, r9, r4
 800d04c:	7840      	ldrb	r0, [r0, #1]
 800d04e:	f000 0008 	and.w	r0, r0, #8
 800d052:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 800d056:	b108      	cbz	r0, 800d05c <_strtoul_r+0x28>
 800d058:	462e      	mov	r6, r5
 800d05a:	e7f2      	b.n	800d042 <_strtoul_r+0xe>
 800d05c:	2c2d      	cmp	r4, #45	; 0x2d
 800d05e:	d103      	bne.n	800d068 <_strtoul_r+0x34>
 800d060:	1cb5      	adds	r5, r6, #2
 800d062:	7874      	ldrb	r4, [r6, #1]
 800d064:	2701      	movs	r7, #1
 800d066:	e003      	b.n	800d070 <_strtoul_r+0x3c>
 800d068:	2c2b      	cmp	r4, #43	; 0x2b
 800d06a:	bf04      	itt	eq
 800d06c:	7874      	ldrbeq	r4, [r6, #1]
 800d06e:	1cb5      	addeq	r5, r6, #2
 800d070:	b113      	cbz	r3, 800d078 <_strtoul_r+0x44>
 800d072:	2b10      	cmp	r3, #16
 800d074:	d10a      	bne.n	800d08c <_strtoul_r+0x58>
 800d076:	e053      	b.n	800d120 <_strtoul_r+0xec>
 800d078:	2c30      	cmp	r4, #48	; 0x30
 800d07a:	d14f      	bne.n	800d11c <_strtoul_r+0xe8>
 800d07c:	7828      	ldrb	r0, [r5, #0]
 800d07e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d082:	2858      	cmp	r0, #88	; 0x58
 800d084:	d145      	bne.n	800d112 <_strtoul_r+0xde>
 800d086:	786c      	ldrb	r4, [r5, #1]
 800d088:	2310      	movs	r3, #16
 800d08a:	3502      	adds	r5, #2
 800d08c:	f04f 3cff 	mov.w	ip, #4294967295
 800d090:	2600      	movs	r6, #0
 800d092:	fbbc fcf3 	udiv	ip, ip, r3
 800d096:	fb03 fa0c 	mul.w	sl, r3, ip
 800d09a:	ea6f 0a0a 	mvn.w	sl, sl
 800d09e:	4630      	mov	r0, r6
 800d0a0:	eb09 0e04 	add.w	lr, r9, r4
 800d0a4:	f89e e001 	ldrb.w	lr, [lr, #1]
 800d0a8:	f01e 0f04 	tst.w	lr, #4
 800d0ac:	d001      	beq.n	800d0b2 <_strtoul_r+0x7e>
 800d0ae:	3c30      	subs	r4, #48	; 0x30
 800d0b0:	e00b      	b.n	800d0ca <_strtoul_r+0x96>
 800d0b2:	f01e 0e03 	ands.w	lr, lr, #3
 800d0b6:	d01a      	beq.n	800d0ee <_strtoul_r+0xba>
 800d0b8:	f1be 0f01 	cmp.w	lr, #1
 800d0bc:	bf0c      	ite	eq
 800d0be:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800d0c2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800d0c6:	ebce 0404 	rsb	r4, lr, r4
 800d0ca:	42a3      	cmp	r3, r4
 800d0cc:	dd0f      	ble.n	800d0ee <_strtoul_r+0xba>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	db08      	blt.n	800d0e4 <_strtoul_r+0xb0>
 800d0d2:	4560      	cmp	r0, ip
 800d0d4:	d806      	bhi.n	800d0e4 <_strtoul_r+0xb0>
 800d0d6:	d101      	bne.n	800d0dc <_strtoul_r+0xa8>
 800d0d8:	4554      	cmp	r4, sl
 800d0da:	dc03      	bgt.n	800d0e4 <_strtoul_r+0xb0>
 800d0dc:	fb03 4000 	mla	r0, r3, r0, r4
 800d0e0:	2601      	movs	r6, #1
 800d0e2:	e001      	b.n	800d0e8 <_strtoul_r+0xb4>
 800d0e4:	f04f 36ff 	mov.w	r6, #4294967295
 800d0e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0ec:	e7d8      	b.n	800d0a0 <_strtoul_r+0x6c>
 800d0ee:	2e00      	cmp	r6, #0
 800d0f0:	da07      	bge.n	800d102 <_strtoul_r+0xce>
 800d0f2:	2322      	movs	r3, #34	; 0x22
 800d0f4:	f8c8 3000 	str.w	r3, [r8]
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	b92a      	cbnz	r2, 800d10a <_strtoul_r+0xd6>
 800d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d102:	b107      	cbz	r7, 800d106 <_strtoul_r+0xd2>
 800d104:	4240      	negs	r0, r0
 800d106:	b172      	cbz	r2, 800d126 <_strtoul_r+0xf2>
 800d108:	b106      	cbz	r6, 800d10c <_strtoul_r+0xd8>
 800d10a:	1e69      	subs	r1, r5, #1
 800d10c:	6011      	str	r1, [r2, #0]
 800d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d112:	2430      	movs	r4, #48	; 0x30
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1b9      	bne.n	800d08c <_strtoul_r+0x58>
 800d118:	2308      	movs	r3, #8
 800d11a:	e7b7      	b.n	800d08c <_strtoul_r+0x58>
 800d11c:	230a      	movs	r3, #10
 800d11e:	e7b5      	b.n	800d08c <_strtoul_r+0x58>
 800d120:	2c30      	cmp	r4, #48	; 0x30
 800d122:	d0ab      	beq.n	800d07c <_strtoul_r+0x48>
 800d124:	e7b2      	b.n	800d08c <_strtoul_r+0x58>
 800d126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12a:	bf00      	nop
 800d12c:	20010534 	.word	0x20010534

0800d130 <strtoul>:
 800d130:	4613      	mov	r3, r2
 800d132:	460a      	mov	r2, r1
 800d134:	4601      	mov	r1, r0
 800d136:	4802      	ldr	r0, [pc, #8]	; (800d140 <strtoul+0x10>)
 800d138:	6800      	ldr	r0, [r0, #0]
 800d13a:	f7ff bf7b 	b.w	800d034 <_strtoul_r>
 800d13e:	bf00      	nop
 800d140:	20010120 	.word	0x20010120
 800d144:	00000000 	.word	0x00000000

0800d148 <_svfprintf_r>:
 800d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	b0bd      	sub	sp, #244	; 0xf4
 800d14e:	468b      	mov	fp, r1
 800d150:	9205      	str	r2, [sp, #20]
 800d152:	461f      	mov	r7, r3
 800d154:	4682      	mov	sl, r0
 800d156:	f003 fd9b 	bl	8010c90 <_localeconv_r>
 800d15a:	6803      	ldr	r3, [r0, #0]
 800d15c:	930d      	str	r3, [sp, #52]	; 0x34
 800d15e:	4618      	mov	r0, r3
 800d160:	f7f3 f856 	bl	8000210 <strlen>
 800d164:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d168:	9008      	str	r0, [sp, #32]
 800d16a:	0619      	lsls	r1, r3, #24
 800d16c:	d515      	bpl.n	800d19a <_svfprintf_r+0x52>
 800d16e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d172:	b993      	cbnz	r3, 800d19a <_svfprintf_r+0x52>
 800d174:	2140      	movs	r1, #64	; 0x40
 800d176:	4650      	mov	r0, sl
 800d178:	f7fe fc66 	bl	800ba48 <_malloc_r>
 800d17c:	f8cb 0000 	str.w	r0, [fp]
 800d180:	f8cb 0010 	str.w	r0, [fp, #16]
 800d184:	b930      	cbnz	r0, 800d194 <_svfprintf_r+0x4c>
 800d186:	230c      	movs	r3, #12
 800d188:	f8ca 3000 	str.w	r3, [sl]
 800d18c:	f04f 30ff 	mov.w	r0, #4294967295
 800d190:	f000 bf95 	b.w	800e0be <_svfprintf_r+0xf76>
 800d194:	2340      	movs	r3, #64	; 0x40
 800d196:	f8cb 3014 	str.w	r3, [fp, #20]
 800d19a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800d400 <_svfprintf_r+0x2b8>
 800d19e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	ac2c      	add	r4, sp, #176	; 0xb0
 800d1a6:	941f      	str	r4, [sp, #124]	; 0x7c
 800d1a8:	9321      	str	r3, [sp, #132]	; 0x84
 800d1aa:	9320      	str	r3, [sp, #128]	; 0x80
 800d1ac:	9304      	str	r3, [sp, #16]
 800d1ae:	9311      	str	r3, [sp, #68]	; 0x44
 800d1b0:	9310      	str	r3, [sp, #64]	; 0x40
 800d1b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d1b4:	9d05      	ldr	r5, [sp, #20]
 800d1b6:	462b      	mov	r3, r5
 800d1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1bc:	b11a      	cbz	r2, 800d1c6 <_svfprintf_r+0x7e>
 800d1be:	2a25      	cmp	r2, #37	; 0x25
 800d1c0:	d001      	beq.n	800d1c6 <_svfprintf_r+0x7e>
 800d1c2:	461d      	mov	r5, r3
 800d1c4:	e7f7      	b.n	800d1b6 <_svfprintf_r+0x6e>
 800d1c6:	9b05      	ldr	r3, [sp, #20]
 800d1c8:	1aee      	subs	r6, r5, r3
 800d1ca:	d017      	beq.n	800d1fc <_svfprintf_r+0xb4>
 800d1cc:	e884 0048 	stmia.w	r4, {r3, r6}
 800d1d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1d2:	4433      	add	r3, r6
 800d1d4:	9321      	str	r3, [sp, #132]	; 0x84
 800d1d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d1d8:	3301      	adds	r3, #1
 800d1da:	2b07      	cmp	r3, #7
 800d1dc:	9320      	str	r3, [sp, #128]	; 0x80
 800d1de:	dc01      	bgt.n	800d1e4 <_svfprintf_r+0x9c>
 800d1e0:	3408      	adds	r4, #8
 800d1e2:	e008      	b.n	800d1f6 <_svfprintf_r+0xae>
 800d1e4:	aa1f      	add	r2, sp, #124	; 0x7c
 800d1e6:	4659      	mov	r1, fp
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	f004 fbba 	bl	8011962 <__ssprint_r>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f040 862c 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d1f4:	ac2c      	add	r4, sp, #176	; 0xb0
 800d1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f8:	4433      	add	r3, r6
 800d1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d1fc:	782b      	ldrb	r3, [r5, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 861d 	beq.w	800de3e <_svfprintf_r+0xcf6>
 800d204:	2200      	movs	r2, #0
 800d206:	1c6b      	adds	r3, r5, #1
 800d208:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d20c:	4611      	mov	r1, r2
 800d20e:	f04f 39ff 	mov.w	r9, #4294967295
 800d212:	9209      	str	r2, [sp, #36]	; 0x24
 800d214:	4615      	mov	r5, r2
 800d216:	200a      	movs	r0, #10
 800d218:	1c5e      	adds	r6, r3, #1
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	9605      	str	r6, [sp, #20]
 800d21e:	9302      	str	r3, [sp, #8]
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	3b20      	subs	r3, #32
 800d224:	2b58      	cmp	r3, #88	; 0x58
 800d226:	f200 8263 	bhi.w	800d6f0 <_svfprintf_r+0x5a8>
 800d22a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d22e:	005c      	.short	0x005c
 800d230:	02610261 	.word	0x02610261
 800d234:	0261006b 	.word	0x0261006b
 800d238:	02610261 	.word	0x02610261
 800d23c:	02610261 	.word	0x02610261
 800d240:	006e0261 	.word	0x006e0261
 800d244:	02610059 	.word	0x02610059
 800d248:	007c0079 	.word	0x007c0079
 800d24c:	00a30261 	.word	0x00a30261
 800d250:	00a600a6 	.word	0x00a600a6
 800d254:	00a600a6 	.word	0x00a600a6
 800d258:	00a600a6 	.word	0x00a600a6
 800d25c:	00a600a6 	.word	0x00a600a6
 800d260:	026100a6 	.word	0x026100a6
 800d264:	02610261 	.word	0x02610261
 800d268:	02610261 	.word	0x02610261
 800d26c:	02610261 	.word	0x02610261
 800d270:	02610261 	.word	0x02610261
 800d274:	00d60261 	.word	0x00d60261
 800d278:	0261010b 	.word	0x0261010b
 800d27c:	0261010b 	.word	0x0261010b
 800d280:	02610261 	.word	0x02610261
 800d284:	00b90261 	.word	0x00b90261
 800d288:	02610261 	.word	0x02610261
 800d28c:	02610152 	.word	0x02610152
 800d290:	02610261 	.word	0x02610261
 800d294:	02610261 	.word	0x02610261
 800d298:	02610199 	.word	0x02610199
 800d29c:	00660261 	.word	0x00660261
 800d2a0:	02610261 	.word	0x02610261
 800d2a4:	02610261 	.word	0x02610261
 800d2a8:	02610261 	.word	0x02610261
 800d2ac:	02610261 	.word	0x02610261
 800d2b0:	02610261 	.word	0x02610261
 800d2b4:	006100cd 	.word	0x006100cd
 800d2b8:	010b010b 	.word	0x010b010b
 800d2bc:	00bc010b 	.word	0x00bc010b
 800d2c0:	02610061 	.word	0x02610061
 800d2c4:	00bf0261 	.word	0x00bf0261
 800d2c8:	01340261 	.word	0x01340261
 800d2cc:	016f0154 	.word	0x016f0154
 800d2d0:	026100ca 	.word	0x026100ca
 800d2d4:	02610180 	.word	0x02610180
 800d2d8:	0261019b 	.word	0x0261019b
 800d2dc:	01b30261 	.word	0x01b30261
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	212b      	movs	r1, #43	; 0x2b
 800d2e4:	e002      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d2e6:	b909      	cbnz	r1, 800d2ec <_svfprintf_r+0x1a4>
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	2120      	movs	r1, #32
 800d2ec:	9b05      	ldr	r3, [sp, #20]
 800d2ee:	e793      	b.n	800d218 <_svfprintf_r+0xd0>
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	d077      	beq.n	800d3e4 <_svfprintf_r+0x29c>
 800d2f4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d2f8:	e074      	b.n	800d3e4 <_svfprintf_r+0x29c>
 800d2fa:	b10a      	cbz	r2, 800d300 <_svfprintf_r+0x1b8>
 800d2fc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d300:	4b41      	ldr	r3, [pc, #260]	; (800d408 <_svfprintf_r+0x2c0>)
 800d302:	e14b      	b.n	800d59c <_svfprintf_r+0x454>
 800d304:	f045 0501 	orr.w	r5, r5, #1
 800d308:	e7f0      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d30a:	683e      	ldr	r6, [r7, #0]
 800d30c:	9609      	str	r6, [sp, #36]	; 0x24
 800d30e:	2e00      	cmp	r6, #0
 800d310:	f107 0304 	add.w	r3, r7, #4
 800d314:	db01      	blt.n	800d31a <_svfprintf_r+0x1d2>
 800d316:	461f      	mov	r7, r3
 800d318:	e7e8      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d31a:	4276      	negs	r6, r6
 800d31c:	9609      	str	r6, [sp, #36]	; 0x24
 800d31e:	461f      	mov	r7, r3
 800d320:	f045 0504 	orr.w	r5, r5, #4
 800d324:	e7e2      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d326:	9e05      	ldr	r6, [sp, #20]
 800d328:	9b05      	ldr	r3, [sp, #20]
 800d32a:	7836      	ldrb	r6, [r6, #0]
 800d32c:	9602      	str	r6, [sp, #8]
 800d32e:	2e2a      	cmp	r6, #42	; 0x2a
 800d330:	f103 0301 	add.w	r3, r3, #1
 800d334:	d002      	beq.n	800d33c <_svfprintf_r+0x1f4>
 800d336:	f04f 0900 	mov.w	r9, #0
 800d33a:	e00a      	b.n	800d352 <_svfprintf_r+0x20a>
 800d33c:	f8d7 9000 	ldr.w	r9, [r7]
 800d340:	9305      	str	r3, [sp, #20]
 800d342:	1d3e      	adds	r6, r7, #4
 800d344:	f1b9 0f00 	cmp.w	r9, #0
 800d348:	4637      	mov	r7, r6
 800d34a:	dacf      	bge.n	800d2ec <_svfprintf_r+0x1a4>
 800d34c:	f04f 39ff 	mov.w	r9, #4294967295
 800d350:	e7cc      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d352:	9305      	str	r3, [sp, #20]
 800d354:	9b02      	ldr	r3, [sp, #8]
 800d356:	3b30      	subs	r3, #48	; 0x30
 800d358:	2b09      	cmp	r3, #9
 800d35a:	d808      	bhi.n	800d36e <_svfprintf_r+0x226>
 800d35c:	fb00 3909 	mla	r9, r0, r9, r3
 800d360:	9b05      	ldr	r3, [sp, #20]
 800d362:	461e      	mov	r6, r3
 800d364:	f816 3b01 	ldrb.w	r3, [r6], #1
 800d368:	9302      	str	r3, [sp, #8]
 800d36a:	4633      	mov	r3, r6
 800d36c:	e7f1      	b.n	800d352 <_svfprintf_r+0x20a>
 800d36e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800d372:	e755      	b.n	800d220 <_svfprintf_r+0xd8>
 800d374:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800d378:	e7b8      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d37a:	2300      	movs	r3, #0
 800d37c:	9309      	str	r3, [sp, #36]	; 0x24
 800d37e:	9b02      	ldr	r3, [sp, #8]
 800d380:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d382:	3b30      	subs	r3, #48	; 0x30
 800d384:	fb00 3306 	mla	r3, r0, r6, r3
 800d388:	9309      	str	r3, [sp, #36]	; 0x24
 800d38a:	9b05      	ldr	r3, [sp, #20]
 800d38c:	461e      	mov	r6, r3
 800d38e:	f816 3b01 	ldrb.w	r3, [r6], #1
 800d392:	9302      	str	r3, [sp, #8]
 800d394:	9b02      	ldr	r3, [sp, #8]
 800d396:	9605      	str	r6, [sp, #20]
 800d398:	3b30      	subs	r3, #48	; 0x30
 800d39a:	2b09      	cmp	r3, #9
 800d39c:	d9ef      	bls.n	800d37e <_svfprintf_r+0x236>
 800d39e:	e73f      	b.n	800d220 <_svfprintf_r+0xd8>
 800d3a0:	f045 0508 	orr.w	r5, r5, #8
 800d3a4:	e7a2      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d3a6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800d3aa:	e79f      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d3ac:	9b05      	ldr	r3, [sp, #20]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	2b6c      	cmp	r3, #108	; 0x6c
 800d3b2:	d103      	bne.n	800d3bc <_svfprintf_r+0x274>
 800d3b4:	9b05      	ldr	r3, [sp, #20]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	9305      	str	r3, [sp, #20]
 800d3ba:	e002      	b.n	800d3c2 <_svfprintf_r+0x27a>
 800d3bc:	f045 0510 	orr.w	r5, r5, #16
 800d3c0:	e794      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d3c2:	f045 0520 	orr.w	r5, r5, #32
 800d3c6:	e791      	b.n	800d2ec <_svfprintf_r+0x1a4>
 800d3c8:	1d3b      	adds	r3, r7, #4
 800d3ca:	9303      	str	r3, [sp, #12]
 800d3cc:	2600      	movs	r6, #0
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800d3d4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800d3d8:	e199      	b.n	800d70e <_svfprintf_r+0x5c6>
 800d3da:	b10a      	cbz	r2, 800d3e0 <_svfprintf_r+0x298>
 800d3dc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d3e0:	f045 0510 	orr.w	r5, r5, #16
 800d3e4:	06aa      	lsls	r2, r5, #26
 800d3e6:	d511      	bpl.n	800d40c <_svfprintf_r+0x2c4>
 800d3e8:	3707      	adds	r7, #7
 800d3ea:	f027 0707 	bic.w	r7, r7, #7
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	9303      	str	r3, [sp, #12]
 800d3f4:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d3f8:	e017      	b.n	800d42a <_svfprintf_r+0x2e2>
 800d3fa:	bf00      	nop
 800d3fc:	f3af 8000 	nop.w
	...
 800d408:	08015388 	.word	0x08015388
 800d40c:	f015 0f10 	tst.w	r5, #16
 800d410:	f107 0304 	add.w	r3, r7, #4
 800d414:	d002      	beq.n	800d41c <_svfprintf_r+0x2d4>
 800d416:	9303      	str	r3, [sp, #12]
 800d418:	683e      	ldr	r6, [r7, #0]
 800d41a:	e005      	b.n	800d428 <_svfprintf_r+0x2e0>
 800d41c:	683e      	ldr	r6, [r7, #0]
 800d41e:	9303      	str	r3, [sp, #12]
 800d420:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d424:	bf18      	it	ne
 800d426:	b236      	sxthne	r6, r6
 800d428:	17f7      	asrs	r7, r6, #31
 800d42a:	2e00      	cmp	r6, #0
 800d42c:	f177 0300 	sbcs.w	r3, r7, #0
 800d430:	f280 80de 	bge.w	800d5f0 <_svfprintf_r+0x4a8>
 800d434:	4276      	negs	r6, r6
 800d436:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d43a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800d43e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d442:	e0d5      	b.n	800d5f0 <_svfprintf_r+0x4a8>
 800d444:	b10a      	cbz	r2, 800d44a <_svfprintf_r+0x302>
 800d446:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d44a:	3707      	adds	r7, #7
 800d44c:	f027 0707 	bic.w	r7, r7, #7
 800d450:	f107 0308 	add.w	r3, r7, #8
 800d454:	9303      	str	r3, [sp, #12]
 800d456:	ed97 7b00 	vldr	d7, [r7]
 800d45a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d45e:	9b06      	ldr	r3, [sp, #24]
 800d460:	9312      	str	r3, [sp, #72]	; 0x48
 800d462:	9b07      	ldr	r3, [sp, #28]
 800d464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d468:	9313      	str	r3, [sp, #76]	; 0x4c
 800d46a:	f04f 32ff 	mov.w	r2, #4294967295
 800d46e:	4bab      	ldr	r3, [pc, #684]	; (800d71c <_svfprintf_r+0x5d4>)
 800d470:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d474:	f7f3 fb76 	bl	8000b64 <__aeabi_dcmpun>
 800d478:	2800      	cmp	r0, #0
 800d47a:	f040 84f1 	bne.w	800de60 <_svfprintf_r+0xd18>
 800d47e:	f04f 32ff 	mov.w	r2, #4294967295
 800d482:	4ba6      	ldr	r3, [pc, #664]	; (800d71c <_svfprintf_r+0x5d4>)
 800d484:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d488:	f7f3 fb4e 	bl	8000b28 <__aeabi_dcmple>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	f040 84e7 	bne.w	800de60 <_svfprintf_r+0xd18>
 800d492:	f000 bdfd 	b.w	800e090 <_svfprintf_r+0xf48>
 800d496:	b10a      	cbz	r2, 800d49c <_svfprintf_r+0x354>
 800d498:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d49c:	f015 0f20 	tst.w	r5, #32
 800d4a0:	f107 0304 	add.w	r3, r7, #4
 800d4a4:	d007      	beq.n	800d4b6 <_svfprintf_r+0x36e>
 800d4a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	17ce      	asrs	r6, r1, #31
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	e9c2 0100 	strd	r0, r1, [r2]
 800d4b4:	e00b      	b.n	800d4ce <_svfprintf_r+0x386>
 800d4b6:	06e9      	lsls	r1, r5, #27
 800d4b8:	d406      	bmi.n	800d4c8 <_svfprintf_r+0x380>
 800d4ba:	066a      	lsls	r2, r5, #25
 800d4bc:	d504      	bpl.n	800d4c8 <_svfprintf_r+0x380>
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800d4c4:	8011      	strh	r1, [r2, #0]
 800d4c6:	e002      	b.n	800d4ce <_svfprintf_r+0x386>
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d4cc:	6011      	str	r1, [r2, #0]
 800d4ce:	461f      	mov	r7, r3
 800d4d0:	e670      	b.n	800d1b4 <_svfprintf_r+0x6c>
 800d4d2:	f045 0510 	orr.w	r5, r5, #16
 800d4d6:	f015 0320 	ands.w	r3, r5, #32
 800d4da:	d009      	beq.n	800d4f0 <_svfprintf_r+0x3a8>
 800d4dc:	3707      	adds	r7, #7
 800d4de:	f027 0707 	bic.w	r7, r7, #7
 800d4e2:	f107 0308 	add.w	r3, r7, #8
 800d4e6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d4ea:	9303      	str	r3, [sp, #12]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e07b      	b.n	800d5e8 <_svfprintf_r+0x4a0>
 800d4f0:	1d3a      	adds	r2, r7, #4
 800d4f2:	f015 0110 	ands.w	r1, r5, #16
 800d4f6:	9203      	str	r2, [sp, #12]
 800d4f8:	d105      	bne.n	800d506 <_svfprintf_r+0x3be>
 800d4fa:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800d4fe:	d002      	beq.n	800d506 <_svfprintf_r+0x3be>
 800d500:	883e      	ldrh	r6, [r7, #0]
 800d502:	2700      	movs	r7, #0
 800d504:	e7f2      	b.n	800d4ec <_svfprintf_r+0x3a4>
 800d506:	683e      	ldr	r6, [r7, #0]
 800d508:	2700      	movs	r7, #0
 800d50a:	e06d      	b.n	800d5e8 <_svfprintf_r+0x4a0>
 800d50c:	1d3b      	adds	r3, r7, #4
 800d50e:	9303      	str	r3, [sp, #12]
 800d510:	2330      	movs	r3, #48	; 0x30
 800d512:	2278      	movs	r2, #120	; 0x78
 800d514:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800d518:	4b81      	ldr	r3, [pc, #516]	; (800d720 <_svfprintf_r+0x5d8>)
 800d51a:	683e      	ldr	r6, [r7, #0]
 800d51c:	9311      	str	r3, [sp, #68]	; 0x44
 800d51e:	2700      	movs	r7, #0
 800d520:	f045 0502 	orr.w	r5, r5, #2
 800d524:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800d528:	2302      	movs	r3, #2
 800d52a:	9202      	str	r2, [sp, #8]
 800d52c:	e05c      	b.n	800d5e8 <_svfprintf_r+0x4a0>
 800d52e:	2600      	movs	r6, #0
 800d530:	1d3b      	adds	r3, r7, #4
 800d532:	45b1      	cmp	r9, r6
 800d534:	9303      	str	r3, [sp, #12]
 800d536:	f8d7 8000 	ldr.w	r8, [r7]
 800d53a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800d53e:	db0a      	blt.n	800d556 <_svfprintf_r+0x40e>
 800d540:	464a      	mov	r2, r9
 800d542:	4631      	mov	r1, r6
 800d544:	4640      	mov	r0, r8
 800d546:	f7f2 fe6b 	bl	8000220 <memchr>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	f000 80ea 	beq.w	800d724 <_svfprintf_r+0x5dc>
 800d550:	ebc8 0900 	rsb	r9, r8, r0
 800d554:	e0e7      	b.n	800d726 <_svfprintf_r+0x5de>
 800d556:	4640      	mov	r0, r8
 800d558:	f7f2 fe5a 	bl	8000210 <strlen>
 800d55c:	4681      	mov	r9, r0
 800d55e:	e0e2      	b.n	800d726 <_svfprintf_r+0x5de>
 800d560:	f045 0510 	orr.w	r5, r5, #16
 800d564:	06ae      	lsls	r6, r5, #26
 800d566:	d508      	bpl.n	800d57a <_svfprintf_r+0x432>
 800d568:	3707      	adds	r7, #7
 800d56a:	f027 0707 	bic.w	r7, r7, #7
 800d56e:	f107 0308 	add.w	r3, r7, #8
 800d572:	9303      	str	r3, [sp, #12]
 800d574:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d578:	e00a      	b.n	800d590 <_svfprintf_r+0x448>
 800d57a:	1d3b      	adds	r3, r7, #4
 800d57c:	f015 0f10 	tst.w	r5, #16
 800d580:	9303      	str	r3, [sp, #12]
 800d582:	d103      	bne.n	800d58c <_svfprintf_r+0x444>
 800d584:	0668      	lsls	r0, r5, #25
 800d586:	d501      	bpl.n	800d58c <_svfprintf_r+0x444>
 800d588:	883e      	ldrh	r6, [r7, #0]
 800d58a:	e000      	b.n	800d58e <_svfprintf_r+0x446>
 800d58c:	683e      	ldr	r6, [r7, #0]
 800d58e:	2700      	movs	r7, #0
 800d590:	2301      	movs	r3, #1
 800d592:	e029      	b.n	800d5e8 <_svfprintf_r+0x4a0>
 800d594:	b10a      	cbz	r2, 800d59a <_svfprintf_r+0x452>
 800d596:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d59a:	4b61      	ldr	r3, [pc, #388]	; (800d720 <_svfprintf_r+0x5d8>)
 800d59c:	9311      	str	r3, [sp, #68]	; 0x44
 800d59e:	06a9      	lsls	r1, r5, #26
 800d5a0:	d508      	bpl.n	800d5b4 <_svfprintf_r+0x46c>
 800d5a2:	3707      	adds	r7, #7
 800d5a4:	f027 0707 	bic.w	r7, r7, #7
 800d5a8:	f107 0308 	add.w	r3, r7, #8
 800d5ac:	9303      	str	r3, [sp, #12]
 800d5ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d5b2:	e00a      	b.n	800d5ca <_svfprintf_r+0x482>
 800d5b4:	1d3b      	adds	r3, r7, #4
 800d5b6:	f015 0f10 	tst.w	r5, #16
 800d5ba:	9303      	str	r3, [sp, #12]
 800d5bc:	d103      	bne.n	800d5c6 <_svfprintf_r+0x47e>
 800d5be:	066a      	lsls	r2, r5, #25
 800d5c0:	d501      	bpl.n	800d5c6 <_svfprintf_r+0x47e>
 800d5c2:	883e      	ldrh	r6, [r7, #0]
 800d5c4:	e000      	b.n	800d5c8 <_svfprintf_r+0x480>
 800d5c6:	683e      	ldr	r6, [r7, #0]
 800d5c8:	2700      	movs	r7, #0
 800d5ca:	07eb      	lsls	r3, r5, #31
 800d5cc:	d50b      	bpl.n	800d5e6 <_svfprintf_r+0x49e>
 800d5ce:	ea56 0307 	orrs.w	r3, r6, r7
 800d5d2:	d008      	beq.n	800d5e6 <_svfprintf_r+0x49e>
 800d5d4:	2330      	movs	r3, #48	; 0x30
 800d5d6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800d5da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d5de:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800d5e2:	f045 0502 	orr.w	r5, r5, #2
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d5ee:	e000      	b.n	800d5f2 <_svfprintf_r+0x4aa>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f1b9 0f00 	cmp.w	r9, #0
 800d5f6:	f2c0 855c 	blt.w	800e0b2 <_svfprintf_r+0xf6a>
 800d5fa:	ea56 0207 	orrs.w	r2, r6, r7
 800d5fe:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800d602:	d103      	bne.n	800d60c <_svfprintf_r+0x4c4>
 800d604:	f1b9 0f00 	cmp.w	r9, #0
 800d608:	d05f      	beq.n	800d6ca <_svfprintf_r+0x582>
 800d60a:	e006      	b.n	800d61a <_svfprintf_r+0x4d2>
 800d60c:	460d      	mov	r5, r1
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d025      	beq.n	800d65e <_svfprintf_r+0x516>
 800d612:	2b02      	cmp	r3, #2
 800d614:	d046      	beq.n	800d6a4 <_svfprintf_r+0x55c>
 800d616:	4629      	mov	r1, r5
 800d618:	e007      	b.n	800d62a <_svfprintf_r+0x4e2>
 800d61a:	460d      	mov	r5, r1
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d022      	beq.n	800d666 <_svfprintf_r+0x51e>
 800d620:	2b02      	cmp	r3, #2
 800d622:	d03d      	beq.n	800d6a0 <_svfprintf_r+0x558>
 800d624:	4629      	mov	r1, r5
 800d626:	2600      	movs	r6, #0
 800d628:	2700      	movs	r7, #0
 800d62a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800d62e:	08f2      	lsrs	r2, r6, #3
 800d630:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800d634:	08f8      	lsrs	r0, r7, #3
 800d636:	f006 0307 	and.w	r3, r6, #7
 800d63a:	4607      	mov	r7, r0
 800d63c:	4616      	mov	r6, r2
 800d63e:	3330      	adds	r3, #48	; 0x30
 800d640:	ea56 0207 	orrs.w	r2, r6, r7
 800d644:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800d648:	d1f1      	bne.n	800d62e <_svfprintf_r+0x4e6>
 800d64a:	07e8      	lsls	r0, r5, #31
 800d64c:	d548      	bpl.n	800d6e0 <_svfprintf_r+0x598>
 800d64e:	2b30      	cmp	r3, #48	; 0x30
 800d650:	d046      	beq.n	800d6e0 <_svfprintf_r+0x598>
 800d652:	2330      	movs	r3, #48	; 0x30
 800d654:	f808 3c01 	strb.w	r3, [r8, #-1]
 800d658:	f108 38ff 	add.w	r8, r8, #4294967295
 800d65c:	e040      	b.n	800d6e0 <_svfprintf_r+0x598>
 800d65e:	2f00      	cmp	r7, #0
 800d660:	bf08      	it	eq
 800d662:	2e0a      	cmpeq	r6, #10
 800d664:	d205      	bcs.n	800d672 <_svfprintf_r+0x52a>
 800d666:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800d66a:	3630      	adds	r6, #48	; 0x30
 800d66c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800d670:	e029      	b.n	800d6c6 <_svfprintf_r+0x57e>
 800d672:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800d676:	4630      	mov	r0, r6
 800d678:	4639      	mov	r1, r7
 800d67a:	220a      	movs	r2, #10
 800d67c:	2300      	movs	r3, #0
 800d67e:	f7f3 fb1f 	bl	8000cc0 <__aeabi_uldivmod>
 800d682:	3230      	adds	r2, #48	; 0x30
 800d684:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800d688:	2300      	movs	r3, #0
 800d68a:	4630      	mov	r0, r6
 800d68c:	4639      	mov	r1, r7
 800d68e:	220a      	movs	r2, #10
 800d690:	f7f3 fb16 	bl	8000cc0 <__aeabi_uldivmod>
 800d694:	4606      	mov	r6, r0
 800d696:	460f      	mov	r7, r1
 800d698:	ea56 0307 	orrs.w	r3, r6, r7
 800d69c:	d1eb      	bne.n	800d676 <_svfprintf_r+0x52e>
 800d69e:	e012      	b.n	800d6c6 <_svfprintf_r+0x57e>
 800d6a0:	2600      	movs	r6, #0
 800d6a2:	2700      	movs	r7, #0
 800d6a4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800d6a8:	f006 030f 	and.w	r3, r6, #15
 800d6ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6ae:	5cd3      	ldrb	r3, [r2, r3]
 800d6b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800d6b4:	0933      	lsrs	r3, r6, #4
 800d6b6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800d6ba:	093a      	lsrs	r2, r7, #4
 800d6bc:	461e      	mov	r6, r3
 800d6be:	4617      	mov	r7, r2
 800d6c0:	ea56 0307 	orrs.w	r3, r6, r7
 800d6c4:	d1f0      	bne.n	800d6a8 <_svfprintf_r+0x560>
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	e00a      	b.n	800d6e0 <_svfprintf_r+0x598>
 800d6ca:	b93b      	cbnz	r3, 800d6dc <_svfprintf_r+0x594>
 800d6cc:	07ea      	lsls	r2, r5, #31
 800d6ce:	d505      	bpl.n	800d6dc <_svfprintf_r+0x594>
 800d6d0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800d6d4:	2330      	movs	r3, #48	; 0x30
 800d6d6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800d6da:	e001      	b.n	800d6e0 <_svfprintf_r+0x598>
 800d6dc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800d6e0:	464e      	mov	r6, r9
 800d6e2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800d6e6:	ebc8 0909 	rsb	r9, r8, r9
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	2700      	movs	r7, #0
 800d6ee:	e01b      	b.n	800d728 <_svfprintf_r+0x5e0>
 800d6f0:	b10a      	cbz	r2, 800d6f6 <_svfprintf_r+0x5ae>
 800d6f2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800d6f6:	9b02      	ldr	r3, [sp, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f000 83a0 	beq.w	800de3e <_svfprintf_r+0xcf6>
 800d6fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d702:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800d706:	2600      	movs	r6, #0
 800d708:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800d70c:	9703      	str	r7, [sp, #12]
 800d70e:	f04f 0901 	mov.w	r9, #1
 800d712:	4637      	mov	r7, r6
 800d714:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800d718:	e006      	b.n	800d728 <_svfprintf_r+0x5e0>
 800d71a:	bf00      	nop
 800d71c:	7fefffff 	.word	0x7fefffff
 800d720:	08015399 	.word	0x08015399
 800d724:	4606      	mov	r6, r0
 800d726:	4637      	mov	r7, r6
 800d728:	454e      	cmp	r6, r9
 800d72a:	4633      	mov	r3, r6
 800d72c:	bfb8      	it	lt
 800d72e:	464b      	movlt	r3, r9
 800d730:	930b      	str	r3, [sp, #44]	; 0x2c
 800d732:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800d736:	b113      	cbz	r3, 800d73e <_svfprintf_r+0x5f6>
 800d738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d73a:	3301      	adds	r3, #1
 800d73c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d73e:	f015 0302 	ands.w	r3, r5, #2
 800d742:	9314      	str	r3, [sp, #80]	; 0x50
 800d744:	bf1e      	ittt	ne
 800d746:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800d748:	3302      	addne	r3, #2
 800d74a:	930b      	strne	r3, [sp, #44]	; 0x2c
 800d74c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800d750:	9315      	str	r3, [sp, #84]	; 0x54
 800d752:	d139      	bne.n	800d7c8 <_svfprintf_r+0x680>
 800d754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d758:	1a9b      	subs	r3, r3, r2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	930c      	str	r3, [sp, #48]	; 0x30
 800d75e:	dd33      	ble.n	800d7c8 <_svfprintf_r+0x680>
 800d760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d762:	2b10      	cmp	r3, #16
 800d764:	4ba6      	ldr	r3, [pc, #664]	; (800da00 <_svfprintf_r+0x8b8>)
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	dd18      	ble.n	800d79c <_svfprintf_r+0x654>
 800d76a:	2310      	movs	r3, #16
 800d76c:	6063      	str	r3, [r4, #4]
 800d76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d770:	3310      	adds	r3, #16
 800d772:	9321      	str	r3, [sp, #132]	; 0x84
 800d774:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d776:	3301      	adds	r3, #1
 800d778:	2b07      	cmp	r3, #7
 800d77a:	9320      	str	r3, [sp, #128]	; 0x80
 800d77c:	dc01      	bgt.n	800d782 <_svfprintf_r+0x63a>
 800d77e:	3408      	adds	r4, #8
 800d780:	e008      	b.n	800d794 <_svfprintf_r+0x64c>
 800d782:	aa1f      	add	r2, sp, #124	; 0x7c
 800d784:	4659      	mov	r1, fp
 800d786:	4650      	mov	r0, sl
 800d788:	f004 f8eb 	bl	8011962 <__ssprint_r>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	f040 835d 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d792:	ac2c      	add	r4, sp, #176	; 0xb0
 800d794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d796:	3b10      	subs	r3, #16
 800d798:	930c      	str	r3, [sp, #48]	; 0x30
 800d79a:	e7e1      	b.n	800d760 <_svfprintf_r+0x618>
 800d79c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d79e:	6063      	str	r3, [r4, #4]
 800d7a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7a4:	4413      	add	r3, r2
 800d7a6:	9321      	str	r3, [sp, #132]	; 0x84
 800d7a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	2b07      	cmp	r3, #7
 800d7ae:	9320      	str	r3, [sp, #128]	; 0x80
 800d7b0:	dc01      	bgt.n	800d7b6 <_svfprintf_r+0x66e>
 800d7b2:	3408      	adds	r4, #8
 800d7b4:	e008      	b.n	800d7c8 <_svfprintf_r+0x680>
 800d7b6:	aa1f      	add	r2, sp, #124	; 0x7c
 800d7b8:	4659      	mov	r1, fp
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	f004 f8d1 	bl	8011962 <__ssprint_r>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	f040 8343 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d7c6:	ac2c      	add	r4, sp, #176	; 0xb0
 800d7c8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800d7cc:	b1bb      	cbz	r3, 800d7fe <_svfprintf_r+0x6b6>
 800d7ce:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	6063      	str	r3, [r4, #4]
 800d7d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7da:	3301      	adds	r3, #1
 800d7dc:	9321      	str	r3, [sp, #132]	; 0x84
 800d7de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	2b07      	cmp	r3, #7
 800d7e4:	9320      	str	r3, [sp, #128]	; 0x80
 800d7e6:	dc01      	bgt.n	800d7ec <_svfprintf_r+0x6a4>
 800d7e8:	3408      	adds	r4, #8
 800d7ea:	e008      	b.n	800d7fe <_svfprintf_r+0x6b6>
 800d7ec:	aa1f      	add	r2, sp, #124	; 0x7c
 800d7ee:	4659      	mov	r1, fp
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	f004 f8b6 	bl	8011962 <__ssprint_r>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f040 8328 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d7fc:	ac2c      	add	r4, sp, #176	; 0xb0
 800d7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d800:	b1b3      	cbz	r3, 800d830 <_svfprintf_r+0x6e8>
 800d802:	ab18      	add	r3, sp, #96	; 0x60
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	2302      	movs	r3, #2
 800d808:	6063      	str	r3, [r4, #4]
 800d80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d80c:	3302      	adds	r3, #2
 800d80e:	9321      	str	r3, [sp, #132]	; 0x84
 800d810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d812:	3301      	adds	r3, #1
 800d814:	2b07      	cmp	r3, #7
 800d816:	9320      	str	r3, [sp, #128]	; 0x80
 800d818:	dc01      	bgt.n	800d81e <_svfprintf_r+0x6d6>
 800d81a:	3408      	adds	r4, #8
 800d81c:	e008      	b.n	800d830 <_svfprintf_r+0x6e8>
 800d81e:	aa1f      	add	r2, sp, #124	; 0x7c
 800d820:	4659      	mov	r1, fp
 800d822:	4650      	mov	r0, sl
 800d824:	f004 f89d 	bl	8011962 <__ssprint_r>
 800d828:	2800      	cmp	r0, #0
 800d82a:	f040 830f 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d82e:	ac2c      	add	r4, sp, #176	; 0xb0
 800d830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d832:	2b80      	cmp	r3, #128	; 0x80
 800d834:	d135      	bne.n	800d8a2 <_svfprintf_r+0x75a>
 800d836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d83a:	1a9b      	subs	r3, r3, r2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dd30      	ble.n	800d8a2 <_svfprintf_r+0x75a>
 800d840:	4a70      	ldr	r2, [pc, #448]	; (800da04 <_svfprintf_r+0x8bc>)
 800d842:	6022      	str	r2, [r4, #0]
 800d844:	2b10      	cmp	r3, #16
 800d846:	dd18      	ble.n	800d87a <_svfprintf_r+0x732>
 800d848:	2210      	movs	r2, #16
 800d84a:	6062      	str	r2, [r4, #4]
 800d84c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d84e:	3210      	adds	r2, #16
 800d850:	9221      	str	r2, [sp, #132]	; 0x84
 800d852:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d854:	3201      	adds	r2, #1
 800d856:	2a07      	cmp	r2, #7
 800d858:	9220      	str	r2, [sp, #128]	; 0x80
 800d85a:	dc01      	bgt.n	800d860 <_svfprintf_r+0x718>
 800d85c:	3408      	adds	r4, #8
 800d85e:	e00a      	b.n	800d876 <_svfprintf_r+0x72e>
 800d860:	aa1f      	add	r2, sp, #124	; 0x7c
 800d862:	4659      	mov	r1, fp
 800d864:	4650      	mov	r0, sl
 800d866:	930c      	str	r3, [sp, #48]	; 0x30
 800d868:	f004 f87b 	bl	8011962 <__ssprint_r>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	f040 82ed 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d874:	ac2c      	add	r4, sp, #176	; 0xb0
 800d876:	3b10      	subs	r3, #16
 800d878:	e7e2      	b.n	800d840 <_svfprintf_r+0x6f8>
 800d87a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d87c:	6063      	str	r3, [r4, #4]
 800d87e:	4413      	add	r3, r2
 800d880:	9321      	str	r3, [sp, #132]	; 0x84
 800d882:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d884:	3301      	adds	r3, #1
 800d886:	2b07      	cmp	r3, #7
 800d888:	9320      	str	r3, [sp, #128]	; 0x80
 800d88a:	dc01      	bgt.n	800d890 <_svfprintf_r+0x748>
 800d88c:	3408      	adds	r4, #8
 800d88e:	e008      	b.n	800d8a2 <_svfprintf_r+0x75a>
 800d890:	aa1f      	add	r2, sp, #124	; 0x7c
 800d892:	4659      	mov	r1, fp
 800d894:	4650      	mov	r0, sl
 800d896:	f004 f864 	bl	8011962 <__ssprint_r>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f040 82d6 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d8a0:	ac2c      	add	r4, sp, #176	; 0xb0
 800d8a2:	ebc9 0606 	rsb	r6, r9, r6
 800d8a6:	2e00      	cmp	r6, #0
 800d8a8:	dd2e      	ble.n	800d908 <_svfprintf_r+0x7c0>
 800d8aa:	4b56      	ldr	r3, [pc, #344]	; (800da04 <_svfprintf_r+0x8bc>)
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	2e10      	cmp	r6, #16
 800d8b0:	dd16      	ble.n	800d8e0 <_svfprintf_r+0x798>
 800d8b2:	2310      	movs	r3, #16
 800d8b4:	6063      	str	r3, [r4, #4]
 800d8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8b8:	3310      	adds	r3, #16
 800d8ba:	9321      	str	r3, [sp, #132]	; 0x84
 800d8bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8be:	3301      	adds	r3, #1
 800d8c0:	2b07      	cmp	r3, #7
 800d8c2:	9320      	str	r3, [sp, #128]	; 0x80
 800d8c4:	dc01      	bgt.n	800d8ca <_svfprintf_r+0x782>
 800d8c6:	3408      	adds	r4, #8
 800d8c8:	e008      	b.n	800d8dc <_svfprintf_r+0x794>
 800d8ca:	aa1f      	add	r2, sp, #124	; 0x7c
 800d8cc:	4659      	mov	r1, fp
 800d8ce:	4650      	mov	r0, sl
 800d8d0:	f004 f847 	bl	8011962 <__ssprint_r>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	f040 82b9 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d8da:	ac2c      	add	r4, sp, #176	; 0xb0
 800d8dc:	3e10      	subs	r6, #16
 800d8de:	e7e4      	b.n	800d8aa <_svfprintf_r+0x762>
 800d8e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8e2:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d8e4:	6066      	str	r6, [r4, #4]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	4406      	add	r6, r0
 800d8ea:	2b07      	cmp	r3, #7
 800d8ec:	9621      	str	r6, [sp, #132]	; 0x84
 800d8ee:	9320      	str	r3, [sp, #128]	; 0x80
 800d8f0:	dc01      	bgt.n	800d8f6 <_svfprintf_r+0x7ae>
 800d8f2:	3408      	adds	r4, #8
 800d8f4:	e008      	b.n	800d908 <_svfprintf_r+0x7c0>
 800d8f6:	aa1f      	add	r2, sp, #124	; 0x7c
 800d8f8:	4659      	mov	r1, fp
 800d8fa:	4650      	mov	r0, sl
 800d8fc:	f004 f831 	bl	8011962 <__ssprint_r>
 800d900:	2800      	cmp	r0, #0
 800d902:	f040 82a3 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d906:	ac2c      	add	r4, sp, #176	; 0xb0
 800d908:	05eb      	lsls	r3, r5, #23
 800d90a:	d414      	bmi.n	800d936 <_svfprintf_r+0x7ee>
 800d90c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d90e:	e884 0300 	stmia.w	r4, {r8, r9}
 800d912:	444b      	add	r3, r9
 800d914:	9321      	str	r3, [sp, #132]	; 0x84
 800d916:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d918:	3301      	adds	r3, #1
 800d91a:	2b07      	cmp	r3, #7
 800d91c:	9320      	str	r3, [sp, #128]	; 0x80
 800d91e:	f340 8244 	ble.w	800ddaa <_svfprintf_r+0xc62>
 800d922:	aa1f      	add	r2, sp, #124	; 0x7c
 800d924:	4659      	mov	r1, fp
 800d926:	4650      	mov	r0, sl
 800d928:	f004 f81b 	bl	8011962 <__ssprint_r>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f040 828d 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d932:	ac2c      	add	r4, sp, #176	; 0xb0
 800d934:	e23a      	b.n	800ddac <_svfprintf_r+0xc64>
 800d936:	9b02      	ldr	r3, [sp, #8]
 800d938:	2b65      	cmp	r3, #101	; 0x65
 800d93a:	f340 81ad 	ble.w	800dc98 <_svfprintf_r+0xb50>
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d946:	f7f3 f8db 	bl	8000b00 <__aeabi_dcmpeq>
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d05e      	beq.n	800da0c <_svfprintf_r+0x8c4>
 800d94e:	4b2e      	ldr	r3, [pc, #184]	; (800da08 <_svfprintf_r+0x8c0>)
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	2301      	movs	r3, #1
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d958:	3301      	adds	r3, #1
 800d95a:	9321      	str	r3, [sp, #132]	; 0x84
 800d95c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d95e:	3301      	adds	r3, #1
 800d960:	2b07      	cmp	r3, #7
 800d962:	9320      	str	r3, [sp, #128]	; 0x80
 800d964:	dc01      	bgt.n	800d96a <_svfprintf_r+0x822>
 800d966:	3408      	adds	r4, #8
 800d968:	e008      	b.n	800d97c <_svfprintf_r+0x834>
 800d96a:	aa1f      	add	r2, sp, #124	; 0x7c
 800d96c:	4659      	mov	r1, fp
 800d96e:	4650      	mov	r0, sl
 800d970:	f003 fff7 	bl	8011962 <__ssprint_r>
 800d974:	2800      	cmp	r0, #0
 800d976:	f040 8269 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d97a:	ac2c      	add	r4, sp, #176	; 0xb0
 800d97c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d97e:	9a04      	ldr	r2, [sp, #16]
 800d980:	4293      	cmp	r3, r2
 800d982:	db02      	blt.n	800d98a <_svfprintf_r+0x842>
 800d984:	07ee      	lsls	r6, r5, #31
 800d986:	f140 8211 	bpl.w	800ddac <_svfprintf_r+0xc64>
 800d98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	9b08      	ldr	r3, [sp, #32]
 800d990:	6063      	str	r3, [r4, #4]
 800d992:	9a08      	ldr	r2, [sp, #32]
 800d994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d996:	4413      	add	r3, r2
 800d998:	9321      	str	r3, [sp, #132]	; 0x84
 800d99a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d99c:	3301      	adds	r3, #1
 800d99e:	2b07      	cmp	r3, #7
 800d9a0:	9320      	str	r3, [sp, #128]	; 0x80
 800d9a2:	dc01      	bgt.n	800d9a8 <_svfprintf_r+0x860>
 800d9a4:	3408      	adds	r4, #8
 800d9a6:	e008      	b.n	800d9ba <_svfprintf_r+0x872>
 800d9a8:	aa1f      	add	r2, sp, #124	; 0x7c
 800d9aa:	4659      	mov	r1, fp
 800d9ac:	4650      	mov	r0, sl
 800d9ae:	f003 ffd8 	bl	8011962 <__ssprint_r>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	f040 824a 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d9b8:	ac2c      	add	r4, sp, #176	; 0xb0
 800d9ba:	9b04      	ldr	r3, [sp, #16]
 800d9bc:	1e5e      	subs	r6, r3, #1
 800d9be:	2e00      	cmp	r6, #0
 800d9c0:	f340 81f4 	ble.w	800ddac <_svfprintf_r+0xc64>
 800d9c4:	4f0f      	ldr	r7, [pc, #60]	; (800da04 <_svfprintf_r+0x8bc>)
 800d9c6:	f04f 0810 	mov.w	r8, #16
 800d9ca:	2e10      	cmp	r6, #16
 800d9cc:	f340 8159 	ble.w	800dc82 <_svfprintf_r+0xb3a>
 800d9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9d2:	3310      	adds	r3, #16
 800d9d4:	9321      	str	r3, [sp, #132]	; 0x84
 800d9d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d9d8:	3301      	adds	r3, #1
 800d9da:	2b07      	cmp	r3, #7
 800d9dc:	e884 0180 	stmia.w	r4, {r7, r8}
 800d9e0:	9320      	str	r3, [sp, #128]	; 0x80
 800d9e2:	dc01      	bgt.n	800d9e8 <_svfprintf_r+0x8a0>
 800d9e4:	3408      	adds	r4, #8
 800d9e6:	e008      	b.n	800d9fa <_svfprintf_r+0x8b2>
 800d9e8:	aa1f      	add	r2, sp, #124	; 0x7c
 800d9ea:	4659      	mov	r1, fp
 800d9ec:	4650      	mov	r0, sl
 800d9ee:	f003 ffb8 	bl	8011962 <__ssprint_r>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	f040 822a 	bne.w	800de4c <_svfprintf_r+0xd04>
 800d9f8:	ac2c      	add	r4, sp, #176	; 0xb0
 800d9fa:	3e10      	subs	r6, #16
 800d9fc:	e7e5      	b.n	800d9ca <_svfprintf_r+0x882>
 800d9fe:	bf00      	nop
 800da00:	080153ac 	.word	0x080153ac
 800da04:	08015368 	.word	0x08015368
 800da08:	080153aa 	.word	0x080153aa
 800da0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da0e:	2b00      	cmp	r3, #0
 800da10:	dc7c      	bgt.n	800db0c <_svfprintf_r+0x9c4>
 800da12:	4b9f      	ldr	r3, [pc, #636]	; (800dc90 <_svfprintf_r+0xb48>)
 800da14:	6023      	str	r3, [r4, #0]
 800da16:	2301      	movs	r3, #1
 800da18:	6063      	str	r3, [r4, #4]
 800da1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da1c:	3301      	adds	r3, #1
 800da1e:	9321      	str	r3, [sp, #132]	; 0x84
 800da20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800da22:	3301      	adds	r3, #1
 800da24:	2b07      	cmp	r3, #7
 800da26:	9320      	str	r3, [sp, #128]	; 0x80
 800da28:	dc01      	bgt.n	800da2e <_svfprintf_r+0x8e6>
 800da2a:	3408      	adds	r4, #8
 800da2c:	e008      	b.n	800da40 <_svfprintf_r+0x8f8>
 800da2e:	aa1f      	add	r2, sp, #124	; 0x7c
 800da30:	4659      	mov	r1, fp
 800da32:	4650      	mov	r0, sl
 800da34:	f003 ff95 	bl	8011962 <__ssprint_r>
 800da38:	2800      	cmp	r0, #0
 800da3a:	f040 8207 	bne.w	800de4c <_svfprintf_r+0xd04>
 800da3e:	ac2c      	add	r4, sp, #176	; 0xb0
 800da40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da42:	b923      	cbnz	r3, 800da4e <_svfprintf_r+0x906>
 800da44:	9b04      	ldr	r3, [sp, #16]
 800da46:	b913      	cbnz	r3, 800da4e <_svfprintf_r+0x906>
 800da48:	07e8      	lsls	r0, r5, #31
 800da4a:	f140 81af 	bpl.w	800ddac <_svfprintf_r+0xc64>
 800da4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	9b08      	ldr	r3, [sp, #32]
 800da54:	6063      	str	r3, [r4, #4]
 800da56:	9a08      	ldr	r2, [sp, #32]
 800da58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da5a:	4413      	add	r3, r2
 800da5c:	9321      	str	r3, [sp, #132]	; 0x84
 800da5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800da60:	3301      	adds	r3, #1
 800da62:	2b07      	cmp	r3, #7
 800da64:	9320      	str	r3, [sp, #128]	; 0x80
 800da66:	dc02      	bgt.n	800da6e <_svfprintf_r+0x926>
 800da68:	f104 0308 	add.w	r3, r4, #8
 800da6c:	e008      	b.n	800da80 <_svfprintf_r+0x938>
 800da6e:	aa1f      	add	r2, sp, #124	; 0x7c
 800da70:	4659      	mov	r1, fp
 800da72:	4650      	mov	r0, sl
 800da74:	f003 ff75 	bl	8011962 <__ssprint_r>
 800da78:	2800      	cmp	r0, #0
 800da7a:	f040 81e7 	bne.w	800de4c <_svfprintf_r+0xd04>
 800da7e:	ab2c      	add	r3, sp, #176	; 0xb0
 800da80:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800da82:	4276      	negs	r6, r6
 800da84:	2e00      	cmp	r6, #0
 800da86:	dd30      	ble.n	800daea <_svfprintf_r+0x9a2>
 800da88:	4f82      	ldr	r7, [pc, #520]	; (800dc94 <_svfprintf_r+0xb4c>)
 800da8a:	2410      	movs	r4, #16
 800da8c:	2e10      	cmp	r6, #16
 800da8e:	dd16      	ble.n	800dabe <_svfprintf_r+0x976>
 800da90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da92:	601f      	str	r7, [r3, #0]
 800da94:	3210      	adds	r2, #16
 800da96:	9221      	str	r2, [sp, #132]	; 0x84
 800da98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da9a:	605c      	str	r4, [r3, #4]
 800da9c:	3201      	adds	r2, #1
 800da9e:	2a07      	cmp	r2, #7
 800daa0:	9220      	str	r2, [sp, #128]	; 0x80
 800daa2:	dc01      	bgt.n	800daa8 <_svfprintf_r+0x960>
 800daa4:	3308      	adds	r3, #8
 800daa6:	e008      	b.n	800daba <_svfprintf_r+0x972>
 800daa8:	aa1f      	add	r2, sp, #124	; 0x7c
 800daaa:	4659      	mov	r1, fp
 800daac:	4650      	mov	r0, sl
 800daae:	f003 ff58 	bl	8011962 <__ssprint_r>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	f040 81ca 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dab8:	ab2c      	add	r3, sp, #176	; 0xb0
 800daba:	3e10      	subs	r6, #16
 800dabc:	e7e6      	b.n	800da8c <_svfprintf_r+0x944>
 800dabe:	4a75      	ldr	r2, [pc, #468]	; (800dc94 <_svfprintf_r+0xb4c>)
 800dac0:	e883 0044 	stmia.w	r3, {r2, r6}
 800dac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dac6:	4416      	add	r6, r2
 800dac8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800daca:	9621      	str	r6, [sp, #132]	; 0x84
 800dacc:	3201      	adds	r2, #1
 800dace:	2a07      	cmp	r2, #7
 800dad0:	9220      	str	r2, [sp, #128]	; 0x80
 800dad2:	dc01      	bgt.n	800dad8 <_svfprintf_r+0x990>
 800dad4:	3308      	adds	r3, #8
 800dad6:	e008      	b.n	800daea <_svfprintf_r+0x9a2>
 800dad8:	aa1f      	add	r2, sp, #124	; 0x7c
 800dada:	4659      	mov	r1, fp
 800dadc:	4650      	mov	r0, sl
 800dade:	f003 ff40 	bl	8011962 <__ssprint_r>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	f040 81b2 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dae8:	ab2c      	add	r3, sp, #176	; 0xb0
 800daea:	9a04      	ldr	r2, [sp, #16]
 800daec:	605a      	str	r2, [r3, #4]
 800daee:	9904      	ldr	r1, [sp, #16]
 800daf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800daf2:	f8c3 8000 	str.w	r8, [r3]
 800daf6:	440a      	add	r2, r1
 800daf8:	9221      	str	r2, [sp, #132]	; 0x84
 800dafa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dafc:	3201      	adds	r2, #1
 800dafe:	2a07      	cmp	r2, #7
 800db00:	9220      	str	r2, [sp, #128]	; 0x80
 800db02:	f73f af0e 	bgt.w	800d922 <_svfprintf_r+0x7da>
 800db06:	f103 0408 	add.w	r4, r3, #8
 800db0a:	e14f      	b.n	800ddac <_svfprintf_r+0xc64>
 800db0c:	9b04      	ldr	r3, [sp, #16]
 800db0e:	42bb      	cmp	r3, r7
 800db10:	bfa8      	it	ge
 800db12:	463b      	movge	r3, r7
 800db14:	2b00      	cmp	r3, #0
 800db16:	461e      	mov	r6, r3
 800db18:	dd15      	ble.n	800db46 <_svfprintf_r+0x9fe>
 800db1a:	6063      	str	r3, [r4, #4]
 800db1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db1e:	f8c4 8000 	str.w	r8, [r4]
 800db22:	4433      	add	r3, r6
 800db24:	9321      	str	r3, [sp, #132]	; 0x84
 800db26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db28:	3301      	adds	r3, #1
 800db2a:	2b07      	cmp	r3, #7
 800db2c:	9320      	str	r3, [sp, #128]	; 0x80
 800db2e:	dc01      	bgt.n	800db34 <_svfprintf_r+0x9ec>
 800db30:	3408      	adds	r4, #8
 800db32:	e008      	b.n	800db46 <_svfprintf_r+0x9fe>
 800db34:	aa1f      	add	r2, sp, #124	; 0x7c
 800db36:	4659      	mov	r1, fp
 800db38:	4650      	mov	r0, sl
 800db3a:	f003 ff12 	bl	8011962 <__ssprint_r>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f040 8184 	bne.w	800de4c <_svfprintf_r+0xd04>
 800db44:	ac2c      	add	r4, sp, #176	; 0xb0
 800db46:	2e00      	cmp	r6, #0
 800db48:	bfac      	ite	ge
 800db4a:	1bbe      	subge	r6, r7, r6
 800db4c:	463e      	movlt	r6, r7
 800db4e:	2e00      	cmp	r6, #0
 800db50:	dd30      	ble.n	800dbb4 <_svfprintf_r+0xa6c>
 800db52:	f04f 0910 	mov.w	r9, #16
 800db56:	4b4f      	ldr	r3, [pc, #316]	; (800dc94 <_svfprintf_r+0xb4c>)
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	2e10      	cmp	r6, #16
 800db5c:	dd16      	ble.n	800db8c <_svfprintf_r+0xa44>
 800db5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db60:	f8c4 9004 	str.w	r9, [r4, #4]
 800db64:	3310      	adds	r3, #16
 800db66:	9321      	str	r3, [sp, #132]	; 0x84
 800db68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db6a:	3301      	adds	r3, #1
 800db6c:	2b07      	cmp	r3, #7
 800db6e:	9320      	str	r3, [sp, #128]	; 0x80
 800db70:	dc01      	bgt.n	800db76 <_svfprintf_r+0xa2e>
 800db72:	3408      	adds	r4, #8
 800db74:	e008      	b.n	800db88 <_svfprintf_r+0xa40>
 800db76:	aa1f      	add	r2, sp, #124	; 0x7c
 800db78:	4659      	mov	r1, fp
 800db7a:	4650      	mov	r0, sl
 800db7c:	f003 fef1 	bl	8011962 <__ssprint_r>
 800db80:	2800      	cmp	r0, #0
 800db82:	f040 8163 	bne.w	800de4c <_svfprintf_r+0xd04>
 800db86:	ac2c      	add	r4, sp, #176	; 0xb0
 800db88:	3e10      	subs	r6, #16
 800db8a:	e7e4      	b.n	800db56 <_svfprintf_r+0xa0e>
 800db8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db8e:	6066      	str	r6, [r4, #4]
 800db90:	441e      	add	r6, r3
 800db92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db94:	9621      	str	r6, [sp, #132]	; 0x84
 800db96:	3301      	adds	r3, #1
 800db98:	2b07      	cmp	r3, #7
 800db9a:	9320      	str	r3, [sp, #128]	; 0x80
 800db9c:	dc01      	bgt.n	800dba2 <_svfprintf_r+0xa5a>
 800db9e:	3408      	adds	r4, #8
 800dba0:	e008      	b.n	800dbb4 <_svfprintf_r+0xa6c>
 800dba2:	aa1f      	add	r2, sp, #124	; 0x7c
 800dba4:	4659      	mov	r1, fp
 800dba6:	4650      	mov	r0, sl
 800dba8:	f003 fedb 	bl	8011962 <__ssprint_r>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	f040 814d 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dbb2:	ac2c      	add	r4, sp, #176	; 0xb0
 800dbb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbb6:	9a04      	ldr	r2, [sp, #16]
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	4447      	add	r7, r8
 800dbbc:	db01      	blt.n	800dbc2 <_svfprintf_r+0xa7a>
 800dbbe:	07e9      	lsls	r1, r5, #31
 800dbc0:	d517      	bpl.n	800dbf2 <_svfprintf_r+0xaaa>
 800dbc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	9b08      	ldr	r3, [sp, #32]
 800dbc8:	6063      	str	r3, [r4, #4]
 800dbca:	9a08      	ldr	r2, [sp, #32]
 800dbcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbce:	4413      	add	r3, r2
 800dbd0:	9321      	str	r3, [sp, #132]	; 0x84
 800dbd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	2b07      	cmp	r3, #7
 800dbd8:	9320      	str	r3, [sp, #128]	; 0x80
 800dbda:	dc01      	bgt.n	800dbe0 <_svfprintf_r+0xa98>
 800dbdc:	3408      	adds	r4, #8
 800dbde:	e008      	b.n	800dbf2 <_svfprintf_r+0xaaa>
 800dbe0:	aa1f      	add	r2, sp, #124	; 0x7c
 800dbe2:	4659      	mov	r1, fp
 800dbe4:	4650      	mov	r0, sl
 800dbe6:	f003 febc 	bl	8011962 <__ssprint_r>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	f040 812e 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dbf0:	ac2c      	add	r4, sp, #176	; 0xb0
 800dbf2:	9b04      	ldr	r3, [sp, #16]
 800dbf4:	9a04      	ldr	r2, [sp, #16]
 800dbf6:	eb08 0603 	add.w	r6, r8, r3
 800dbfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbfc:	1bf6      	subs	r6, r6, r7
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	429e      	cmp	r6, r3
 800dc02:	bfa8      	it	ge
 800dc04:	461e      	movge	r6, r3
 800dc06:	2e00      	cmp	r6, #0
 800dc08:	dd14      	ble.n	800dc34 <_svfprintf_r+0xaec>
 800dc0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc0c:	6027      	str	r7, [r4, #0]
 800dc0e:	4433      	add	r3, r6
 800dc10:	9321      	str	r3, [sp, #132]	; 0x84
 800dc12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dc14:	6066      	str	r6, [r4, #4]
 800dc16:	3301      	adds	r3, #1
 800dc18:	2b07      	cmp	r3, #7
 800dc1a:	9320      	str	r3, [sp, #128]	; 0x80
 800dc1c:	dc01      	bgt.n	800dc22 <_svfprintf_r+0xada>
 800dc1e:	3408      	adds	r4, #8
 800dc20:	e008      	b.n	800dc34 <_svfprintf_r+0xaec>
 800dc22:	aa1f      	add	r2, sp, #124	; 0x7c
 800dc24:	4659      	mov	r1, fp
 800dc26:	4650      	mov	r0, sl
 800dc28:	f003 fe9b 	bl	8011962 <__ssprint_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	f040 810d 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dc32:	ac2c      	add	r4, sp, #176	; 0xb0
 800dc34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc36:	9a04      	ldr	r2, [sp, #16]
 800dc38:	2e00      	cmp	r6, #0
 800dc3a:	eba2 0303 	sub.w	r3, r2, r3
 800dc3e:	bfac      	ite	ge
 800dc40:	1b9e      	subge	r6, r3, r6
 800dc42:	461e      	movlt	r6, r3
 800dc44:	2e00      	cmp	r6, #0
 800dc46:	f340 80b1 	ble.w	800ddac <_svfprintf_r+0xc64>
 800dc4a:	4f12      	ldr	r7, [pc, #72]	; (800dc94 <_svfprintf_r+0xb4c>)
 800dc4c:	f04f 0810 	mov.w	r8, #16
 800dc50:	2e10      	cmp	r6, #16
 800dc52:	dd16      	ble.n	800dc82 <_svfprintf_r+0xb3a>
 800dc54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc56:	3310      	adds	r3, #16
 800dc58:	9321      	str	r3, [sp, #132]	; 0x84
 800dc5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	2b07      	cmp	r3, #7
 800dc60:	e884 0180 	stmia.w	r4, {r7, r8}
 800dc64:	9320      	str	r3, [sp, #128]	; 0x80
 800dc66:	dc01      	bgt.n	800dc6c <_svfprintf_r+0xb24>
 800dc68:	3408      	adds	r4, #8
 800dc6a:	e008      	b.n	800dc7e <_svfprintf_r+0xb36>
 800dc6c:	aa1f      	add	r2, sp, #124	; 0x7c
 800dc6e:	4659      	mov	r1, fp
 800dc70:	4650      	mov	r0, sl
 800dc72:	f003 fe76 	bl	8011962 <__ssprint_r>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f040 80e8 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dc7c:	ac2c      	add	r4, sp, #176	; 0xb0
 800dc7e:	3e10      	subs	r6, #16
 800dc80:	e7e6      	b.n	800dc50 <_svfprintf_r+0xb08>
 800dc82:	4b04      	ldr	r3, [pc, #16]	; (800dc94 <_svfprintf_r+0xb4c>)
 800dc84:	e884 0048 	stmia.w	r4, {r3, r6}
 800dc88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc8a:	441e      	add	r6, r3
 800dc8c:	9621      	str	r6, [sp, #132]	; 0x84
 800dc8e:	e642      	b.n	800d916 <_svfprintf_r+0x7ce>
 800dc90:	080153aa 	.word	0x080153aa
 800dc94:	08015368 	.word	0x08015368
 800dc98:	9b04      	ldr	r3, [sp, #16]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	dc01      	bgt.n	800dca2 <_svfprintf_r+0xb5a>
 800dc9e:	07ea      	lsls	r2, r5, #31
 800dca0:	d573      	bpl.n	800dd8a <_svfprintf_r+0xc42>
 800dca2:	2301      	movs	r3, #1
 800dca4:	6063      	str	r3, [r4, #4]
 800dca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dca8:	f8c4 8000 	str.w	r8, [r4]
 800dcac:	3301      	adds	r3, #1
 800dcae:	9321      	str	r3, [sp, #132]	; 0x84
 800dcb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	2b07      	cmp	r3, #7
 800dcb6:	9320      	str	r3, [sp, #128]	; 0x80
 800dcb8:	dc01      	bgt.n	800dcbe <_svfprintf_r+0xb76>
 800dcba:	3408      	adds	r4, #8
 800dcbc:	e008      	b.n	800dcd0 <_svfprintf_r+0xb88>
 800dcbe:	aa1f      	add	r2, sp, #124	; 0x7c
 800dcc0:	4659      	mov	r1, fp
 800dcc2:	4650      	mov	r0, sl
 800dcc4:	f003 fe4d 	bl	8011962 <__ssprint_r>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	f040 80bf 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dcce:	ac2c      	add	r4, sp, #176	; 0xb0
 800dcd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcd2:	6023      	str	r3, [r4, #0]
 800dcd4:	9b08      	ldr	r3, [sp, #32]
 800dcd6:	6063      	str	r3, [r4, #4]
 800dcd8:	9a08      	ldr	r2, [sp, #32]
 800dcda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcdc:	4413      	add	r3, r2
 800dcde:	9321      	str	r3, [sp, #132]	; 0x84
 800dce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dce2:	3301      	adds	r3, #1
 800dce4:	2b07      	cmp	r3, #7
 800dce6:	9320      	str	r3, [sp, #128]	; 0x80
 800dce8:	dc01      	bgt.n	800dcee <_svfprintf_r+0xba6>
 800dcea:	3408      	adds	r4, #8
 800dcec:	e008      	b.n	800dd00 <_svfprintf_r+0xbb8>
 800dcee:	aa1f      	add	r2, sp, #124	; 0x7c
 800dcf0:	4659      	mov	r1, fp
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	f003 fe35 	bl	8011962 <__ssprint_r>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	f040 80a7 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dcfe:	ac2c      	add	r4, sp, #176	; 0xb0
 800dd00:	2300      	movs	r3, #0
 800dd02:	2200      	movs	r2, #0
 800dd04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd08:	f7f2 fefa 	bl	8000b00 <__aeabi_dcmpeq>
 800dd0c:	9b04      	ldr	r3, [sp, #16]
 800dd0e:	1e5e      	subs	r6, r3, #1
 800dd10:	b9b8      	cbnz	r0, 800dd42 <_svfprintf_r+0xbfa>
 800dd12:	f108 0301 	add.w	r3, r8, #1
 800dd16:	e884 0048 	stmia.w	r4, {r3, r6}
 800dd1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd1c:	9a04      	ldr	r2, [sp, #16]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	4413      	add	r3, r2
 800dd22:	9321      	str	r3, [sp, #132]	; 0x84
 800dd24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dd26:	3301      	adds	r3, #1
 800dd28:	2b07      	cmp	r3, #7
 800dd2a:	9320      	str	r3, [sp, #128]	; 0x80
 800dd2c:	dd34      	ble.n	800dd98 <_svfprintf_r+0xc50>
 800dd2e:	aa1f      	add	r2, sp, #124	; 0x7c
 800dd30:	4659      	mov	r1, fp
 800dd32:	4650      	mov	r0, sl
 800dd34:	f003 fe15 	bl	8011962 <__ssprint_r>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	f040 8087 	bne.w	800de4c <_svfprintf_r+0xd04>
 800dd3e:	ac2c      	add	r4, sp, #176	; 0xb0
 800dd40:	e02b      	b.n	800dd9a <_svfprintf_r+0xc52>
 800dd42:	2e00      	cmp	r6, #0
 800dd44:	dd29      	ble.n	800dd9a <_svfprintf_r+0xc52>
 800dd46:	4fa7      	ldr	r7, [pc, #668]	; (800dfe4 <_svfprintf_r+0xe9c>)
 800dd48:	f04f 0810 	mov.w	r8, #16
 800dd4c:	2e10      	cmp	r6, #16
 800dd4e:	dd15      	ble.n	800dd7c <_svfprintf_r+0xc34>
 800dd50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd52:	3310      	adds	r3, #16
 800dd54:	9321      	str	r3, [sp, #132]	; 0x84
 800dd56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dd58:	3301      	adds	r3, #1
 800dd5a:	2b07      	cmp	r3, #7
 800dd5c:	e884 0180 	stmia.w	r4, {r7, r8}
 800dd60:	9320      	str	r3, [sp, #128]	; 0x80
 800dd62:	dc01      	bgt.n	800dd68 <_svfprintf_r+0xc20>
 800dd64:	3408      	adds	r4, #8
 800dd66:	e007      	b.n	800dd78 <_svfprintf_r+0xc30>
 800dd68:	aa1f      	add	r2, sp, #124	; 0x7c
 800dd6a:	4659      	mov	r1, fp
 800dd6c:	4650      	mov	r0, sl
 800dd6e:	f003 fdf8 	bl	8011962 <__ssprint_r>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d16a      	bne.n	800de4c <_svfprintf_r+0xd04>
 800dd76:	ac2c      	add	r4, sp, #176	; 0xb0
 800dd78:	3e10      	subs	r6, #16
 800dd7a:	e7e7      	b.n	800dd4c <_svfprintf_r+0xc04>
 800dd7c:	4b99      	ldr	r3, [pc, #612]	; (800dfe4 <_svfprintf_r+0xe9c>)
 800dd7e:	e884 0048 	stmia.w	r4, {r3, r6}
 800dd82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd84:	441e      	add	r6, r3
 800dd86:	9621      	str	r6, [sp, #132]	; 0x84
 800dd88:	e7cc      	b.n	800dd24 <_svfprintf_r+0xbdc>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	6063      	str	r3, [r4, #4]
 800dd8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd90:	f8c4 8000 	str.w	r8, [r4]
 800dd94:	3301      	adds	r3, #1
 800dd96:	e7c4      	b.n	800dd22 <_svfprintf_r+0xbda>
 800dd98:	3408      	adds	r4, #8
 800dd9a:	ab1b      	add	r3, sp, #108	; 0x6c
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dda0:	6063      	str	r3, [r4, #4]
 800dda2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dda4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dda6:	4413      	add	r3, r2
 800dda8:	e5b4      	b.n	800d914 <_svfprintf_r+0x7cc>
 800ddaa:	3408      	adds	r4, #8
 800ddac:	076b      	lsls	r3, r5, #29
 800ddae:	d40b      	bmi.n	800ddc8 <_svfprintf_r+0xc80>
 800ddb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb6:	428a      	cmp	r2, r1
 800ddb8:	bfac      	ite	ge
 800ddba:	189b      	addge	r3, r3, r2
 800ddbc:	185b      	addlt	r3, r3, r1
 800ddbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ddc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d035      	beq.n	800de32 <_svfprintf_r+0xcea>
 800ddc6:	e02e      	b.n	800de26 <_svfprintf_r+0xcde>
 800ddc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ddcc:	1a9d      	subs	r5, r3, r2
 800ddce:	2d00      	cmp	r5, #0
 800ddd0:	ddee      	ble.n	800ddb0 <_svfprintf_r+0xc68>
 800ddd2:	2610      	movs	r6, #16
 800ddd4:	4b84      	ldr	r3, [pc, #528]	; (800dfe8 <_svfprintf_r+0xea0>)
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	2d10      	cmp	r5, #16
 800ddda:	dd13      	ble.n	800de04 <_svfprintf_r+0xcbc>
 800dddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddde:	6066      	str	r6, [r4, #4]
 800dde0:	3310      	adds	r3, #16
 800dde2:	9321      	str	r3, [sp, #132]	; 0x84
 800dde4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dde6:	3301      	adds	r3, #1
 800dde8:	2b07      	cmp	r3, #7
 800ddea:	9320      	str	r3, [sp, #128]	; 0x80
 800ddec:	dc01      	bgt.n	800ddf2 <_svfprintf_r+0xcaa>
 800ddee:	3408      	adds	r4, #8
 800ddf0:	e006      	b.n	800de00 <_svfprintf_r+0xcb8>
 800ddf2:	aa1f      	add	r2, sp, #124	; 0x7c
 800ddf4:	4659      	mov	r1, fp
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	f003 fdb3 	bl	8011962 <__ssprint_r>
 800ddfc:	bb30      	cbnz	r0, 800de4c <_svfprintf_r+0xd04>
 800ddfe:	ac2c      	add	r4, sp, #176	; 0xb0
 800de00:	3d10      	subs	r5, #16
 800de02:	e7e7      	b.n	800ddd4 <_svfprintf_r+0xc8c>
 800de04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de06:	6065      	str	r5, [r4, #4]
 800de08:	441d      	add	r5, r3
 800de0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de0c:	9521      	str	r5, [sp, #132]	; 0x84
 800de0e:	3301      	adds	r3, #1
 800de10:	2b07      	cmp	r3, #7
 800de12:	9320      	str	r3, [sp, #128]	; 0x80
 800de14:	ddcc      	ble.n	800ddb0 <_svfprintf_r+0xc68>
 800de16:	aa1f      	add	r2, sp, #124	; 0x7c
 800de18:	4659      	mov	r1, fp
 800de1a:	4650      	mov	r0, sl
 800de1c:	f003 fda1 	bl	8011962 <__ssprint_r>
 800de20:	2800      	cmp	r0, #0
 800de22:	d0c5      	beq.n	800ddb0 <_svfprintf_r+0xc68>
 800de24:	e012      	b.n	800de4c <_svfprintf_r+0xd04>
 800de26:	aa1f      	add	r2, sp, #124	; 0x7c
 800de28:	4659      	mov	r1, fp
 800de2a:	4650      	mov	r0, sl
 800de2c:	f003 fd99 	bl	8011962 <__ssprint_r>
 800de30:	b960      	cbnz	r0, 800de4c <_svfprintf_r+0xd04>
 800de32:	2300      	movs	r3, #0
 800de34:	9320      	str	r3, [sp, #128]	; 0x80
 800de36:	9f03      	ldr	r7, [sp, #12]
 800de38:	ac2c      	add	r4, sp, #176	; 0xb0
 800de3a:	f7ff b9bb 	b.w	800d1b4 <_svfprintf_r+0x6c>
 800de3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de40:	b123      	cbz	r3, 800de4c <_svfprintf_r+0xd04>
 800de42:	aa1f      	add	r2, sp, #124	; 0x7c
 800de44:	4659      	mov	r1, fp
 800de46:	4650      	mov	r0, sl
 800de48:	f003 fd8b 	bl	8011962 <__ssprint_r>
 800de4c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800de50:	f013 0f40 	tst.w	r3, #64	; 0x40
 800de54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de56:	bf18      	it	ne
 800de58:	f04f 33ff 	movne.w	r3, #4294967295
 800de5c:	4618      	mov	r0, r3
 800de5e:	e12e      	b.n	800e0be <_svfprintf_r+0xf76>
 800de60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de64:	4610      	mov	r0, r2
 800de66:	4619      	mov	r1, r3
 800de68:	f7f2 fe7c 	bl	8000b64 <__aeabi_dcmpun>
 800de6c:	b160      	cbz	r0, 800de88 <_svfprintf_r+0xd40>
 800de6e:	4b5f      	ldr	r3, [pc, #380]	; (800dfec <_svfprintf_r+0xea4>)
 800de70:	4a5f      	ldr	r2, [pc, #380]	; (800dff0 <_svfprintf_r+0xea8>)
 800de72:	9902      	ldr	r1, [sp, #8]
 800de74:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800de78:	2947      	cmp	r1, #71	; 0x47
 800de7a:	bfcc      	ite	gt
 800de7c:	4690      	movgt	r8, r2
 800de7e:	4698      	movle	r8, r3
 800de80:	f04f 0903 	mov.w	r9, #3
 800de84:	2600      	movs	r6, #0
 800de86:	e44e      	b.n	800d726 <_svfprintf_r+0x5de>
 800de88:	f1b9 3fff 	cmp.w	r9, #4294967295
 800de8c:	d00a      	beq.n	800dea4 <_svfprintf_r+0xd5c>
 800de8e:	9b02      	ldr	r3, [sp, #8]
 800de90:	f023 0320 	bic.w	r3, r3, #32
 800de94:	2b47      	cmp	r3, #71	; 0x47
 800de96:	d107      	bne.n	800dea8 <_svfprintf_r+0xd60>
 800de98:	f1b9 0f00 	cmp.w	r9, #0
 800de9c:	bf08      	it	eq
 800de9e:	f04f 0901 	moveq.w	r9, #1
 800dea2:	e001      	b.n	800dea8 <_svfprintf_r+0xd60>
 800dea4:	f04f 0906 	mov.w	r9, #6
 800dea8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800deac:	930c      	str	r3, [sp, #48]	; 0x30
 800deae:	9b07      	ldr	r3, [sp, #28]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	da07      	bge.n	800dec4 <_svfprintf_r+0xd7c>
 800deb4:	9b06      	ldr	r3, [sp, #24]
 800deb6:	930e      	str	r3, [sp, #56]	; 0x38
 800deb8:	9b07      	ldr	r3, [sp, #28]
 800deba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800debe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dec0:	232d      	movs	r3, #45	; 0x2d
 800dec2:	e004      	b.n	800dece <_svfprintf_r+0xd86>
 800dec4:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dec8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800decc:	2300      	movs	r3, #0
 800dece:	930b      	str	r3, [sp, #44]	; 0x2c
 800ded0:	9b02      	ldr	r3, [sp, #8]
 800ded2:	f023 0720 	bic.w	r7, r3, #32
 800ded6:	2f46      	cmp	r7, #70	; 0x46
 800ded8:	d004      	beq.n	800dee4 <_svfprintf_r+0xd9c>
 800deda:	2f45      	cmp	r7, #69	; 0x45
 800dedc:	d105      	bne.n	800deea <_svfprintf_r+0xda2>
 800dede:	f109 0601 	add.w	r6, r9, #1
 800dee2:	e003      	b.n	800deec <_svfprintf_r+0xda4>
 800dee4:	464e      	mov	r6, r9
 800dee6:	2103      	movs	r1, #3
 800dee8:	e001      	b.n	800deee <_svfprintf_r+0xda6>
 800deea:	464e      	mov	r6, r9
 800deec:	2102      	movs	r1, #2
 800deee:	ab1d      	add	r3, sp, #116	; 0x74
 800def0:	9301      	str	r3, [sp, #4]
 800def2:	ab1a      	add	r3, sp, #104	; 0x68
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	4632      	mov	r2, r6
 800def8:	ab19      	add	r3, sp, #100	; 0x64
 800defa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800defe:	4650      	mov	r0, sl
 800df00:	f001 fa16 	bl	800f330 <_dtoa_r>
 800df04:	2f47      	cmp	r7, #71	; 0x47
 800df06:	4680      	mov	r8, r0
 800df08:	d102      	bne.n	800df10 <_svfprintf_r+0xdc8>
 800df0a:	07eb      	lsls	r3, r5, #31
 800df0c:	f140 80cd 	bpl.w	800e0aa <_svfprintf_r+0xf62>
 800df10:	eb08 0306 	add.w	r3, r8, r6
 800df14:	2f46      	cmp	r7, #70	; 0x46
 800df16:	9304      	str	r3, [sp, #16]
 800df18:	d111      	bne.n	800df3e <_svfprintf_r+0xdf6>
 800df1a:	f898 3000 	ldrb.w	r3, [r8]
 800df1e:	2b30      	cmp	r3, #48	; 0x30
 800df20:	d109      	bne.n	800df36 <_svfprintf_r+0xdee>
 800df22:	2200      	movs	r2, #0
 800df24:	2300      	movs	r3, #0
 800df26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df2a:	f7f2 fde9 	bl	8000b00 <__aeabi_dcmpeq>
 800df2e:	b910      	cbnz	r0, 800df36 <_svfprintf_r+0xdee>
 800df30:	f1c6 0601 	rsb	r6, r6, #1
 800df34:	9619      	str	r6, [sp, #100]	; 0x64
 800df36:	9a04      	ldr	r2, [sp, #16]
 800df38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df3a:	441a      	add	r2, r3
 800df3c:	9204      	str	r2, [sp, #16]
 800df3e:	2200      	movs	r2, #0
 800df40:	2300      	movs	r3, #0
 800df42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df46:	f7f2 fddb 	bl	8000b00 <__aeabi_dcmpeq>
 800df4a:	b908      	cbnz	r0, 800df50 <_svfprintf_r+0xe08>
 800df4c:	2230      	movs	r2, #48	; 0x30
 800df4e:	e002      	b.n	800df56 <_svfprintf_r+0xe0e>
 800df50:	9b04      	ldr	r3, [sp, #16]
 800df52:	931d      	str	r3, [sp, #116]	; 0x74
 800df54:	e007      	b.n	800df66 <_svfprintf_r+0xe1e>
 800df56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df58:	9904      	ldr	r1, [sp, #16]
 800df5a:	4299      	cmp	r1, r3
 800df5c:	d903      	bls.n	800df66 <_svfprintf_r+0xe1e>
 800df5e:	1c59      	adds	r1, r3, #1
 800df60:	911d      	str	r1, [sp, #116]	; 0x74
 800df62:	701a      	strb	r2, [r3, #0]
 800df64:	e7f7      	b.n	800df56 <_svfprintf_r+0xe0e>
 800df66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df68:	2f47      	cmp	r7, #71	; 0x47
 800df6a:	ebc8 0303 	rsb	r3, r8, r3
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	d108      	bne.n	800df84 <_svfprintf_r+0xe3c>
 800df72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df74:	1cdf      	adds	r7, r3, #3
 800df76:	db01      	blt.n	800df7c <_svfprintf_r+0xe34>
 800df78:	4599      	cmp	r9, r3
 800df7a:	da68      	bge.n	800e04e <_svfprintf_r+0xf06>
 800df7c:	9b02      	ldr	r3, [sp, #8]
 800df7e:	3b02      	subs	r3, #2
 800df80:	9302      	str	r3, [sp, #8]
 800df82:	e002      	b.n	800df8a <_svfprintf_r+0xe42>
 800df84:	9b02      	ldr	r3, [sp, #8]
 800df86:	2b65      	cmp	r3, #101	; 0x65
 800df88:	dc4a      	bgt.n	800e020 <_svfprintf_r+0xed8>
 800df8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800df90:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800df94:	3b01      	subs	r3, #1
 800df96:	2b00      	cmp	r3, #0
 800df98:	9319      	str	r3, [sp, #100]	; 0x64
 800df9a:	bfba      	itte	lt
 800df9c:	425b      	neglt	r3, r3
 800df9e:	222d      	movlt	r2, #45	; 0x2d
 800dfa0:	222b      	movge	r2, #43	; 0x2b
 800dfa2:	2b09      	cmp	r3, #9
 800dfa4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800dfa8:	dd24      	ble.n	800dff4 <_svfprintf_r+0xeac>
 800dfaa:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800dfae:	200a      	movs	r0, #10
 800dfb0:	fb93 f1f0 	sdiv	r1, r3, r0
 800dfb4:	fb00 3311 	mls	r3, r0, r1, r3
 800dfb8:	3330      	adds	r3, #48	; 0x30
 800dfba:	2909      	cmp	r1, #9
 800dfbc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	dcf5      	bgt.n	800dfb0 <_svfprintf_r+0xe68>
 800dfc4:	3330      	adds	r3, #48	; 0x30
 800dfc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dfca:	1e51      	subs	r1, r2, #1
 800dfcc:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800dfd0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800dfd4:	4281      	cmp	r1, r0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	d213      	bcs.n	800e002 <_svfprintf_r+0xeba>
 800dfda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfde:	f803 2b01 	strb.w	r2, [r3], #1
 800dfe2:	e7f7      	b.n	800dfd4 <_svfprintf_r+0xe8c>
 800dfe4:	08015368 	.word	0x08015368
 800dfe8:	080153ac 	.word	0x080153ac
 800dfec:	08015380 	.word	0x08015380
 800dff0:	08015384 	.word	0x08015384
 800dff4:	2230      	movs	r2, #48	; 0x30
 800dff6:	4413      	add	r3, r2
 800dff8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800dffc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800e000:	aa1c      	add	r2, sp, #112	; 0x70
 800e002:	ab1b      	add	r3, sp, #108	; 0x6c
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	9a04      	ldr	r2, [sp, #16]
 800e008:	9310      	str	r3, [sp, #64]	; 0x40
 800e00a:	2a01      	cmp	r2, #1
 800e00c:	eb03 0902 	add.w	r9, r3, r2
 800e010:	dc02      	bgt.n	800e018 <_svfprintf_r+0xed0>
 800e012:	f015 0701 	ands.w	r7, r5, #1
 800e016:	d032      	beq.n	800e07e <_svfprintf_r+0xf36>
 800e018:	9b08      	ldr	r3, [sp, #32]
 800e01a:	2700      	movs	r7, #0
 800e01c:	4499      	add	r9, r3
 800e01e:	e02e      	b.n	800e07e <_svfprintf_r+0xf36>
 800e020:	9b02      	ldr	r3, [sp, #8]
 800e022:	2b66      	cmp	r3, #102	; 0x66
 800e024:	d113      	bne.n	800e04e <_svfprintf_r+0xf06>
 800e026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dd07      	ble.n	800e03c <_svfprintf_r+0xef4>
 800e02c:	f1b9 0f00 	cmp.w	r9, #0
 800e030:	d101      	bne.n	800e036 <_svfprintf_r+0xeee>
 800e032:	07ee      	lsls	r6, r5, #31
 800e034:	d521      	bpl.n	800e07a <_svfprintf_r+0xf32>
 800e036:	9a08      	ldr	r2, [sp, #32]
 800e038:	4413      	add	r3, r2
 800e03a:	e006      	b.n	800e04a <_svfprintf_r+0xf02>
 800e03c:	f1b9 0f00 	cmp.w	r9, #0
 800e040:	d101      	bne.n	800e046 <_svfprintf_r+0xefe>
 800e042:	07ed      	lsls	r5, r5, #31
 800e044:	d514      	bpl.n	800e070 <_svfprintf_r+0xf28>
 800e046:	9b08      	ldr	r3, [sp, #32]
 800e048:	3301      	adds	r3, #1
 800e04a:	444b      	add	r3, r9
 800e04c:	e015      	b.n	800e07a <_svfprintf_r+0xf32>
 800e04e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e050:	9a04      	ldr	r2, [sp, #16]
 800e052:	4293      	cmp	r3, r2
 800e054:	db03      	blt.n	800e05e <_svfprintf_r+0xf16>
 800e056:	07e8      	lsls	r0, r5, #31
 800e058:	d50d      	bpl.n	800e076 <_svfprintf_r+0xf2e>
 800e05a:	9a08      	ldr	r2, [sp, #32]
 800e05c:	e006      	b.n	800e06c <_svfprintf_r+0xf24>
 800e05e:	9a04      	ldr	r2, [sp, #16]
 800e060:	9908      	ldr	r1, [sp, #32]
 800e062:	2b00      	cmp	r3, #0
 800e064:	440a      	add	r2, r1
 800e066:	dc05      	bgt.n	800e074 <_svfprintf_r+0xf2c>
 800e068:	f1c3 0301 	rsb	r3, r3, #1
 800e06c:	4413      	add	r3, r2
 800e06e:	e002      	b.n	800e076 <_svfprintf_r+0xf2e>
 800e070:	2301      	movs	r3, #1
 800e072:	e002      	b.n	800e07a <_svfprintf_r+0xf32>
 800e074:	4613      	mov	r3, r2
 800e076:	2267      	movs	r2, #103	; 0x67
 800e078:	9202      	str	r2, [sp, #8]
 800e07a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e07c:	4699      	mov	r9, r3
 800e07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e080:	b113      	cbz	r3, 800e088 <_svfprintf_r+0xf40>
 800e082:	232d      	movs	r3, #45	; 0x2d
 800e084:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e088:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e08a:	2600      	movs	r6, #0
 800e08c:	f7ff bb4c 	b.w	800d728 <_svfprintf_r+0x5e0>
 800e090:	2200      	movs	r2, #0
 800e092:	2300      	movs	r3, #0
 800e094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e098:	f7f2 fd3c 	bl	8000b14 <__aeabi_dcmplt>
 800e09c:	b110      	cbz	r0, 800e0a4 <_svfprintf_r+0xf5c>
 800e09e:	232d      	movs	r3, #45	; 0x2d
 800e0a0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e0a4:	4b07      	ldr	r3, [pc, #28]	; (800e0c4 <_svfprintf_r+0xf7c>)
 800e0a6:	4a08      	ldr	r2, [pc, #32]	; (800e0c8 <_svfprintf_r+0xf80>)
 800e0a8:	e6e3      	b.n	800de72 <_svfprintf_r+0xd2a>
 800e0aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0ac:	1a1b      	subs	r3, r3, r0
 800e0ae:	9304      	str	r3, [sp, #16]
 800e0b0:	e75f      	b.n	800df72 <_svfprintf_r+0xe2a>
 800e0b2:	ea56 0207 	orrs.w	r2, r6, r7
 800e0b6:	f47f aaaa 	bne.w	800d60e <_svfprintf_r+0x4c6>
 800e0ba:	f7ff baaf 	b.w	800d61c <_svfprintf_r+0x4d4>
 800e0be:	b03d      	add	sp, #244	; 0xf4
 800e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c4:	08015378 	.word	0x08015378
 800e0c8:	0801537c 	.word	0x0801537c
 800e0cc:	00000000 	.word	0x00000000

0800e0d0 <_vfprintf_r>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	b0bd      	sub	sp, #244	; 0xf4
 800e0d6:	468b      	mov	fp, r1
 800e0d8:	9205      	str	r2, [sp, #20]
 800e0da:	461c      	mov	r4, r3
 800e0dc:	461f      	mov	r7, r3
 800e0de:	4682      	mov	sl, r0
 800e0e0:	f002 fdd6 	bl	8010c90 <_localeconv_r>
 800e0e4:	6803      	ldr	r3, [r0, #0]
 800e0e6:	930d      	str	r3, [sp, #52]	; 0x34
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7f2 f891 	bl	8000210 <strlen>
 800e0ee:	9008      	str	r0, [sp, #32]
 800e0f0:	f1ba 0f00 	cmp.w	sl, #0
 800e0f4:	d005      	beq.n	800e102 <_vfprintf_r+0x32>
 800e0f6:	f8da 3018 	ldr.w	r3, [sl, #24]
 800e0fa:	b913      	cbnz	r3, 800e102 <_vfprintf_r+0x32>
 800e0fc:	4650      	mov	r0, sl
 800e0fe:	f001 ffb1 	bl	8010064 <__sinit>
 800e102:	4b9d      	ldr	r3, [pc, #628]	; (800e378 <_vfprintf_r+0x2a8>)
 800e104:	459b      	cmp	fp, r3
 800e106:	d102      	bne.n	800e10e <_vfprintf_r+0x3e>
 800e108:	f8da b004 	ldr.w	fp, [sl, #4]
 800e10c:	e00a      	b.n	800e124 <_vfprintf_r+0x54>
 800e10e:	4b9b      	ldr	r3, [pc, #620]	; (800e37c <_vfprintf_r+0x2ac>)
 800e110:	459b      	cmp	fp, r3
 800e112:	d102      	bne.n	800e11a <_vfprintf_r+0x4a>
 800e114:	f8da b008 	ldr.w	fp, [sl, #8]
 800e118:	e004      	b.n	800e124 <_vfprintf_r+0x54>
 800e11a:	4b99      	ldr	r3, [pc, #612]	; (800e380 <_vfprintf_r+0x2b0>)
 800e11c:	459b      	cmp	fp, r3
 800e11e:	bf08      	it	eq
 800e120:	f8da b00c 	ldreq.w	fp, [sl, #12]
 800e124:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800e128:	0498      	lsls	r0, r3, #18
 800e12a:	d409      	bmi.n	800e140 <_vfprintf_r+0x70>
 800e12c:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800e130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e138:	f8ab 300c 	strh.w	r3, [fp, #12]
 800e13c:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 800e140:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e144:	0719      	lsls	r1, r3, #28
 800e146:	d509      	bpl.n	800e15c <_vfprintf_r+0x8c>
 800e148:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e14c:	b133      	cbz	r3, 800e15c <_vfprintf_r+0x8c>
 800e14e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e152:	f003 031a 	and.w	r3, r3, #26
 800e156:	2b0a      	cmp	r3, #10
 800e158:	d116      	bne.n	800e188 <_vfprintf_r+0xb8>
 800e15a:	e009      	b.n	800e170 <_vfprintf_r+0xa0>
 800e15c:	4659      	mov	r1, fp
 800e15e:	4650      	mov	r0, sl
 800e160:	f000 ffe6 	bl	800f130 <__swsetup_r>
 800e164:	2800      	cmp	r0, #0
 800e166:	d0f2      	beq.n	800e14e <_vfprintf_r+0x7e>
 800e168:	f04f 30ff 	mov.w	r0, #4294967295
 800e16c:	f000 bfa3 	b.w	800f0b6 <_vfprintf_r+0xfe6>
 800e170:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 800e174:	2b00      	cmp	r3, #0
 800e176:	db07      	blt.n	800e188 <_vfprintf_r+0xb8>
 800e178:	4623      	mov	r3, r4
 800e17a:	9a05      	ldr	r2, [sp, #20]
 800e17c:	4659      	mov	r1, fp
 800e17e:	4650      	mov	r0, sl
 800e180:	f000 ffa0 	bl	800f0c4 <__sbprintf>
 800e184:	f000 bf97 	b.w	800f0b6 <_vfprintf_r+0xfe6>
 800e188:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800e370 <_vfprintf_r+0x2a0>
 800e18c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e190:	2300      	movs	r3, #0
 800e192:	ac2c      	add	r4, sp, #176	; 0xb0
 800e194:	941f      	str	r4, [sp, #124]	; 0x7c
 800e196:	9321      	str	r3, [sp, #132]	; 0x84
 800e198:	9320      	str	r3, [sp, #128]	; 0x80
 800e19a:	9304      	str	r3, [sp, #16]
 800e19c:	9311      	str	r3, [sp, #68]	; 0x44
 800e19e:	9310      	str	r3, [sp, #64]	; 0x40
 800e1a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a2:	9d05      	ldr	r5, [sp, #20]
 800e1a4:	462b      	mov	r3, r5
 800e1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1aa:	b11a      	cbz	r2, 800e1b4 <_vfprintf_r+0xe4>
 800e1ac:	2a25      	cmp	r2, #37	; 0x25
 800e1ae:	d001      	beq.n	800e1b4 <_vfprintf_r+0xe4>
 800e1b0:	461d      	mov	r5, r3
 800e1b2:	e7f7      	b.n	800e1a4 <_vfprintf_r+0xd4>
 800e1b4:	9b05      	ldr	r3, [sp, #20]
 800e1b6:	1aee      	subs	r6, r5, r3
 800e1b8:	d017      	beq.n	800e1ea <_vfprintf_r+0x11a>
 800e1ba:	e884 0048 	stmia.w	r4, {r3, r6}
 800e1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1c0:	4433      	add	r3, r6
 800e1c2:	9321      	str	r3, [sp, #132]	; 0x84
 800e1c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	2b07      	cmp	r3, #7
 800e1ca:	9320      	str	r3, [sp, #128]	; 0x80
 800e1cc:	dc01      	bgt.n	800e1d2 <_vfprintf_r+0x102>
 800e1ce:	3408      	adds	r4, #8
 800e1d0:	e008      	b.n	800e1e4 <_vfprintf_r+0x114>
 800e1d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800e1d4:	4659      	mov	r1, fp
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	f003 fc42 	bl	8011a60 <__sprint_r>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	f040 8633 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e1e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800e1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1e6:	4433      	add	r3, r6
 800e1e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e1ea:	782b      	ldrb	r3, [r5, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 8624 	beq.w	800ee3a <_vfprintf_r+0xd6a>
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	1c6b      	adds	r3, r5, #1
 800e1f6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	f04f 39ff 	mov.w	r9, #4294967295
 800e200:	9209      	str	r2, [sp, #36]	; 0x24
 800e202:	4615      	mov	r5, r2
 800e204:	200a      	movs	r0, #10
 800e206:	1c5e      	adds	r6, r3, #1
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	9605      	str	r6, [sp, #20]
 800e20c:	9302      	str	r3, [sp, #8]
 800e20e:	9b02      	ldr	r3, [sp, #8]
 800e210:	3b20      	subs	r3, #32
 800e212:	2b58      	cmp	r3, #88	; 0x58
 800e214:	f200 826a 	bhi.w	800e6ec <_vfprintf_r+0x61c>
 800e218:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e21c:	0268005c 	.word	0x0268005c
 800e220:	006c0268 	.word	0x006c0268
 800e224:	02680268 	.word	0x02680268
 800e228:	02680268 	.word	0x02680268
 800e22c:	02680268 	.word	0x02680268
 800e230:	0059006f 	.word	0x0059006f
 800e234:	007a0268 	.word	0x007a0268
 800e238:	0268007d 	.word	0x0268007d
 800e23c:	00b600a4 	.word	0x00b600a4
 800e240:	00b600b6 	.word	0x00b600b6
 800e244:	00b600b6 	.word	0x00b600b6
 800e248:	00b600b6 	.word	0x00b600b6
 800e24c:	00b600b6 	.word	0x00b600b6
 800e250:	02680268 	.word	0x02680268
 800e254:	02680268 	.word	0x02680268
 800e258:	02680268 	.word	0x02680268
 800e25c:	02680268 	.word	0x02680268
 800e260:	02680268 	.word	0x02680268
 800e264:	011200e6 	.word	0x011200e6
 800e268:	01120268 	.word	0x01120268
 800e26c:	02680268 	.word	0x02680268
 800e270:	02680268 	.word	0x02680268
 800e274:	026800c9 	.word	0x026800c9
 800e278:	01590268 	.word	0x01590268
 800e27c:	02680268 	.word	0x02680268
 800e280:	02680268 	.word	0x02680268
 800e284:	01a00268 	.word	0x01a00268
 800e288:	02680268 	.word	0x02680268
 800e28c:	02680067 	.word	0x02680067
 800e290:	02680268 	.word	0x02680268
 800e294:	02680268 	.word	0x02680268
 800e298:	02680268 	.word	0x02680268
 800e29c:	02680268 	.word	0x02680268
 800e2a0:	00dd0268 	.word	0x00dd0268
 800e2a4:	01120061 	.word	0x01120061
 800e2a8:	01120112 	.word	0x01120112
 800e2ac:	006100cc 	.word	0x006100cc
 800e2b0:	02680268 	.word	0x02680268
 800e2b4:	026800cf 	.word	0x026800cf
 800e2b8:	015b013b 	.word	0x015b013b
 800e2bc:	00da0176 	.word	0x00da0176
 800e2c0:	01870268 	.word	0x01870268
 800e2c4:	01a20268 	.word	0x01a20268
 800e2c8:	02680268 	.word	0x02680268
 800e2cc:	01ba      	.short	0x01ba
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	212b      	movs	r1, #43	; 0x2b
 800e2d2:	e002      	b.n	800e2da <_vfprintf_r+0x20a>
 800e2d4:	b909      	cbnz	r1, 800e2da <_vfprintf_r+0x20a>
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	2120      	movs	r1, #32
 800e2da:	9b05      	ldr	r3, [sp, #20]
 800e2dc:	e793      	b.n	800e206 <_vfprintf_r+0x136>
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	f000 8087 	beq.w	800e3f2 <_vfprintf_r+0x322>
 800e2e4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e2e8:	e083      	b.n	800e3f2 <_vfprintf_r+0x322>
 800e2ea:	b10a      	cbz	r2, 800e2f0 <_vfprintf_r+0x220>
 800e2ec:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e2f0:	4b24      	ldr	r3, [pc, #144]	; (800e384 <_vfprintf_r+0x2b4>)
 800e2f2:	e151      	b.n	800e598 <_vfprintf_r+0x4c8>
 800e2f4:	f045 0501 	orr.w	r5, r5, #1
 800e2f8:	e7ef      	b.n	800e2da <_vfprintf_r+0x20a>
 800e2fa:	683e      	ldr	r6, [r7, #0]
 800e2fc:	9609      	str	r6, [sp, #36]	; 0x24
 800e2fe:	2e00      	cmp	r6, #0
 800e300:	f107 0304 	add.w	r3, r7, #4
 800e304:	db01      	blt.n	800e30a <_vfprintf_r+0x23a>
 800e306:	461f      	mov	r7, r3
 800e308:	e7e7      	b.n	800e2da <_vfprintf_r+0x20a>
 800e30a:	4276      	negs	r6, r6
 800e30c:	9609      	str	r6, [sp, #36]	; 0x24
 800e30e:	461f      	mov	r7, r3
 800e310:	f045 0504 	orr.w	r5, r5, #4
 800e314:	e7e1      	b.n	800e2da <_vfprintf_r+0x20a>
 800e316:	9e05      	ldr	r6, [sp, #20]
 800e318:	9b05      	ldr	r3, [sp, #20]
 800e31a:	7836      	ldrb	r6, [r6, #0]
 800e31c:	9602      	str	r6, [sp, #8]
 800e31e:	2e2a      	cmp	r6, #42	; 0x2a
 800e320:	f103 0301 	add.w	r3, r3, #1
 800e324:	d002      	beq.n	800e32c <_vfprintf_r+0x25c>
 800e326:	f04f 0900 	mov.w	r9, #0
 800e32a:	e00a      	b.n	800e342 <_vfprintf_r+0x272>
 800e32c:	f8d7 9000 	ldr.w	r9, [r7]
 800e330:	9305      	str	r3, [sp, #20]
 800e332:	1d3e      	adds	r6, r7, #4
 800e334:	f1b9 0f00 	cmp.w	r9, #0
 800e338:	4637      	mov	r7, r6
 800e33a:	dace      	bge.n	800e2da <_vfprintf_r+0x20a>
 800e33c:	f04f 39ff 	mov.w	r9, #4294967295
 800e340:	e7cb      	b.n	800e2da <_vfprintf_r+0x20a>
 800e342:	9305      	str	r3, [sp, #20]
 800e344:	9b02      	ldr	r3, [sp, #8]
 800e346:	3b30      	subs	r3, #48	; 0x30
 800e348:	2b09      	cmp	r3, #9
 800e34a:	d808      	bhi.n	800e35e <_vfprintf_r+0x28e>
 800e34c:	fb00 3909 	mla	r9, r0, r9, r3
 800e350:	9b05      	ldr	r3, [sp, #20]
 800e352:	461e      	mov	r6, r3
 800e354:	f816 3b01 	ldrb.w	r3, [r6], #1
 800e358:	9302      	str	r3, [sp, #8]
 800e35a:	4633      	mov	r3, r6
 800e35c:	e7f1      	b.n	800e342 <_vfprintf_r+0x272>
 800e35e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800e362:	e754      	b.n	800e20e <_vfprintf_r+0x13e>
 800e364:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800e368:	e7b7      	b.n	800e2da <_vfprintf_r+0x20a>
 800e36a:	bf00      	nop
 800e36c:	f3af 8000 	nop.w
	...
 800e378:	080154ec 	.word	0x080154ec
 800e37c:	0801550c 	.word	0x0801550c
 800e380:	0801552c 	.word	0x0801552c
 800e384:	08015388 	.word	0x08015388
 800e388:	2300      	movs	r3, #0
 800e38a:	9309      	str	r3, [sp, #36]	; 0x24
 800e38c:	9b02      	ldr	r3, [sp, #8]
 800e38e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e390:	3b30      	subs	r3, #48	; 0x30
 800e392:	fb00 3306 	mla	r3, r0, r6, r3
 800e396:	9309      	str	r3, [sp, #36]	; 0x24
 800e398:	9b05      	ldr	r3, [sp, #20]
 800e39a:	461e      	mov	r6, r3
 800e39c:	f816 3b01 	ldrb.w	r3, [r6], #1
 800e3a0:	9302      	str	r3, [sp, #8]
 800e3a2:	9b02      	ldr	r3, [sp, #8]
 800e3a4:	9605      	str	r6, [sp, #20]
 800e3a6:	3b30      	subs	r3, #48	; 0x30
 800e3a8:	2b09      	cmp	r3, #9
 800e3aa:	d9ef      	bls.n	800e38c <_vfprintf_r+0x2bc>
 800e3ac:	e72f      	b.n	800e20e <_vfprintf_r+0x13e>
 800e3ae:	f045 0508 	orr.w	r5, r5, #8
 800e3b2:	e792      	b.n	800e2da <_vfprintf_r+0x20a>
 800e3b4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800e3b8:	e78f      	b.n	800e2da <_vfprintf_r+0x20a>
 800e3ba:	9b05      	ldr	r3, [sp, #20]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b6c      	cmp	r3, #108	; 0x6c
 800e3c0:	d103      	bne.n	800e3ca <_vfprintf_r+0x2fa>
 800e3c2:	9b05      	ldr	r3, [sp, #20]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	9305      	str	r3, [sp, #20]
 800e3c8:	e002      	b.n	800e3d0 <_vfprintf_r+0x300>
 800e3ca:	f045 0510 	orr.w	r5, r5, #16
 800e3ce:	e784      	b.n	800e2da <_vfprintf_r+0x20a>
 800e3d0:	f045 0520 	orr.w	r5, r5, #32
 800e3d4:	e781      	b.n	800e2da <_vfprintf_r+0x20a>
 800e3d6:	1d3b      	adds	r3, r7, #4
 800e3d8:	9303      	str	r3, [sp, #12]
 800e3da:	2600      	movs	r6, #0
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800e3e2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800e3e6:	e190      	b.n	800e70a <_vfprintf_r+0x63a>
 800e3e8:	b10a      	cbz	r2, 800e3ee <_vfprintf_r+0x31e>
 800e3ea:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e3ee:	f045 0510 	orr.w	r5, r5, #16
 800e3f2:	06aa      	lsls	r2, r5, #26
 800e3f4:	d508      	bpl.n	800e408 <_vfprintf_r+0x338>
 800e3f6:	3707      	adds	r7, #7
 800e3f8:	f027 0707 	bic.w	r7, r7, #7
 800e3fc:	f107 0308 	add.w	r3, r7, #8
 800e400:	9303      	str	r3, [sp, #12]
 800e402:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e406:	e00e      	b.n	800e426 <_vfprintf_r+0x356>
 800e408:	f015 0f10 	tst.w	r5, #16
 800e40c:	f107 0304 	add.w	r3, r7, #4
 800e410:	d002      	beq.n	800e418 <_vfprintf_r+0x348>
 800e412:	9303      	str	r3, [sp, #12]
 800e414:	683e      	ldr	r6, [r7, #0]
 800e416:	e005      	b.n	800e424 <_vfprintf_r+0x354>
 800e418:	683e      	ldr	r6, [r7, #0]
 800e41a:	9303      	str	r3, [sp, #12]
 800e41c:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e420:	bf18      	it	ne
 800e422:	b236      	sxthne	r6, r6
 800e424:	17f7      	asrs	r7, r6, #31
 800e426:	2e00      	cmp	r6, #0
 800e428:	f177 0300 	sbcs.w	r3, r7, #0
 800e42c:	f280 80de 	bge.w	800e5ec <_vfprintf_r+0x51c>
 800e430:	4276      	negs	r6, r6
 800e432:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e436:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e43a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e43e:	e0d5      	b.n	800e5ec <_vfprintf_r+0x51c>
 800e440:	b10a      	cbz	r2, 800e446 <_vfprintf_r+0x376>
 800e442:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e446:	3707      	adds	r7, #7
 800e448:	f027 0707 	bic.w	r7, r7, #7
 800e44c:	f107 0308 	add.w	r3, r7, #8
 800e450:	9303      	str	r3, [sp, #12]
 800e452:	ed97 7b00 	vldr	d7, [r7]
 800e456:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e45a:	9b06      	ldr	r3, [sp, #24]
 800e45c:	9312      	str	r3, [sp, #72]	; 0x48
 800e45e:	9b07      	ldr	r3, [sp, #28]
 800e460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e464:	9313      	str	r3, [sp, #76]	; 0x4c
 800e466:	f04f 32ff 	mov.w	r2, #4294967295
 800e46a:	4bab      	ldr	r3, [pc, #684]	; (800e718 <_vfprintf_r+0x648>)
 800e46c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800e470:	f7f2 fb78 	bl	8000b64 <__aeabi_dcmpun>
 800e474:	2800      	cmp	r0, #0
 800e476:	f040 84ee 	bne.w	800ee56 <_vfprintf_r+0xd86>
 800e47a:	f04f 32ff 	mov.w	r2, #4294967295
 800e47e:	4ba6      	ldr	r3, [pc, #664]	; (800e718 <_vfprintf_r+0x648>)
 800e480:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800e484:	f7f2 fb50 	bl	8000b28 <__aeabi_dcmple>
 800e488:	2800      	cmp	r0, #0
 800e48a:	f040 84e4 	bne.w	800ee56 <_vfprintf_r+0xd86>
 800e48e:	f000 bdfb 	b.w	800f088 <_vfprintf_r+0xfb8>
 800e492:	b10a      	cbz	r2, 800e498 <_vfprintf_r+0x3c8>
 800e494:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e498:	f015 0f20 	tst.w	r5, #32
 800e49c:	f107 0304 	add.w	r3, r7, #4
 800e4a0:	d007      	beq.n	800e4b2 <_vfprintf_r+0x3e2>
 800e4a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	17ce      	asrs	r6, r1, #31
 800e4a8:	4608      	mov	r0, r1
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	e9c2 0100 	strd	r0, r1, [r2]
 800e4b0:	e00b      	b.n	800e4ca <_vfprintf_r+0x3fa>
 800e4b2:	06e9      	lsls	r1, r5, #27
 800e4b4:	d406      	bmi.n	800e4c4 <_vfprintf_r+0x3f4>
 800e4b6:	066a      	lsls	r2, r5, #25
 800e4b8:	d504      	bpl.n	800e4c4 <_vfprintf_r+0x3f4>
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800e4c0:	8011      	strh	r1, [r2, #0]
 800e4c2:	e002      	b.n	800e4ca <_vfprintf_r+0x3fa>
 800e4c4:	683a      	ldr	r2, [r7, #0]
 800e4c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4c8:	6011      	str	r1, [r2, #0]
 800e4ca:	461f      	mov	r7, r3
 800e4cc:	e669      	b.n	800e1a2 <_vfprintf_r+0xd2>
 800e4ce:	f045 0510 	orr.w	r5, r5, #16
 800e4d2:	f015 0320 	ands.w	r3, r5, #32
 800e4d6:	d009      	beq.n	800e4ec <_vfprintf_r+0x41c>
 800e4d8:	3707      	adds	r7, #7
 800e4da:	f027 0707 	bic.w	r7, r7, #7
 800e4de:	f107 0308 	add.w	r3, r7, #8
 800e4e2:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e4e6:	9303      	str	r3, [sp, #12]
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e07b      	b.n	800e5e4 <_vfprintf_r+0x514>
 800e4ec:	1d3a      	adds	r2, r7, #4
 800e4ee:	f015 0110 	ands.w	r1, r5, #16
 800e4f2:	9203      	str	r2, [sp, #12]
 800e4f4:	d105      	bne.n	800e502 <_vfprintf_r+0x432>
 800e4f6:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800e4fa:	d002      	beq.n	800e502 <_vfprintf_r+0x432>
 800e4fc:	883e      	ldrh	r6, [r7, #0]
 800e4fe:	2700      	movs	r7, #0
 800e500:	e7f2      	b.n	800e4e8 <_vfprintf_r+0x418>
 800e502:	683e      	ldr	r6, [r7, #0]
 800e504:	2700      	movs	r7, #0
 800e506:	e06d      	b.n	800e5e4 <_vfprintf_r+0x514>
 800e508:	1d3b      	adds	r3, r7, #4
 800e50a:	9303      	str	r3, [sp, #12]
 800e50c:	2330      	movs	r3, #48	; 0x30
 800e50e:	2278      	movs	r2, #120	; 0x78
 800e510:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800e514:	4b81      	ldr	r3, [pc, #516]	; (800e71c <_vfprintf_r+0x64c>)
 800e516:	683e      	ldr	r6, [r7, #0]
 800e518:	9311      	str	r3, [sp, #68]	; 0x44
 800e51a:	2700      	movs	r7, #0
 800e51c:	f045 0502 	orr.w	r5, r5, #2
 800e520:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800e524:	2302      	movs	r3, #2
 800e526:	9202      	str	r2, [sp, #8]
 800e528:	e05c      	b.n	800e5e4 <_vfprintf_r+0x514>
 800e52a:	2600      	movs	r6, #0
 800e52c:	1d3b      	adds	r3, r7, #4
 800e52e:	45b1      	cmp	r9, r6
 800e530:	9303      	str	r3, [sp, #12]
 800e532:	f8d7 8000 	ldr.w	r8, [r7]
 800e536:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800e53a:	db0a      	blt.n	800e552 <_vfprintf_r+0x482>
 800e53c:	464a      	mov	r2, r9
 800e53e:	4631      	mov	r1, r6
 800e540:	4640      	mov	r0, r8
 800e542:	f7f1 fe6d 	bl	8000220 <memchr>
 800e546:	2800      	cmp	r0, #0
 800e548:	f000 80ea 	beq.w	800e720 <_vfprintf_r+0x650>
 800e54c:	ebc8 0900 	rsb	r9, r8, r0
 800e550:	e0e7      	b.n	800e722 <_vfprintf_r+0x652>
 800e552:	4640      	mov	r0, r8
 800e554:	f7f1 fe5c 	bl	8000210 <strlen>
 800e558:	4681      	mov	r9, r0
 800e55a:	e0e2      	b.n	800e722 <_vfprintf_r+0x652>
 800e55c:	f045 0510 	orr.w	r5, r5, #16
 800e560:	06ae      	lsls	r6, r5, #26
 800e562:	d508      	bpl.n	800e576 <_vfprintf_r+0x4a6>
 800e564:	3707      	adds	r7, #7
 800e566:	f027 0707 	bic.w	r7, r7, #7
 800e56a:	f107 0308 	add.w	r3, r7, #8
 800e56e:	9303      	str	r3, [sp, #12]
 800e570:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e574:	e00a      	b.n	800e58c <_vfprintf_r+0x4bc>
 800e576:	1d3b      	adds	r3, r7, #4
 800e578:	f015 0f10 	tst.w	r5, #16
 800e57c:	9303      	str	r3, [sp, #12]
 800e57e:	d103      	bne.n	800e588 <_vfprintf_r+0x4b8>
 800e580:	0668      	lsls	r0, r5, #25
 800e582:	d501      	bpl.n	800e588 <_vfprintf_r+0x4b8>
 800e584:	883e      	ldrh	r6, [r7, #0]
 800e586:	e000      	b.n	800e58a <_vfprintf_r+0x4ba>
 800e588:	683e      	ldr	r6, [r7, #0]
 800e58a:	2700      	movs	r7, #0
 800e58c:	2301      	movs	r3, #1
 800e58e:	e029      	b.n	800e5e4 <_vfprintf_r+0x514>
 800e590:	b10a      	cbz	r2, 800e596 <_vfprintf_r+0x4c6>
 800e592:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e596:	4b61      	ldr	r3, [pc, #388]	; (800e71c <_vfprintf_r+0x64c>)
 800e598:	9311      	str	r3, [sp, #68]	; 0x44
 800e59a:	06a9      	lsls	r1, r5, #26
 800e59c:	d508      	bpl.n	800e5b0 <_vfprintf_r+0x4e0>
 800e59e:	3707      	adds	r7, #7
 800e5a0:	f027 0707 	bic.w	r7, r7, #7
 800e5a4:	f107 0308 	add.w	r3, r7, #8
 800e5a8:	9303      	str	r3, [sp, #12]
 800e5aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e5ae:	e00a      	b.n	800e5c6 <_vfprintf_r+0x4f6>
 800e5b0:	1d3b      	adds	r3, r7, #4
 800e5b2:	f015 0f10 	tst.w	r5, #16
 800e5b6:	9303      	str	r3, [sp, #12]
 800e5b8:	d103      	bne.n	800e5c2 <_vfprintf_r+0x4f2>
 800e5ba:	066a      	lsls	r2, r5, #25
 800e5bc:	d501      	bpl.n	800e5c2 <_vfprintf_r+0x4f2>
 800e5be:	883e      	ldrh	r6, [r7, #0]
 800e5c0:	e000      	b.n	800e5c4 <_vfprintf_r+0x4f4>
 800e5c2:	683e      	ldr	r6, [r7, #0]
 800e5c4:	2700      	movs	r7, #0
 800e5c6:	07eb      	lsls	r3, r5, #31
 800e5c8:	d50b      	bpl.n	800e5e2 <_vfprintf_r+0x512>
 800e5ca:	ea56 0307 	orrs.w	r3, r6, r7
 800e5ce:	d008      	beq.n	800e5e2 <_vfprintf_r+0x512>
 800e5d0:	2330      	movs	r3, #48	; 0x30
 800e5d2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800e5d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e5da:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800e5de:	f045 0502 	orr.w	r5, r5, #2
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e5ea:	e000      	b.n	800e5ee <_vfprintf_r+0x51e>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	f1b9 0f00 	cmp.w	r9, #0
 800e5f2:	f2c0 855a 	blt.w	800f0aa <_vfprintf_r+0xfda>
 800e5f6:	ea56 0207 	orrs.w	r2, r6, r7
 800e5fa:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800e5fe:	d103      	bne.n	800e608 <_vfprintf_r+0x538>
 800e600:	f1b9 0f00 	cmp.w	r9, #0
 800e604:	d05f      	beq.n	800e6c6 <_vfprintf_r+0x5f6>
 800e606:	e006      	b.n	800e616 <_vfprintf_r+0x546>
 800e608:	460d      	mov	r5, r1
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d025      	beq.n	800e65a <_vfprintf_r+0x58a>
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d046      	beq.n	800e6a0 <_vfprintf_r+0x5d0>
 800e612:	4629      	mov	r1, r5
 800e614:	e007      	b.n	800e626 <_vfprintf_r+0x556>
 800e616:	460d      	mov	r5, r1
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d022      	beq.n	800e662 <_vfprintf_r+0x592>
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d03d      	beq.n	800e69c <_vfprintf_r+0x5cc>
 800e620:	4629      	mov	r1, r5
 800e622:	2600      	movs	r6, #0
 800e624:	2700      	movs	r7, #0
 800e626:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e62a:	08f2      	lsrs	r2, r6, #3
 800e62c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800e630:	08f8      	lsrs	r0, r7, #3
 800e632:	f006 0307 	and.w	r3, r6, #7
 800e636:	4607      	mov	r7, r0
 800e638:	4616      	mov	r6, r2
 800e63a:	3330      	adds	r3, #48	; 0x30
 800e63c:	ea56 0207 	orrs.w	r2, r6, r7
 800e640:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e644:	d1f1      	bne.n	800e62a <_vfprintf_r+0x55a>
 800e646:	07e8      	lsls	r0, r5, #31
 800e648:	d548      	bpl.n	800e6dc <_vfprintf_r+0x60c>
 800e64a:	2b30      	cmp	r3, #48	; 0x30
 800e64c:	d046      	beq.n	800e6dc <_vfprintf_r+0x60c>
 800e64e:	2330      	movs	r3, #48	; 0x30
 800e650:	f808 3c01 	strb.w	r3, [r8, #-1]
 800e654:	f108 38ff 	add.w	r8, r8, #4294967295
 800e658:	e040      	b.n	800e6dc <_vfprintf_r+0x60c>
 800e65a:	2f00      	cmp	r7, #0
 800e65c:	bf08      	it	eq
 800e65e:	2e0a      	cmpeq	r6, #10
 800e660:	d205      	bcs.n	800e66e <_vfprintf_r+0x59e>
 800e662:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800e666:	3630      	adds	r6, #48	; 0x30
 800e668:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800e66c:	e029      	b.n	800e6c2 <_vfprintf_r+0x5f2>
 800e66e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	220a      	movs	r2, #10
 800e678:	2300      	movs	r3, #0
 800e67a:	f7f2 fb21 	bl	8000cc0 <__aeabi_uldivmod>
 800e67e:	3230      	adds	r2, #48	; 0x30
 800e680:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800e684:	2300      	movs	r3, #0
 800e686:	4630      	mov	r0, r6
 800e688:	4639      	mov	r1, r7
 800e68a:	220a      	movs	r2, #10
 800e68c:	f7f2 fb18 	bl	8000cc0 <__aeabi_uldivmod>
 800e690:	4606      	mov	r6, r0
 800e692:	460f      	mov	r7, r1
 800e694:	ea56 0307 	orrs.w	r3, r6, r7
 800e698:	d1eb      	bne.n	800e672 <_vfprintf_r+0x5a2>
 800e69a:	e012      	b.n	800e6c2 <_vfprintf_r+0x5f2>
 800e69c:	2600      	movs	r6, #0
 800e69e:	2700      	movs	r7, #0
 800e6a0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e6a4:	f006 030f 	and.w	r3, r6, #15
 800e6a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6aa:	5cd3      	ldrb	r3, [r2, r3]
 800e6ac:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e6b0:	0933      	lsrs	r3, r6, #4
 800e6b2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800e6b6:	093a      	lsrs	r2, r7, #4
 800e6b8:	461e      	mov	r6, r3
 800e6ba:	4617      	mov	r7, r2
 800e6bc:	ea56 0307 	orrs.w	r3, r6, r7
 800e6c0:	d1f0      	bne.n	800e6a4 <_vfprintf_r+0x5d4>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	e00a      	b.n	800e6dc <_vfprintf_r+0x60c>
 800e6c6:	b93b      	cbnz	r3, 800e6d8 <_vfprintf_r+0x608>
 800e6c8:	07ea      	lsls	r2, r5, #31
 800e6ca:	d505      	bpl.n	800e6d8 <_vfprintf_r+0x608>
 800e6cc:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800e6d0:	2330      	movs	r3, #48	; 0x30
 800e6d2:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800e6d6:	e001      	b.n	800e6dc <_vfprintf_r+0x60c>
 800e6d8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e6dc:	464e      	mov	r6, r9
 800e6de:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800e6e2:	ebc8 0909 	rsb	r9, r8, r9
 800e6e6:	460d      	mov	r5, r1
 800e6e8:	2700      	movs	r7, #0
 800e6ea:	e01b      	b.n	800e724 <_vfprintf_r+0x654>
 800e6ec:	b10a      	cbz	r2, 800e6f2 <_vfprintf_r+0x622>
 800e6ee:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800e6f2:	9b02      	ldr	r3, [sp, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f000 83a0 	beq.w	800ee3a <_vfprintf_r+0xd6a>
 800e6fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e6fe:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800e702:	2600      	movs	r6, #0
 800e704:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800e708:	9703      	str	r7, [sp, #12]
 800e70a:	f04f 0901 	mov.w	r9, #1
 800e70e:	4637      	mov	r7, r6
 800e710:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800e714:	e006      	b.n	800e724 <_vfprintf_r+0x654>
 800e716:	bf00      	nop
 800e718:	7fefffff 	.word	0x7fefffff
 800e71c:	08015399 	.word	0x08015399
 800e720:	4606      	mov	r6, r0
 800e722:	4637      	mov	r7, r6
 800e724:	454e      	cmp	r6, r9
 800e726:	4633      	mov	r3, r6
 800e728:	bfb8      	it	lt
 800e72a:	464b      	movlt	r3, r9
 800e72c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e72e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e732:	b113      	cbz	r3, 800e73a <_vfprintf_r+0x66a>
 800e734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e736:	3301      	adds	r3, #1
 800e738:	930b      	str	r3, [sp, #44]	; 0x2c
 800e73a:	f015 0302 	ands.w	r3, r5, #2
 800e73e:	9314      	str	r3, [sp, #80]	; 0x50
 800e740:	bf1e      	ittt	ne
 800e742:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800e744:	3302      	addne	r3, #2
 800e746:	930b      	strne	r3, [sp, #44]	; 0x2c
 800e748:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800e74c:	9315      	str	r3, [sp, #84]	; 0x54
 800e74e:	d139      	bne.n	800e7c4 <_vfprintf_r+0x6f4>
 800e750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e754:	1a9b      	subs	r3, r3, r2
 800e756:	2b00      	cmp	r3, #0
 800e758:	930c      	str	r3, [sp, #48]	; 0x30
 800e75a:	dd33      	ble.n	800e7c4 <_vfprintf_r+0x6f4>
 800e75c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e75e:	2b10      	cmp	r3, #16
 800e760:	4ba6      	ldr	r3, [pc, #664]	; (800e9fc <_vfprintf_r+0x92c>)
 800e762:	6023      	str	r3, [r4, #0]
 800e764:	dd18      	ble.n	800e798 <_vfprintf_r+0x6c8>
 800e766:	2310      	movs	r3, #16
 800e768:	6063      	str	r3, [r4, #4]
 800e76a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e76c:	3310      	adds	r3, #16
 800e76e:	9321      	str	r3, [sp, #132]	; 0x84
 800e770:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e772:	3301      	adds	r3, #1
 800e774:	2b07      	cmp	r3, #7
 800e776:	9320      	str	r3, [sp, #128]	; 0x80
 800e778:	dc01      	bgt.n	800e77e <_vfprintf_r+0x6ae>
 800e77a:	3408      	adds	r4, #8
 800e77c:	e008      	b.n	800e790 <_vfprintf_r+0x6c0>
 800e77e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e780:	4659      	mov	r1, fp
 800e782:	4650      	mov	r0, sl
 800e784:	f003 f96c 	bl	8011a60 <__sprint_r>
 800e788:	2800      	cmp	r0, #0
 800e78a:	f040 835d 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e78e:	ac2c      	add	r4, sp, #176	; 0xb0
 800e790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e792:	3b10      	subs	r3, #16
 800e794:	930c      	str	r3, [sp, #48]	; 0x30
 800e796:	e7e1      	b.n	800e75c <_vfprintf_r+0x68c>
 800e798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e79a:	6063      	str	r3, [r4, #4]
 800e79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7a0:	4413      	add	r3, r2
 800e7a2:	9321      	str	r3, [sp, #132]	; 0x84
 800e7a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	2b07      	cmp	r3, #7
 800e7aa:	9320      	str	r3, [sp, #128]	; 0x80
 800e7ac:	dc01      	bgt.n	800e7b2 <_vfprintf_r+0x6e2>
 800e7ae:	3408      	adds	r4, #8
 800e7b0:	e008      	b.n	800e7c4 <_vfprintf_r+0x6f4>
 800e7b2:	aa1f      	add	r2, sp, #124	; 0x7c
 800e7b4:	4659      	mov	r1, fp
 800e7b6:	4650      	mov	r0, sl
 800e7b8:	f003 f952 	bl	8011a60 <__sprint_r>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f040 8343 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e7c2:	ac2c      	add	r4, sp, #176	; 0xb0
 800e7c4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800e7c8:	b1bb      	cbz	r3, 800e7fa <_vfprintf_r+0x72a>
 800e7ca:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	6063      	str	r3, [r4, #4]
 800e7d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	9321      	str	r3, [sp, #132]	; 0x84
 800e7da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e7dc:	3301      	adds	r3, #1
 800e7de:	2b07      	cmp	r3, #7
 800e7e0:	9320      	str	r3, [sp, #128]	; 0x80
 800e7e2:	dc01      	bgt.n	800e7e8 <_vfprintf_r+0x718>
 800e7e4:	3408      	adds	r4, #8
 800e7e6:	e008      	b.n	800e7fa <_vfprintf_r+0x72a>
 800e7e8:	aa1f      	add	r2, sp, #124	; 0x7c
 800e7ea:	4659      	mov	r1, fp
 800e7ec:	4650      	mov	r0, sl
 800e7ee:	f003 f937 	bl	8011a60 <__sprint_r>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	f040 8328 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e7f8:	ac2c      	add	r4, sp, #176	; 0xb0
 800e7fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7fc:	b1b3      	cbz	r3, 800e82c <_vfprintf_r+0x75c>
 800e7fe:	ab18      	add	r3, sp, #96	; 0x60
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	2302      	movs	r3, #2
 800e804:	6063      	str	r3, [r4, #4]
 800e806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e808:	3302      	adds	r3, #2
 800e80a:	9321      	str	r3, [sp, #132]	; 0x84
 800e80c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e80e:	3301      	adds	r3, #1
 800e810:	2b07      	cmp	r3, #7
 800e812:	9320      	str	r3, [sp, #128]	; 0x80
 800e814:	dc01      	bgt.n	800e81a <_vfprintf_r+0x74a>
 800e816:	3408      	adds	r4, #8
 800e818:	e008      	b.n	800e82c <_vfprintf_r+0x75c>
 800e81a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e81c:	4659      	mov	r1, fp
 800e81e:	4650      	mov	r0, sl
 800e820:	f003 f91e 	bl	8011a60 <__sprint_r>
 800e824:	2800      	cmp	r0, #0
 800e826:	f040 830f 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e82a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e82e:	2b80      	cmp	r3, #128	; 0x80
 800e830:	d135      	bne.n	800e89e <_vfprintf_r+0x7ce>
 800e832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e836:	1a9b      	subs	r3, r3, r2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	dd30      	ble.n	800e89e <_vfprintf_r+0x7ce>
 800e83c:	4a70      	ldr	r2, [pc, #448]	; (800ea00 <_vfprintf_r+0x930>)
 800e83e:	6022      	str	r2, [r4, #0]
 800e840:	2b10      	cmp	r3, #16
 800e842:	dd18      	ble.n	800e876 <_vfprintf_r+0x7a6>
 800e844:	2210      	movs	r2, #16
 800e846:	6062      	str	r2, [r4, #4]
 800e848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e84a:	3210      	adds	r2, #16
 800e84c:	9221      	str	r2, [sp, #132]	; 0x84
 800e84e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e850:	3201      	adds	r2, #1
 800e852:	2a07      	cmp	r2, #7
 800e854:	9220      	str	r2, [sp, #128]	; 0x80
 800e856:	dc01      	bgt.n	800e85c <_vfprintf_r+0x78c>
 800e858:	3408      	adds	r4, #8
 800e85a:	e00a      	b.n	800e872 <_vfprintf_r+0x7a2>
 800e85c:	aa1f      	add	r2, sp, #124	; 0x7c
 800e85e:	4659      	mov	r1, fp
 800e860:	4650      	mov	r0, sl
 800e862:	930c      	str	r3, [sp, #48]	; 0x30
 800e864:	f003 f8fc 	bl	8011a60 <__sprint_r>
 800e868:	2800      	cmp	r0, #0
 800e86a:	f040 82ed 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e86e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e870:	ac2c      	add	r4, sp, #176	; 0xb0
 800e872:	3b10      	subs	r3, #16
 800e874:	e7e2      	b.n	800e83c <_vfprintf_r+0x76c>
 800e876:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e878:	6063      	str	r3, [r4, #4]
 800e87a:	4413      	add	r3, r2
 800e87c:	9321      	str	r3, [sp, #132]	; 0x84
 800e87e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e880:	3301      	adds	r3, #1
 800e882:	2b07      	cmp	r3, #7
 800e884:	9320      	str	r3, [sp, #128]	; 0x80
 800e886:	dc01      	bgt.n	800e88c <_vfprintf_r+0x7bc>
 800e888:	3408      	adds	r4, #8
 800e88a:	e008      	b.n	800e89e <_vfprintf_r+0x7ce>
 800e88c:	aa1f      	add	r2, sp, #124	; 0x7c
 800e88e:	4659      	mov	r1, fp
 800e890:	4650      	mov	r0, sl
 800e892:	f003 f8e5 	bl	8011a60 <__sprint_r>
 800e896:	2800      	cmp	r0, #0
 800e898:	f040 82d6 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e89c:	ac2c      	add	r4, sp, #176	; 0xb0
 800e89e:	ebc9 0606 	rsb	r6, r9, r6
 800e8a2:	2e00      	cmp	r6, #0
 800e8a4:	dd2e      	ble.n	800e904 <_vfprintf_r+0x834>
 800e8a6:	4b56      	ldr	r3, [pc, #344]	; (800ea00 <_vfprintf_r+0x930>)
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	2e10      	cmp	r6, #16
 800e8ac:	dd16      	ble.n	800e8dc <_vfprintf_r+0x80c>
 800e8ae:	2310      	movs	r3, #16
 800e8b0:	6063      	str	r3, [r4, #4]
 800e8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8b4:	3310      	adds	r3, #16
 800e8b6:	9321      	str	r3, [sp, #132]	; 0x84
 800e8b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	2b07      	cmp	r3, #7
 800e8be:	9320      	str	r3, [sp, #128]	; 0x80
 800e8c0:	dc01      	bgt.n	800e8c6 <_vfprintf_r+0x7f6>
 800e8c2:	3408      	adds	r4, #8
 800e8c4:	e008      	b.n	800e8d8 <_vfprintf_r+0x808>
 800e8c6:	aa1f      	add	r2, sp, #124	; 0x7c
 800e8c8:	4659      	mov	r1, fp
 800e8ca:	4650      	mov	r0, sl
 800e8cc:	f003 f8c8 	bl	8011a60 <__sprint_r>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	f040 82b9 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e8d6:	ac2c      	add	r4, sp, #176	; 0xb0
 800e8d8:	3e10      	subs	r6, #16
 800e8da:	e7e4      	b.n	800e8a6 <_vfprintf_r+0x7d6>
 800e8dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8de:	9821      	ldr	r0, [sp, #132]	; 0x84
 800e8e0:	6066      	str	r6, [r4, #4]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	4406      	add	r6, r0
 800e8e6:	2b07      	cmp	r3, #7
 800e8e8:	9621      	str	r6, [sp, #132]	; 0x84
 800e8ea:	9320      	str	r3, [sp, #128]	; 0x80
 800e8ec:	dc01      	bgt.n	800e8f2 <_vfprintf_r+0x822>
 800e8ee:	3408      	adds	r4, #8
 800e8f0:	e008      	b.n	800e904 <_vfprintf_r+0x834>
 800e8f2:	aa1f      	add	r2, sp, #124	; 0x7c
 800e8f4:	4659      	mov	r1, fp
 800e8f6:	4650      	mov	r0, sl
 800e8f8:	f003 f8b2 	bl	8011a60 <__sprint_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f040 82a3 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e902:	ac2c      	add	r4, sp, #176	; 0xb0
 800e904:	05eb      	lsls	r3, r5, #23
 800e906:	d414      	bmi.n	800e932 <_vfprintf_r+0x862>
 800e908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e90a:	e884 0300 	stmia.w	r4, {r8, r9}
 800e90e:	444b      	add	r3, r9
 800e910:	9321      	str	r3, [sp, #132]	; 0x84
 800e912:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e914:	3301      	adds	r3, #1
 800e916:	2b07      	cmp	r3, #7
 800e918:	9320      	str	r3, [sp, #128]	; 0x80
 800e91a:	f340 8244 	ble.w	800eda6 <_vfprintf_r+0xcd6>
 800e91e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e920:	4659      	mov	r1, fp
 800e922:	4650      	mov	r0, sl
 800e924:	f003 f89c 	bl	8011a60 <__sprint_r>
 800e928:	2800      	cmp	r0, #0
 800e92a:	f040 828d 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e92e:	ac2c      	add	r4, sp, #176	; 0xb0
 800e930:	e23a      	b.n	800eda8 <_vfprintf_r+0xcd8>
 800e932:	9b02      	ldr	r3, [sp, #8]
 800e934:	2b65      	cmp	r3, #101	; 0x65
 800e936:	f340 81ad 	ble.w	800ec94 <_vfprintf_r+0xbc4>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e942:	f7f2 f8dd 	bl	8000b00 <__aeabi_dcmpeq>
 800e946:	2800      	cmp	r0, #0
 800e948:	d05e      	beq.n	800ea08 <_vfprintf_r+0x938>
 800e94a:	4b2e      	ldr	r3, [pc, #184]	; (800ea04 <_vfprintf_r+0x934>)
 800e94c:	6023      	str	r3, [r4, #0]
 800e94e:	2301      	movs	r3, #1
 800e950:	6063      	str	r3, [r4, #4]
 800e952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e954:	3301      	adds	r3, #1
 800e956:	9321      	str	r3, [sp, #132]	; 0x84
 800e958:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e95a:	3301      	adds	r3, #1
 800e95c:	2b07      	cmp	r3, #7
 800e95e:	9320      	str	r3, [sp, #128]	; 0x80
 800e960:	dc01      	bgt.n	800e966 <_vfprintf_r+0x896>
 800e962:	3408      	adds	r4, #8
 800e964:	e008      	b.n	800e978 <_vfprintf_r+0x8a8>
 800e966:	aa1f      	add	r2, sp, #124	; 0x7c
 800e968:	4659      	mov	r1, fp
 800e96a:	4650      	mov	r0, sl
 800e96c:	f003 f878 	bl	8011a60 <__sprint_r>
 800e970:	2800      	cmp	r0, #0
 800e972:	f040 8269 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e976:	ac2c      	add	r4, sp, #176	; 0xb0
 800e978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e97a:	9a04      	ldr	r2, [sp, #16]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	db02      	blt.n	800e986 <_vfprintf_r+0x8b6>
 800e980:	07ef      	lsls	r7, r5, #31
 800e982:	f140 8211 	bpl.w	800eda8 <_vfprintf_r+0xcd8>
 800e986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e988:	6023      	str	r3, [r4, #0]
 800e98a:	9b08      	ldr	r3, [sp, #32]
 800e98c:	6063      	str	r3, [r4, #4]
 800e98e:	9a08      	ldr	r2, [sp, #32]
 800e990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e992:	4413      	add	r3, r2
 800e994:	9321      	str	r3, [sp, #132]	; 0x84
 800e996:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e998:	3301      	adds	r3, #1
 800e99a:	2b07      	cmp	r3, #7
 800e99c:	9320      	str	r3, [sp, #128]	; 0x80
 800e99e:	dc01      	bgt.n	800e9a4 <_vfprintf_r+0x8d4>
 800e9a0:	3408      	adds	r4, #8
 800e9a2:	e008      	b.n	800e9b6 <_vfprintf_r+0x8e6>
 800e9a4:	aa1f      	add	r2, sp, #124	; 0x7c
 800e9a6:	4659      	mov	r1, fp
 800e9a8:	4650      	mov	r0, sl
 800e9aa:	f003 f859 	bl	8011a60 <__sprint_r>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	f040 824a 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e9b4:	ac2c      	add	r4, sp, #176	; 0xb0
 800e9b6:	9b04      	ldr	r3, [sp, #16]
 800e9b8:	1e5e      	subs	r6, r3, #1
 800e9ba:	2e00      	cmp	r6, #0
 800e9bc:	f340 81f4 	ble.w	800eda8 <_vfprintf_r+0xcd8>
 800e9c0:	4f0f      	ldr	r7, [pc, #60]	; (800ea00 <_vfprintf_r+0x930>)
 800e9c2:	f04f 0810 	mov.w	r8, #16
 800e9c6:	2e10      	cmp	r6, #16
 800e9c8:	f340 8159 	ble.w	800ec7e <_vfprintf_r+0xbae>
 800e9cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9ce:	3310      	adds	r3, #16
 800e9d0:	9321      	str	r3, [sp, #132]	; 0x84
 800e9d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	2b07      	cmp	r3, #7
 800e9d8:	e884 0180 	stmia.w	r4, {r7, r8}
 800e9dc:	9320      	str	r3, [sp, #128]	; 0x80
 800e9de:	dc01      	bgt.n	800e9e4 <_vfprintf_r+0x914>
 800e9e0:	3408      	adds	r4, #8
 800e9e2:	e008      	b.n	800e9f6 <_vfprintf_r+0x926>
 800e9e4:	aa1f      	add	r2, sp, #124	; 0x7c
 800e9e6:	4659      	mov	r1, fp
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	f003 f839 	bl	8011a60 <__sprint_r>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f040 822a 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800e9f4:	ac2c      	add	r4, sp, #176	; 0xb0
 800e9f6:	3e10      	subs	r6, #16
 800e9f8:	e7e5      	b.n	800e9c6 <_vfprintf_r+0x8f6>
 800e9fa:	bf00      	nop
 800e9fc:	080153bc 	.word	0x080153bc
 800ea00:	080153cc 	.word	0x080153cc
 800ea04:	080153aa 	.word	0x080153aa
 800ea08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	dc7c      	bgt.n	800eb08 <_vfprintf_r+0xa38>
 800ea0e:	4b9f      	ldr	r3, [pc, #636]	; (800ec8c <_vfprintf_r+0xbbc>)
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	2301      	movs	r3, #1
 800ea14:	6063      	str	r3, [r4, #4]
 800ea16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea18:	3301      	adds	r3, #1
 800ea1a:	9321      	str	r3, [sp, #132]	; 0x84
 800ea1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea1e:	3301      	adds	r3, #1
 800ea20:	2b07      	cmp	r3, #7
 800ea22:	9320      	str	r3, [sp, #128]	; 0x80
 800ea24:	dc01      	bgt.n	800ea2a <_vfprintf_r+0x95a>
 800ea26:	3408      	adds	r4, #8
 800ea28:	e008      	b.n	800ea3c <_vfprintf_r+0x96c>
 800ea2a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ea2c:	4659      	mov	r1, fp
 800ea2e:	4650      	mov	r0, sl
 800ea30:	f003 f816 	bl	8011a60 <__sprint_r>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f040 8207 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ea3a:	ac2c      	add	r4, sp, #176	; 0xb0
 800ea3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea3e:	b923      	cbnz	r3, 800ea4a <_vfprintf_r+0x97a>
 800ea40:	9b04      	ldr	r3, [sp, #16]
 800ea42:	b913      	cbnz	r3, 800ea4a <_vfprintf_r+0x97a>
 800ea44:	07ee      	lsls	r6, r5, #31
 800ea46:	f140 81af 	bpl.w	800eda8 <_vfprintf_r+0xcd8>
 800ea4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	9b08      	ldr	r3, [sp, #32]
 800ea50:	6063      	str	r3, [r4, #4]
 800ea52:	9a08      	ldr	r2, [sp, #32]
 800ea54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea56:	4413      	add	r3, r2
 800ea58:	9321      	str	r3, [sp, #132]	; 0x84
 800ea5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	2b07      	cmp	r3, #7
 800ea60:	9320      	str	r3, [sp, #128]	; 0x80
 800ea62:	dc02      	bgt.n	800ea6a <_vfprintf_r+0x99a>
 800ea64:	f104 0308 	add.w	r3, r4, #8
 800ea68:	e008      	b.n	800ea7c <_vfprintf_r+0x9ac>
 800ea6a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ea6c:	4659      	mov	r1, fp
 800ea6e:	4650      	mov	r0, sl
 800ea70:	f002 fff6 	bl	8011a60 <__sprint_r>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f040 81e7 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ea7a:	ab2c      	add	r3, sp, #176	; 0xb0
 800ea7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ea7e:	4276      	negs	r6, r6
 800ea80:	2e00      	cmp	r6, #0
 800ea82:	dd30      	ble.n	800eae6 <_vfprintf_r+0xa16>
 800ea84:	4f82      	ldr	r7, [pc, #520]	; (800ec90 <_vfprintf_r+0xbc0>)
 800ea86:	2410      	movs	r4, #16
 800ea88:	2e10      	cmp	r6, #16
 800ea8a:	dd16      	ble.n	800eaba <_vfprintf_r+0x9ea>
 800ea8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea8e:	601f      	str	r7, [r3, #0]
 800ea90:	3210      	adds	r2, #16
 800ea92:	9221      	str	r2, [sp, #132]	; 0x84
 800ea94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ea96:	605c      	str	r4, [r3, #4]
 800ea98:	3201      	adds	r2, #1
 800ea9a:	2a07      	cmp	r2, #7
 800ea9c:	9220      	str	r2, [sp, #128]	; 0x80
 800ea9e:	dc01      	bgt.n	800eaa4 <_vfprintf_r+0x9d4>
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	e008      	b.n	800eab6 <_vfprintf_r+0x9e6>
 800eaa4:	aa1f      	add	r2, sp, #124	; 0x7c
 800eaa6:	4659      	mov	r1, fp
 800eaa8:	4650      	mov	r0, sl
 800eaaa:	f002 ffd9 	bl	8011a60 <__sprint_r>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f040 81ca 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800eab4:	ab2c      	add	r3, sp, #176	; 0xb0
 800eab6:	3e10      	subs	r6, #16
 800eab8:	e7e6      	b.n	800ea88 <_vfprintf_r+0x9b8>
 800eaba:	4a75      	ldr	r2, [pc, #468]	; (800ec90 <_vfprintf_r+0xbc0>)
 800eabc:	e883 0044 	stmia.w	r3, {r2, r6}
 800eac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eac2:	4416      	add	r6, r2
 800eac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eac6:	9621      	str	r6, [sp, #132]	; 0x84
 800eac8:	3201      	adds	r2, #1
 800eaca:	2a07      	cmp	r2, #7
 800eacc:	9220      	str	r2, [sp, #128]	; 0x80
 800eace:	dc01      	bgt.n	800ead4 <_vfprintf_r+0xa04>
 800ead0:	3308      	adds	r3, #8
 800ead2:	e008      	b.n	800eae6 <_vfprintf_r+0xa16>
 800ead4:	aa1f      	add	r2, sp, #124	; 0x7c
 800ead6:	4659      	mov	r1, fp
 800ead8:	4650      	mov	r0, sl
 800eada:	f002 ffc1 	bl	8011a60 <__sprint_r>
 800eade:	2800      	cmp	r0, #0
 800eae0:	f040 81b2 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800eae4:	ab2c      	add	r3, sp, #176	; 0xb0
 800eae6:	9a04      	ldr	r2, [sp, #16]
 800eae8:	605a      	str	r2, [r3, #4]
 800eaea:	9904      	ldr	r1, [sp, #16]
 800eaec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eaee:	f8c3 8000 	str.w	r8, [r3]
 800eaf2:	440a      	add	r2, r1
 800eaf4:	9221      	str	r2, [sp, #132]	; 0x84
 800eaf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eaf8:	3201      	adds	r2, #1
 800eafa:	2a07      	cmp	r2, #7
 800eafc:	9220      	str	r2, [sp, #128]	; 0x80
 800eafe:	f73f af0e 	bgt.w	800e91e <_vfprintf_r+0x84e>
 800eb02:	f103 0408 	add.w	r4, r3, #8
 800eb06:	e14f      	b.n	800eda8 <_vfprintf_r+0xcd8>
 800eb08:	9b04      	ldr	r3, [sp, #16]
 800eb0a:	42bb      	cmp	r3, r7
 800eb0c:	bfa8      	it	ge
 800eb0e:	463b      	movge	r3, r7
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	461e      	mov	r6, r3
 800eb14:	dd15      	ble.n	800eb42 <_vfprintf_r+0xa72>
 800eb16:	6063      	str	r3, [r4, #4]
 800eb18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb1a:	f8c4 8000 	str.w	r8, [r4]
 800eb1e:	4433      	add	r3, r6
 800eb20:	9321      	str	r3, [sp, #132]	; 0x84
 800eb22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eb24:	3301      	adds	r3, #1
 800eb26:	2b07      	cmp	r3, #7
 800eb28:	9320      	str	r3, [sp, #128]	; 0x80
 800eb2a:	dc01      	bgt.n	800eb30 <_vfprintf_r+0xa60>
 800eb2c:	3408      	adds	r4, #8
 800eb2e:	e008      	b.n	800eb42 <_vfprintf_r+0xa72>
 800eb30:	aa1f      	add	r2, sp, #124	; 0x7c
 800eb32:	4659      	mov	r1, fp
 800eb34:	4650      	mov	r0, sl
 800eb36:	f002 ff93 	bl	8011a60 <__sprint_r>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	f040 8184 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800eb40:	ac2c      	add	r4, sp, #176	; 0xb0
 800eb42:	2e00      	cmp	r6, #0
 800eb44:	bfac      	ite	ge
 800eb46:	1bbe      	subge	r6, r7, r6
 800eb48:	463e      	movlt	r6, r7
 800eb4a:	2e00      	cmp	r6, #0
 800eb4c:	dd30      	ble.n	800ebb0 <_vfprintf_r+0xae0>
 800eb4e:	f04f 0910 	mov.w	r9, #16
 800eb52:	4b4f      	ldr	r3, [pc, #316]	; (800ec90 <_vfprintf_r+0xbc0>)
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	2e10      	cmp	r6, #16
 800eb58:	dd16      	ble.n	800eb88 <_vfprintf_r+0xab8>
 800eb5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb5c:	f8c4 9004 	str.w	r9, [r4, #4]
 800eb60:	3310      	adds	r3, #16
 800eb62:	9321      	str	r3, [sp, #132]	; 0x84
 800eb64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eb66:	3301      	adds	r3, #1
 800eb68:	2b07      	cmp	r3, #7
 800eb6a:	9320      	str	r3, [sp, #128]	; 0x80
 800eb6c:	dc01      	bgt.n	800eb72 <_vfprintf_r+0xaa2>
 800eb6e:	3408      	adds	r4, #8
 800eb70:	e008      	b.n	800eb84 <_vfprintf_r+0xab4>
 800eb72:	aa1f      	add	r2, sp, #124	; 0x7c
 800eb74:	4659      	mov	r1, fp
 800eb76:	4650      	mov	r0, sl
 800eb78:	f002 ff72 	bl	8011a60 <__sprint_r>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	f040 8163 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800eb82:	ac2c      	add	r4, sp, #176	; 0xb0
 800eb84:	3e10      	subs	r6, #16
 800eb86:	e7e4      	b.n	800eb52 <_vfprintf_r+0xa82>
 800eb88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb8a:	6066      	str	r6, [r4, #4]
 800eb8c:	441e      	add	r6, r3
 800eb8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eb90:	9621      	str	r6, [sp, #132]	; 0x84
 800eb92:	3301      	adds	r3, #1
 800eb94:	2b07      	cmp	r3, #7
 800eb96:	9320      	str	r3, [sp, #128]	; 0x80
 800eb98:	dc01      	bgt.n	800eb9e <_vfprintf_r+0xace>
 800eb9a:	3408      	adds	r4, #8
 800eb9c:	e008      	b.n	800ebb0 <_vfprintf_r+0xae0>
 800eb9e:	aa1f      	add	r2, sp, #124	; 0x7c
 800eba0:	4659      	mov	r1, fp
 800eba2:	4650      	mov	r0, sl
 800eba4:	f002 ff5c 	bl	8011a60 <__sprint_r>
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	f040 814d 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ebae:	ac2c      	add	r4, sp, #176	; 0xb0
 800ebb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ebb2:	9a04      	ldr	r2, [sp, #16]
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	4447      	add	r7, r8
 800ebb8:	db01      	blt.n	800ebbe <_vfprintf_r+0xaee>
 800ebba:	07e8      	lsls	r0, r5, #31
 800ebbc:	d517      	bpl.n	800ebee <_vfprintf_r+0xb1e>
 800ebbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	9b08      	ldr	r3, [sp, #32]
 800ebc4:	6063      	str	r3, [r4, #4]
 800ebc6:	9a08      	ldr	r2, [sp, #32]
 800ebc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebca:	4413      	add	r3, r2
 800ebcc:	9321      	str	r3, [sp, #132]	; 0x84
 800ebce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	2b07      	cmp	r3, #7
 800ebd4:	9320      	str	r3, [sp, #128]	; 0x80
 800ebd6:	dc01      	bgt.n	800ebdc <_vfprintf_r+0xb0c>
 800ebd8:	3408      	adds	r4, #8
 800ebda:	e008      	b.n	800ebee <_vfprintf_r+0xb1e>
 800ebdc:	aa1f      	add	r2, sp, #124	; 0x7c
 800ebde:	4659      	mov	r1, fp
 800ebe0:	4650      	mov	r0, sl
 800ebe2:	f002 ff3d 	bl	8011a60 <__sprint_r>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	f040 812e 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ebec:	ac2c      	add	r4, sp, #176	; 0xb0
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	9a04      	ldr	r2, [sp, #16]
 800ebf2:	eb08 0603 	add.w	r6, r8, r3
 800ebf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ebf8:	1bf6      	subs	r6, r6, r7
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	429e      	cmp	r6, r3
 800ebfe:	bfa8      	it	ge
 800ec00:	461e      	movge	r6, r3
 800ec02:	2e00      	cmp	r6, #0
 800ec04:	dd14      	ble.n	800ec30 <_vfprintf_r+0xb60>
 800ec06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec08:	6027      	str	r7, [r4, #0]
 800ec0a:	4433      	add	r3, r6
 800ec0c:	9321      	str	r3, [sp, #132]	; 0x84
 800ec0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ec10:	6066      	str	r6, [r4, #4]
 800ec12:	3301      	adds	r3, #1
 800ec14:	2b07      	cmp	r3, #7
 800ec16:	9320      	str	r3, [sp, #128]	; 0x80
 800ec18:	dc01      	bgt.n	800ec1e <_vfprintf_r+0xb4e>
 800ec1a:	3408      	adds	r4, #8
 800ec1c:	e008      	b.n	800ec30 <_vfprintf_r+0xb60>
 800ec1e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ec20:	4659      	mov	r1, fp
 800ec22:	4650      	mov	r0, sl
 800ec24:	f002 ff1c 	bl	8011a60 <__sprint_r>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	f040 810d 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ec2e:	ac2c      	add	r4, sp, #176	; 0xb0
 800ec30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec32:	9a04      	ldr	r2, [sp, #16]
 800ec34:	2e00      	cmp	r6, #0
 800ec36:	eba2 0303 	sub.w	r3, r2, r3
 800ec3a:	bfac      	ite	ge
 800ec3c:	1b9e      	subge	r6, r3, r6
 800ec3e:	461e      	movlt	r6, r3
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	f340 80b1 	ble.w	800eda8 <_vfprintf_r+0xcd8>
 800ec46:	4f12      	ldr	r7, [pc, #72]	; (800ec90 <_vfprintf_r+0xbc0>)
 800ec48:	f04f 0810 	mov.w	r8, #16
 800ec4c:	2e10      	cmp	r6, #16
 800ec4e:	dd16      	ble.n	800ec7e <_vfprintf_r+0xbae>
 800ec50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec52:	3310      	adds	r3, #16
 800ec54:	9321      	str	r3, [sp, #132]	; 0x84
 800ec56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ec58:	3301      	adds	r3, #1
 800ec5a:	2b07      	cmp	r3, #7
 800ec5c:	e884 0180 	stmia.w	r4, {r7, r8}
 800ec60:	9320      	str	r3, [sp, #128]	; 0x80
 800ec62:	dc01      	bgt.n	800ec68 <_vfprintf_r+0xb98>
 800ec64:	3408      	adds	r4, #8
 800ec66:	e008      	b.n	800ec7a <_vfprintf_r+0xbaa>
 800ec68:	aa1f      	add	r2, sp, #124	; 0x7c
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	4650      	mov	r0, sl
 800ec6e:	f002 fef7 	bl	8011a60 <__sprint_r>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	f040 80e8 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ec78:	ac2c      	add	r4, sp, #176	; 0xb0
 800ec7a:	3e10      	subs	r6, #16
 800ec7c:	e7e6      	b.n	800ec4c <_vfprintf_r+0xb7c>
 800ec7e:	4b04      	ldr	r3, [pc, #16]	; (800ec90 <_vfprintf_r+0xbc0>)
 800ec80:	e884 0048 	stmia.w	r4, {r3, r6}
 800ec84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec86:	441e      	add	r6, r3
 800ec88:	9621      	str	r6, [sp, #132]	; 0x84
 800ec8a:	e642      	b.n	800e912 <_vfprintf_r+0x842>
 800ec8c:	080153aa 	.word	0x080153aa
 800ec90:	080153cc 	.word	0x080153cc
 800ec94:	9b04      	ldr	r3, [sp, #16]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	dc01      	bgt.n	800ec9e <_vfprintf_r+0xbce>
 800ec9a:	07e9      	lsls	r1, r5, #31
 800ec9c:	d573      	bpl.n	800ed86 <_vfprintf_r+0xcb6>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	6063      	str	r3, [r4, #4]
 800eca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eca4:	f8c4 8000 	str.w	r8, [r4]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	9321      	str	r3, [sp, #132]	; 0x84
 800ecac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ecae:	3301      	adds	r3, #1
 800ecb0:	2b07      	cmp	r3, #7
 800ecb2:	9320      	str	r3, [sp, #128]	; 0x80
 800ecb4:	dc01      	bgt.n	800ecba <_vfprintf_r+0xbea>
 800ecb6:	3408      	adds	r4, #8
 800ecb8:	e008      	b.n	800eccc <_vfprintf_r+0xbfc>
 800ecba:	aa1f      	add	r2, sp, #124	; 0x7c
 800ecbc:	4659      	mov	r1, fp
 800ecbe:	4650      	mov	r0, sl
 800ecc0:	f002 fece 	bl	8011a60 <__sprint_r>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f040 80bf 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ecca:	ac2c      	add	r4, sp, #176	; 0xb0
 800eccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecce:	6023      	str	r3, [r4, #0]
 800ecd0:	9b08      	ldr	r3, [sp, #32]
 800ecd2:	6063      	str	r3, [r4, #4]
 800ecd4:	9a08      	ldr	r2, [sp, #32]
 800ecd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecd8:	4413      	add	r3, r2
 800ecda:	9321      	str	r3, [sp, #132]	; 0x84
 800ecdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ecde:	3301      	adds	r3, #1
 800ece0:	2b07      	cmp	r3, #7
 800ece2:	9320      	str	r3, [sp, #128]	; 0x80
 800ece4:	dc01      	bgt.n	800ecea <_vfprintf_r+0xc1a>
 800ece6:	3408      	adds	r4, #8
 800ece8:	e008      	b.n	800ecfc <_vfprintf_r+0xc2c>
 800ecea:	aa1f      	add	r2, sp, #124	; 0x7c
 800ecec:	4659      	mov	r1, fp
 800ecee:	4650      	mov	r0, sl
 800ecf0:	f002 feb6 	bl	8011a60 <__sprint_r>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	f040 80a7 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ecfa:	ac2c      	add	r4, sp, #176	; 0xb0
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	2200      	movs	r2, #0
 800ed00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed04:	f7f1 fefc 	bl	8000b00 <__aeabi_dcmpeq>
 800ed08:	9b04      	ldr	r3, [sp, #16]
 800ed0a:	1e5e      	subs	r6, r3, #1
 800ed0c:	b9b8      	cbnz	r0, 800ed3e <_vfprintf_r+0xc6e>
 800ed0e:	f108 0301 	add.w	r3, r8, #1
 800ed12:	e884 0048 	stmia.w	r4, {r3, r6}
 800ed16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed18:	9a04      	ldr	r2, [sp, #16]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	4413      	add	r3, r2
 800ed1e:	9321      	str	r3, [sp, #132]	; 0x84
 800ed20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ed22:	3301      	adds	r3, #1
 800ed24:	2b07      	cmp	r3, #7
 800ed26:	9320      	str	r3, [sp, #128]	; 0x80
 800ed28:	dd34      	ble.n	800ed94 <_vfprintf_r+0xcc4>
 800ed2a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ed2c:	4659      	mov	r1, fp
 800ed2e:	4650      	mov	r0, sl
 800ed30:	f002 fe96 	bl	8011a60 <__sprint_r>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	f040 8087 	bne.w	800ee48 <_vfprintf_r+0xd78>
 800ed3a:	ac2c      	add	r4, sp, #176	; 0xb0
 800ed3c:	e02b      	b.n	800ed96 <_vfprintf_r+0xcc6>
 800ed3e:	2e00      	cmp	r6, #0
 800ed40:	dd29      	ble.n	800ed96 <_vfprintf_r+0xcc6>
 800ed42:	4fa6      	ldr	r7, [pc, #664]	; (800efdc <_vfprintf_r+0xf0c>)
 800ed44:	f04f 0810 	mov.w	r8, #16
 800ed48:	2e10      	cmp	r6, #16
 800ed4a:	dd15      	ble.n	800ed78 <_vfprintf_r+0xca8>
 800ed4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed4e:	3310      	adds	r3, #16
 800ed50:	9321      	str	r3, [sp, #132]	; 0x84
 800ed52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ed54:	3301      	adds	r3, #1
 800ed56:	2b07      	cmp	r3, #7
 800ed58:	e884 0180 	stmia.w	r4, {r7, r8}
 800ed5c:	9320      	str	r3, [sp, #128]	; 0x80
 800ed5e:	dc01      	bgt.n	800ed64 <_vfprintf_r+0xc94>
 800ed60:	3408      	adds	r4, #8
 800ed62:	e007      	b.n	800ed74 <_vfprintf_r+0xca4>
 800ed64:	aa1f      	add	r2, sp, #124	; 0x7c
 800ed66:	4659      	mov	r1, fp
 800ed68:	4650      	mov	r0, sl
 800ed6a:	f002 fe79 	bl	8011a60 <__sprint_r>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d16a      	bne.n	800ee48 <_vfprintf_r+0xd78>
 800ed72:	ac2c      	add	r4, sp, #176	; 0xb0
 800ed74:	3e10      	subs	r6, #16
 800ed76:	e7e7      	b.n	800ed48 <_vfprintf_r+0xc78>
 800ed78:	4b98      	ldr	r3, [pc, #608]	; (800efdc <_vfprintf_r+0xf0c>)
 800ed7a:	e884 0048 	stmia.w	r4, {r3, r6}
 800ed7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed80:	441e      	add	r6, r3
 800ed82:	9621      	str	r6, [sp, #132]	; 0x84
 800ed84:	e7cc      	b.n	800ed20 <_vfprintf_r+0xc50>
 800ed86:	2301      	movs	r3, #1
 800ed88:	6063      	str	r3, [r4, #4]
 800ed8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed8c:	f8c4 8000 	str.w	r8, [r4]
 800ed90:	3301      	adds	r3, #1
 800ed92:	e7c4      	b.n	800ed1e <_vfprintf_r+0xc4e>
 800ed94:	3408      	adds	r4, #8
 800ed96:	ab1b      	add	r3, sp, #108	; 0x6c
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed9c:	6063      	str	r3, [r4, #4]
 800ed9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eda0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eda2:	4413      	add	r3, r2
 800eda4:	e5b4      	b.n	800e910 <_vfprintf_r+0x840>
 800eda6:	3408      	adds	r4, #8
 800eda8:	076a      	lsls	r2, r5, #29
 800edaa:	d40b      	bmi.n	800edc4 <_vfprintf_r+0xcf4>
 800edac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edb2:	428a      	cmp	r2, r1
 800edb4:	bfac      	ite	ge
 800edb6:	189b      	addge	r3, r3, r2
 800edb8:	185b      	addlt	r3, r3, r1
 800edba:	930a      	str	r3, [sp, #40]	; 0x28
 800edbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d035      	beq.n	800ee2e <_vfprintf_r+0xd5e>
 800edc2:	e02e      	b.n	800ee22 <_vfprintf_r+0xd52>
 800edc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edc8:	1a9d      	subs	r5, r3, r2
 800edca:	2d00      	cmp	r5, #0
 800edcc:	ddee      	ble.n	800edac <_vfprintf_r+0xcdc>
 800edce:	2610      	movs	r6, #16
 800edd0:	4b83      	ldr	r3, [pc, #524]	; (800efe0 <_vfprintf_r+0xf10>)
 800edd2:	6023      	str	r3, [r4, #0]
 800edd4:	2d10      	cmp	r5, #16
 800edd6:	dd13      	ble.n	800ee00 <_vfprintf_r+0xd30>
 800edd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edda:	6066      	str	r6, [r4, #4]
 800eddc:	3310      	adds	r3, #16
 800edde:	9321      	str	r3, [sp, #132]	; 0x84
 800ede0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ede2:	3301      	adds	r3, #1
 800ede4:	2b07      	cmp	r3, #7
 800ede6:	9320      	str	r3, [sp, #128]	; 0x80
 800ede8:	dc01      	bgt.n	800edee <_vfprintf_r+0xd1e>
 800edea:	3408      	adds	r4, #8
 800edec:	e006      	b.n	800edfc <_vfprintf_r+0xd2c>
 800edee:	aa1f      	add	r2, sp, #124	; 0x7c
 800edf0:	4659      	mov	r1, fp
 800edf2:	4650      	mov	r0, sl
 800edf4:	f002 fe34 	bl	8011a60 <__sprint_r>
 800edf8:	bb30      	cbnz	r0, 800ee48 <_vfprintf_r+0xd78>
 800edfa:	ac2c      	add	r4, sp, #176	; 0xb0
 800edfc:	3d10      	subs	r5, #16
 800edfe:	e7e7      	b.n	800edd0 <_vfprintf_r+0xd00>
 800ee00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee02:	6065      	str	r5, [r4, #4]
 800ee04:	441d      	add	r5, r3
 800ee06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ee08:	9521      	str	r5, [sp, #132]	; 0x84
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	2b07      	cmp	r3, #7
 800ee0e:	9320      	str	r3, [sp, #128]	; 0x80
 800ee10:	ddcc      	ble.n	800edac <_vfprintf_r+0xcdc>
 800ee12:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee14:	4659      	mov	r1, fp
 800ee16:	4650      	mov	r0, sl
 800ee18:	f002 fe22 	bl	8011a60 <__sprint_r>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d0c5      	beq.n	800edac <_vfprintf_r+0xcdc>
 800ee20:	e012      	b.n	800ee48 <_vfprintf_r+0xd78>
 800ee22:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee24:	4659      	mov	r1, fp
 800ee26:	4650      	mov	r0, sl
 800ee28:	f002 fe1a 	bl	8011a60 <__sprint_r>
 800ee2c:	b960      	cbnz	r0, 800ee48 <_vfprintf_r+0xd78>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	9320      	str	r3, [sp, #128]	; 0x80
 800ee32:	9f03      	ldr	r7, [sp, #12]
 800ee34:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee36:	f7ff b9b4 	b.w	800e1a2 <_vfprintf_r+0xd2>
 800ee3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee3c:	b123      	cbz	r3, 800ee48 <_vfprintf_r+0xd78>
 800ee3e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee40:	4659      	mov	r1, fp
 800ee42:	4650      	mov	r0, sl
 800ee44:	f002 fe0c 	bl	8011a60 <__sprint_r>
 800ee48:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ee4c:	065b      	lsls	r3, r3, #25
 800ee4e:	f53f a98b 	bmi.w	800e168 <_vfprintf_r+0x98>
 800ee52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee54:	e12f      	b.n	800f0b6 <_vfprintf_r+0xfe6>
 800ee56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	f7f1 fe81 	bl	8000b64 <__aeabi_dcmpun>
 800ee62:	b160      	cbz	r0, 800ee7e <_vfprintf_r+0xdae>
 800ee64:	4b5f      	ldr	r3, [pc, #380]	; (800efe4 <_vfprintf_r+0xf14>)
 800ee66:	4a60      	ldr	r2, [pc, #384]	; (800efe8 <_vfprintf_r+0xf18>)
 800ee68:	9902      	ldr	r1, [sp, #8]
 800ee6a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ee6e:	2947      	cmp	r1, #71	; 0x47
 800ee70:	bfcc      	ite	gt
 800ee72:	4690      	movgt	r8, r2
 800ee74:	4698      	movle	r8, r3
 800ee76:	f04f 0903 	mov.w	r9, #3
 800ee7a:	2600      	movs	r6, #0
 800ee7c:	e451      	b.n	800e722 <_vfprintf_r+0x652>
 800ee7e:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ee82:	d00a      	beq.n	800ee9a <_vfprintf_r+0xdca>
 800ee84:	9b02      	ldr	r3, [sp, #8]
 800ee86:	f023 0320 	bic.w	r3, r3, #32
 800ee8a:	2b47      	cmp	r3, #71	; 0x47
 800ee8c:	d107      	bne.n	800ee9e <_vfprintf_r+0xdce>
 800ee8e:	f1b9 0f00 	cmp.w	r9, #0
 800ee92:	bf08      	it	eq
 800ee94:	f04f 0901 	moveq.w	r9, #1
 800ee98:	e001      	b.n	800ee9e <_vfprintf_r+0xdce>
 800ee9a:	f04f 0906 	mov.w	r9, #6
 800ee9e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800eea2:	930c      	str	r3, [sp, #48]	; 0x30
 800eea4:	9b07      	ldr	r3, [sp, #28]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	da07      	bge.n	800eeba <_vfprintf_r+0xdea>
 800eeaa:	9b06      	ldr	r3, [sp, #24]
 800eeac:	930e      	str	r3, [sp, #56]	; 0x38
 800eeae:	9b07      	ldr	r3, [sp, #28]
 800eeb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eeb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800eeb6:	232d      	movs	r3, #45	; 0x2d
 800eeb8:	e004      	b.n	800eec4 <_vfprintf_r+0xdf4>
 800eeba:	ed9d 7b06 	vldr	d7, [sp, #24]
 800eebe:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800eec2:	2300      	movs	r3, #0
 800eec4:	930b      	str	r3, [sp, #44]	; 0x2c
 800eec6:	9b02      	ldr	r3, [sp, #8]
 800eec8:	f023 0720 	bic.w	r7, r3, #32
 800eecc:	2f46      	cmp	r7, #70	; 0x46
 800eece:	d004      	beq.n	800eeda <_vfprintf_r+0xe0a>
 800eed0:	2f45      	cmp	r7, #69	; 0x45
 800eed2:	d105      	bne.n	800eee0 <_vfprintf_r+0xe10>
 800eed4:	f109 0601 	add.w	r6, r9, #1
 800eed8:	e003      	b.n	800eee2 <_vfprintf_r+0xe12>
 800eeda:	464e      	mov	r6, r9
 800eedc:	2103      	movs	r1, #3
 800eede:	e001      	b.n	800eee4 <_vfprintf_r+0xe14>
 800eee0:	464e      	mov	r6, r9
 800eee2:	2102      	movs	r1, #2
 800eee4:	ab1d      	add	r3, sp, #116	; 0x74
 800eee6:	9301      	str	r3, [sp, #4]
 800eee8:	ab1a      	add	r3, sp, #104	; 0x68
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	4632      	mov	r2, r6
 800eeee:	ab19      	add	r3, sp, #100	; 0x64
 800eef0:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800eef4:	4650      	mov	r0, sl
 800eef6:	f000 fa1b 	bl	800f330 <_dtoa_r>
 800eefa:	2f47      	cmp	r7, #71	; 0x47
 800eefc:	4680      	mov	r8, r0
 800eefe:	d102      	bne.n	800ef06 <_vfprintf_r+0xe36>
 800ef00:	07eb      	lsls	r3, r5, #31
 800ef02:	f140 80ce 	bpl.w	800f0a2 <_vfprintf_r+0xfd2>
 800ef06:	eb08 0306 	add.w	r3, r8, r6
 800ef0a:	2f46      	cmp	r7, #70	; 0x46
 800ef0c:	9304      	str	r3, [sp, #16]
 800ef0e:	d111      	bne.n	800ef34 <_vfprintf_r+0xe64>
 800ef10:	f898 3000 	ldrb.w	r3, [r8]
 800ef14:	2b30      	cmp	r3, #48	; 0x30
 800ef16:	d109      	bne.n	800ef2c <_vfprintf_r+0xe5c>
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ef20:	f7f1 fdee 	bl	8000b00 <__aeabi_dcmpeq>
 800ef24:	b910      	cbnz	r0, 800ef2c <_vfprintf_r+0xe5c>
 800ef26:	f1c6 0601 	rsb	r6, r6, #1
 800ef2a:	9619      	str	r6, [sp, #100]	; 0x64
 800ef2c:	9a04      	ldr	r2, [sp, #16]
 800ef2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef30:	441a      	add	r2, r3
 800ef32:	9204      	str	r2, [sp, #16]
 800ef34:	2200      	movs	r2, #0
 800ef36:	2300      	movs	r3, #0
 800ef38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ef3c:	f7f1 fde0 	bl	8000b00 <__aeabi_dcmpeq>
 800ef40:	b908      	cbnz	r0, 800ef46 <_vfprintf_r+0xe76>
 800ef42:	2230      	movs	r2, #48	; 0x30
 800ef44:	e002      	b.n	800ef4c <_vfprintf_r+0xe7c>
 800ef46:	9b04      	ldr	r3, [sp, #16]
 800ef48:	931d      	str	r3, [sp, #116]	; 0x74
 800ef4a:	e007      	b.n	800ef5c <_vfprintf_r+0xe8c>
 800ef4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef4e:	9904      	ldr	r1, [sp, #16]
 800ef50:	4299      	cmp	r1, r3
 800ef52:	d903      	bls.n	800ef5c <_vfprintf_r+0xe8c>
 800ef54:	1c59      	adds	r1, r3, #1
 800ef56:	911d      	str	r1, [sp, #116]	; 0x74
 800ef58:	701a      	strb	r2, [r3, #0]
 800ef5a:	e7f7      	b.n	800ef4c <_vfprintf_r+0xe7c>
 800ef5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef5e:	2f47      	cmp	r7, #71	; 0x47
 800ef60:	ebc8 0303 	rsb	r3, r8, r3
 800ef64:	9304      	str	r3, [sp, #16]
 800ef66:	d108      	bne.n	800ef7a <_vfprintf_r+0xeaa>
 800ef68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef6a:	1cdf      	adds	r7, r3, #3
 800ef6c:	db01      	blt.n	800ef72 <_vfprintf_r+0xea2>
 800ef6e:	4599      	cmp	r9, r3
 800ef70:	da69      	bge.n	800f046 <_vfprintf_r+0xf76>
 800ef72:	9b02      	ldr	r3, [sp, #8]
 800ef74:	3b02      	subs	r3, #2
 800ef76:	9302      	str	r3, [sp, #8]
 800ef78:	e002      	b.n	800ef80 <_vfprintf_r+0xeb0>
 800ef7a:	9b02      	ldr	r3, [sp, #8]
 800ef7c:	2b65      	cmp	r3, #101	; 0x65
 800ef7e:	dc4b      	bgt.n	800f018 <_vfprintf_r+0xf48>
 800ef80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef82:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ef86:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	9319      	str	r3, [sp, #100]	; 0x64
 800ef90:	bfba      	itte	lt
 800ef92:	425b      	neglt	r3, r3
 800ef94:	222d      	movlt	r2, #45	; 0x2d
 800ef96:	222b      	movge	r2, #43	; 0x2b
 800ef98:	2b09      	cmp	r3, #9
 800ef9a:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800ef9e:	dd25      	ble.n	800efec <_vfprintf_r+0xf1c>
 800efa0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800efa4:	200a      	movs	r0, #10
 800efa6:	fb93 f1f0 	sdiv	r1, r3, r0
 800efaa:	fb00 3311 	mls	r3, r0, r1, r3
 800efae:	3330      	adds	r3, #48	; 0x30
 800efb0:	2909      	cmp	r1, #9
 800efb2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800efb6:	460b      	mov	r3, r1
 800efb8:	dcf5      	bgt.n	800efa6 <_vfprintf_r+0xed6>
 800efba:	3330      	adds	r3, #48	; 0x30
 800efbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800efc0:	1e51      	subs	r1, r2, #1
 800efc2:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800efc6:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800efca:	4281      	cmp	r1, r0
 800efcc:	461a      	mov	r2, r3
 800efce:	d214      	bcs.n	800effa <_vfprintf_r+0xf2a>
 800efd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efd4:	f803 2b01 	strb.w	r2, [r3], #1
 800efd8:	e7f7      	b.n	800efca <_vfprintf_r+0xefa>
 800efda:	bf00      	nop
 800efdc:	080153cc 	.word	0x080153cc
 800efe0:	080153bc 	.word	0x080153bc
 800efe4:	08015380 	.word	0x08015380
 800efe8:	08015384 	.word	0x08015384
 800efec:	2230      	movs	r2, #48	; 0x30
 800efee:	4413      	add	r3, r2
 800eff0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800eff4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800eff8:	aa1c      	add	r2, sp, #112	; 0x70
 800effa:	ab1b      	add	r3, sp, #108	; 0x6c
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	9a04      	ldr	r2, [sp, #16]
 800f000:	9310      	str	r3, [sp, #64]	; 0x40
 800f002:	2a01      	cmp	r2, #1
 800f004:	eb03 0902 	add.w	r9, r3, r2
 800f008:	dc02      	bgt.n	800f010 <_vfprintf_r+0xf40>
 800f00a:	f015 0701 	ands.w	r7, r5, #1
 800f00e:	d032      	beq.n	800f076 <_vfprintf_r+0xfa6>
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	2700      	movs	r7, #0
 800f014:	4499      	add	r9, r3
 800f016:	e02e      	b.n	800f076 <_vfprintf_r+0xfa6>
 800f018:	9b02      	ldr	r3, [sp, #8]
 800f01a:	2b66      	cmp	r3, #102	; 0x66
 800f01c:	d113      	bne.n	800f046 <_vfprintf_r+0xf76>
 800f01e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd07      	ble.n	800f034 <_vfprintf_r+0xf64>
 800f024:	f1b9 0f00 	cmp.w	r9, #0
 800f028:	d101      	bne.n	800f02e <_vfprintf_r+0xf5e>
 800f02a:	07ee      	lsls	r6, r5, #31
 800f02c:	d521      	bpl.n	800f072 <_vfprintf_r+0xfa2>
 800f02e:	9a08      	ldr	r2, [sp, #32]
 800f030:	4413      	add	r3, r2
 800f032:	e006      	b.n	800f042 <_vfprintf_r+0xf72>
 800f034:	f1b9 0f00 	cmp.w	r9, #0
 800f038:	d101      	bne.n	800f03e <_vfprintf_r+0xf6e>
 800f03a:	07ed      	lsls	r5, r5, #31
 800f03c:	d514      	bpl.n	800f068 <_vfprintf_r+0xf98>
 800f03e:	9b08      	ldr	r3, [sp, #32]
 800f040:	3301      	adds	r3, #1
 800f042:	444b      	add	r3, r9
 800f044:	e015      	b.n	800f072 <_vfprintf_r+0xfa2>
 800f046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f048:	9a04      	ldr	r2, [sp, #16]
 800f04a:	4293      	cmp	r3, r2
 800f04c:	db03      	blt.n	800f056 <_vfprintf_r+0xf86>
 800f04e:	07e8      	lsls	r0, r5, #31
 800f050:	d50d      	bpl.n	800f06e <_vfprintf_r+0xf9e>
 800f052:	9a08      	ldr	r2, [sp, #32]
 800f054:	e006      	b.n	800f064 <_vfprintf_r+0xf94>
 800f056:	9a04      	ldr	r2, [sp, #16]
 800f058:	9908      	ldr	r1, [sp, #32]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	440a      	add	r2, r1
 800f05e:	dc05      	bgt.n	800f06c <_vfprintf_r+0xf9c>
 800f060:	f1c3 0301 	rsb	r3, r3, #1
 800f064:	4413      	add	r3, r2
 800f066:	e002      	b.n	800f06e <_vfprintf_r+0xf9e>
 800f068:	2301      	movs	r3, #1
 800f06a:	e002      	b.n	800f072 <_vfprintf_r+0xfa2>
 800f06c:	4613      	mov	r3, r2
 800f06e:	2267      	movs	r2, #103	; 0x67
 800f070:	9202      	str	r2, [sp, #8]
 800f072:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800f074:	4699      	mov	r9, r3
 800f076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f078:	b113      	cbz	r3, 800f080 <_vfprintf_r+0xfb0>
 800f07a:	232d      	movs	r3, #45	; 0x2d
 800f07c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800f080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f082:	2600      	movs	r6, #0
 800f084:	f7ff bb4e 	b.w	800e724 <_vfprintf_r+0x654>
 800f088:	2200      	movs	r2, #0
 800f08a:	2300      	movs	r3, #0
 800f08c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f090:	f7f1 fd40 	bl	8000b14 <__aeabi_dcmplt>
 800f094:	b110      	cbz	r0, 800f09c <_vfprintf_r+0xfcc>
 800f096:	232d      	movs	r3, #45	; 0x2d
 800f098:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800f09c:	4b07      	ldr	r3, [pc, #28]	; (800f0bc <_vfprintf_r+0xfec>)
 800f09e:	4a08      	ldr	r2, [pc, #32]	; (800f0c0 <_vfprintf_r+0xff0>)
 800f0a0:	e6e2      	b.n	800ee68 <_vfprintf_r+0xd98>
 800f0a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0a4:	1a1b      	subs	r3, r3, r0
 800f0a6:	9304      	str	r3, [sp, #16]
 800f0a8:	e75e      	b.n	800ef68 <_vfprintf_r+0xe98>
 800f0aa:	ea56 0207 	orrs.w	r2, r6, r7
 800f0ae:	f47f aaac 	bne.w	800e60a <_vfprintf_r+0x53a>
 800f0b2:	f7ff bab1 	b.w	800e618 <_vfprintf_r+0x548>
 800f0b6:	b03d      	add	sp, #244	; 0xf4
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	08015378 	.word	0x08015378
 800f0c0:	0801537c 	.word	0x0801537c

0800f0c4 <__sbprintf>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	8989      	ldrh	r1, [r1, #12]
 800f0ca:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800f0ce:	f021 0102 	bic.w	r1, r1, #2
 800f0d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f0d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f0d8:	9119      	str	r1, [sp, #100]	; 0x64
 800f0da:	89e1      	ldrh	r1, [r4, #14]
 800f0dc:	f8ad 100e 	strh.w	r1, [sp, #14]
 800f0e0:	6a21      	ldr	r1, [r4, #32]
 800f0e2:	9108      	str	r1, [sp, #32]
 800f0e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f0e6:	910a      	str	r1, [sp, #40]	; 0x28
 800f0e8:	a91a      	add	r1, sp, #104	; 0x68
 800f0ea:	9100      	str	r1, [sp, #0]
 800f0ec:	9104      	str	r1, [sp, #16]
 800f0ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f0f2:	9102      	str	r1, [sp, #8]
 800f0f4:	9105      	str	r1, [sp, #20]
 800f0f6:	2100      	movs	r1, #0
 800f0f8:	9106      	str	r1, [sp, #24]
 800f0fa:	4669      	mov	r1, sp
 800f0fc:	4606      	mov	r6, r0
 800f0fe:	f7fe ffe7 	bl	800e0d0 <_vfprintf_r>
 800f102:	1e05      	subs	r5, r0, #0
 800f104:	db07      	blt.n	800f116 <__sbprintf+0x52>
 800f106:	4669      	mov	r1, sp
 800f108:	4630      	mov	r0, r6
 800f10a:	f000 ff41 	bl	800ff90 <_fflush_r>
 800f10e:	2800      	cmp	r0, #0
 800f110:	bf18      	it	ne
 800f112:	f04f 35ff 	movne.w	r5, #4294967295
 800f116:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f11a:	065b      	lsls	r3, r3, #25
 800f11c:	bf48      	it	mi
 800f11e:	89a3      	ldrhmi	r3, [r4, #12]
 800f120:	4628      	mov	r0, r5
 800f122:	bf44      	itt	mi
 800f124:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f128:	81a3      	strhmi	r3, [r4, #12]
 800f12a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800f12e:	bd70      	pop	{r4, r5, r6, pc}

0800f130 <__swsetup_r>:
 800f130:	4b32      	ldr	r3, [pc, #200]	; (800f1fc <__swsetup_r+0xcc>)
 800f132:	b570      	push	{r4, r5, r6, lr}
 800f134:	681d      	ldr	r5, [r3, #0]
 800f136:	4606      	mov	r6, r0
 800f138:	460c      	mov	r4, r1
 800f13a:	b125      	cbz	r5, 800f146 <__swsetup_r+0x16>
 800f13c:	69ab      	ldr	r3, [r5, #24]
 800f13e:	b913      	cbnz	r3, 800f146 <__swsetup_r+0x16>
 800f140:	4628      	mov	r0, r5
 800f142:	f000 ff8f 	bl	8010064 <__sinit>
 800f146:	4b2e      	ldr	r3, [pc, #184]	; (800f200 <__swsetup_r+0xd0>)
 800f148:	429c      	cmp	r4, r3
 800f14a:	d101      	bne.n	800f150 <__swsetup_r+0x20>
 800f14c:	686c      	ldr	r4, [r5, #4]
 800f14e:	e008      	b.n	800f162 <__swsetup_r+0x32>
 800f150:	4b2c      	ldr	r3, [pc, #176]	; (800f204 <__swsetup_r+0xd4>)
 800f152:	429c      	cmp	r4, r3
 800f154:	d101      	bne.n	800f15a <__swsetup_r+0x2a>
 800f156:	68ac      	ldr	r4, [r5, #8]
 800f158:	e003      	b.n	800f162 <__swsetup_r+0x32>
 800f15a:	4b2b      	ldr	r3, [pc, #172]	; (800f208 <__swsetup_r+0xd8>)
 800f15c:	429c      	cmp	r4, r3
 800f15e:	bf08      	it	eq
 800f160:	68ec      	ldreq	r4, [r5, #12]
 800f162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f166:	b29a      	uxth	r2, r3
 800f168:	0715      	lsls	r5, r2, #28
 800f16a:	d41d      	bmi.n	800f1a8 <__swsetup_r+0x78>
 800f16c:	06d0      	lsls	r0, r2, #27
 800f16e:	d402      	bmi.n	800f176 <__swsetup_r+0x46>
 800f170:	2209      	movs	r2, #9
 800f172:	6032      	str	r2, [r6, #0]
 800f174:	e03a      	b.n	800f1ec <__swsetup_r+0xbc>
 800f176:	0751      	lsls	r1, r2, #29
 800f178:	d512      	bpl.n	800f1a0 <__swsetup_r+0x70>
 800f17a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f17c:	b141      	cbz	r1, 800f190 <__swsetup_r+0x60>
 800f17e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f182:	4299      	cmp	r1, r3
 800f184:	d002      	beq.n	800f18c <__swsetup_r+0x5c>
 800f186:	4630      	mov	r0, r6
 800f188:	f001 f834 	bl	80101f4 <_free_r>
 800f18c:	2300      	movs	r3, #0
 800f18e:	6363      	str	r3, [r4, #52]	; 0x34
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	2300      	movs	r3, #0
 800f19a:	6063      	str	r3, [r4, #4]
 800f19c:	6923      	ldr	r3, [r4, #16]
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	f043 0308 	orr.w	r3, r3, #8
 800f1a6:	81a3      	strh	r3, [r4, #12]
 800f1a8:	6923      	ldr	r3, [r4, #16]
 800f1aa:	b94b      	cbnz	r3, 800f1c0 <__swsetup_r+0x90>
 800f1ac:	89a3      	ldrh	r3, [r4, #12]
 800f1ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1b6:	d003      	beq.n	800f1c0 <__swsetup_r+0x90>
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f001 fd98 	bl	8010cf0 <__smakebuf_r>
 800f1c0:	89a2      	ldrh	r2, [r4, #12]
 800f1c2:	f012 0301 	ands.w	r3, r2, #1
 800f1c6:	d005      	beq.n	800f1d4 <__swsetup_r+0xa4>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	60a3      	str	r3, [r4, #8]
 800f1cc:	6963      	ldr	r3, [r4, #20]
 800f1ce:	425b      	negs	r3, r3
 800f1d0:	61a3      	str	r3, [r4, #24]
 800f1d2:	e003      	b.n	800f1dc <__swsetup_r+0xac>
 800f1d4:	0792      	lsls	r2, r2, #30
 800f1d6:	bf58      	it	pl
 800f1d8:	6963      	ldrpl	r3, [r4, #20]
 800f1da:	60a3      	str	r3, [r4, #8]
 800f1dc:	6923      	ldr	r3, [r4, #16]
 800f1de:	b95b      	cbnz	r3, 800f1f8 <__swsetup_r+0xc8>
 800f1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e4:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800f1e8:	b280      	uxth	r0, r0
 800f1ea:	b130      	cbz	r0, 800f1fa <__swsetup_r+0xca>
 800f1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f0:	81a3      	strh	r3, [r4, #12]
 800f1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	20010120 	.word	0x20010120
 800f200:	080154ec 	.word	0x080154ec
 800f204:	0801550c 	.word	0x0801550c
 800f208:	0801552c 	.word	0x0801552c

0800f20c <quorem>:
 800f20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	6903      	ldr	r3, [r0, #16]
 800f212:	690c      	ldr	r4, [r1, #16]
 800f214:	429c      	cmp	r4, r3
 800f216:	4680      	mov	r8, r0
 800f218:	f300 8083 	bgt.w	800f322 <quorem+0x116>
 800f21c:	3c01      	subs	r4, #1
 800f21e:	f101 0714 	add.w	r7, r1, #20
 800f222:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800f226:	f100 0614 	add.w	r6, r0, #20
 800f22a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f22e:	eb06 030e 	add.w	r3, r6, lr
 800f232:	9301      	str	r3, [sp, #4]
 800f234:	3501      	adds	r5, #1
 800f236:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800f23a:	fbb3 f5f5 	udiv	r5, r3, r5
 800f23e:	eb07 090e 	add.w	r9, r7, lr
 800f242:	2d00      	cmp	r5, #0
 800f244:	d039      	beq.n	800f2ba <quorem+0xae>
 800f246:	f04f 0a00 	mov.w	sl, #0
 800f24a:	4638      	mov	r0, r7
 800f24c:	46b4      	mov	ip, r6
 800f24e:	46d3      	mov	fp, sl
 800f250:	f850 2b04 	ldr.w	r2, [r0], #4
 800f254:	b293      	uxth	r3, r2
 800f256:	fb05 a303 	mla	r3, r5, r3, sl
 800f25a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f25e:	b29b      	uxth	r3, r3
 800f260:	ebc3 030b 	rsb	r3, r3, fp
 800f264:	0c12      	lsrs	r2, r2, #16
 800f266:	f8bc b000 	ldrh.w	fp, [ip]
 800f26a:	fb05 a202 	mla	r2, r5, r2, sl
 800f26e:	fa13 f38b 	uxtah	r3, r3, fp
 800f272:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f276:	fa1f fb82 	uxth.w	fp, r2
 800f27a:	f8dc 2000 	ldr.w	r2, [ip]
 800f27e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f282:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f286:	b29b      	uxth	r3, r3
 800f288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f28c:	4581      	cmp	r9, r0
 800f28e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f292:	f84c 3b04 	str.w	r3, [ip], #4
 800f296:	d2db      	bcs.n	800f250 <quorem+0x44>
 800f298:	f856 300e 	ldr.w	r3, [r6, lr]
 800f29c:	b96b      	cbnz	r3, 800f2ba <quorem+0xae>
 800f29e:	9b01      	ldr	r3, [sp, #4]
 800f2a0:	3b04      	subs	r3, #4
 800f2a2:	429e      	cmp	r6, r3
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	d302      	bcc.n	800f2ae <quorem+0xa2>
 800f2a8:	f8c8 4010 	str.w	r4, [r8, #16]
 800f2ac:	e005      	b.n	800f2ba <quorem+0xae>
 800f2ae:	6812      	ldr	r2, [r2, #0]
 800f2b0:	3b04      	subs	r3, #4
 800f2b2:	2a00      	cmp	r2, #0
 800f2b4:	d1f8      	bne.n	800f2a8 <quorem+0x9c>
 800f2b6:	3c01      	subs	r4, #1
 800f2b8:	e7f3      	b.n	800f2a2 <quorem+0x96>
 800f2ba:	4640      	mov	r0, r8
 800f2bc:	f001 ffbb 	bl	8011236 <__mcmp>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	db2c      	blt.n	800f31e <quorem+0x112>
 800f2c4:	3501      	adds	r5, #1
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f04f 0e00 	mov.w	lr, #0
 800f2cc:	f857 1b04 	ldr.w	r1, [r7], #4
 800f2d0:	f8d0 c000 	ldr.w	ip, [r0]
 800f2d4:	b28a      	uxth	r2, r1
 800f2d6:	ebc2 030e 	rsb	r3, r2, lr
 800f2da:	0c09      	lsrs	r1, r1, #16
 800f2dc:	fa13 f38c 	uxtah	r3, r3, ip
 800f2e0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800f2e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2ee:	45b9      	cmp	r9, r7
 800f2f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f2f4:	f840 3b04 	str.w	r3, [r0], #4
 800f2f8:	d2e8      	bcs.n	800f2cc <quorem+0xc0>
 800f2fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f2fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f302:	b962      	cbnz	r2, 800f31e <quorem+0x112>
 800f304:	3b04      	subs	r3, #4
 800f306:	429e      	cmp	r6, r3
 800f308:	461a      	mov	r2, r3
 800f30a:	d302      	bcc.n	800f312 <quorem+0x106>
 800f30c:	f8c8 4010 	str.w	r4, [r8, #16]
 800f310:	e005      	b.n	800f31e <quorem+0x112>
 800f312:	6812      	ldr	r2, [r2, #0]
 800f314:	3b04      	subs	r3, #4
 800f316:	2a00      	cmp	r2, #0
 800f318:	d1f8      	bne.n	800f30c <quorem+0x100>
 800f31a:	3c01      	subs	r4, #1
 800f31c:	e7f3      	b.n	800f306 <quorem+0xfa>
 800f31e:	4628      	mov	r0, r5
 800f320:	e000      	b.n	800f324 <quorem+0x118>
 800f322:	2000      	movs	r0, #0
 800f324:	b003      	add	sp, #12
 800f326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32a:	0000      	movs	r0, r0
 800f32c:	0000      	movs	r0, r0
	...

0800f330 <_dtoa_r>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	ec59 8b10 	vmov	r8, r9, d0
 800f338:	b097      	sub	sp, #92	; 0x5c
 800f33a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f33c:	9106      	str	r1, [sp, #24]
 800f33e:	4682      	mov	sl, r0
 800f340:	9209      	str	r2, [sp, #36]	; 0x24
 800f342:	9310      	str	r3, [sp, #64]	; 0x40
 800f344:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f346:	e9cd 8900 	strd	r8, r9, [sp]
 800f34a:	b945      	cbnz	r5, 800f35e <_dtoa_r+0x2e>
 800f34c:	2010      	movs	r0, #16
 800f34e:	f7fc fb6b 	bl	800ba28 <malloc>
 800f352:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800f356:	6045      	str	r5, [r0, #4]
 800f358:	6085      	str	r5, [r0, #8]
 800f35a:	6005      	str	r5, [r0, #0]
 800f35c:	60c5      	str	r5, [r0, #12]
 800f35e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f362:	6819      	ldr	r1, [r3, #0]
 800f364:	b159      	cbz	r1, 800f37e <_dtoa_r+0x4e>
 800f366:	685a      	ldr	r2, [r3, #4]
 800f368:	604a      	str	r2, [r1, #4]
 800f36a:	2301      	movs	r3, #1
 800f36c:	4093      	lsls	r3, r2
 800f36e:	608b      	str	r3, [r1, #8]
 800f370:	4650      	mov	r0, sl
 800f372:	f001 fd49 	bl	8010e08 <_Bfree>
 800f376:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f37a:	2200      	movs	r2, #0
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	9b01      	ldr	r3, [sp, #4]
 800f380:	4a9f      	ldr	r2, [pc, #636]	; (800f600 <_dtoa_r+0x2d0>)
 800f382:	2b00      	cmp	r3, #0
 800f384:	bfbf      	itttt	lt
 800f386:	2301      	movlt	r3, #1
 800f388:	6023      	strlt	r3, [r4, #0]
 800f38a:	9b01      	ldrlt	r3, [sp, #4]
 800f38c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f390:	bfb8      	it	lt
 800f392:	9301      	strlt	r3, [sp, #4]
 800f394:	9f01      	ldr	r7, [sp, #4]
 800f396:	bfa4      	itt	ge
 800f398:	2300      	movge	r3, #0
 800f39a:	6023      	strge	r3, [r4, #0]
 800f39c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800f3a0:	0d1b      	lsrs	r3, r3, #20
 800f3a2:	051b      	lsls	r3, r3, #20
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d11d      	bne.n	800f3e4 <_dtoa_r+0xb4>
 800f3a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	9b00      	ldr	r3, [sp, #0]
 800f3b2:	b943      	cbnz	r3, 800f3c6 <_dtoa_r+0x96>
 800f3b4:	4a93      	ldr	r2, [pc, #588]	; (800f604 <_dtoa_r+0x2d4>)
 800f3b6:	4b94      	ldr	r3, [pc, #592]	; (800f608 <_dtoa_r+0x2d8>)
 800f3b8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	bf14      	ite	ne
 800f3c0:	4618      	movne	r0, r3
 800f3c2:	4610      	moveq	r0, r2
 800f3c4:	e000      	b.n	800f3c8 <_dtoa_r+0x98>
 800f3c6:	4890      	ldr	r0, [pc, #576]	; (800f608 <_dtoa_r+0x2d8>)
 800f3c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 854a 	beq.w	800fe64 <_dtoa_r+0xb34>
 800f3d0:	78c3      	ldrb	r3, [r0, #3]
 800f3d2:	b113      	cbz	r3, 800f3da <_dtoa_r+0xaa>
 800f3d4:	f100 0308 	add.w	r3, r0, #8
 800f3d8:	e000      	b.n	800f3dc <_dtoa_r+0xac>
 800f3da:	1cc3      	adds	r3, r0, #3
 800f3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f3de:	6013      	str	r3, [r2, #0]
 800f3e0:	f000 bd40 	b.w	800fe64 <_dtoa_r+0xb34>
 800f3e4:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	f7f1 fb86 	bl	8000b00 <__aeabi_dcmpeq>
 800f3f4:	4680      	mov	r8, r0
 800f3f6:	b158      	cbz	r0, 800f410 <_dtoa_r+0xe0>
 800f3f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	6013      	str	r3, [r2, #0]
 800f3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f400:	2b00      	cmp	r3, #0
 800f402:	f000 8522 	beq.w	800fe4a <_dtoa_r+0xb1a>
 800f406:	4881      	ldr	r0, [pc, #516]	; (800f60c <_dtoa_r+0x2dc>)
 800f408:	6018      	str	r0, [r3, #0]
 800f40a:	3801      	subs	r0, #1
 800f40c:	f000 bd2a 	b.w	800fe64 <_dtoa_r+0xb34>
 800f410:	aa14      	add	r2, sp, #80	; 0x50
 800f412:	a915      	add	r1, sp, #84	; 0x54
 800f414:	ec45 4b10 	vmov	d0, r4, r5
 800f418:	4650      	mov	r0, sl
 800f41a:	f001 fffc 	bl	8011416 <__d2b>
 800f41e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f422:	9002      	str	r0, [sp, #8]
 800f424:	b15e      	cbz	r6, 800f43e <_dtoa_r+0x10e>
 800f426:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f42a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f42e:	4620      	mov	r0, r4
 800f430:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f434:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800f438:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800f43c:	e01d      	b.n	800f47a <_dtoa_r+0x14a>
 800f43e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f440:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f442:	441e      	add	r6, r3
 800f444:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800f448:	2b20      	cmp	r3, #32
 800f44a:	dd0a      	ble.n	800f462 <_dtoa_r+0x132>
 800f44c:	9a00      	ldr	r2, [sp, #0]
 800f44e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800f452:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800f456:	fa22 f000 	lsr.w	r0, r2, r0
 800f45a:	fa07 f303 	lsl.w	r3, r7, r3
 800f45e:	4318      	orrs	r0, r3
 800f460:	e004      	b.n	800f46c <_dtoa_r+0x13c>
 800f462:	f1c3 0020 	rsb	r0, r3, #32
 800f466:	9b00      	ldr	r3, [sp, #0]
 800f468:	fa03 f000 	lsl.w	r0, r3, r0
 800f46c:	f7f1 f86a 	bl	8000544 <__aeabi_ui2d>
 800f470:	2301      	movs	r3, #1
 800f472:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f476:	3e01      	subs	r6, #1
 800f478:	9311      	str	r3, [sp, #68]	; 0x44
 800f47a:	2200      	movs	r2, #0
 800f47c:	4b64      	ldr	r3, [pc, #400]	; (800f610 <_dtoa_r+0x2e0>)
 800f47e:	f7f0 ff23 	bl	80002c8 <__aeabi_dsub>
 800f482:	a359      	add	r3, pc, #356	; (adr r3, 800f5e8 <_dtoa_r+0x2b8>)
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f7f1 f8d2 	bl	8000630 <__aeabi_dmul>
 800f48c:	a358      	add	r3, pc, #352	; (adr r3, 800f5f0 <_dtoa_r+0x2c0>)
 800f48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f492:	f7f0 ff1b 	bl	80002cc <__adddf3>
 800f496:	4604      	mov	r4, r0
 800f498:	4630      	mov	r0, r6
 800f49a:	460d      	mov	r5, r1
 800f49c:	f7f1 f862 	bl	8000564 <__aeabi_i2d>
 800f4a0:	a355      	add	r3, pc, #340	; (adr r3, 800f5f8 <_dtoa_r+0x2c8>)
 800f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a6:	f7f1 f8c3 	bl	8000630 <__aeabi_dmul>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f0 ff0b 	bl	80002cc <__adddf3>
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	460d      	mov	r5, r1
 800f4ba:	f7f1 fb69 	bl	8000b90 <__aeabi_d2iz>
 800f4be:	2200      	movs	r2, #0
 800f4c0:	4683      	mov	fp, r0
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	f7f1 fb24 	bl	8000b14 <__aeabi_dcmplt>
 800f4cc:	b158      	cbz	r0, 800f4e6 <_dtoa_r+0x1b6>
 800f4ce:	4658      	mov	r0, fp
 800f4d0:	f7f1 f848 	bl	8000564 <__aeabi_i2d>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	4620      	mov	r0, r4
 800f4da:	4629      	mov	r1, r5
 800f4dc:	f7f1 fb10 	bl	8000b00 <__aeabi_dcmpeq>
 800f4e0:	b908      	cbnz	r0, 800f4e6 <_dtoa_r+0x1b6>
 800f4e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4e6:	f1bb 0f16 	cmp.w	fp, #22
 800f4ea:	d80d      	bhi.n	800f508 <_dtoa_r+0x1d8>
 800f4ec:	4949      	ldr	r1, [pc, #292]	; (800f614 <_dtoa_r+0x2e4>)
 800f4ee:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800f4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4fa:	f7f1 fb29 	bl	8000b50 <__aeabi_dcmpgt>
 800f4fe:	b130      	cbz	r0, 800f50e <_dtoa_r+0x1de>
 800f500:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f504:	2300      	movs	r3, #0
 800f506:	e000      	b.n	800f50a <_dtoa_r+0x1da>
 800f508:	2301      	movs	r3, #1
 800f50a:	930d      	str	r3, [sp, #52]	; 0x34
 800f50c:	e000      	b.n	800f510 <_dtoa_r+0x1e0>
 800f50e:	900d      	str	r0, [sp, #52]	; 0x34
 800f510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f512:	1b9e      	subs	r6, r3, r6
 800f514:	1e73      	subs	r3, r6, #1
 800f516:	9305      	str	r3, [sp, #20]
 800f518:	bf43      	ittte	mi
 800f51a:	f1c3 0900 	rsbmi	r9, r3, #0
 800f51e:	2300      	movmi	r3, #0
 800f520:	9305      	strmi	r3, [sp, #20]
 800f522:	f04f 0900 	movpl.w	r9, #0
 800f526:	f1bb 0f00 	cmp.w	fp, #0
 800f52a:	db07      	blt.n	800f53c <_dtoa_r+0x20c>
 800f52c:	9b05      	ldr	r3, [sp, #20]
 800f52e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800f532:	445b      	add	r3, fp
 800f534:	9305      	str	r3, [sp, #20]
 800f536:	2300      	movs	r3, #0
 800f538:	9307      	str	r3, [sp, #28]
 800f53a:	e006      	b.n	800f54a <_dtoa_r+0x21a>
 800f53c:	f1cb 0300 	rsb	r3, fp, #0
 800f540:	9307      	str	r3, [sp, #28]
 800f542:	2300      	movs	r3, #0
 800f544:	ebcb 0909 	rsb	r9, fp, r9
 800f548:	930c      	str	r3, [sp, #48]	; 0x30
 800f54a:	9b06      	ldr	r3, [sp, #24]
 800f54c:	2b09      	cmp	r3, #9
 800f54e:	d827      	bhi.n	800f5a0 <_dtoa_r+0x270>
 800f550:	2b05      	cmp	r3, #5
 800f552:	bfc4      	itt	gt
 800f554:	3b04      	subgt	r3, #4
 800f556:	9306      	strgt	r3, [sp, #24]
 800f558:	9b06      	ldr	r3, [sp, #24]
 800f55a:	f1a3 0302 	sub.w	r3, r3, #2
 800f55e:	bfcc      	ite	gt
 800f560:	2500      	movgt	r5, #0
 800f562:	2501      	movle	r5, #1
 800f564:	2b03      	cmp	r3, #3
 800f566:	d820      	bhi.n	800f5aa <_dtoa_r+0x27a>
 800f568:	e8df f003 	tbb	[pc, r3]
 800f56c:	04020e06 	.word	0x04020e06
 800f570:	2301      	movs	r3, #1
 800f572:	e002      	b.n	800f57a <_dtoa_r+0x24a>
 800f574:	2301      	movs	r3, #1
 800f576:	e008      	b.n	800f58a <_dtoa_r+0x25a>
 800f578:	2300      	movs	r3, #0
 800f57a:	9308      	str	r3, [sp, #32]
 800f57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f57e:	2b00      	cmp	r3, #0
 800f580:	dd1c      	ble.n	800f5bc <_dtoa_r+0x28c>
 800f582:	9303      	str	r3, [sp, #12]
 800f584:	4698      	mov	r8, r3
 800f586:	e01e      	b.n	800f5c6 <_dtoa_r+0x296>
 800f588:	2300      	movs	r3, #0
 800f58a:	9308      	str	r3, [sp, #32]
 800f58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58e:	445b      	add	r3, fp
 800f590:	f103 0801 	add.w	r8, r3, #1
 800f594:	9303      	str	r3, [sp, #12]
 800f596:	4643      	mov	r3, r8
 800f598:	2b01      	cmp	r3, #1
 800f59a:	bfb8      	it	lt
 800f59c:	2301      	movlt	r3, #1
 800f59e:	e012      	b.n	800f5c6 <_dtoa_r+0x296>
 800f5a0:	2501      	movs	r5, #1
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	9306      	str	r3, [sp, #24]
 800f5a6:	9508      	str	r5, [sp, #32]
 800f5a8:	e001      	b.n	800f5ae <_dtoa_r+0x27e>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	9308      	str	r3, [sp, #32]
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	9303      	str	r3, [sp, #12]
 800f5b4:	4698      	mov	r8, r3
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	2312      	movs	r3, #18
 800f5ba:	e003      	b.n	800f5c4 <_dtoa_r+0x294>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	9303      	str	r3, [sp, #12]
 800f5c0:	4698      	mov	r8, r3
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800f5c6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	6062      	str	r2, [r4, #4]
 800f5ce:	2104      	movs	r1, #4
 800f5d0:	f101 0214 	add.w	r2, r1, #20
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d81f      	bhi.n	800f618 <_dtoa_r+0x2e8>
 800f5d8:	6862      	ldr	r2, [r4, #4]
 800f5da:	3201      	adds	r2, #1
 800f5dc:	6062      	str	r2, [r4, #4]
 800f5de:	0049      	lsls	r1, r1, #1
 800f5e0:	e7f6      	b.n	800f5d0 <_dtoa_r+0x2a0>
 800f5e2:	bf00      	nop
 800f5e4:	f3af 8000 	nop.w
 800f5e8:	636f4361 	.word	0x636f4361
 800f5ec:	3fd287a7 	.word	0x3fd287a7
 800f5f0:	8b60c8b3 	.word	0x8b60c8b3
 800f5f4:	3fc68a28 	.word	0x3fc68a28
 800f5f8:	509f79fb 	.word	0x509f79fb
 800f5fc:	3fd34413 	.word	0x3fd34413
 800f600:	7ff00000 	.word	0x7ff00000
 800f604:	080154dd 	.word	0x080154dd
 800f608:	080154e6 	.word	0x080154e6
 800f60c:	080153ab 	.word	0x080153ab
 800f610:	3ff80000 	.word	0x3ff80000
 800f614:	08015558 	.word	0x08015558
 800f618:	6861      	ldr	r1, [r4, #4]
 800f61a:	4650      	mov	r0, sl
 800f61c:	f001 fbbf 	bl	8010d9e <_Balloc>
 800f620:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f624:	6020      	str	r0, [r4, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	f1b8 0f0e 	cmp.w	r8, #14
 800f62e:	f200 815d 	bhi.w	800f8ec <_dtoa_r+0x5bc>
 800f632:	2d00      	cmp	r5, #0
 800f634:	f000 815a 	beq.w	800f8ec <_dtoa_r+0x5bc>
 800f638:	ed9d 7b00 	vldr	d7, [sp]
 800f63c:	f1bb 0f00 	cmp.w	fp, #0
 800f640:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800f644:	dd31      	ble.n	800f6aa <_dtoa_r+0x37a>
 800f646:	4aa0      	ldr	r2, [pc, #640]	; (800f8c8 <_dtoa_r+0x598>)
 800f648:	f00b 030f 	and.w	r3, fp, #15
 800f64c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f650:	ed93 7b00 	vldr	d7, [r3]
 800f654:	ea4f 142b 	mov.w	r4, fp, asr #4
 800f658:	06e2      	lsls	r2, r4, #27
 800f65a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f65e:	d50c      	bpl.n	800f67a <_dtoa_r+0x34a>
 800f660:	4b9a      	ldr	r3, [pc, #616]	; (800f8cc <_dtoa_r+0x59c>)
 800f662:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f666:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f66a:	f7f1 f90b 	bl	8000884 <__aeabi_ddiv>
 800f66e:	f004 040f 	and.w	r4, r4, #15
 800f672:	e9cd 0100 	strd	r0, r1, [sp]
 800f676:	2603      	movs	r6, #3
 800f678:	e000      	b.n	800f67c <_dtoa_r+0x34c>
 800f67a:	2602      	movs	r6, #2
 800f67c:	4d93      	ldr	r5, [pc, #588]	; (800f8cc <_dtoa_r+0x59c>)
 800f67e:	b16c      	cbz	r4, 800f69c <_dtoa_r+0x36c>
 800f680:	07e3      	lsls	r3, r4, #31
 800f682:	d508      	bpl.n	800f696 <_dtoa_r+0x366>
 800f684:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f68c:	f7f0 ffd0 	bl	8000630 <__aeabi_dmul>
 800f690:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f694:	3601      	adds	r6, #1
 800f696:	1064      	asrs	r4, r4, #1
 800f698:	3508      	adds	r5, #8
 800f69a:	e7f0      	b.n	800f67e <_dtoa_r+0x34e>
 800f69c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f6a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6a4:	f7f1 f8ee 	bl	8000884 <__aeabi_ddiv>
 800f6a8:	e020      	b.n	800f6ec <_dtoa_r+0x3bc>
 800f6aa:	f1cb 0400 	rsb	r4, fp, #0
 800f6ae:	b304      	cbz	r4, 800f6f2 <_dtoa_r+0x3c2>
 800f6b0:	4b85      	ldr	r3, [pc, #532]	; (800f8c8 <_dtoa_r+0x598>)
 800f6b2:	4d86      	ldr	r5, [pc, #536]	; (800f8cc <_dtoa_r+0x59c>)
 800f6b4:	f004 020f 	and.w	r2, r4, #15
 800f6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f6c4:	f7f0 ffb4 	bl	8000630 <__aeabi_dmul>
 800f6c8:	e9cd 0100 	strd	r0, r1, [sp]
 800f6cc:	1124      	asrs	r4, r4, #4
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	2602      	movs	r6, #2
 800f6d2:	b154      	cbz	r4, 800f6ea <_dtoa_r+0x3ba>
 800f6d4:	07e7      	lsls	r7, r4, #31
 800f6d6:	d505      	bpl.n	800f6e4 <_dtoa_r+0x3b4>
 800f6d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6dc:	f7f0 ffa8 	bl	8000630 <__aeabi_dmul>
 800f6e0:	3601      	adds	r6, #1
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	1064      	asrs	r4, r4, #1
 800f6e6:	3508      	adds	r5, #8
 800f6e8:	e7f3      	b.n	800f6d2 <_dtoa_r+0x3a2>
 800f6ea:	b11b      	cbz	r3, 800f6f4 <_dtoa_r+0x3c4>
 800f6ec:	e9cd 0100 	strd	r0, r1, [sp]
 800f6f0:	e000      	b.n	800f6f4 <_dtoa_r+0x3c4>
 800f6f2:	2602      	movs	r6, #2
 800f6f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6f6:	b1eb      	cbz	r3, 800f734 <_dtoa_r+0x404>
 800f6f8:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	4b74      	ldr	r3, [pc, #464]	; (800f8d0 <_dtoa_r+0x5a0>)
 800f700:	4620      	mov	r0, r4
 800f702:	4629      	mov	r1, r5
 800f704:	f7f1 fa06 	bl	8000b14 <__aeabi_dcmplt>
 800f708:	b1a0      	cbz	r0, 800f734 <_dtoa_r+0x404>
 800f70a:	f1b8 0f00 	cmp.w	r8, #0
 800f70e:	d011      	beq.n	800f734 <_dtoa_r+0x404>
 800f710:	9b03      	ldr	r3, [sp, #12]
 800f712:	2b00      	cmp	r3, #0
 800f714:	f340 80e6 	ble.w	800f8e4 <_dtoa_r+0x5b4>
 800f718:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f71c:	930a      	str	r3, [sp, #40]	; 0x28
 800f71e:	2200      	movs	r2, #0
 800f720:	4b6c      	ldr	r3, [pc, #432]	; (800f8d4 <_dtoa_r+0x5a4>)
 800f722:	4620      	mov	r0, r4
 800f724:	4629      	mov	r1, r5
 800f726:	f7f0 ff83 	bl	8000630 <__aeabi_dmul>
 800f72a:	3601      	adds	r6, #1
 800f72c:	e9cd 0100 	strd	r0, r1, [sp]
 800f730:	9f03      	ldr	r7, [sp, #12]
 800f732:	e002      	b.n	800f73a <_dtoa_r+0x40a>
 800f734:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f738:	4647      	mov	r7, r8
 800f73a:	4630      	mov	r0, r6
 800f73c:	f7f0 ff12 	bl	8000564 <__aeabi_i2d>
 800f740:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f744:	f7f0 ff74 	bl	8000630 <__aeabi_dmul>
 800f748:	2200      	movs	r2, #0
 800f74a:	4b63      	ldr	r3, [pc, #396]	; (800f8d8 <_dtoa_r+0x5a8>)
 800f74c:	f7f0 fdbe 	bl	80002cc <__adddf3>
 800f750:	4604      	mov	r4, r0
 800f752:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800f756:	b9cf      	cbnz	r7, 800f78c <_dtoa_r+0x45c>
 800f758:	2200      	movs	r2, #0
 800f75a:	4b60      	ldr	r3, [pc, #384]	; (800f8dc <_dtoa_r+0x5ac>)
 800f75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f760:	f7f0 fdb2 	bl	80002c8 <__aeabi_dsub>
 800f764:	4622      	mov	r2, r4
 800f766:	462b      	mov	r3, r5
 800f768:	e9cd 0100 	strd	r0, r1, [sp]
 800f76c:	f7f1 f9f0 	bl	8000b50 <__aeabi_dcmpgt>
 800f770:	2800      	cmp	r0, #0
 800f772:	f040 8241 	bne.w	800fbf8 <_dtoa_r+0x8c8>
 800f776:	4622      	mov	r2, r4
 800f778:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f77c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f780:	f7f1 f9c8 	bl	8000b14 <__aeabi_dcmplt>
 800f784:	2800      	cmp	r0, #0
 800f786:	f040 822e 	bne.w	800fbe6 <_dtoa_r+0x8b6>
 800f78a:	e0ab      	b.n	800f8e4 <_dtoa_r+0x5b4>
 800f78c:	9a08      	ldr	r2, [sp, #32]
 800f78e:	4b4e      	ldr	r3, [pc, #312]	; (800f8c8 <_dtoa_r+0x598>)
 800f790:	1e79      	subs	r1, r7, #1
 800f792:	2a00      	cmp	r2, #0
 800f794:	d04a      	beq.n	800f82c <_dtoa_r+0x4fc>
 800f796:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	2000      	movs	r0, #0
 800f7a0:	494f      	ldr	r1, [pc, #316]	; (800f8e0 <_dtoa_r+0x5b0>)
 800f7a2:	f7f1 f86f 	bl	8000884 <__aeabi_ddiv>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	f7f0 fd8d 	bl	80002c8 <__aeabi_dsub>
 800f7ae:	9c04      	ldr	r4, [sp, #16]
 800f7b0:	4605      	mov	r5, r0
 800f7b2:	460e      	mov	r6, r1
 800f7b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7b8:	f7f1 f9ea 	bl	8000b90 <__aeabi_d2iz>
 800f7bc:	9012      	str	r0, [sp, #72]	; 0x48
 800f7be:	f7f0 fed1 	bl	8000564 <__aeabi_i2d>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7ca:	f7f0 fd7d 	bl	80002c8 <__aeabi_dsub>
 800f7ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7d0:	3330      	adds	r3, #48	; 0x30
 800f7d2:	f804 3b01 	strb.w	r3, [r4], #1
 800f7d6:	462a      	mov	r2, r5
 800f7d8:	4633      	mov	r3, r6
 800f7da:	e9cd 0100 	strd	r0, r1, [sp]
 800f7de:	f7f1 f999 	bl	8000b14 <__aeabi_dcmplt>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	f040 8321 	bne.w	800fe2a <_dtoa_r+0xafa>
 800f7e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7ec:	2000      	movs	r0, #0
 800f7ee:	4938      	ldr	r1, [pc, #224]	; (800f8d0 <_dtoa_r+0x5a0>)
 800f7f0:	f7f0 fd6a 	bl	80002c8 <__aeabi_dsub>
 800f7f4:	462a      	mov	r2, r5
 800f7f6:	4633      	mov	r3, r6
 800f7f8:	f7f1 f98c 	bl	8000b14 <__aeabi_dcmplt>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	f040 80d2 	bne.w	800f9a6 <_dtoa_r+0x676>
 800f802:	9b04      	ldr	r3, [sp, #16]
 800f804:	1ae3      	subs	r3, r4, r3
 800f806:	42bb      	cmp	r3, r7
 800f808:	da6c      	bge.n	800f8e4 <_dtoa_r+0x5b4>
 800f80a:	2200      	movs	r2, #0
 800f80c:	4b31      	ldr	r3, [pc, #196]	; (800f8d4 <_dtoa_r+0x5a4>)
 800f80e:	4628      	mov	r0, r5
 800f810:	4631      	mov	r1, r6
 800f812:	f7f0 ff0d 	bl	8000630 <__aeabi_dmul>
 800f816:	2200      	movs	r2, #0
 800f818:	4605      	mov	r5, r0
 800f81a:	460e      	mov	r6, r1
 800f81c:	4b2d      	ldr	r3, [pc, #180]	; (800f8d4 <_dtoa_r+0x5a4>)
 800f81e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f822:	f7f0 ff05 	bl	8000630 <__aeabi_dmul>
 800f826:	e9cd 0100 	strd	r0, r1, [sp]
 800f82a:	e7c3      	b.n	800f7b4 <_dtoa_r+0x484>
 800f82c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f830:	4622      	mov	r2, r4
 800f832:	462b      	mov	r3, r5
 800f834:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f838:	f7f0 fefa 	bl	8000630 <__aeabi_dmul>
 800f83c:	9b04      	ldr	r3, [sp, #16]
 800f83e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800f842:	19dc      	adds	r4, r3, r7
 800f844:	461d      	mov	r5, r3
 800f846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f84a:	f7f1 f9a1 	bl	8000b90 <__aeabi_d2iz>
 800f84e:	4606      	mov	r6, r0
 800f850:	f7f0 fe88 	bl	8000564 <__aeabi_i2d>
 800f854:	3630      	adds	r6, #48	; 0x30
 800f856:	4602      	mov	r2, r0
 800f858:	460b      	mov	r3, r1
 800f85a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f85e:	f7f0 fd33 	bl	80002c8 <__aeabi_dsub>
 800f862:	f805 6b01 	strb.w	r6, [r5], #1
 800f866:	42ac      	cmp	r4, r5
 800f868:	e9cd 0100 	strd	r0, r1, [sp]
 800f86c:	f04f 0200 	mov.w	r2, #0
 800f870:	d123      	bne.n	800f8ba <_dtoa_r+0x58a>
 800f872:	4b1b      	ldr	r3, [pc, #108]	; (800f8e0 <_dtoa_r+0x5b0>)
 800f874:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800f878:	f7f0 fd28 	bl	80002cc <__adddf3>
 800f87c:	4602      	mov	r2, r0
 800f87e:	460b      	mov	r3, r1
 800f880:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f884:	f7f1 f964 	bl	8000b50 <__aeabi_dcmpgt>
 800f888:	2800      	cmp	r0, #0
 800f88a:	f040 808c 	bne.w	800f9a6 <_dtoa_r+0x676>
 800f88e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f892:	2000      	movs	r0, #0
 800f894:	4912      	ldr	r1, [pc, #72]	; (800f8e0 <_dtoa_r+0x5b0>)
 800f896:	f7f0 fd17 	bl	80002c8 <__aeabi_dsub>
 800f89a:	4602      	mov	r2, r0
 800f89c:	460b      	mov	r3, r1
 800f89e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8a2:	f7f1 f937 	bl	8000b14 <__aeabi_dcmplt>
 800f8a6:	b1e8      	cbz	r0, 800f8e4 <_dtoa_r+0x5b4>
 800f8a8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800f8ac:	2b30      	cmp	r3, #48	; 0x30
 800f8ae:	f104 32ff 	add.w	r2, r4, #4294967295
 800f8b2:	f040 82ba 	bne.w	800fe2a <_dtoa_r+0xafa>
 800f8b6:	4614      	mov	r4, r2
 800f8b8:	e7f6      	b.n	800f8a8 <_dtoa_r+0x578>
 800f8ba:	4b06      	ldr	r3, [pc, #24]	; (800f8d4 <_dtoa_r+0x5a4>)
 800f8bc:	f7f0 feb8 	bl	8000630 <__aeabi_dmul>
 800f8c0:	e9cd 0100 	strd	r0, r1, [sp]
 800f8c4:	e7bf      	b.n	800f846 <_dtoa_r+0x516>
 800f8c6:	bf00      	nop
 800f8c8:	08015558 	.word	0x08015558
 800f8cc:	08015620 	.word	0x08015620
 800f8d0:	3ff00000 	.word	0x3ff00000
 800f8d4:	40240000 	.word	0x40240000
 800f8d8:	401c0000 	.word	0x401c0000
 800f8dc:	40140000 	.word	0x40140000
 800f8e0:	3fe00000 	.word	0x3fe00000
 800f8e4:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800f8e8:	e88d 0018 	stmia.w	sp, {r3, r4}
 800f8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	db7c      	blt.n	800f9ec <_dtoa_r+0x6bc>
 800f8f2:	f1bb 0f0e 	cmp.w	fp, #14
 800f8f6:	dc79      	bgt.n	800f9ec <_dtoa_r+0x6bc>
 800f8f8:	4b8f      	ldr	r3, [pc, #572]	; (800fb38 <_dtoa_r+0x808>)
 800f8fa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f8fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f904:	2b00      	cmp	r3, #0
 800f906:	da14      	bge.n	800f932 <_dtoa_r+0x602>
 800f908:	f1b8 0f00 	cmp.w	r8, #0
 800f90c:	dc11      	bgt.n	800f932 <_dtoa_r+0x602>
 800f90e:	f040 816c 	bne.w	800fbea <_dtoa_r+0x8ba>
 800f912:	2200      	movs	r2, #0
 800f914:	4b89      	ldr	r3, [pc, #548]	; (800fb3c <_dtoa_r+0x80c>)
 800f916:	4630      	mov	r0, r6
 800f918:	4639      	mov	r1, r7
 800f91a:	f7f0 fe89 	bl	8000630 <__aeabi_dmul>
 800f91e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f922:	f7f1 f90b 	bl	8000b3c <__aeabi_dcmpge>
 800f926:	4645      	mov	r5, r8
 800f928:	4646      	mov	r6, r8
 800f92a:	2800      	cmp	r0, #0
 800f92c:	f040 815f 	bne.w	800fbee <_dtoa_r+0x8be>
 800f930:	e166      	b.n	800fc00 <_dtoa_r+0x8d0>
 800f932:	9c04      	ldr	r4, [sp, #16]
 800f934:	4632      	mov	r2, r6
 800f936:	463b      	mov	r3, r7
 800f938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f93c:	f7f0 ffa2 	bl	8000884 <__aeabi_ddiv>
 800f940:	f7f1 f926 	bl	8000b90 <__aeabi_d2iz>
 800f944:	4605      	mov	r5, r0
 800f946:	f7f0 fe0d 	bl	8000564 <__aeabi_i2d>
 800f94a:	4632      	mov	r2, r6
 800f94c:	463b      	mov	r3, r7
 800f94e:	f7f0 fe6f 	bl	8000630 <__aeabi_dmul>
 800f952:	460b      	mov	r3, r1
 800f954:	4602      	mov	r2, r0
 800f956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f95a:	f7f0 fcb5 	bl	80002c8 <__aeabi_dsub>
 800f95e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800f962:	f804 eb01 	strb.w	lr, [r4], #1
 800f966:	9b04      	ldr	r3, [sp, #16]
 800f968:	ebc3 0e04 	rsb	lr, r3, r4
 800f96c:	45f0      	cmp	r8, lr
 800f96e:	e9cd 0100 	strd	r0, r1, [sp]
 800f972:	d12e      	bne.n	800f9d2 <_dtoa_r+0x6a2>
 800f974:	4602      	mov	r2, r0
 800f976:	460b      	mov	r3, r1
 800f978:	f7f0 fca8 	bl	80002cc <__adddf3>
 800f97c:	4680      	mov	r8, r0
 800f97e:	4689      	mov	r9, r1
 800f980:	4602      	mov	r2, r0
 800f982:	460b      	mov	r3, r1
 800f984:	4630      	mov	r0, r6
 800f986:	4639      	mov	r1, r7
 800f988:	f7f1 f8c4 	bl	8000b14 <__aeabi_dcmplt>
 800f98c:	b978      	cbnz	r0, 800f9ae <_dtoa_r+0x67e>
 800f98e:	4642      	mov	r2, r8
 800f990:	464b      	mov	r3, r9
 800f992:	4630      	mov	r0, r6
 800f994:	4639      	mov	r1, r7
 800f996:	f7f1 f8b3 	bl	8000b00 <__aeabi_dcmpeq>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	f000 8247 	beq.w	800fe2e <_dtoa_r+0xafe>
 800f9a0:	07e9      	lsls	r1, r5, #31
 800f9a2:	d404      	bmi.n	800f9ae <_dtoa_r+0x67e>
 800f9a4:	e243      	b.n	800fe2e <_dtoa_r+0xafe>
 800f9a6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800f9aa:	e000      	b.n	800f9ae <_dtoa_r+0x67e>
 800f9ac:	461c      	mov	r4, r3
 800f9ae:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800f9b2:	2a39      	cmp	r2, #57	; 0x39
 800f9b4:	f104 33ff 	add.w	r3, r4, #4294967295
 800f9b8:	d107      	bne.n	800f9ca <_dtoa_r+0x69a>
 800f9ba:	9a04      	ldr	r2, [sp, #16]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d1f5      	bne.n	800f9ac <_dtoa_r+0x67c>
 800f9c0:	9904      	ldr	r1, [sp, #16]
 800f9c2:	2230      	movs	r2, #48	; 0x30
 800f9c4:	f10b 0b01 	add.w	fp, fp, #1
 800f9c8:	700a      	strb	r2, [r1, #0]
 800f9ca:	781a      	ldrb	r2, [r3, #0]
 800f9cc:	3201      	adds	r2, #1
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	e22d      	b.n	800fe2e <_dtoa_r+0xafe>
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	4b5a      	ldr	r3, [pc, #360]	; (800fb40 <_dtoa_r+0x810>)
 800f9d6:	f7f0 fe2b 	bl	8000630 <__aeabi_dmul>
 800f9da:	2200      	movs	r2, #0
 800f9dc:	2300      	movs	r3, #0
 800f9de:	e9cd 0100 	strd	r0, r1, [sp]
 800f9e2:	f7f1 f88d 	bl	8000b00 <__aeabi_dcmpeq>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d0a4      	beq.n	800f934 <_dtoa_r+0x604>
 800f9ea:	e220      	b.n	800fe2e <_dtoa_r+0xafe>
 800f9ec:	9a08      	ldr	r2, [sp, #32]
 800f9ee:	2a00      	cmp	r2, #0
 800f9f0:	d02d      	beq.n	800fa4e <_dtoa_r+0x71e>
 800f9f2:	9a06      	ldr	r2, [sp, #24]
 800f9f4:	2a01      	cmp	r2, #1
 800f9f6:	dc0a      	bgt.n	800fa0e <_dtoa_r+0x6de>
 800f9f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f9fa:	b112      	cbz	r2, 800fa02 <_dtoa_r+0x6d2>
 800f9fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fa00:	e002      	b.n	800fa08 <_dtoa_r+0x6d8>
 800fa02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa04:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa08:	9d07      	ldr	r5, [sp, #28]
 800fa0a:	464c      	mov	r4, r9
 800fa0c:	e015      	b.n	800fa3a <_dtoa_r+0x70a>
 800fa0e:	9b07      	ldr	r3, [sp, #28]
 800fa10:	f108 35ff 	add.w	r5, r8, #4294967295
 800fa14:	42ab      	cmp	r3, r5
 800fa16:	bfbf      	itttt	lt
 800fa18:	9b07      	ldrlt	r3, [sp, #28]
 800fa1a:	9507      	strlt	r5, [sp, #28]
 800fa1c:	1aea      	sublt	r2, r5, r3
 800fa1e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800fa20:	bfb7      	itett	lt
 800fa22:	189b      	addlt	r3, r3, r2
 800fa24:	1b5d      	subge	r5, r3, r5
 800fa26:	930c      	strlt	r3, [sp, #48]	; 0x30
 800fa28:	2500      	movlt	r5, #0
 800fa2a:	f1b8 0f00 	cmp.w	r8, #0
 800fa2e:	bfb9      	ittee	lt
 800fa30:	ebc8 0409 	rsblt	r4, r8, r9
 800fa34:	2300      	movlt	r3, #0
 800fa36:	464c      	movge	r4, r9
 800fa38:	4643      	movge	r3, r8
 800fa3a:	9a05      	ldr	r2, [sp, #20]
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	441a      	add	r2, r3
 800fa40:	4650      	mov	r0, sl
 800fa42:	4499      	add	r9, r3
 800fa44:	9205      	str	r2, [sp, #20]
 800fa46:	f001 fabc 	bl	8010fc2 <__i2b>
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	e002      	b.n	800fa54 <_dtoa_r+0x724>
 800fa4e:	9d07      	ldr	r5, [sp, #28]
 800fa50:	9e08      	ldr	r6, [sp, #32]
 800fa52:	464c      	mov	r4, r9
 800fa54:	b15c      	cbz	r4, 800fa6e <_dtoa_r+0x73e>
 800fa56:	9b05      	ldr	r3, [sp, #20]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	dd08      	ble.n	800fa6e <_dtoa_r+0x73e>
 800fa5c:	42a3      	cmp	r3, r4
 800fa5e:	9a05      	ldr	r2, [sp, #20]
 800fa60:	bfa8      	it	ge
 800fa62:	4623      	movge	r3, r4
 800fa64:	ebc3 0909 	rsb	r9, r3, r9
 800fa68:	1ae4      	subs	r4, r4, r3
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	9305      	str	r3, [sp, #20]
 800fa6e:	9b07      	ldr	r3, [sp, #28]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	dd1d      	ble.n	800fab0 <_dtoa_r+0x780>
 800fa74:	9b08      	ldr	r3, [sp, #32]
 800fa76:	b1ab      	cbz	r3, 800faa4 <_dtoa_r+0x774>
 800fa78:	b185      	cbz	r5, 800fa9c <_dtoa_r+0x76c>
 800fa7a:	4631      	mov	r1, r6
 800fa7c:	462a      	mov	r2, r5
 800fa7e:	4650      	mov	r0, sl
 800fa80:	f001 fb3a 	bl	80110f8 <__pow5mult>
 800fa84:	9a02      	ldr	r2, [sp, #8]
 800fa86:	4601      	mov	r1, r0
 800fa88:	4606      	mov	r6, r0
 800fa8a:	4650      	mov	r0, sl
 800fa8c:	f001 faa2 	bl	8010fd4 <__multiply>
 800fa90:	9902      	ldr	r1, [sp, #8]
 800fa92:	4607      	mov	r7, r0
 800fa94:	4650      	mov	r0, sl
 800fa96:	f001 f9b7 	bl	8010e08 <_Bfree>
 800fa9a:	9702      	str	r7, [sp, #8]
 800fa9c:	9b07      	ldr	r3, [sp, #28]
 800fa9e:	1b5a      	subs	r2, r3, r5
 800faa0:	d006      	beq.n	800fab0 <_dtoa_r+0x780>
 800faa2:	e000      	b.n	800faa6 <_dtoa_r+0x776>
 800faa4:	9a07      	ldr	r2, [sp, #28]
 800faa6:	9902      	ldr	r1, [sp, #8]
 800faa8:	4650      	mov	r0, sl
 800faaa:	f001 fb25 	bl	80110f8 <__pow5mult>
 800faae:	9002      	str	r0, [sp, #8]
 800fab0:	2101      	movs	r1, #1
 800fab2:	4650      	mov	r0, sl
 800fab4:	f001 fa85 	bl	8010fc2 <__i2b>
 800fab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faba:	4605      	mov	r5, r0
 800fabc:	b35b      	cbz	r3, 800fb16 <_dtoa_r+0x7e6>
 800fabe:	461a      	mov	r2, r3
 800fac0:	4601      	mov	r1, r0
 800fac2:	4650      	mov	r0, sl
 800fac4:	f001 fb18 	bl	80110f8 <__pow5mult>
 800fac8:	9b06      	ldr	r3, [sp, #24]
 800faca:	2b01      	cmp	r3, #1
 800facc:	4605      	mov	r5, r0
 800face:	dc18      	bgt.n	800fb02 <_dtoa_r+0x7d2>
 800fad0:	9b00      	ldr	r3, [sp, #0]
 800fad2:	b983      	cbnz	r3, 800faf6 <_dtoa_r+0x7c6>
 800fad4:	9b01      	ldr	r3, [sp, #4]
 800fad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fada:	b973      	cbnz	r3, 800fafa <_dtoa_r+0x7ca>
 800fadc:	9b01      	ldr	r3, [sp, #4]
 800fade:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800fae2:	0d3f      	lsrs	r7, r7, #20
 800fae4:	053f      	lsls	r7, r7, #20
 800fae6:	b14f      	cbz	r7, 800fafc <_dtoa_r+0x7cc>
 800fae8:	9b05      	ldr	r3, [sp, #20]
 800faea:	3301      	adds	r3, #1
 800faec:	f109 0901 	add.w	r9, r9, #1
 800faf0:	9305      	str	r3, [sp, #20]
 800faf2:	2701      	movs	r7, #1
 800faf4:	e002      	b.n	800fafc <_dtoa_r+0x7cc>
 800faf6:	2700      	movs	r7, #0
 800faf8:	e000      	b.n	800fafc <_dtoa_r+0x7cc>
 800fafa:	9f00      	ldr	r7, [sp, #0]
 800fafc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fafe:	b173      	cbz	r3, 800fb1e <_dtoa_r+0x7ee>
 800fb00:	e000      	b.n	800fb04 <_dtoa_r+0x7d4>
 800fb02:	2700      	movs	r7, #0
 800fb04:	692b      	ldr	r3, [r5, #16]
 800fb06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fb0a:	6918      	ldr	r0, [r3, #16]
 800fb0c:	f001 fa0c 	bl	8010f28 <__hi0bits>
 800fb10:	f1c0 0020 	rsb	r0, r0, #32
 800fb14:	e004      	b.n	800fb20 <_dtoa_r+0x7f0>
 800fb16:	9b06      	ldr	r3, [sp, #24]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	ddd9      	ble.n	800fad0 <_dtoa_r+0x7a0>
 800fb1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fb1e:	2001      	movs	r0, #1
 800fb20:	9b05      	ldr	r3, [sp, #20]
 800fb22:	4418      	add	r0, r3
 800fb24:	f010 001f 	ands.w	r0, r0, #31
 800fb28:	d00e      	beq.n	800fb48 <_dtoa_r+0x818>
 800fb2a:	f1c0 0320 	rsb	r3, r0, #32
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	dd08      	ble.n	800fb44 <_dtoa_r+0x814>
 800fb32:	f1c0 001c 	rsb	r0, r0, #28
 800fb36:	e008      	b.n	800fb4a <_dtoa_r+0x81a>
 800fb38:	08015558 	.word	0x08015558
 800fb3c:	40140000 	.word	0x40140000
 800fb40:	40240000 	.word	0x40240000
 800fb44:	d006      	beq.n	800fb54 <_dtoa_r+0x824>
 800fb46:	4618      	mov	r0, r3
 800fb48:	301c      	adds	r0, #28
 800fb4a:	9b05      	ldr	r3, [sp, #20]
 800fb4c:	4403      	add	r3, r0
 800fb4e:	4481      	add	r9, r0
 800fb50:	4404      	add	r4, r0
 800fb52:	9305      	str	r3, [sp, #20]
 800fb54:	f1b9 0f00 	cmp.w	r9, #0
 800fb58:	dd05      	ble.n	800fb66 <_dtoa_r+0x836>
 800fb5a:	464a      	mov	r2, r9
 800fb5c:	9902      	ldr	r1, [sp, #8]
 800fb5e:	4650      	mov	r0, sl
 800fb60:	f001 fb18 	bl	8011194 <__lshift>
 800fb64:	9002      	str	r0, [sp, #8]
 800fb66:	9b05      	ldr	r3, [sp, #20]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dd05      	ble.n	800fb78 <_dtoa_r+0x848>
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	461a      	mov	r2, r3
 800fb70:	4650      	mov	r0, sl
 800fb72:	f001 fb0f 	bl	8011194 <__lshift>
 800fb76:	4605      	mov	r5, r0
 800fb78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb7a:	b1eb      	cbz	r3, 800fbb8 <_dtoa_r+0x888>
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	9802      	ldr	r0, [sp, #8]
 800fb80:	f001 fb59 	bl	8011236 <__mcmp>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	da17      	bge.n	800fbb8 <_dtoa_r+0x888>
 800fb88:	2300      	movs	r3, #0
 800fb8a:	220a      	movs	r2, #10
 800fb8c:	9902      	ldr	r1, [sp, #8]
 800fb8e:	4650      	mov	r0, sl
 800fb90:	f001 f951 	bl	8010e36 <__multadd>
 800fb94:	9b08      	ldr	r3, [sp, #32]
 800fb96:	9002      	str	r0, [sp, #8]
 800fb98:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 8158 	beq.w	800fe52 <_dtoa_r+0xb22>
 800fba2:	2300      	movs	r3, #0
 800fba4:	4631      	mov	r1, r6
 800fba6:	220a      	movs	r2, #10
 800fba8:	4650      	mov	r0, sl
 800fbaa:	f001 f944 	bl	8010e36 <__multadd>
 800fbae:	9b03      	ldr	r3, [sp, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	dc37      	bgt.n	800fc26 <_dtoa_r+0x8f6>
 800fbb6:	e033      	b.n	800fc20 <_dtoa_r+0x8f0>
 800fbb8:	f1b8 0f00 	cmp.w	r8, #0
 800fbbc:	dc2a      	bgt.n	800fc14 <_dtoa_r+0x8e4>
 800fbbe:	9b06      	ldr	r3, [sp, #24]
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	dd27      	ble.n	800fc14 <_dtoa_r+0x8e4>
 800fbc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbc8:	9b03      	ldr	r3, [sp, #12]
 800fbca:	b983      	cbnz	r3, 800fbee <_dtoa_r+0x8be>
 800fbcc:	4629      	mov	r1, r5
 800fbce:	2205      	movs	r2, #5
 800fbd0:	4650      	mov	r0, sl
 800fbd2:	f001 f930 	bl	8010e36 <__multadd>
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	4605      	mov	r5, r0
 800fbda:	9802      	ldr	r0, [sp, #8]
 800fbdc:	f001 fb2b 	bl	8011236 <__mcmp>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	dc0d      	bgt.n	800fc00 <_dtoa_r+0x8d0>
 800fbe4:	e003      	b.n	800fbee <_dtoa_r+0x8be>
 800fbe6:	463d      	mov	r5, r7
 800fbe8:	e000      	b.n	800fbec <_dtoa_r+0x8bc>
 800fbea:	2500      	movs	r5, #0
 800fbec:	462e      	mov	r6, r5
 800fbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbf0:	9c04      	ldr	r4, [sp, #16]
 800fbf2:	ea6f 0b03 	mvn.w	fp, r3
 800fbf6:	e00a      	b.n	800fc0e <_dtoa_r+0x8de>
 800fbf8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fbfc:	463d      	mov	r5, r7
 800fbfe:	463e      	mov	r6, r7
 800fc00:	9b04      	ldr	r3, [sp, #16]
 800fc02:	9a04      	ldr	r2, [sp, #16]
 800fc04:	1c5c      	adds	r4, r3, #1
 800fc06:	2331      	movs	r3, #49	; 0x31
 800fc08:	7013      	strb	r3, [r2, #0]
 800fc0a:	f10b 0b01 	add.w	fp, fp, #1
 800fc0e:	46b0      	mov	r8, r6
 800fc10:	2600      	movs	r6, #0
 800fc12:	e0f7      	b.n	800fe04 <_dtoa_r+0xad4>
 800fc14:	9b08      	ldr	r3, [sp, #32]
 800fc16:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc1a:	b923      	cbnz	r3, 800fc26 <_dtoa_r+0x8f6>
 800fc1c:	9c04      	ldr	r4, [sp, #16]
 800fc1e:	e0b1      	b.n	800fd84 <_dtoa_r+0xa54>
 800fc20:	9b06      	ldr	r3, [sp, #24]
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	dcd0      	bgt.n	800fbc8 <_dtoa_r+0x898>
 800fc26:	2c00      	cmp	r4, #0
 800fc28:	dd05      	ble.n	800fc36 <_dtoa_r+0x906>
 800fc2a:	4631      	mov	r1, r6
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	4650      	mov	r0, sl
 800fc30:	f001 fab0 	bl	8011194 <__lshift>
 800fc34:	4606      	mov	r6, r0
 800fc36:	b19f      	cbz	r7, 800fc60 <_dtoa_r+0x930>
 800fc38:	6871      	ldr	r1, [r6, #4]
 800fc3a:	4650      	mov	r0, sl
 800fc3c:	f001 f8af 	bl	8010d9e <_Balloc>
 800fc40:	6932      	ldr	r2, [r6, #16]
 800fc42:	3202      	adds	r2, #2
 800fc44:	4604      	mov	r4, r0
 800fc46:	0092      	lsls	r2, r2, #2
 800fc48:	f106 010c 	add.w	r1, r6, #12
 800fc4c:	300c      	adds	r0, #12
 800fc4e:	f7fc f91b 	bl	800be88 <memcpy>
 800fc52:	2201      	movs	r2, #1
 800fc54:	4621      	mov	r1, r4
 800fc56:	4650      	mov	r0, sl
 800fc58:	f001 fa9c 	bl	8011194 <__lshift>
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	e000      	b.n	800fc62 <_dtoa_r+0x932>
 800fc60:	46b0      	mov	r8, r6
 800fc62:	9b00      	ldr	r3, [sp, #0]
 800fc64:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800fc68:	f003 0301 	and.w	r3, r3, #1
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	4629      	mov	r1, r5
 800fc70:	9802      	ldr	r0, [sp, #8]
 800fc72:	f7ff facb 	bl	800f20c <quorem>
 800fc76:	4631      	mov	r1, r6
 800fc78:	4604      	mov	r4, r0
 800fc7a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800fc7e:	9802      	ldr	r0, [sp, #8]
 800fc80:	f001 fad9 	bl	8011236 <__mcmp>
 800fc84:	4642      	mov	r2, r8
 800fc86:	9000      	str	r0, [sp, #0]
 800fc88:	4629      	mov	r1, r5
 800fc8a:	4650      	mov	r0, sl
 800fc8c:	f001 faef 	bl	801126e <__mdiff>
 800fc90:	68c3      	ldr	r3, [r0, #12]
 800fc92:	4602      	mov	r2, r0
 800fc94:	b93b      	cbnz	r3, 800fca6 <_dtoa_r+0x976>
 800fc96:	4601      	mov	r1, r0
 800fc98:	9007      	str	r0, [sp, #28]
 800fc9a:	9802      	ldr	r0, [sp, #8]
 800fc9c:	f001 facb 	bl	8011236 <__mcmp>
 800fca0:	9a07      	ldr	r2, [sp, #28]
 800fca2:	4603      	mov	r3, r0
 800fca4:	e000      	b.n	800fca8 <_dtoa_r+0x978>
 800fca6:	2301      	movs	r3, #1
 800fca8:	4611      	mov	r1, r2
 800fcaa:	4650      	mov	r0, sl
 800fcac:	9307      	str	r3, [sp, #28]
 800fcae:	f001 f8ab 	bl	8010e08 <_Bfree>
 800fcb2:	9b07      	ldr	r3, [sp, #28]
 800fcb4:	b94b      	cbnz	r3, 800fcca <_dtoa_r+0x99a>
 800fcb6:	9a06      	ldr	r2, [sp, #24]
 800fcb8:	b93a      	cbnz	r2, 800fcca <_dtoa_r+0x99a>
 800fcba:	9a05      	ldr	r2, [sp, #20]
 800fcbc:	b92a      	cbnz	r2, 800fcca <_dtoa_r+0x99a>
 800fcbe:	2f39      	cmp	r7, #57	; 0x39
 800fcc0:	d028      	beq.n	800fd14 <_dtoa_r+0x9e4>
 800fcc2:	9b00      	ldr	r3, [sp, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dc1a      	bgt.n	800fcfe <_dtoa_r+0x9ce>
 800fcc8:	e01b      	b.n	800fd02 <_dtoa_r+0x9d2>
 800fcca:	9a00      	ldr	r2, [sp, #0]
 800fccc:	2a00      	cmp	r2, #0
 800fcce:	db04      	blt.n	800fcda <_dtoa_r+0x9aa>
 800fcd0:	d11a      	bne.n	800fd08 <_dtoa_r+0x9d8>
 800fcd2:	9a06      	ldr	r2, [sp, #24]
 800fcd4:	b9c2      	cbnz	r2, 800fd08 <_dtoa_r+0x9d8>
 800fcd6:	9a05      	ldr	r2, [sp, #20]
 800fcd8:	b9b2      	cbnz	r2, 800fd08 <_dtoa_r+0x9d8>
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	dd11      	ble.n	800fd02 <_dtoa_r+0x9d2>
 800fcde:	2201      	movs	r2, #1
 800fce0:	9902      	ldr	r1, [sp, #8]
 800fce2:	4650      	mov	r0, sl
 800fce4:	f001 fa56 	bl	8011194 <__lshift>
 800fce8:	4629      	mov	r1, r5
 800fcea:	9002      	str	r0, [sp, #8]
 800fcec:	f001 faa3 	bl	8011236 <__mcmp>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	dc02      	bgt.n	800fcfa <_dtoa_r+0x9ca>
 800fcf4:	d105      	bne.n	800fd02 <_dtoa_r+0x9d2>
 800fcf6:	07fa      	lsls	r2, r7, #31
 800fcf8:	d503      	bpl.n	800fd02 <_dtoa_r+0x9d2>
 800fcfa:	2f39      	cmp	r7, #57	; 0x39
 800fcfc:	d00a      	beq.n	800fd14 <_dtoa_r+0x9e4>
 800fcfe:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800fd02:	f109 0401 	add.w	r4, r9, #1
 800fd06:	e00c      	b.n	800fd22 <_dtoa_r+0x9f2>
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f109 0401 	add.w	r4, r9, #1
 800fd0e:	dd0b      	ble.n	800fd28 <_dtoa_r+0x9f8>
 800fd10:	2f39      	cmp	r7, #57	; 0x39
 800fd12:	d105      	bne.n	800fd20 <_dtoa_r+0x9f0>
 800fd14:	2339      	movs	r3, #57	; 0x39
 800fd16:	f889 3000 	strb.w	r3, [r9]
 800fd1a:	f109 0901 	add.w	r9, r9, #1
 800fd1e:	e054      	b.n	800fdca <_dtoa_r+0xa9a>
 800fd20:	3701      	adds	r7, #1
 800fd22:	f889 7000 	strb.w	r7, [r9]
 800fd26:	e06d      	b.n	800fe04 <_dtoa_r+0xad4>
 800fd28:	9b04      	ldr	r3, [sp, #16]
 800fd2a:	9a03      	ldr	r2, [sp, #12]
 800fd2c:	f804 7c01 	strb.w	r7, [r4, #-1]
 800fd30:	1ae3      	subs	r3, r4, r3
 800fd32:	4293      	cmp	r3, r2
 800fd34:	46a1      	mov	r9, r4
 800fd36:	d03a      	beq.n	800fdae <_dtoa_r+0xa7e>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	220a      	movs	r2, #10
 800fd3c:	9902      	ldr	r1, [sp, #8]
 800fd3e:	4650      	mov	r0, sl
 800fd40:	f001 f879 	bl	8010e36 <__multadd>
 800fd44:	4546      	cmp	r6, r8
 800fd46:	9002      	str	r0, [sp, #8]
 800fd48:	f04f 0300 	mov.w	r3, #0
 800fd4c:	f04f 020a 	mov.w	r2, #10
 800fd50:	4631      	mov	r1, r6
 800fd52:	4650      	mov	r0, sl
 800fd54:	d104      	bne.n	800fd60 <_dtoa_r+0xa30>
 800fd56:	f001 f86e 	bl	8010e36 <__multadd>
 800fd5a:	4606      	mov	r6, r0
 800fd5c:	4680      	mov	r8, r0
 800fd5e:	e786      	b.n	800fc6e <_dtoa_r+0x93e>
 800fd60:	f001 f869 	bl	8010e36 <__multadd>
 800fd64:	4641      	mov	r1, r8
 800fd66:	4606      	mov	r6, r0
 800fd68:	2300      	movs	r3, #0
 800fd6a:	220a      	movs	r2, #10
 800fd6c:	4650      	mov	r0, sl
 800fd6e:	f001 f862 	bl	8010e36 <__multadd>
 800fd72:	4680      	mov	r8, r0
 800fd74:	e77b      	b.n	800fc6e <_dtoa_r+0x93e>
 800fd76:	2300      	movs	r3, #0
 800fd78:	220a      	movs	r2, #10
 800fd7a:	9902      	ldr	r1, [sp, #8]
 800fd7c:	4650      	mov	r0, sl
 800fd7e:	f001 f85a 	bl	8010e36 <__multadd>
 800fd82:	9002      	str	r0, [sp, #8]
 800fd84:	4629      	mov	r1, r5
 800fd86:	9802      	ldr	r0, [sp, #8]
 800fd88:	f7ff fa40 	bl	800f20c <quorem>
 800fd8c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800fd90:	f804 7b01 	strb.w	r7, [r4], #1
 800fd94:	9b04      	ldr	r3, [sp, #16]
 800fd96:	9a03      	ldr	r2, [sp, #12]
 800fd98:	1ae3      	subs	r3, r4, r3
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	dbeb      	blt.n	800fd76 <_dtoa_r+0xa46>
 800fd9e:	9b04      	ldr	r3, [sp, #16]
 800fda0:	2a01      	cmp	r2, #1
 800fda2:	bfac      	ite	ge
 800fda4:	189b      	addge	r3, r3, r2
 800fda6:	3301      	addlt	r3, #1
 800fda8:	46b0      	mov	r8, r6
 800fdaa:	4699      	mov	r9, r3
 800fdac:	2600      	movs	r6, #0
 800fdae:	2201      	movs	r2, #1
 800fdb0:	9902      	ldr	r1, [sp, #8]
 800fdb2:	4650      	mov	r0, sl
 800fdb4:	f001 f9ee 	bl	8011194 <__lshift>
 800fdb8:	4629      	mov	r1, r5
 800fdba:	9002      	str	r0, [sp, #8]
 800fdbc:	f001 fa3b 	bl	8011236 <__mcmp>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	dc02      	bgt.n	800fdca <_dtoa_r+0xa9a>
 800fdc4:	d115      	bne.n	800fdf2 <_dtoa_r+0xac2>
 800fdc6:	07fb      	lsls	r3, r7, #31
 800fdc8:	d513      	bpl.n	800fdf2 <_dtoa_r+0xac2>
 800fdca:	464c      	mov	r4, r9
 800fdcc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800fdd0:	2b39      	cmp	r3, #57	; 0x39
 800fdd2:	f104 32ff 	add.w	r2, r4, #4294967295
 800fdd6:	d109      	bne.n	800fdec <_dtoa_r+0xabc>
 800fdd8:	9b04      	ldr	r3, [sp, #16]
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d104      	bne.n	800fde8 <_dtoa_r+0xab8>
 800fdde:	f10b 0b01 	add.w	fp, fp, #1
 800fde2:	2331      	movs	r3, #49	; 0x31
 800fde4:	9a04      	ldr	r2, [sp, #16]
 800fde6:	e002      	b.n	800fdee <_dtoa_r+0xabe>
 800fde8:	4614      	mov	r4, r2
 800fdea:	e7ef      	b.n	800fdcc <_dtoa_r+0xa9c>
 800fdec:	3301      	adds	r3, #1
 800fdee:	7013      	strb	r3, [r2, #0]
 800fdf0:	e008      	b.n	800fe04 <_dtoa_r+0xad4>
 800fdf2:	464c      	mov	r4, r9
 800fdf4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800fdf8:	2b30      	cmp	r3, #48	; 0x30
 800fdfa:	f104 32ff 	add.w	r2, r4, #4294967295
 800fdfe:	d101      	bne.n	800fe04 <_dtoa_r+0xad4>
 800fe00:	4614      	mov	r4, r2
 800fe02:	e7f7      	b.n	800fdf4 <_dtoa_r+0xac4>
 800fe04:	4629      	mov	r1, r5
 800fe06:	4650      	mov	r0, sl
 800fe08:	f000 fffe 	bl	8010e08 <_Bfree>
 800fe0c:	f1b8 0f00 	cmp.w	r8, #0
 800fe10:	d00d      	beq.n	800fe2e <_dtoa_r+0xafe>
 800fe12:	b12e      	cbz	r6, 800fe20 <_dtoa_r+0xaf0>
 800fe14:	4546      	cmp	r6, r8
 800fe16:	d003      	beq.n	800fe20 <_dtoa_r+0xaf0>
 800fe18:	4631      	mov	r1, r6
 800fe1a:	4650      	mov	r0, sl
 800fe1c:	f000 fff4 	bl	8010e08 <_Bfree>
 800fe20:	4641      	mov	r1, r8
 800fe22:	4650      	mov	r0, sl
 800fe24:	f000 fff0 	bl	8010e08 <_Bfree>
 800fe28:	e001      	b.n	800fe2e <_dtoa_r+0xafe>
 800fe2a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fe2e:	9902      	ldr	r1, [sp, #8]
 800fe30:	4650      	mov	r0, sl
 800fe32:	f000 ffe9 	bl	8010e08 <_Bfree>
 800fe36:	2300      	movs	r3, #0
 800fe38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fe3a:	7023      	strb	r3, [r4, #0]
 800fe3c:	f10b 0301 	add.w	r3, fp, #1
 800fe40:	6013      	str	r3, [r2, #0]
 800fe42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe44:	b11b      	cbz	r3, 800fe4e <_dtoa_r+0xb1e>
 800fe46:	601c      	str	r4, [r3, #0]
 800fe48:	e001      	b.n	800fe4e <_dtoa_r+0xb1e>
 800fe4a:	4808      	ldr	r0, [pc, #32]	; (800fe6c <_dtoa_r+0xb3c>)
 800fe4c:	e00a      	b.n	800fe64 <_dtoa_r+0xb34>
 800fe4e:	9804      	ldr	r0, [sp, #16]
 800fe50:	e008      	b.n	800fe64 <_dtoa_r+0xb34>
 800fe52:	9b03      	ldr	r3, [sp, #12]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f73f aee1 	bgt.w	800fc1c <_dtoa_r+0x8ec>
 800fe5a:	9b06      	ldr	r3, [sp, #24]
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	f77f aedd 	ble.w	800fc1c <_dtoa_r+0x8ec>
 800fe62:	e6b1      	b.n	800fbc8 <_dtoa_r+0x898>
 800fe64:	b017      	add	sp, #92	; 0x5c
 800fe66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6a:	bf00      	nop
 800fe6c:	080153aa 	.word	0x080153aa

0800fe70 <__sflush_r>:
 800fe70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe74:	b293      	uxth	r3, r2
 800fe76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7a:	4605      	mov	r5, r0
 800fe7c:	0718      	lsls	r0, r3, #28
 800fe7e:	460c      	mov	r4, r1
 800fe80:	d460      	bmi.n	800ff44 <__sflush_r+0xd4>
 800fe82:	684b      	ldr	r3, [r1, #4]
 800fe84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	818a      	strh	r2, [r1, #12]
 800fe8c:	dc02      	bgt.n	800fe94 <__sflush_r+0x24>
 800fe8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	dd17      	ble.n	800fec4 <__sflush_r+0x54>
 800fe94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe96:	b1ae      	cbz	r6, 800fec4 <__sflush_r+0x54>
 800fe98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	b292      	uxth	r2, r2
 800fea0:	682f      	ldr	r7, [r5, #0]
 800fea2:	602b      	str	r3, [r5, #0]
 800fea4:	b10a      	cbz	r2, 800feaa <__sflush_r+0x3a>
 800fea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fea8:	e015      	b.n	800fed6 <__sflush_r+0x66>
 800feaa:	6a21      	ldr	r1, [r4, #32]
 800feac:	2301      	movs	r3, #1
 800feae:	4628      	mov	r0, r5
 800feb0:	47b0      	blx	r6
 800feb2:	1c41      	adds	r1, r0, #1
 800feb4:	d10f      	bne.n	800fed6 <__sflush_r+0x66>
 800feb6:	682b      	ldr	r3, [r5, #0]
 800feb8:	b16b      	cbz	r3, 800fed6 <__sflush_r+0x66>
 800feba:	2b1d      	cmp	r3, #29
 800febc:	d001      	beq.n	800fec2 <__sflush_r+0x52>
 800febe:	2b16      	cmp	r3, #22
 800fec0:	d103      	bne.n	800feca <__sflush_r+0x5a>
 800fec2:	602f      	str	r7, [r5, #0]
 800fec4:	2000      	movs	r0, #0
 800fec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fed0:	81a3      	strh	r3, [r4, #12]
 800fed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed6:	89a3      	ldrh	r3, [r4, #12]
 800fed8:	075a      	lsls	r2, r3, #29
 800feda:	d505      	bpl.n	800fee8 <__sflush_r+0x78>
 800fedc:	6863      	ldr	r3, [r4, #4]
 800fede:	1ac0      	subs	r0, r0, r3
 800fee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fee2:	b10b      	cbz	r3, 800fee8 <__sflush_r+0x78>
 800fee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fee6:	1ac0      	subs	r0, r0, r3
 800fee8:	2300      	movs	r3, #0
 800feea:	4602      	mov	r2, r0
 800feec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800feee:	6a21      	ldr	r1, [r4, #32]
 800fef0:	4628      	mov	r0, r5
 800fef2:	47b0      	blx	r6
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	89a3      	ldrh	r3, [r4, #12]
 800fef8:	d106      	bne.n	800ff08 <__sflush_r+0x98>
 800fefa:	6829      	ldr	r1, [r5, #0]
 800fefc:	291d      	cmp	r1, #29
 800fefe:	d83e      	bhi.n	800ff7e <__sflush_r+0x10e>
 800ff00:	4a22      	ldr	r2, [pc, #136]	; (800ff8c <__sflush_r+0x11c>)
 800ff02:	40ca      	lsrs	r2, r1
 800ff04:	07d6      	lsls	r6, r2, #31
 800ff06:	d53a      	bpl.n	800ff7e <__sflush_r+0x10e>
 800ff08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff0c:	b21b      	sxth	r3, r3
 800ff0e:	2200      	movs	r2, #0
 800ff10:	6062      	str	r2, [r4, #4]
 800ff12:	04d9      	lsls	r1, r3, #19
 800ff14:	6922      	ldr	r2, [r4, #16]
 800ff16:	81a3      	strh	r3, [r4, #12]
 800ff18:	6022      	str	r2, [r4, #0]
 800ff1a:	d504      	bpl.n	800ff26 <__sflush_r+0xb6>
 800ff1c:	1c42      	adds	r2, r0, #1
 800ff1e:	d101      	bne.n	800ff24 <__sflush_r+0xb4>
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	b903      	cbnz	r3, 800ff26 <__sflush_r+0xb6>
 800ff24:	6560      	str	r0, [r4, #84]	; 0x54
 800ff26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff28:	602f      	str	r7, [r5, #0]
 800ff2a:	2900      	cmp	r1, #0
 800ff2c:	d0ca      	beq.n	800fec4 <__sflush_r+0x54>
 800ff2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff32:	4299      	cmp	r1, r3
 800ff34:	d002      	beq.n	800ff3c <__sflush_r+0xcc>
 800ff36:	4628      	mov	r0, r5
 800ff38:	f000 f95c 	bl	80101f4 <_free_r>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	6360      	str	r0, [r4, #52]	; 0x34
 800ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff44:	690f      	ldr	r7, [r1, #16]
 800ff46:	2f00      	cmp	r7, #0
 800ff48:	d0bc      	beq.n	800fec4 <__sflush_r+0x54>
 800ff4a:	079b      	lsls	r3, r3, #30
 800ff4c:	680e      	ldr	r6, [r1, #0]
 800ff4e:	bf08      	it	eq
 800ff50:	694b      	ldreq	r3, [r1, #20]
 800ff52:	600f      	str	r7, [r1, #0]
 800ff54:	bf18      	it	ne
 800ff56:	2300      	movne	r3, #0
 800ff58:	ebc7 0806 	rsb	r8, r7, r6
 800ff5c:	608b      	str	r3, [r1, #8]
 800ff5e:	e002      	b.n	800ff66 <__sflush_r+0xf6>
 800ff60:	4407      	add	r7, r0
 800ff62:	ebc0 0808 	rsb	r8, r0, r8
 800ff66:	f1b8 0f00 	cmp.w	r8, #0
 800ff6a:	ddab      	ble.n	800fec4 <__sflush_r+0x54>
 800ff6c:	4643      	mov	r3, r8
 800ff6e:	463a      	mov	r2, r7
 800ff70:	6a21      	ldr	r1, [r4, #32]
 800ff72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff74:	4628      	mov	r0, r5
 800ff76:	47b0      	blx	r6
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	dcf1      	bgt.n	800ff60 <__sflush_r+0xf0>
 800ff7c:	89a3      	ldrh	r3, [r4, #12]
 800ff7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff82:	81a3      	strh	r3, [r4, #12]
 800ff84:	f04f 30ff 	mov.w	r0, #4294967295
 800ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8c:	20400001 	.word	0x20400001

0800ff90 <_fflush_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	690b      	ldr	r3, [r1, #16]
 800ff94:	4605      	mov	r5, r0
 800ff96:	460c      	mov	r4, r1
 800ff98:	b1db      	cbz	r3, 800ffd2 <_fflush_r+0x42>
 800ff9a:	b118      	cbz	r0, 800ffa4 <_fflush_r+0x14>
 800ff9c:	6983      	ldr	r3, [r0, #24]
 800ff9e:	b90b      	cbnz	r3, 800ffa4 <_fflush_r+0x14>
 800ffa0:	f000 f860 	bl	8010064 <__sinit>
 800ffa4:	4b0c      	ldr	r3, [pc, #48]	; (800ffd8 <_fflush_r+0x48>)
 800ffa6:	429c      	cmp	r4, r3
 800ffa8:	d101      	bne.n	800ffae <_fflush_r+0x1e>
 800ffaa:	686c      	ldr	r4, [r5, #4]
 800ffac:	e008      	b.n	800ffc0 <_fflush_r+0x30>
 800ffae:	4b0b      	ldr	r3, [pc, #44]	; (800ffdc <_fflush_r+0x4c>)
 800ffb0:	429c      	cmp	r4, r3
 800ffb2:	d101      	bne.n	800ffb8 <_fflush_r+0x28>
 800ffb4:	68ac      	ldr	r4, [r5, #8]
 800ffb6:	e003      	b.n	800ffc0 <_fflush_r+0x30>
 800ffb8:	4b09      	ldr	r3, [pc, #36]	; (800ffe0 <_fflush_r+0x50>)
 800ffba:	429c      	cmp	r4, r3
 800ffbc:	bf08      	it	eq
 800ffbe:	68ec      	ldreq	r4, [r5, #12]
 800ffc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffc4:	b12b      	cbz	r3, 800ffd2 <_fflush_r+0x42>
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4628      	mov	r0, r5
 800ffca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffce:	f7ff bf4f 	b.w	800fe70 <__sflush_r>
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	bd38      	pop	{r3, r4, r5, pc}
 800ffd6:	bf00      	nop
 800ffd8:	080154ec 	.word	0x080154ec
 800ffdc:	0801550c 	.word	0x0801550c
 800ffe0:	0801552c 	.word	0x0801552c

0800ffe4 <_cleanup_r>:
 800ffe4:	4901      	ldr	r1, [pc, #4]	; (800ffec <_cleanup_r+0x8>)
 800ffe6:	f000 bb0d 	b.w	8010604 <_fwalk_reent>
 800ffea:	bf00      	nop
 800ffec:	08011b65 	.word	0x08011b65

0800fff0 <std.isra.0>:
 800fff0:	2300      	movs	r3, #0
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	6003      	str	r3, [r0, #0]
 800fff8:	6043      	str	r3, [r0, #4]
 800fffa:	6083      	str	r3, [r0, #8]
 800fffc:	8181      	strh	r1, [r0, #12]
 800fffe:	6643      	str	r3, [r0, #100]	; 0x64
 8010000:	81c2      	strh	r2, [r0, #14]
 8010002:	6103      	str	r3, [r0, #16]
 8010004:	6143      	str	r3, [r0, #20]
 8010006:	6183      	str	r3, [r0, #24]
 8010008:	4619      	mov	r1, r3
 801000a:	2208      	movs	r2, #8
 801000c:	305c      	adds	r0, #92	; 0x5c
 801000e:	f7fb ff46 	bl	800be9e <memset>
 8010012:	4b05      	ldr	r3, [pc, #20]	; (8010028 <std.isra.0+0x38>)
 8010014:	6263      	str	r3, [r4, #36]	; 0x24
 8010016:	4b05      	ldr	r3, [pc, #20]	; (801002c <std.isra.0+0x3c>)
 8010018:	62a3      	str	r3, [r4, #40]	; 0x28
 801001a:	4b05      	ldr	r3, [pc, #20]	; (8010030 <std.isra.0+0x40>)
 801001c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801001e:	4b05      	ldr	r3, [pc, #20]	; (8010034 <std.isra.0+0x44>)
 8010020:	6224      	str	r4, [r4, #32]
 8010022:	6323      	str	r3, [r4, #48]	; 0x30
 8010024:	bd10      	pop	{r4, pc}
 8010026:	bf00      	nop
 8010028:	080118dd 	.word	0x080118dd
 801002c:	080118ff 	.word	0x080118ff
 8010030:	08011937 	.word	0x08011937
 8010034:	0801195b 	.word	0x0801195b

08010038 <__sfmoreglue>:
 8010038:	b570      	push	{r4, r5, r6, lr}
 801003a:	2368      	movs	r3, #104	; 0x68
 801003c:	1e4d      	subs	r5, r1, #1
 801003e:	435d      	muls	r5, r3
 8010040:	460e      	mov	r6, r1
 8010042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010046:	f7fb fcff 	bl	800ba48 <_malloc_r>
 801004a:	4604      	mov	r4, r0
 801004c:	b140      	cbz	r0, 8010060 <__sfmoreglue+0x28>
 801004e:	2100      	movs	r1, #0
 8010050:	e880 0042 	stmia.w	r0, {r1, r6}
 8010054:	300c      	adds	r0, #12
 8010056:	60a0      	str	r0, [r4, #8]
 8010058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801005c:	f7fb ff1f 	bl	800be9e <memset>
 8010060:	4620      	mov	r0, r4
 8010062:	bd70      	pop	{r4, r5, r6, pc}

08010064 <__sinit>:
 8010064:	6983      	ldr	r3, [r0, #24]
 8010066:	b510      	push	{r4, lr}
 8010068:	4604      	mov	r4, r0
 801006a:	bb4b      	cbnz	r3, 80100c0 <__sinit+0x5c>
 801006c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8010070:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8010074:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8010078:	4b12      	ldr	r3, [pc, #72]	; (80100c4 <__sinit+0x60>)
 801007a:	4a13      	ldr	r2, [pc, #76]	; (80100c8 <__sinit+0x64>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	6282      	str	r2, [r0, #40]	; 0x28
 8010080:	4298      	cmp	r0, r3
 8010082:	bf04      	itt	eq
 8010084:	2301      	moveq	r3, #1
 8010086:	6183      	streq	r3, [r0, #24]
 8010088:	f000 f820 	bl	80100cc <__sfp>
 801008c:	6060      	str	r0, [r4, #4]
 801008e:	4620      	mov	r0, r4
 8010090:	f000 f81c 	bl	80100cc <__sfp>
 8010094:	60a0      	str	r0, [r4, #8]
 8010096:	4620      	mov	r0, r4
 8010098:	f000 f818 	bl	80100cc <__sfp>
 801009c:	2200      	movs	r2, #0
 801009e:	60e0      	str	r0, [r4, #12]
 80100a0:	2104      	movs	r1, #4
 80100a2:	6860      	ldr	r0, [r4, #4]
 80100a4:	f7ff ffa4 	bl	800fff0 <std.isra.0>
 80100a8:	2201      	movs	r2, #1
 80100aa:	2109      	movs	r1, #9
 80100ac:	68a0      	ldr	r0, [r4, #8]
 80100ae:	f7ff ff9f 	bl	800fff0 <std.isra.0>
 80100b2:	2202      	movs	r2, #2
 80100b4:	2112      	movs	r1, #18
 80100b6:	68e0      	ldr	r0, [r4, #12]
 80100b8:	f7ff ff9a 	bl	800fff0 <std.isra.0>
 80100bc:	2301      	movs	r3, #1
 80100be:	61a3      	str	r3, [r4, #24]
 80100c0:	bd10      	pop	{r4, pc}
 80100c2:	bf00      	nop
 80100c4:	08015310 	.word	0x08015310
 80100c8:	0800ffe5 	.word	0x0800ffe5

080100cc <__sfp>:
 80100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ce:	4b1c      	ldr	r3, [pc, #112]	; (8010140 <__sfp+0x74>)
 80100d0:	681e      	ldr	r6, [r3, #0]
 80100d2:	69b3      	ldr	r3, [r6, #24]
 80100d4:	4607      	mov	r7, r0
 80100d6:	b913      	cbnz	r3, 80100de <__sfp+0x12>
 80100d8:	4630      	mov	r0, r6
 80100da:	f7ff ffc3 	bl	8010064 <__sinit>
 80100de:	36d8      	adds	r6, #216	; 0xd8
 80100e0:	68b4      	ldr	r4, [r6, #8]
 80100e2:	6873      	ldr	r3, [r6, #4]
 80100e4:	3b01      	subs	r3, #1
 80100e6:	d404      	bmi.n	80100f2 <__sfp+0x26>
 80100e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100ec:	b17d      	cbz	r5, 801010e <__sfp+0x42>
 80100ee:	3468      	adds	r4, #104	; 0x68
 80100f0:	e7f8      	b.n	80100e4 <__sfp+0x18>
 80100f2:	6833      	ldr	r3, [r6, #0]
 80100f4:	b10b      	cbz	r3, 80100fa <__sfp+0x2e>
 80100f6:	6836      	ldr	r6, [r6, #0]
 80100f8:	e7f2      	b.n	80100e0 <__sfp+0x14>
 80100fa:	2104      	movs	r1, #4
 80100fc:	4638      	mov	r0, r7
 80100fe:	f7ff ff9b 	bl	8010038 <__sfmoreglue>
 8010102:	6030      	str	r0, [r6, #0]
 8010104:	2800      	cmp	r0, #0
 8010106:	d1f6      	bne.n	80100f6 <__sfp+0x2a>
 8010108:	230c      	movs	r3, #12
 801010a:	603b      	str	r3, [r7, #0]
 801010c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801010e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010112:	81e3      	strh	r3, [r4, #14]
 8010114:	2301      	movs	r3, #1
 8010116:	81a3      	strh	r3, [r4, #12]
 8010118:	6665      	str	r5, [r4, #100]	; 0x64
 801011a:	6025      	str	r5, [r4, #0]
 801011c:	60a5      	str	r5, [r4, #8]
 801011e:	6065      	str	r5, [r4, #4]
 8010120:	6125      	str	r5, [r4, #16]
 8010122:	6165      	str	r5, [r4, #20]
 8010124:	61a5      	str	r5, [r4, #24]
 8010126:	2208      	movs	r2, #8
 8010128:	4629      	mov	r1, r5
 801012a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801012e:	f7fb feb6 	bl	800be9e <memset>
 8010132:	6365      	str	r5, [r4, #52]	; 0x34
 8010134:	63a5      	str	r5, [r4, #56]	; 0x38
 8010136:	64a5      	str	r5, [r4, #72]	; 0x48
 8010138:	64e5      	str	r5, [r4, #76]	; 0x4c
 801013a:	4620      	mov	r0, r4
 801013c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801013e:	bf00      	nop
 8010140:	08015310 	.word	0x08015310

08010144 <__sfp_lock_acquire>:
 8010144:	4770      	bx	lr

08010146 <__sfp_lock_release>:
 8010146:	4770      	bx	lr

08010148 <_malloc_trim_r>:
 8010148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801014c:	4f25      	ldr	r7, [pc, #148]	; (80101e4 <_malloc_trim_r+0x9c>)
 801014e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80101f0 <_malloc_trim_r+0xa8>
 8010152:	4689      	mov	r9, r1
 8010154:	4606      	mov	r6, r0
 8010156:	f7fb feaa 	bl	800beae <__malloc_lock>
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	685d      	ldr	r5, [r3, #4]
 801015e:	f1a8 0411 	sub.w	r4, r8, #17
 8010162:	f025 0503 	bic.w	r5, r5, #3
 8010166:	442c      	add	r4, r5
 8010168:	ebc9 0404 	rsb	r4, r9, r4
 801016c:	fbb4 f4f8 	udiv	r4, r4, r8
 8010170:	3c01      	subs	r4, #1
 8010172:	fb08 f404 	mul.w	r4, r8, r4
 8010176:	4544      	cmp	r4, r8
 8010178:	da05      	bge.n	8010186 <_malloc_trim_r+0x3e>
 801017a:	4630      	mov	r0, r6
 801017c:	f7fb fe98 	bl	800beb0 <__malloc_unlock>
 8010180:	2000      	movs	r0, #0
 8010182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010186:	2100      	movs	r1, #0
 8010188:	4630      	mov	r0, r6
 801018a:	f7fb feff 	bl	800bf8c <_sbrk_r>
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	442b      	add	r3, r5
 8010192:	4298      	cmp	r0, r3
 8010194:	d1f1      	bne.n	801017a <_malloc_trim_r+0x32>
 8010196:	4261      	negs	r1, r4
 8010198:	4630      	mov	r0, r6
 801019a:	f7fb fef7 	bl	800bf8c <_sbrk_r>
 801019e:	3001      	adds	r0, #1
 80101a0:	d110      	bne.n	80101c4 <_malloc_trim_r+0x7c>
 80101a2:	2100      	movs	r1, #0
 80101a4:	4630      	mov	r0, r6
 80101a6:	f7fb fef1 	bl	800bf8c <_sbrk_r>
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	1a83      	subs	r3, r0, r2
 80101ae:	2b0f      	cmp	r3, #15
 80101b0:	dde3      	ble.n	801017a <_malloc_trim_r+0x32>
 80101b2:	490d      	ldr	r1, [pc, #52]	; (80101e8 <_malloc_trim_r+0xa0>)
 80101b4:	6809      	ldr	r1, [r1, #0]
 80101b6:	1a40      	subs	r0, r0, r1
 80101b8:	490c      	ldr	r1, [pc, #48]	; (80101ec <_malloc_trim_r+0xa4>)
 80101ba:	f043 0301 	orr.w	r3, r3, #1
 80101be:	6008      	str	r0, [r1, #0]
 80101c0:	6053      	str	r3, [r2, #4]
 80101c2:	e7da      	b.n	801017a <_malloc_trim_r+0x32>
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	4a09      	ldr	r2, [pc, #36]	; (80101ec <_malloc_trim_r+0xa4>)
 80101c8:	1b2d      	subs	r5, r5, r4
 80101ca:	f045 0501 	orr.w	r5, r5, #1
 80101ce:	605d      	str	r5, [r3, #4]
 80101d0:	6813      	ldr	r3, [r2, #0]
 80101d2:	4630      	mov	r0, r6
 80101d4:	1b1c      	subs	r4, r3, r4
 80101d6:	6014      	str	r4, [r2, #0]
 80101d8:	f7fb fe6a 	bl	800beb0 <__malloc_unlock>
 80101dc:	2001      	movs	r0, #1
 80101de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e2:	bf00      	nop
 80101e4:	20010124 	.word	0x20010124
 80101e8:	20010530 	.word	0x20010530
 80101ec:	200146e4 	.word	0x200146e4
 80101f0:	00000080 	.word	0x00000080

080101f4 <_free_r>:
 80101f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f8:	4604      	mov	r4, r0
 80101fa:	4688      	mov	r8, r1
 80101fc:	2900      	cmp	r1, #0
 80101fe:	f000 80ad 	beq.w	801035c <_free_r+0x168>
 8010202:	f7fb fe54 	bl	800beae <__malloc_lock>
 8010206:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801020a:	4d55      	ldr	r5, [pc, #340]	; (8010360 <_free_r+0x16c>)
 801020c:	f022 0001 	bic.w	r0, r2, #1
 8010210:	f1a8 0308 	sub.w	r3, r8, #8
 8010214:	181f      	adds	r7, r3, r0
 8010216:	68a9      	ldr	r1, [r5, #8]
 8010218:	687e      	ldr	r6, [r7, #4]
 801021a:	428f      	cmp	r7, r1
 801021c:	f026 0603 	bic.w	r6, r6, #3
 8010220:	f002 0201 	and.w	r2, r2, #1
 8010224:	d11b      	bne.n	801025e <_free_r+0x6a>
 8010226:	4430      	add	r0, r6
 8010228:	b93a      	cbnz	r2, 801023a <_free_r+0x46>
 801022a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801022e:	1a9b      	subs	r3, r3, r2
 8010230:	4410      	add	r0, r2
 8010232:	6899      	ldr	r1, [r3, #8]
 8010234:	68da      	ldr	r2, [r3, #12]
 8010236:	60ca      	str	r2, [r1, #12]
 8010238:	6091      	str	r1, [r2, #8]
 801023a:	f040 0201 	orr.w	r2, r0, #1
 801023e:	605a      	str	r2, [r3, #4]
 8010240:	60ab      	str	r3, [r5, #8]
 8010242:	4b48      	ldr	r3, [pc, #288]	; (8010364 <_free_r+0x170>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4298      	cmp	r0, r3
 8010248:	d304      	bcc.n	8010254 <_free_r+0x60>
 801024a:	4b47      	ldr	r3, [pc, #284]	; (8010368 <_free_r+0x174>)
 801024c:	4620      	mov	r0, r4
 801024e:	6819      	ldr	r1, [r3, #0]
 8010250:	f7ff ff7a 	bl	8010148 <_malloc_trim_r>
 8010254:	4620      	mov	r0, r4
 8010256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801025a:	f7fb be29 	b.w	800beb0 <__malloc_unlock>
 801025e:	607e      	str	r6, [r7, #4]
 8010260:	b97a      	cbnz	r2, 8010282 <_free_r+0x8e>
 8010262:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8010266:	1a5b      	subs	r3, r3, r1
 8010268:	4408      	add	r0, r1
 801026a:	6899      	ldr	r1, [r3, #8]
 801026c:	f105 0e08 	add.w	lr, r5, #8
 8010270:	4571      	cmp	r1, lr
 8010272:	d008      	beq.n	8010286 <_free_r+0x92>
 8010274:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010278:	f8c1 e00c 	str.w	lr, [r1, #12]
 801027c:	f8ce 1008 	str.w	r1, [lr, #8]
 8010280:	e002      	b.n	8010288 <_free_r+0x94>
 8010282:	2200      	movs	r2, #0
 8010284:	e000      	b.n	8010288 <_free_r+0x94>
 8010286:	2201      	movs	r2, #1
 8010288:	19b9      	adds	r1, r7, r6
 801028a:	6849      	ldr	r1, [r1, #4]
 801028c:	07c9      	lsls	r1, r1, #31
 801028e:	d40e      	bmi.n	80102ae <_free_r+0xba>
 8010290:	4430      	add	r0, r6
 8010292:	68b9      	ldr	r1, [r7, #8]
 8010294:	b942      	cbnz	r2, 80102a8 <_free_r+0xb4>
 8010296:	4e35      	ldr	r6, [pc, #212]	; (801036c <_free_r+0x178>)
 8010298:	42b1      	cmp	r1, r6
 801029a:	d105      	bne.n	80102a8 <_free_r+0xb4>
 801029c:	616b      	str	r3, [r5, #20]
 801029e:	612b      	str	r3, [r5, #16]
 80102a0:	2201      	movs	r2, #1
 80102a2:	60d9      	str	r1, [r3, #12]
 80102a4:	6099      	str	r1, [r3, #8]
 80102a6:	e002      	b.n	80102ae <_free_r+0xba>
 80102a8:	68fe      	ldr	r6, [r7, #12]
 80102aa:	60ce      	str	r6, [r1, #12]
 80102ac:	60b1      	str	r1, [r6, #8]
 80102ae:	f040 0101 	orr.w	r1, r0, #1
 80102b2:	6059      	str	r1, [r3, #4]
 80102b4:	5018      	str	r0, [r3, r0]
 80102b6:	2a00      	cmp	r2, #0
 80102b8:	d1cc      	bne.n	8010254 <_free_r+0x60>
 80102ba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80102be:	d212      	bcs.n	80102e6 <_free_r+0xf2>
 80102c0:	08c0      	lsrs	r0, r0, #3
 80102c2:	1081      	asrs	r1, r0, #2
 80102c4:	2201      	movs	r2, #1
 80102c6:	fa02 f101 	lsl.w	r1, r2, r1
 80102ca:	686a      	ldr	r2, [r5, #4]
 80102cc:	3001      	adds	r0, #1
 80102ce:	430a      	orrs	r2, r1
 80102d0:	606a      	str	r2, [r5, #4]
 80102d2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80102d6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80102da:	6099      	str	r1, [r3, #8]
 80102dc:	3a08      	subs	r2, #8
 80102de:	60da      	str	r2, [r3, #12]
 80102e0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80102e4:	e038      	b.n	8010358 <_free_r+0x164>
 80102e6:	0a42      	lsrs	r2, r0, #9
 80102e8:	2a04      	cmp	r2, #4
 80102ea:	d802      	bhi.n	80102f2 <_free_r+0xfe>
 80102ec:	0982      	lsrs	r2, r0, #6
 80102ee:	3238      	adds	r2, #56	; 0x38
 80102f0:	e015      	b.n	801031e <_free_r+0x12a>
 80102f2:	2a14      	cmp	r2, #20
 80102f4:	d801      	bhi.n	80102fa <_free_r+0x106>
 80102f6:	325b      	adds	r2, #91	; 0x5b
 80102f8:	e011      	b.n	801031e <_free_r+0x12a>
 80102fa:	2a54      	cmp	r2, #84	; 0x54
 80102fc:	d802      	bhi.n	8010304 <_free_r+0x110>
 80102fe:	0b02      	lsrs	r2, r0, #12
 8010300:	326e      	adds	r2, #110	; 0x6e
 8010302:	e00c      	b.n	801031e <_free_r+0x12a>
 8010304:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8010308:	d802      	bhi.n	8010310 <_free_r+0x11c>
 801030a:	0bc2      	lsrs	r2, r0, #15
 801030c:	3277      	adds	r2, #119	; 0x77
 801030e:	e006      	b.n	801031e <_free_r+0x12a>
 8010310:	f240 5154 	movw	r1, #1364	; 0x554
 8010314:	428a      	cmp	r2, r1
 8010316:	bf9a      	itte	ls
 8010318:	0c82      	lsrls	r2, r0, #18
 801031a:	327c      	addls	r2, #124	; 0x7c
 801031c:	227e      	movhi	r2, #126	; 0x7e
 801031e:	1c51      	adds	r1, r2, #1
 8010320:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8010324:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8010328:	4f0d      	ldr	r7, [pc, #52]	; (8010360 <_free_r+0x16c>)
 801032a:	428e      	cmp	r6, r1
 801032c:	d10b      	bne.n	8010346 <_free_r+0x152>
 801032e:	2101      	movs	r1, #1
 8010330:	1092      	asrs	r2, r2, #2
 8010332:	fa01 f202 	lsl.w	r2, r1, r2
 8010336:	6879      	ldr	r1, [r7, #4]
 8010338:	4311      	orrs	r1, r2
 801033a:	6079      	str	r1, [r7, #4]
 801033c:	4631      	mov	r1, r6
 801033e:	e008      	b.n	8010352 <_free_r+0x15e>
 8010340:	6889      	ldr	r1, [r1, #8]
 8010342:	428e      	cmp	r6, r1
 8010344:	d004      	beq.n	8010350 <_free_r+0x15c>
 8010346:	684a      	ldr	r2, [r1, #4]
 8010348:	f022 0203 	bic.w	r2, r2, #3
 801034c:	4290      	cmp	r0, r2
 801034e:	d3f7      	bcc.n	8010340 <_free_r+0x14c>
 8010350:	68ce      	ldr	r6, [r1, #12]
 8010352:	60de      	str	r6, [r3, #12]
 8010354:	6099      	str	r1, [r3, #8]
 8010356:	60b3      	str	r3, [r6, #8]
 8010358:	60cb      	str	r3, [r1, #12]
 801035a:	e77b      	b.n	8010254 <_free_r+0x60>
 801035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010360:	20010124 	.word	0x20010124
 8010364:	2001052c 	.word	0x2001052c
 8010368:	200146e0 	.word	0x200146e0
 801036c:	2001012c 	.word	0x2001012c

08010370 <__sfvwrite_r>:
 8010370:	6893      	ldr	r3, [r2, #8]
 8010372:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010376:	4606      	mov	r6, r0
 8010378:	460c      	mov	r4, r1
 801037a:	4690      	mov	r8, r2
 801037c:	b90b      	cbnz	r3, 8010382 <__sfvwrite_r+0x12>
 801037e:	2000      	movs	r0, #0
 8010380:	e13b      	b.n	80105fa <__sfvwrite_r+0x28a>
 8010382:	898b      	ldrh	r3, [r1, #12]
 8010384:	0718      	lsls	r0, r3, #28
 8010386:	d50f      	bpl.n	80103a8 <__sfvwrite_r+0x38>
 8010388:	690b      	ldr	r3, [r1, #16]
 801038a:	b16b      	cbz	r3, 80103a8 <__sfvwrite_r+0x38>
 801038c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8010390:	f8d8 b000 	ldr.w	fp, [r8]
 8010394:	f009 0502 	and.w	r5, r9, #2
 8010398:	b2ad      	uxth	r5, r5
 801039a:	b355      	cbz	r5, 80103f2 <__sfvwrite_r+0x82>
 801039c:	f04f 0900 	mov.w	r9, #0
 80103a0:	464f      	mov	r7, r9
 80103a2:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8010600 <__sfvwrite_r+0x290>
 80103a6:	e01b      	b.n	80103e0 <__sfvwrite_r+0x70>
 80103a8:	4621      	mov	r1, r4
 80103aa:	4630      	mov	r0, r6
 80103ac:	f7fe fec0 	bl	800f130 <__swsetup_r>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d0eb      	beq.n	801038c <__sfvwrite_r+0x1c>
 80103b4:	e11f      	b.n	80105f6 <__sfvwrite_r+0x286>
 80103b6:	4557      	cmp	r7, sl
 80103b8:	463b      	mov	r3, r7
 80103ba:	464a      	mov	r2, r9
 80103bc:	bf28      	it	cs
 80103be:	4653      	movcs	r3, sl
 80103c0:	6a21      	ldr	r1, [r4, #32]
 80103c2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80103c4:	4630      	mov	r0, r6
 80103c6:	47a8      	blx	r5
 80103c8:	2800      	cmp	r0, #0
 80103ca:	f340 8110 	ble.w	80105ee <__sfvwrite_r+0x27e>
 80103ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103d2:	4481      	add	r9, r0
 80103d4:	1a3f      	subs	r7, r7, r0
 80103d6:	1a18      	subs	r0, r3, r0
 80103d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80103dc:	2800      	cmp	r0, #0
 80103de:	d0ce      	beq.n	801037e <__sfvwrite_r+0xe>
 80103e0:	2f00      	cmp	r7, #0
 80103e2:	d1e8      	bne.n	80103b6 <__sfvwrite_r+0x46>
 80103e4:	f8db 9000 	ldr.w	r9, [fp]
 80103e8:	f8db 7004 	ldr.w	r7, [fp, #4]
 80103ec:	f10b 0b08 	add.w	fp, fp, #8
 80103f0:	e7f6      	b.n	80103e0 <__sfvwrite_r+0x70>
 80103f2:	f019 0901 	ands.w	r9, r9, #1
 80103f6:	d003      	beq.n	8010400 <__sfvwrite_r+0x90>
 80103f8:	9500      	str	r5, [sp, #0]
 80103fa:	46a9      	mov	r9, r5
 80103fc:	46aa      	mov	sl, r5
 80103fe:	e0bd      	b.n	801057c <__sfvwrite_r+0x20c>
 8010400:	464f      	mov	r7, r9
 8010402:	b937      	cbnz	r7, 8010412 <__sfvwrite_r+0xa2>
 8010404:	f8db 9000 	ldr.w	r9, [fp]
 8010408:	f8db 7004 	ldr.w	r7, [fp, #4]
 801040c:	f10b 0b08 	add.w	fp, fp, #8
 8010410:	e7f7      	b.n	8010402 <__sfvwrite_r+0x92>
 8010412:	89a2      	ldrh	r2, [r4, #12]
 8010414:	68a5      	ldr	r5, [r4, #8]
 8010416:	0591      	lsls	r1, r2, #22
 8010418:	d552      	bpl.n	80104c0 <__sfvwrite_r+0x150>
 801041a:	42af      	cmp	r7, r5
 801041c:	d342      	bcc.n	80104a4 <__sfvwrite_r+0x134>
 801041e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010422:	d03d      	beq.n	80104a0 <__sfvwrite_r+0x130>
 8010424:	6921      	ldr	r1, [r4, #16]
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	1a5b      	subs	r3, r3, r1
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	6963      	ldr	r3, [r4, #20]
 801042e:	2002      	movs	r0, #2
 8010430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010434:	fb93 faf0 	sdiv	sl, r3, r0
 8010438:	9b00      	ldr	r3, [sp, #0]
 801043a:	3301      	adds	r3, #1
 801043c:	443b      	add	r3, r7
 801043e:	459a      	cmp	sl, r3
 8010440:	bf38      	it	cc
 8010442:	469a      	movcc	sl, r3
 8010444:	0553      	lsls	r3, r2, #21
 8010446:	d510      	bpl.n	801046a <__sfvwrite_r+0xfa>
 8010448:	4651      	mov	r1, sl
 801044a:	4630      	mov	r0, r6
 801044c:	f7fb fafc 	bl	800ba48 <_malloc_r>
 8010450:	4605      	mov	r5, r0
 8010452:	b1c0      	cbz	r0, 8010486 <__sfvwrite_r+0x116>
 8010454:	9a00      	ldr	r2, [sp, #0]
 8010456:	6921      	ldr	r1, [r4, #16]
 8010458:	f7fb fd16 	bl	800be88 <memcpy>
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010466:	81a3      	strh	r3, [r4, #12]
 8010468:	e010      	b.n	801048c <__sfvwrite_r+0x11c>
 801046a:	4652      	mov	r2, sl
 801046c:	4630      	mov	r0, r6
 801046e:	f001 f887 	bl	8011580 <_realloc_r>
 8010472:	4605      	mov	r5, r0
 8010474:	b950      	cbnz	r0, 801048c <__sfvwrite_r+0x11c>
 8010476:	6921      	ldr	r1, [r4, #16]
 8010478:	4630      	mov	r0, r6
 801047a:	f7ff febb 	bl	80101f4 <_free_r>
 801047e:	89a3      	ldrh	r3, [r4, #12]
 8010480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010484:	81a3      	strh	r3, [r4, #12]
 8010486:	230c      	movs	r3, #12
 8010488:	6033      	str	r3, [r6, #0]
 801048a:	e0b0      	b.n	80105ee <__sfvwrite_r+0x27e>
 801048c:	9b00      	ldr	r3, [sp, #0]
 801048e:	6125      	str	r5, [r4, #16]
 8010490:	441d      	add	r5, r3
 8010492:	ebc3 030a 	rsb	r3, r3, sl
 8010496:	6025      	str	r5, [r4, #0]
 8010498:	f8c4 a014 	str.w	sl, [r4, #20]
 801049c:	463d      	mov	r5, r7
 801049e:	60a3      	str	r3, [r4, #8]
 80104a0:	42af      	cmp	r7, r5
 80104a2:	d200      	bcs.n	80104a6 <__sfvwrite_r+0x136>
 80104a4:	463d      	mov	r5, r7
 80104a6:	462a      	mov	r2, r5
 80104a8:	4649      	mov	r1, r9
 80104aa:	6820      	ldr	r0, [r4, #0]
 80104ac:	f000 fc5c 	bl	8010d68 <memmove>
 80104b0:	68a3      	ldr	r3, [r4, #8]
 80104b2:	1b5b      	subs	r3, r3, r5
 80104b4:	60a3      	str	r3, [r4, #8]
 80104b6:	6823      	ldr	r3, [r4, #0]
 80104b8:	441d      	add	r5, r3
 80104ba:	6025      	str	r5, [r4, #0]
 80104bc:	463d      	mov	r5, r7
 80104be:	e029      	b.n	8010514 <__sfvwrite_r+0x1a4>
 80104c0:	6820      	ldr	r0, [r4, #0]
 80104c2:	6923      	ldr	r3, [r4, #16]
 80104c4:	4298      	cmp	r0, r3
 80104c6:	d802      	bhi.n	80104ce <__sfvwrite_r+0x15e>
 80104c8:	6962      	ldr	r2, [r4, #20]
 80104ca:	4297      	cmp	r7, r2
 80104cc:	d213      	bcs.n	80104f6 <__sfvwrite_r+0x186>
 80104ce:	42bd      	cmp	r5, r7
 80104d0:	bf28      	it	cs
 80104d2:	463d      	movcs	r5, r7
 80104d4:	462a      	mov	r2, r5
 80104d6:	4649      	mov	r1, r9
 80104d8:	f000 fc46 	bl	8010d68 <memmove>
 80104dc:	68a3      	ldr	r3, [r4, #8]
 80104de:	6822      	ldr	r2, [r4, #0]
 80104e0:	1b5b      	subs	r3, r3, r5
 80104e2:	442a      	add	r2, r5
 80104e4:	60a3      	str	r3, [r4, #8]
 80104e6:	6022      	str	r2, [r4, #0]
 80104e8:	b9a3      	cbnz	r3, 8010514 <__sfvwrite_r+0x1a4>
 80104ea:	4621      	mov	r1, r4
 80104ec:	4630      	mov	r0, r6
 80104ee:	f7ff fd4f 	bl	800ff90 <_fflush_r>
 80104f2:	b178      	cbz	r0, 8010514 <__sfvwrite_r+0x1a4>
 80104f4:	e07b      	b.n	80105ee <__sfvwrite_r+0x27e>
 80104f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80104fa:	42bb      	cmp	r3, r7
 80104fc:	bf28      	it	cs
 80104fe:	463b      	movcs	r3, r7
 8010500:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010502:	fb93 f3f2 	sdiv	r3, r3, r2
 8010506:	6a21      	ldr	r1, [r4, #32]
 8010508:	4353      	muls	r3, r2
 801050a:	4630      	mov	r0, r6
 801050c:	464a      	mov	r2, r9
 801050e:	47a8      	blx	r5
 8010510:	1e05      	subs	r5, r0, #0
 8010512:	dd6c      	ble.n	80105ee <__sfvwrite_r+0x27e>
 8010514:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010518:	44a9      	add	r9, r5
 801051a:	1b7f      	subs	r7, r7, r5
 801051c:	1b5d      	subs	r5, r3, r5
 801051e:	f8c8 5008 	str.w	r5, [r8, #8]
 8010522:	2d00      	cmp	r5, #0
 8010524:	f47f af6d 	bne.w	8010402 <__sfvwrite_r+0x92>
 8010528:	e729      	b.n	801037e <__sfvwrite_r+0xe>
 801052a:	9b00      	ldr	r3, [sp, #0]
 801052c:	b383      	cbz	r3, 8010590 <__sfvwrite_r+0x220>
 801052e:	6820      	ldr	r0, [r4, #0]
 8010530:	6921      	ldr	r1, [r4, #16]
 8010532:	6962      	ldr	r2, [r4, #20]
 8010534:	4555      	cmp	r5, sl
 8010536:	462b      	mov	r3, r5
 8010538:	bf28      	it	cs
 801053a:	4653      	movcs	r3, sl
 801053c:	4288      	cmp	r0, r1
 801053e:	d936      	bls.n	80105ae <__sfvwrite_r+0x23e>
 8010540:	68a7      	ldr	r7, [r4, #8]
 8010542:	4417      	add	r7, r2
 8010544:	42bb      	cmp	r3, r7
 8010546:	dd32      	ble.n	80105ae <__sfvwrite_r+0x23e>
 8010548:	4649      	mov	r1, r9
 801054a:	463a      	mov	r2, r7
 801054c:	f000 fc0c 	bl	8010d68 <memmove>
 8010550:	6823      	ldr	r3, [r4, #0]
 8010552:	443b      	add	r3, r7
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	4621      	mov	r1, r4
 8010558:	4630      	mov	r0, r6
 801055a:	f7ff fd19 	bl	800ff90 <_fflush_r>
 801055e:	2800      	cmp	r0, #0
 8010560:	d145      	bne.n	80105ee <__sfvwrite_r+0x27e>
 8010562:	1bed      	subs	r5, r5, r7
 8010564:	d03c      	beq.n	80105e0 <__sfvwrite_r+0x270>
 8010566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801056a:	44b9      	add	r9, r7
 801056c:	ebc7 0a0a 	rsb	sl, r7, sl
 8010570:	1bdf      	subs	r7, r3, r7
 8010572:	f8c8 7008 	str.w	r7, [r8, #8]
 8010576:	2f00      	cmp	r7, #0
 8010578:	f43f af01 	beq.w	801037e <__sfvwrite_r+0xe>
 801057c:	f1ba 0f00 	cmp.w	sl, #0
 8010580:	d1d3      	bne.n	801052a <__sfvwrite_r+0x1ba>
 8010582:	2300      	movs	r3, #0
 8010584:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	f10b 0b08 	add.w	fp, fp, #8
 801058e:	e7f5      	b.n	801057c <__sfvwrite_r+0x20c>
 8010590:	4652      	mov	r2, sl
 8010592:	210a      	movs	r1, #10
 8010594:	4648      	mov	r0, r9
 8010596:	f7ef fe43 	bl	8000220 <memchr>
 801059a:	b118      	cbz	r0, 80105a4 <__sfvwrite_r+0x234>
 801059c:	3001      	adds	r0, #1
 801059e:	ebc9 0500 	rsb	r5, r9, r0
 80105a2:	e001      	b.n	80105a8 <__sfvwrite_r+0x238>
 80105a4:	f10a 0501 	add.w	r5, sl, #1
 80105a8:	2301      	movs	r3, #1
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	e7bf      	b.n	801052e <__sfvwrite_r+0x1be>
 80105ae:	4293      	cmp	r3, r2
 80105b0:	db08      	blt.n	80105c4 <__sfvwrite_r+0x254>
 80105b2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80105b4:	6a21      	ldr	r1, [r4, #32]
 80105b6:	4613      	mov	r3, r2
 80105b8:	4630      	mov	r0, r6
 80105ba:	464a      	mov	r2, r9
 80105bc:	47b8      	blx	r7
 80105be:	1e07      	subs	r7, r0, #0
 80105c0:	dccf      	bgt.n	8010562 <__sfvwrite_r+0x1f2>
 80105c2:	e014      	b.n	80105ee <__sfvwrite_r+0x27e>
 80105c4:	461a      	mov	r2, r3
 80105c6:	4649      	mov	r1, r9
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	f000 fbcd 	bl	8010d68 <memmove>
 80105ce:	9b01      	ldr	r3, [sp, #4]
 80105d0:	68a2      	ldr	r2, [r4, #8]
 80105d2:	1ad2      	subs	r2, r2, r3
 80105d4:	60a2      	str	r2, [r4, #8]
 80105d6:	6822      	ldr	r2, [r4, #0]
 80105d8:	441a      	add	r2, r3
 80105da:	6022      	str	r2, [r4, #0]
 80105dc:	461f      	mov	r7, r3
 80105de:	e7c0      	b.n	8010562 <__sfvwrite_r+0x1f2>
 80105e0:	4621      	mov	r1, r4
 80105e2:	4630      	mov	r0, r6
 80105e4:	f7ff fcd4 	bl	800ff90 <_fflush_r>
 80105e8:	b908      	cbnz	r0, 80105ee <__sfvwrite_r+0x27e>
 80105ea:	9500      	str	r5, [sp, #0]
 80105ec:	e7bb      	b.n	8010566 <__sfvwrite_r+0x1f6>
 80105ee:	89a3      	ldrh	r3, [r4, #12]
 80105f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105f4:	81a3      	strh	r3, [r4, #12]
 80105f6:	f04f 30ff 	mov.w	r0, #4294967295
 80105fa:	b003      	add	sp, #12
 80105fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010600:	7ffffc00 	.word	0x7ffffc00

08010604 <_fwalk_reent>:
 8010604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010608:	4680      	mov	r8, r0
 801060a:	4689      	mov	r9, r1
 801060c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8010610:	2600      	movs	r6, #0
 8010612:	b194      	cbz	r4, 801063a <_fwalk_reent+0x36>
 8010614:	68a5      	ldr	r5, [r4, #8]
 8010616:	6867      	ldr	r7, [r4, #4]
 8010618:	3f01      	subs	r7, #1
 801061a:	d40c      	bmi.n	8010636 <_fwalk_reent+0x32>
 801061c:	89ab      	ldrh	r3, [r5, #12]
 801061e:	2b01      	cmp	r3, #1
 8010620:	d907      	bls.n	8010632 <_fwalk_reent+0x2e>
 8010622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010626:	3301      	adds	r3, #1
 8010628:	d003      	beq.n	8010632 <_fwalk_reent+0x2e>
 801062a:	4629      	mov	r1, r5
 801062c:	4640      	mov	r0, r8
 801062e:	47c8      	blx	r9
 8010630:	4306      	orrs	r6, r0
 8010632:	3568      	adds	r5, #104	; 0x68
 8010634:	e7f0      	b.n	8010618 <_fwalk_reent+0x14>
 8010636:	6824      	ldr	r4, [r4, #0]
 8010638:	e7eb      	b.n	8010612 <_fwalk_reent+0xe>
 801063a:	4630      	mov	r0, r6
 801063c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010640 <rshift>:
 8010640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010642:	6906      	ldr	r6, [r0, #16]
 8010644:	114b      	asrs	r3, r1, #5
 8010646:	42b3      	cmp	r3, r6
 8010648:	f100 0514 	add.w	r5, r0, #20
 801064c:	da27      	bge.n	801069e <rshift+0x5e>
 801064e:	f011 011f 	ands.w	r1, r1, #31
 8010652:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8010656:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801065a:	d101      	bne.n	8010660 <rshift+0x20>
 801065c:	4629      	mov	r1, r5
 801065e:	e016      	b.n	801068e <rshift+0x4e>
 8010660:	1d14      	adds	r4, r2, #4
 8010662:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8010666:	f1c1 0e20 	rsb	lr, r1, #32
 801066a:	40ca      	lsrs	r2, r1
 801066c:	462b      	mov	r3, r5
 801066e:	42b4      	cmp	r4, r6
 8010670:	d209      	bcs.n	8010686 <rshift+0x46>
 8010672:	6827      	ldr	r7, [r4, #0]
 8010674:	fa07 f70e 	lsl.w	r7, r7, lr
 8010678:	433a      	orrs	r2, r7
 801067a:	f843 2b04 	str.w	r2, [r3], #4
 801067e:	f854 2b04 	ldr.w	r2, [r4], #4
 8010682:	40ca      	lsrs	r2, r1
 8010684:	e7f3      	b.n	801066e <rshift+0x2e>
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	b152      	cbz	r2, 80106a0 <rshift+0x60>
 801068a:	3304      	adds	r3, #4
 801068c:	e008      	b.n	80106a0 <rshift+0x60>
 801068e:	42b2      	cmp	r2, r6
 8010690:	460b      	mov	r3, r1
 8010692:	d205      	bcs.n	80106a0 <rshift+0x60>
 8010694:	f852 3b04 	ldr.w	r3, [r2], #4
 8010698:	f841 3b04 	str.w	r3, [r1], #4
 801069c:	e7f7      	b.n	801068e <rshift+0x4e>
 801069e:	462b      	mov	r3, r5
 80106a0:	1b5b      	subs	r3, r3, r5
 80106a2:	109b      	asrs	r3, r3, #2
 80106a4:	6103      	str	r3, [r0, #16]
 80106a6:	b903      	cbnz	r3, 80106aa <rshift+0x6a>
 80106a8:	6143      	str	r3, [r0, #20]
 80106aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106ac <__hexdig_fun>:
 80106ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80106b0:	2b09      	cmp	r3, #9
 80106b2:	d801      	bhi.n	80106b8 <__hexdig_fun+0xc>
 80106b4:	3820      	subs	r0, #32
 80106b6:	e00a      	b.n	80106ce <__hexdig_fun+0x22>
 80106b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80106bc:	2b05      	cmp	r3, #5
 80106be:	d801      	bhi.n	80106c4 <__hexdig_fun+0x18>
 80106c0:	3847      	subs	r0, #71	; 0x47
 80106c2:	e004      	b.n	80106ce <__hexdig_fun+0x22>
 80106c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80106c8:	2b05      	cmp	r3, #5
 80106ca:	d802      	bhi.n	80106d2 <__hexdig_fun+0x26>
 80106cc:	3827      	subs	r0, #39	; 0x27
 80106ce:	b2c0      	uxtb	r0, r0
 80106d0:	4770      	bx	lr
 80106d2:	2000      	movs	r0, #0
 80106d4:	4770      	bx	lr

080106d6 <__gethex>:
 80106d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106da:	b08b      	sub	sp, #44	; 0x2c
 80106dc:	468a      	mov	sl, r1
 80106de:	4690      	mov	r8, r2
 80106e0:	9306      	str	r3, [sp, #24]
 80106e2:	9002      	str	r0, [sp, #8]
 80106e4:	f000 fad4 	bl	8010c90 <_localeconv_r>
 80106e8:	6803      	ldr	r3, [r0, #0]
 80106ea:	9303      	str	r3, [sp, #12]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ef fd8f 	bl	8000210 <strlen>
 80106f2:	9b03      	ldr	r3, [sp, #12]
 80106f4:	9001      	str	r0, [sp, #4]
 80106f6:	4403      	add	r3, r0
 80106f8:	f04f 0b00 	mov.w	fp, #0
 80106fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010700:	9307      	str	r3, [sp, #28]
 8010702:	f8da 3000 	ldr.w	r3, [sl]
 8010706:	3302      	adds	r3, #2
 8010708:	461f      	mov	r7, r3
 801070a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801070e:	2830      	cmp	r0, #48	; 0x30
 8010710:	d102      	bne.n	8010718 <__gethex+0x42>
 8010712:	f10b 0b01 	add.w	fp, fp, #1
 8010716:	e7f7      	b.n	8010708 <__gethex+0x32>
 8010718:	f7ff ffc8 	bl	80106ac <__hexdig_fun>
 801071c:	4604      	mov	r4, r0
 801071e:	b9e0      	cbnz	r0, 801075a <__gethex+0x84>
 8010720:	9a01      	ldr	r2, [sp, #4]
 8010722:	9903      	ldr	r1, [sp, #12]
 8010724:	4638      	mov	r0, r7
 8010726:	f7fb fccf 	bl	800c0c8 <strncmp>
 801072a:	2800      	cmp	r0, #0
 801072c:	d134      	bne.n	8010798 <__gethex+0xc2>
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	5cf8      	ldrb	r0, [r7, r3]
 8010732:	18fe      	adds	r6, r7, r3
 8010734:	f7ff ffba 	bl	80106ac <__hexdig_fun>
 8010738:	b380      	cbz	r0, 801079c <__gethex+0xc6>
 801073a:	4633      	mov	r3, r6
 801073c:	7818      	ldrb	r0, [r3, #0]
 801073e:	2830      	cmp	r0, #48	; 0x30
 8010740:	461f      	mov	r7, r3
 8010742:	f103 0301 	add.w	r3, r3, #1
 8010746:	d0f9      	beq.n	801073c <__gethex+0x66>
 8010748:	f7ff ffb0 	bl	80106ac <__hexdig_fun>
 801074c:	fab0 f580 	clz	r5, r0
 8010750:	096d      	lsrs	r5, r5, #5
 8010752:	4634      	mov	r4, r6
 8010754:	f04f 0b01 	mov.w	fp, #1
 8010758:	e001      	b.n	801075e <__gethex+0x88>
 801075a:	2500      	movs	r5, #0
 801075c:	462c      	mov	r4, r5
 801075e:	463a      	mov	r2, r7
 8010760:	4616      	mov	r6, r2
 8010762:	3201      	adds	r2, #1
 8010764:	7830      	ldrb	r0, [r6, #0]
 8010766:	f7ff ffa1 	bl	80106ac <__hexdig_fun>
 801076a:	2800      	cmp	r0, #0
 801076c:	d1f8      	bne.n	8010760 <__gethex+0x8a>
 801076e:	9a01      	ldr	r2, [sp, #4]
 8010770:	9903      	ldr	r1, [sp, #12]
 8010772:	4630      	mov	r0, r6
 8010774:	f7fb fca8 	bl	800c0c8 <strncmp>
 8010778:	b950      	cbnz	r0, 8010790 <__gethex+0xba>
 801077a:	b954      	cbnz	r4, 8010792 <__gethex+0xbc>
 801077c:	9b01      	ldr	r3, [sp, #4]
 801077e:	18f4      	adds	r4, r6, r3
 8010780:	4622      	mov	r2, r4
 8010782:	4616      	mov	r6, r2
 8010784:	3201      	adds	r2, #1
 8010786:	7830      	ldrb	r0, [r6, #0]
 8010788:	f7ff ff90 	bl	80106ac <__hexdig_fun>
 801078c:	2800      	cmp	r0, #0
 801078e:	d1f8      	bne.n	8010782 <__gethex+0xac>
 8010790:	b134      	cbz	r4, 80107a0 <__gethex+0xca>
 8010792:	1ba4      	subs	r4, r4, r6
 8010794:	00a4      	lsls	r4, r4, #2
 8010796:	e003      	b.n	80107a0 <__gethex+0xca>
 8010798:	463e      	mov	r6, r7
 801079a:	e000      	b.n	801079e <__gethex+0xc8>
 801079c:	4604      	mov	r4, r0
 801079e:	2501      	movs	r5, #1
 80107a0:	7833      	ldrb	r3, [r6, #0]
 80107a2:	2b50      	cmp	r3, #80	; 0x50
 80107a4:	d001      	beq.n	80107aa <__gethex+0xd4>
 80107a6:	2b70      	cmp	r3, #112	; 0x70
 80107a8:	d12a      	bne.n	8010800 <__gethex+0x12a>
 80107aa:	7873      	ldrb	r3, [r6, #1]
 80107ac:	2b2b      	cmp	r3, #43	; 0x2b
 80107ae:	d008      	beq.n	80107c2 <__gethex+0xec>
 80107b0:	2b2d      	cmp	r3, #45	; 0x2d
 80107b2:	d003      	beq.n	80107bc <__gethex+0xe6>
 80107b4:	1c71      	adds	r1, r6, #1
 80107b6:	f04f 0900 	mov.w	r9, #0
 80107ba:	e005      	b.n	80107c8 <__gethex+0xf2>
 80107bc:	f04f 0901 	mov.w	r9, #1
 80107c0:	e001      	b.n	80107c6 <__gethex+0xf0>
 80107c2:	f04f 0900 	mov.w	r9, #0
 80107c6:	1cb1      	adds	r1, r6, #2
 80107c8:	7808      	ldrb	r0, [r1, #0]
 80107ca:	f7ff ff6f 	bl	80106ac <__hexdig_fun>
 80107ce:	1e43      	subs	r3, r0, #1
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b18      	cmp	r3, #24
 80107d4:	d814      	bhi.n	8010800 <__gethex+0x12a>
 80107d6:	f1a0 0210 	sub.w	r2, r0, #16
 80107da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80107de:	f7ff ff65 	bl	80106ac <__hexdig_fun>
 80107e2:	1e43      	subs	r3, r0, #1
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b18      	cmp	r3, #24
 80107e8:	d804      	bhi.n	80107f4 <__gethex+0x11e>
 80107ea:	230a      	movs	r3, #10
 80107ec:	fb03 0202 	mla	r2, r3, r2, r0
 80107f0:	3a10      	subs	r2, #16
 80107f2:	e7f2      	b.n	80107da <__gethex+0x104>
 80107f4:	f1b9 0f00 	cmp.w	r9, #0
 80107f8:	d000      	beq.n	80107fc <__gethex+0x126>
 80107fa:	4252      	negs	r2, r2
 80107fc:	4414      	add	r4, r2
 80107fe:	e000      	b.n	8010802 <__gethex+0x12c>
 8010800:	4631      	mov	r1, r6
 8010802:	f8ca 1000 	str.w	r1, [sl]
 8010806:	b12d      	cbz	r5, 8010814 <__gethex+0x13e>
 8010808:	f1bb 0f00 	cmp.w	fp, #0
 801080c:	bf14      	ite	ne
 801080e:	2000      	movne	r0, #0
 8010810:	2006      	moveq	r0, #6
 8010812:	e17c      	b.n	8010b0e <__gethex+0x438>
 8010814:	1bf3      	subs	r3, r6, r7
 8010816:	3b01      	subs	r3, #1
 8010818:	4629      	mov	r1, r5
 801081a:	2b07      	cmp	r3, #7
 801081c:	dd02      	ble.n	8010824 <__gethex+0x14e>
 801081e:	3101      	adds	r1, #1
 8010820:	105b      	asrs	r3, r3, #1
 8010822:	e7fa      	b.n	801081a <__gethex+0x144>
 8010824:	9802      	ldr	r0, [sp, #8]
 8010826:	f000 faba 	bl	8010d9e <_Balloc>
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	f100 0a14 	add.w	sl, r0, #20
 8010830:	f04f 0900 	mov.w	r9, #0
 8010834:	f1c3 0301 	rsb	r3, r3, #1
 8010838:	4605      	mov	r5, r0
 801083a:	f8cd a010 	str.w	sl, [sp, #16]
 801083e:	46cb      	mov	fp, r9
 8010840:	9308      	str	r3, [sp, #32]
 8010842:	42b7      	cmp	r7, r6
 8010844:	d22f      	bcs.n	80108a6 <__gethex+0x1d0>
 8010846:	1e73      	subs	r3, r6, #1
 8010848:	9305      	str	r3, [sp, #20]
 801084a:	9a07      	ldr	r2, [sp, #28]
 801084c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010850:	4293      	cmp	r3, r2
 8010852:	d00b      	beq.n	801086c <__gethex+0x196>
 8010854:	f1bb 0f20 	cmp.w	fp, #32
 8010858:	d116      	bne.n	8010888 <__gethex+0x1b2>
 801085a:	9b04      	ldr	r3, [sp, #16]
 801085c:	f8c3 9000 	str.w	r9, [r3]
 8010860:	3304      	adds	r3, #4
 8010862:	f04f 0900 	mov.w	r9, #0
 8010866:	9304      	str	r3, [sp, #16]
 8010868:	46cb      	mov	fp, r9
 801086a:	e00d      	b.n	8010888 <__gethex+0x1b2>
 801086c:	9b05      	ldr	r3, [sp, #20]
 801086e:	9a08      	ldr	r2, [sp, #32]
 8010870:	4413      	add	r3, r2
 8010872:	429f      	cmp	r7, r3
 8010874:	d8ee      	bhi.n	8010854 <__gethex+0x17e>
 8010876:	4618      	mov	r0, r3
 8010878:	9a01      	ldr	r2, [sp, #4]
 801087a:	9903      	ldr	r1, [sp, #12]
 801087c:	9309      	str	r3, [sp, #36]	; 0x24
 801087e:	f7fb fc23 	bl	800c0c8 <strncmp>
 8010882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010884:	b168      	cbz	r0, 80108a2 <__gethex+0x1cc>
 8010886:	e7e5      	b.n	8010854 <__gethex+0x17e>
 8010888:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801088c:	f7ff ff0e 	bl	80106ac <__hexdig_fun>
 8010890:	f000 000f 	and.w	r0, r0, #15
 8010894:	fa00 f00b 	lsl.w	r0, r0, fp
 8010898:	9b05      	ldr	r3, [sp, #20]
 801089a:	ea49 0900 	orr.w	r9, r9, r0
 801089e:	f10b 0b04 	add.w	fp, fp, #4
 80108a2:	461e      	mov	r6, r3
 80108a4:	e7cd      	b.n	8010842 <__gethex+0x16c>
 80108a6:	9804      	ldr	r0, [sp, #16]
 80108a8:	f840 9b04 	str.w	r9, [r0], #4
 80108ac:	ebca 0000 	rsb	r0, sl, r0
 80108b0:	1080      	asrs	r0, r0, #2
 80108b2:	6128      	str	r0, [r5, #16]
 80108b4:	0147      	lsls	r7, r0, #5
 80108b6:	4648      	mov	r0, r9
 80108b8:	f000 fb36 	bl	8010f28 <__hi0bits>
 80108bc:	f8d8 6000 	ldr.w	r6, [r8]
 80108c0:	1a38      	subs	r0, r7, r0
 80108c2:	42b0      	cmp	r0, r6
 80108c4:	dd26      	ble.n	8010914 <__gethex+0x23e>
 80108c6:	1b87      	subs	r7, r0, r6
 80108c8:	4639      	mov	r1, r7
 80108ca:	4628      	mov	r0, r5
 80108cc:	f000 fe35 	bl	801153a <__any_on>
 80108d0:	b1c8      	cbz	r0, 8010906 <__gethex+0x230>
 80108d2:	1e7b      	subs	r3, r7, #1
 80108d4:	1159      	asrs	r1, r3, #5
 80108d6:	f003 021f 	and.w	r2, r3, #31
 80108da:	f04f 0901 	mov.w	r9, #1
 80108de:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80108e2:	fa09 f202 	lsl.w	r2, r9, r2
 80108e6:	420a      	tst	r2, r1
 80108e8:	d00e      	beq.n	8010908 <__gethex+0x232>
 80108ea:	454b      	cmp	r3, r9
 80108ec:	dc02      	bgt.n	80108f4 <__gethex+0x21e>
 80108ee:	f04f 0902 	mov.w	r9, #2
 80108f2:	e009      	b.n	8010908 <__gethex+0x232>
 80108f4:	1eb9      	subs	r1, r7, #2
 80108f6:	4628      	mov	r0, r5
 80108f8:	f000 fe1f 	bl	801153a <__any_on>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d0f6      	beq.n	80108ee <__gethex+0x218>
 8010900:	f04f 0903 	mov.w	r9, #3
 8010904:	e000      	b.n	8010908 <__gethex+0x232>
 8010906:	4681      	mov	r9, r0
 8010908:	4639      	mov	r1, r7
 801090a:	4628      	mov	r0, r5
 801090c:	f7ff fe98 	bl	8010640 <rshift>
 8010910:	443c      	add	r4, r7
 8010912:	e00c      	b.n	801092e <__gethex+0x258>
 8010914:	da09      	bge.n	801092a <__gethex+0x254>
 8010916:	1a37      	subs	r7, r6, r0
 8010918:	4629      	mov	r1, r5
 801091a:	463a      	mov	r2, r7
 801091c:	9802      	ldr	r0, [sp, #8]
 801091e:	f000 fc39 	bl	8011194 <__lshift>
 8010922:	1be4      	subs	r4, r4, r7
 8010924:	4605      	mov	r5, r0
 8010926:	f100 0a14 	add.w	sl, r0, #20
 801092a:	f04f 0900 	mov.w	r9, #0
 801092e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010932:	429c      	cmp	r4, r3
 8010934:	dd08      	ble.n	8010948 <__gethex+0x272>
 8010936:	9802      	ldr	r0, [sp, #8]
 8010938:	4629      	mov	r1, r5
 801093a:	f000 fa65 	bl	8010e08 <_Bfree>
 801093e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010940:	2300      	movs	r3, #0
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	20a3      	movs	r0, #163	; 0xa3
 8010946:	e0e2      	b.n	8010b0e <__gethex+0x438>
 8010948:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801094c:	4284      	cmp	r4, r0
 801094e:	da53      	bge.n	80109f8 <__gethex+0x322>
 8010950:	1b04      	subs	r4, r0, r4
 8010952:	42a6      	cmp	r6, r4
 8010954:	dc2e      	bgt.n	80109b4 <__gethex+0x2de>
 8010956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801095a:	2b02      	cmp	r3, #2
 801095c:	d01a      	beq.n	8010994 <__gethex+0x2be>
 801095e:	2b03      	cmp	r3, #3
 8010960:	d01c      	beq.n	801099c <__gethex+0x2c6>
 8010962:	2b01      	cmp	r3, #1
 8010964:	d11d      	bne.n	80109a2 <__gethex+0x2cc>
 8010966:	42a6      	cmp	r6, r4
 8010968:	d11b      	bne.n	80109a2 <__gethex+0x2cc>
 801096a:	2e01      	cmp	r6, #1
 801096c:	dc0b      	bgt.n	8010986 <__gethex+0x2b0>
 801096e:	9a06      	ldr	r2, [sp, #24]
 8010970:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010974:	6013      	str	r3, [r2, #0]
 8010976:	2301      	movs	r3, #1
 8010978:	612b      	str	r3, [r5, #16]
 801097a:	f8ca 3000 	str.w	r3, [sl]
 801097e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010980:	2062      	movs	r0, #98	; 0x62
 8010982:	601d      	str	r5, [r3, #0]
 8010984:	e0c3      	b.n	8010b0e <__gethex+0x438>
 8010986:	1e71      	subs	r1, r6, #1
 8010988:	4628      	mov	r0, r5
 801098a:	f000 fdd6 	bl	801153a <__any_on>
 801098e:	2800      	cmp	r0, #0
 8010990:	d1ed      	bne.n	801096e <__gethex+0x298>
 8010992:	e006      	b.n	80109a2 <__gethex+0x2cc>
 8010994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0e9      	beq.n	801096e <__gethex+0x298>
 801099a:	e002      	b.n	80109a2 <__gethex+0x2cc>
 801099c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1e5      	bne.n	801096e <__gethex+0x298>
 80109a2:	9802      	ldr	r0, [sp, #8]
 80109a4:	4629      	mov	r1, r5
 80109a6:	f000 fa2f 	bl	8010e08 <_Bfree>
 80109aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80109ac:	2300      	movs	r3, #0
 80109ae:	6013      	str	r3, [r2, #0]
 80109b0:	2050      	movs	r0, #80	; 0x50
 80109b2:	e0ac      	b.n	8010b0e <__gethex+0x438>
 80109b4:	1e67      	subs	r7, r4, #1
 80109b6:	f1b9 0f00 	cmp.w	r9, #0
 80109ba:	d106      	bne.n	80109ca <__gethex+0x2f4>
 80109bc:	b13f      	cbz	r7, 80109ce <__gethex+0x2f8>
 80109be:	4639      	mov	r1, r7
 80109c0:	4628      	mov	r0, r5
 80109c2:	f000 fdba 	bl	801153a <__any_on>
 80109c6:	4681      	mov	r9, r0
 80109c8:	e001      	b.n	80109ce <__gethex+0x2f8>
 80109ca:	f04f 0901 	mov.w	r9, #1
 80109ce:	117a      	asrs	r2, r7, #5
 80109d0:	2301      	movs	r3, #1
 80109d2:	f007 071f 	and.w	r7, r7, #31
 80109d6:	fa03 f707 	lsl.w	r7, r3, r7
 80109da:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80109de:	4621      	mov	r1, r4
 80109e0:	421f      	tst	r7, r3
 80109e2:	4628      	mov	r0, r5
 80109e4:	bf18      	it	ne
 80109e6:	f049 0902 	orrne.w	r9, r9, #2
 80109ea:	1b36      	subs	r6, r6, r4
 80109ec:	f7ff fe28 	bl	8010640 <rshift>
 80109f0:	2702      	movs	r7, #2
 80109f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80109f6:	e000      	b.n	80109fa <__gethex+0x324>
 80109f8:	2701      	movs	r7, #1
 80109fa:	f1b9 0f00 	cmp.w	r9, #0
 80109fe:	f000 8081 	beq.w	8010b04 <__gethex+0x42e>
 8010a02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d00e      	beq.n	8010a28 <__gethex+0x352>
 8010a0a:	2b03      	cmp	r3, #3
 8010a0c:	d010      	beq.n	8010a30 <__gethex+0x35a>
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d176      	bne.n	8010b00 <__gethex+0x42a>
 8010a12:	f019 0f02 	tst.w	r9, #2
 8010a16:	d073      	beq.n	8010b00 <__gethex+0x42a>
 8010a18:	f8da 0000 	ldr.w	r0, [sl]
 8010a1c:	ea49 0900 	orr.w	r9, r9, r0
 8010a20:	f019 0f01 	tst.w	r9, #1
 8010a24:	d107      	bne.n	8010a36 <__gethex+0x360>
 8010a26:	e06b      	b.n	8010b00 <__gethex+0x42a>
 8010a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a2a:	f1c3 0301 	rsb	r3, r3, #1
 8010a2e:	9315      	str	r3, [sp, #84]	; 0x54
 8010a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d064      	beq.n	8010b00 <__gethex+0x42a>
 8010a36:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010a3a:	f105 0314 	add.w	r3, r5, #20
 8010a3e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8010a42:	eb03 0109 	add.w	r1, r3, r9
 8010a46:	2000      	movs	r0, #0
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a4e:	d002      	beq.n	8010a56 <__gethex+0x380>
 8010a50:	3201      	adds	r2, #1
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	e020      	b.n	8010a98 <__gethex+0x3c2>
 8010a56:	f843 0b04 	str.w	r0, [r3], #4
 8010a5a:	4299      	cmp	r1, r3
 8010a5c:	d8f4      	bhi.n	8010a48 <__gethex+0x372>
 8010a5e:	68ab      	ldr	r3, [r5, #8]
 8010a60:	459a      	cmp	sl, r3
 8010a62:	db12      	blt.n	8010a8a <__gethex+0x3b4>
 8010a64:	6869      	ldr	r1, [r5, #4]
 8010a66:	9802      	ldr	r0, [sp, #8]
 8010a68:	3101      	adds	r1, #1
 8010a6a:	f000 f998 	bl	8010d9e <_Balloc>
 8010a6e:	692a      	ldr	r2, [r5, #16]
 8010a70:	3202      	adds	r2, #2
 8010a72:	f105 010c 	add.w	r1, r5, #12
 8010a76:	4683      	mov	fp, r0
 8010a78:	0092      	lsls	r2, r2, #2
 8010a7a:	300c      	adds	r0, #12
 8010a7c:	f7fb fa04 	bl	800be88 <memcpy>
 8010a80:	4629      	mov	r1, r5
 8010a82:	9802      	ldr	r0, [sp, #8]
 8010a84:	f000 f9c0 	bl	8010e08 <_Bfree>
 8010a88:	465d      	mov	r5, fp
 8010a8a:	692b      	ldr	r3, [r5, #16]
 8010a8c:	1c5a      	adds	r2, r3, #1
 8010a8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010a92:	612a      	str	r2, [r5, #16]
 8010a94:	2201      	movs	r2, #1
 8010a96:	615a      	str	r2, [r3, #20]
 8010a98:	2f02      	cmp	r7, #2
 8010a9a:	f105 0214 	add.w	r2, r5, #20
 8010a9e:	d111      	bne.n	8010ac4 <__gethex+0x3ee>
 8010aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	429e      	cmp	r6, r3
 8010aa8:	d127      	bne.n	8010afa <__gethex+0x424>
 8010aaa:	1171      	asrs	r1, r6, #5
 8010aac:	2301      	movs	r3, #1
 8010aae:	f006 061f 	and.w	r6, r6, #31
 8010ab2:	fa03 f606 	lsl.w	r6, r3, r6
 8010ab6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aba:	421e      	tst	r6, r3
 8010abc:	bf0c      	ite	eq
 8010abe:	2702      	moveq	r7, #2
 8010ac0:	2701      	movne	r7, #1
 8010ac2:	e01a      	b.n	8010afa <__gethex+0x424>
 8010ac4:	692b      	ldr	r3, [r5, #16]
 8010ac6:	459a      	cmp	sl, r3
 8010ac8:	da0a      	bge.n	8010ae0 <__gethex+0x40a>
 8010aca:	2101      	movs	r1, #1
 8010acc:	4628      	mov	r0, r5
 8010ace:	f7ff fdb7 	bl	8010640 <rshift>
 8010ad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ad6:	3401      	adds	r4, #1
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	f73f af2c 	bgt.w	8010936 <__gethex+0x260>
 8010ade:	e00b      	b.n	8010af8 <__gethex+0x422>
 8010ae0:	f016 061f 	ands.w	r6, r6, #31
 8010ae4:	d008      	beq.n	8010af8 <__gethex+0x422>
 8010ae6:	4491      	add	r9, r2
 8010ae8:	f1c6 0620 	rsb	r6, r6, #32
 8010aec:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8010af0:	f000 fa1a 	bl	8010f28 <__hi0bits>
 8010af4:	42b0      	cmp	r0, r6
 8010af6:	dbe8      	blt.n	8010aca <__gethex+0x3f4>
 8010af8:	2701      	movs	r7, #1
 8010afa:	f047 0720 	orr.w	r7, r7, #32
 8010afe:	e001      	b.n	8010b04 <__gethex+0x42e>
 8010b00:	f047 0710 	orr.w	r7, r7, #16
 8010b04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b06:	601d      	str	r5, [r3, #0]
 8010b08:	9b06      	ldr	r3, [sp, #24]
 8010b0a:	4638      	mov	r0, r7
 8010b0c:	601c      	str	r4, [r3, #0]
 8010b0e:	b00b      	add	sp, #44	; 0x2c
 8010b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b14 <L_shift>:
 8010b14:	f1c2 0208 	rsb	r2, r2, #8
 8010b18:	0092      	lsls	r2, r2, #2
 8010b1a:	b570      	push	{r4, r5, r6, lr}
 8010b1c:	f1c2 0620 	rsb	r6, r2, #32
 8010b20:	6843      	ldr	r3, [r0, #4]
 8010b22:	6805      	ldr	r5, [r0, #0]
 8010b24:	fa03 f406 	lsl.w	r4, r3, r6
 8010b28:	432c      	orrs	r4, r5
 8010b2a:	40d3      	lsrs	r3, r2
 8010b2c:	6004      	str	r4, [r0, #0]
 8010b2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b32:	4288      	cmp	r0, r1
 8010b34:	d3f4      	bcc.n	8010b20 <L_shift+0xc>
 8010b36:	bd70      	pop	{r4, r5, r6, pc}

08010b38 <__match>:
 8010b38:	b530      	push	{r4, r5, lr}
 8010b3a:	6803      	ldr	r3, [r0, #0]
 8010b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b40:	3301      	adds	r3, #1
 8010b42:	b14c      	cbz	r4, 8010b58 <__match+0x20>
 8010b44:	781a      	ldrb	r2, [r3, #0]
 8010b46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010b4a:	2d19      	cmp	r5, #25
 8010b4c:	bf98      	it	ls
 8010b4e:	3220      	addls	r2, #32
 8010b50:	42a2      	cmp	r2, r4
 8010b52:	d0f3      	beq.n	8010b3c <__match+0x4>
 8010b54:	2000      	movs	r0, #0
 8010b56:	bd30      	pop	{r4, r5, pc}
 8010b58:	6003      	str	r3, [r0, #0]
 8010b5a:	2001      	movs	r0, #1
 8010b5c:	bd30      	pop	{r4, r5, pc}

08010b5e <__hexnan>:
 8010b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b62:	680b      	ldr	r3, [r1, #0]
 8010b64:	f8d0 b000 	ldr.w	fp, [r0]
 8010b68:	115e      	asrs	r6, r3, #5
 8010b6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b6e:	f013 031f 	ands.w	r3, r3, #31
 8010b72:	b085      	sub	sp, #20
 8010b74:	bf18      	it	ne
 8010b76:	3604      	addne	r6, #4
 8010b78:	1f35      	subs	r5, r6, #4
 8010b7a:	4617      	mov	r7, r2
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	4682      	mov	sl, r0
 8010b80:	9301      	str	r3, [sp, #4]
 8010b82:	f846 2c04 	str.w	r2, [r6, #-4]
 8010b86:	46a8      	mov	r8, r5
 8010b88:	462c      	mov	r4, r5
 8010b8a:	9200      	str	r2, [sp, #0]
 8010b8c:	4691      	mov	r9, r2
 8010b8e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8010b92:	2900      	cmp	r1, #0
 8010b94:	d03c      	beq.n	8010c10 <__hexnan+0xb2>
 8010b96:	4608      	mov	r0, r1
 8010b98:	9203      	str	r2, [sp, #12]
 8010b9a:	9102      	str	r1, [sp, #8]
 8010b9c:	f7ff fd86 	bl	80106ac <__hexdig_fun>
 8010ba0:	9a03      	ldr	r2, [sp, #12]
 8010ba2:	bb00      	cbnz	r0, 8010be6 <__hexnan+0x88>
 8010ba4:	9902      	ldr	r1, [sp, #8]
 8010ba6:	2920      	cmp	r1, #32
 8010ba8:	d816      	bhi.n	8010bd8 <__hexnan+0x7a>
 8010baa:	9b00      	ldr	r3, [sp, #0]
 8010bac:	4599      	cmp	r9, r3
 8010bae:	ddee      	ble.n	8010b8e <__hexnan+0x30>
 8010bb0:	4544      	cmp	r4, r8
 8010bb2:	d205      	bcs.n	8010bc0 <__hexnan+0x62>
 8010bb4:	2a07      	cmp	r2, #7
 8010bb6:	dc03      	bgt.n	8010bc0 <__hexnan+0x62>
 8010bb8:	4641      	mov	r1, r8
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f7ff ffaa 	bl	8010b14 <L_shift>
 8010bc0:	42bc      	cmp	r4, r7
 8010bc2:	d923      	bls.n	8010c0c <__hexnan+0xae>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	f1a4 0804 	sub.w	r8, r4, #4
 8010bca:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bce:	f8cd 9000 	str.w	r9, [sp]
 8010bd2:	4644      	mov	r4, r8
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	e7da      	b.n	8010b8e <__hexnan+0x30>
 8010bd8:	2929      	cmp	r1, #41	; 0x29
 8010bda:	d148      	bne.n	8010c6e <__hexnan+0x110>
 8010bdc:	f10b 0301 	add.w	r3, fp, #1
 8010be0:	f8ca 3000 	str.w	r3, [sl]
 8010be4:	e014      	b.n	8010c10 <__hexnan+0xb2>
 8010be6:	3201      	adds	r2, #1
 8010be8:	2a08      	cmp	r2, #8
 8010bea:	f109 0901 	add.w	r9, r9, #1
 8010bee:	dd06      	ble.n	8010bfe <__hexnan+0xa0>
 8010bf0:	42bc      	cmp	r4, r7
 8010bf2:	d9cc      	bls.n	8010b8e <__hexnan+0x30>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	3c04      	subs	r4, #4
 8010bfe:	6821      	ldr	r1, [r4, #0]
 8010c00:	f000 000f 	and.w	r0, r0, #15
 8010c04:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8010c08:	6020      	str	r0, [r4, #0]
 8010c0a:	e7c0      	b.n	8010b8e <__hexnan+0x30>
 8010c0c:	2208      	movs	r2, #8
 8010c0e:	e7be      	b.n	8010b8e <__hexnan+0x30>
 8010c10:	f1b9 0f00 	cmp.w	r9, #0
 8010c14:	d02b      	beq.n	8010c6e <__hexnan+0x110>
 8010c16:	4544      	cmp	r4, r8
 8010c18:	d205      	bcs.n	8010c26 <__hexnan+0xc8>
 8010c1a:	2a07      	cmp	r2, #7
 8010c1c:	dc03      	bgt.n	8010c26 <__hexnan+0xc8>
 8010c1e:	4641      	mov	r1, r8
 8010c20:	4620      	mov	r0, r4
 8010c22:	f7ff ff77 	bl	8010b14 <L_shift>
 8010c26:	42bc      	cmp	r4, r7
 8010c28:	d90c      	bls.n	8010c44 <__hexnan+0xe6>
 8010c2a:	463b      	mov	r3, r7
 8010c2c:	f854 2b04 	ldr.w	r2, [r4], #4
 8010c30:	f843 2b04 	str.w	r2, [r3], #4
 8010c34:	42a5      	cmp	r5, r4
 8010c36:	d2f9      	bcs.n	8010c2c <__hexnan+0xce>
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f843 2b04 	str.w	r2, [r3], #4
 8010c3e:	429d      	cmp	r5, r3
 8010c40:	d2fb      	bcs.n	8010c3a <__hexnan+0xdc>
 8010c42:	e00b      	b.n	8010c5c <__hexnan+0xfe>
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	b14b      	cbz	r3, 8010c5c <__hexnan+0xfe>
 8010c48:	f1c3 0220 	rsb	r2, r3, #32
 8010c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c50:	40d3      	lsrs	r3, r2
 8010c52:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010c56:	4013      	ands	r3, r2
 8010c58:	f846 3c04 	str.w	r3, [r6, #-4]
 8010c5c:	682b      	ldr	r3, [r5, #0]
 8010c5e:	b943      	cbnz	r3, 8010c72 <__hexnan+0x114>
 8010c60:	42bd      	cmp	r5, r7
 8010c62:	d102      	bne.n	8010c6a <__hexnan+0x10c>
 8010c64:	2301      	movs	r3, #1
 8010c66:	602b      	str	r3, [r5, #0]
 8010c68:	e003      	b.n	8010c72 <__hexnan+0x114>
 8010c6a:	3d04      	subs	r5, #4
 8010c6c:	e7f6      	b.n	8010c5c <__hexnan+0xfe>
 8010c6e:	2004      	movs	r0, #4
 8010c70:	e000      	b.n	8010c74 <__hexnan+0x116>
 8010c72:	2005      	movs	r0, #5
 8010c74:	b005      	add	sp, #20
 8010c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010c7c <__locale_charset>:
 8010c7c:	4800      	ldr	r0, [pc, #0]	; (8010c80 <__locale_charset+0x4>)
 8010c7e:	4770      	bx	lr
 8010c80:	20010570 	.word	0x20010570

08010c84 <__locale_mb_cur_max>:
 8010c84:	4b01      	ldr	r3, [pc, #4]	; (8010c8c <__locale_mb_cur_max+0x8>)
 8010c86:	6818      	ldr	r0, [r3, #0]
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	20010590 	.word	0x20010590

08010c90 <_localeconv_r>:
 8010c90:	4800      	ldr	r0, [pc, #0]	; (8010c94 <_localeconv_r+0x4>)
 8010c92:	4770      	bx	lr
 8010c94:	20010538 	.word	0x20010538

08010c98 <__swhatbuf_r>:
 8010c98:	b570      	push	{r4, r5, r6, lr}
 8010c9a:	460e      	mov	r6, r1
 8010c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ca0:	2900      	cmp	r1, #0
 8010ca2:	b090      	sub	sp, #64	; 0x40
 8010ca4:	4614      	mov	r4, r2
 8010ca6:	461d      	mov	r5, r3
 8010ca8:	da0a      	bge.n	8010cc0 <__swhatbuf_r+0x28>
 8010caa:	89b3      	ldrh	r3, [r6, #12]
 8010cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	b298      	uxth	r0, r3
 8010cb4:	602a      	str	r2, [r5, #0]
 8010cb6:	b1b0      	cbz	r0, 8010ce6 <__swhatbuf_r+0x4e>
 8010cb8:	2340      	movs	r3, #64	; 0x40
 8010cba:	6023      	str	r3, [r4, #0]
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	e015      	b.n	8010cec <__swhatbuf_r+0x54>
 8010cc0:	aa01      	add	r2, sp, #4
 8010cc2:	f000 fff1 	bl	8011ca8 <_fstat_r>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	dbef      	blt.n	8010caa <__swhatbuf_r+0x12>
 8010cca:	9a02      	ldr	r2, [sp, #8]
 8010ccc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010cd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010cd4:	425a      	negs	r2, r3
 8010cd6:	415a      	adcs	r2, r3
 8010cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cdc:	602a      	str	r2, [r5, #0]
 8010cde:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010ce2:	6023      	str	r3, [r4, #0]
 8010ce4:	e002      	b.n	8010cec <__swhatbuf_r+0x54>
 8010ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cea:	6023      	str	r3, [r4, #0]
 8010cec:	b010      	add	sp, #64	; 0x40
 8010cee:	bd70      	pop	{r4, r5, r6, pc}

08010cf0 <__smakebuf_r>:
 8010cf0:	898b      	ldrh	r3, [r1, #12]
 8010cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010cf4:	079e      	lsls	r6, r3, #30
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	460c      	mov	r4, r1
 8010cfa:	d410      	bmi.n	8010d1e <__smakebuf_r+0x2e>
 8010cfc:	ab01      	add	r3, sp, #4
 8010cfe:	466a      	mov	r2, sp
 8010d00:	f7ff ffca 	bl	8010c98 <__swhatbuf_r>
 8010d04:	9900      	ldr	r1, [sp, #0]
 8010d06:	4606      	mov	r6, r0
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f7fa fe9d 	bl	800ba48 <_malloc_r>
 8010d0e:	b968      	cbnz	r0, 8010d2c <__smakebuf_r+0x3c>
 8010d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d14:	059a      	lsls	r2, r3, #22
 8010d16:	d422      	bmi.n	8010d5e <__smakebuf_r+0x6e>
 8010d18:	f043 0302 	orr.w	r3, r3, #2
 8010d1c:	81a3      	strh	r3, [r4, #12]
 8010d1e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d22:	6023      	str	r3, [r4, #0]
 8010d24:	6123      	str	r3, [r4, #16]
 8010d26:	2301      	movs	r3, #1
 8010d28:	6163      	str	r3, [r4, #20]
 8010d2a:	e018      	b.n	8010d5e <__smakebuf_r+0x6e>
 8010d2c:	4b0d      	ldr	r3, [pc, #52]	; (8010d64 <__smakebuf_r+0x74>)
 8010d2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	6020      	str	r0, [r4, #0]
 8010d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d38:	81a3      	strh	r3, [r4, #12]
 8010d3a:	9b00      	ldr	r3, [sp, #0]
 8010d3c:	6163      	str	r3, [r4, #20]
 8010d3e:	9b01      	ldr	r3, [sp, #4]
 8010d40:	6120      	str	r0, [r4, #16]
 8010d42:	b14b      	cbz	r3, 8010d58 <__smakebuf_r+0x68>
 8010d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f000 ffbf 	bl	8011ccc <_isatty_r>
 8010d4e:	b118      	cbz	r0, 8010d58 <__smakebuf_r+0x68>
 8010d50:	89a3      	ldrh	r3, [r4, #12]
 8010d52:	f043 0301 	orr.w	r3, r3, #1
 8010d56:	81a3      	strh	r3, [r4, #12]
 8010d58:	89a0      	ldrh	r0, [r4, #12]
 8010d5a:	4330      	orrs	r0, r6
 8010d5c:	81a0      	strh	r0, [r4, #12]
 8010d5e:	b002      	add	sp, #8
 8010d60:	bd70      	pop	{r4, r5, r6, pc}
 8010d62:	bf00      	nop
 8010d64:	0800ffe5 	.word	0x0800ffe5

08010d68 <memmove>:
 8010d68:	4288      	cmp	r0, r1
 8010d6a:	b510      	push	{r4, lr}
 8010d6c:	eb01 0302 	add.w	r3, r1, r2
 8010d70:	d801      	bhi.n	8010d76 <memmove+0xe>
 8010d72:	1e42      	subs	r2, r0, #1
 8010d74:	e00b      	b.n	8010d8e <memmove+0x26>
 8010d76:	4298      	cmp	r0, r3
 8010d78:	d2fb      	bcs.n	8010d72 <memmove+0xa>
 8010d7a:	1881      	adds	r1, r0, r2
 8010d7c:	1ad2      	subs	r2, r2, r3
 8010d7e:	42d3      	cmn	r3, r2
 8010d80:	d004      	beq.n	8010d8c <memmove+0x24>
 8010d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010d8a:	e7f8      	b.n	8010d7e <memmove+0x16>
 8010d8c:	bd10      	pop	{r4, pc}
 8010d8e:	4299      	cmp	r1, r3
 8010d90:	d004      	beq.n	8010d9c <memmove+0x34>
 8010d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010d9a:	e7f8      	b.n	8010d8e <memmove+0x26>
 8010d9c:	bd10      	pop	{r4, pc}

08010d9e <_Balloc>:
 8010d9e:	b570      	push	{r4, r5, r6, lr}
 8010da0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010da2:	4604      	mov	r4, r0
 8010da4:	460e      	mov	r6, r1
 8010da6:	b93d      	cbnz	r5, 8010db8 <_Balloc+0x1a>
 8010da8:	2010      	movs	r0, #16
 8010daa:	f7fa fe3d 	bl	800ba28 <malloc>
 8010dae:	6260      	str	r0, [r4, #36]	; 0x24
 8010db0:	6045      	str	r5, [r0, #4]
 8010db2:	6085      	str	r5, [r0, #8]
 8010db4:	6005      	str	r5, [r0, #0]
 8010db6:	60c5      	str	r5, [r0, #12]
 8010db8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010dba:	68eb      	ldr	r3, [r5, #12]
 8010dbc:	b143      	cbz	r3, 8010dd0 <_Balloc+0x32>
 8010dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010dc6:	b178      	cbz	r0, 8010de8 <_Balloc+0x4a>
 8010dc8:	6802      	ldr	r2, [r0, #0]
 8010dca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010dce:	e017      	b.n	8010e00 <_Balloc+0x62>
 8010dd0:	2221      	movs	r2, #33	; 0x21
 8010dd2:	2104      	movs	r1, #4
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f000 fe87 	bl	8011ae8 <_calloc_r>
 8010dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ddc:	60e8      	str	r0, [r5, #12]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1ec      	bne.n	8010dbe <_Balloc+0x20>
 8010de4:	2000      	movs	r0, #0
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	2101      	movs	r1, #1
 8010dea:	fa01 f506 	lsl.w	r5, r1, r6
 8010dee:	1d6a      	adds	r2, r5, #5
 8010df0:	0092      	lsls	r2, r2, #2
 8010df2:	4620      	mov	r0, r4
 8010df4:	f000 fe78 	bl	8011ae8 <_calloc_r>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d0f3      	beq.n	8010de4 <_Balloc+0x46>
 8010dfc:	6046      	str	r6, [r0, #4]
 8010dfe:	6085      	str	r5, [r0, #8]
 8010e00:	2300      	movs	r3, #0
 8010e02:	6103      	str	r3, [r0, #16]
 8010e04:	60c3      	str	r3, [r0, #12]
 8010e06:	bd70      	pop	{r4, r5, r6, pc}

08010e08 <_Bfree>:
 8010e08:	b570      	push	{r4, r5, r6, lr}
 8010e0a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010e0c:	4606      	mov	r6, r0
 8010e0e:	460d      	mov	r5, r1
 8010e10:	b93c      	cbnz	r4, 8010e22 <_Bfree+0x1a>
 8010e12:	2010      	movs	r0, #16
 8010e14:	f7fa fe08 	bl	800ba28 <malloc>
 8010e18:	6270      	str	r0, [r6, #36]	; 0x24
 8010e1a:	6044      	str	r4, [r0, #4]
 8010e1c:	6084      	str	r4, [r0, #8]
 8010e1e:	6004      	str	r4, [r0, #0]
 8010e20:	60c4      	str	r4, [r0, #12]
 8010e22:	b13d      	cbz	r5, 8010e34 <_Bfree+0x2c>
 8010e24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010e26:	686a      	ldr	r2, [r5, #4]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e2e:	6029      	str	r1, [r5, #0]
 8010e30:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010e34:	bd70      	pop	{r4, r5, r6, pc}

08010e36 <__multadd>:
 8010e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3a:	690d      	ldr	r5, [r1, #16]
 8010e3c:	461f      	mov	r7, r3
 8010e3e:	4606      	mov	r6, r0
 8010e40:	460c      	mov	r4, r1
 8010e42:	f101 0e14 	add.w	lr, r1, #20
 8010e46:	2300      	movs	r3, #0
 8010e48:	f8de 0000 	ldr.w	r0, [lr]
 8010e4c:	b281      	uxth	r1, r0
 8010e4e:	fb02 7101 	mla	r1, r2, r1, r7
 8010e52:	0c0f      	lsrs	r7, r1, #16
 8010e54:	0c00      	lsrs	r0, r0, #16
 8010e56:	fb02 7000 	mla	r0, r2, r0, r7
 8010e5a:	b289      	uxth	r1, r1
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010e62:	429d      	cmp	r5, r3
 8010e64:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010e68:	f84e 1b04 	str.w	r1, [lr], #4
 8010e6c:	dcec      	bgt.n	8010e48 <__multadd+0x12>
 8010e6e:	b1d7      	cbz	r7, 8010ea6 <__multadd+0x70>
 8010e70:	68a3      	ldr	r3, [r4, #8]
 8010e72:	429d      	cmp	r5, r3
 8010e74:	db12      	blt.n	8010e9c <__multadd+0x66>
 8010e76:	6861      	ldr	r1, [r4, #4]
 8010e78:	4630      	mov	r0, r6
 8010e7a:	3101      	adds	r1, #1
 8010e7c:	f7ff ff8f 	bl	8010d9e <_Balloc>
 8010e80:	6922      	ldr	r2, [r4, #16]
 8010e82:	3202      	adds	r2, #2
 8010e84:	f104 010c 	add.w	r1, r4, #12
 8010e88:	4680      	mov	r8, r0
 8010e8a:	0092      	lsls	r2, r2, #2
 8010e8c:	300c      	adds	r0, #12
 8010e8e:	f7fa fffb 	bl	800be88 <memcpy>
 8010e92:	4621      	mov	r1, r4
 8010e94:	4630      	mov	r0, r6
 8010e96:	f7ff ffb7 	bl	8010e08 <_Bfree>
 8010e9a:	4644      	mov	r4, r8
 8010e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ea0:	3501      	adds	r5, #1
 8010ea2:	615f      	str	r7, [r3, #20]
 8010ea4:	6125      	str	r5, [r4, #16]
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010eac <__s2b>:
 8010eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	4615      	mov	r5, r2
 8010eb4:	461f      	mov	r7, r3
 8010eb6:	2209      	movs	r2, #9
 8010eb8:	3308      	adds	r3, #8
 8010eba:	4606      	mov	r6, r0
 8010ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	da02      	bge.n	8010ece <__s2b+0x22>
 8010ec8:	0052      	lsls	r2, r2, #1
 8010eca:	3101      	adds	r1, #1
 8010ecc:	e7fa      	b.n	8010ec4 <__s2b+0x18>
 8010ece:	4630      	mov	r0, r6
 8010ed0:	f7ff ff65 	bl	8010d9e <_Balloc>
 8010ed4:	9b08      	ldr	r3, [sp, #32]
 8010ed6:	6143      	str	r3, [r0, #20]
 8010ed8:	2d09      	cmp	r5, #9
 8010eda:	f04f 0301 	mov.w	r3, #1
 8010ede:	6103      	str	r3, [r0, #16]
 8010ee0:	dd11      	ble.n	8010f06 <__s2b+0x5a>
 8010ee2:	f104 0809 	add.w	r8, r4, #9
 8010ee6:	46c1      	mov	r9, r8
 8010ee8:	442c      	add	r4, r5
 8010eea:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010eee:	4601      	mov	r1, r0
 8010ef0:	3b30      	subs	r3, #48	; 0x30
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	f7ff ff9e 	bl	8010e36 <__multadd>
 8010efa:	45a1      	cmp	r9, r4
 8010efc:	d1f5      	bne.n	8010eea <__s2b+0x3e>
 8010efe:	eb08 0405 	add.w	r4, r8, r5
 8010f02:	3c08      	subs	r4, #8
 8010f04:	e001      	b.n	8010f0a <__s2b+0x5e>
 8010f06:	340a      	adds	r4, #10
 8010f08:	2509      	movs	r5, #9
 8010f0a:	1b2d      	subs	r5, r5, r4
 8010f0c:	1963      	adds	r3, r4, r5
 8010f0e:	429f      	cmp	r7, r3
 8010f10:	dd08      	ble.n	8010f24 <__s2b+0x78>
 8010f12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f16:	4601      	mov	r1, r0
 8010f18:	3b30      	subs	r3, #48	; 0x30
 8010f1a:	220a      	movs	r2, #10
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7ff ff8a 	bl	8010e36 <__multadd>
 8010f22:	e7f3      	b.n	8010f0c <__s2b+0x60>
 8010f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010f28 <__hi0bits>:
 8010f28:	0c03      	lsrs	r3, r0, #16
 8010f2a:	041b      	lsls	r3, r3, #16
 8010f2c:	b913      	cbnz	r3, 8010f34 <__hi0bits+0xc>
 8010f2e:	0400      	lsls	r0, r0, #16
 8010f30:	2310      	movs	r3, #16
 8010f32:	e000      	b.n	8010f36 <__hi0bits+0xe>
 8010f34:	2300      	movs	r3, #0
 8010f36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f3a:	bf04      	itt	eq
 8010f3c:	0200      	lsleq	r0, r0, #8
 8010f3e:	3308      	addeq	r3, #8
 8010f40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f44:	bf04      	itt	eq
 8010f46:	0100      	lsleq	r0, r0, #4
 8010f48:	3304      	addeq	r3, #4
 8010f4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010f4e:	bf04      	itt	eq
 8010f50:	0080      	lsleq	r0, r0, #2
 8010f52:	3302      	addeq	r3, #2
 8010f54:	2800      	cmp	r0, #0
 8010f56:	db03      	blt.n	8010f60 <__hi0bits+0x38>
 8010f58:	0042      	lsls	r2, r0, #1
 8010f5a:	d503      	bpl.n	8010f64 <__hi0bits+0x3c>
 8010f5c:	1c58      	adds	r0, r3, #1
 8010f5e:	4770      	bx	lr
 8010f60:	4618      	mov	r0, r3
 8010f62:	4770      	bx	lr
 8010f64:	2020      	movs	r0, #32
 8010f66:	4770      	bx	lr

08010f68 <__lo0bits>:
 8010f68:	6803      	ldr	r3, [r0, #0]
 8010f6a:	f013 0207 	ands.w	r2, r3, #7
 8010f6e:	d00b      	beq.n	8010f88 <__lo0bits+0x20>
 8010f70:	07d9      	lsls	r1, r3, #31
 8010f72:	d422      	bmi.n	8010fba <__lo0bits+0x52>
 8010f74:	079a      	lsls	r2, r3, #30
 8010f76:	bf4b      	itete	mi
 8010f78:	085b      	lsrmi	r3, r3, #1
 8010f7a:	089b      	lsrpl	r3, r3, #2
 8010f7c:	6003      	strmi	r3, [r0, #0]
 8010f7e:	6003      	strpl	r3, [r0, #0]
 8010f80:	bf4c      	ite	mi
 8010f82:	2001      	movmi	r0, #1
 8010f84:	2002      	movpl	r0, #2
 8010f86:	4770      	bx	lr
 8010f88:	b299      	uxth	r1, r3
 8010f8a:	b909      	cbnz	r1, 8010f90 <__lo0bits+0x28>
 8010f8c:	0c1b      	lsrs	r3, r3, #16
 8010f8e:	2210      	movs	r2, #16
 8010f90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010f94:	bf04      	itt	eq
 8010f96:	0a1b      	lsreq	r3, r3, #8
 8010f98:	3208      	addeq	r2, #8
 8010f9a:	0719      	lsls	r1, r3, #28
 8010f9c:	bf04      	itt	eq
 8010f9e:	091b      	lsreq	r3, r3, #4
 8010fa0:	3204      	addeq	r2, #4
 8010fa2:	0799      	lsls	r1, r3, #30
 8010fa4:	bf04      	itt	eq
 8010fa6:	089b      	lsreq	r3, r3, #2
 8010fa8:	3202      	addeq	r2, #2
 8010faa:	07d9      	lsls	r1, r3, #31
 8010fac:	d402      	bmi.n	8010fb4 <__lo0bits+0x4c>
 8010fae:	085b      	lsrs	r3, r3, #1
 8010fb0:	d005      	beq.n	8010fbe <__lo0bits+0x56>
 8010fb2:	3201      	adds	r2, #1
 8010fb4:	6003      	str	r3, [r0, #0]
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	4770      	bx	lr
 8010fba:	2000      	movs	r0, #0
 8010fbc:	4770      	bx	lr
 8010fbe:	2020      	movs	r0, #32
 8010fc0:	4770      	bx	lr

08010fc2 <__i2b>:
 8010fc2:	b510      	push	{r4, lr}
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	2101      	movs	r1, #1
 8010fc8:	f7ff fee9 	bl	8010d9e <_Balloc>
 8010fcc:	2201      	movs	r2, #1
 8010fce:	6144      	str	r4, [r0, #20]
 8010fd0:	6102      	str	r2, [r0, #16]
 8010fd2:	bd10      	pop	{r4, pc}

08010fd4 <__multiply>:
 8010fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd8:	4614      	mov	r4, r2
 8010fda:	690a      	ldr	r2, [r1, #16]
 8010fdc:	6923      	ldr	r3, [r4, #16]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	bfb8      	it	lt
 8010fe2:	460b      	movlt	r3, r1
 8010fe4:	4688      	mov	r8, r1
 8010fe6:	bfbc      	itt	lt
 8010fe8:	46a0      	movlt	r8, r4
 8010fea:	461c      	movlt	r4, r3
 8010fec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ff0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010ff4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ffc:	eb07 0609 	add.w	r6, r7, r9
 8011000:	429e      	cmp	r6, r3
 8011002:	bfc8      	it	gt
 8011004:	3101      	addgt	r1, #1
 8011006:	f7ff feca 	bl	8010d9e <_Balloc>
 801100a:	f100 0514 	add.w	r5, r0, #20
 801100e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8011012:	462b      	mov	r3, r5
 8011014:	2200      	movs	r2, #0
 8011016:	4563      	cmp	r3, ip
 8011018:	d202      	bcs.n	8011020 <__multiply+0x4c>
 801101a:	f843 2b04 	str.w	r2, [r3], #4
 801101e:	e7fa      	b.n	8011016 <__multiply+0x42>
 8011020:	f104 0214 	add.w	r2, r4, #20
 8011024:	f108 0114 	add.w	r1, r8, #20
 8011028:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801102c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011030:	9300      	str	r3, [sp, #0]
 8011032:	9b00      	ldr	r3, [sp, #0]
 8011034:	9201      	str	r2, [sp, #4]
 8011036:	4293      	cmp	r3, r2
 8011038:	d957      	bls.n	80110ea <__multiply+0x116>
 801103a:	f8b2 b000 	ldrh.w	fp, [r2]
 801103e:	f1bb 0f00 	cmp.w	fp, #0
 8011042:	d023      	beq.n	801108c <__multiply+0xb8>
 8011044:	4689      	mov	r9, r1
 8011046:	46ae      	mov	lr, r5
 8011048:	f04f 0800 	mov.w	r8, #0
 801104c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011050:	f8be a000 	ldrh.w	sl, [lr]
 8011054:	b2a3      	uxth	r3, r4
 8011056:	fb0b a303 	mla	r3, fp, r3, sl
 801105a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801105e:	f8de 4000 	ldr.w	r4, [lr]
 8011062:	4443      	add	r3, r8
 8011064:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011068:	fb0b 840a 	mla	r4, fp, sl, r8
 801106c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011070:	46f2      	mov	sl, lr
 8011072:	b29b      	uxth	r3, r3
 8011074:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011078:	454f      	cmp	r7, r9
 801107a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801107e:	f84a 3b04 	str.w	r3, [sl], #4
 8011082:	d901      	bls.n	8011088 <__multiply+0xb4>
 8011084:	46d6      	mov	lr, sl
 8011086:	e7e1      	b.n	801104c <__multiply+0x78>
 8011088:	f8ce 8004 	str.w	r8, [lr, #4]
 801108c:	9b01      	ldr	r3, [sp, #4]
 801108e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011092:	3204      	adds	r2, #4
 8011094:	f1ba 0f00 	cmp.w	sl, #0
 8011098:	d021      	beq.n	80110de <__multiply+0x10a>
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	462c      	mov	r4, r5
 801109e:	4689      	mov	r9, r1
 80110a0:	f04f 0800 	mov.w	r8, #0
 80110a4:	f8b9 e000 	ldrh.w	lr, [r9]
 80110a8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80110ac:	fb0a be0e 	mla	lr, sl, lr, fp
 80110b0:	44f0      	add	r8, lr
 80110b2:	46a3      	mov	fp, r4
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80110ba:	f84b 3b04 	str.w	r3, [fp], #4
 80110be:	f859 3b04 	ldr.w	r3, [r9], #4
 80110c2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80110c6:	0c1b      	lsrs	r3, r3, #16
 80110c8:	fb0a e303 	mla	r3, sl, r3, lr
 80110cc:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80110d0:	454f      	cmp	r7, r9
 80110d2:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80110d6:	d901      	bls.n	80110dc <__multiply+0x108>
 80110d8:	465c      	mov	r4, fp
 80110da:	e7e3      	b.n	80110a4 <__multiply+0xd0>
 80110dc:	6063      	str	r3, [r4, #4]
 80110de:	3504      	adds	r5, #4
 80110e0:	e7a7      	b.n	8011032 <__multiply+0x5e>
 80110e2:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80110e6:	b913      	cbnz	r3, 80110ee <__multiply+0x11a>
 80110e8:	3e01      	subs	r6, #1
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	dcf9      	bgt.n	80110e2 <__multiply+0x10e>
 80110ee:	6106      	str	r6, [r0, #16]
 80110f0:	b003      	add	sp, #12
 80110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080110f8 <__pow5mult>:
 80110f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110fc:	4615      	mov	r5, r2
 80110fe:	f012 0203 	ands.w	r2, r2, #3
 8011102:	4606      	mov	r6, r0
 8011104:	460f      	mov	r7, r1
 8011106:	d007      	beq.n	8011118 <__pow5mult+0x20>
 8011108:	3a01      	subs	r2, #1
 801110a:	4c21      	ldr	r4, [pc, #132]	; (8011190 <__pow5mult+0x98>)
 801110c:	2300      	movs	r3, #0
 801110e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011112:	f7ff fe90 	bl	8010e36 <__multadd>
 8011116:	4607      	mov	r7, r0
 8011118:	10ad      	asrs	r5, r5, #2
 801111a:	d036      	beq.n	801118a <__pow5mult+0x92>
 801111c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801111e:	b93c      	cbnz	r4, 8011130 <__pow5mult+0x38>
 8011120:	2010      	movs	r0, #16
 8011122:	f7fa fc81 	bl	800ba28 <malloc>
 8011126:	6270      	str	r0, [r6, #36]	; 0x24
 8011128:	6044      	str	r4, [r0, #4]
 801112a:	6084      	str	r4, [r0, #8]
 801112c:	6004      	str	r4, [r0, #0]
 801112e:	60c4      	str	r4, [r0, #12]
 8011130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011138:	b94c      	cbnz	r4, 801114e <__pow5mult+0x56>
 801113a:	f240 2171 	movw	r1, #625	; 0x271
 801113e:	4630      	mov	r0, r6
 8011140:	f7ff ff3f 	bl	8010fc2 <__i2b>
 8011144:	2300      	movs	r3, #0
 8011146:	f8c8 0008 	str.w	r0, [r8, #8]
 801114a:	4604      	mov	r4, r0
 801114c:	6003      	str	r3, [r0, #0]
 801114e:	f04f 0800 	mov.w	r8, #0
 8011152:	07eb      	lsls	r3, r5, #31
 8011154:	d50a      	bpl.n	801116c <__pow5mult+0x74>
 8011156:	4639      	mov	r1, r7
 8011158:	4622      	mov	r2, r4
 801115a:	4630      	mov	r0, r6
 801115c:	f7ff ff3a 	bl	8010fd4 <__multiply>
 8011160:	4639      	mov	r1, r7
 8011162:	4681      	mov	r9, r0
 8011164:	4630      	mov	r0, r6
 8011166:	f7ff fe4f 	bl	8010e08 <_Bfree>
 801116a:	464f      	mov	r7, r9
 801116c:	106d      	asrs	r5, r5, #1
 801116e:	d00c      	beq.n	801118a <__pow5mult+0x92>
 8011170:	6820      	ldr	r0, [r4, #0]
 8011172:	b108      	cbz	r0, 8011178 <__pow5mult+0x80>
 8011174:	4604      	mov	r4, r0
 8011176:	e7ec      	b.n	8011152 <__pow5mult+0x5a>
 8011178:	4622      	mov	r2, r4
 801117a:	4621      	mov	r1, r4
 801117c:	4630      	mov	r0, r6
 801117e:	f7ff ff29 	bl	8010fd4 <__multiply>
 8011182:	6020      	str	r0, [r4, #0]
 8011184:	f8c0 8000 	str.w	r8, [r0]
 8011188:	e7f4      	b.n	8011174 <__pow5mult+0x7c>
 801118a:	4638      	mov	r0, r7
 801118c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011190:	08015648 	.word	0x08015648

08011194 <__lshift>:
 8011194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011198:	460c      	mov	r4, r1
 801119a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801119e:	6926      	ldr	r6, [r4, #16]
 80111a0:	6849      	ldr	r1, [r1, #4]
 80111a2:	68a3      	ldr	r3, [r4, #8]
 80111a4:	4456      	add	r6, sl
 80111a6:	4607      	mov	r7, r0
 80111a8:	4691      	mov	r9, r2
 80111aa:	1c75      	adds	r5, r6, #1
 80111ac:	42ab      	cmp	r3, r5
 80111ae:	da02      	bge.n	80111b6 <__lshift+0x22>
 80111b0:	3101      	adds	r1, #1
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	e7fa      	b.n	80111ac <__lshift+0x18>
 80111b6:	4638      	mov	r0, r7
 80111b8:	f7ff fdf1 	bl	8010d9e <_Balloc>
 80111bc:	2300      	movs	r3, #0
 80111be:	4680      	mov	r8, r0
 80111c0:	f100 0114 	add.w	r1, r0, #20
 80111c4:	461a      	mov	r2, r3
 80111c6:	4553      	cmp	r3, sl
 80111c8:	da03      	bge.n	80111d2 <__lshift+0x3e>
 80111ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80111ce:	3301      	adds	r3, #1
 80111d0:	e7f9      	b.n	80111c6 <__lshift+0x32>
 80111d2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80111d6:	6920      	ldr	r0, [r4, #16]
 80111d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80111dc:	f019 091f 	ands.w	r9, r9, #31
 80111e0:	f104 0114 	add.w	r1, r4, #20
 80111e4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80111e8:	d014      	beq.n	8011214 <__lshift+0x80>
 80111ea:	f1c9 0c20 	rsb	ip, r9, #32
 80111ee:	2200      	movs	r2, #0
 80111f0:	6808      	ldr	r0, [r1, #0]
 80111f2:	fa00 f009 	lsl.w	r0, r0, r9
 80111f6:	4302      	orrs	r2, r0
 80111f8:	469a      	mov	sl, r3
 80111fa:	f843 2b04 	str.w	r2, [r3], #4
 80111fe:	f851 2b04 	ldr.w	r2, [r1], #4
 8011202:	458e      	cmp	lr, r1
 8011204:	fa22 f20c 	lsr.w	r2, r2, ip
 8011208:	d8f2      	bhi.n	80111f0 <__lshift+0x5c>
 801120a:	f8ca 2004 	str.w	r2, [sl, #4]
 801120e:	b142      	cbz	r2, 8011222 <__lshift+0x8e>
 8011210:	1cb5      	adds	r5, r6, #2
 8011212:	e006      	b.n	8011222 <__lshift+0x8e>
 8011214:	3b04      	subs	r3, #4
 8011216:	f851 2b04 	ldr.w	r2, [r1], #4
 801121a:	f843 2f04 	str.w	r2, [r3, #4]!
 801121e:	458e      	cmp	lr, r1
 8011220:	d8f9      	bhi.n	8011216 <__lshift+0x82>
 8011222:	3d01      	subs	r5, #1
 8011224:	4638      	mov	r0, r7
 8011226:	f8c8 5010 	str.w	r5, [r8, #16]
 801122a:	4621      	mov	r1, r4
 801122c:	f7ff fdec 	bl	8010e08 <_Bfree>
 8011230:	4640      	mov	r0, r8
 8011232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011236 <__mcmp>:
 8011236:	6903      	ldr	r3, [r0, #16]
 8011238:	690a      	ldr	r2, [r1, #16]
 801123a:	1a9b      	subs	r3, r3, r2
 801123c:	b510      	push	{r4, lr}
 801123e:	d111      	bne.n	8011264 <__mcmp+0x2e>
 8011240:	0092      	lsls	r2, r2, #2
 8011242:	3014      	adds	r0, #20
 8011244:	3114      	adds	r1, #20
 8011246:	1883      	adds	r3, r0, r2
 8011248:	440a      	add	r2, r1
 801124a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801124e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011252:	428c      	cmp	r4, r1
 8011254:	d002      	beq.n	801125c <__mcmp+0x26>
 8011256:	d307      	bcc.n	8011268 <__mcmp+0x32>
 8011258:	2001      	movs	r0, #1
 801125a:	bd10      	pop	{r4, pc}
 801125c:	4298      	cmp	r0, r3
 801125e:	d3f4      	bcc.n	801124a <__mcmp+0x14>
 8011260:	2000      	movs	r0, #0
 8011262:	bd10      	pop	{r4, pc}
 8011264:	4618      	mov	r0, r3
 8011266:	bd10      	pop	{r4, pc}
 8011268:	f04f 30ff 	mov.w	r0, #4294967295
 801126c:	bd10      	pop	{r4, pc}

0801126e <__mdiff>:
 801126e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011272:	460c      	mov	r4, r1
 8011274:	4607      	mov	r7, r0
 8011276:	4611      	mov	r1, r2
 8011278:	4620      	mov	r0, r4
 801127a:	4615      	mov	r5, r2
 801127c:	f7ff ffdb 	bl	8011236 <__mcmp>
 8011280:	1e06      	subs	r6, r0, #0
 8011282:	d108      	bne.n	8011296 <__mdiff+0x28>
 8011284:	4631      	mov	r1, r6
 8011286:	4638      	mov	r0, r7
 8011288:	f7ff fd89 	bl	8010d9e <_Balloc>
 801128c:	2301      	movs	r3, #1
 801128e:	6103      	str	r3, [r0, #16]
 8011290:	6146      	str	r6, [r0, #20]
 8011292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011296:	bfbc      	itt	lt
 8011298:	4623      	movlt	r3, r4
 801129a:	462c      	movlt	r4, r5
 801129c:	4638      	mov	r0, r7
 801129e:	6861      	ldr	r1, [r4, #4]
 80112a0:	bfba      	itte	lt
 80112a2:	461d      	movlt	r5, r3
 80112a4:	2601      	movlt	r6, #1
 80112a6:	2600      	movge	r6, #0
 80112a8:	f7ff fd79 	bl	8010d9e <_Balloc>
 80112ac:	692b      	ldr	r3, [r5, #16]
 80112ae:	60c6      	str	r6, [r0, #12]
 80112b0:	6926      	ldr	r6, [r4, #16]
 80112b2:	f105 0914 	add.w	r9, r5, #20
 80112b6:	3414      	adds	r4, #20
 80112b8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80112bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80112c0:	f100 0514 	add.w	r5, r0, #20
 80112c4:	f04f 0c00 	mov.w	ip, #0
 80112c8:	f854 3b04 	ldr.w	r3, [r4], #4
 80112cc:	f859 2b04 	ldr.w	r2, [r9], #4
 80112d0:	fa1c f183 	uxtah	r1, ip, r3
 80112d4:	fa1f fe82 	uxth.w	lr, r2
 80112d8:	0c12      	lsrs	r2, r2, #16
 80112da:	ebce 0101 	rsb	r1, lr, r1
 80112de:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80112e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80112e6:	b289      	uxth	r1, r1
 80112e8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80112ec:	45c8      	cmp	r8, r9
 80112ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80112f2:	46a6      	mov	lr, r4
 80112f4:	f845 3b04 	str.w	r3, [r5], #4
 80112f8:	d8e6      	bhi.n	80112c8 <__mdiff+0x5a>
 80112fa:	45be      	cmp	lr, r7
 80112fc:	d20e      	bcs.n	801131c <__mdiff+0xae>
 80112fe:	f85e 1b04 	ldr.w	r1, [lr], #4
 8011302:	fa1c f281 	uxtah	r2, ip, r1
 8011306:	1413      	asrs	r3, r2, #16
 8011308:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 801130c:	b292      	uxth	r2, r2
 801130e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011312:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011316:	f845 2b04 	str.w	r2, [r5], #4
 801131a:	e7ee      	b.n	80112fa <__mdiff+0x8c>
 801131c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011320:	b90b      	cbnz	r3, 8011326 <__mdiff+0xb8>
 8011322:	3e01      	subs	r6, #1
 8011324:	e7fa      	b.n	801131c <__mdiff+0xae>
 8011326:	6106      	str	r6, [r0, #16]
 8011328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801132c <__ulp>:
 801132c:	4b12      	ldr	r3, [pc, #72]	; (8011378 <__ulp+0x4c>)
 801132e:	ee10 2a90 	vmov	r2, s1
 8011332:	401a      	ands	r2, r3
 8011334:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011338:	2b00      	cmp	r3, #0
 801133a:	dd02      	ble.n	8011342 <__ulp+0x16>
 801133c:	2000      	movs	r0, #0
 801133e:	4619      	mov	r1, r3
 8011340:	e017      	b.n	8011372 <__ulp+0x46>
 8011342:	425b      	negs	r3, r3
 8011344:	151b      	asrs	r3, r3, #20
 8011346:	2b13      	cmp	r3, #19
 8011348:	f04f 0000 	mov.w	r0, #0
 801134c:	f04f 0100 	mov.w	r1, #0
 8011350:	dc04      	bgt.n	801135c <__ulp+0x30>
 8011352:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011356:	fa42 f103 	asr.w	r1, r2, r3
 801135a:	e00a      	b.n	8011372 <__ulp+0x46>
 801135c:	3b14      	subs	r3, #20
 801135e:	2b1e      	cmp	r3, #30
 8011360:	f04f 0201 	mov.w	r2, #1
 8011364:	bfda      	itte	le
 8011366:	f1c3 031f 	rsble	r3, r3, #31
 801136a:	fa02 f303 	lslle.w	r3, r2, r3
 801136e:	4613      	movgt	r3, r2
 8011370:	4618      	mov	r0, r3
 8011372:	ec41 0b10 	vmov	d0, r0, r1
 8011376:	4770      	bx	lr
 8011378:	7ff00000 	.word	0x7ff00000

0801137c <__b2d>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	6905      	ldr	r5, [r0, #16]
 8011380:	f100 0614 	add.w	r6, r0, #20
 8011384:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8011388:	1f2f      	subs	r7, r5, #4
 801138a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801138e:	4620      	mov	r0, r4
 8011390:	f7ff fdca 	bl	8010f28 <__hi0bits>
 8011394:	f1c0 0320 	rsb	r3, r0, #32
 8011398:	280a      	cmp	r0, #10
 801139a:	600b      	str	r3, [r1, #0]
 801139c:	dc14      	bgt.n	80113c8 <__b2d+0x4c>
 801139e:	f1c0 0e0b 	rsb	lr, r0, #11
 80113a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80113a6:	42be      	cmp	r6, r7
 80113a8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80113ac:	bf34      	ite	cc
 80113ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113b2:	2100      	movcs	r1, #0
 80113b4:	3015      	adds	r0, #21
 80113b6:	fa04 f000 	lsl.w	r0, r4, r0
 80113ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80113be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80113c2:	ea40 0201 	orr.w	r2, r0, r1
 80113c6:	e023      	b.n	8011410 <__b2d+0x94>
 80113c8:	42be      	cmp	r6, r7
 80113ca:	bf3a      	itte	cc
 80113cc:	f1a5 0708 	subcc.w	r7, r5, #8
 80113d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113d4:	2100      	movcs	r1, #0
 80113d6:	380b      	subs	r0, #11
 80113d8:	d015      	beq.n	8011406 <__b2d+0x8a>
 80113da:	4084      	lsls	r4, r0
 80113dc:	f1c0 0520 	rsb	r5, r0, #32
 80113e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80113e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80113e8:	42b7      	cmp	r7, r6
 80113ea:	fa21 fe05 	lsr.w	lr, r1, r5
 80113ee:	ea44 030e 	orr.w	r3, r4, lr
 80113f2:	bf8c      	ite	hi
 80113f4:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80113f8:	2400      	movls	r4, #0
 80113fa:	fa01 f000 	lsl.w	r0, r1, r0
 80113fe:	40ec      	lsrs	r4, r5
 8011400:	ea40 0204 	orr.w	r2, r0, r4
 8011404:	e004      	b.n	8011410 <__b2d+0x94>
 8011406:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801140a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801140e:	460a      	mov	r2, r1
 8011410:	ec43 2b10 	vmov	d0, r2, r3
 8011414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011416 <__d2b>:
 8011416:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801141a:	460e      	mov	r6, r1
 801141c:	2101      	movs	r1, #1
 801141e:	ec59 8b10 	vmov	r8, r9, d0
 8011422:	4615      	mov	r5, r2
 8011424:	f7ff fcbb 	bl	8010d9e <_Balloc>
 8011428:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801142c:	4607      	mov	r7, r0
 801142e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011432:	b10c      	cbz	r4, 8011438 <__d2b+0x22>
 8011434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011438:	9301      	str	r3, [sp, #4]
 801143a:	f1b8 0f00 	cmp.w	r8, #0
 801143e:	d019      	beq.n	8011474 <__d2b+0x5e>
 8011440:	a802      	add	r0, sp, #8
 8011442:	f840 8d08 	str.w	r8, [r0, #-8]!
 8011446:	f7ff fd8f 	bl	8010f68 <__lo0bits>
 801144a:	9b00      	ldr	r3, [sp, #0]
 801144c:	b148      	cbz	r0, 8011462 <__d2b+0x4c>
 801144e:	9a01      	ldr	r2, [sp, #4]
 8011450:	f1c0 0120 	rsb	r1, r0, #32
 8011454:	fa02 f101 	lsl.w	r1, r2, r1
 8011458:	430b      	orrs	r3, r1
 801145a:	40c2      	lsrs	r2, r0
 801145c:	617b      	str	r3, [r7, #20]
 801145e:	9201      	str	r2, [sp, #4]
 8011460:	e000      	b.n	8011464 <__d2b+0x4e>
 8011462:	617b      	str	r3, [r7, #20]
 8011464:	9b01      	ldr	r3, [sp, #4]
 8011466:	61bb      	str	r3, [r7, #24]
 8011468:	2b00      	cmp	r3, #0
 801146a:	bf14      	ite	ne
 801146c:	2102      	movne	r1, #2
 801146e:	2101      	moveq	r1, #1
 8011470:	6139      	str	r1, [r7, #16]
 8011472:	e007      	b.n	8011484 <__d2b+0x6e>
 8011474:	a801      	add	r0, sp, #4
 8011476:	f7ff fd77 	bl	8010f68 <__lo0bits>
 801147a:	9b01      	ldr	r3, [sp, #4]
 801147c:	617b      	str	r3, [r7, #20]
 801147e:	2101      	movs	r1, #1
 8011480:	6139      	str	r1, [r7, #16]
 8011482:	3020      	adds	r0, #32
 8011484:	b134      	cbz	r4, 8011494 <__d2b+0x7e>
 8011486:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801148a:	4404      	add	r4, r0
 801148c:	6034      	str	r4, [r6, #0]
 801148e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011492:	e009      	b.n	80114a8 <__d2b+0x92>
 8011494:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011498:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801149c:	6030      	str	r0, [r6, #0]
 801149e:	6918      	ldr	r0, [r3, #16]
 80114a0:	f7ff fd42 	bl	8010f28 <__hi0bits>
 80114a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80114a8:	6028      	str	r0, [r5, #0]
 80114aa:	4638      	mov	r0, r7
 80114ac:	b003      	add	sp, #12
 80114ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080114b2 <__ratio>:
 80114b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114b6:	4688      	mov	r8, r1
 80114b8:	4669      	mov	r1, sp
 80114ba:	4681      	mov	r9, r0
 80114bc:	f7ff ff5e 	bl	801137c <__b2d>
 80114c0:	a901      	add	r1, sp, #4
 80114c2:	4640      	mov	r0, r8
 80114c4:	ec55 4b10 	vmov	r4, r5, d0
 80114c8:	f7ff ff58 	bl	801137c <__b2d>
 80114cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80114d4:	1a9a      	subs	r2, r3, r2
 80114d6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80114da:	1ac9      	subs	r1, r1, r3
 80114dc:	ec57 6b10 	vmov	r6, r7, d0
 80114e0:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	bfcc      	ite	gt
 80114e8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80114ec:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80114f0:	4632      	mov	r2, r6
 80114f2:	463b      	mov	r3, r7
 80114f4:	4620      	mov	r0, r4
 80114f6:	4629      	mov	r1, r5
 80114f8:	f7ef f9c4 	bl	8000884 <__aeabi_ddiv>
 80114fc:	ec41 0b10 	vmov	d0, r0, r1
 8011500:	b003      	add	sp, #12
 8011502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011506 <__copybits>:
 8011506:	3901      	subs	r1, #1
 8011508:	b510      	push	{r4, lr}
 801150a:	1149      	asrs	r1, r1, #5
 801150c:	6914      	ldr	r4, [r2, #16]
 801150e:	3101      	adds	r1, #1
 8011510:	f102 0314 	add.w	r3, r2, #20
 8011514:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011518:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801151c:	42a3      	cmp	r3, r4
 801151e:	4602      	mov	r2, r0
 8011520:	d204      	bcs.n	801152c <__copybits+0x26>
 8011522:	f853 2b04 	ldr.w	r2, [r3], #4
 8011526:	f840 2b04 	str.w	r2, [r0], #4
 801152a:	e7f7      	b.n	801151c <__copybits+0x16>
 801152c:	2300      	movs	r3, #0
 801152e:	428a      	cmp	r2, r1
 8011530:	d202      	bcs.n	8011538 <__copybits+0x32>
 8011532:	f842 3b04 	str.w	r3, [r2], #4
 8011536:	e7fa      	b.n	801152e <__copybits+0x28>
 8011538:	bd10      	pop	{r4, pc}

0801153a <__any_on>:
 801153a:	f100 0214 	add.w	r2, r0, #20
 801153e:	6900      	ldr	r0, [r0, #16]
 8011540:	114b      	asrs	r3, r1, #5
 8011542:	4298      	cmp	r0, r3
 8011544:	b510      	push	{r4, lr}
 8011546:	db0c      	blt.n	8011562 <__any_on+0x28>
 8011548:	dd0c      	ble.n	8011564 <__any_on+0x2a>
 801154a:	f011 011f 	ands.w	r1, r1, #31
 801154e:	d009      	beq.n	8011564 <__any_on+0x2a>
 8011550:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011554:	fa24 f001 	lsr.w	r0, r4, r1
 8011558:	fa00 f101 	lsl.w	r1, r0, r1
 801155c:	428c      	cmp	r4, r1
 801155e:	d10c      	bne.n	801157a <__any_on+0x40>
 8011560:	e000      	b.n	8011564 <__any_on+0x2a>
 8011562:	4603      	mov	r3, r0
 8011564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011568:	4293      	cmp	r3, r2
 801156a:	d904      	bls.n	8011576 <__any_on+0x3c>
 801156c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011570:	2900      	cmp	r1, #0
 8011572:	d0f9      	beq.n	8011568 <__any_on+0x2e>
 8011574:	e001      	b.n	801157a <__any_on+0x40>
 8011576:	2000      	movs	r0, #0
 8011578:	bd10      	pop	{r4, pc}
 801157a:	2001      	movs	r0, #1
 801157c:	bd10      	pop	{r4, pc}
	...

08011580 <_realloc_r>:
 8011580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	4681      	mov	r9, r0
 8011586:	460c      	mov	r4, r1
 8011588:	b929      	cbnz	r1, 8011596 <_realloc_r+0x16>
 801158a:	4611      	mov	r1, r2
 801158c:	b003      	add	sp, #12
 801158e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011592:	f7fa ba59 	b.w	800ba48 <_malloc_r>
 8011596:	9201      	str	r2, [sp, #4]
 8011598:	f7fa fc89 	bl	800beae <__malloc_lock>
 801159c:	9a01      	ldr	r2, [sp, #4]
 801159e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 80115a2:	f102 080b 	add.w	r8, r2, #11
 80115a6:	f1b8 0f16 	cmp.w	r8, #22
 80115aa:	f1a4 0b08 	sub.w	fp, r4, #8
 80115ae:	f02e 0503 	bic.w	r5, lr, #3
 80115b2:	d903      	bls.n	80115bc <_realloc_r+0x3c>
 80115b4:	f038 0807 	bics.w	r8, r8, #7
 80115b8:	d502      	bpl.n	80115c0 <_realloc_r+0x40>
 80115ba:	e003      	b.n	80115c4 <_realloc_r+0x44>
 80115bc:	f04f 0810 	mov.w	r8, #16
 80115c0:	4590      	cmp	r8, r2
 80115c2:	d204      	bcs.n	80115ce <_realloc_r+0x4e>
 80115c4:	230c      	movs	r3, #12
 80115c6:	f8c9 3000 	str.w	r3, [r9]
 80115ca:	2000      	movs	r0, #0
 80115cc:	e17d      	b.n	80118ca <_realloc_r+0x34a>
 80115ce:	45a8      	cmp	r8, r5
 80115d0:	f340 8150 	ble.w	8011874 <_realloc_r+0x2f4>
 80115d4:	4ba6      	ldr	r3, [pc, #664]	; (8011870 <_realloc_r+0x2f0>)
 80115d6:	6898      	ldr	r0, [r3, #8]
 80115d8:	eb0b 0105 	add.w	r1, fp, r5
 80115dc:	4281      	cmp	r1, r0
 80115de:	684f      	ldr	r7, [r1, #4]
 80115e0:	d005      	beq.n	80115ee <_realloc_r+0x6e>
 80115e2:	f027 0601 	bic.w	r6, r7, #1
 80115e6:	440e      	add	r6, r1
 80115e8:	6876      	ldr	r6, [r6, #4]
 80115ea:	07f6      	lsls	r6, r6, #31
 80115ec:	d426      	bmi.n	801163c <_realloc_r+0xbc>
 80115ee:	f027 0a03 	bic.w	sl, r7, #3
 80115f2:	4281      	cmp	r1, r0
 80115f4:	eb05 070a 	add.w	r7, r5, sl
 80115f8:	d118      	bne.n	801162c <_realloc_r+0xac>
 80115fa:	f108 0610 	add.w	r6, r8, #16
 80115fe:	42b7      	cmp	r7, r6
 8011600:	db1f      	blt.n	8011642 <_realloc_r+0xc2>
 8011602:	eb0b 0008 	add.w	r0, fp, r8
 8011606:	ebc8 0707 	rsb	r7, r8, r7
 801160a:	f047 0701 	orr.w	r7, r7, #1
 801160e:	6098      	str	r0, [r3, #8]
 8011610:	6047      	str	r7, [r0, #4]
 8011612:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011616:	f003 0301 	and.w	r3, r3, #1
 801161a:	ea43 0308 	orr.w	r3, r3, r8
 801161e:	4648      	mov	r0, r9
 8011620:	f844 3c04 	str.w	r3, [r4, #-4]
 8011624:	f7fa fc44 	bl	800beb0 <__malloc_unlock>
 8011628:	4620      	mov	r0, r4
 801162a:	e14e      	b.n	80118ca <_realloc_r+0x34a>
 801162c:	45b8      	cmp	r8, r7
 801162e:	dc08      	bgt.n	8011642 <_realloc_r+0xc2>
 8011630:	68cb      	ldr	r3, [r1, #12]
 8011632:	688a      	ldr	r2, [r1, #8]
 8011634:	463d      	mov	r5, r7
 8011636:	60d3      	str	r3, [r2, #12]
 8011638:	609a      	str	r2, [r3, #8]
 801163a:	e11b      	b.n	8011874 <_realloc_r+0x2f4>
 801163c:	f04f 0a00 	mov.w	sl, #0
 8011640:	4651      	mov	r1, sl
 8011642:	f01e 0f01 	tst.w	lr, #1
 8011646:	f040 80c3 	bne.w	80117d0 <_realloc_r+0x250>
 801164a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801164e:	ebc7 070b 	rsb	r7, r7, fp
 8011652:	687e      	ldr	r6, [r7, #4]
 8011654:	f026 0603 	bic.w	r6, r6, #3
 8011658:	442e      	add	r6, r5
 801165a:	2900      	cmp	r1, #0
 801165c:	f000 8083 	beq.w	8011766 <_realloc_r+0x1e6>
 8011660:	4281      	cmp	r1, r0
 8011662:	44b2      	add	sl, r6
 8011664:	d147      	bne.n	80116f6 <_realloc_r+0x176>
 8011666:	f108 0110 	add.w	r1, r8, #16
 801166a:	458a      	cmp	sl, r1
 801166c:	db7b      	blt.n	8011766 <_realloc_r+0x1e6>
 801166e:	463e      	mov	r6, r7
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8011676:	60ca      	str	r2, [r1, #12]
 8011678:	6091      	str	r1, [r2, #8]
 801167a:	1f2a      	subs	r2, r5, #4
 801167c:	2a24      	cmp	r2, #36	; 0x24
 801167e:	d825      	bhi.n	80116cc <_realloc_r+0x14c>
 8011680:	2a13      	cmp	r2, #19
 8011682:	d91b      	bls.n	80116bc <_realloc_r+0x13c>
 8011684:	6821      	ldr	r1, [r4, #0]
 8011686:	60b9      	str	r1, [r7, #8]
 8011688:	6861      	ldr	r1, [r4, #4]
 801168a:	60f9      	str	r1, [r7, #12]
 801168c:	2a1b      	cmp	r2, #27
 801168e:	d803      	bhi.n	8011698 <_realloc_r+0x118>
 8011690:	f107 0210 	add.w	r2, r7, #16
 8011694:	3408      	adds	r4, #8
 8011696:	e012      	b.n	80116be <_realloc_r+0x13e>
 8011698:	68a1      	ldr	r1, [r4, #8]
 801169a:	6139      	str	r1, [r7, #16]
 801169c:	68e1      	ldr	r1, [r4, #12]
 801169e:	6179      	str	r1, [r7, #20]
 80116a0:	2a24      	cmp	r2, #36	; 0x24
 80116a2:	bf01      	itttt	eq
 80116a4:	6922      	ldreq	r2, [r4, #16]
 80116a6:	61ba      	streq	r2, [r7, #24]
 80116a8:	6961      	ldreq	r1, [r4, #20]
 80116aa:	61f9      	streq	r1, [r7, #28]
 80116ac:	bf19      	ittee	ne
 80116ae:	f107 0218 	addne.w	r2, r7, #24
 80116b2:	3410      	addne	r4, #16
 80116b4:	f107 0220 	addeq.w	r2, r7, #32
 80116b8:	3418      	addeq	r4, #24
 80116ba:	e000      	b.n	80116be <_realloc_r+0x13e>
 80116bc:	4632      	mov	r2, r6
 80116be:	6821      	ldr	r1, [r4, #0]
 80116c0:	6011      	str	r1, [r2, #0]
 80116c2:	6861      	ldr	r1, [r4, #4]
 80116c4:	6051      	str	r1, [r2, #4]
 80116c6:	68a1      	ldr	r1, [r4, #8]
 80116c8:	6091      	str	r1, [r2, #8]
 80116ca:	e005      	b.n	80116d8 <_realloc_r+0x158>
 80116cc:	4621      	mov	r1, r4
 80116ce:	4630      	mov	r0, r6
 80116d0:	9301      	str	r3, [sp, #4]
 80116d2:	f7ff fb49 	bl	8010d68 <memmove>
 80116d6:	9b01      	ldr	r3, [sp, #4]
 80116d8:	eb07 0208 	add.w	r2, r7, r8
 80116dc:	ebc8 0a0a 	rsb	sl, r8, sl
 80116e0:	609a      	str	r2, [r3, #8]
 80116e2:	f04a 0301 	orr.w	r3, sl, #1
 80116e6:	6053      	str	r3, [r2, #4]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	ea43 0308 	orr.w	r3, r3, r8
 80116f2:	607b      	str	r3, [r7, #4]
 80116f4:	e0b6      	b.n	8011864 <_realloc_r+0x2e4>
 80116f6:	45d0      	cmp	r8, sl
 80116f8:	dc35      	bgt.n	8011766 <_realloc_r+0x1e6>
 80116fa:	68cb      	ldr	r3, [r1, #12]
 80116fc:	688a      	ldr	r2, [r1, #8]
 80116fe:	4638      	mov	r0, r7
 8011700:	60d3      	str	r3, [r2, #12]
 8011702:	609a      	str	r2, [r3, #8]
 8011704:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	60d3      	str	r3, [r2, #12]
 801170c:	609a      	str	r2, [r3, #8]
 801170e:	1f2a      	subs	r2, r5, #4
 8011710:	2a24      	cmp	r2, #36	; 0x24
 8011712:	d823      	bhi.n	801175c <_realloc_r+0x1dc>
 8011714:	2a13      	cmp	r2, #19
 8011716:	d91a      	bls.n	801174e <_realloc_r+0x1ce>
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	60bb      	str	r3, [r7, #8]
 801171c:	6863      	ldr	r3, [r4, #4]
 801171e:	60fb      	str	r3, [r7, #12]
 8011720:	2a1b      	cmp	r2, #27
 8011722:	d803      	bhi.n	801172c <_realloc_r+0x1ac>
 8011724:	f107 0010 	add.w	r0, r7, #16
 8011728:	3408      	adds	r4, #8
 801172a:	e010      	b.n	801174e <_realloc_r+0x1ce>
 801172c:	68a3      	ldr	r3, [r4, #8]
 801172e:	613b      	str	r3, [r7, #16]
 8011730:	68e3      	ldr	r3, [r4, #12]
 8011732:	617b      	str	r3, [r7, #20]
 8011734:	2a24      	cmp	r2, #36	; 0x24
 8011736:	bf01      	itttt	eq
 8011738:	6923      	ldreq	r3, [r4, #16]
 801173a:	61bb      	streq	r3, [r7, #24]
 801173c:	6963      	ldreq	r3, [r4, #20]
 801173e:	61fb      	streq	r3, [r7, #28]
 8011740:	bf19      	ittee	ne
 8011742:	f107 0018 	addne.w	r0, r7, #24
 8011746:	3410      	addne	r4, #16
 8011748:	f107 0020 	addeq.w	r0, r7, #32
 801174c:	3418      	addeq	r4, #24
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	6003      	str	r3, [r0, #0]
 8011752:	6863      	ldr	r3, [r4, #4]
 8011754:	6043      	str	r3, [r0, #4]
 8011756:	68a3      	ldr	r3, [r4, #8]
 8011758:	6083      	str	r3, [r0, #8]
 801175a:	e002      	b.n	8011762 <_realloc_r+0x1e2>
 801175c:	4621      	mov	r1, r4
 801175e:	f7ff fb03 	bl	8010d68 <memmove>
 8011762:	4655      	mov	r5, sl
 8011764:	e02e      	b.n	80117c4 <_realloc_r+0x244>
 8011766:	45b0      	cmp	r8, r6
 8011768:	dc32      	bgt.n	80117d0 <_realloc_r+0x250>
 801176a:	4638      	mov	r0, r7
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011772:	60d3      	str	r3, [r2, #12]
 8011774:	609a      	str	r2, [r3, #8]
 8011776:	1f2a      	subs	r2, r5, #4
 8011778:	2a24      	cmp	r2, #36	; 0x24
 801177a:	d825      	bhi.n	80117c8 <_realloc_r+0x248>
 801177c:	2a13      	cmp	r2, #19
 801177e:	d91a      	bls.n	80117b6 <_realloc_r+0x236>
 8011780:	6823      	ldr	r3, [r4, #0]
 8011782:	60bb      	str	r3, [r7, #8]
 8011784:	6863      	ldr	r3, [r4, #4]
 8011786:	60fb      	str	r3, [r7, #12]
 8011788:	2a1b      	cmp	r2, #27
 801178a:	d803      	bhi.n	8011794 <_realloc_r+0x214>
 801178c:	f107 0010 	add.w	r0, r7, #16
 8011790:	3408      	adds	r4, #8
 8011792:	e010      	b.n	80117b6 <_realloc_r+0x236>
 8011794:	68a3      	ldr	r3, [r4, #8]
 8011796:	613b      	str	r3, [r7, #16]
 8011798:	68e3      	ldr	r3, [r4, #12]
 801179a:	617b      	str	r3, [r7, #20]
 801179c:	2a24      	cmp	r2, #36	; 0x24
 801179e:	bf01      	itttt	eq
 80117a0:	6923      	ldreq	r3, [r4, #16]
 80117a2:	61bb      	streq	r3, [r7, #24]
 80117a4:	6963      	ldreq	r3, [r4, #20]
 80117a6:	61fb      	streq	r3, [r7, #28]
 80117a8:	bf19      	ittee	ne
 80117aa:	f107 0018 	addne.w	r0, r7, #24
 80117ae:	3410      	addne	r4, #16
 80117b0:	f107 0020 	addeq.w	r0, r7, #32
 80117b4:	3418      	addeq	r4, #24
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	6863      	ldr	r3, [r4, #4]
 80117bc:	6043      	str	r3, [r0, #4]
 80117be:	68a3      	ldr	r3, [r4, #8]
 80117c0:	6083      	str	r3, [r0, #8]
 80117c2:	4635      	mov	r5, r6
 80117c4:	46bb      	mov	fp, r7
 80117c6:	e055      	b.n	8011874 <_realloc_r+0x2f4>
 80117c8:	4621      	mov	r1, r4
 80117ca:	f7ff facd 	bl	8010d68 <memmove>
 80117ce:	e7f8      	b.n	80117c2 <_realloc_r+0x242>
 80117d0:	4611      	mov	r1, r2
 80117d2:	4648      	mov	r0, r9
 80117d4:	f7fa f938 	bl	800ba48 <_malloc_r>
 80117d8:	4606      	mov	r6, r0
 80117da:	2800      	cmp	r0, #0
 80117dc:	d042      	beq.n	8011864 <_realloc_r+0x2e4>
 80117de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80117e2:	f023 0301 	bic.w	r3, r3, #1
 80117e6:	f1a0 0208 	sub.w	r2, r0, #8
 80117ea:	445b      	add	r3, fp
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d105      	bne.n	80117fc <_realloc_r+0x27c>
 80117f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80117f4:	f023 0303 	bic.w	r3, r3, #3
 80117f8:	441d      	add	r5, r3
 80117fa:	e03b      	b.n	8011874 <_realloc_r+0x2f4>
 80117fc:	1f2a      	subs	r2, r5, #4
 80117fe:	2a24      	cmp	r2, #36	; 0x24
 8011800:	d829      	bhi.n	8011856 <_realloc_r+0x2d6>
 8011802:	2a13      	cmp	r2, #19
 8011804:	d91e      	bls.n	8011844 <_realloc_r+0x2c4>
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	6003      	str	r3, [r0, #0]
 801180a:	6863      	ldr	r3, [r4, #4]
 801180c:	6043      	str	r3, [r0, #4]
 801180e:	2a1b      	cmp	r2, #27
 8011810:	d804      	bhi.n	801181c <_realloc_r+0x29c>
 8011812:	f100 0308 	add.w	r3, r0, #8
 8011816:	f104 0208 	add.w	r2, r4, #8
 801181a:	e015      	b.n	8011848 <_realloc_r+0x2c8>
 801181c:	68a3      	ldr	r3, [r4, #8]
 801181e:	6083      	str	r3, [r0, #8]
 8011820:	68e3      	ldr	r3, [r4, #12]
 8011822:	60c3      	str	r3, [r0, #12]
 8011824:	2a24      	cmp	r2, #36	; 0x24
 8011826:	bf01      	itttt	eq
 8011828:	6923      	ldreq	r3, [r4, #16]
 801182a:	6103      	streq	r3, [r0, #16]
 801182c:	6961      	ldreq	r1, [r4, #20]
 801182e:	6141      	streq	r1, [r0, #20]
 8011830:	bf19      	ittee	ne
 8011832:	f100 0310 	addne.w	r3, r0, #16
 8011836:	f104 0210 	addne.w	r2, r4, #16
 801183a:	f100 0318 	addeq.w	r3, r0, #24
 801183e:	f104 0218 	addeq.w	r2, r4, #24
 8011842:	e001      	b.n	8011848 <_realloc_r+0x2c8>
 8011844:	4603      	mov	r3, r0
 8011846:	4622      	mov	r2, r4
 8011848:	6811      	ldr	r1, [r2, #0]
 801184a:	6019      	str	r1, [r3, #0]
 801184c:	6851      	ldr	r1, [r2, #4]
 801184e:	6059      	str	r1, [r3, #4]
 8011850:	6892      	ldr	r2, [r2, #8]
 8011852:	609a      	str	r2, [r3, #8]
 8011854:	e002      	b.n	801185c <_realloc_r+0x2dc>
 8011856:	4621      	mov	r1, r4
 8011858:	f7ff fa86 	bl	8010d68 <memmove>
 801185c:	4621      	mov	r1, r4
 801185e:	4648      	mov	r0, r9
 8011860:	f7fe fcc8 	bl	80101f4 <_free_r>
 8011864:	4648      	mov	r0, r9
 8011866:	f7fa fb23 	bl	800beb0 <__malloc_unlock>
 801186a:	4630      	mov	r0, r6
 801186c:	e02d      	b.n	80118ca <_realloc_r+0x34a>
 801186e:	bf00      	nop
 8011870:	20010124 	.word	0x20010124
 8011874:	ebc8 0205 	rsb	r2, r8, r5
 8011878:	2a0f      	cmp	r2, #15
 801187a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801187e:	d914      	bls.n	80118aa <_realloc_r+0x32a>
 8011880:	f003 0301 	and.w	r3, r3, #1
 8011884:	eb0b 0108 	add.w	r1, fp, r8
 8011888:	ea43 0308 	orr.w	r3, r3, r8
 801188c:	f8cb 3004 	str.w	r3, [fp, #4]
 8011890:	f042 0301 	orr.w	r3, r2, #1
 8011894:	440a      	add	r2, r1
 8011896:	604b      	str	r3, [r1, #4]
 8011898:	6853      	ldr	r3, [r2, #4]
 801189a:	f043 0301 	orr.w	r3, r3, #1
 801189e:	6053      	str	r3, [r2, #4]
 80118a0:	3108      	adds	r1, #8
 80118a2:	4648      	mov	r0, r9
 80118a4:	f7fe fca6 	bl	80101f4 <_free_r>
 80118a8:	e00a      	b.n	80118c0 <_realloc_r+0x340>
 80118aa:	f003 0301 	and.w	r3, r3, #1
 80118ae:	432b      	orrs	r3, r5
 80118b0:	eb0b 0205 	add.w	r2, fp, r5
 80118b4:	f8cb 3004 	str.w	r3, [fp, #4]
 80118b8:	6853      	ldr	r3, [r2, #4]
 80118ba:	f043 0301 	orr.w	r3, r3, #1
 80118be:	6053      	str	r3, [r2, #4]
 80118c0:	4648      	mov	r0, r9
 80118c2:	f7fa faf5 	bl	800beb0 <__malloc_unlock>
 80118c6:	f10b 0008 	add.w	r0, fp, #8
 80118ca:	b003      	add	sp, #12
 80118cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118d0 <nanf>:
 80118d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80118d8 <nanf+0x8>
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop
 80118d8:	7fc00000 	.word	0x7fc00000

080118dc <__sread>:
 80118dc:	b510      	push	{r4, lr}
 80118de:	460c      	mov	r4, r1
 80118e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118e4:	f000 fa14 	bl	8011d10 <_read_r>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	bfab      	itete	ge
 80118ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118ee:	89a3      	ldrhlt	r3, [r4, #12]
 80118f0:	181b      	addge	r3, r3, r0
 80118f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118f6:	bfac      	ite	ge
 80118f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80118fa:	81a3      	strhlt	r3, [r4, #12]
 80118fc:	bd10      	pop	{r4, pc}

080118fe <__swrite>:
 80118fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011902:	461f      	mov	r7, r3
 8011904:	898b      	ldrh	r3, [r1, #12]
 8011906:	05db      	lsls	r3, r3, #23
 8011908:	4605      	mov	r5, r0
 801190a:	460c      	mov	r4, r1
 801190c:	4616      	mov	r6, r2
 801190e:	d505      	bpl.n	801191c <__swrite+0x1e>
 8011910:	2302      	movs	r3, #2
 8011912:	2200      	movs	r2, #0
 8011914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011918:	f000 f9e8 	bl	8011cec <_lseek_r>
 801191c:	89a3      	ldrh	r3, [r4, #12]
 801191e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011926:	81a3      	strh	r3, [r4, #12]
 8011928:	4632      	mov	r2, r6
 801192a:	463b      	mov	r3, r7
 801192c:	4628      	mov	r0, r5
 801192e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011932:	f000 b8c7 	b.w	8011ac4 <_write_r>

08011936 <__sseek>:
 8011936:	b510      	push	{r4, lr}
 8011938:	460c      	mov	r4, r1
 801193a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801193e:	f000 f9d5 	bl	8011cec <_lseek_r>
 8011942:	1c43      	adds	r3, r0, #1
 8011944:	89a3      	ldrh	r3, [r4, #12]
 8011946:	bf15      	itete	ne
 8011948:	6560      	strne	r0, [r4, #84]	; 0x54
 801194a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801194e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011952:	81a3      	strheq	r3, [r4, #12]
 8011954:	bf18      	it	ne
 8011956:	81a3      	strhne	r3, [r4, #12]
 8011958:	bd10      	pop	{r4, pc}

0801195a <__sclose>:
 801195a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801195e:	f000 b8f1 	b.w	8011b44 <_close_r>

08011962 <__ssprint_r>:
 8011962:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011966:	4693      	mov	fp, r2
 8011968:	6892      	ldr	r2, [r2, #8]
 801196a:	4681      	mov	r9, r0
 801196c:	460c      	mov	r4, r1
 801196e:	b34a      	cbz	r2, 80119c4 <__ssprint_r+0x62>
 8011970:	2300      	movs	r3, #0
 8011972:	f8db a000 	ldr.w	sl, [fp]
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	461f      	mov	r7, r3
 801197a:	e006      	b.n	801198a <__ssprint_r+0x28>
 801197c:	f8da 3000 	ldr.w	r3, [sl]
 8011980:	f8da 7004 	ldr.w	r7, [sl, #4]
 8011984:	9301      	str	r3, [sp, #4]
 8011986:	f10a 0a08 	add.w	sl, sl, #8
 801198a:	2f00      	cmp	r7, #0
 801198c:	d0f6      	beq.n	801197c <__ssprint_r+0x1a>
 801198e:	68a6      	ldr	r6, [r4, #8]
 8011990:	42b7      	cmp	r7, r6
 8011992:	d360      	bcc.n	8011a56 <__ssprint_r+0xf4>
 8011994:	89a0      	ldrh	r0, [r4, #12]
 8011996:	f410 6f90 	tst.w	r0, #1152	; 0x480
 801199a:	d117      	bne.n	80119cc <__ssprint_r+0x6a>
 801199c:	42b7      	cmp	r7, r6
 801199e:	d35a      	bcc.n	8011a56 <__ssprint_r+0xf4>
 80119a0:	4632      	mov	r2, r6
 80119a2:	9901      	ldr	r1, [sp, #4]
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	f7ff f9df 	bl	8010d68 <memmove>
 80119aa:	68a2      	ldr	r2, [r4, #8]
 80119ac:	1b92      	subs	r2, r2, r6
 80119ae:	60a2      	str	r2, [r4, #8]
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	4416      	add	r6, r2
 80119b4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80119b8:	6026      	str	r6, [r4, #0]
 80119ba:	1bd7      	subs	r7, r2, r7
 80119bc:	f8cb 7008 	str.w	r7, [fp, #8]
 80119c0:	2f00      	cmp	r7, #0
 80119c2:	d1db      	bne.n	801197c <__ssprint_r+0x1a>
 80119c4:	2000      	movs	r0, #0
 80119c6:	f8cb 0004 	str.w	r0, [fp, #4]
 80119ca:	e046      	b.n	8011a5a <__ssprint_r+0xf8>
 80119cc:	6825      	ldr	r5, [r4, #0]
 80119ce:	6921      	ldr	r1, [r4, #16]
 80119d0:	ebc1 0805 	rsb	r8, r1, r5
 80119d4:	f108 0201 	add.w	r2, r8, #1
 80119d8:	6965      	ldr	r5, [r4, #20]
 80119da:	443a      	add	r2, r7
 80119dc:	2302      	movs	r3, #2
 80119de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119e2:	fb95 f5f3 	sdiv	r5, r5, r3
 80119e6:	4295      	cmp	r5, r2
 80119e8:	bf38      	it	cc
 80119ea:	4615      	movcc	r5, r2
 80119ec:	0543      	lsls	r3, r0, #21
 80119ee:	d510      	bpl.n	8011a12 <__ssprint_r+0xb0>
 80119f0:	4629      	mov	r1, r5
 80119f2:	4648      	mov	r0, r9
 80119f4:	f7fa f828 	bl	800ba48 <_malloc_r>
 80119f8:	4606      	mov	r6, r0
 80119fa:	b1a0      	cbz	r0, 8011a26 <__ssprint_r+0xc4>
 80119fc:	4642      	mov	r2, r8
 80119fe:	6921      	ldr	r1, [r4, #16]
 8011a00:	f7fa fa42 	bl	800be88 <memcpy>
 8011a04:	89a2      	ldrh	r2, [r4, #12]
 8011a06:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8011a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011a0e:	81a2      	strh	r2, [r4, #12]
 8011a10:	e018      	b.n	8011a44 <__ssprint_r+0xe2>
 8011a12:	462a      	mov	r2, r5
 8011a14:	4648      	mov	r0, r9
 8011a16:	f7ff fdb3 	bl	8011580 <_realloc_r>
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	b990      	cbnz	r0, 8011a44 <__ssprint_r+0xe2>
 8011a1e:	6921      	ldr	r1, [r4, #16]
 8011a20:	4648      	mov	r0, r9
 8011a22:	f7fe fbe7 	bl	80101f4 <_free_r>
 8011a26:	220c      	movs	r2, #12
 8011a28:	f8c9 2000 	str.w	r2, [r9]
 8011a2c:	89a2      	ldrh	r2, [r4, #12]
 8011a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011a32:	81a2      	strh	r2, [r4, #12]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f8cb 2008 	str.w	r2, [fp, #8]
 8011a3a:	f8cb 2004 	str.w	r2, [fp, #4]
 8011a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a42:	e00a      	b.n	8011a5a <__ssprint_r+0xf8>
 8011a44:	6126      	str	r6, [r4, #16]
 8011a46:	6165      	str	r5, [r4, #20]
 8011a48:	4446      	add	r6, r8
 8011a4a:	ebc8 0505 	rsb	r5, r8, r5
 8011a4e:	6026      	str	r6, [r4, #0]
 8011a50:	60a5      	str	r5, [r4, #8]
 8011a52:	463e      	mov	r6, r7
 8011a54:	e7a2      	b.n	801199c <__ssprint_r+0x3a>
 8011a56:	463e      	mov	r6, r7
 8011a58:	e7a2      	b.n	80119a0 <__ssprint_r+0x3e>
 8011a5a:	b003      	add	sp, #12
 8011a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a60 <__sprint_r>:
 8011a60:	6893      	ldr	r3, [r2, #8]
 8011a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a66:	4680      	mov	r8, r0
 8011a68:	460f      	mov	r7, r1
 8011a6a:	4614      	mov	r4, r2
 8011a6c:	b91b      	cbnz	r3, 8011a76 <__sprint_r+0x16>
 8011a6e:	6053      	str	r3, [r2, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011a78:	049d      	lsls	r5, r3, #18
 8011a7a:	d51c      	bpl.n	8011ab6 <__sprint_r+0x56>
 8011a7c:	6815      	ldr	r5, [r2, #0]
 8011a7e:	68a0      	ldr	r0, [r4, #8]
 8011a80:	3508      	adds	r5, #8
 8011a82:	b1d0      	cbz	r0, 8011aba <__sprint_r+0x5a>
 8011a84:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8011a88:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8011a8c:	08b6      	lsrs	r6, r6, #2
 8011a8e:	f04f 0900 	mov.w	r9, #0
 8011a92:	454e      	cmp	r6, r9
 8011a94:	dd0a      	ble.n	8011aac <__sprint_r+0x4c>
 8011a96:	463a      	mov	r2, r7
 8011a98:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8011a9c:	4640      	mov	r0, r8
 8011a9e:	f000 f8f2 	bl	8011c86 <_fputwc_r>
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	d009      	beq.n	8011aba <__sprint_r+0x5a>
 8011aa6:	f109 0901 	add.w	r9, r9, #1
 8011aaa:	e7f2      	b.n	8011a92 <__sprint_r+0x32>
 8011aac:	68a3      	ldr	r3, [r4, #8]
 8011aae:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8011ab2:	60a6      	str	r6, [r4, #8]
 8011ab4:	e7e3      	b.n	8011a7e <__sprint_r+0x1e>
 8011ab6:	f7fe fc5b 	bl	8010370 <__sfvwrite_r>
 8011aba:	2300      	movs	r3, #0
 8011abc:	60a3      	str	r3, [r4, #8]
 8011abe:	6063      	str	r3, [r4, #4]
 8011ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011ac4 <_write_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4c07      	ldr	r4, [pc, #28]	; (8011ae4 <_write_r+0x20>)
 8011ac8:	4605      	mov	r5, r0
 8011aca:	4608      	mov	r0, r1
 8011acc:	4611      	mov	r1, r2
 8011ace:	2200      	movs	r2, #0
 8011ad0:	6022      	str	r2, [r4, #0]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	f7f0 fa14 	bl	8001f00 <_write>
 8011ad8:	1c43      	adds	r3, r0, #1
 8011ada:	d102      	bne.n	8011ae2 <_write_r+0x1e>
 8011adc:	6823      	ldr	r3, [r4, #0]
 8011ade:	b103      	cbz	r3, 8011ae2 <_write_r+0x1e>
 8011ae0:	602b      	str	r3, [r5, #0]
 8011ae2:	bd38      	pop	{r3, r4, r5, pc}
 8011ae4:	200149d8 	.word	0x200149d8

08011ae8 <_calloc_r>:
 8011ae8:	b510      	push	{r4, lr}
 8011aea:	4351      	muls	r1, r2
 8011aec:	f7f9 ffac 	bl	800ba48 <_malloc_r>
 8011af0:	4604      	mov	r4, r0
 8011af2:	b320      	cbz	r0, 8011b3e <_calloc_r+0x56>
 8011af4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8011af8:	f022 0203 	bic.w	r2, r2, #3
 8011afc:	3a04      	subs	r2, #4
 8011afe:	2a24      	cmp	r2, #36	; 0x24
 8011b00:	d81a      	bhi.n	8011b38 <_calloc_r+0x50>
 8011b02:	2a13      	cmp	r2, #19
 8011b04:	d912      	bls.n	8011b2c <_calloc_r+0x44>
 8011b06:	2100      	movs	r1, #0
 8011b08:	2a1b      	cmp	r2, #27
 8011b0a:	6001      	str	r1, [r0, #0]
 8011b0c:	6041      	str	r1, [r0, #4]
 8011b0e:	d802      	bhi.n	8011b16 <_calloc_r+0x2e>
 8011b10:	f100 0308 	add.w	r3, r0, #8
 8011b14:	e00b      	b.n	8011b2e <_calloc_r+0x46>
 8011b16:	2a24      	cmp	r2, #36	; 0x24
 8011b18:	6081      	str	r1, [r0, #8]
 8011b1a:	60c1      	str	r1, [r0, #12]
 8011b1c:	bf11      	iteee	ne
 8011b1e:	f100 0310 	addne.w	r3, r0, #16
 8011b22:	6101      	streq	r1, [r0, #16]
 8011b24:	f100 0318 	addeq.w	r3, r0, #24
 8011b28:	6141      	streq	r1, [r0, #20]
 8011b2a:	e000      	b.n	8011b2e <_calloc_r+0x46>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2200      	movs	r2, #0
 8011b30:	601a      	str	r2, [r3, #0]
 8011b32:	605a      	str	r2, [r3, #4]
 8011b34:	609a      	str	r2, [r3, #8]
 8011b36:	e002      	b.n	8011b3e <_calloc_r+0x56>
 8011b38:	2100      	movs	r1, #0
 8011b3a:	f7fa f9b0 	bl	800be9e <memset>
 8011b3e:	4620      	mov	r0, r4
 8011b40:	bd10      	pop	{r4, pc}
	...

08011b44 <_close_r>:
 8011b44:	b538      	push	{r3, r4, r5, lr}
 8011b46:	4c06      	ldr	r4, [pc, #24]	; (8011b60 <_close_r+0x1c>)
 8011b48:	2300      	movs	r3, #0
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	4608      	mov	r0, r1
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	f7f0 fa1e 	bl	8001f90 <_close>
 8011b54:	1c43      	adds	r3, r0, #1
 8011b56:	d102      	bne.n	8011b5e <_close_r+0x1a>
 8011b58:	6823      	ldr	r3, [r4, #0]
 8011b5a:	b103      	cbz	r3, 8011b5e <_close_r+0x1a>
 8011b5c:	602b      	str	r3, [r5, #0]
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	200149d8 	.word	0x200149d8

08011b64 <_fclose_r>:
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	4605      	mov	r5, r0
 8011b68:	460c      	mov	r4, r1
 8011b6a:	b909      	cbnz	r1, 8011b70 <_fclose_r+0xc>
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	bd70      	pop	{r4, r5, r6, pc}
 8011b70:	b118      	cbz	r0, 8011b7a <_fclose_r+0x16>
 8011b72:	6983      	ldr	r3, [r0, #24]
 8011b74:	b90b      	cbnz	r3, 8011b7a <_fclose_r+0x16>
 8011b76:	f7fe fa75 	bl	8010064 <__sinit>
 8011b7a:	4b20      	ldr	r3, [pc, #128]	; (8011bfc <_fclose_r+0x98>)
 8011b7c:	429c      	cmp	r4, r3
 8011b7e:	d101      	bne.n	8011b84 <_fclose_r+0x20>
 8011b80:	686c      	ldr	r4, [r5, #4]
 8011b82:	e008      	b.n	8011b96 <_fclose_r+0x32>
 8011b84:	4b1e      	ldr	r3, [pc, #120]	; (8011c00 <_fclose_r+0x9c>)
 8011b86:	429c      	cmp	r4, r3
 8011b88:	d101      	bne.n	8011b8e <_fclose_r+0x2a>
 8011b8a:	68ac      	ldr	r4, [r5, #8]
 8011b8c:	e003      	b.n	8011b96 <_fclose_r+0x32>
 8011b8e:	4b1d      	ldr	r3, [pc, #116]	; (8011c04 <_fclose_r+0xa0>)
 8011b90:	429c      	cmp	r4, r3
 8011b92:	bf08      	it	eq
 8011b94:	68ec      	ldreq	r4, [r5, #12]
 8011b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d0e6      	beq.n	8011b6c <_fclose_r+0x8>
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	f7fe f965 	bl	800fe70 <__sflush_r>
 8011ba6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ba8:	4606      	mov	r6, r0
 8011baa:	b133      	cbz	r3, 8011bba <_fclose_r+0x56>
 8011bac:	6a21      	ldr	r1, [r4, #32]
 8011bae:	4628      	mov	r0, r5
 8011bb0:	4798      	blx	r3
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	bfb8      	it	lt
 8011bb6:	f04f 36ff 	movlt.w	r6, #4294967295
 8011bba:	89a3      	ldrh	r3, [r4, #12]
 8011bbc:	061b      	lsls	r3, r3, #24
 8011bbe:	d503      	bpl.n	8011bc8 <_fclose_r+0x64>
 8011bc0:	6921      	ldr	r1, [r4, #16]
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f7fe fb16 	bl	80101f4 <_free_r>
 8011bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bca:	b141      	cbz	r1, 8011bde <_fclose_r+0x7a>
 8011bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bd0:	4299      	cmp	r1, r3
 8011bd2:	d002      	beq.n	8011bda <_fclose_r+0x76>
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f7fe fb0d 	bl	80101f4 <_free_r>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8011bde:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011be0:	b121      	cbz	r1, 8011bec <_fclose_r+0x88>
 8011be2:	4628      	mov	r0, r5
 8011be4:	f7fe fb06 	bl	80101f4 <_free_r>
 8011be8:	2300      	movs	r3, #0
 8011bea:	64a3      	str	r3, [r4, #72]	; 0x48
 8011bec:	f7fe faaa 	bl	8010144 <__sfp_lock_acquire>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	81a3      	strh	r3, [r4, #12]
 8011bf4:	f7fe faa7 	bl	8010146 <__sfp_lock_release>
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	bd70      	pop	{r4, r5, r6, pc}
 8011bfc:	080154ec 	.word	0x080154ec
 8011c00:	0801550c 	.word	0x0801550c
 8011c04:	0801552c 	.word	0x0801552c

08011c08 <__fputwc>:
 8011c08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011c0c:	4680      	mov	r8, r0
 8011c0e:	460e      	mov	r6, r1
 8011c10:	4614      	mov	r4, r2
 8011c12:	f7ff f837 	bl	8010c84 <__locale_mb_cur_max>
 8011c16:	2801      	cmp	r0, #1
 8011c18:	d106      	bne.n	8011c28 <__fputwc+0x20>
 8011c1a:	1e73      	subs	r3, r6, #1
 8011c1c:	2bfe      	cmp	r3, #254	; 0xfe
 8011c1e:	d803      	bhi.n	8011c28 <__fputwc+0x20>
 8011c20:	f88d 6004 	strb.w	r6, [sp, #4]
 8011c24:	4605      	mov	r5, r0
 8011c26:	e00e      	b.n	8011c46 <__fputwc+0x3e>
 8011c28:	4632      	mov	r2, r6
 8011c2a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8011c2e:	a901      	add	r1, sp, #4
 8011c30:	4640      	mov	r0, r8
 8011c32:	f000 f8dd 	bl	8011df0 <_wcrtomb_r>
 8011c36:	1c42      	adds	r2, r0, #1
 8011c38:	4605      	mov	r5, r0
 8011c3a:	d104      	bne.n	8011c46 <__fputwc+0x3e>
 8011c3c:	89a3      	ldrh	r3, [r4, #12]
 8011c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c42:	81a3      	strh	r3, [r4, #12]
 8011c44:	e01c      	b.n	8011c80 <__fputwc+0x78>
 8011c46:	2700      	movs	r7, #0
 8011c48:	42af      	cmp	r7, r5
 8011c4a:	d018      	beq.n	8011c7e <__fputwc+0x76>
 8011c4c:	ab01      	add	r3, sp, #4
 8011c4e:	5cf9      	ldrb	r1, [r7, r3]
 8011c50:	68a3      	ldr	r3, [r4, #8]
 8011c52:	3b01      	subs	r3, #1
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	60a3      	str	r3, [r4, #8]
 8011c58:	da04      	bge.n	8011c64 <__fputwc+0x5c>
 8011c5a:	69a2      	ldr	r2, [r4, #24]
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	db06      	blt.n	8011c6e <__fputwc+0x66>
 8011c60:	290a      	cmp	r1, #10
 8011c62:	d004      	beq.n	8011c6e <__fputwc+0x66>
 8011c64:	6823      	ldr	r3, [r4, #0]
 8011c66:	1c5a      	adds	r2, r3, #1
 8011c68:	6022      	str	r2, [r4, #0]
 8011c6a:	7019      	strb	r1, [r3, #0]
 8011c6c:	e005      	b.n	8011c7a <__fputwc+0x72>
 8011c6e:	4622      	mov	r2, r4
 8011c70:	4640      	mov	r0, r8
 8011c72:	f000 f85f 	bl	8011d34 <__swbuf_r>
 8011c76:	1c43      	adds	r3, r0, #1
 8011c78:	d002      	beq.n	8011c80 <__fputwc+0x78>
 8011c7a:	3701      	adds	r7, #1
 8011c7c:	e7e4      	b.n	8011c48 <__fputwc+0x40>
 8011c7e:	4630      	mov	r0, r6
 8011c80:	b002      	add	sp, #8
 8011c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c86 <_fputwc_r>:
 8011c86:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8011c8a:	b410      	push	{r4}
 8011c8c:	049c      	lsls	r4, r3, #18
 8011c8e:	d406      	bmi.n	8011c9e <_fputwc_r+0x18>
 8011c90:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8011c92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011c96:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8011c9a:	8193      	strh	r3, [r2, #12]
 8011c9c:	6654      	str	r4, [r2, #100]	; 0x64
 8011c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ca2:	f7ff bfb1 	b.w	8011c08 <__fputwc>
	...

08011ca8 <_fstat_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4c07      	ldr	r4, [pc, #28]	; (8011cc8 <_fstat_r+0x20>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4605      	mov	r5, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	f7f0 f977 	bl	8001fa8 <_fstat>
 8011cba:	1c43      	adds	r3, r0, #1
 8011cbc:	d102      	bne.n	8011cc4 <_fstat_r+0x1c>
 8011cbe:	6823      	ldr	r3, [r4, #0]
 8011cc0:	b103      	cbz	r3, 8011cc4 <_fstat_r+0x1c>
 8011cc2:	602b      	str	r3, [r5, #0]
 8011cc4:	bd38      	pop	{r3, r4, r5, pc}
 8011cc6:	bf00      	nop
 8011cc8:	200149d8 	.word	0x200149d8

08011ccc <_isatty_r>:
 8011ccc:	b538      	push	{r3, r4, r5, lr}
 8011cce:	4c06      	ldr	r4, [pc, #24]	; (8011ce8 <_isatty_r+0x1c>)
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	4608      	mov	r0, r1
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	f7f0 f976 	bl	8001fc8 <_isatty>
 8011cdc:	1c43      	adds	r3, r0, #1
 8011cde:	d102      	bne.n	8011ce6 <_isatty_r+0x1a>
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	b103      	cbz	r3, 8011ce6 <_isatty_r+0x1a>
 8011ce4:	602b      	str	r3, [r5, #0]
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	200149d8 	.word	0x200149d8

08011cec <_lseek_r>:
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4c07      	ldr	r4, [pc, #28]	; (8011d0c <_lseek_r+0x20>)
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	4608      	mov	r0, r1
 8011cf4:	4611      	mov	r1, r2
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	6022      	str	r2, [r4, #0]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	f7f0 f970 	bl	8001fe0 <_lseek>
 8011d00:	1c43      	adds	r3, r0, #1
 8011d02:	d102      	bne.n	8011d0a <_lseek_r+0x1e>
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	b103      	cbz	r3, 8011d0a <_lseek_r+0x1e>
 8011d08:	602b      	str	r3, [r5, #0]
 8011d0a:	bd38      	pop	{r3, r4, r5, pc}
 8011d0c:	200149d8 	.word	0x200149d8

08011d10 <_read_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4c07      	ldr	r4, [pc, #28]	; (8011d30 <_read_r+0x20>)
 8011d14:	4605      	mov	r5, r0
 8011d16:	4608      	mov	r0, r1
 8011d18:	4611      	mov	r1, r2
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	6022      	str	r2, [r4, #0]
 8011d1e:	461a      	mov	r2, r3
 8011d20:	f7f0 f8d2 	bl	8001ec8 <_read>
 8011d24:	1c43      	adds	r3, r0, #1
 8011d26:	d102      	bne.n	8011d2e <_read_r+0x1e>
 8011d28:	6823      	ldr	r3, [r4, #0]
 8011d2a:	b103      	cbz	r3, 8011d2e <_read_r+0x1e>
 8011d2c:	602b      	str	r3, [r5, #0]
 8011d2e:	bd38      	pop	{r3, r4, r5, pc}
 8011d30:	200149d8 	.word	0x200149d8

08011d34 <__swbuf_r>:
 8011d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d36:	460f      	mov	r7, r1
 8011d38:	4614      	mov	r4, r2
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	b118      	cbz	r0, 8011d46 <__swbuf_r+0x12>
 8011d3e:	6983      	ldr	r3, [r0, #24]
 8011d40:	b90b      	cbnz	r3, 8011d46 <__swbuf_r+0x12>
 8011d42:	f7fe f98f 	bl	8010064 <__sinit>
 8011d46:	4b27      	ldr	r3, [pc, #156]	; (8011de4 <__swbuf_r+0xb0>)
 8011d48:	429c      	cmp	r4, r3
 8011d4a:	d101      	bne.n	8011d50 <__swbuf_r+0x1c>
 8011d4c:	6874      	ldr	r4, [r6, #4]
 8011d4e:	e008      	b.n	8011d62 <__swbuf_r+0x2e>
 8011d50:	4b25      	ldr	r3, [pc, #148]	; (8011de8 <__swbuf_r+0xb4>)
 8011d52:	429c      	cmp	r4, r3
 8011d54:	d101      	bne.n	8011d5a <__swbuf_r+0x26>
 8011d56:	68b4      	ldr	r4, [r6, #8]
 8011d58:	e003      	b.n	8011d62 <__swbuf_r+0x2e>
 8011d5a:	4b24      	ldr	r3, [pc, #144]	; (8011dec <__swbuf_r+0xb8>)
 8011d5c:	429c      	cmp	r4, r3
 8011d5e:	bf08      	it	eq
 8011d60:	68f4      	ldreq	r4, [r6, #12]
 8011d62:	69a3      	ldr	r3, [r4, #24]
 8011d64:	60a3      	str	r3, [r4, #8]
 8011d66:	89a3      	ldrh	r3, [r4, #12]
 8011d68:	0719      	lsls	r1, r3, #28
 8011d6a:	d50e      	bpl.n	8011d8a <__swbuf_r+0x56>
 8011d6c:	6923      	ldr	r3, [r4, #16]
 8011d6e:	b163      	cbz	r3, 8011d8a <__swbuf_r+0x56>
 8011d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d74:	049a      	lsls	r2, r3, #18
 8011d76:	b2fd      	uxtb	r5, r7
 8011d78:	d410      	bmi.n	8011d9c <__swbuf_r+0x68>
 8011d7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011d7e:	81a3      	strh	r3, [r4, #12]
 8011d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011d86:	6663      	str	r3, [r4, #100]	; 0x64
 8011d88:	e008      	b.n	8011d9c <__swbuf_r+0x68>
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f7fd f9cf 	bl	800f130 <__swsetup_r>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d0ec      	beq.n	8011d70 <__swbuf_r+0x3c>
 8011d96:	f04f 30ff 	mov.w	r0, #4294967295
 8011d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d9c:	6823      	ldr	r3, [r4, #0]
 8011d9e:	6920      	ldr	r0, [r4, #16]
 8011da0:	1a18      	subs	r0, r3, r0
 8011da2:	6963      	ldr	r3, [r4, #20]
 8011da4:	4298      	cmp	r0, r3
 8011da6:	db05      	blt.n	8011db4 <__swbuf_r+0x80>
 8011da8:	4621      	mov	r1, r4
 8011daa:	4630      	mov	r0, r6
 8011dac:	f7fe f8f0 	bl	800ff90 <_fflush_r>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d1f0      	bne.n	8011d96 <__swbuf_r+0x62>
 8011db4:	68a3      	ldr	r3, [r4, #8]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	60a3      	str	r3, [r4, #8]
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	1c5a      	adds	r2, r3, #1
 8011dbe:	6022      	str	r2, [r4, #0]
 8011dc0:	701f      	strb	r7, [r3, #0]
 8011dc2:	6962      	ldr	r2, [r4, #20]
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d004      	beq.n	8011dd4 <__swbuf_r+0xa0>
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	07db      	lsls	r3, r3, #31
 8011dce:	d507      	bpl.n	8011de0 <__swbuf_r+0xac>
 8011dd0:	2d0a      	cmp	r5, #10
 8011dd2:	d105      	bne.n	8011de0 <__swbuf_r+0xac>
 8011dd4:	4621      	mov	r1, r4
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f7fe f8da 	bl	800ff90 <_fflush_r>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d1da      	bne.n	8011d96 <__swbuf_r+0x62>
 8011de0:	4628      	mov	r0, r5
 8011de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de4:	080154ec 	.word	0x080154ec
 8011de8:	0801550c 	.word	0x0801550c
 8011dec:	0801552c 	.word	0x0801552c

08011df0 <_wcrtomb_r>:
 8011df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df4:	461d      	mov	r5, r3
 8011df6:	4b0f      	ldr	r3, [pc, #60]	; (8011e34 <_wcrtomb_r+0x44>)
 8011df8:	b086      	sub	sp, #24
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	4690      	mov	r8, r2
 8011dfe:	460e      	mov	r6, r1
 8011e00:	681f      	ldr	r7, [r3, #0]
 8011e02:	b931      	cbnz	r1, 8011e12 <_wcrtomb_r+0x22>
 8011e04:	f7fe ff3a 	bl	8010c7c <__locale_charset>
 8011e08:	9500      	str	r5, [sp, #0]
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	4632      	mov	r2, r6
 8011e0e:	a903      	add	r1, sp, #12
 8011e10:	e005      	b.n	8011e1e <_wcrtomb_r+0x2e>
 8011e12:	f7fe ff33 	bl	8010c7c <__locale_charset>
 8011e16:	9500      	str	r5, [sp, #0]
 8011e18:	4603      	mov	r3, r0
 8011e1a:	4642      	mov	r2, r8
 8011e1c:	4631      	mov	r1, r6
 8011e1e:	4620      	mov	r0, r4
 8011e20:	47b8      	blx	r7
 8011e22:	1c43      	adds	r3, r0, #1
 8011e24:	bf01      	itttt	eq
 8011e26:	2300      	moveq	r3, #0
 8011e28:	602b      	streq	r3, [r5, #0]
 8011e2a:	238a      	moveq	r3, #138	; 0x8a
 8011e2c:	6023      	streq	r3, [r4, #0]
 8011e2e:	b006      	add	sp, #24
 8011e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e34:	20010594 	.word	0x20010594

08011e38 <__ascii_wctomb>:
 8011e38:	b149      	cbz	r1, 8011e4e <__ascii_wctomb+0x16>
 8011e3a:	2aff      	cmp	r2, #255	; 0xff
 8011e3c:	bf85      	ittet	hi
 8011e3e:	238a      	movhi	r3, #138	; 0x8a
 8011e40:	6003      	strhi	r3, [r0, #0]
 8011e42:	700a      	strbls	r2, [r1, #0]
 8011e44:	f04f 30ff 	movhi.w	r0, #4294967295
 8011e48:	bf98      	it	ls
 8011e4a:	2001      	movls	r0, #1
 8011e4c:	4770      	bx	lr
 8011e4e:	4608      	mov	r0, r1
 8011e50:	4770      	bx	lr
 8011e52:	0000      	movs	r0, r0
 8011e54:	0000      	movs	r0, r0
	...

08011e58 <cos>:
 8011e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e5a:	ec51 0b10 	vmov	r0, r1, d0
 8011e5e:	4a1e      	ldr	r2, [pc, #120]	; (8011ed8 <cos+0x80>)
 8011e60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e64:	4293      	cmp	r3, r2
 8011e66:	dc02      	bgt.n	8011e6e <cos+0x16>
 8011e68:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011ed0 <cos+0x78>
 8011e6c:	e016      	b.n	8011e9c <cos+0x44>
 8011e6e:	4a1b      	ldr	r2, [pc, #108]	; (8011edc <cos+0x84>)
 8011e70:	4293      	cmp	r3, r2
 8011e72:	dd05      	ble.n	8011e80 <cos+0x28>
 8011e74:	ee10 2a10 	vmov	r2, s0
 8011e78:	460b      	mov	r3, r1
 8011e7a:	f7ee fa25 	bl	80002c8 <__aeabi_dsub>
 8011e7e:	e021      	b.n	8011ec4 <cos+0x6c>
 8011e80:	4668      	mov	r0, sp
 8011e82:	f000 f9b5 	bl	80121f0 <__ieee754_rem_pio2>
 8011e86:	f000 0003 	and.w	r0, r0, #3
 8011e8a:	2801      	cmp	r0, #1
 8011e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e90:	ed9d 0b00 	vldr	d0, [sp]
 8011e94:	d005      	beq.n	8011ea2 <cos+0x4a>
 8011e96:	2802      	cmp	r0, #2
 8011e98:	d006      	beq.n	8011ea8 <cos+0x50>
 8011e9a:	b970      	cbnz	r0, 8011eba <cos+0x62>
 8011e9c:	f000 fc5c 	bl	8012758 <__kernel_cos>
 8011ea0:	e00e      	b.n	8011ec0 <cos+0x68>
 8011ea2:	f001 f891 	bl	8012fc8 <__kernel_sin>
 8011ea6:	e001      	b.n	8011eac <cos+0x54>
 8011ea8:	f000 fc56 	bl	8012758 <__kernel_cos>
 8011eac:	ec53 2b10 	vmov	r2, r3, d0
 8011eb0:	ee10 0a10 	vmov	r0, s0
 8011eb4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011eb8:	e004      	b.n	8011ec4 <cos+0x6c>
 8011eba:	2001      	movs	r0, #1
 8011ebc:	f001 f884 	bl	8012fc8 <__kernel_sin>
 8011ec0:	ec51 0b10 	vmov	r0, r1, d0
 8011ec4:	ec41 0b10 	vmov	d0, r0, r1
 8011ec8:	b005      	add	sp, #20
 8011eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ece:	bf00      	nop
	...
 8011ed8:	3fe921fb 	.word	0x3fe921fb
 8011edc:	7fefffff 	.word	0x7fefffff

08011ee0 <sin>:
 8011ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ee2:	ec51 0b10 	vmov	r0, r1, d0
 8011ee6:	4a20      	ldr	r2, [pc, #128]	; (8011f68 <sin+0x88>)
 8011ee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011eec:	4293      	cmp	r3, r2
 8011eee:	dc03      	bgt.n	8011ef8 <sin+0x18>
 8011ef0:	2000      	movs	r0, #0
 8011ef2:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011f60 <sin+0x80>
 8011ef6:	e017      	b.n	8011f28 <sin+0x48>
 8011ef8:	4a1c      	ldr	r2, [pc, #112]	; (8011f6c <sin+0x8c>)
 8011efa:	4293      	cmp	r3, r2
 8011efc:	dd05      	ble.n	8011f0a <sin+0x2a>
 8011efe:	ee10 2a10 	vmov	r2, s0
 8011f02:	460b      	mov	r3, r1
 8011f04:	f7ee f9e0 	bl	80002c8 <__aeabi_dsub>
 8011f08:	e022      	b.n	8011f50 <sin+0x70>
 8011f0a:	4668      	mov	r0, sp
 8011f0c:	f000 f970 	bl	80121f0 <__ieee754_rem_pio2>
 8011f10:	f000 0003 	and.w	r0, r0, #3
 8011f14:	2801      	cmp	r0, #1
 8011f16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f1a:	ed9d 0b00 	vldr	d0, [sp]
 8011f1e:	d008      	beq.n	8011f32 <sin+0x52>
 8011f20:	2802      	cmp	r0, #2
 8011f22:	d009      	beq.n	8011f38 <sin+0x58>
 8011f24:	b960      	cbnz	r0, 8011f40 <sin+0x60>
 8011f26:	2001      	movs	r0, #1
 8011f28:	f001 f84e 	bl	8012fc8 <__kernel_sin>
 8011f2c:	ec51 0b10 	vmov	r0, r1, d0
 8011f30:	e00e      	b.n	8011f50 <sin+0x70>
 8011f32:	f000 fc11 	bl	8012758 <__kernel_cos>
 8011f36:	e7f9      	b.n	8011f2c <sin+0x4c>
 8011f38:	2001      	movs	r0, #1
 8011f3a:	f001 f845 	bl	8012fc8 <__kernel_sin>
 8011f3e:	e001      	b.n	8011f44 <sin+0x64>
 8011f40:	f000 fc0a 	bl	8012758 <__kernel_cos>
 8011f44:	ec53 2b10 	vmov	r2, r3, d0
 8011f48:	ee10 0a10 	vmov	r0, s0
 8011f4c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011f50:	ec41 0b10 	vmov	d0, r0, r1
 8011f54:	b005      	add	sp, #20
 8011f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f5a:	bf00      	nop
 8011f5c:	f3af 8000 	nop.w
	...
 8011f68:	3fe921fb 	.word	0x3fe921fb
 8011f6c:	7fefffff 	.word	0x7fefffff

08011f70 <atan2>:
 8011f70:	f000 b85e 	b.w	8012030 <__ieee754_atan2>

08011f74 <sqrt>:
 8011f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f78:	ed2d 8b02 	vpush	{d8}
 8011f7c:	b08b      	sub	sp, #44	; 0x2c
 8011f7e:	ec55 4b10 	vmov	r4, r5, d0
 8011f82:	f000 fb33 	bl	80125ec <__ieee754_sqrt>
 8011f86:	4b27      	ldr	r3, [pc, #156]	; (8012024 <sqrt+0xb0>)
 8011f88:	eeb0 8a40 	vmov.f32	s16, s0
 8011f8c:	eef0 8a60 	vmov.f32	s17, s1
 8011f90:	f993 6000 	ldrsb.w	r6, [r3]
 8011f94:	1c73      	adds	r3, r6, #1
 8011f96:	d03b      	beq.n	8012010 <sqrt+0x9c>
 8011f98:	4622      	mov	r2, r4
 8011f9a:	462b      	mov	r3, r5
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	4629      	mov	r1, r5
 8011fa0:	f7ee fde0 	bl	8000b64 <__aeabi_dcmpun>
 8011fa4:	4607      	mov	r7, r0
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	d132      	bne.n	8012010 <sqrt+0x9c>
 8011faa:	f04f 0800 	mov.w	r8, #0
 8011fae:	f04f 0900 	mov.w	r9, #0
 8011fb2:	4642      	mov	r2, r8
 8011fb4:	464b      	mov	r3, r9
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ee fdab 	bl	8000b14 <__aeabi_dcmplt>
 8011fbe:	b338      	cbz	r0, 8012010 <sqrt+0x9c>
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	4b18      	ldr	r3, [pc, #96]	; (8012028 <sqrt+0xb4>)
 8011fc6:	9301      	str	r3, [sp, #4]
 8011fc8:	9708      	str	r7, [sp, #32]
 8011fca:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011fce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011fd2:	b916      	cbnz	r6, 8011fda <sqrt+0x66>
 8011fd4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011fd8:	e009      	b.n	8011fee <sqrt+0x7a>
 8011fda:	4642      	mov	r2, r8
 8011fdc:	464b      	mov	r3, r9
 8011fde:	4640      	mov	r0, r8
 8011fe0:	4649      	mov	r1, r9
 8011fe2:	f7ee fc4f 	bl	8000884 <__aeabi_ddiv>
 8011fe6:	2e02      	cmp	r6, #2
 8011fe8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011fec:	d003      	beq.n	8011ff6 <sqrt+0x82>
 8011fee:	4668      	mov	r0, sp
 8011ff0:	f001 fad6 	bl	80135a0 <matherr>
 8011ff4:	b918      	cbnz	r0, 8011ffe <sqrt+0x8a>
 8011ff6:	f7f9 fceb 	bl	800b9d0 <__errno>
 8011ffa:	2321      	movs	r3, #33	; 0x21
 8011ffc:	6003      	str	r3, [r0, #0]
 8011ffe:	9b08      	ldr	r3, [sp, #32]
 8012000:	b11b      	cbz	r3, 801200a <sqrt+0x96>
 8012002:	f7f9 fce5 	bl	800b9d0 <__errno>
 8012006:	9b08      	ldr	r3, [sp, #32]
 8012008:	6003      	str	r3, [r0, #0]
 801200a:	ed9d 0b06 	vldr	d0, [sp, #24]
 801200e:	e003      	b.n	8012018 <sqrt+0xa4>
 8012010:	eeb0 0a48 	vmov.f32	s0, s16
 8012014:	eef0 0a68 	vmov.f32	s1, s17
 8012018:	b00b      	add	sp, #44	; 0x2c
 801201a:	ecbd 8b02 	vpop	{d8}
 801201e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012022:	bf00      	nop
 8012024:	20010598 	.word	0x20010598
 8012028:	08015654 	.word	0x08015654
 801202c:	00000000 	.word	0x00000000

08012030 <__ieee754_atan2>:
 8012030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012034:	ec57 6b11 	vmov	r6, r7, d1
 8012038:	4273      	negs	r3, r6
 801203a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801203e:	4333      	orrs	r3, r6
 8012040:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80121e8 <__ieee754_atan2+0x1b8>
 8012044:	ec51 0b10 	vmov	r0, r1, d0
 8012048:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801204c:	4563      	cmp	r3, ip
 801204e:	ee11 8a10 	vmov	r8, s2
 8012052:	ee10 9a10 	vmov	r9, s0
 8012056:	468e      	mov	lr, r1
 8012058:	d807      	bhi.n	801206a <__ieee754_atan2+0x3a>
 801205a:	4244      	negs	r4, r0
 801205c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012060:	4304      	orrs	r4, r0
 8012062:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012066:	4564      	cmp	r4, ip
 8012068:	d906      	bls.n	8012078 <__ieee754_atan2+0x48>
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	4630      	mov	r0, r6
 8012070:	4639      	mov	r1, r7
 8012072:	f7ee f92b 	bl	80002cc <__adddf3>
 8012076:	e08d      	b.n	8012194 <__ieee754_atan2+0x164>
 8012078:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801207c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012080:	4334      	orrs	r4, r6
 8012082:	d103      	bne.n	801208c <__ieee754_atan2+0x5c>
 8012084:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012088:	f001 b85a 	b.w	8013140 <atan>
 801208c:	17bc      	asrs	r4, r7, #30
 801208e:	f004 0402 	and.w	r4, r4, #2
 8012092:	ea59 0903 	orrs.w	r9, r9, r3
 8012096:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801209a:	d104      	bne.n	80120a6 <__ieee754_atan2+0x76>
 801209c:	2c02      	cmp	r4, #2
 801209e:	d06c      	beq.n	801217a <__ieee754_atan2+0x14a>
 80120a0:	2c03      	cmp	r4, #3
 80120a2:	d177      	bne.n	8012194 <__ieee754_atan2+0x164>
 80120a4:	e023      	b.n	80120ee <__ieee754_atan2+0xbe>
 80120a6:	ea58 0802 	orrs.w	r8, r8, r2
 80120aa:	d026      	beq.n	80120fa <__ieee754_atan2+0xca>
 80120ac:	4562      	cmp	r2, ip
 80120ae:	d122      	bne.n	80120f6 <__ieee754_atan2+0xc6>
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d111      	bne.n	80120d8 <__ieee754_atan2+0xa8>
 80120b4:	2c02      	cmp	r4, #2
 80120b6:	d007      	beq.n	80120c8 <__ieee754_atan2+0x98>
 80120b8:	2c03      	cmp	r4, #3
 80120ba:	d009      	beq.n	80120d0 <__ieee754_atan2+0xa0>
 80120bc:	2c01      	cmp	r4, #1
 80120be:	d160      	bne.n	8012182 <__ieee754_atan2+0x152>
 80120c0:	a137      	add	r1, pc, #220	; (adr r1, 80121a0 <__ieee754_atan2+0x170>)
 80120c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120c6:	e065      	b.n	8012194 <__ieee754_atan2+0x164>
 80120c8:	a137      	add	r1, pc, #220	; (adr r1, 80121a8 <__ieee754_atan2+0x178>)
 80120ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120ce:	e061      	b.n	8012194 <__ieee754_atan2+0x164>
 80120d0:	a137      	add	r1, pc, #220	; (adr r1, 80121b0 <__ieee754_atan2+0x180>)
 80120d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120d6:	e05d      	b.n	8012194 <__ieee754_atan2+0x164>
 80120d8:	2c02      	cmp	r4, #2
 80120da:	d04e      	beq.n	801217a <__ieee754_atan2+0x14a>
 80120dc:	2c03      	cmp	r4, #3
 80120de:	d006      	beq.n	80120ee <__ieee754_atan2+0xbe>
 80120e0:	2c01      	cmp	r4, #1
 80120e2:	f04f 0000 	mov.w	r0, #0
 80120e6:	d150      	bne.n	801218a <__ieee754_atan2+0x15a>
 80120e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80120ec:	e052      	b.n	8012194 <__ieee754_atan2+0x164>
 80120ee:	a132      	add	r1, pc, #200	; (adr r1, 80121b8 <__ieee754_atan2+0x188>)
 80120f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120f4:	e04e      	b.n	8012194 <__ieee754_atan2+0x164>
 80120f6:	4563      	cmp	r3, ip
 80120f8:	d106      	bne.n	8012108 <__ieee754_atan2+0xd8>
 80120fa:	f1be 0f00 	cmp.w	lr, #0
 80120fe:	da46      	bge.n	801218e <__ieee754_atan2+0x15e>
 8012100:	a12f      	add	r1, pc, #188	; (adr r1, 80121c0 <__ieee754_atan2+0x190>)
 8012102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012106:	e045      	b.n	8012194 <__ieee754_atan2+0x164>
 8012108:	1a9b      	subs	r3, r3, r2
 801210a:	151b      	asrs	r3, r3, #20
 801210c:	2b3c      	cmp	r3, #60	; 0x3c
 801210e:	dc10      	bgt.n	8012132 <__ieee754_atan2+0x102>
 8012110:	2f00      	cmp	r7, #0
 8012112:	da01      	bge.n	8012118 <__ieee754_atan2+0xe8>
 8012114:	333c      	adds	r3, #60	; 0x3c
 8012116:	db10      	blt.n	801213a <__ieee754_atan2+0x10a>
 8012118:	4632      	mov	r2, r6
 801211a:	463b      	mov	r3, r7
 801211c:	f7ee fbb2 	bl	8000884 <__aeabi_ddiv>
 8012120:	ec41 0b10 	vmov	d0, r0, r1
 8012124:	f001 f9b0 	bl	8013488 <fabs>
 8012128:	f001 f80a 	bl	8013140 <atan>
 801212c:	ec51 0b10 	vmov	r0, r1, d0
 8012130:	e005      	b.n	801213e <__ieee754_atan2+0x10e>
 8012132:	a125      	add	r1, pc, #148	; (adr r1, 80121c8 <__ieee754_atan2+0x198>)
 8012134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012138:	e001      	b.n	801213e <__ieee754_atan2+0x10e>
 801213a:	2000      	movs	r0, #0
 801213c:	2100      	movs	r1, #0
 801213e:	2c01      	cmp	r4, #1
 8012140:	d00b      	beq.n	801215a <__ieee754_atan2+0x12a>
 8012142:	2c02      	cmp	r4, #2
 8012144:	d00c      	beq.n	8012160 <__ieee754_atan2+0x130>
 8012146:	b32c      	cbz	r4, 8012194 <__ieee754_atan2+0x164>
 8012148:	a321      	add	r3, pc, #132	; (adr r3, 80121d0 <__ieee754_atan2+0x1a0>)
 801214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214e:	f7ee f8bb 	bl	80002c8 <__aeabi_dsub>
 8012152:	a321      	add	r3, pc, #132	; (adr r3, 80121d8 <__ieee754_atan2+0x1a8>)
 8012154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012158:	e00c      	b.n	8012174 <__ieee754_atan2+0x144>
 801215a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801215e:	e019      	b.n	8012194 <__ieee754_atan2+0x164>
 8012160:	a31b      	add	r3, pc, #108	; (adr r3, 80121d0 <__ieee754_atan2+0x1a0>)
 8012162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012166:	f7ee f8af 	bl	80002c8 <__aeabi_dsub>
 801216a:	4602      	mov	r2, r0
 801216c:	460b      	mov	r3, r1
 801216e:	a11a      	add	r1, pc, #104	; (adr r1, 80121d8 <__ieee754_atan2+0x1a8>)
 8012170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012174:	f7ee f8a8 	bl	80002c8 <__aeabi_dsub>
 8012178:	e00c      	b.n	8012194 <__ieee754_atan2+0x164>
 801217a:	a117      	add	r1, pc, #92	; (adr r1, 80121d8 <__ieee754_atan2+0x1a8>)
 801217c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012180:	e008      	b.n	8012194 <__ieee754_atan2+0x164>
 8012182:	a117      	add	r1, pc, #92	; (adr r1, 80121e0 <__ieee754_atan2+0x1b0>)
 8012184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012188:	e004      	b.n	8012194 <__ieee754_atan2+0x164>
 801218a:	2100      	movs	r1, #0
 801218c:	e002      	b.n	8012194 <__ieee754_atan2+0x164>
 801218e:	a10e      	add	r1, pc, #56	; (adr r1, 80121c8 <__ieee754_atan2+0x198>)
 8012190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012194:	ec41 0b10 	vmov	d0, r0, r1
 8012198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219c:	f3af 8000 	nop.w
 80121a0:	54442d18 	.word	0x54442d18
 80121a4:	bfe921fb 	.word	0xbfe921fb
 80121a8:	7f3321d2 	.word	0x7f3321d2
 80121ac:	4002d97c 	.word	0x4002d97c
 80121b0:	7f3321d2 	.word	0x7f3321d2
 80121b4:	c002d97c 	.word	0xc002d97c
 80121b8:	54442d18 	.word	0x54442d18
 80121bc:	c00921fb 	.word	0xc00921fb
 80121c0:	54442d18 	.word	0x54442d18
 80121c4:	bff921fb 	.word	0xbff921fb
 80121c8:	54442d18 	.word	0x54442d18
 80121cc:	3ff921fb 	.word	0x3ff921fb
 80121d0:	33145c07 	.word	0x33145c07
 80121d4:	3ca1a626 	.word	0x3ca1a626
 80121d8:	54442d18 	.word	0x54442d18
 80121dc:	400921fb 	.word	0x400921fb
 80121e0:	54442d18 	.word	0x54442d18
 80121e4:	3fe921fb 	.word	0x3fe921fb
 80121e8:	7ff00000 	.word	0x7ff00000
 80121ec:	00000000 	.word	0x00000000

080121f0 <__ieee754_rem_pio2>:
 80121f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f4:	ec55 4b10 	vmov	r4, r5, d0
 80121f8:	4bc7      	ldr	r3, [pc, #796]	; (8012518 <__ieee754_rem_pio2+0x328>)
 80121fa:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80121fe:	4598      	cmp	r8, r3
 8012200:	b08d      	sub	sp, #52	; 0x34
 8012202:	4682      	mov	sl, r0
 8012204:	46ab      	mov	fp, r5
 8012206:	dc06      	bgt.n	8012216 <__ieee754_rem_pio2+0x26>
 8012208:	2200      	movs	r2, #0
 801220a:	2300      	movs	r3, #0
 801220c:	ed8a 0b00 	vstr	d0, [sl]
 8012210:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012214:	e160      	b.n	80124d8 <__ieee754_rem_pio2+0x2e8>
 8012216:	4bc1      	ldr	r3, [pc, #772]	; (801251c <__ieee754_rem_pio2+0x32c>)
 8012218:	4598      	cmp	r8, r3
 801221a:	dc71      	bgt.n	8012300 <__ieee754_rem_pio2+0x110>
 801221c:	2d00      	cmp	r5, #0
 801221e:	a3b0      	add	r3, pc, #704	; (adr r3, 80124e0 <__ieee754_rem_pio2+0x2f0>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	ee10 0a10 	vmov	r0, s0
 8012228:	4629      	mov	r1, r5
 801222a:	4ebd      	ldr	r6, [pc, #756]	; (8012520 <__ieee754_rem_pio2+0x330>)
 801222c:	dd33      	ble.n	8012296 <__ieee754_rem_pio2+0xa6>
 801222e:	f7ee f84b 	bl	80002c8 <__aeabi_dsub>
 8012232:	45b0      	cmp	r8, r6
 8012234:	4604      	mov	r4, r0
 8012236:	460d      	mov	r5, r1
 8012238:	d010      	beq.n	801225c <__ieee754_rem_pio2+0x6c>
 801223a:	a3ab      	add	r3, pc, #684	; (adr r3, 80124e8 <__ieee754_rem_pio2+0x2f8>)
 801223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012240:	f7ee f842 	bl	80002c8 <__aeabi_dsub>
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	e9ca 2300 	strd	r2, r3, [sl]
 801224c:	4620      	mov	r0, r4
 801224e:	4629      	mov	r1, r5
 8012250:	f7ee f83a 	bl	80002c8 <__aeabi_dsub>
 8012254:	a3a4      	add	r3, pc, #656	; (adr r3, 80124e8 <__ieee754_rem_pio2+0x2f8>)
 8012256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225a:	e016      	b.n	801228a <__ieee754_rem_pio2+0x9a>
 801225c:	a3a4      	add	r3, pc, #656	; (adr r3, 80124f0 <__ieee754_rem_pio2+0x300>)
 801225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012262:	f7ee f831 	bl	80002c8 <__aeabi_dsub>
 8012266:	a3a4      	add	r3, pc, #656	; (adr r3, 80124f8 <__ieee754_rem_pio2+0x308>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	4604      	mov	r4, r0
 801226e:	460d      	mov	r5, r1
 8012270:	f7ee f82a 	bl	80002c8 <__aeabi_dsub>
 8012274:	4602      	mov	r2, r0
 8012276:	460b      	mov	r3, r1
 8012278:	e9ca 2300 	strd	r2, r3, [sl]
 801227c:	4620      	mov	r0, r4
 801227e:	4629      	mov	r1, r5
 8012280:	f7ee f822 	bl	80002c8 <__aeabi_dsub>
 8012284:	a39c      	add	r3, pc, #624	; (adr r3, 80124f8 <__ieee754_rem_pio2+0x308>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	f7ee f81d 	bl	80002c8 <__aeabi_dsub>
 801228e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012292:	2001      	movs	r0, #1
 8012294:	e1a2      	b.n	80125dc <__ieee754_rem_pio2+0x3ec>
 8012296:	f7ee f819 	bl	80002cc <__adddf3>
 801229a:	45b0      	cmp	r8, r6
 801229c:	4604      	mov	r4, r0
 801229e:	460d      	mov	r5, r1
 80122a0:	d010      	beq.n	80122c4 <__ieee754_rem_pio2+0xd4>
 80122a2:	a391      	add	r3, pc, #580	; (adr r3, 80124e8 <__ieee754_rem_pio2+0x2f8>)
 80122a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a8:	f7ee f810 	bl	80002cc <__adddf3>
 80122ac:	4602      	mov	r2, r0
 80122ae:	460b      	mov	r3, r1
 80122b0:	e9ca 2300 	strd	r2, r3, [sl]
 80122b4:	4620      	mov	r0, r4
 80122b6:	4629      	mov	r1, r5
 80122b8:	f7ee f806 	bl	80002c8 <__aeabi_dsub>
 80122bc:	a38a      	add	r3, pc, #552	; (adr r3, 80124e8 <__ieee754_rem_pio2+0x2f8>)
 80122be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c2:	e016      	b.n	80122f2 <__ieee754_rem_pio2+0x102>
 80122c4:	a38a      	add	r3, pc, #552	; (adr r3, 80124f0 <__ieee754_rem_pio2+0x300>)
 80122c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ca:	f7ed ffff 	bl	80002cc <__adddf3>
 80122ce:	a38a      	add	r3, pc, #552	; (adr r3, 80124f8 <__ieee754_rem_pio2+0x308>)
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	4604      	mov	r4, r0
 80122d6:	460d      	mov	r5, r1
 80122d8:	f7ed fff8 	bl	80002cc <__adddf3>
 80122dc:	4602      	mov	r2, r0
 80122de:	460b      	mov	r3, r1
 80122e0:	e9ca 2300 	strd	r2, r3, [sl]
 80122e4:	4620      	mov	r0, r4
 80122e6:	4629      	mov	r1, r5
 80122e8:	f7ed ffee 	bl	80002c8 <__aeabi_dsub>
 80122ec:	a382      	add	r3, pc, #520	; (adr r3, 80124f8 <__ieee754_rem_pio2+0x308>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	f7ed ffeb 	bl	80002cc <__adddf3>
 80122f6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80122fa:	f04f 30ff 	mov.w	r0, #4294967295
 80122fe:	e16d      	b.n	80125dc <__ieee754_rem_pio2+0x3ec>
 8012300:	4b88      	ldr	r3, [pc, #544]	; (8012524 <__ieee754_rem_pio2+0x334>)
 8012302:	4598      	cmp	r8, r3
 8012304:	f300 80da 	bgt.w	80124bc <__ieee754_rem_pio2+0x2cc>
 8012308:	f001 f8be 	bl	8013488 <fabs>
 801230c:	ec55 4b10 	vmov	r4, r5, d0
 8012310:	ee10 0a10 	vmov	r0, s0
 8012314:	a37a      	add	r3, pc, #488	; (adr r3, 8012500 <__ieee754_rem_pio2+0x310>)
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	4629      	mov	r1, r5
 801231c:	f7ee f988 	bl	8000630 <__aeabi_dmul>
 8012320:	2200      	movs	r2, #0
 8012322:	4b81      	ldr	r3, [pc, #516]	; (8012528 <__ieee754_rem_pio2+0x338>)
 8012324:	f7ed ffd2 	bl	80002cc <__adddf3>
 8012328:	f7ee fc32 	bl	8000b90 <__aeabi_d2iz>
 801232c:	4681      	mov	r9, r0
 801232e:	f7ee f919 	bl	8000564 <__aeabi_i2d>
 8012332:	a36b      	add	r3, pc, #428	; (adr r3, 80124e0 <__ieee754_rem_pio2+0x2f0>)
 8012334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801233c:	f7ee f978 	bl	8000630 <__aeabi_dmul>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4620      	mov	r0, r4
 8012346:	4629      	mov	r1, r5
 8012348:	f7ed ffbe 	bl	80002c8 <__aeabi_dsub>
 801234c:	a366      	add	r3, pc, #408	; (adr r3, 80124e8 <__ieee754_rem_pio2+0x2f8>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	4604      	mov	r4, r0
 8012354:	460d      	mov	r5, r1
 8012356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801235a:	f7ee f969 	bl	8000630 <__aeabi_dmul>
 801235e:	f1b9 0f1f 	cmp.w	r9, #31
 8012362:	4606      	mov	r6, r0
 8012364:	460f      	mov	r7, r1
 8012366:	dc06      	bgt.n	8012376 <__ieee754_rem_pio2+0x186>
 8012368:	f109 32ff 	add.w	r2, r9, #4294967295
 801236c:	4b6f      	ldr	r3, [pc, #444]	; (801252c <__ieee754_rem_pio2+0x33c>)
 801236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012372:	4598      	cmp	r8, r3
 8012374:	d172      	bne.n	801245c <__ieee754_rem_pio2+0x26c>
 8012376:	463b      	mov	r3, r7
 8012378:	4632      	mov	r2, r6
 801237a:	4620      	mov	r0, r4
 801237c:	4629      	mov	r1, r5
 801237e:	f7ed ffa3 	bl	80002c8 <__aeabi_dsub>
 8012382:	ea4f 5828 	mov.w	r8, r8, asr #20
 8012386:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801238a:	ebc3 0308 	rsb	r3, r3, r8
 801238e:	2b10      	cmp	r3, #16
 8012390:	e9ca 0100 	strd	r0, r1, [sl]
 8012394:	dd6d      	ble.n	8012472 <__ieee754_rem_pio2+0x282>
 8012396:	a356      	add	r3, pc, #344	; (adr r3, 80124f0 <__ieee754_rem_pio2+0x300>)
 8012398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123a0:	f7ee f946 	bl	8000630 <__aeabi_dmul>
 80123a4:	4606      	mov	r6, r0
 80123a6:	460f      	mov	r7, r1
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	4620      	mov	r0, r4
 80123ae:	4629      	mov	r1, r5
 80123b0:	f7ed ff8a 	bl	80002c8 <__aeabi_dsub>
 80123b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123b8:	4602      	mov	r2, r0
 80123ba:	460b      	mov	r3, r1
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f7ed ff82 	bl	80002c8 <__aeabi_dsub>
 80123c4:	4632      	mov	r2, r6
 80123c6:	463b      	mov	r3, r7
 80123c8:	f7ed ff7e 	bl	80002c8 <__aeabi_dsub>
 80123cc:	a34a      	add	r3, pc, #296	; (adr r3, 80124f8 <__ieee754_rem_pio2+0x308>)
 80123ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d2:	4604      	mov	r4, r0
 80123d4:	460d      	mov	r5, r1
 80123d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123da:	f7ee f929 	bl	8000630 <__aeabi_dmul>
 80123de:	4622      	mov	r2, r4
 80123e0:	462b      	mov	r3, r5
 80123e2:	f7ed ff71 	bl	80002c8 <__aeabi_dsub>
 80123e6:	460b      	mov	r3, r1
 80123e8:	4602      	mov	r2, r0
 80123ea:	4606      	mov	r6, r0
 80123ec:	460f      	mov	r7, r1
 80123ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80123f2:	f7ed ff69 	bl	80002c8 <__aeabi_dsub>
 80123f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123fa:	ebc3 0808 	rsb	r8, r3, r8
 80123fe:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8012402:	e9ca 0100 	strd	r0, r1, [sl]
 8012406:	dd32      	ble.n	801246e <__ieee754_rem_pio2+0x27e>
 8012408:	a33f      	add	r3, pc, #252	; (adr r3, 8012508 <__ieee754_rem_pio2+0x318>)
 801240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012412:	f7ee f90d 	bl	8000630 <__aeabi_dmul>
 8012416:	4606      	mov	r6, r0
 8012418:	460f      	mov	r7, r1
 801241a:	4602      	mov	r2, r0
 801241c:	460b      	mov	r3, r1
 801241e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012422:	f7ed ff51 	bl	80002c8 <__aeabi_dsub>
 8012426:	4602      	mov	r2, r0
 8012428:	460b      	mov	r3, r1
 801242a:	4604      	mov	r4, r0
 801242c:	460d      	mov	r5, r1
 801242e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012432:	f7ed ff49 	bl	80002c8 <__aeabi_dsub>
 8012436:	4632      	mov	r2, r6
 8012438:	463b      	mov	r3, r7
 801243a:	f7ed ff45 	bl	80002c8 <__aeabi_dsub>
 801243e:	a334      	add	r3, pc, #208	; (adr r3, 8012510 <__ieee754_rem_pio2+0x320>)
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	4606      	mov	r6, r0
 8012446:	460f      	mov	r7, r1
 8012448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801244c:	f7ee f8f0 	bl	8000630 <__aeabi_dmul>
 8012450:	4632      	mov	r2, r6
 8012452:	463b      	mov	r3, r7
 8012454:	f7ed ff38 	bl	80002c8 <__aeabi_dsub>
 8012458:	4606      	mov	r6, r0
 801245a:	460f      	mov	r7, r1
 801245c:	4632      	mov	r2, r6
 801245e:	463b      	mov	r3, r7
 8012460:	4620      	mov	r0, r4
 8012462:	4629      	mov	r1, r5
 8012464:	f7ed ff30 	bl	80002c8 <__aeabi_dsub>
 8012468:	e9ca 0100 	strd	r0, r1, [sl]
 801246c:	e001      	b.n	8012472 <__ieee754_rem_pio2+0x282>
 801246e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012472:	ed9a 7b00 	vldr	d7, [sl]
 8012476:	4620      	mov	r0, r4
 8012478:	ec53 2b17 	vmov	r2, r3, d7
 801247c:	4629      	mov	r1, r5
 801247e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012482:	f7ed ff21 	bl	80002c8 <__aeabi_dsub>
 8012486:	4632      	mov	r2, r6
 8012488:	463b      	mov	r3, r7
 801248a:	f7ed ff1d 	bl	80002c8 <__aeabi_dsub>
 801248e:	f1bb 0f00 	cmp.w	fp, #0
 8012492:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012496:	f280 80a0 	bge.w	80125da <__ieee754_rem_pio2+0x3ea>
 801249a:	9b02      	ldr	r3, [sp, #8]
 801249c:	f8ca 3000 	str.w	r3, [sl]
 80124a0:	9b03      	ldr	r3, [sp, #12]
 80124a2:	f8ca 0008 	str.w	r0, [sl, #8]
 80124a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80124aa:	f8ca 3004 	str.w	r3, [sl, #4]
 80124ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124b2:	f8ca 300c 	str.w	r3, [sl, #12]
 80124b6:	f1c9 0000 	rsb	r0, r9, #0
 80124ba:	e08f      	b.n	80125dc <__ieee754_rem_pio2+0x3ec>
 80124bc:	4b1c      	ldr	r3, [pc, #112]	; (8012530 <__ieee754_rem_pio2+0x340>)
 80124be:	4598      	cmp	r8, r3
 80124c0:	dd38      	ble.n	8012534 <__ieee754_rem_pio2+0x344>
 80124c2:	ee10 2a10 	vmov	r2, s0
 80124c6:	462b      	mov	r3, r5
 80124c8:	4620      	mov	r0, r4
 80124ca:	4629      	mov	r1, r5
 80124cc:	f7ed fefc 	bl	80002c8 <__aeabi_dsub>
 80124d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80124d4:	e9ca 0100 	strd	r0, r1, [sl]
 80124d8:	2000      	movs	r0, #0
 80124da:	e07f      	b.n	80125dc <__ieee754_rem_pio2+0x3ec>
 80124dc:	f3af 8000 	nop.w
 80124e0:	54400000 	.word	0x54400000
 80124e4:	3ff921fb 	.word	0x3ff921fb
 80124e8:	1a626331 	.word	0x1a626331
 80124ec:	3dd0b461 	.word	0x3dd0b461
 80124f0:	1a600000 	.word	0x1a600000
 80124f4:	3dd0b461 	.word	0x3dd0b461
 80124f8:	2e037073 	.word	0x2e037073
 80124fc:	3ba3198a 	.word	0x3ba3198a
 8012500:	6dc9c883 	.word	0x6dc9c883
 8012504:	3fe45f30 	.word	0x3fe45f30
 8012508:	2e000000 	.word	0x2e000000
 801250c:	3ba3198a 	.word	0x3ba3198a
 8012510:	252049c1 	.word	0x252049c1
 8012514:	397b839a 	.word	0x397b839a
 8012518:	3fe921fb 	.word	0x3fe921fb
 801251c:	4002d97b 	.word	0x4002d97b
 8012520:	3ff921fb 	.word	0x3ff921fb
 8012524:	413921fb 	.word	0x413921fb
 8012528:	3fe00000 	.word	0x3fe00000
 801252c:	0801565c 	.word	0x0801565c
 8012530:	7fefffff 	.word	0x7fefffff
 8012534:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012538:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801253c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012540:	4620      	mov	r0, r4
 8012542:	460d      	mov	r5, r1
 8012544:	f7ee fb24 	bl	8000b90 <__aeabi_d2iz>
 8012548:	f7ee f80c 	bl	8000564 <__aeabi_i2d>
 801254c:	4602      	mov	r2, r0
 801254e:	460b      	mov	r3, r1
 8012550:	4620      	mov	r0, r4
 8012552:	4629      	mov	r1, r5
 8012554:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012558:	f7ed feb6 	bl	80002c8 <__aeabi_dsub>
 801255c:	2200      	movs	r2, #0
 801255e:	4b21      	ldr	r3, [pc, #132]	; (80125e4 <__ieee754_rem_pio2+0x3f4>)
 8012560:	f7ee f866 	bl	8000630 <__aeabi_dmul>
 8012564:	460d      	mov	r5, r1
 8012566:	4604      	mov	r4, r0
 8012568:	f7ee fb12 	bl	8000b90 <__aeabi_d2iz>
 801256c:	f7ed fffa 	bl	8000564 <__aeabi_i2d>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	4620      	mov	r0, r4
 8012576:	4629      	mov	r1, r5
 8012578:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801257c:	f7ed fea4 	bl	80002c8 <__aeabi_dsub>
 8012580:	2200      	movs	r2, #0
 8012582:	4b18      	ldr	r3, [pc, #96]	; (80125e4 <__ieee754_rem_pio2+0x3f4>)
 8012584:	f7ee f854 	bl	8000630 <__aeabi_dmul>
 8012588:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801258c:	ad0c      	add	r5, sp, #48	; 0x30
 801258e:	2403      	movs	r4, #3
 8012590:	2200      	movs	r2, #0
 8012592:	2300      	movs	r3, #0
 8012594:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8012598:	1e67      	subs	r7, r4, #1
 801259a:	f7ee fab1 	bl	8000b00 <__aeabi_dcmpeq>
 801259e:	b108      	cbz	r0, 80125a4 <__ieee754_rem_pio2+0x3b4>
 80125a0:	463c      	mov	r4, r7
 80125a2:	e7f5      	b.n	8012590 <__ieee754_rem_pio2+0x3a0>
 80125a4:	4b10      	ldr	r3, [pc, #64]	; (80125e8 <__ieee754_rem_pio2+0x3f8>)
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	2302      	movs	r3, #2
 80125aa:	9300      	str	r3, [sp, #0]
 80125ac:	4632      	mov	r2, r6
 80125ae:	4623      	mov	r3, r4
 80125b0:	4651      	mov	r1, sl
 80125b2:	a806      	add	r0, sp, #24
 80125b4:	f000 f9b8 	bl	8012928 <__kernel_rem_pio2>
 80125b8:	f1bb 0f00 	cmp.w	fp, #0
 80125bc:	da0e      	bge.n	80125dc <__ieee754_rem_pio2+0x3ec>
 80125be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80125c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80125c6:	f8ca 3004 	str.w	r3, [sl, #4]
 80125ca:	f8da 300c 	ldr.w	r3, [sl, #12]
 80125ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80125d2:	f8ca 300c 	str.w	r3, [sl, #12]
 80125d6:	4240      	negs	r0, r0
 80125d8:	e000      	b.n	80125dc <__ieee754_rem_pio2+0x3ec>
 80125da:	4648      	mov	r0, r9
 80125dc:	b00d      	add	sp, #52	; 0x34
 80125de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e2:	bf00      	nop
 80125e4:	41700000 	.word	0x41700000
 80125e8:	080156dc 	.word	0x080156dc

080125ec <__ieee754_sqrt>:
 80125ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f0:	4957      	ldr	r1, [pc, #348]	; (8012750 <__ieee754_sqrt+0x164>)
 80125f2:	4f57      	ldr	r7, [pc, #348]	; (8012750 <__ieee754_sqrt+0x164>)
 80125f4:	ec55 4b10 	vmov	r4, r5, d0
 80125f8:	4029      	ands	r1, r5
 80125fa:	42b9      	cmp	r1, r7
 80125fc:	462a      	mov	r2, r5
 80125fe:	462b      	mov	r3, r5
 8012600:	4626      	mov	r6, r4
 8012602:	d10c      	bne.n	801261e <__ieee754_sqrt+0x32>
 8012604:	ee10 2a10 	vmov	r2, s0
 8012608:	462b      	mov	r3, r5
 801260a:	ee10 0a10 	vmov	r0, s0
 801260e:	4629      	mov	r1, r5
 8012610:	f7ee f80e 	bl	8000630 <__aeabi_dmul>
 8012614:	4622      	mov	r2, r4
 8012616:	462b      	mov	r3, r5
 8012618:	f7ed fe58 	bl	80002cc <__adddf3>
 801261c:	e094      	b.n	8012748 <__ieee754_sqrt+0x15c>
 801261e:	2d00      	cmp	r5, #0
 8012620:	dc11      	bgt.n	8012646 <__ieee754_sqrt+0x5a>
 8012622:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8012626:	4321      	orrs	r1, r4
 8012628:	f000 808b 	beq.w	8012742 <__ieee754_sqrt+0x156>
 801262c:	b15d      	cbz	r5, 8012646 <__ieee754_sqrt+0x5a>
 801262e:	ee10 2a10 	vmov	r2, s0
 8012632:	462b      	mov	r3, r5
 8012634:	4620      	mov	r0, r4
 8012636:	4629      	mov	r1, r5
 8012638:	f7ed fe46 	bl	80002c8 <__aeabi_dsub>
 801263c:	4602      	mov	r2, r0
 801263e:	460b      	mov	r3, r1
 8012640:	f7ee f920 	bl	8000884 <__aeabi_ddiv>
 8012644:	e080      	b.n	8012748 <__ieee754_sqrt+0x15c>
 8012646:	1512      	asrs	r2, r2, #20
 8012648:	d112      	bne.n	8012670 <__ieee754_sqrt+0x84>
 801264a:	b91b      	cbnz	r3, 8012654 <__ieee754_sqrt+0x68>
 801264c:	0af3      	lsrs	r3, r6, #11
 801264e:	3a15      	subs	r2, #21
 8012650:	0576      	lsls	r6, r6, #21
 8012652:	e7fa      	b.n	801264a <__ieee754_sqrt+0x5e>
 8012654:	2100      	movs	r1, #0
 8012656:	02d8      	lsls	r0, r3, #11
 8012658:	d402      	bmi.n	8012660 <__ieee754_sqrt+0x74>
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	3101      	adds	r1, #1
 801265e:	e7fa      	b.n	8012656 <__ieee754_sqrt+0x6a>
 8012660:	1e48      	subs	r0, r1, #1
 8012662:	1a12      	subs	r2, r2, r0
 8012664:	f1c1 0020 	rsb	r0, r1, #32
 8012668:	fa26 f000 	lsr.w	r0, r6, r0
 801266c:	4303      	orrs	r3, r0
 801266e:	408e      	lsls	r6, r1
 8012670:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012678:	07d1      	lsls	r1, r2, #31
 801267a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801267e:	bf42      	ittt	mi
 8012680:	005b      	lslmi	r3, r3, #1
 8012682:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 8012686:	0076      	lslmi	r6, r6, #1
 8012688:	1055      	asrs	r5, r2, #1
 801268a:	f04f 0e00 	mov.w	lr, #0
 801268e:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 8012692:	4413      	add	r3, r2
 8012694:	0076      	lsls	r6, r6, #1
 8012696:	2216      	movs	r2, #22
 8012698:	4677      	mov	r7, lr
 801269a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801269e:	1878      	adds	r0, r7, r1
 80126a0:	4298      	cmp	r0, r3
 80126a2:	bfde      	ittt	le
 80126a4:	1a1b      	suble	r3, r3, r0
 80126a6:	1847      	addle	r7, r0, r1
 80126a8:	448e      	addle	lr, r1
 80126aa:	005b      	lsls	r3, r3, #1
 80126ac:	3a01      	subs	r2, #1
 80126ae:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 80126b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80126b6:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80126ba:	d1f0      	bne.n	801269e <__ieee754_sqrt+0xb2>
 80126bc:	2420      	movs	r4, #32
 80126be:	4694      	mov	ip, r2
 80126c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80126c4:	429f      	cmp	r7, r3
 80126c6:	eb01 000c 	add.w	r0, r1, ip
 80126ca:	db02      	blt.n	80126d2 <__ieee754_sqrt+0xe6>
 80126cc:	d116      	bne.n	80126fc <__ieee754_sqrt+0x110>
 80126ce:	42b0      	cmp	r0, r6
 80126d0:	d813      	bhi.n	80126fa <__ieee754_sqrt+0x10e>
 80126d2:	2800      	cmp	r0, #0
 80126d4:	eb00 0c01 	add.w	ip, r0, r1
 80126d8:	da05      	bge.n	80126e6 <__ieee754_sqrt+0xfa>
 80126da:	f1bc 0f00 	cmp.w	ip, #0
 80126de:	db02      	blt.n	80126e6 <__ieee754_sqrt+0xfa>
 80126e0:	f107 0801 	add.w	r8, r7, #1
 80126e4:	e000      	b.n	80126e8 <__ieee754_sqrt+0xfc>
 80126e6:	46b8      	mov	r8, r7
 80126e8:	1bdb      	subs	r3, r3, r7
 80126ea:	42b0      	cmp	r0, r6
 80126ec:	bf88      	it	hi
 80126ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80126f2:	1a36      	subs	r6, r6, r0
 80126f4:	440a      	add	r2, r1
 80126f6:	4647      	mov	r7, r8
 80126f8:	e000      	b.n	80126fc <__ieee754_sqrt+0x110>
 80126fa:	463b      	mov	r3, r7
 80126fc:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8012700:	3c01      	subs	r4, #1
 8012702:	4403      	add	r3, r0
 8012704:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8012708:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801270c:	d1da      	bne.n	80126c4 <__ieee754_sqrt+0xd8>
 801270e:	4333      	orrs	r3, r6
 8012710:	d007      	beq.n	8012722 <__ieee754_sqrt+0x136>
 8012712:	1c53      	adds	r3, r2, #1
 8012714:	bf13      	iteet	ne
 8012716:	f002 0301 	andne.w	r3, r2, #1
 801271a:	f10e 0e01 	addeq.w	lr, lr, #1
 801271e:	4622      	moveq	r2, r4
 8012720:	18d2      	addne	r2, r2, r3
 8012722:	ea4f 046e 	mov.w	r4, lr, asr #1
 8012726:	0853      	lsrs	r3, r2, #1
 8012728:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 801272c:	f01e 0f01 	tst.w	lr, #1
 8012730:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 8012734:	bf18      	it	ne
 8012736:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 801273a:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 801273e:	4618      	mov	r0, r3
 8012740:	e002      	b.n	8012748 <__ieee754_sqrt+0x15c>
 8012742:	ee10 0a10 	vmov	r0, s0
 8012746:	4629      	mov	r1, r5
 8012748:	ec41 0b10 	vmov	d0, r0, r1
 801274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012750:	7ff00000 	.word	0x7ff00000
 8012754:	00000000 	.word	0x00000000

08012758 <__kernel_cos>:
 8012758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	ec59 8b10 	vmov	r8, r9, d0
 8012760:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8012764:	b085      	sub	sp, #20
 8012766:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801276a:	ed8d 1b00 	vstr	d1, [sp]
 801276e:	da07      	bge.n	8012780 <__kernel_cos+0x28>
 8012770:	ee10 0a10 	vmov	r0, s0
 8012774:	4649      	mov	r1, r9
 8012776:	f7ee fa0b 	bl	8000b90 <__aeabi_d2iz>
 801277a:	2800      	cmp	r0, #0
 801277c:	f000 80a6 	beq.w	80128cc <__kernel_cos+0x174>
 8012780:	4642      	mov	r2, r8
 8012782:	464b      	mov	r3, r9
 8012784:	4640      	mov	r0, r8
 8012786:	4649      	mov	r1, r9
 8012788:	f7ed ff52 	bl	8000630 <__aeabi_dmul>
 801278c:	a359      	add	r3, pc, #356	; (adr r3, 80128f4 <__kernel_cos+0x19c>)
 801278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012792:	4604      	mov	r4, r0
 8012794:	460d      	mov	r5, r1
 8012796:	f7ed ff4b 	bl	8000630 <__aeabi_dmul>
 801279a:	a358      	add	r3, pc, #352	; (adr r3, 80128fc <__kernel_cos+0x1a4>)
 801279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a0:	f7ed fd94 	bl	80002cc <__adddf3>
 80127a4:	4622      	mov	r2, r4
 80127a6:	462b      	mov	r3, r5
 80127a8:	f7ed ff42 	bl	8000630 <__aeabi_dmul>
 80127ac:	a355      	add	r3, pc, #340	; (adr r3, 8012904 <__kernel_cos+0x1ac>)
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	f7ed fd89 	bl	80002c8 <__aeabi_dsub>
 80127b6:	4622      	mov	r2, r4
 80127b8:	462b      	mov	r3, r5
 80127ba:	f7ed ff39 	bl	8000630 <__aeabi_dmul>
 80127be:	a353      	add	r3, pc, #332	; (adr r3, 801290c <__kernel_cos+0x1b4>)
 80127c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c4:	f7ed fd82 	bl	80002cc <__adddf3>
 80127c8:	4622      	mov	r2, r4
 80127ca:	462b      	mov	r3, r5
 80127cc:	f7ed ff30 	bl	8000630 <__aeabi_dmul>
 80127d0:	a350      	add	r3, pc, #320	; (adr r3, 8012914 <__kernel_cos+0x1bc>)
 80127d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d6:	f7ed fd77 	bl	80002c8 <__aeabi_dsub>
 80127da:	4622      	mov	r2, r4
 80127dc:	462b      	mov	r3, r5
 80127de:	f7ed ff27 	bl	8000630 <__aeabi_dmul>
 80127e2:	a34e      	add	r3, pc, #312	; (adr r3, 801291c <__kernel_cos+0x1c4>)
 80127e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e8:	f7ed fd70 	bl	80002cc <__adddf3>
 80127ec:	462b      	mov	r3, r5
 80127ee:	4622      	mov	r2, r4
 80127f0:	f7ed ff1e 	bl	8000630 <__aeabi_dmul>
 80127f4:	4b3a      	ldr	r3, [pc, #232]	; (80128e0 <__kernel_cos+0x188>)
 80127f6:	429f      	cmp	r7, r3
 80127f8:	4682      	mov	sl, r0
 80127fa:	468b      	mov	fp, r1
 80127fc:	dc26      	bgt.n	801284c <__kernel_cos+0xf4>
 80127fe:	2200      	movs	r2, #0
 8012800:	4b38      	ldr	r3, [pc, #224]	; (80128e4 <__kernel_cos+0x18c>)
 8012802:	4620      	mov	r0, r4
 8012804:	4629      	mov	r1, r5
 8012806:	f7ed ff13 	bl	8000630 <__aeabi_dmul>
 801280a:	4652      	mov	r2, sl
 801280c:	4606      	mov	r6, r0
 801280e:	460f      	mov	r7, r1
 8012810:	465b      	mov	r3, fp
 8012812:	4620      	mov	r0, r4
 8012814:	4629      	mov	r1, r5
 8012816:	f7ed ff0b 	bl	8000630 <__aeabi_dmul>
 801281a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801281e:	4604      	mov	r4, r0
 8012820:	460d      	mov	r5, r1
 8012822:	4640      	mov	r0, r8
 8012824:	4649      	mov	r1, r9
 8012826:	f7ed ff03 	bl	8000630 <__aeabi_dmul>
 801282a:	4602      	mov	r2, r0
 801282c:	460b      	mov	r3, r1
 801282e:	4620      	mov	r0, r4
 8012830:	4629      	mov	r1, r5
 8012832:	f7ed fd49 	bl	80002c8 <__aeabi_dsub>
 8012836:	4602      	mov	r2, r0
 8012838:	460b      	mov	r3, r1
 801283a:	4630      	mov	r0, r6
 801283c:	4639      	mov	r1, r7
 801283e:	f7ed fd43 	bl	80002c8 <__aeabi_dsub>
 8012842:	4602      	mov	r2, r0
 8012844:	460b      	mov	r3, r1
 8012846:	2000      	movs	r0, #0
 8012848:	4927      	ldr	r1, [pc, #156]	; (80128e8 <__kernel_cos+0x190>)
 801284a:	e03c      	b.n	80128c6 <__kernel_cos+0x16e>
 801284c:	4b27      	ldr	r3, [pc, #156]	; (80128ec <__kernel_cos+0x194>)
 801284e:	4926      	ldr	r1, [pc, #152]	; (80128e8 <__kernel_cos+0x190>)
 8012850:	429f      	cmp	r7, r3
 8012852:	bfd7      	itett	le
 8012854:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8012858:	4f25      	ldrgt	r7, [pc, #148]	; (80128f0 <__kernel_cos+0x198>)
 801285a:	2200      	movle	r2, #0
 801285c:	4616      	movle	r6, r2
 801285e:	bfd4      	ite	le
 8012860:	461f      	movle	r7, r3
 8012862:	2600      	movgt	r6, #0
 8012864:	4632      	mov	r2, r6
 8012866:	463b      	mov	r3, r7
 8012868:	2000      	movs	r0, #0
 801286a:	f7ed fd2d 	bl	80002c8 <__aeabi_dsub>
 801286e:	2200      	movs	r2, #0
 8012870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012874:	4b1b      	ldr	r3, [pc, #108]	; (80128e4 <__kernel_cos+0x18c>)
 8012876:	4620      	mov	r0, r4
 8012878:	4629      	mov	r1, r5
 801287a:	f7ed fed9 	bl	8000630 <__aeabi_dmul>
 801287e:	4632      	mov	r2, r6
 8012880:	463b      	mov	r3, r7
 8012882:	f7ed fd21 	bl	80002c8 <__aeabi_dsub>
 8012886:	4652      	mov	r2, sl
 8012888:	4606      	mov	r6, r0
 801288a:	460f      	mov	r7, r1
 801288c:	465b      	mov	r3, fp
 801288e:	4620      	mov	r0, r4
 8012890:	4629      	mov	r1, r5
 8012892:	f7ed fecd 	bl	8000630 <__aeabi_dmul>
 8012896:	e9dd 2300 	ldrd	r2, r3, [sp]
 801289a:	4604      	mov	r4, r0
 801289c:	460d      	mov	r5, r1
 801289e:	4640      	mov	r0, r8
 80128a0:	4649      	mov	r1, r9
 80128a2:	f7ed fec5 	bl	8000630 <__aeabi_dmul>
 80128a6:	4602      	mov	r2, r0
 80128a8:	460b      	mov	r3, r1
 80128aa:	4620      	mov	r0, r4
 80128ac:	4629      	mov	r1, r5
 80128ae:	f7ed fd0b 	bl	80002c8 <__aeabi_dsub>
 80128b2:	4602      	mov	r2, r0
 80128b4:	460b      	mov	r3, r1
 80128b6:	4630      	mov	r0, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	f7ed fd05 	bl	80002c8 <__aeabi_dsub>
 80128be:	4602      	mov	r2, r0
 80128c0:	460b      	mov	r3, r1
 80128c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128c6:	f7ed fcff 	bl	80002c8 <__aeabi_dsub>
 80128ca:	e001      	b.n	80128d0 <__kernel_cos+0x178>
 80128cc:	4906      	ldr	r1, [pc, #24]	; (80128e8 <__kernel_cos+0x190>)
 80128ce:	2000      	movs	r0, #0
 80128d0:	ec41 0b10 	vmov	d0, r0, r1
 80128d4:	b005      	add	sp, #20
 80128d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128da:	bf00      	nop
 80128dc:	f3af 8000 	nop.w
 80128e0:	3fd33332 	.word	0x3fd33332
 80128e4:	3fe00000 	.word	0x3fe00000
 80128e8:	3ff00000 	.word	0x3ff00000
 80128ec:	3fe90000 	.word	0x3fe90000
 80128f0:	3fd20000 	.word	0x3fd20000
 80128f4:	be8838d4 	.word	0xbe8838d4
 80128f8:	bda8fae9 	.word	0xbda8fae9
 80128fc:	bdb4b1c4 	.word	0xbdb4b1c4
 8012900:	3e21ee9e 	.word	0x3e21ee9e
 8012904:	809c52ad 	.word	0x809c52ad
 8012908:	3e927e4f 	.word	0x3e927e4f
 801290c:	19cb1590 	.word	0x19cb1590
 8012910:	3efa01a0 	.word	0x3efa01a0
 8012914:	16c15177 	.word	0x16c15177
 8012918:	3f56c16c 	.word	0x3f56c16c
 801291c:	5555554c 	.word	0x5555554c
 8012920:	3fa55555 	.word	0x3fa55555
 8012924:	00000000 	.word	0x00000000

08012928 <__kernel_rem_pio2>:
 8012928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012930:	2418      	movs	r4, #24
 8012932:	9306      	str	r3, [sp, #24]
 8012934:	9101      	str	r1, [sp, #4]
 8012936:	4bba      	ldr	r3, [pc, #744]	; (8012c20 <__kernel_rem_pio2+0x2f8>)
 8012938:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801293a:	9009      	str	r0, [sp, #36]	; 0x24
 801293c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012940:	9302      	str	r3, [sp, #8]
 8012942:	9b06      	ldr	r3, [sp, #24]
 8012944:	3b01      	subs	r3, #1
 8012946:	9305      	str	r3, [sp, #20]
 8012948:	1ed3      	subs	r3, r2, #3
 801294a:	fb93 f4f4 	sdiv	r4, r3, r4
 801294e:	f06f 0317 	mvn.w	r3, #23
 8012952:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012956:	fb04 3303 	mla	r3, r4, r3, r3
 801295a:	eb03 0802 	add.w	r8, r3, r2
 801295e:	9b02      	ldr	r3, [sp, #8]
 8012960:	9a05      	ldr	r2, [sp, #20]
 8012962:	eb03 0a02 	add.w	sl, r3, r2
 8012966:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8012968:	1aa7      	subs	r7, r4, r2
 801296a:	ae20      	add	r6, sp, #128	; 0x80
 801296c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012970:	2500      	movs	r5, #0
 8012972:	4555      	cmp	r5, sl
 8012974:	dc0c      	bgt.n	8012990 <__kernel_rem_pio2+0x68>
 8012976:	42ef      	cmn	r7, r5
 8012978:	d404      	bmi.n	8012984 <__kernel_rem_pio2+0x5c>
 801297a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801297e:	f7ed fdf1 	bl	8000564 <__aeabi_i2d>
 8012982:	e001      	b.n	8012988 <__kernel_rem_pio2+0x60>
 8012984:	2000      	movs	r0, #0
 8012986:	2100      	movs	r1, #0
 8012988:	e8e6 0102 	strd	r0, r1, [r6], #8
 801298c:	3501      	adds	r5, #1
 801298e:	e7f0      	b.n	8012972 <__kernel_rem_pio2+0x4a>
 8012990:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012994:	2600      	movs	r6, #0
 8012996:	9b02      	ldr	r3, [sp, #8]
 8012998:	429e      	cmp	r6, r3
 801299a:	dc27      	bgt.n	80129ec <__kernel_rem_pio2+0xc4>
 801299c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801299e:	9304      	str	r3, [sp, #16]
 80129a0:	9b06      	ldr	r3, [sp, #24]
 80129a2:	199d      	adds	r5, r3, r6
 80129a4:	ab20      	add	r3, sp, #128	; 0x80
 80129a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80129aa:	9308      	str	r3, [sp, #32]
 80129ac:	f04f 0900 	mov.w	r9, #0
 80129b0:	f04f 0a00 	mov.w	sl, #0
 80129b4:	2700      	movs	r7, #0
 80129b6:	9b05      	ldr	r3, [sp, #20]
 80129b8:	429f      	cmp	r7, r3
 80129ba:	dc13      	bgt.n	80129e4 <__kernel_rem_pio2+0xbc>
 80129bc:	9908      	ldr	r1, [sp, #32]
 80129be:	9d04      	ldr	r5, [sp, #16]
 80129c0:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80129c4:	9108      	str	r1, [sp, #32]
 80129c6:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80129ca:	9504      	str	r5, [sp, #16]
 80129cc:	f7ed fe30 	bl	8000630 <__aeabi_dmul>
 80129d0:	4602      	mov	r2, r0
 80129d2:	460b      	mov	r3, r1
 80129d4:	4648      	mov	r0, r9
 80129d6:	4651      	mov	r1, sl
 80129d8:	f7ed fc78 	bl	80002cc <__adddf3>
 80129dc:	3701      	adds	r7, #1
 80129de:	4681      	mov	r9, r0
 80129e0:	468a      	mov	sl, r1
 80129e2:	e7e8      	b.n	80129b6 <__kernel_rem_pio2+0x8e>
 80129e4:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 80129e8:	3601      	adds	r6, #1
 80129ea:	e7d4      	b.n	8012996 <__kernel_rem_pio2+0x6e>
 80129ec:	9b02      	ldr	r3, [sp, #8]
 80129ee:	f8dd b008 	ldr.w	fp, [sp, #8]
 80129f2:	aa0c      	add	r2, sp, #48	; 0x30
 80129f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129f8:	930a      	str	r3, [sp, #40]	; 0x28
 80129fa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80129fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a02:	ab98      	add	r3, sp, #608	; 0x260
 8012a04:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 8012a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012a0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a10:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012a14:	aa98      	add	r2, sp, #608	; 0x260
 8012a16:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012a1a:	eb02 0903 	add.w	r9, r2, r3
 8012a1e:	9308      	str	r3, [sp, #32]
 8012a20:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8012a24:	f04f 0a00 	mov.w	sl, #0
 8012a28:	ebca 030b 	rsb	r3, sl, fp
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	dd25      	ble.n	8012a7c <__kernel_rem_pio2+0x154>
 8012a30:	2200      	movs	r2, #0
 8012a32:	4b7c      	ldr	r3, [pc, #496]	; (8012c24 <__kernel_rem_pio2+0x2fc>)
 8012a34:	4630      	mov	r0, r6
 8012a36:	4639      	mov	r1, r7
 8012a38:	f7ed fdfa 	bl	8000630 <__aeabi_dmul>
 8012a3c:	f7ee f8a8 	bl	8000b90 <__aeabi_d2iz>
 8012a40:	f7ed fd90 	bl	8000564 <__aeabi_i2d>
 8012a44:	2200      	movs	r2, #0
 8012a46:	4b78      	ldr	r3, [pc, #480]	; (8012c28 <__kernel_rem_pio2+0x300>)
 8012a48:	4604      	mov	r4, r0
 8012a4a:	460d      	mov	r5, r1
 8012a4c:	f7ed fdf0 	bl	8000630 <__aeabi_dmul>
 8012a50:	4602      	mov	r2, r0
 8012a52:	460b      	mov	r3, r1
 8012a54:	4630      	mov	r0, r6
 8012a56:	4639      	mov	r1, r7
 8012a58:	f7ed fc36 	bl	80002c8 <__aeabi_dsub>
 8012a5c:	f7ee f898 	bl	8000b90 <__aeabi_d2iz>
 8012a60:	ab0c      	add	r3, sp, #48	; 0x30
 8012a62:	4629      	mov	r1, r5
 8012a64:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8012a68:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	f7ed fc2d 	bl	80002cc <__adddf3>
 8012a72:	f10a 0a01 	add.w	sl, sl, #1
 8012a76:	4606      	mov	r6, r0
 8012a78:	460f      	mov	r7, r1
 8012a7a:	e7d5      	b.n	8012a28 <__kernel_rem_pio2+0x100>
 8012a7c:	ec47 6b10 	vmov	d0, r6, r7
 8012a80:	4640      	mov	r0, r8
 8012a82:	f000 fd91 	bl	80135a8 <scalbn>
 8012a86:	ec55 4b10 	vmov	r4, r5, d0
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012a90:	ee10 0a10 	vmov	r0, s0
 8012a94:	4629      	mov	r1, r5
 8012a96:	f7ed fdcb 	bl	8000630 <__aeabi_dmul>
 8012a9a:	ec41 0b10 	vmov	d0, r0, r1
 8012a9e:	f000 fcfb 	bl	8013498 <floor>
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	ec51 0b10 	vmov	r0, r1, d0
 8012aa8:	4b60      	ldr	r3, [pc, #384]	; (8012c2c <__kernel_rem_pio2+0x304>)
 8012aaa:	f7ed fdc1 	bl	8000630 <__aeabi_dmul>
 8012aae:	4602      	mov	r2, r0
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	4629      	mov	r1, r5
 8012ab6:	f7ed fc07 	bl	80002c8 <__aeabi_dsub>
 8012aba:	460d      	mov	r5, r1
 8012abc:	4604      	mov	r4, r0
 8012abe:	f7ee f867 	bl	8000b90 <__aeabi_d2iz>
 8012ac2:	9004      	str	r0, [sp, #16]
 8012ac4:	f7ed fd4e 	bl	8000564 <__aeabi_i2d>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	4620      	mov	r0, r4
 8012ace:	4629      	mov	r1, r5
 8012ad0:	f7ed fbfa 	bl	80002c8 <__aeabi_dsub>
 8012ad4:	f1b8 0f00 	cmp.w	r8, #0
 8012ad8:	4606      	mov	r6, r0
 8012ada:	460f      	mov	r7, r1
 8012adc:	dd15      	ble.n	8012b0a <__kernel_rem_pio2+0x1e2>
 8012ade:	f10b 31ff 	add.w	r1, fp, #4294967295
 8012ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8012ae4:	f1c8 0018 	rsb	r0, r8, #24
 8012ae8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8012aec:	9c04      	ldr	r4, [sp, #16]
 8012aee:	fa42 f300 	asr.w	r3, r2, r0
 8012af2:	441c      	add	r4, r3
 8012af4:	4083      	lsls	r3, r0
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	aa0c      	add	r2, sp, #48	; 0x30
 8012afa:	f1c8 0017 	rsb	r0, r8, #23
 8012afe:	9404      	str	r4, [sp, #16]
 8012b00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012b04:	fa43 fa00 	asr.w	sl, r3, r0
 8012b08:	e00f      	b.n	8012b2a <__kernel_rem_pio2+0x202>
 8012b0a:	d107      	bne.n	8012b1c <__kernel_rem_pio2+0x1f4>
 8012b0c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012b10:	aa0c      	add	r2, sp, #48	; 0x30
 8012b12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012b16:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 8012b1a:	e006      	b.n	8012b2a <__kernel_rem_pio2+0x202>
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	4b44      	ldr	r3, [pc, #272]	; (8012c30 <__kernel_rem_pio2+0x308>)
 8012b20:	f7ee f80c 	bl	8000b3c <__aeabi_dcmpge>
 8012b24:	b928      	cbnz	r0, 8012b32 <__kernel_rem_pio2+0x20a>
 8012b26:	4682      	mov	sl, r0
 8012b28:	e052      	b.n	8012bd0 <__kernel_rem_pio2+0x2a8>
 8012b2a:	f1ba 0f00 	cmp.w	sl, #0
 8012b2e:	dc02      	bgt.n	8012b36 <__kernel_rem_pio2+0x20e>
 8012b30:	e04e      	b.n	8012bd0 <__kernel_rem_pio2+0x2a8>
 8012b32:	f04f 0a02 	mov.w	sl, #2
 8012b36:	9b04      	ldr	r3, [sp, #16]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	4614      	mov	r4, r2
 8012b40:	4593      	cmp	fp, r2
 8012b42:	dd11      	ble.n	8012b68 <__kernel_rem_pio2+0x240>
 8012b44:	ab0c      	add	r3, sp, #48	; 0x30
 8012b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b4a:	b91c      	cbnz	r4, 8012b54 <__kernel_rem_pio2+0x22c>
 8012b4c:	b153      	cbz	r3, 8012b64 <__kernel_rem_pio2+0x23c>
 8012b4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012b52:	e003      	b.n	8012b5c <__kernel_rem_pio2+0x234>
 8012b54:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8012b58:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8012b5c:	a90c      	add	r1, sp, #48	; 0x30
 8012b5e:	2401      	movs	r4, #1
 8012b60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012b64:	3201      	adds	r2, #1
 8012b66:	e7eb      	b.n	8012b40 <__kernel_rem_pio2+0x218>
 8012b68:	f1b8 0f00 	cmp.w	r8, #0
 8012b6c:	dd17      	ble.n	8012b9e <__kernel_rem_pio2+0x276>
 8012b6e:	f1b8 0f01 	cmp.w	r8, #1
 8012b72:	d00a      	beq.n	8012b8a <__kernel_rem_pio2+0x262>
 8012b74:	f1b8 0f02 	cmp.w	r8, #2
 8012b78:	d111      	bne.n	8012b9e <__kernel_rem_pio2+0x276>
 8012b7a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012b7e:	ab0c      	add	r3, sp, #48	; 0x30
 8012b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012b88:	e006      	b.n	8012b98 <__kernel_rem_pio2+0x270>
 8012b8a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012b8e:	ab0c      	add	r3, sp, #48	; 0x30
 8012b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012b98:	a90c      	add	r1, sp, #48	; 0x30
 8012b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012b9e:	f1ba 0f02 	cmp.w	sl, #2
 8012ba2:	d115      	bne.n	8012bd0 <__kernel_rem_pio2+0x2a8>
 8012ba4:	4632      	mov	r2, r6
 8012ba6:	463b      	mov	r3, r7
 8012ba8:	2000      	movs	r0, #0
 8012baa:	4922      	ldr	r1, [pc, #136]	; (8012c34 <__kernel_rem_pio2+0x30c>)
 8012bac:	f7ed fb8c 	bl	80002c8 <__aeabi_dsub>
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	460f      	mov	r7, r1
 8012bb4:	b164      	cbz	r4, 8012bd0 <__kernel_rem_pio2+0x2a8>
 8012bb6:	4640      	mov	r0, r8
 8012bb8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8012c18 <__kernel_rem_pio2+0x2f0>
 8012bbc:	f000 fcf4 	bl	80135a8 <scalbn>
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	4639      	mov	r1, r7
 8012bc4:	ec53 2b10 	vmov	r2, r3, d0
 8012bc8:	f7ed fb7e 	bl	80002c8 <__aeabi_dsub>
 8012bcc:	4606      	mov	r6, r0
 8012bce:	460f      	mov	r7, r1
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	4639      	mov	r1, r7
 8012bd8:	f7ed ff92 	bl	8000b00 <__aeabi_dcmpeq>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d074      	beq.n	8012cca <__kernel_rem_pio2+0x3a2>
 8012be0:	f10b 31ff 	add.w	r1, fp, #4294967295
 8012be4:	460b      	mov	r3, r1
 8012be6:	2200      	movs	r2, #0
 8012be8:	9802      	ldr	r0, [sp, #8]
 8012bea:	4283      	cmp	r3, r0
 8012bec:	db05      	blt.n	8012bfa <__kernel_rem_pio2+0x2d2>
 8012bee:	a80c      	add	r0, sp, #48	; 0x30
 8012bf0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012bf4:	3b01      	subs	r3, #1
 8012bf6:	4302      	orrs	r2, r0
 8012bf8:	e7f6      	b.n	8012be8 <__kernel_rem_pio2+0x2c0>
 8012bfa:	2a00      	cmp	r2, #0
 8012bfc:	d158      	bne.n	8012cb0 <__kernel_rem_pio2+0x388>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	f06f 0103 	mvn.w	r1, #3
 8012c04:	fb01 f203 	mul.w	r2, r1, r3
 8012c08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012c0a:	5882      	ldr	r2, [r0, r2]
 8012c0c:	b9a2      	cbnz	r2, 8012c38 <__kernel_rem_pio2+0x310>
 8012c0e:	3301      	adds	r3, #1
 8012c10:	e7f8      	b.n	8012c04 <__kernel_rem_pio2+0x2dc>
 8012c12:	bf00      	nop
 8012c14:	f3af 8000 	nop.w
 8012c18:	00000000 	.word	0x00000000
 8012c1c:	3ff00000 	.word	0x3ff00000
 8012c20:	080157e4 	.word	0x080157e4
 8012c24:	3e700000 	.word	0x3e700000
 8012c28:	41700000 	.word	0x41700000
 8012c2c:	40200000 	.word	0x40200000
 8012c30:	3fe00000 	.word	0x3fe00000
 8012c34:	3ff00000 	.word	0x3ff00000
 8012c38:	9a08      	ldr	r2, [sp, #32]
 8012c3a:	a998      	add	r1, sp, #608	; 0x260
 8012c3c:	440a      	add	r2, r1
 8012c3e:	3a98      	subs	r2, #152	; 0x98
 8012c40:	9204      	str	r2, [sp, #16]
 8012c42:	9a06      	ldr	r2, [sp, #24]
 8012c44:	445b      	add	r3, fp
 8012c46:	eb02 050b 	add.w	r5, r2, fp
 8012c4a:	aa20      	add	r2, sp, #128	; 0x80
 8012c4c:	f10b 0601 	add.w	r6, fp, #1
 8012c50:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012c54:	9308      	str	r3, [sp, #32]
 8012c56:	9b08      	ldr	r3, [sp, #32]
 8012c58:	429e      	cmp	r6, r3
 8012c5a:	dc27      	bgt.n	8012cac <__kernel_rem_pio2+0x384>
 8012c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012c62:	f7ed fc7f 	bl	8000564 <__aeabi_i2d>
 8012c66:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c6c:	46a9      	mov	r9, r5
 8012c6e:	461c      	mov	r4, r3
 8012c70:	2700      	movs	r7, #0
 8012c72:	f04f 0a00 	mov.w	sl, #0
 8012c76:	f04f 0b00 	mov.w	fp, #0
 8012c7a:	9b05      	ldr	r3, [sp, #20]
 8012c7c:	429f      	cmp	r7, r3
 8012c7e:	dc0f      	bgt.n	8012ca0 <__kernel_rem_pio2+0x378>
 8012c80:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8012c84:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012c88:	f7ed fcd2 	bl	8000630 <__aeabi_dmul>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4650      	mov	r0, sl
 8012c92:	4659      	mov	r1, fp
 8012c94:	f7ed fb1a 	bl	80002cc <__adddf3>
 8012c98:	3701      	adds	r7, #1
 8012c9a:	4682      	mov	sl, r0
 8012c9c:	468b      	mov	fp, r1
 8012c9e:	e7ec      	b.n	8012c7a <__kernel_rem_pio2+0x352>
 8012ca0:	9b04      	ldr	r3, [sp, #16]
 8012ca2:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 8012ca6:	3601      	adds	r6, #1
 8012ca8:	9304      	str	r3, [sp, #16]
 8012caa:	e7d4      	b.n	8012c56 <__kernel_rem_pio2+0x32e>
 8012cac:	469b      	mov	fp, r3
 8012cae:	e6a8      	b.n	8012a02 <__kernel_rem_pio2+0xda>
 8012cb0:	f1a8 0818 	sub.w	r8, r8, #24
 8012cb4:	468b      	mov	fp, r1
 8012cb6:	ab0c      	add	r3, sp, #48	; 0x30
 8012cb8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d13c      	bne.n	8012d3a <__kernel_rem_pio2+0x412>
 8012cc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012cc4:	f1a8 0818 	sub.w	r8, r8, #24
 8012cc8:	e7f5      	b.n	8012cb6 <__kernel_rem_pio2+0x38e>
 8012cca:	f1c8 0000 	rsb	r0, r8, #0
 8012cce:	ec47 6b10 	vmov	d0, r6, r7
 8012cd2:	f000 fc69 	bl	80135a8 <scalbn>
 8012cd6:	ec55 4b10 	vmov	r4, r5, d0
 8012cda:	2200      	movs	r2, #0
 8012cdc:	4bb6      	ldr	r3, [pc, #728]	; (8012fb8 <__kernel_rem_pio2+0x690>)
 8012cde:	ee10 0a10 	vmov	r0, s0
 8012ce2:	4629      	mov	r1, r5
 8012ce4:	f7ed ff2a 	bl	8000b3c <__aeabi_dcmpge>
 8012ce8:	b300      	cbz	r0, 8012d2c <__kernel_rem_pio2+0x404>
 8012cea:	2200      	movs	r2, #0
 8012cec:	4bb3      	ldr	r3, [pc, #716]	; (8012fbc <__kernel_rem_pio2+0x694>)
 8012cee:	4620      	mov	r0, r4
 8012cf0:	4629      	mov	r1, r5
 8012cf2:	f7ed fc9d 	bl	8000630 <__aeabi_dmul>
 8012cf6:	f7ed ff4b 	bl	8000b90 <__aeabi_d2iz>
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	f7ed fc32 	bl	8000564 <__aeabi_i2d>
 8012d00:	2200      	movs	r2, #0
 8012d02:	4bad      	ldr	r3, [pc, #692]	; (8012fb8 <__kernel_rem_pio2+0x690>)
 8012d04:	f7ed fc94 	bl	8000630 <__aeabi_dmul>
 8012d08:	460b      	mov	r3, r1
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f7ed fada 	bl	80002c8 <__aeabi_dsub>
 8012d14:	f7ed ff3c 	bl	8000b90 <__aeabi_d2iz>
 8012d18:	ab0c      	add	r3, sp, #48	; 0x30
 8012d1a:	f108 0818 	add.w	r8, r8, #24
 8012d1e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8012d22:	f10b 0b01 	add.w	fp, fp, #1
 8012d26:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8012d2a:	e006      	b.n	8012d3a <__kernel_rem_pio2+0x412>
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	4629      	mov	r1, r5
 8012d30:	f7ed ff2e 	bl	8000b90 <__aeabi_d2iz>
 8012d34:	ab0c      	add	r3, sp, #48	; 0x30
 8012d36:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8012d3a:	4640      	mov	r0, r8
 8012d3c:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8012fa8 <__kernel_rem_pio2+0x680>
 8012d40:	f000 fc32 	bl	80135a8 <scalbn>
 8012d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012d48:	9305      	str	r3, [sp, #20]
 8012d4a:	9a05      	ldr	r2, [sp, #20]
 8012d4c:	ab98      	add	r3, sp, #608	; 0x260
 8012d4e:	189f      	adds	r7, r3, r2
 8012d50:	ec55 4b10 	vmov	r4, r5, d0
 8012d54:	3f98      	subs	r7, #152	; 0x98
 8012d56:	465e      	mov	r6, fp
 8012d58:	2e00      	cmp	r6, #0
 8012d5a:	db14      	blt.n	8012d86 <__kernel_rem_pio2+0x45e>
 8012d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8012d5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012d62:	f7ed fbff 	bl	8000564 <__aeabi_i2d>
 8012d66:	4622      	mov	r2, r4
 8012d68:	462b      	mov	r3, r5
 8012d6a:	f7ed fc61 	bl	8000630 <__aeabi_dmul>
 8012d6e:	2200      	movs	r2, #0
 8012d70:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012d74:	4b91      	ldr	r3, [pc, #580]	; (8012fbc <__kernel_rem_pio2+0x694>)
 8012d76:	4620      	mov	r0, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	f7ed fc59 	bl	8000630 <__aeabi_dmul>
 8012d7e:	3e01      	subs	r6, #1
 8012d80:	4604      	mov	r4, r0
 8012d82:	460d      	mov	r5, r1
 8012d84:	e7e8      	b.n	8012d58 <__kernel_rem_pio2+0x430>
 8012d86:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 8012d8a:	2400      	movs	r4, #0
 8012d8c:	4645      	mov	r5, r8
 8012d8e:	ebbb 0704 	subs.w	r7, fp, r4
 8012d92:	d424      	bmi.n	8012dde <__kernel_rem_pio2+0x4b6>
 8012d94:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8012fb0 <__kernel_rem_pio2+0x688>
 8012d98:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d9c:	ab70      	add	r3, sp, #448	; 0x1c0
 8012d9e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8012fc0 <__kernel_rem_pio2+0x698>
 8012da2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012da6:	2600      	movs	r6, #0
 8012da8:	9b02      	ldr	r3, [sp, #8]
 8012daa:	429e      	cmp	r6, r3
 8012dac:	dc11      	bgt.n	8012dd2 <__kernel_rem_pio2+0x4aa>
 8012dae:	42a6      	cmp	r6, r4
 8012db0:	dc0f      	bgt.n	8012dd2 <__kernel_rem_pio2+0x4aa>
 8012db2:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8012db6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012dba:	f7ed fc39 	bl	8000630 <__aeabi_dmul>
 8012dbe:	4602      	mov	r2, r0
 8012dc0:	460b      	mov	r3, r1
 8012dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dc6:	f7ed fa81 	bl	80002cc <__adddf3>
 8012dca:	3601      	adds	r6, #1
 8012dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012dd0:	e7ea      	b.n	8012da8 <__kernel_rem_pio2+0x480>
 8012dd2:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012dd6:	3401      	adds	r4, #1
 8012dd8:	eca8 7b02 	vstmia	r8!, {d7}
 8012ddc:	e7d7      	b.n	8012d8e <__kernel_rem_pio2+0x466>
 8012dde:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8012de0:	2b03      	cmp	r3, #3
 8012de2:	f200 80d8 	bhi.w	8012f96 <__kernel_rem_pio2+0x66e>
 8012de6:	e8df f003 	tbb	[pc, r3]
 8012dea:	0810      	.short	0x0810
 8012dec:	0208      	.short	0x0208
 8012dee:	9a05      	ldr	r2, [sp, #20]
 8012df0:	ab48      	add	r3, sp, #288	; 0x120
 8012df2:	189c      	adds	r4, r3, r2
 8012df4:	46a0      	mov	r8, r4
 8012df6:	46d9      	mov	r9, fp
 8012df8:	e056      	b.n	8012ea8 <__kernel_rem_pio2+0x580>
 8012dfa:	9c05      	ldr	r4, [sp, #20]
 8012dfc:	ab48      	add	r3, sp, #288	; 0x120
 8012dfe:	3408      	adds	r4, #8
 8012e00:	441c      	add	r4, r3
 8012e02:	465d      	mov	r5, fp
 8012e04:	2000      	movs	r0, #0
 8012e06:	2100      	movs	r1, #0
 8012e08:	e01d      	b.n	8012e46 <__kernel_rem_pio2+0x51e>
 8012e0a:	9b05      	ldr	r3, [sp, #20]
 8012e0c:	aa98      	add	r2, sp, #608	; 0x260
 8012e0e:	4413      	add	r3, r2
 8012e10:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8012e14:	2000      	movs	r0, #0
 8012e16:	2100      	movs	r1, #0
 8012e18:	f1bb 0f00 	cmp.w	fp, #0
 8012e1c:	db06      	blt.n	8012e2c <__kernel_rem_pio2+0x504>
 8012e1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e22:	f7ed fa53 	bl	80002cc <__adddf3>
 8012e26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012e2a:	e7f5      	b.n	8012e18 <__kernel_rem_pio2+0x4f0>
 8012e2c:	f1ba 0f00 	cmp.w	sl, #0
 8012e30:	d003      	beq.n	8012e3a <__kernel_rem_pio2+0x512>
 8012e32:	4602      	mov	r2, r0
 8012e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e38:	e001      	b.n	8012e3e <__kernel_rem_pio2+0x516>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	9901      	ldr	r1, [sp, #4]
 8012e40:	e9c1 2300 	strd	r2, r3, [r1]
 8012e44:	e0a7      	b.n	8012f96 <__kernel_rem_pio2+0x66e>
 8012e46:	2d00      	cmp	r5, #0
 8012e48:	db05      	blt.n	8012e56 <__kernel_rem_pio2+0x52e>
 8012e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e4e:	f7ed fa3d 	bl	80002cc <__adddf3>
 8012e52:	3d01      	subs	r5, #1
 8012e54:	e7f7      	b.n	8012e46 <__kernel_rem_pio2+0x51e>
 8012e56:	f1ba 0f00 	cmp.w	sl, #0
 8012e5a:	d003      	beq.n	8012e64 <__kernel_rem_pio2+0x53c>
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e62:	e001      	b.n	8012e68 <__kernel_rem_pio2+0x540>
 8012e64:	4602      	mov	r2, r0
 8012e66:	460b      	mov	r3, r1
 8012e68:	9c01      	ldr	r4, [sp, #4]
 8012e6a:	e9c4 2300 	strd	r2, r3, [r4]
 8012e6e:	4602      	mov	r2, r0
 8012e70:	460b      	mov	r3, r1
 8012e72:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012e76:	f7ed fa27 	bl	80002c8 <__aeabi_dsub>
 8012e7a:	ad4a      	add	r5, sp, #296	; 0x128
 8012e7c:	2401      	movs	r4, #1
 8012e7e:	45a3      	cmp	fp, r4
 8012e80:	db05      	blt.n	8012e8e <__kernel_rem_pio2+0x566>
 8012e82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012e86:	f7ed fa21 	bl	80002cc <__adddf3>
 8012e8a:	3401      	adds	r4, #1
 8012e8c:	e7f7      	b.n	8012e7e <__kernel_rem_pio2+0x556>
 8012e8e:	f1ba 0f00 	cmp.w	sl, #0
 8012e92:	d003      	beq.n	8012e9c <__kernel_rem_pio2+0x574>
 8012e94:	4602      	mov	r2, r0
 8012e96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e9a:	e001      	b.n	8012ea0 <__kernel_rem_pio2+0x578>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	9901      	ldr	r1, [sp, #4]
 8012ea2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8012ea6:	e076      	b.n	8012f96 <__kernel_rem_pio2+0x66e>
 8012ea8:	f1b9 0f00 	cmp.w	r9, #0
 8012eac:	dd20      	ble.n	8012ef0 <__kernel_rem_pio2+0x5c8>
 8012eae:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8012eb2:	ed98 7b02 	vldr	d7, [r8, #8]
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	ec53 2b17 	vmov	r2, r3, d7
 8012ebc:	4639      	mov	r1, r7
 8012ebe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ec2:	f7ed fa03 	bl	80002cc <__adddf3>
 8012ec6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012eca:	4602      	mov	r2, r0
 8012ecc:	460b      	mov	r3, r1
 8012ece:	4630      	mov	r0, r6
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	f7ed f9f9 	bl	80002c8 <__aeabi_dsub>
 8012ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012eda:	f7ed f9f7 	bl	80002cc <__adddf3>
 8012ede:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012ee2:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ee6:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8012eea:	ed88 7b00 	vstr	d7, [r8]
 8012eee:	e7db      	b.n	8012ea8 <__kernel_rem_pio2+0x580>
 8012ef0:	465e      	mov	r6, fp
 8012ef2:	2e01      	cmp	r6, #1
 8012ef4:	dd1f      	ble.n	8012f36 <__kernel_rem_pio2+0x60e>
 8012ef6:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 8012efa:	ed94 7b02 	vldr	d7, [r4, #8]
 8012efe:	4640      	mov	r0, r8
 8012f00:	ec53 2b17 	vmov	r2, r3, d7
 8012f04:	4649      	mov	r1, r9
 8012f06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f0a:	f7ed f9df 	bl	80002cc <__adddf3>
 8012f0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012f12:	4602      	mov	r2, r0
 8012f14:	460b      	mov	r3, r1
 8012f16:	4640      	mov	r0, r8
 8012f18:	4649      	mov	r1, r9
 8012f1a:	f7ed f9d5 	bl	80002c8 <__aeabi_dsub>
 8012f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f22:	f7ed f9d3 	bl	80002cc <__adddf3>
 8012f26:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012f2a:	3e01      	subs	r6, #1
 8012f2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f30:	ed84 7b00 	vstr	d7, [r4]
 8012f34:	e7dd      	b.n	8012ef2 <__kernel_rem_pio2+0x5ca>
 8012f36:	9c05      	ldr	r4, [sp, #20]
 8012f38:	ab48      	add	r3, sp, #288	; 0x120
 8012f3a:	3408      	adds	r4, #8
 8012f3c:	441c      	add	r4, r3
 8012f3e:	2000      	movs	r0, #0
 8012f40:	2100      	movs	r1, #0
 8012f42:	f1bb 0f01 	cmp.w	fp, #1
 8012f46:	dd06      	ble.n	8012f56 <__kernel_rem_pio2+0x62e>
 8012f48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012f4c:	f7ed f9be 	bl	80002cc <__adddf3>
 8012f50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012f54:	e7f5      	b.n	8012f42 <__kernel_rem_pio2+0x61a>
 8012f56:	f1ba 0f00 	cmp.w	sl, #0
 8012f5a:	d10b      	bne.n	8012f74 <__kernel_rem_pio2+0x64c>
 8012f5c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8012f60:	9c01      	ldr	r4, [sp, #4]
 8012f62:	e9c4 2300 	strd	r2, r3, [r4]
 8012f66:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8012f6a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8012f6e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012f72:	e010      	b.n	8012f96 <__kernel_rem_pio2+0x66e>
 8012f74:	9a01      	ldr	r2, [sp, #4]
 8012f76:	682b      	ldr	r3, [r5, #0]
 8012f78:	6013      	str	r3, [r2, #0]
 8012f7a:	686b      	ldr	r3, [r5, #4]
 8012f7c:	6110      	str	r0, [r2, #16]
 8012f7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f82:	6053      	str	r3, [r2, #4]
 8012f84:	68ab      	ldr	r3, [r5, #8]
 8012f86:	6093      	str	r3, [r2, #8]
 8012f88:	68eb      	ldr	r3, [r5, #12]
 8012f8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f8e:	60d3      	str	r3, [r2, #12]
 8012f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f94:	6153      	str	r3, [r2, #20]
 8012f96:	9b04      	ldr	r3, [sp, #16]
 8012f98:	f003 0007 	and.w	r0, r3, #7
 8012f9c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa4:	f3af 8000 	nop.w
 8012fa8:	00000000 	.word	0x00000000
 8012fac:	3ff00000 	.word	0x3ff00000
	...
 8012fb8:	41700000 	.word	0x41700000
 8012fbc:	3e700000 	.word	0x3e700000
 8012fc0:	080157f8 	.word	0x080157f8
 8012fc4:	00000000 	.word	0x00000000

08012fc8 <__kernel_sin>:
 8012fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	ec55 4b10 	vmov	r4, r5, d0
 8012fd0:	b085      	sub	sp, #20
 8012fd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012fd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012fda:	ed8d 1b00 	vstr	d1, [sp]
 8012fde:	9002      	str	r0, [sp, #8]
 8012fe0:	da07      	bge.n	8012ff2 <__kernel_sin+0x2a>
 8012fe2:	ee10 0a10 	vmov	r0, s0
 8012fe6:	4629      	mov	r1, r5
 8012fe8:	f7ed fdd2 	bl	8000b90 <__aeabi_d2iz>
 8012fec:	2800      	cmp	r0, #0
 8012fee:	f000 8081 	beq.w	80130f4 <__kernel_sin+0x12c>
 8012ff2:	4622      	mov	r2, r4
 8012ff4:	462b      	mov	r3, r5
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed fb19 	bl	8000630 <__aeabi_dmul>
 8012ffe:	4682      	mov	sl, r0
 8013000:	468b      	mov	fp, r1
 8013002:	4602      	mov	r2, r0
 8013004:	460b      	mov	r3, r1
 8013006:	4620      	mov	r0, r4
 8013008:	4629      	mov	r1, r5
 801300a:	f7ed fb11 	bl	8000630 <__aeabi_dmul>
 801300e:	a341      	add	r3, pc, #260	; (adr r3, 8013114 <__kernel_sin+0x14c>)
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	4680      	mov	r8, r0
 8013016:	4689      	mov	r9, r1
 8013018:	4650      	mov	r0, sl
 801301a:	4659      	mov	r1, fp
 801301c:	f7ed fb08 	bl	8000630 <__aeabi_dmul>
 8013020:	a33e      	add	r3, pc, #248	; (adr r3, 801311c <__kernel_sin+0x154>)
 8013022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013026:	f7ed f94f 	bl	80002c8 <__aeabi_dsub>
 801302a:	4652      	mov	r2, sl
 801302c:	465b      	mov	r3, fp
 801302e:	f7ed faff 	bl	8000630 <__aeabi_dmul>
 8013032:	a33c      	add	r3, pc, #240	; (adr r3, 8013124 <__kernel_sin+0x15c>)
 8013034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013038:	f7ed f948 	bl	80002cc <__adddf3>
 801303c:	4652      	mov	r2, sl
 801303e:	465b      	mov	r3, fp
 8013040:	f7ed faf6 	bl	8000630 <__aeabi_dmul>
 8013044:	a339      	add	r3, pc, #228	; (adr r3, 801312c <__kernel_sin+0x164>)
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	f7ed f93d 	bl	80002c8 <__aeabi_dsub>
 801304e:	4652      	mov	r2, sl
 8013050:	465b      	mov	r3, fp
 8013052:	f7ed faed 	bl	8000630 <__aeabi_dmul>
 8013056:	a337      	add	r3, pc, #220	; (adr r3, 8013134 <__kernel_sin+0x16c>)
 8013058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305c:	f7ed f936 	bl	80002cc <__adddf3>
 8013060:	9b02      	ldr	r3, [sp, #8]
 8013062:	4606      	mov	r6, r0
 8013064:	460f      	mov	r7, r1
 8013066:	b99b      	cbnz	r3, 8013090 <__kernel_sin+0xc8>
 8013068:	4602      	mov	r2, r0
 801306a:	460b      	mov	r3, r1
 801306c:	4650      	mov	r0, sl
 801306e:	4659      	mov	r1, fp
 8013070:	f7ed fade 	bl	8000630 <__aeabi_dmul>
 8013074:	a324      	add	r3, pc, #144	; (adr r3, 8013108 <__kernel_sin+0x140>)
 8013076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307a:	f7ed f925 	bl	80002c8 <__aeabi_dsub>
 801307e:	4642      	mov	r2, r8
 8013080:	464b      	mov	r3, r9
 8013082:	f7ed fad5 	bl	8000630 <__aeabi_dmul>
 8013086:	4622      	mov	r2, r4
 8013088:	462b      	mov	r3, r5
 801308a:	f7ed f91f 	bl	80002cc <__adddf3>
 801308e:	e033      	b.n	80130f8 <__kernel_sin+0x130>
 8013090:	2200      	movs	r2, #0
 8013092:	4b1f      	ldr	r3, [pc, #124]	; (8013110 <__kernel_sin+0x148>)
 8013094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013098:	f7ed faca 	bl	8000630 <__aeabi_dmul>
 801309c:	4632      	mov	r2, r6
 801309e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130a2:	463b      	mov	r3, r7
 80130a4:	4640      	mov	r0, r8
 80130a6:	4649      	mov	r1, r9
 80130a8:	f7ed fac2 	bl	8000630 <__aeabi_dmul>
 80130ac:	4602      	mov	r2, r0
 80130ae:	460b      	mov	r3, r1
 80130b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130b4:	f7ed f908 	bl	80002c8 <__aeabi_dsub>
 80130b8:	4652      	mov	r2, sl
 80130ba:	465b      	mov	r3, fp
 80130bc:	f7ed fab8 	bl	8000630 <__aeabi_dmul>
 80130c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130c4:	f7ed f900 	bl	80002c8 <__aeabi_dsub>
 80130c8:	a30f      	add	r3, pc, #60	; (adr r3, 8013108 <__kernel_sin+0x140>)
 80130ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ce:	4606      	mov	r6, r0
 80130d0:	460f      	mov	r7, r1
 80130d2:	4640      	mov	r0, r8
 80130d4:	4649      	mov	r1, r9
 80130d6:	f7ed faab 	bl	8000630 <__aeabi_dmul>
 80130da:	4602      	mov	r2, r0
 80130dc:	460b      	mov	r3, r1
 80130de:	4630      	mov	r0, r6
 80130e0:	4639      	mov	r1, r7
 80130e2:	f7ed f8f3 	bl	80002cc <__adddf3>
 80130e6:	4602      	mov	r2, r0
 80130e8:	460b      	mov	r3, r1
 80130ea:	4620      	mov	r0, r4
 80130ec:	4629      	mov	r1, r5
 80130ee:	f7ed f8eb 	bl	80002c8 <__aeabi_dsub>
 80130f2:	e001      	b.n	80130f8 <__kernel_sin+0x130>
 80130f4:	4620      	mov	r0, r4
 80130f6:	4629      	mov	r1, r5
 80130f8:	ec41 0b10 	vmov	d0, r0, r1
 80130fc:	b005      	add	sp, #20
 80130fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013102:	bf00      	nop
 8013104:	f3af 8000 	nop.w
 8013108:	55555549 	.word	0x55555549
 801310c:	3fc55555 	.word	0x3fc55555
 8013110:	3fe00000 	.word	0x3fe00000
 8013114:	5acfd57c 	.word	0x5acfd57c
 8013118:	3de5d93a 	.word	0x3de5d93a
 801311c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013120:	3e5ae5e6 	.word	0x3e5ae5e6
 8013124:	57b1fe7d 	.word	0x57b1fe7d
 8013128:	3ec71de3 	.word	0x3ec71de3
 801312c:	19c161d5 	.word	0x19c161d5
 8013130:	3f2a01a0 	.word	0x3f2a01a0
 8013134:	1110f8a6 	.word	0x1110f8a6
 8013138:	3f811111 	.word	0x3f811111
 801313c:	00000000 	.word	0x00000000

08013140 <atan>:
 8013140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013144:	ec55 4b10 	vmov	r4, r5, d0
 8013148:	4bc5      	ldr	r3, [pc, #788]	; (8013460 <atan+0x320>)
 801314a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801314e:	429e      	cmp	r6, r3
 8013150:	46ab      	mov	fp, r5
 8013152:	dd13      	ble.n	801317c <atan+0x3c>
 8013154:	4ac3      	ldr	r2, [pc, #780]	; (8013464 <atan+0x324>)
 8013156:	4296      	cmp	r6, r2
 8013158:	dc01      	bgt.n	801315e <atan+0x1e>
 801315a:	d107      	bne.n	801316c <atan+0x2c>
 801315c:	b134      	cbz	r4, 801316c <atan+0x2c>
 801315e:	4622      	mov	r2, r4
 8013160:	462b      	mov	r3, r5
 8013162:	4620      	mov	r0, r4
 8013164:	4629      	mov	r1, r5
 8013166:	f7ed f8b1 	bl	80002cc <__adddf3>
 801316a:	e13c      	b.n	80133e6 <atan+0x2a6>
 801316c:	f1bb 0f00 	cmp.w	fp, #0
 8013170:	f300 8133 	bgt.w	80133da <atan+0x29a>
 8013174:	a19e      	add	r1, pc, #632	; (adr r1, 80133f0 <atan+0x2b0>)
 8013176:	e9d1 0100 	ldrd	r0, r1, [r1]
 801317a:	e134      	b.n	80133e6 <atan+0x2a6>
 801317c:	4bba      	ldr	r3, [pc, #744]	; (8013468 <atan+0x328>)
 801317e:	429e      	cmp	r6, r3
 8013180:	dc14      	bgt.n	80131ac <atan+0x6c>
 8013182:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013186:	429e      	cmp	r6, r3
 8013188:	f300 8082 	bgt.w	8013290 <atan+0x150>
 801318c:	a39a      	add	r3, pc, #616	; (adr r3, 80133f8 <atan+0x2b8>)
 801318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013192:	ee10 0a10 	vmov	r0, s0
 8013196:	4629      	mov	r1, r5
 8013198:	f7ed f898 	bl	80002cc <__adddf3>
 801319c:	2200      	movs	r2, #0
 801319e:	4bb3      	ldr	r3, [pc, #716]	; (801346c <atan+0x32c>)
 80131a0:	f7ed fcd6 	bl	8000b50 <__aeabi_dcmpgt>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	f040 811c 	bne.w	80133e2 <atan+0x2a2>
 80131aa:	e071      	b.n	8013290 <atan+0x150>
 80131ac:	f000 f96c 	bl	8013488 <fabs>
 80131b0:	4baf      	ldr	r3, [pc, #700]	; (8013470 <atan+0x330>)
 80131b2:	429e      	cmp	r6, r3
 80131b4:	ec55 4b10 	vmov	r4, r5, d0
 80131b8:	dc3d      	bgt.n	8013236 <atan+0xf6>
 80131ba:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80131be:	429e      	cmp	r6, r3
 80131c0:	dc1f      	bgt.n	8013202 <atan+0xc2>
 80131c2:	ee10 2a10 	vmov	r2, s0
 80131c6:	ee10 0a10 	vmov	r0, s0
 80131ca:	462b      	mov	r3, r5
 80131cc:	4629      	mov	r1, r5
 80131ce:	f7ed f87d 	bl	80002cc <__adddf3>
 80131d2:	2200      	movs	r2, #0
 80131d4:	4ba5      	ldr	r3, [pc, #660]	; (801346c <atan+0x32c>)
 80131d6:	f7ed f877 	bl	80002c8 <__aeabi_dsub>
 80131da:	2200      	movs	r2, #0
 80131dc:	4606      	mov	r6, r0
 80131de:	460f      	mov	r7, r1
 80131e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80131e4:	4620      	mov	r0, r4
 80131e6:	4629      	mov	r1, r5
 80131e8:	f7ed f870 	bl	80002cc <__adddf3>
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4630      	mov	r0, r6
 80131f2:	4639      	mov	r1, r7
 80131f4:	f7ed fb46 	bl	8000884 <__aeabi_ddiv>
 80131f8:	f04f 0a00 	mov.w	sl, #0
 80131fc:	4604      	mov	r4, r0
 80131fe:	460d      	mov	r5, r1
 8013200:	e048      	b.n	8013294 <atan+0x154>
 8013202:	ee10 0a10 	vmov	r0, s0
 8013206:	2200      	movs	r2, #0
 8013208:	4b98      	ldr	r3, [pc, #608]	; (801346c <atan+0x32c>)
 801320a:	4629      	mov	r1, r5
 801320c:	f7ed f85c 	bl	80002c8 <__aeabi_dsub>
 8013210:	2200      	movs	r2, #0
 8013212:	4606      	mov	r6, r0
 8013214:	460f      	mov	r7, r1
 8013216:	4b95      	ldr	r3, [pc, #596]	; (801346c <atan+0x32c>)
 8013218:	4620      	mov	r0, r4
 801321a:	4629      	mov	r1, r5
 801321c:	f7ed f856 	bl	80002cc <__adddf3>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4630      	mov	r0, r6
 8013226:	4639      	mov	r1, r7
 8013228:	f7ed fb2c 	bl	8000884 <__aeabi_ddiv>
 801322c:	f04f 0a01 	mov.w	sl, #1
 8013230:	4604      	mov	r4, r0
 8013232:	460d      	mov	r5, r1
 8013234:	e02e      	b.n	8013294 <atan+0x154>
 8013236:	4b8f      	ldr	r3, [pc, #572]	; (8013474 <atan+0x334>)
 8013238:	429e      	cmp	r6, r3
 801323a:	dc1d      	bgt.n	8013278 <atan+0x138>
 801323c:	ee10 0a10 	vmov	r0, s0
 8013240:	2200      	movs	r2, #0
 8013242:	4b8d      	ldr	r3, [pc, #564]	; (8013478 <atan+0x338>)
 8013244:	4629      	mov	r1, r5
 8013246:	f7ed f83f 	bl	80002c8 <__aeabi_dsub>
 801324a:	2200      	movs	r2, #0
 801324c:	4606      	mov	r6, r0
 801324e:	460f      	mov	r7, r1
 8013250:	4b89      	ldr	r3, [pc, #548]	; (8013478 <atan+0x338>)
 8013252:	4620      	mov	r0, r4
 8013254:	4629      	mov	r1, r5
 8013256:	f7ed f9eb 	bl	8000630 <__aeabi_dmul>
 801325a:	2200      	movs	r2, #0
 801325c:	4b83      	ldr	r3, [pc, #524]	; (801346c <atan+0x32c>)
 801325e:	f7ed f835 	bl	80002cc <__adddf3>
 8013262:	4602      	mov	r2, r0
 8013264:	460b      	mov	r3, r1
 8013266:	4630      	mov	r0, r6
 8013268:	4639      	mov	r1, r7
 801326a:	f7ed fb0b 	bl	8000884 <__aeabi_ddiv>
 801326e:	f04f 0a02 	mov.w	sl, #2
 8013272:	4604      	mov	r4, r0
 8013274:	460d      	mov	r5, r1
 8013276:	e00d      	b.n	8013294 <atan+0x154>
 8013278:	462b      	mov	r3, r5
 801327a:	ee10 2a10 	vmov	r2, s0
 801327e:	2000      	movs	r0, #0
 8013280:	497e      	ldr	r1, [pc, #504]	; (801347c <atan+0x33c>)
 8013282:	f7ed faff 	bl	8000884 <__aeabi_ddiv>
 8013286:	f04f 0a03 	mov.w	sl, #3
 801328a:	4604      	mov	r4, r0
 801328c:	460d      	mov	r5, r1
 801328e:	e001      	b.n	8013294 <atan+0x154>
 8013290:	f04f 3aff 	mov.w	sl, #4294967295
 8013294:	4622      	mov	r2, r4
 8013296:	462b      	mov	r3, r5
 8013298:	4620      	mov	r0, r4
 801329a:	4629      	mov	r1, r5
 801329c:	f7ed f9c8 	bl	8000630 <__aeabi_dmul>
 80132a0:	4602      	mov	r2, r0
 80132a2:	460b      	mov	r3, r1
 80132a4:	4680      	mov	r8, r0
 80132a6:	4689      	mov	r9, r1
 80132a8:	f7ed f9c2 	bl	8000630 <__aeabi_dmul>
 80132ac:	a354      	add	r3, pc, #336	; (adr r3, 8013400 <atan+0x2c0>)
 80132ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b2:	4606      	mov	r6, r0
 80132b4:	460f      	mov	r7, r1
 80132b6:	f7ed f9bb 	bl	8000630 <__aeabi_dmul>
 80132ba:	a353      	add	r3, pc, #332	; (adr r3, 8013408 <atan+0x2c8>)
 80132bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c0:	f7ed f804 	bl	80002cc <__adddf3>
 80132c4:	4632      	mov	r2, r6
 80132c6:	463b      	mov	r3, r7
 80132c8:	f7ed f9b2 	bl	8000630 <__aeabi_dmul>
 80132cc:	a350      	add	r3, pc, #320	; (adr r3, 8013410 <atan+0x2d0>)
 80132ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d2:	f7ec fffb 	bl	80002cc <__adddf3>
 80132d6:	4632      	mov	r2, r6
 80132d8:	463b      	mov	r3, r7
 80132da:	f7ed f9a9 	bl	8000630 <__aeabi_dmul>
 80132de:	a34e      	add	r3, pc, #312	; (adr r3, 8013418 <atan+0x2d8>)
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	f7ec fff2 	bl	80002cc <__adddf3>
 80132e8:	4632      	mov	r2, r6
 80132ea:	463b      	mov	r3, r7
 80132ec:	f7ed f9a0 	bl	8000630 <__aeabi_dmul>
 80132f0:	a34b      	add	r3, pc, #300	; (adr r3, 8013420 <atan+0x2e0>)
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	f7ec ffe9 	bl	80002cc <__adddf3>
 80132fa:	4632      	mov	r2, r6
 80132fc:	463b      	mov	r3, r7
 80132fe:	f7ed f997 	bl	8000630 <__aeabi_dmul>
 8013302:	a349      	add	r3, pc, #292	; (adr r3, 8013428 <atan+0x2e8>)
 8013304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013308:	f7ec ffe0 	bl	80002cc <__adddf3>
 801330c:	4642      	mov	r2, r8
 801330e:	464b      	mov	r3, r9
 8013310:	f7ed f98e 	bl	8000630 <__aeabi_dmul>
 8013314:	a346      	add	r3, pc, #280	; (adr r3, 8013430 <atan+0x2f0>)
 8013316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331a:	4680      	mov	r8, r0
 801331c:	4689      	mov	r9, r1
 801331e:	4630      	mov	r0, r6
 8013320:	4639      	mov	r1, r7
 8013322:	f7ed f985 	bl	8000630 <__aeabi_dmul>
 8013326:	a344      	add	r3, pc, #272	; (adr r3, 8013438 <atan+0x2f8>)
 8013328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332c:	f7ec ffcc 	bl	80002c8 <__aeabi_dsub>
 8013330:	4632      	mov	r2, r6
 8013332:	463b      	mov	r3, r7
 8013334:	f7ed f97c 	bl	8000630 <__aeabi_dmul>
 8013338:	a341      	add	r3, pc, #260	; (adr r3, 8013440 <atan+0x300>)
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	f7ec ffc3 	bl	80002c8 <__aeabi_dsub>
 8013342:	4632      	mov	r2, r6
 8013344:	463b      	mov	r3, r7
 8013346:	f7ed f973 	bl	8000630 <__aeabi_dmul>
 801334a:	a33f      	add	r3, pc, #252	; (adr r3, 8013448 <atan+0x308>)
 801334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013350:	f7ec ffba 	bl	80002c8 <__aeabi_dsub>
 8013354:	4632      	mov	r2, r6
 8013356:	463b      	mov	r3, r7
 8013358:	f7ed f96a 	bl	8000630 <__aeabi_dmul>
 801335c:	a33c      	add	r3, pc, #240	; (adr r3, 8013450 <atan+0x310>)
 801335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013362:	f7ec ffb1 	bl	80002c8 <__aeabi_dsub>
 8013366:	4632      	mov	r2, r6
 8013368:	463b      	mov	r3, r7
 801336a:	f7ed f961 	bl	8000630 <__aeabi_dmul>
 801336e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013372:	4602      	mov	r2, r0
 8013374:	460b      	mov	r3, r1
 8013376:	d10e      	bne.n	8013396 <atan+0x256>
 8013378:	4640      	mov	r0, r8
 801337a:	4649      	mov	r1, r9
 801337c:	f7ec ffa6 	bl	80002cc <__adddf3>
 8013380:	4622      	mov	r2, r4
 8013382:	462b      	mov	r3, r5
 8013384:	f7ed f954 	bl	8000630 <__aeabi_dmul>
 8013388:	4602      	mov	r2, r0
 801338a:	460b      	mov	r3, r1
 801338c:	4620      	mov	r0, r4
 801338e:	4629      	mov	r1, r5
 8013390:	f7ec ff9a 	bl	80002c8 <__aeabi_dsub>
 8013394:	e027      	b.n	80133e6 <atan+0x2a6>
 8013396:	4640      	mov	r0, r8
 8013398:	4649      	mov	r1, r9
 801339a:	f7ec ff97 	bl	80002cc <__adddf3>
 801339e:	4622      	mov	r2, r4
 80133a0:	462b      	mov	r3, r5
 80133a2:	f7ed f945 	bl	8000630 <__aeabi_dmul>
 80133a6:	4e36      	ldr	r6, [pc, #216]	; (8013480 <atan+0x340>)
 80133a8:	4b36      	ldr	r3, [pc, #216]	; (8013484 <atan+0x344>)
 80133aa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80133ae:	4456      	add	r6, sl
 80133b0:	449a      	add	sl, r3
 80133b2:	e9da 2300 	ldrd	r2, r3, [sl]
 80133b6:	f7ec ff87 	bl	80002c8 <__aeabi_dsub>
 80133ba:	4622      	mov	r2, r4
 80133bc:	462b      	mov	r3, r5
 80133be:	f7ec ff83 	bl	80002c8 <__aeabi_dsub>
 80133c2:	4602      	mov	r2, r0
 80133c4:	460b      	mov	r3, r1
 80133c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80133ca:	f7ec ff7d 	bl	80002c8 <__aeabi_dsub>
 80133ce:	f1bb 0f00 	cmp.w	fp, #0
 80133d2:	da08      	bge.n	80133e6 <atan+0x2a6>
 80133d4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80133d8:	e005      	b.n	80133e6 <atan+0x2a6>
 80133da:	a11f      	add	r1, pc, #124	; (adr r1, 8013458 <atan+0x318>)
 80133dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e0:	e001      	b.n	80133e6 <atan+0x2a6>
 80133e2:	4620      	mov	r0, r4
 80133e4:	4629      	mov	r1, r5
 80133e6:	ec41 0b10 	vmov	d0, r0, r1
 80133ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ee:	bf00      	nop
 80133f0:	54442d18 	.word	0x54442d18
 80133f4:	bff921fb 	.word	0xbff921fb
 80133f8:	8800759c 	.word	0x8800759c
 80133fc:	7e37e43c 	.word	0x7e37e43c
 8013400:	e322da11 	.word	0xe322da11
 8013404:	3f90ad3a 	.word	0x3f90ad3a
 8013408:	24760deb 	.word	0x24760deb
 801340c:	3fa97b4b 	.word	0x3fa97b4b
 8013410:	a0d03d51 	.word	0xa0d03d51
 8013414:	3fb10d66 	.word	0x3fb10d66
 8013418:	c54c206e 	.word	0xc54c206e
 801341c:	3fb745cd 	.word	0x3fb745cd
 8013420:	920083ff 	.word	0x920083ff
 8013424:	3fc24924 	.word	0x3fc24924
 8013428:	5555550d 	.word	0x5555550d
 801342c:	3fd55555 	.word	0x3fd55555
 8013430:	2c6a6c2f 	.word	0x2c6a6c2f
 8013434:	bfa2b444 	.word	0xbfa2b444
 8013438:	52defd9a 	.word	0x52defd9a
 801343c:	3fadde2d 	.word	0x3fadde2d
 8013440:	af749a6d 	.word	0xaf749a6d
 8013444:	3fb3b0f2 	.word	0x3fb3b0f2
 8013448:	fe231671 	.word	0xfe231671
 801344c:	3fbc71c6 	.word	0x3fbc71c6
 8013450:	9998ebc4 	.word	0x9998ebc4
 8013454:	3fc99999 	.word	0x3fc99999
 8013458:	54442d18 	.word	0x54442d18
 801345c:	3ff921fb 	.word	0x3ff921fb
 8013460:	440fffff 	.word	0x440fffff
 8013464:	7ff00000 	.word	0x7ff00000
 8013468:	3fdbffff 	.word	0x3fdbffff
 801346c:	3ff00000 	.word	0x3ff00000
 8013470:	3ff2ffff 	.word	0x3ff2ffff
 8013474:	40037fff 	.word	0x40037fff
 8013478:	3ff80000 	.word	0x3ff80000
 801347c:	bff00000 	.word	0xbff00000
 8013480:	08015858 	.word	0x08015858
 8013484:	08015838 	.word	0x08015838

08013488 <fabs>:
 8013488:	ec53 2b10 	vmov	r2, r3, d0
 801348c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013490:	ec43 2b10 	vmov	d0, r2, r3
 8013494:	4770      	bx	lr
	...

08013498 <floor>:
 8013498:	ec51 0b10 	vmov	r0, r1, d0
 801349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80134a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80134a8:	2e13      	cmp	r6, #19
 80134aa:	ee10 8a10 	vmov	r8, s0
 80134ae:	460c      	mov	r4, r1
 80134b0:	ee10 5a10 	vmov	r5, s0
 80134b4:	dc33      	bgt.n	801351e <floor+0x86>
 80134b6:	2e00      	cmp	r6, #0
 80134b8:	da16      	bge.n	80134e8 <floor+0x50>
 80134ba:	a335      	add	r3, pc, #212	; (adr r3, 8013590 <floor+0xf8>)
 80134bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c0:	f7ec ff04 	bl	80002cc <__adddf3>
 80134c4:	2200      	movs	r2, #0
 80134c6:	2300      	movs	r3, #0
 80134c8:	f7ed fb42 	bl	8000b50 <__aeabi_dcmpgt>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d057      	beq.n	8013580 <floor+0xe8>
 80134d0:	2c00      	cmp	r4, #0
 80134d2:	da53      	bge.n	801357c <floor+0xe4>
 80134d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80134d8:	ea53 0308 	orrs.w	r3, r3, r8
 80134dc:	4b2e      	ldr	r3, [pc, #184]	; (8013598 <floor+0x100>)
 80134de:	f04f 0500 	mov.w	r5, #0
 80134e2:	bf18      	it	ne
 80134e4:	461c      	movne	r4, r3
 80134e6:	e04b      	b.n	8013580 <floor+0xe8>
 80134e8:	4f2c      	ldr	r7, [pc, #176]	; (801359c <floor+0x104>)
 80134ea:	4137      	asrs	r7, r6
 80134ec:	ea01 0307 	and.w	r3, r1, r7
 80134f0:	4303      	orrs	r3, r0
 80134f2:	d047      	beq.n	8013584 <floor+0xec>
 80134f4:	a326      	add	r3, pc, #152	; (adr r3, 8013590 <floor+0xf8>)
 80134f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fa:	f7ec fee7 	bl	80002cc <__adddf3>
 80134fe:	2200      	movs	r2, #0
 8013500:	2300      	movs	r3, #0
 8013502:	f7ed fb25 	bl	8000b50 <__aeabi_dcmpgt>
 8013506:	b3d8      	cbz	r0, 8013580 <floor+0xe8>
 8013508:	2c00      	cmp	r4, #0
 801350a:	bfbe      	ittt	lt
 801350c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013510:	fa43 f606 	asrlt.w	r6, r3, r6
 8013514:	19a4      	addlt	r4, r4, r6
 8013516:	ea24 0407 	bic.w	r4, r4, r7
 801351a:	2500      	movs	r5, #0
 801351c:	e030      	b.n	8013580 <floor+0xe8>
 801351e:	2e33      	cmp	r6, #51	; 0x33
 8013520:	dd08      	ble.n	8013534 <floor+0x9c>
 8013522:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013526:	d12d      	bne.n	8013584 <floor+0xec>
 8013528:	ee10 2a10 	vmov	r2, s0
 801352c:	460b      	mov	r3, r1
 801352e:	f7ec fecd 	bl	80002cc <__adddf3>
 8013532:	e027      	b.n	8013584 <floor+0xec>
 8013534:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013538:	f04f 33ff 	mov.w	r3, #4294967295
 801353c:	fa23 f707 	lsr.w	r7, r3, r7
 8013540:	4238      	tst	r0, r7
 8013542:	d01f      	beq.n	8013584 <floor+0xec>
 8013544:	a312      	add	r3, pc, #72	; (adr r3, 8013590 <floor+0xf8>)
 8013546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354a:	f7ec febf 	bl	80002cc <__adddf3>
 801354e:	2200      	movs	r2, #0
 8013550:	2300      	movs	r3, #0
 8013552:	f7ed fafd 	bl	8000b50 <__aeabi_dcmpgt>
 8013556:	b198      	cbz	r0, 8013580 <floor+0xe8>
 8013558:	2c00      	cmp	r4, #0
 801355a:	da0c      	bge.n	8013576 <floor+0xde>
 801355c:	2e14      	cmp	r6, #20
 801355e:	d101      	bne.n	8013564 <floor+0xcc>
 8013560:	3401      	adds	r4, #1
 8013562:	e008      	b.n	8013576 <floor+0xde>
 8013564:	2301      	movs	r3, #1
 8013566:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801356a:	fa03 f606 	lsl.w	r6, r3, r6
 801356e:	4435      	add	r5, r6
 8013570:	45a8      	cmp	r8, r5
 8013572:	bf88      	it	hi
 8013574:	18e4      	addhi	r4, r4, r3
 8013576:	ea25 0507 	bic.w	r5, r5, r7
 801357a:	e001      	b.n	8013580 <floor+0xe8>
 801357c:	2500      	movs	r5, #0
 801357e:	462c      	mov	r4, r5
 8013580:	4621      	mov	r1, r4
 8013582:	4628      	mov	r0, r5
 8013584:	ec41 0b10 	vmov	d0, r0, r1
 8013588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801358c:	f3af 8000 	nop.w
 8013590:	8800759c 	.word	0x8800759c
 8013594:	7e37e43c 	.word	0x7e37e43c
 8013598:	bff00000 	.word	0xbff00000
 801359c:	000fffff 	.word	0x000fffff

080135a0 <matherr>:
 80135a0:	2000      	movs	r0, #0
 80135a2:	4770      	bx	lr
 80135a4:	0000      	movs	r0, r0
	...

080135a8 <scalbn>:
 80135a8:	b570      	push	{r4, r5, r6, lr}
 80135aa:	ec55 4b10 	vmov	r4, r5, d0
 80135ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80135b2:	4606      	mov	r6, r0
 80135b4:	462b      	mov	r3, r5
 80135b6:	b9a2      	cbnz	r2, 80135e2 <scalbn+0x3a>
 80135b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80135bc:	4323      	orrs	r3, r4
 80135be:	d059      	beq.n	8013674 <scalbn+0xcc>
 80135c0:	2200      	movs	r2, #0
 80135c2:	4b33      	ldr	r3, [pc, #204]	; (8013690 <scalbn+0xe8>)
 80135c4:	4629      	mov	r1, r5
 80135c6:	ee10 0a10 	vmov	r0, s0
 80135ca:	f7ed f831 	bl	8000630 <__aeabi_dmul>
 80135ce:	4a31      	ldr	r2, [pc, #196]	; (8013694 <scalbn+0xec>)
 80135d0:	4296      	cmp	r6, r2
 80135d2:	4604      	mov	r4, r0
 80135d4:	460d      	mov	r5, r1
 80135d6:	460b      	mov	r3, r1
 80135d8:	da0f      	bge.n	80135fa <scalbn+0x52>
 80135da:	a329      	add	r3, pc, #164	; (adr r3, 8013680 <scalbn+0xd8>)
 80135dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e0:	e045      	b.n	801366e <scalbn+0xc6>
 80135e2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80135e6:	428a      	cmp	r2, r1
 80135e8:	d10a      	bne.n	8013600 <scalbn+0x58>
 80135ea:	ee10 2a10 	vmov	r2, s0
 80135ee:	462b      	mov	r3, r5
 80135f0:	4620      	mov	r0, r4
 80135f2:	4629      	mov	r1, r5
 80135f4:	f7ec fe6a 	bl	80002cc <__adddf3>
 80135f8:	e03e      	b.n	8013678 <scalbn+0xd0>
 80135fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80135fe:	3a36      	subs	r2, #54	; 0x36
 8013600:	4432      	add	r2, r6
 8013602:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013606:	428a      	cmp	r2, r1
 8013608:	dd02      	ble.n	8013610 <scalbn+0x68>
 801360a:	ec45 4b11 	vmov	d1, r4, r5
 801360e:	e011      	b.n	8013634 <scalbn+0x8c>
 8013610:	2a00      	cmp	r2, #0
 8013612:	dd06      	ble.n	8013622 <scalbn+0x7a>
 8013614:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013618:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801361c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013620:	e028      	b.n	8013674 <scalbn+0xcc>
 8013622:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013626:	da17      	bge.n	8013658 <scalbn+0xb0>
 8013628:	f24c 3350 	movw	r3, #50000	; 0xc350
 801362c:	429e      	cmp	r6, r3
 801362e:	ec45 4b11 	vmov	d1, r4, r5
 8013632:	dd07      	ble.n	8013644 <scalbn+0x9c>
 8013634:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8013688 <scalbn+0xe0>
 8013638:	f000 f830 	bl	801369c <copysign>
 801363c:	a312      	add	r3, pc, #72	; (adr r3, 8013688 <scalbn+0xe0>)
 801363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013642:	e006      	b.n	8013652 <scalbn+0xaa>
 8013644:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013680 <scalbn+0xd8>
 8013648:	f000 f828 	bl	801369c <copysign>
 801364c:	a30c      	add	r3, pc, #48	; (adr r3, 8013680 <scalbn+0xd8>)
 801364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013652:	ec51 0b10 	vmov	r0, r1, d0
 8013656:	e00a      	b.n	801366e <scalbn+0xc6>
 8013658:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801365c:	3236      	adds	r2, #54	; 0x36
 801365e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013662:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013666:	4b0c      	ldr	r3, [pc, #48]	; (8013698 <scalbn+0xf0>)
 8013668:	4620      	mov	r0, r4
 801366a:	4629      	mov	r1, r5
 801366c:	2200      	movs	r2, #0
 801366e:	f7ec ffdf 	bl	8000630 <__aeabi_dmul>
 8013672:	e001      	b.n	8013678 <scalbn+0xd0>
 8013674:	4620      	mov	r0, r4
 8013676:	4629      	mov	r1, r5
 8013678:	ec41 0b10 	vmov	d0, r0, r1
 801367c:	bd70      	pop	{r4, r5, r6, pc}
 801367e:	bf00      	nop
 8013680:	c2f8f359 	.word	0xc2f8f359
 8013684:	01a56e1f 	.word	0x01a56e1f
 8013688:	8800759c 	.word	0x8800759c
 801368c:	7e37e43c 	.word	0x7e37e43c
 8013690:	43500000 	.word	0x43500000
 8013694:	ffff3cb0 	.word	0xffff3cb0
 8013698:	3c900000 	.word	0x3c900000

0801369c <copysign>:
 801369c:	ec53 2b10 	vmov	r2, r3, d0
 80136a0:	ee11 0a90 	vmov	r0, s3
 80136a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80136a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80136ac:	ea41 0300 	orr.w	r3, r1, r0
 80136b0:	ec43 2b10 	vmov	d0, r2, r3
 80136b4:	4770      	bx	lr
	...

080136b8 <_init>:
 80136b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ba:	bf00      	nop
 80136bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136be:	bc08      	pop	{r3}
 80136c0:	469e      	mov	lr, r3
 80136c2:	4770      	bx	lr

080136c4 <_fini>:
 80136c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c6:	bf00      	nop
 80136c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ca:	bc08      	pop	{r3}
 80136cc:	469e      	mov	lr, r3
 80136ce:	4770      	bx	lr
